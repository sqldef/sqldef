CreateTable:
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text,
      age integer
    );
    CREATE TABLE bigdata (
      data bigint
    );
DropTable:
  current: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text,
      age integer
    );
    CREATE TABLE bigdata (
      data bigint
    );
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text,
      age integer
    );
  output: |
    DROP TABLE "public"."bigdata";
EmptyTable:
  desired: |
    CREATE TABLE public.test ();
CreateTableWithDefault:
  desired: |
    CREATE TABLE users (
      profile character varying(50) NOT NULL DEFAULT ''::character varying,
      default_int int default 20,
      default_bool bool default true,
      default_numeric numeric(5) default 42.195,
      default_fixed_char character(3) default 'JPN'::bpchar,
      default_text text default ''::text,
      default_json json default '[]'::json,
      default_jsonb jsonb default '[]'::jsonb,
      default_current_timestamp timestamp default CURRENT_TIMESTAMP,
      default_current_date date default CURRENT_DATE,
      default_current_time time default CURRENT_TIME,
      joined_at timestamp with time zone NOT NULL DEFAULT '0001-01-01 00:00:00'::timestamp without time zone,
      created_at timestamp with time zone DEFAULT now()
    );
CreateTableChangeDefaultBoolean:
  current: |
    CREATE TABLE test (
      col boolean default true
    );
  desired: |
    CREATE TABLE test (
      col boolean default false
    );
  output: |
    ALTER TABLE "public"."test" ALTER COLUMN "col" SET DEFAULT false;
CastBpchar:
  desired: |
    CREATE TABLE public.dummy_table (
      "col" character(30)
    );
    CREATE VIEW public.dummy_view AS SELECT dummy_table.col FROM dummy_table WHERE (dummy_table.col <> 'dummy value'::bpchar);
ParseTextCheckConstraint:
  current: |
    CREATE TABLE test (
      col text NOT NULL CHECK (col <> ''::text)
    );
  desired: |
    CREATE TABLE test (
      col text NOT NULL
    );
  output: |
    ALTER TABLE "public"."test" DROP CONSTRAINT test_col_check;
NullCast:
  desired: |
    CREATE TABLE public.test (
      "item" character varying(16) DEFAULT NULL
    );
NumericCast:
  desired: |
    CREATE TABLE public.test_table (
      "item" numeric
    );
    CREATE VIEW public.test_view AS SELECT t.item FROM test_table t WHERE (t.item = (0)::numeric);
CreateIndexConcurrently:
  current: |
    CREATE TABLE users (
      id BIGINT NOT NULL PRIMARY KEY,
      name VARCHAR(128) DEFAULT 'konsumer'
    );
  desired: |
    CREATE TABLE users (
      id BIGINT NOT NULL PRIMARY KEY,
      name VARCHAR(128) DEFAULT 'konsumer'
    );
    CREATE INDEX CONCURRENTLY username on users (name);
  output: |
    CREATE INDEX CONCURRENTLY username on users (name);
AlterTypeAddValue:
  current: |
    CREATE TYPE eventtype AS ENUM (
      'example',
      'send_message'
    );

    CREATE TABLE events (
      id UUID NOT NULL PRIMARY KEY,
      event_type eventtype NOT NULL
    );
  desired: |
    CREATE TYPE eventtype AS ENUM (
      'example',
      'send_message',
      'send_meeting_options',
      'update_reactionslot'
    );

    CREATE TABLE events (
      id UUID NOT NULL PRIMARY KEY,
      event_type eventtype NOT NULL
    );
  output: |
    ALTER TYPE public.eventtype ADD VALUE 'send_meeting_options';
    ALTER TYPE public.eventtype ADD VALUE 'update_reactionslot';
  min_version: '12'
UUIDCast:
  desired: |
    CREATE TABLE public.test_table (
      "id" uuid NOT NULL,
      "tenant_id" uuid NOT NULL,
      PRIMARY KEY ("id", "tenant_id")
    );
    CREATE POLICY tenant_isolation_policy ON test_table AS PERMISSIVE FOR ALL TO public
    USING (current_schema()::uuid = current_database()::uuid);
CreateIndexWithoutName:
  desired: |
    CREATE TABLE "user" (id BIGINT NOT NULL);
    CREATE INDEX ON "user" (id);
TypeColumn:
  desired: |
    CREATE TABLE "public"."test_table" (
      "id" bigint NOT NULL,
      "type" character varying(10)
    );
    CREATE VIEW public.test_view AS SELECT test_table.id, test_table."type" FROM test_table;
PosixRegexCheckConstraint:
  current: |
    CREATE TABLE test (
      posix_regex        text NOT NULL CHECK (posix_regex        ~   '[0-9]'),
      posix_regex_ci     text NOT NULL CHECK (posix_regex_ci     ~*  '[0-9]'),
      posix_not_regex    text NOT NULL CHECK (posix_not_regex    !~  '[0-9]'),
      posix_not_regex_ci text NOT NULL CHECK (posix_not_regex_ci !~* '[0-9]')
    );
  desired: |
    CREATE TABLE test (
      posix_regex        text NOT NULL CHECK (posix_regex        ~   '[a-z]'),
      posix_regex_ci     text NOT NULL CHECK (posix_regex_ci     ~*  '[a-z]'),
      posix_not_regex    text NOT NULL CHECK (posix_not_regex    !~  '[a-z]'),
      posix_not_regex_ci text NOT NULL CHECK (posix_not_regex_ci !~* '[a-z]')
    );
  output: |
    ALTER TABLE "public"."test" DROP CONSTRAINT test_posix_regex_check;
    ALTER TABLE "public"."test" ADD CONSTRAINT test_posix_regex_check CHECK (posix_regex ~ '[a-z]');
    ALTER TABLE "public"."test" DROP CONSTRAINT test_posix_regex_ci_check;
    ALTER TABLE "public"."test" ADD CONSTRAINT test_posix_regex_ci_check CHECK (posix_regex_ci ~* '[a-z]');
    ALTER TABLE "public"."test" DROP CONSTRAINT test_posix_not_regex_check;
    ALTER TABLE "public"."test" ADD CONSTRAINT test_posix_not_regex_check CHECK (posix_not_regex !~ '[a-z]');
    ALTER TABLE "public"."test" DROP CONSTRAINT test_posix_not_regex_ci_check;
    ALTER TABLE "public"."test" ADD CONSTRAINT test_posix_not_regex_ci_check CHECK (posix_not_regex_ci !~* '[a-z]');
ForeignKeyOnReservedName:
  current: |
    CREATE TABLE "public"."variables" (
      "id" character varying(100) NOT NULL,
      "compaby_id" character varying(100) NOT NULL,
      PRIMARY KEY ("id")
    );

    CREATE TABLE "public"."users" (
      "id" character varying(100) NOT NULL,
      "variable_id" character varying(100) NOT NULL,
      "name" character varying(100),
      PRIMARY KEY ("id")
    );
  desired: |
    CREATE TABLE IF NOT EXISTS variables (
      id VARCHAR(100) PRIMARY KEY,
      compaby_id VARCHAR(100) NOT NULL REFERENCES companies(id)
    );

    CREATE TABLE IF NOT EXISTS users (
        id VARCHAR(100) PRIMARY KEY,
        variable_id VARCHAR(100) NOT NULL,
        name VARCHAR(100),
        CONSTRAINT users_variable_id_fk FOREIGN KEY (variable_id) REFERENCES variables(id)
    );
  output: |
    ALTER TABLE "public"."users" ADD CONSTRAINT "users_variable_id_fk" FOREIGN KEY ("variable_id") REFERENCES "public"."variables" ("id");
NumericChangePrecisionAndScale:
  current: |
    CREATE TABLE test (
      num numeric (10, 3)
    );
  desired: |
    CREATE TABLE test (
      num numeric (10, 2)
    );
  output: |
    ALTER TABLE "public"."test" ALTER COLUMN "num" TYPE numeric(10, 2);
CheckTypeCast:
  current: |
    CREATE TABLE test (
      v varchar(10) NOT NULL
    );
  desired: |
    CREATE TABLE test (
      v varchar(10) NOT NULL CHECK (v::text ~ '[0-9]')
    );
  output: |
    ALTER TABLE "public"."test" ADD CONSTRAINT test_v_check CHECK (v::text ~ '[0-9]');
CompositeForeignKeyConstraint:
  current: |
    CREATE TABLE t1 (
      id1 int not null,
      id2 int not null,
      PRIMARY KEY (id1, id2)
    );
    CREATE TABLE t2 (
      id1 int not null,
      id2 int not null,
      PRIMARY KEY (id1, id2)
    );
  desired: |
    CREATE TABLE t1 (
      id1 int not null,
      id2 int not null,
      PRIMARY KEY (id1, id2)
    );
    CREATE TABLE t2 (
      id1 int not null,
      id2 int not null,
      PRIMARY KEY (id1, id2),
      CONSTRAINT fk FOREIGN KEY (id1, id2) REFERENCES t1 (id1, id2)
    );
  output: |
    ALTER TABLE "public"."t2" ADD CONSTRAINT "fk" FOREIGN KEY ("id1","id2") REFERENCES "public"."t1" ("id1","id2");
MaterializedView:
  desired: |
    CREATE TABLE points (id bigint);
    CREATE MATERIALIZED VIEW IF NOT EXISTS points_view AS SELECT id FROM points;
IntervalExpression:
  desired: |
    CREATE TABLE points (id bigint, created_at timestamp, main_type text, sub_type text, user_id bigint);
    CREATE MATERIALIZED VIEW IF NOT EXISTS points_view AS
    SELECT * FROM points
    WHERE id IN (
      SELECT MAX(id) AS id
      FROM points
      WHERE to_timestamp(concat(to_char(current_date - INTERVAL '1 YEAR' + INTERVAL '1 DAY', 'YYYY-MM-DD'), ' 00:00:00'), 'YYYY-MM-DD HH24:MI:SS') < created_at
      AND created_at <= to_timestamp(concat(to_char(current_date, 'YYYY-MM-DD'), ' 23:59:59'), 'YYYY-MM-DD HH24:MI:SS')
      GROUP BY main_type, sub_type, user_id
    );
MaterializedViewIndex:
  desired: |
    CREATE TABLE IF NOT EXISTS points (
        id          BIGINT        PRIMARY KEY,
        tenant_id   BIGINT        NOT NULL,
        user_id     VARCHAR(100)  NOT NULL,
        point_type  SMALLINT      NOT NULL,
        point_value SMALLINT      NOT NULL,
        created_at  TIMESTAMP     NOT NULL,
        updated_at  TIMESTAMP     NOT NULL
    );
    CREATE INDEX points_idx ON points (tenant_id, user_id, point_type);
    CREATE MATERIALIZED VIEW IF NOT EXISTS points_view AS
        SELECT * FROM points
        WHERE id IN (SELECT MAX(id) AS id
            FROM points
            GROUP BY point_type, user_id);
    CREATE INDEX points_view_idx ON points_view (tenant_id);
Comment:
  current: |
    CREATE TABLE "public"."hoge" (
      "id" bigserial NOT NULL,
      "foo" text NOT NULL DEFAULT ''::text,
      PRIMARY KEY ("id")
    );
  desired: |
    CREATE TABLE "public"."hoge" (
        "id" bigserial NOT NULL,
        "foo" text NOT NULL DEFAULT ''::text,
        PRIMARY KEY ("id")
    );

    COMMENT ON TABLE hoge is 'hoge table';
    COMMENT ON COLUMN hoge.id is 'hoge id';
    COMMENT ON COLUMN hoge.foo is 'foo comment';
  output: |
    COMMENT ON TABLE hoge is 'hoge table';
    COMMENT ON COLUMN hoge.id is 'hoge id';
    COMMENT ON COLUMN hoge.foo is 'foo comment';
MultipleComments:
  current: |
    CREATE TABLE "public"."hoge" (
      "id" bigserial NOT NULL,
      PRIMARY KEY ("id")
    );
    CREATE TABLE "public"."bar" (
      "id" bigserial NOT NULL,
      PRIMARY KEY ("id")
    );

    COMMENT ON COLUMN hoge.id is 'hoge id';
  desired: |
    CREATE TABLE "public"."hoge" (
      "id" bigserial NOT NULL,
      PRIMARY KEY ("id")
    );
    CREATE TABLE "public"."bar" (
      "id" bigserial NOT NULL,
      PRIMARY KEY ("id")
    );

    COMMENT ON COLUMN hoge.id is 'hoge id';
    COMMENT ON COLUMN bar.id is 'bar id';
  output: |
    COMMENT ON COLUMN bar.id is 'bar id';
CreateViewCast:
  current: |
    CREATE TABLE "public"."hoge" (
      "amount" text
    );
    CREATE VIEW public.hoge_view AS SELECT (hoge.amount)::numeric(10,2) AS amount_num FROM hoge;
  desired: |
    create table hoge (
      amount text
    );

    create view hoge_view as
    select
      amount::numeric(10,2) as amount_num
    from hoge;
  output: ''
CreateExtension:
  current: |
    CREATE EXTENSION pgcrypto;
  desired: |
    CREATE EXTENSION pgcrypto;
    CREATE EXTENSION btree_gist;
  output: |
    CREATE EXTENSION btree_gist;
DropExtension:
  current: |
    CREATE EXTENSION pgcrypto;
    CREATE EXTENSION btree_gist;
  desired:
    CREATE EXTENSION btree_gist;
  output: |
    DROP EXTENSION "pgcrypto";
CreateExtensionIfNotExists:
  desired: |
    CREATE EXTENSION IF NOT EXISTS pgcrypto;
  output: |
    CREATE EXTENSION IF NOT EXISTS pgcrypto;
CreateViewWithCaseWhen:
  desired: |
    create table hoge (
      amount  text,
      hoge_type text,
      payload jsonb
    );
    create view hoge_view as
    select
      -- pattern 1
      amount::numeric(10,2) as amount_num1,
      -- pattern 2
      (
        jsonb_extract_path_text(payload, 'amount')
      )::numeric(10,2) as amount_num2,
      -- pattern 3
      (
        case hoge_type
          when 'hoge' then jsonb_extract_path_text(payload, 'hoge', 'amount')
        end
      )::numeric(10,2) as amount_num3,
      -- pattern 4
      (
        to_timestamp(
          jsonb_extract_path_text(payload, 'created')::bigint
        )
      ) as created,
      -- pattern 5
      (
        cast(
          to_timestamp(
            jsonb_extract_path_text(payload, 'created')::bigint
          ) as date
        )
      ) as created_date
    from hoge;
CreateTableAlterColumn:
  current: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text
    );
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name varchar(40)
    );
  output: |
    ALTER TABLE "public"."users" ALTER COLUMN "name" TYPE varchar(40);
CreateTableAddColumn:
  current: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text
    );
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text,
      age integer
    );
  output: |
    ALTER TABLE "public"."users" ADD COLUMN "age" integer;
CreateTableDropColumn:
  current: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text,
      age integer
    );
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL,
      age integer
    );
  output: |
    ALTER TABLE "public"."users" DROP COLUMN "name";
IndexesOnExpressions:
  current: |
    CREATE TABLE public.test (
      col JSONB
    );
  desired: |
    CREATE TABLE public.test (
      col JSONB
    );
    CREATE UNIQUE INDEX function_index ON public.test (jsonb_extract_path_text(col, 'foo', 'bar'));
  output: |
    CREATE UNIQUE INDEX function_index ON public.test (jsonb_extract_path_text(col, 'foo', 'bar'));
IndexesOnChangedExpressions:
  current: |
    CREATE TABLE public.test (
      col JSONB
    );
    CREATE UNIQUE INDEX function_index ON public.test (jsonb_extract_path_text(col, 'foo', 'bar'));
  desired: |
    CREATE TABLE public.test (
      col JSONB
    );
    CREATE UNIQUE INDEX function_index ON public.test (jsonb_extract_path_text(col, 'foo'));
  output: |
    DROP INDEX "public"."function_index";
    CREATE UNIQUE INDEX function_index ON public.test (jsonb_extract_path_text(col, 'foo'));
AddArrayColumn:
  current: |
    CREATE TABLE users (
      id integer
    );
  desired: |
    CREATE TABLE users (
      id integer,
      name integer[]
    );
  output: |
    ALTER TABLE "public"."users" ADD COLUMN "name" integer[];
AddForeignKeyWithAlter:
  current: |
    CREATE TABLE users (id BIGINT PRIMARY KEY);
    CREATE TABLE posts (
      content text,
      user_id bigint
    );
  desired: |
    CREATE TABLE users (id BIGINT PRIMARY KEY);
    CREATE TABLE posts (
      content text,
      user_id bigint
    );
    ALTER TABLE ONLY public.posts ADD CONSTRAINT posts_ibfk_1 FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE SET NULL ON UPDATE CASCADE;
  output: |
    ALTER TABLE ONLY public.posts ADD CONSTRAINT posts_ibfk_1 FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE SET NULL ON UPDATE CASCADE;
AddDifferentForeignKeyWithSameName:
  current: |
    CREATE TABLE users (id BIGINT PRIMARY KEY);
    CREATE TABLE posts (
      content text,
      user_id bigint
    );
    ALTER TABLE ONLY public.posts ADD CONSTRAINT posts_ibfk_1 FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE SET NULL ON UPDATE CASCADE;
  desired: |
    CREATE TABLE users (id BIGINT PRIMARY KEY);
    CREATE TABLE posts (
      content text,
      user_id bigint
    );
    ALTER TABLE ONLY public.posts ADD CONSTRAINT posts_ibfk_1 FOREIGN KEY (user_id) REFERENCES users (id) ON UPDATE CASCADE;
  output: |
    ALTER TABLE "public"."posts" DROP CONSTRAINT "posts_ibfk_1";
    ALTER TABLE ONLY public.posts ADD CONSTRAINT posts_ibfk_1 FOREIGN KEY (user_id) REFERENCES users (id) ON UPDATE CASCADE;
