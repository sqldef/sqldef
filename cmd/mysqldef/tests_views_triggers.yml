MysqlSecurityTypeView:
  current: |
    CREATE TABLE `users` (
      `id` bigint(20) NOT NULL,
      `name` varchar(50) NOT NULL
    );
    CREATE TABLE `posts` (
      `id` bigint(20) NOT NULL,
      `user_id` bigint(20) NOT NULL,
      is_deleted tinyint(1)
    );
    CREATE SQL SECURITY DEFINER VIEW `foo` AS select u.id as id, p.id as post_id, 'xxx' as name from (mysqldef_test.users as u join mysqldef_test.posts as p on ((u.id = p.user_id)));
  desired: |
    CREATE TABLE `users` (
      `id` bigint(20) NOT NULL,
      `name` varchar(50) NOT NULL
    );
    CREATE TABLE `posts` (
      `id` bigint(20) NOT NULL,
      `user_id` bigint(20) NOT NULL,
      is_deleted tinyint(1)
    );
    CREATE SQL SECURITY INVOKER VIEW `foo` AS select u.id as id, p.id as post_id, 'xxx' as name from (mysqldef_test.users as u join mysqldef_test.posts as p on ((u.id = p.user_id)));
  output: |
    CREATE OR REPLACE SQL SECURITY INVOKER VIEW `foo` AS select u.id as id, p.id as post_id, 'xxx' as name from (mysqldef_test.users as u join mysqldef_test.posts as p on ((u.id = p.user_id)));
CreateTriggerWithComplexStatements:
  desired: |
    CREATE TABLE test_trigger (
      id int(10) unsigned NOT NULL AUTO_INCREMENT,
      name varchar(255) COLLATE utf8mb4_bin NOT NULL,
      created_at datetime NOT NULL,
      updated_at datetime NOT NULL,
      PRIMARY KEY (id)
    );
    CREATE TRIGGER `test_trigger_BEFORE_UPDATE` before update ON `test_trigger` FOR EACH ROW begin
    if (COALESCE(OLD.name, 0) != COALESCE(NEW.name, 0)) then
    if OLD.name is not null then
    delete from test_trigger where name = OLD.name;
    end if;
    if NEW.name is not null and NEW.id is not null then
    delete from test_trigger where name = OLD.name;
    end if;
    else
    delete from test_trigger where name = OLD.name;
    end if;
    set NEW.updated_at = now();
    end;
  output: |
    CREATE TABLE test_trigger (
      id int(10) unsigned NOT NULL AUTO_INCREMENT,
      name varchar(255) COLLATE utf8mb4_bin NOT NULL,
      created_at datetime NOT NULL,
      updated_at datetime NOT NULL,
      PRIMARY KEY (id)
    );
    CREATE TRIGGER `test_trigger_BEFORE_UPDATE` before update ON `test_trigger` FOR EACH ROW begin
    if (COALESCE(OLD.name, 0) != COALESCE(NEW.name, 0)) then
    if OLD.name is not null then
    delete from test_trigger where name = OLD.name;
    end if;
    if NEW.name is not null and NEW.id is not null then
    delete from test_trigger where name = OLD.name;
    end if;
    else
    delete from test_trigger where name = OLD.name;
    end if;
    set NEW.updated_at = now();
    end;
CreateTriggerWithMultipleStatements:
  desired: |
    CREATE TABLE test_trigger (
      id int(11) NOT NULL AUTO_INCREMENT,
      created_at datetime NOT NULL,
      updated_at datetime NOT NULL,
      modified_at datetime NOT NULL,
      PRIMARY KEY (id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
    CREATE TRIGGER `test_trigger_BEFORE_INSERT` before insert ON `test_trigger` FOR EACH ROW begin
    set NEW.created_at = now();
    set NEW.updated_at = now();
    set NEW.modified_at = now();
    end;
  output: |
    CREATE TABLE test_trigger (
      id int(11) NOT NULL AUTO_INCREMENT,
      created_at datetime NOT NULL,
      updated_at datetime NOT NULL,
      modified_at datetime NOT NULL,
      PRIMARY KEY (id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
    CREATE TRIGGER `test_trigger_BEFORE_INSERT` before insert ON `test_trigger` FOR EACH ROW begin
    set NEW.created_at = now();
    set NEW.updated_at = now();
    set NEW.modified_at = now();
    end;
View:
  desired: |
    CREATE TABLE users (
      id bigint(20) NOT NULL
    );
    CREATE TABLE posts (
      id bigint(20) NOT NULL,
      user_id bigint(20) NOT NULL,
      is_deleted tinyint(1)
    );
    CREATE VIEW foo AS select u.id as id, p.id as post_id from  (mysqldef_test.users as u join mysqldef_test.posts as p on ((u.id = p.user_id)));
  flavor: mysql  # MariaDB shows unexpected view changes in idempotency tests
ViewUpdate:
  current: |
    CREATE TABLE users (
      id bigint(20) NOT NULL
    );
    CREATE TABLE posts (
      id bigint(20) NOT NULL,
      user_id bigint(20) NOT NULL,
      is_deleted tinyint(1)
    );
    CREATE VIEW foo AS select u.id as id, p.id as post_id from  (mysqldef_test.users as u join mysqldef_test.posts as p on ((u.id = p.user_id)));
  desired: |
    CREATE TABLE users (
      id bigint(20) NOT NULL
    );
    CREATE TABLE posts (
      id bigint(20) NOT NULL,
      user_id bigint(20) NOT NULL,
      is_deleted tinyint(1)
    );
    CREATE VIEW foo AS select u.id as id, p.id as post_id from (mysqldef_test.users as u join mysqldef_test.posts as p on (((u.id = p.user_id) and (p.is_deleted = 0))));
  output: |
    CREATE OR REPLACE VIEW `foo` AS select u.id as id, p.id as post_id from (mysqldef_test.users as u join mysqldef_test.posts as p on (((u.id = p.user_id) and (p.is_deleted = 0))));
  flavor: mysql  # MariaDB handles view formatting differently than MySQL
ViewDropsWhenEmptyDesired:
  current: |
    CREATE TABLE users (
      id bigint(20) NOT NULL
    );
    CREATE TABLE posts (
      id bigint(20) NOT NULL,
      user_id bigint(20) NOT NULL,
      is_deleted tinyint(1)
    );
    CREATE VIEW foo AS select u.id as id, p.id as post_id from (mysqldef_test.users as u join mysqldef_test.posts as p on (((u.id = p.user_id) and (p.is_deleted = 0))));
  desired: |
  output: |
    DROP TABLE `posts`;
    DROP TABLE `users`;
    DROP VIEW `foo`;
  flavor: mysql  # MariaDB shows unexpected view changes in idempotency tests
TriggerInsert:
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text
    );
    CREATE TABLE logs (
      id bigint NOT NULL,
      log varchar(20),
      dt datetime
    );
    CREATE TRIGGER `insert_log` after insert ON `users` FOR EACH ROW insert into log(log, dt) values ('insert', now());
TriggerInsertUpdate:
  current: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text
    );
    CREATE TABLE logs (
      id bigint NOT NULL,
      log varchar(20),
      dt datetime
    );
    CREATE TRIGGER `insert_log` after insert ON `users` FOR EACH ROW insert into log(log, dt) values ('insert', now());
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text
    );
    CREATE TABLE logs (
      id bigint NOT NULL,
      log varchar(20),
      dt datetime
    );
    CREATE TRIGGER `insert_log` after insert ON `users` FOR EACH ROW insert into log(log, dt) values ('insert_users', now());
  output: |
    DROP TRIGGER `insert_log`;
    CREATE TRIGGER `insert_log` after insert ON `users` FOR EACH ROW insert into log(log, dt) values ('insert_users', now());
TriggerInsertBeforeUpdate:
  current: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text
    );
    CREATE TABLE logs (
      id bigint NOT NULL,
      log varchar(20),
      dt datetime
    );
    CREATE TRIGGER `insert_log` after insert ON `users` FOR EACH ROW insert into log(log, dt) values ('insert_users', now());
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text
    );
    CREATE TABLE logs (
      id bigint NOT NULL,
      log varchar(20),
      dt datetime
    );
    CREATE TRIGGER `insert_log` after insert ON `users` FOR EACH ROW insert into log(log, dt) values ('insert_users', now());
    CREATE TRIGGER `insert_log_before_update` before update ON `users` FOR EACH ROW insert into log(log, dt) values ('insert', now());
  output: |
    CREATE TRIGGER `insert_log_before_update` before update ON `users` FOR EACH ROW insert into log(log, dt) values ('insert', now());
TriggerInsertBeforeUpdateChange:
  current: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text
    );
    CREATE TABLE logs (
      id bigint NOT NULL,
      log varchar(20),
      dt datetime
    );
    CREATE TRIGGER `insert_log` after insert ON `users` FOR EACH ROW insert into log(log, dt) values ('insert_users', now());
    CREATE TRIGGER `insert_log_before_update` before update ON `users` FOR EACH ROW insert into log(log, dt) values ('insert', now());
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name text
    );
    CREATE TABLE logs (
      id bigint NOT NULL,
      log varchar(20),
      dt datetime
    );
    CREATE TRIGGER `insert_log` after insert ON `users` FOR EACH ROW insert into log(log, dt) values ('insert_users', now());
    CREATE TRIGGER `insert_log_before_update` before update ON `users` FOR EACH ROW insert into log(log, dt) values ('insert_users', now());
  output: |
    DROP TRIGGER `insert_log_before_update`;
    CREATE TRIGGER `insert_log_before_update` before update ON `users` FOR EACH ROW insert into log(log, dt) values ('insert_users', now());
TriggerSetNew:
  desired: |
    CREATE TABLE users (
      id int unsigned NOT NULL AUTO_INCREMENT,
      name varchar(255) NOT NULL,
      deleted_at timestamp NULL DEFAULT NULL,
      logical_uniqueness tinyint(1) DEFAULT '1',
      PRIMARY KEY (id)
    );
    CREATE TRIGGER `set_logical_uniqueness_on_users` before update ON `users` FOR EACH ROW set NEW.logical_uniqueness = 1;
TriggerSetNewComplex:
  current: |
    CREATE TABLE users (
      id int unsigned NOT NULL AUTO_INCREMENT,
      name varchar(255) NOT NULL,
      deleted_at timestamp NULL DEFAULT NULL,
      logical_uniqueness tinyint(1) DEFAULT '1',
      PRIMARY KEY (id)
    );
    CREATE TRIGGER `set_logical_uniqueness_on_users` before update ON `users` FOR EACH ROW set NEW.logical_uniqueness = 1;
  desired: |
    CREATE TABLE users (
      id int unsigned NOT NULL AUTO_INCREMENT,
      name varchar(255) NOT NULL,
      deleted_at timestamp NULL DEFAULT NULL,
      logical_uniqueness tinyint(1) DEFAULT '1',
      PRIMARY KEY (id)
    );
    CREATE TRIGGER `set_logical_uniqueness_on_users` before update ON `users` FOR EACH ROW set NEW.logical_uniqueness = 1;
    CREATE TRIGGER `set_logical_uniqueness_on_users2` before update ON `users` FOR EACH ROW set NEW.logical_uniqueness = case when NEW.deleted_at is null then 1 when NEW.deleted_at is not null then null end;
  output: |
    CREATE TRIGGER `set_logical_uniqueness_on_users2` before update ON `users` FOR EACH ROW set NEW.logical_uniqueness = case when NEW.deleted_at is null then 1 when NEW.deleted_at is not null then null end;
TriggerBeginEnd:
  desired: |
    CREATE TABLE test_trigger (
      id int(11) NOT NULL AUTO_INCREMENT,
      PRIMARY KEY (id)
    );
    CREATE TRIGGER `BEFORE_UPDATE_test_trigger` before insert ON `test_trigger` FOR EACH ROW begin
    set NEW.id = NEW.id + 10;
    end;
TriggerIf:
  desired: |
    CREATE TABLE test_trigger (
      id int(11) NOT NULL AUTO_INCREMENT,
      set_id int(11) NOT NULL,
      sort_order int(11) NOT NULL,
      PRIMARY KEY (id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
    CREATE TRIGGER `test_trigger_BEFORE_INSERT` before insert ON `test_trigger` FOR EACH ROW begin
    if NEW.sort_order is null or NEW.sort_order = 0 then
    set NEW.sort_order = (select COALESCE(MAX(sort_order) + 1, 1) from test_trigger where set_id = NEW.set_id);
    end if;
    end;
