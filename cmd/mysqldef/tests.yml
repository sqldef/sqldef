CreateTable:
  desired: |
    CREATE TABLE users (
      id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
      name varchar(40) DEFAULT NULL,
      created_at datetime NOT NULL
    );
    CREATE TABLE bigdata (
      data bigint
    );
DropTable:
  current: |
    CREATE TABLE users (
      id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
      name varchar(40) DEFAULT NULL,
      created_at datetime NOT NULL
    );
    CREATE TABLE bigdata (
      data bigint
    );
  desired: |
    CREATE TABLE users (
      id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
      name varchar(40) DEFAULT NULL,
      created_at datetime NOT NULL
    );
  output: |
    DROP TABLE `bigdata`;
CreateTableWithImplicitNotNull:
  desired: |
    CREATE TABLE users (
      id bigint PRIMARY KEY,
      name varchar(40) DEFAULT NULL,
      created_at datetime NOT NULL
    );
CreateTableDropPrimaryKey:
  current: |
    CREATE TABLE users (
      id bigint NOT NULL PRIMARY KEY,
      name varchar(20)
    );
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name varchar(20)
    );
  output: |
    ALTER TABLE `users` DROP PRIMARY KEY;
CreateTableAddPrimaryKeyInColumn:
  current: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name varchar(20)
    );
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name varchar(20) PRIMARY KEY
    );
  output: |
    ALTER TABLE `users` CHANGE COLUMN `name` `name` varchar(20) NOT NULL;
    ALTER TABLE `users` ADD PRIMARY KEY (`name`);
CreateTableAddPrimaryKey:
  current: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name varchar(20)
    );
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL,
      name varchar(20),
      PRIMARY KEY (id)
    );
  output: |
    ALTER TABLE `users` ADD PRIMARY KEY (`id`);
CreateTableAddAutoIncrement:
  current: |
    CREATE TABLE users (
      id bigint(20) NOT NULL PRIMARY KEY,
      name varchar(20)
    );
  desired: |
    CREATE TABLE users (
      id bigint(20) NOT NULL AUTO_INCREMENT PRIMARY KEY,
      name varchar(20)
    );
  output: |
    ALTER TABLE `users` CHANGE COLUMN `id` `id` bigint(20) NOT NULL AUTO_INCREMENT;
CreateTableRemoveAutoIncrement57:
  current: |
    CREATE TABLE users (
      id bigint(20) NOT NULL AUTO_INCREMENT PRIMARY KEY,
      name varchar(20)
    );
  desired: |
    CREATE TABLE users (
      id bigint(20) NOT NULL PRIMARY KEY,
      name varchar(20)
    );
  output: |
    ALTER TABLE `users` CHANGE COLUMN `id` `id` bigint(20) NOT NULL;
  max_version: '5.7'
CreateTableRemoveAutoIncrement80:
  current: |
    CREATE TABLE users (
      id bigint NOT NULL AUTO_INCREMENT PRIMARY KEY,
      name varchar(20)
    );
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL PRIMARY KEY,
      name varchar(20)
    );
  output: |
    ALTER TABLE `users` CHANGE COLUMN `id` `id` bigint NOT NULL;
  min_version: '8.0'
CreateTableRemoveAutoIncrementPrimaryKey57:
  current: |
    CREATE TABLE friends (
      id bigint NOT NULL AUTO_INCREMENT PRIMARY KEY,
      created_at datetime NOT NULL
    );
  desired: |
    CREATE TABLE friends (
      created_at datetime NOT NULL
    );
  output: |
    ALTER TABLE `friends` CHANGE COLUMN `id` `id` bigint(20) NOT NULL;
    ALTER TABLE `friends` DROP PRIMARY KEY;
    ALTER TABLE `friends` DROP COLUMN `id`;
  max_version: '5.7'
CreateTableRemoveAutoIncrementPrimaryKey80:
  current: |
    CREATE TABLE friends (
      id bigint NOT NULL AUTO_INCREMENT PRIMARY KEY,
      created_at datetime NOT NULL
    );
  desired: |
    CREATE TABLE friends (
      created_at datetime NOT NULL
    );
  output: |
    ALTER TABLE `friends` CHANGE COLUMN `id` `id` bigint NOT NULL;
    ALTER TABLE `friends` DROP PRIMARY KEY;
    ALTER TABLE `friends` DROP COLUMN `id`;
  min_version: '8.0'
CreateTableWithAutoIncrementPrimaryKeyAndAddMorePrimaryKey:
  current: |
    CREATE TABLE friends (
      id bigint NOT NULL AUTO_INCREMENT,
      other_id bigint NOT NULL,
      created_at datetime NOT NULL,
      PRIMARY KEY (`id`)
    );
  desired: |
    CREATE TABLE friends (
      id bigint NOT NULL AUTO_INCREMENT,
      other_id bigint NOT NULL,
      created_at datetime NOT NULL,
      PRIMARY KEY (`id`, `other_id`)
    );
  output: |
    ALTER TABLE `friends` CHANGE COLUMN `id` `id` bigint NOT NULL;
    ALTER TABLE `friends` DROP PRIMARY KEY;
    ALTER TABLE `friends` ADD PRIMARY KEY (`id`, `other_id`);
    ALTER TABLE `friends` CHANGE COLUMN `id` `id` bigint NOT NULL AUTO_INCREMENT;
  min_version: '8.0'
CreateTableWithSpatialTypesAndSpatialKey:
  current: |
    CREATE TABLE users (
      id bigint(20) NOT NULL
    );
  desired: |
    CREATE TABLE users (
      id bigint(20) NOT NULL,
      location point NOT NULL,
      SPATIAL KEY index_users_location (location)
    );
  output: |
    ALTER TABLE `users` ADD COLUMN `location` point NOT NULL AFTER `id`;
    ALTER TABLE `users` ADD SPATIAL KEY `index_users_location` (`location`);
CreateTableWithSpatialTypesSRIDSpecified:
  current: |
    CREATE TABLE users (
      id bigint(20) NOT NULL
    );
  desired: |
    CREATE TABLE users (
      id bigint(20) NOT NULL,
      location point NOT NULL /*!80003 SRID 4326 */
    );
  output: |
    ALTER TABLE `users` ADD COLUMN `location` point NOT NULL /*!80003 SRID 4326 */ AFTER `id`;
CreateTableGeneratedAlwaysAs:
  desired: |
    CREATE TABLE test_table (
      id int(11) NOT NULL AUTO_INCREMENT,
      test_value varchar(45) GENERATED ALWAYS AS ('test') VIRTUAL,
      test_expr varchar(45) GENERATED ALWAYS AS (test_value / test_value) VIRTUAL,
      PRIMARY KEY (id)
    );
  max_version: '5.7' # TODO: Make it work with 8.0
ConstraintCheck:
  desired: |
    CREATE TABLE `books` (
      `id` int(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      `type` VARCHAR(255) NOT NULL COMMENT 'manga, novel',
      `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
      `updated_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      `deleted_at` datetime DEFAULT null,
      CONSTRAINT `books_type_chk` CHECK (`type` IN ('manga', 'novel'))
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;
  min_version: '8.0'
ColumnCheck:
  desired: |
    CREATE TABLE `books` (
      `id` int(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      `type` VARCHAR(255) NOT NULL CONSTRAINT `books_type_chk` CHECK (`type` REGEXP '^(manga|novel)$') COMMENT 'manga, novel',
      `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
      `updated_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      `deleted_at` datetime DEFAULT null
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;
  min_version: '8.0'
ForeignKeyNormalizeRestrict:
  desired: |
    CREATE TABLE `groups` (
      `id` BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY
    );
    CREATE TABLE `users` (
      `id` BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
      `group_id` BIGINT NOT NULL,
      KEY `fk_users_groups` (`group_id`),
      CONSTRAINT `fk_users_groups` FOREIGN KEY (`group_id`) REFERENCES `groups` (`id`) ON DELETE RESTRICT ON UPDATE CASCADE
    );
CreateTableUniqueIndex:
  desired: |
    CREATE TABLE items (
      id int NOT NULL,
      created DATE NOT NULL,
      UNIQUE INDEX(id, created)
    );
PartitionByRange:
  desired: |
    CREATE TABLE `users` (
      `uuid` varchar(37) NOT NULL,
      `name` varchar(255) DEFAULT NULL,
      `joined` date NOT NULL,
      PRIMARY KEY (`uuid`,`joined`)
    ) ENGINE=InnoDB DEFAULT CHARSET=latin1
    /*!50100 PARTITION BY RANGE (year(`joined`))
    (PARTITION p202109 VALUES LESS THAN ('2021-10-01'),
     PARTITION p202110 VALUES LESS THAN ('2021-11-01'),
     PARTITION p202111 VALUES LESS THAN ('2021-12-01'),
     PARTITION p202112 VALUES LESS THAN ('2022-01-01'),
     PARTITION pmax VALUES LESS THAN MAXVALUE) */;
  output: |
    CREATE TABLE `users` (
      `uuid` varchar(37) NOT NULL,
      `name` varchar(255) DEFAULT NULL,
      `joined` date NOT NULL,
      PRIMARY KEY (`uuid`,`joined`)
    ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
MysqlComment:
  desired: |
    CREATE TABLE users(
      id bigint NOT NULL /* comment */
    );
SubstrExpression:
  desired: |
    CREATE VIEW modelstart_end AS select substr(min(202006),1,4) AS `c`;
BooleanValue:
  current: |
    CREATE TABLE bools (
      value1 boolean DEFAULT false,
      value2 boolean DEFAULT False,
      value3 boolean DEFAULT true,
      value4 boolean DEFAULT True,
      value5 TINYINT(1) DEFAULT 0,
      value6 TINYINT(1) DEFAULT 0,
      value7 TINYINT(1) DEFAULT 1,
      value8 TINYINT(1) DEFAULT 1
    );
  desired: |
    CREATE TABLE bools (
      value1 boolean DEFAULT false,
      value2 boolean DEFAULT False,
      value3 boolean DEFAULT true,
      value4 boolean DEFAULT True,
      value5 TINYINT(1) DEFAULT 0,
      value6 TINYINT(1) DEFAULT 0,
      value7 TINYINT(1) DEFAULT 1,
      value8 TINYINT(1) DEFAULT 1
    );
  output: |
TableComment:
  current: |
    CREATE TABLE `prefecture` (
      `id` int(11) unsigned NOT NULL COMMENT 'ID',
      `name` varchar(50) NOT NULL COMMENT '都道府県名',
      PRIMARY KEY (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
  desired: |
    CREATE TABLE `prefecture` (
      `id` int(11) unsigned NOT NULL COMMENT 'ID',
      `name` varchar(50) NOT NULL COMMENT '都道府県名',
      PRIMARY KEY (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='都道府県マスター';
  output: |
    ALTER TABLE `prefecture` COMMENT = '都道府県マスター';
UUIDToBin:
  desired: |
    CREATE TABLE users (
      id BINARY(16) NOT NULL DEFAULT (UUID_TO_BIN(UUID())),
      PRIMARY KEY (id)
    );
  min_version: '8.0'
NonReservedColumnName:
  desired: |
    CREATE TABLE global (
      money INT,
      language TEXT,
      json TEXT
    );
MysqlSecurityTypeView:
  current: |
    CREATE TABLE `users` (
      `id` bigint(20) NOT NULL,
      `name` varchar(50) NOT NULL
    );
    CREATE TABLE `posts` (
      `id` bigint(20) NOT NULL,
      `user_id` bigint(20) NOT NULL,
      is_deleted tinyint(1)
    );
    CREATE SQL SECURITY DEFINER VIEW `foo` AS select u.id as id, p.id as post_id, 'xxx' as name from (mysqldef_test.users as u join mysqldef_test.posts as p on ((u.id = p.user_id)));
  desired: |
    CREATE TABLE `users` (
      `id` bigint(20) NOT NULL,
      `name` varchar(50) NOT NULL
    );
    CREATE TABLE `posts` (
      `id` bigint(20) NOT NULL,
      `user_id` bigint(20) NOT NULL,
      is_deleted tinyint(1)
    );
    CREATE SQL SECURITY INVOKER VIEW `foo` AS select u.id as id, p.id as post_id, 'xxx' as name from (mysqldef_test.users as u join mysqldef_test.posts as p on ((u.id = p.user_id)));
  output: |
    CREATE OR REPLACE SQL SECURITY INVOKER VIEW `foo` AS select u.id as id, p.id as post_id, 'xxx' as name from (mysqldef_test.users as u join mysqldef_test.posts as p on ((u.id = p.user_id)));
