CreateTableRemoveAutoIncrement57:
  current: |
    CREATE TABLE users (
      id bigint(20) NOT NULL AUTO_INCREMENT PRIMARY KEY,
      name varchar(20)
    );
  desired: |
    CREATE TABLE users (
      id bigint(20) NOT NULL PRIMARY KEY,
      name varchar(20)
    );
  output: |
    ALTER TABLE `users` CHANGE COLUMN `id` `id` bigint(20) NOT NULL;
  max_version: '5.7'
CreateTableRemoveAutoIncrement80:
  current: |
    CREATE TABLE users (
      id bigint NOT NULL AUTO_INCREMENT PRIMARY KEY,
      name varchar(20)
    );
  desired: |
    CREATE TABLE users (
      id bigint NOT NULL PRIMARY KEY,
      name varchar(20)
    );
  output: |
    ALTER TABLE `users` CHANGE COLUMN `id` `id` bigint NOT NULL;
  min_version: '8.0'
CreateTableRemoveAutoIncrementPrimaryKey57:
  current: |
    CREATE TABLE friends (
      id bigint NOT NULL AUTO_INCREMENT PRIMARY KEY,
      created_at datetime NOT NULL
    );
  desired: |
    CREATE TABLE friends (
      created_at datetime NOT NULL
    );
  output: |
    ALTER TABLE `friends` CHANGE COLUMN `id` `id` bigint(20) NOT NULL;
    ALTER TABLE `friends` DROP PRIMARY KEY;
    ALTER TABLE `friends` DROP COLUMN `id`;
  max_version: '5.7'
CreateTableRemoveAutoIncrementPrimaryKey80:
  current: |
    CREATE TABLE friends (
      id bigint NOT NULL AUTO_INCREMENT PRIMARY KEY,
      created_at datetime NOT NULL
    );
  desired: |
    CREATE TABLE friends (
      created_at datetime NOT NULL
    );
  output: |
    ALTER TABLE `friends` CHANGE COLUMN `id` `id` bigint NOT NULL;
    ALTER TABLE `friends` DROP PRIMARY KEY;
    ALTER TABLE `friends` DROP COLUMN `id`;
  min_version: '8.0'
CreateTableWithAutoIncrementPrimaryKeyAndAddMorePrimaryKey:
  current: |
    CREATE TABLE friends (
      id bigint NOT NULL AUTO_INCREMENT,
      other_id bigint NOT NULL,
      created_at datetime NOT NULL,
      PRIMARY KEY (`id`)
    );
  desired: |
    CREATE TABLE friends (
      id bigint NOT NULL AUTO_INCREMENT,
      other_id bigint NOT NULL,
      created_at datetime NOT NULL,
      PRIMARY KEY (`id`, `other_id`)
    );
  output: |
    ALTER TABLE `friends` CHANGE COLUMN `id` `id` bigint NOT NULL;
    ALTER TABLE `friends` DROP PRIMARY KEY;
    ALTER TABLE `friends` ADD PRIMARY KEY (`id`, `other_id`);
    ALTER TABLE `friends` CHANGE COLUMN `id` `id` bigint NOT NULL AUTO_INCREMENT;
  min_version: '8.0'
CreateTableWithSpatialTypesAndSpatialKey:
  current: |
    CREATE TABLE users (
      id bigint(20) NOT NULL
    );
  desired: |
    CREATE TABLE users (
      id bigint(20) NOT NULL,
      location point NOT NULL,
      SPATIAL KEY index_users_location (location)
    );
  output: |
    ALTER TABLE `users` ADD COLUMN `location` point NOT NULL AFTER `id`;
    ALTER TABLE `users` ADD SPATIAL KEY `index_users_location` (`location`);
CreateTableWithSpatialTypesSRIDSpecified:
  current: |
    CREATE TABLE users (
      id bigint(20) NOT NULL
    );
  desired: |
    CREATE TABLE users (
      id bigint(20) NOT NULL,
      location point NOT NULL /*!80003 SRID 4326 */
    );
  output: |
    ALTER TABLE `users` ADD COLUMN `location` point NOT NULL /*!80003 SRID 4326 */ AFTER `id`;
CreateTableWithKeyBlockSize:
  desired: |
    CREATE TABLE users (
      id BIGINT
    ) KEY_BLOCK_SIZE=8;
PartitionByRange:
  desired: |
    CREATE TABLE `users` (
      `uuid` varchar(37) NOT NULL,
      `name` varchar(255) DEFAULT NULL,
      `joined` date NOT NULL,
      PRIMARY KEY (`uuid`,`joined`)
    ) ENGINE=InnoDB DEFAULT CHARSET=latin1
    /*!50100 PARTITION BY RANGE (year(`joined`))
    (PARTITION p202109 VALUES LESS THAN ('2021-10-01'),
     PARTITION p202110 VALUES LESS THAN ('2021-11-01'),
     PARTITION p202111 VALUES LESS THAN ('2021-12-01'),
     PARTITION p202112 VALUES LESS THAN ('2022-01-01'),
     PARTITION pmax VALUES LESS THAN MAXVALUE) */;
  output: |
    CREATE TABLE `users` (
      `uuid` varchar(37) NOT NULL,
      `name` varchar(255) DEFAULT NULL,
      `joined` date NOT NULL,
      PRIMARY KEY (`uuid`,`joined`)
    ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
MysqlComment:
  desired: |
    CREATE TABLE users(
      id bigint NOT NULL /* comment */
    );
SubstrExpression:
  desired: |
    CREATE VIEW modelstart_end AS select substr(min(202006),1,4) AS `c`;
    CREATE VIEW modelstart_end2 AS select substr(min(202006),1) AS `c`;
    CREATE VIEW modelstart_end3 AS select substr(min(202006) from 1) AS `c`;
    CREATE VIEW modelstart_end4 AS select substr(min(202006) from 1 for 4) AS `c`;
SubstringExpression:
  desired: |
    CREATE VIEW modelstart_end11 AS select substring(min(202006),1,4) AS `c`;
    CREATE VIEW modelstart_end12 AS select substring(min(202006),1) AS `c`;
    CREATE VIEW modelstart_end13 AS select substring(min(202006) from 1) AS `c`;
    CREATE VIEW modelstart_end14 AS select substring(min(202006) from 1 for 4) AS `c`;
UUIDToBin:
  desired: |
    CREATE TABLE users (
      id BINARY(16) NOT NULL DEFAULT (UUID_TO_BIN(UUID())),
      PRIMARY KEY (id)
    );
  min_version: '8.0'
NonReservedColumnName:
  # TODO: broken. they could be non-reserved once we split parsers for each database
  desired: |
    CREATE TABLE `global` (
      `money` INT,
      `language` TEXT,
      `json` TEXT
    );
MysqlViewUsingWindowFuncOnlyOver:
  current: |
    CREATE TABLE prices (
      id bigint(20) NOT NULL,
      item_id bigint(20) NOT NULL,
      price int NOT NULL,
      start_at datetime
    );
    CREATE OR REPLACE VIEW `foo2` AS select p.start_at as end_at from mysqldef_test.prices as p;
  desired: |
    CREATE TABLE prices (
      id bigint(20) NOT NULL,
      item_id bigint(20) NOT NULL,
      price int NOT NULL,
      start_at datetime
    );
    CREATE OR REPLACE VIEW `foo2` AS select p.start_at as end_at0, lead(p.start_at) over() as end_at1, lag(p.start_at) over() as end_at2 from mysqldef_test.prices as p;
  output: |
    CREATE OR REPLACE VIEW `foo2` AS select p.start_at as end_at0, lead(p.start_at) over() as end_at1, lag(p.start_at) over() as end_at2 from mysqldef_test.prices as p;
  min_version: '8.0'
MysqlViewUsingWindowFuncPartitionBy:
  current: |
    CREATE TABLE prices (
      id bigint(20) NOT NULL,
      item_id bigint(20) NOT NULL,
      price int NOT NULL,
      start_at datetime
    );
    CREATE OR REPLACE VIEW `foo2` AS select p.start_at as end_at from mysqldef_test.prices as p;
  desired: |
    CREATE TABLE prices (
      id bigint(20) NOT NULL,
      item_id bigint(20) NOT NULL,
      price int NOT NULL,
      start_at datetime
    );
    CREATE OR REPLACE VIEW `foo2` AS select lead(p.start_at) over(partition by p.start_at) as end_at from mysqldef_test.prices as p;
  output: |
    CREATE OR REPLACE VIEW `foo2` AS select lead(p.start_at) over(partition by p.start_at) as end_at from mysqldef_test.prices as p;
  min_version: '8.0'
MysqlViewUsingWindowFuncOrderBy:
  current: |
    CREATE TABLE prices (
      id bigint(20) NOT NULL,
      item_id bigint(20) NOT NULL,
      price int NOT NULL,
      start_at datetime
    );
    CREATE OR REPLACE VIEW `foo2` AS select p.start_at as end_at from mysqldef_test.prices as p;
  desired: |
    CREATE TABLE prices (
      id bigint(20) NOT NULL,
      item_id bigint(20) NOT NULL,
      price int NOT NULL,
      start_at datetime
    );
    CREATE OR REPLACE VIEW `foo2` AS select lead(p.start_at) over( order by p.start_at asc) as end_at, lead(p.start_at) over( order by p.start_at desc) as end_at2 from mysqldef_test.prices as p;
  output: |
    CREATE OR REPLACE VIEW `foo2` AS select lead(p.start_at) over( order by p.start_at asc) as end_at, lead(p.start_at) over( order by p.start_at desc) as end_at2 from mysqldef_test.prices as p;
  min_version: '8.0'
MysqlViewUsingWindowFuncPartitionByAndOrderBy:
  current: |
    CREATE TABLE prices (
      id bigint(20) NOT NULL,
      item_id bigint(20) NOT NULL,
      price int NOT NULL,
      start_at datetime
    );
    CREATE OR REPLACE VIEW `foo2` AS select p.start_at as end_at from mysqldef_test.prices as p;
  desired: |
    CREATE TABLE prices (
      id bigint(20) NOT NULL,
      item_id bigint(20) NOT NULL,
      price int NOT NULL,
      start_at datetime
    );
    CREATE OR REPLACE VIEW `foo2` AS select lead(p.start_at, 1) over(partition by p.start_at order by p.start_at asc) as end_at from mysqldef_test.prices as p;
  output: |
    CREATE OR REPLACE VIEW `foo2` AS select lead(p.start_at, 1) over(partition by p.start_at order by p.start_at asc) as end_at from mysqldef_test.prices as p;
  min_version: '8.0'
MysqlViewUsingWindowFuncPartitionByAndOrderByAndCoalesce:
  current: |
    CREATE TABLE prices (
      id bigint(20) NOT NULL,
      item_id bigint(20) NOT NULL,
      price int NOT NULL,
      start_at datetime
    );
    CREATE OR REPLACE VIEW `foo2` AS select p.start_at as end_at from mysqldef_test.prices as p;
  desired: |
    CREATE TABLE prices (
      id bigint(20) NOT NULL,
      item_id bigint(20) NOT NULL,
      price int NOT NULL,
      start_at datetime
    );
    CREATE OR REPLACE VIEW `foo2` AS select coalesce(lead(p.start_at, 1) over(partition by p.start_at order by p.start_at asc), '9999-12-31 00:00:00') as end_at from mysqldef_test.prices as p;
  output: |
    CREATE OR REPLACE VIEW `foo2` AS select coalesce(lead(p.start_at, 1) over(partition by p.start_at order by p.start_at asc), '9999-12-31 00:00:00') as end_at from mysqldef_test.prices as p;
  min_version: '8.0'
