// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex any, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex any, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex any, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex any) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex any) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex any) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	statements               []Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
	handlerCondition         HandlerCondition
	handlerConditions        []HandlerCondition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const GRANT = 57457
const REVOKE = 57458
const OPTION = 57459
const PRIVILEGES = 57460
const SCHEMA = 57461
const TABLE = 57462
const INDEX = 57463
const MATERIALIZED = 57464
const VIEW = 57465
const TO = 57466
const IGNORE = 57467
const IF = 57468
const PRIMARY = 57469
const COLUMN = 57470
const CONSTRAINT = 57471
const REFERENCES = 57472
const SPATIAL = 57473
const FULLTEXT = 57474
const FOREIGN = 57475
const KEY_BLOCK_SIZE = 57476
const POLICY = 57477
const WHILE = 57478
const EXTENSION = 57479
const EXCLUDE = 57480
const UNIQUE = 57481
const KEY = 57482
const SHOW = 57483
const DESCRIBE = 57484
const EXPLAIN = 57485
const DATE = 57486
const ESCAPE = 57487
const REPAIR = 57488
const OPTIMIZE = 57489
const TRUNCATE = 57490
const EXEC = 57491
const EXECUTE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const TYPE = 57500
const RETURN = 57501
const STATUS = 57502
const VARIABLES = 57503
const RESTRICT = 57504
const CASCADE = 57505
const NO = 57506
const ACTION = 57507
const PERMISSIVE = 57508
const RESTRICTIVE = 57509
const PUBLIC = 57510
const CURRENT_USER = 57511
const SESSION_USER = 57512
const PAD_INDEX = 57513
const FILLFACTOR = 57514
const IGNORE_DUP_KEY = 57515
const STATISTICS_NORECOMPUTE = 57516
const STATISTICS_INCREMENTAL = 57517
const ALLOW_ROW_LOCKS = 57518
const ALLOW_PAGE_LOCKS = 57519
const DISTANCE = 57520
const M = 57521
const EUCLIDEAN = 57522
const COSINE = 57523
const BEFORE = 57524
const AFTER = 57525
const EACH = 57526
const ROW = 57527
const SCROLL = 57528
const CURSOR = 57529
const OPEN = 57530
const CLOSE = 57531
const FETCH = 57532
const PRIOR = 57533
const FIRST = 57534
const LAST = 57535
const DEALLOCATE = 57536
const INSTEAD = 57537
const OF = 57538
const OUTPUT = 57539
const HANDLER = 57540
const CONTINUE = 57541
const EXIT = 57542
const SQLEXCEPTION = 57543
const SQLWARNING = 57544
const SQLSTATE = 57545
const FOUND = 57546
const DEFERRABLE = 57547
const INITIALLY = 57548
const IMMEDIATE = 57549
const DEFERRED = 57550
const CONCURRENTLY = 57551
const ASYNC = 57552
const SQL = 57553
const SECURITY = 57554
const BEGIN = 57555
const START = 57556
const TRANSACTION = 57557
const COMMIT = 57558
const ROLLBACK = 57559
const BIT = 57560
const TINYINT = 57561
const SMALLINT = 57562
const SMALLSERIAL = 57563
const MEDIUMINT = 57564
const INT = 57565
const INTEGER = 57566
const SERIAL = 57567
const BIGINT = 57568
const BIGSERIAL = 57569
const INTNUM = 57570
const REAL = 57571
const DOUBLE = 57572
const PRECISION = 57573
const FLOAT_TYPE = 57574
const DECIMAL = 57575
const NUMERIC = 57576
const SMALLMONEY = 57577
const MONEY = 57578
const TIME = 57579
const TIMESTAMP = 57580
const DATETIME = 57581
const YEAR = 57582
const DATETIMEOFFSET = 57583
const DATETIME2 = 57584
const SMALLDATETIME = 57585
const CHAR = 57586
const VARCHAR = 57587
const VARYING = 57588
const BOOL = 57589
const CHARACTER = 57590
const VARBINARY = 57591
const NCHAR = 57592
const NVARCHAR = 57593
const NTEXT = 57594
const UUID = 57595
const TEXT = 57596
const TINYTEXT = 57597
const MEDIUMTEXT = 57598
const LONGTEXT = 57599
const CITEXT = 57600
const TSTZRANGE = 57601
const TSRANGE = 57602
const INT4RANGE = 57603
const INT8RANGE = 57604
const NUMRANGE = 57605
const DATERANGE = 57606
const BLOB = 57607
const TINYBLOB = 57608
const MEDIUMBLOB = 57609
const LONGBLOB = 57610
const JSON = 57611
const JSONB = 57612
const ENUM = 57613
const GEOMETRY = 57614
const POINT = 57615
const LINESTRING = 57616
const POLYGON = 57617
const GEOMETRYCOLLECTION = 57618
const MULTIPOINT = 57619
const MULTILINESTRING = 57620
const MULTIPOLYGON = 57621
const VECTOR = 57622
const VARIADIC = 57623
const ARRAY = 57624
const NOW = 57625
const GETDATE = 57626
const BPCHAR = 57627
const TEXT_PATTERN_OPS = 57628
const NULLX = 57629
const AUTO_INCREMENT = 57630
const APPROXNUM = 57631
const SIGNED = 57632
const UNSIGNED = 57633
const ZEROFILL = 57634
const ZONE = 57635
const AUTOINCREMENT = 57636
const DATABASES = 57637
const TABLES = 57638
const VSCHEMA_TABLES = 57639
const EXTENDED = 57640
const FULL = 57641
const PROCESSLIST = 57642
const NAMES = 57643
const CHARSET = 57644
const GLOBAL = 57645
const SESSION = 57646
const ISOLATION = 57647
const LEVEL = 57648
const READ = 57649
const WRITE = 57650
const ONLY = 57651
const REPEATABLE = 57652
const COMMITTED = 57653
const UNCOMMITTED = 57654
const SERIALIZABLE = 57655
const NEW = 57656
const CONCAT_NULL_YIELDS_NULL = 57657
const CURSOR_CLOSE_ON_COMMIT = 57658
const QUOTED_IDENTIFIER = 57659
const ARITHABORT = 57660
const FMTONLY = 57661
const NOCOUNT = 57662
const NOEXEC = 57663
const NUMERIC_ROUNDABORT = 57664
const ANSI_DEFAULTS = 57665
const ANSI_NULL_DFLT_OFF = 57666
const ANSI_NULL_DFLT_ON = 57667
const ANSI_NULLS = 57668
const ANSI_PADDING = 57669
const ANSI_WARNINGS = 57670
const FORCEPLAN = 57671
const SHOWPLAN_ALL = 57672
const SHOWPLAN_TEXT = 57673
const SHOWPLAN_XML = 57674
const IMPLICIT_TRANSACTIONS = 57675
const REMOTE_PROC_TRANSACTIONS = 57676
const XACT_ABORT = 57677
const CURRENT_TIMESTAMP = 57678
const DATABASE = 57679
const CURRENT_DATE = 57680
const CURRENT_TIME = 57681
const LOCALTIME = 57682
const LOCALTIMESTAMP = 57683
const UTC_DATE = 57684
const UTC_TIME = 57685
const UTC_TIMESTAMP = 57686
const REPLACE = 57687
const CONVERT = 57688
const CAST = 57689
const SUBSTR = 57690
const SUBSTRING = 57691
const GROUP_CONCAT = 57692
const SEPARATOR = 57693
const INHERIT = 57694
const LEAD = 57695
const LAG = 57696
const MATCH = 57697
const AGAINST = 57698
const BOOLEAN = 57699
const LANGUAGE = 57700
const WITH = 57701
const WITHOUT = 57702
const PARSER = 57703
const QUERY = 57704
const EXPANSION = 57705
const UNUSED = 57706
const VIRTUAL = 57707
const STORED = 57708
const GENERATED = 57709
const ALWAYS = 57710
const IDENTITY = 57711
const SEQUENCE = 57712
const INCREMENT = 57713
const MINVALUE = 57714
const CACHE = 57715
const CYCLE = 57716
const OWNED = 57717
const NONE = 57718
const CLUSTERED = 57719
const NONCLUSTERED = 57720
const REPLICATION = 57721
const COLUMNSTORE = 57722
const INCLUDE = 57723
const HOLDLOCK = 57724
const NOLOCK = 57725
const NOWAIT = 57726
const PAGLOCK = 57727
const ROWLOCK = 57728
const TABLOCK = 57729
const UPDLOCK = 57730
const READUNCOMMITTED = 57731
const DEFINER = 57732
const INVOKER = 57733
const TYPECAST = 57734
const CHECK = 57735
const OVER = 57736

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"GRANT",
	"REVOKE",
	"OPTION",
	"PRIVILEGES",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"EXTENSION",
	"EXCLUDE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"HANDLER",
	"CONTINUE",
	"EXIT",
	"SQLEXCEPTION",
	"SQLWARNING",
	"SQLSTATE",
	"FOUND",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"ASYNC",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"TSTZRANGE",
	"TSRANGE",
	"INT4RANGE",
	"INT8RANGE",
	"NUMRANGE",
	"DATERANGE",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 9,
	138, 560,
	-2, 261,
	-1, 210,
	123, 978,
	-2, 972,
	-1, 211,
	123, 979,
	-2, 892,
	-1, 478,
	123, 982,
	-2, 976,
	-1, 479,
	123, 979,
	-2, 977,
	-1, 516,
	61, 527,
	-2, 524,
	-1, 546,
	123, 980,
	-2, 374,
	-1, 692,
	123, 980,
	-2, 374,
	-1, 713,
	299, 989,
	-2, 880,
	-1, 767,
	299, 989,
	-2, 609,
	-1, 798,
	123, 979,
	-2, 462,
	-1, 804,
	5, 63,
	-2, 24,
	-1, 810,
	5, 63,
	-2, 26,
	-1, 972,
	299, 989,
	-2, 609,
	-1, 1152,
	299, 989,
	-2, 462,
	-1, 1229,
	299, 989,
	-2, 609,
	-1, 1293,
	299, 989,
	-2, 880,
	-1, 1417,
	5, 64,
	-2, 742,
	-1, 1511,
	5, 63,
	-2, 25,
	-1, 1527,
	204, 91,
	-2, 665,
	-1, 1565,
	299, 989,
	-2, 241,
	-1, 1566,
	299, 989,
	-2, 241,
	-1, 1788,
	90, 974,
	-2, 962,
	-1, 1891,
	57, 77,
	59, 77,
	-2, 79,
	-1, 2077,
	5, 63,
	-2, 931,
	-1, 2102,
	5, 63,
	-2, 86,
	-1, 2147,
	59, 1125,
	60, 1125,
	-2, 595,
	-1, 2189,
	5, 64,
	-2, 932,
	-1, 2223,
	5, 63,
	-2, 934,
	-1, 2245,
	5, 64,
	-2, 935,
}

const yyPrivate = 57344

const yyLast = 12755

var yyAct = [...]int16{
	694, 1996, 2095, 2198, 2140, 2014, 704, 1244, 2141, 2146,
	675, 39, 39, 1912, 911, 2137, 2064, 1205, 196, 42,
	2022, 1263, 1997, 910, 206, 207, 1267, 1749, 219, 221,
	1925, 2087, 2100, 1924, 1492, 208, 1977, 1910, 1782, 1280,
	37, 1757, 1900, 1766, 1990, 1281, 795, 1266, 1767, 1260,
	1055, 1534, 1779, 1775, 246, 750, 1325, 1529, 1500, 1091,
	1419, 358, 1505, 1800, 188, 1038, 1151, 1070, 448, 817,
	1127, 1639, 1410, 850, 1081, 1366, 1202, 582, 678, 1082,
	1648, 1182, 1322, 450, 938, 452, 756, 1104, 415, 648,
	1324, 468, 626, 665, 1323, 248, 378, 512, 625, 469,
	342, 543, 673, 844, 432, 224, 674, 552, 1179, 545,
	398, 373, 1772, 382, 593, 517, 1027, 954, 590, 569,
	1836, 417, 1145, 15, 1676, 1237, 1023, 1482, 880, 1878,
	413, 890, 890, 44, 995, 757, 657, 1481, 214, 1238,
	1278, 226, 477, 946, 856, 686, 1222, 656, 658, 464,
	465, 741, 1362, 998, 883, 884, 885, 886, 887, 880,
	508, 870, 890, 518, 519, 2246, 2059, 227, 228, 981,
	794, 879, 878, 888, 889, 881, 882, 883, 884, 885,
	886, 887, 880, 541, 2243, 890, 1711, 1712, 392, 1210,
	1211, 235, 237, 2178, 2125, 1371, 1370, 252, 252, 252,
	252, 332, 336, 337, 826, 738, 879, 878, 888, 889,
	881, 882, 883, 884, 885, 886, 887, 880, 1713, 2096,
	890, 878, 888, 889, 881, 882, 883, 884, 885, 886,
	887, 880, 39, 1671, 890, 416, 1856, 375, 594, 595,
	751, 2236, 370, 371, 826, 196, 1198, 1746, 515, 2177,
	2124, 1690, 369, 312, 312, 312, 312, 1399, 879, 878,
	888, 889, 881, 882, 883, 884, 885, 886, 887, 880,
	1839, 229, 890, 672, 2171, 2172, 1926, 560, 1927, 308,
	308, 308, 308, 2033, 2034, 752, 2170, 311, 311, 311,
	311, 309, 309, 309, 309, 362, 199, 2032, 1822, 1010,
	571, 807, 419, 1295, 1284, 1283, 1009, 925, 423, 338,
	1017, 340, 867, 866, 2113, 1285, 433, 2112, 426, 1683,
	2114, 44, 425, 198, 352, 516, 1717, 1192, 1286, 557,
	868, 559, 558, 1674, 786, 457, 458, 355, 785, 1719,
	451, 195, 2042, 359, 395, 1436, 359, 363, 1434, 1515,
	39, 252, 36, 368, 888, 889, 881, 882, 883, 884,
	885, 886, 887, 880, 339, 2045, 890, 496, 497, 478,
	203, 483, 2109, 39, 2118, 2117, 434, 435, 436, 437,
	1778, 2046, 868, 2041, 616, 1944, 511, 473, 1918, 1714,
	476, 1777, 2043, 1514, 186, 183, 1940, 1259, 394, 1078,
	531, 1092, 659, 1991, 386, 481, 385, 312, 389, 390,
	393, 2220, 178, 504, 563, 343, 387, 395, 1633, 488,
	44, 891, 891, 491, 881, 882, 883, 884, 885, 886,
	887, 880, 866, 308, 890, 179, 831, 180, 1279, 184,
	185, 311, 2060, 518, 519, 309, 456, 869, 1291, 868,
	44, 462, 891, 466, 467, 832, 602, 1855, 204, 1857,
	474, 1297, 1298, 1649, 1650, 484, 867, 866, 656, 1050,
	359, 1293, 813, 814, 359, 891, 618, 494, 495, 1675,
	862, 891, 859, 1024, 868, 525, 621, 622, 1363, 1364,
	627, 44, 534, 627, 482, 2023, 533, 982, 44, 869,
	1287, 1288, 1290, 39, 526, 528, 1289, 826, 649, 743,
	891, 2026, 586, 587, 588, 589, 1371, 513, 660, 599,
	554, 1044, 537, 433, 891, 1052, 1943, 574, 870, 740,
	1953, 577, 1191, 580, 581, 2199, 2200, 2201, 2202, 2203,
	2204, 2205, 2206, 645, 628, 563, 1715, 1716, 1718, 1720,
	1721, 1848, 540, 845, 647, 845, 596, 391, 592, 556,
	333, 825, 891, 1706, 1413, 44, 869, 601, 535, 1776,
	181, 2123, 606, 607, 608, 617, 514, 374, 522, 523,
	1365, 518, 519, 182, 360, 429, 376, 2237, 431, 245,
	635, 631, 1560, 853, 819, 344, 345, 2133, 1827, 870,
	1654, 869, 44, 629, 797, 1530, 1531, 634, 346, 1391,
	1987, 394, 1738, 1071, 1072, 646, 826, 818, 867, 866,
	39, 823, 225, 190, 189, 627, 739, 1048, 1047, 661,
	395, 627, 1031, 804, 833, 810, 868, 1860, 760, 191,
	744, 1223, 742, 737, 2099, 39, 753, 610, 2027, 2025,
	2024, 554, 771, 1737, 755, 774, 891, 1296, 777, 778,
	822, 205, 520, 232, 649, 867, 866, 176, 177, 2098,
	388, 834, 633, 867, 866, 393, 393, 44, 2097, 1225,
	202, 773, 636, 868, 236, 838, 867, 866, 44, 201,
	556, 868, 2015, 2017, 1694, 867, 866, 200, 1426, 234,
	1425, 524, 490, 44, 868, 239, 870, 1988, 218, 820,
	864, 1628, 1360, 868, 1444, 816, 809, 799, 800, 821,
	867, 866, 1359, 824, 891, 867, 866, 815, 855, 827,
	334, 335, 1649, 1650, 835, 490, 829, 828, 868, 851,
	852, 854, 44, 868, 223, 1475, 1045, 818, 905, 796,
	805, 836, 805, 869, 847, 637, 493, 1074, 252, 1056,
	1561, 1562, 1563, 1068, 867, 866, 909, 2192, 867, 866,
	220, 39, 2062, 1058, 860, 1929, 867, 866, 394, 926,
	2016, 1723, 868, 1226, 624, 238, 868, 329, 330, 331,
	240, 242, 797, 1014, 868, 914, 915, 395, 241, 780,
	869, 929, 797, 818, 649, 928, 770, 619, 869, 745,
	959, 1004, 990, 805, 312, 421, 979, 489, 420, 351,
	14, 869, 349, 960, 222, 584, 583, 627, 1264, 761,
	869, 1049, 1029, 751, 1736, 1051, 501, 767, 768, 769,
	308, 500, 499, 649, 997, 1002, 1003, 2115, 311, 2085,
	1022, 1005, 309, 1057, 975, 869, 986, 1928, 781, 1084,
	869, 554, 1385, 740, 649, 948, 949, 950, 951, 952,
	953, 1183, 1021, 1384, 1453, 9, 12, 13, 752, 1850,
	1105, 10, 11, 808, 1383, 808, 1382, 1006, 1381, 1008,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 869,
	1380, 980, 847, 869, 977, 1379, 1015, 1378, 370, 1377,
	1089, 869, 1376, 1041, 1073, 1142, 1142, 1374, 1133, 1046,
	867, 866, 1030, 1885, 1144, 1886, 1692, 510, 751, 39,
	39, 1261, 1069, 861, 1183, 356, 1139, 796, 868, 354,
	353, 370, 904, 906, 907, 908, 912, 796, 478, 805,
	1111, 1184, 1106, 917, 917, 917, 917, 917, 917, 917,
	1088, 348, 1013, 1077, 1109, 1110, 1108, 1510, 767, 1146,
	1147, 530, 1020, 752, 959, 1085, 1854, 1206, 1843, 930,
	931, 932, 933, 934, 935, 936, 937, 960, 940, 1158,
	942, 943, 944, 945, 947, 947, 947, 947, 947, 947,
	947, 1224, 971, 972, 973, 974, 909, 1148, 1149, 1131,
	579, 1075, 44, 1178, 578, 1165, 1079, 1140, 1143, 797,
	797, 1640, 1640, 1156, 1792, 529, 641, 1157, 993, 1080,
	1661, 1660, 1206, 575, 1076, 1832, 642, 1842, 509, 1214,
	1262, 1659, 1641, 1641, 1301, 1834, 870, 805, 1200, 1258,
	1203, 1204, 2169, 805, 510, 869, 1961, 639, 805, 510,
	1096, 1098, 1099, 510, 1400, 1401, 1402, 640, 1097, 521,
	1695, 767, 1420, 1218, 1421, 1422, 870, 1651, 1054, 1216,
	1107, 1933, 808, 1642, 1230, 992, 1231, 649, 1176, 1177,
	575, 879, 878, 888, 889, 881, 882, 883, 884, 885,
	886, 887, 880, 1638, 1368, 890, 1465, 1201, 758, 759,
	1464, 44, 1463, 1932, 1462, 1105, 1461, 1460, 1459, 1458,
	575, 879, 878, 888, 889, 881, 882, 883, 884, 885,
	886, 887, 880, 1394, 1012, 890, 1011, 984, 600, 598,
	597, 568, 1386, 1128, 927, 1129, 917, 917, 1375, 917,
	917, 917, 917, 917, 917, 917, 917, 917, 917, 917,
	917, 917, 917, 917, 796, 796, 1248, 879, 878, 888,
	889, 881, 882, 883, 884, 885, 886, 887, 880, 2108,
	808, 890, 44, 521, 1225, 1007, 912, 1106, 927, 1239,
	1240, 912, 44, 44, 623, 498, 1406, 643, 591, 572,
	536, 2107, 44, 211, 1024, 44, 695, 1141, 693, 697,
	698, 699, 700, 459, 43, 43, 696, 701, 44, 521,
	1372, 197, 44, 807, 1224, 1132, 1432, 39, 926, 217,
	1039, 870, 2230, 2229, 1039, 2228, 797, 649, 1471, 2215,
	2165, 870, 1431, 1433, 2191, 870, 478, 779, 2130, 870,
	2075, 1207, 1471, 2126, 870, 2076, 1450, 842, 2049, 1897,
	870, 842, 1946, 1452, 842, 1945, 1963, 1146, 1473, 1039,
	1867, 1471, 1819, 1508, 736, 521, 735, 1498, 1229, 842,
	1817, 1511, 734, 1491, 1390, 1816, 1527, 1520, 1556, 1557,
	1558, 1813, 1812, 1565, 842, 1807, 842, 1806, 1962, 1249,
	842, 1727, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
	1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
	1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
	1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
	1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
	1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
	1489, 1509, 649, 649, 1488, 1486, 1487, 1497, 1634, 1485,
	1483, 1894, 1637, 1480, 1507, 917, 917, 917, 1567, 1699,
	1700, 796, 917, 917, 917, 917, 1697, 1698, 842, 1665,
	805, 733, 1662, 662, 649, 891, 573, 1206, 805, 1523,
	1524, 1525, 527, 1532, 2138, 1521, 1490, 2084, 1629, 1630,
	1219, 870, 1568, 1493, 1667, 1471, 1470, 1895, 1841, 490,
	1229, 1636, 842, 1397, 1657, 891, 917, 1805, 217, 1390,
	1389, 842, 1243, 1978, 217, 43, 1726, 217, 217, 1896,
	1664, 1039, 1242, 1978, 217, 1039, 1209, 1994, 197, 490,
	1643, 1644, 1645, 1646, 1647, 1666, 1137, 870, 842, 1090,
	1897, 1655, 1656, 842, 841, 1897, 1653, 1663, 790, 789,
	1658, 891, 1707, 807, 1669, 783, 784, 783, 782, 1705,
	1670, 2084, 1158, 1902, 1905, 1906, 1907, 1903, 1704, 1904,
	1908, 1219, 1678, 2088, 2089, 818, 1703, 1680, 244, 243,
	1702, 1158, 1684, 1701, 1696, 2222, 1024, 1677, 1165, 1569,
	1513, 1685, 1471, 1040, 1496, 1741, 1156, 1495, 1478, 1477,
	1157, 1241, 1234, 808, 1725, 521, 1233, 1165, 1232, 1755,
	1448, 808, 1733, 39, 1682, 1156, 1748, 217, 1215, 1157,
	1016, 1752, 217, 1446, 217, 217, 994, 615, 2084, 1758,
	1219, 217, 988, 479, 1299, 217, 217, 615, 630, 985,
	1793, 217, 1759, 1765, 1730, 217, 1566, 787, 217, 217,
	1760, 776, 775, 1785, 1740, 772, 43, 1691, 1447, 614,
	1801, 1801, 615, 492, 233, 2187, 1764, 231, 1762, 230,
	1137, 1445, 231, 807, 870, 1295, 1284, 1283, 1897, 807,
	1471, 2031, 1921, 1773, 1770, 1791, 490, 1285, 1902, 1905,
	1906, 1907, 1903, 217, 1904, 1908, 1398, 217, 1739, 1219,
	1286, 1731, 1732, 1427, 1039, 842, 983, 858, 857, 521,
	1802, 490, 649, 649, 1803, 792, 791, 359, 788, 879,
	878, 888, 889, 881, 882, 883, 884, 885, 886, 887,
	880, 521, 2160, 890, 2158, 2121, 2088, 2089, 217, 1964,
	423, 1810, 449, 217, 217, 217, 1632, 1631, 1494, 1457,
	453, 1396, 1393, 1392, 1361, 865, 1236, 1235, 1808, 1809,
	1213, 1199, 1198, 1197, 1196, 917, 917, 1195, 1194, 1193,
	1086, 1043, 1019, 1018, 217, 976, 863, 803, 802, 801,
	766, 765, 763, 746, 663, 603, 43, 542, 538, 507,
	446, 650, 454, 455, 1744, 439, 438, 427, 17, 917,
	917, 917, 917, 620, 39, 2138, 1367, 2091, 1474, 793,
	1279, 638, 605, 604, 461, 460, 365, 1823, 347, 341,
	1291, 192, 2008, 2094, 1820, 2006, 2093, 2009, 217, 2010,
	2007, 1906, 1907, 1297, 1298, 2005, 1722, 2004, 1253, 1254,
	2216, 1864, 2176, 1293, 822, 1976, 1868, 1869, 1845, 1499,
	1849, 1851, 1852, 1853, 1917, 1872, 252, 941, 1884, 506,
	1501, 39, 1934, 1846, 1847, 585, 749, 2185, 1931, 1887,
	487, 1936, 1287, 1288, 1290, 1502, 1071, 1072, 1289, 1771,
	1876, 486, 1875, 485, 1866, 475, 1301, 798, 217, 217,
	1871, 649, 1948, 367, 1883, 366, 1814, 1815, 217, 1844,
	1877, 1785, 1777, 43, 1909, 1892, 1257, 1937, 748, 613,
	1919, 1916, 312, 1922, 1250, 611, 609, 1251, 2020, 350,
	1180, 1920, 217, 1804, 1935, 1185, 1037, 702, 43, 1861,
	1770, 1950, 812, 1939, 1412, 655, 1245, 1947, 308, 1033,
	2183, 1034, 1035, 1036, 1949, 1969, 311, 650, 1858, 1024,
	309, 1246, 212, 215, 1032, 1890, 1891, 2182, 2132, 879,
	878, 888, 889, 881, 882, 883, 884, 885, 886, 887,
	880, 1493, 1797, 890, 1952, 2, 1796, 370, 470, 471,
	472, 35, 1795, 1794, 1965, 1388, 1966, 1998, 1811, 1710,
	1709, 193, 805, 187, 654, 653, 2238, 1735, 1387, 532,
	1026, 2028, 39, 1668, 1028, 1983, 1893, 1984, 830, 1042,
	39, 1995, 1986, 1760, 1, 1139, 1993, 1206, 1533, 1971,
	19, 1999, 18, 891, 2002, 917, 1975, 2000, 2001, 1296,
	2003, 2011, 2063, 463, 2040, 1418, 924, 2030, 690, 2044,
	2029, 1942, 1785, 676, 1837, 1206, 2197, 2103, 2021, 1528,
	2038, 1774, 1770, 1526, 43, 1559, 1770, 1770, 1770, 1770,
	1770, 1652, 2061, 1300, 567, 400, 1476, 539, 21, 1745,
	1770, 1512, 811, 612, 1635, 798, 1053, 217, 383, 2174,
	372, 837, 1992, 502, 194, 798, 16, 650, 2039, 1373,
	384, 381, 2068, 217, 2077, 380, 2069, 379, 1728, 2101,
	377, 570, 418, 424, 1734, 257, 259, 2051, 2080, 258,
	2082, 256, 2081, 2083, 2092, 255, 251, 249, 250, 247,
	1780, 1930, 632, 1221, 2102, 1911, 650, 903, 2111, 2066,
	2067, 1787, 805, 2145, 1504, 2181, 2131, 1770, 1451, 1181,
	677, 1095, 2110, 39, 689, 688, 2052, 650, 687, 2074,
	2116, 872, 215, 1770, 1769, 1888, 370, 2139, 215, 2148,
	2101, 215, 215, 2142, 1901, 370, 1998, 1899, 215, 212,
	1898, 2090, 1518, 2134, 2086, 1998, 1768, 1838, 2149, 2058,
	1758, 917, 2144, 2127, 917, 2028, 917, 2155, 917, 1252,
	917, 917, 2151, 1759, 2135, 2136, 2153, 1743, 2154, 1292,
	1760, 1760, 1206, 2119, 2120, 2166, 1282, 1025, 2168, 1255,
	8, 805, 479, 43, 1294, 1277, 7, 6, 5, 2175,
	4, 1276, 1275, 1274, 1273, 1271, 1272, 2180, 1269, 1270,
	1268, 1247, 806, 3, 0, 2186, 0, 0, 0, 818,
	2194, 805, 818, 818, 818, 0, 2211, 1771, 0, 0,
	0, 1771, 1771, 1771, 1771, 1771, 0, 0, 2210, 0,
	0, 215, 0, 891, 0, 1911, 215, 2018, 215, 215,
	2129, 1818, 2148, 2226, 2142, 215, 2221, 480, 2218, 480,
	215, 2225, 0, 2227, 0, 215, 0, 2152, 0, 215,
	0, 2149, 215, 215, 2223, 0, 2234, 0, 0, 805,
	0, 0, 798, 798, 0, 0, 0, 2239, 2196, 2142,
	0, 2207, 2208, 2209, 2241, 0, 0, 2242, 0, 370,
	2244, 0, 0, 0, 0, 0, 0, 1321, 2240, 1998,
	0, 1863, 1771, 1865, 0, 0, 1000, 215, 0, 1870,
	0, 566, 0, 0, 2078, 2079, 0, 0, 1771, 0,
	0, 0, 1830, 870, 807, 0, 1295, 1284, 1283, 0,
	0, 2195, 0, 0, 0, 0, 0, 0, 1285, 0,
	650, 0, 0, 0, 808, 0, 0, 0, 0, 0,
	0, 1286, 215, 0, 0, 0, 0, 215, 215, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 879, 878,
	888, 889, 881, 882, 883, 884, 885, 886, 887, 880,
	0, 805, 890, 0, 0, 0, 0, 0, 215, 667,
	1915, 0, 0, 1951, 1750, 0, 1751, 0, 0, 1518,
	2143, 0, 808, 0, 0, 0, 1989, 0, 987, 547,
	548, 550, 0, 0, 0, 805, 0, 553, 551, 561,
	562, 2161, 2162, 2163, 0, 0, 216, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	1972, 0, 566, 1798, 1973, 1974, 0, 0, 0, 0,
	0, 0, 0, 843, 0, 549, 0, 0, 0, 0,
	0, 1279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1291, 0, 0, 0, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 1297, 1298, 0, 991, 0, 798,
	650, 0, 0, 0, 1293, 0, 0, 0, 0, 186,
	183, 566, 215, 215, 0, 0, 0, 0, 0, 0,
	0, 2143, 215, 0, 2224, 0, 0, 178, 0, 0,
	0, 2047, 2048, 1287, 1288, 1290, 0, 0, 0, 1289,
	0, 0, 0, 0, 1913, 0, 215, 0, 0, 0,
	179, 0, 180, 0, 184, 185, 2143, 0, 808, 0,
	0, 0, 0, 217, 0, 1321, 1321, 1321, 1321, 1321,
	1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
	1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
	1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
	1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
	1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
	1321, 1321, 1321, 0, 0, 650, 650, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1518, 1880, 0,
	0, 1518, 1751, 0, 1134, 1135, 1136, 1138, 0, 0,
	1750, 0, 0, 0, 0, 555, 560, 650, 879, 878,
	888, 889, 881, 882, 883, 884, 885, 886, 887, 880,
	0, 0, 890, 0, 0, 1001, 1001, 1001, 1186, 1187,
	1188, 1189, 891, 1190, 0, 181, 0, 0, 1750, 0,
	1296, 0, 0, 807, 0, 1295, 1284, 1283, 182, 566,
	0, 215, 0, 0, 0, 0, 0, 1285, 557, 566,
	559, 558, 0, 0, 1208, 1411, 0, 215, 0, 0,
	1286, 0, 0, 0, 0, 0, 422, 0, 0, 428,
	0, 1217, 430, 1220, 0, 0, 0, 0, 1227, 1228,
	1988, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 440, 441, 442, 443, 444,
	0, 0, 445, 0, 0, 1256, 0, 0, 1981, 0,
	0, 0, 447, 1518, 0, 2212, 1880, 0, 0, 0,
	0, 0, 176, 177, 0, 0, 0, 0, 217, 217,
	0, 807, 0, 1295, 1284, 1283, 43, 0, 807, 0,
	1295, 1284, 1283, 0, 0, 1285, 0, 0, 0, 0,
	0, 0, 1285, 0, 0, 212, 0, 0, 1286, 0,
	0, 0, 0, 1395, 0, 1286, 1880, 0, 0, 0,
	1279, 0, 0, 0, 0, 0, 480, 664, 1001, 1001,
	1291, 0, 1001, 1001, 1001, 0, 0, 807, 212, 1295,
	1284, 1283, 0, 1297, 1298, 747, 652, 0, 0, 44,
	0, 1285, 0, 1293, 0, 0, 0, 0, 1414, 1415,
	0, 1751, 0, 1881, 1286, 1417, 0, 1981, 0, 1001,
	1001, 1001, 1001, 0, 1423, 1424, 0, 0, 576, 0,
	0, 0, 1287, 1288, 1290, 650, 650, 0, 1289, 0,
	0, 0, 0, 0, 1001, 0, 0, 0, 0, 0,
	2105, 0, 0, 0, 1449, 0, 0, 1519, 0, 0,
	1455, 0, 0, 0, 0, 0, 566, 566, 1279, 1754,
	0, 1750, 186, 183, 0, 1279, 1466, 1467, 1291, 1468,
	1469, 0, 0, 0, 0, 1291, 0, 0, 0, 0,
	178, 1297, 1298, 0, 1479, 651, 0, 0, 1297, 1298,
	0, 1293, 891, 0, 0, 0, 0, 0, 1293, 849,
	217, 0, 0, 179, 0, 180, 0, 184, 185, 0,
	0, 0, 0, 871, 1279, 0, 0, 43, 0, 913,
	1287, 1288, 1290, 0, 1291, 0, 1289, 1287, 1288, 1290,
	0, 0, 0, 1289, 0, 1880, 0, 1297, 1298, 0,
	0, 0, 0, 0, 0, 1519, 0, 1293, 0, 0,
	0, 762, 764, 1518, 0, 0, 217, 217, 0, 0,
	939, 0, 0, 0, 0, 217, 217, 0, 0, 0,
	0, 0, 0, 0, 43, 0, 1287, 1288, 1290, 1296,
	0, 0, 1289, 0, 0, 0, 0, 1518, 0, 0,
	0, 0, 978, 1981, 0, 0, 0, 0, 0, 1321,
	0, 1519, 0, 1751, 650, 0, 0, 0, 0, 916,
	918, 919, 920, 921, 922, 923, 0, 1001, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 2213,
	0, 0, 1751, 0, 0, 0, 0, 0, 181, 0,
	0, 0, 0, 0, 846, 848, 0, 0, 0, 0,
	0, 182, 217, 0, 0, 0, 0, 1001, 0, 0,
	0, 0, 1056, 0, 480, 0, 1068, 1001, 0, 0,
	0, 0, 0, 566, 0, 0, 1058, 1296, 0, 0,
	0, 0, 0, 217, 1296, 0, 0, 217, 0, 0,
	0, 217, 217, 217, 217, 217, 0, 0, 0, 0,
	0, 0, 0, 217, 1083, 217, 0, 0, 1087, 217,
	0, 0, 0, 1093, 1094, 43, 0, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 1517, 0, 0,
	0, 0, 0, 1296, 1879, 176, 177, 215, 1708, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 1724, 0, 1057, 0, 0, 913,
	0, 0, 0, 0, 913, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 1742, 0, 0, 0, 0, 1150,
	1175, 0, 0, 1753, 0, 0, 0, 0, 217, 0,
	0, 0, 846, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1100, 0, 0, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	874, 0, 0, 877, 0, 0, 0, 0, 1212, 892,
	893, 894, 895, 896, 897, 898, 0, 875, 876, 873,
	899, 900, 901, 902, 879, 878, 888, 889, 881, 882,
	883, 884, 885, 886, 887, 880, 43, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2150, 0, 0, 1570, 1571, 1572, 1573, 1574,
	1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584,
	1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,
	1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604,
	1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
	1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
	1625, 1626, 1627, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1824, 0, 1825, 1826, 0, 0,
	0, 1828, 1829, 1831, 1833, 1835, 0, 0, 217, 0,
	0, 0, 215, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1369, 0, 0, 1416, 2150, 0, 0, 1859, 1535,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
	1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	754, 0, 0, 210, 0, 546, 547, 548, 550, 0,
	1454, 1403, 1404, 1405, 553, 551, 561, 562, 0, 1407,
	1408, 1409, 0, 807, 0, 1295, 1284, 1283, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1938, 0,
	1286, 0, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 916, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1503, 1506, 0, 0, 186, 183, 0, 0,
	0, 0, 0, 0, 1960, 0, 0, 0, 1516, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1522, 1970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 1564, 180,
	939, 184, 185, 0, 215, 0, 1428, 1429, 891, 1430,
	0, 0, 0, 0, 0, 0, 0, 1435, 0, 1437,
	1438, 1439, 0, 0, 1440, 1441, 0, 1442, 1443, 0,
	652, 0, 0, 210, 0, 213, 2013, 0, 0, 0,
	1279, 1001, 0, 0, 0, 0, 0, 0, 0, 0,
	1291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 215, 0, 1297, 1298, 0, 0, 0, 0, 215,
	1914, 0, 0, 1293, 2050, 0, 0, 0, 0, 0,
	2053, 2054, 2055, 2056, 2057, 0, 807, 0, 1295, 1284,
	1283, 0, 0, 0, 0, 0, 0, 1083, 0, 1083,
	1285, 0, 1287, 1288, 1290, 0, 186, 183, 1289, 0,
	0, 0, 0, 1286, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 560, 178, 0, 0, 1519, 0, 651,
	0, 0, 181, 0, 1681, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 179, 0, 180,
	0, 184, 185, 0, 0, 0, 1968, 0, 0, 0,
	1693, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 0, 559, 558, 0,
	0, 0, 0, 0, 2122, 0, 0, 215, 0, 2128,
	0, 215, 565, 564, 212, 215, 215, 215, 215, 215,
	1729, 1672, 1673, 0, 0, 0, 0, 2012, 0, 215,
	0, 0, 0, 2019, 0, 0, 0, 0, 0, 0,
	1747, 0, 0, 1279, 0, 0, 2164, 0, 0, 176,
	177, 0, 0, 1291, 0, 1686, 1687, 1688, 1689, 1941,
	0, 0, 0, 0, 0, 0, 1297, 1298, 0, 0,
	0, 215, 0, 0, 0, 2179, 1293, 0, 0, 1296,
	0, 1101, 1102, 1103, 0, 0, 807, 0, 0, 2188,
	2189, 2190, 913, 913, 0, 0, 215, 2193, 714, 0,
	715, 0, 181, 0, 0, 1287, 1288, 1290, 705, 706,
	0, 1289, 215, 0, 0, 182, 0, 0, 521, 0,
	0, 210, 695, 692, 693, 697, 698, 699, 700, 2184,
	1519, 0, 696, 701, 561, 562, 0, 0, 521, 0,
	0, 216, 684, 213, 0, 713, 0, 807, 0, 1295,
	1284, 1283, 0, 2231, 2232, 2233, 0, 0, 0, 0,
	0, 1285, 565, 564, 807, 0, 1295, 1284, 1283, 681,
	682, 0, 0, 0, 1286, 730, 0, 683, 1285, 0,
	679, 680, 685, 0, 0, 0, 2245, 0, 0, 0,
	0, 1286, 0, 212, 186, 183, 0, 0, 0, 176,
	177, 0, 212, 728, 0, 0, 0, 0, 0, 0,
	34, 0, 178, 0, 186, 183, 0, 2104, 0, 0,
	0, 1840, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 179, 0, 180, 0, 184,
	185, 0, 0, 0, 0, 0, 691, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 180, 0, 184,
	185, 0, 1296, 0, 1873, 1874, 1506, 27, 29, 0,
	22, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1821, 1914, 23, 1279, 28, 0, 32, 0, 0,
	0, 0, 0, 0, 1291, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 0, 24, 25, 1297, 1298, 0,
	0, 1291, 1982, 0, 0, 0, 0, 1293, 0, 0,
	0, 0, 0, 0, 1297, 1298, 0, 0, 0, 0,
	716, 410, 0, 0, 1293, 0, 0, 413, 414, 0,
	0, 0, 0, 0, 0, 0, 1287, 1288, 1290, 0,
	0, 0, 1289, 1428, 0, 0, 212, 0, 732, 0,
	717, 718, 401, 1287, 1288, 1290, 0, 0, 0, 1289,
	181, 1519, 0, 0, 0, 0, 0, 408, 0, 396,
	0, 0, 0, 182, 0, 0, 0, 397, 2106, 521,
	181, 703, 216, 0, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 1979, 0, 0, 0, 0,
	0, 0, 0, 719, 729, 725, 726, 723, 724, 722,
	721, 720, 731, 707, 708, 709, 710, 712, 20, 0,
	565, 564, 711, 0, 0, 0, 0, 1954, 0, 0,
	1955, 0, 1956, 0, 1957, 0, 1958, 1959, 0, 0,
	404, 0, 399, 409, 0, 2037, 0, 0, 0, 0,
	0, 0, 406, 405, 0, 186, 183, 176, 177, 727,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 176, 177, 0,
	0, 0, 0, 0, 0, 0, 2065, 0, 0, 0,
	0, 0, 0, 1296, 0, 0, 179, 0, 180, 0,
	184, 185, 2072, 26, 2073, 0, 0, 0, 0, 0,
	1296, 0, 0, 0, 0, 30, 31, 0, 33, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 150, 1517, 109, 163, 77, 97, 172, 99,
	100, 135, 56, 118, 0, 94, 75, 0, 0, 0,
	80, 49, 89, 50, 78, 111, 0, 76, 0, 152,
	121, 0, 0, 0, 170, 0, 126, 0, 0, 0,
	0, 0, 113, 154, 116, 145, 108, 136, 65, 125,
	165, 95, 131, 166, 0, 0, 0, 44, 0, 0,
	0, 402, 2156, 0, 0, 2157, 0, 403, 2159, 130,
	160, 91, 62, 175, 0, 134, 48, 128, 0, 0,
	54, 57, 171, 158, 85, 84, 0, 0, 0, 0,
	0, 181, 2173, 112, 117, 141, 105, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 2065, 0, 81,
	0, 124, 0, 0, 0, 61, 55, 216, 110, 213,
	913, 0, 64, 0, 82, 142, 0, 45, 0, 0,
	186, 183, 148, 155, 107, 0, 1679, 159, 104, 103,
	411, 0, 412, 0, 0, 0, 96, 41, 178, 173,
	0, 0, 162, 114, 153, 79, 90, 0, 86, 2217,
	913, 0, 87, 88, 123, 137, 407, 0, 0, 0,
	0, 179, 144, 180, 0, 184, 185, 1154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	186, 183, 0, 361, 0, 53, 46, 83, 146, 149,
	69, 133, 58, 92, 139, 93, 115, 74, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1781, 0,
	0, 179, 0, 180, 0, 184, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 1789, 323, 1159, 0, 324, 325, 326, 328, 327,
	1163, 0, 1155, 0, 1167, 1166, 1168, 1153, 1170, 0,
	0, 0, 1174, 1171, 1173, 1172, 0, 1169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 1160, 1161, 0, 0, 181, 52, 73, 156,
	0, 0, 0, 0, 1790, 1788, 1784, 1783, 0, 182,
	0, 0, 132, 1162, 1164, 0, 0, 1786, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	72, 66, 67, 119, 120, 167, 168, 169, 143, 63,
	0, 70, 71, 0, 151, 0, 181, 0, 122, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 182,
	98, 47, 102, 0, 0, 0, 0, 0, 0, 0,
	59, 60, 0, 0, 106, 101, 127, 129, 138, 147,
	157, 164, 140, 176, 177, 161, 150, 0, 109, 163,
	77, 97, 172, 99, 100, 135, 56, 118, 0, 94,
	75, 0, 0, 0, 80, 49, 89, 50, 78, 111,
	0, 76, 0, 152, 121, 0, 0, 0, 170, 0,
	126, 0, 0, 0, 0, 0, 113, 154, 116, 145,
	108, 136, 65, 125, 165, 95, 131, 166, 0, 0,
	0, 44, 0, 176, 177, 0, 0, 0, 0, 0,
	0, 1763, 0, 130, 160, 91, 62, 175, 0, 134,
	48, 128, 0, 0, 54, 57, 171, 158, 85, 84,
	0, 807, 0, 1295, 1284, 1283, 0, 112, 117, 141,
	105, 0, 0, 0, 0, 1285, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 124, 0, 0, 1286, 61,
	55, 216, 110, 213, 0, 0, 64, 0, 82, 142,
	0, 45, 0, 0, 186, 183, 148, 155, 107, 0,
	0, 159, 104, 103, 0, 0, 0, 0, 0, 0,
	96, 41, 178, 173, 0, 0, 162, 114, 153, 79,
	90, 0, 86, 0, 867, 866, 87, 88, 123, 137,
	0, 0, 1756, 0, 0, 179, 144, 180, 0, 184,
	185, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 183, 0, 0, 0, 53,
	46, 83, 146, 149, 69, 133, 58, 92, 139, 93,
	115, 74, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1279, 0,
	0, 0, 1923, 0, 0, 179, 0, 180, 1291, 184,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1297, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 1293, 0, 0, 0, 1789, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1287, 1288, 1290, 0, 0, 0, 1289, 0, 0, 869,
	0, 0, 0, 0, 0, 51, 0, 0, 0, 0,
	181, 52, 73, 156, 0, 1761, 0, 0, 1790, 1788,
	0, 0, 0, 182, 0, 0, 132, 0, 0, 0,
	0, 1786, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 72, 66, 67, 119, 120, 167,
	168, 169, 143, 63, 0, 70, 71, 0, 151, 0,
	181, 0, 122, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 182, 98, 47, 102, 0, 0, 0,
	0, 0, 0, 0, 59, 60, 0, 0, 106, 101,
	127, 129, 138, 147, 157, 164, 140, 176, 177, 161,
	150, 0, 109, 163, 77, 97, 172, 99, 100, 135,
	56, 118, 0, 94, 75, 0, 0, 0, 80, 49,
	89, 50, 78, 111, 0, 76, 0, 152, 121, 0,
	0, 0, 170, 0, 126, 0, 0, 1296, 0, 0,
	113, 154, 116, 145, 108, 136, 65, 125, 165, 95,
	131, 166, 0, 0, 0, 44, 0, 176, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 160, 91,
	62, 175, 0, 134, 48, 128, 0, 0, 54, 57,
	171, 158, 85, 84, 807, 0, 1295, 1284, 1283, 0,
	0, 112, 117, 141, 105, 0, 0, 0, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 124,
	0, 1286, 0, 61, 55, 0, 110, 0, 0, 0,
	64, 0, 82, 142, 0, 45, 0, 0, 186, 183,
	148, 155, 107, 0, 0, 159, 104, 103, 0, 0,
	0, 0, 0, 0, 96, 41, 178, 173, 0, 0,
	162, 114, 153, 79, 90, 0, 86, 867, 866, 0,
	87, 88, 123, 137, 0, 0, 0, 0, 0, 179,
	144, 180, 0, 184, 185, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 46, 83, 146, 149, 69, 133,
	58, 92, 139, 93, 115, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1297, 1298, 0, 0, 0, 0,
	0, 0, 0, 0, 1293, 0, 0, 0, 0, 1789,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 1288, 1290, 0, 0, 0, 1289,
	0, 0, 869, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 0, 181, 52, 73, 156, 1761, 0,
	0, 0, 1790, 1788, 0, 0, 0, 182, 0, 0,
	132, 0, 0, 0, 0, 1786, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 72, 66,
	67, 119, 120, 167, 168, 169, 143, 63, 0, 70,
	71, 0, 151, 0, 0, 0, 122, 0, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 0, 98, 47,
	102, 0, 0, 0, 0, 0, 0, 0, 59, 60,
	0, 0, 106, 101, 127, 129, 138, 147, 157, 164,
	140, 176, 177, 161, 150, 0, 109, 163, 77, 97,
	172, 99, 100, 135, 56, 118, 0, 94, 75, 0,
	0, 0, 80, 49, 89, 50, 78, 111, 0, 76,
	0, 152, 121, 0, 289, 0, 170, 0, 126, 0,
	1296, 0, 0, 0, 113, 154, 116, 145, 108, 136,
	65, 125, 165, 95, 131, 166, 0, 0, 0, 210,
	0, 213, 254, 0, 253, 0, 0, 0, 0, 0,
	0, 130, 160, 91, 62, 175, 0, 134, 48, 128,
	0, 0, 54, 57, 171, 158, 85, 84, 0, 0,
	0, 0, 0, 0, 0, 112, 117, 141, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	0, 81, 0, 124, 0, 0, 0, 61, 55, 0,
	110, 268, 0, 298, 64, 0, 82, 142, 0, 45,
	0, 0, 186, 183, 148, 155, 107, 0, 0, 159,
	104, 103, 0, 0, 0, 0, 0, 0, 96, 41,
	178, 173, 0, 0, 162, 114, 153, 79, 90, 0,
	86, 0, 290, 0, 87, 88, 123, 137, 0, 0,
	0, 0, 0, 179, 144, 180, 0, 184, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 46, 83,
	146, 149, 69, 133, 58, 92, 139, 93, 115, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 310, 0,
	324, 325, 326, 328, 327, 291, 292, 293, 297, 295,
	294, 296, 262, 264, 0, 260, 263, 269, 265, 266,
	267, 281, 270, 271, 272, 273, 274, 283, 282, 284,
	285, 286, 287, 275, 276, 277, 278, 279, 280, 288,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 0,
	0, 0, 0, 51, 0, 0, 0, 0, 181, 52,
	73, 156, 0, 0, 0, 0, 0, 40, 0, 0,
	0, 182, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 72, 66, 67, 119, 120, 167, 168, 169,
	143, 63, 0, 70, 71, 0, 151, 0, 0, 0,
	122, 0, 0, 0, 174, 261, 0, 0, 0, 0,
	0, 0, 98, 47, 102, 0, 0, 0, 0, 0,
	0, 0, 59, 60, 0, 0, 106, 101, 127, 129,
	138, 147, 157, 164, 140, 176, 177, 161, 150, 0,
	109, 163, 77, 97, 172, 99, 100, 135, 56, 118,
	0, 94, 75, 0, 0, 0, 80, 49, 89, 50,
	78, 111, 0, 76, 0, 152, 121, 0, 0, 0,
	170, 0, 126, 0, 0, 0, 0, 0, 113, 154,
	116, 145, 108, 136, 65, 125, 165, 95, 131, 166,
	0, 0, 0, 44, 0, 839, 0, 840, 0, 0,
	0, 0, 0, 0, 0, 130, 160, 91, 62, 175,
	0, 134, 48, 128, 0, 0, 54, 57, 171, 158,
	85, 84, 0, 807, 0, 1295, 1284, 1283, 0, 112,
	117, 141, 105, 0, 0, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 124, 0, 0,
	1286, 61, 55, 216, 110, 213, 0, 0, 64, 0,
	82, 142, 0, 45, 0, 0, 186, 183, 148, 155,
	107, 0, 0, 159, 104, 103, 0, 0, 0, 0,
	0, 0, 96, 41, 178, 173, 0, 0, 162, 114,
	153, 79, 90, 0, 86, 0, 867, 866, 87, 88,
	123, 137, 0, 0, 0, 0, 0, 179, 144, 180,
	0, 184, 185, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 183, 0, 357,
	0, 53, 46, 83, 146, 149, 69, 133, 58, 92,
	139, 93, 115, 74, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 0, 0, 0, 0, 179, 0, 180,
	1291, 184, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1297, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 1293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1287, 1288, 1290, 0, 0, 0, 1289, 0,
	0, 869, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 181, 52, 73, 156, 0, 1799, 0, 0,
	0, 40, 0, 0, 0, 182, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 72, 66, 67, 119,
	120, 167, 168, 169, 143, 63, 0, 70, 71, 0,
	151, 0, 181, 0, 122, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 182, 98, 47, 102, 0,
	0, 0, 0, 0, 0, 0, 59, 60, 0, 0,
	106, 101, 127, 129, 138, 147, 157, 164, 140, 176,
	177, 161, 150, 0, 109, 163, 77, 97, 172, 99,
	100, 135, 56, 118, 0, 94, 75, 0, 0, 0,
	80, 49, 89, 50, 78, 111, 0, 76, 0, 152,
	121, 0, 0, 0, 170, 0, 126, 0, 0, 1296,
	0, 0, 113, 154, 116, 145, 108, 136, 65, 125,
	165, 95, 131, 166, 0, 503, 0, 44, 0, 176,
	177, 0, 0, 0, 0, 0, 0, 505, 0, 130,
	160, 91, 62, 175, 0, 134, 48, 128, 0, 0,
	54, 57, 171, 158, 85, 84, 0, 807, 0, 1295,
	1284, 1283, 199, 112, 117, 141, 105, 0, 0, 0,
	0, 1285, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 124, 0, 0, 1286, 61, 55, 44, 110, 198,
	0, 0, 64, 0, 82, 142, 0, 45, 0, 0,
	186, 183, 148, 155, 107, 0, 0, 159, 104, 103,
	0, 0, 0, 0, 0, 0, 96, 41, 178, 173,
	0, 0, 162, 114, 153, 79, 90, 0, 86, 0,
	867, 866, 87, 88, 123, 137, 0, 0, 0, 0,
	0, 179, 144, 180, 0, 184, 185, 0, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 183, 0, 0, 0, 53, 46, 83, 146, 149,
	69, 133, 58, 92, 139, 93, 115, 74, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 180, 1291, 184, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1297, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 1293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1287, 1288, 1290, 0,
	0, 0, 1289, 0, 0, 869, 0, 0, 0, 0,
	0, 51, 0, 0, 0, 0, 181, 52, 73, 156,
	0, 1761, 0, 0, 0, 40, 0, 0, 0, 182,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	72, 66, 67, 119, 120, 167, 168, 169, 143, 63,
	0, 70, 71, 0, 151, 0, 181, 0, 122, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 182,
	98, 47, 102, 0, 0, 0, 0, 0, 0, 0,
	59, 60, 0, 0, 106, 101, 127, 129, 138, 147,
	157, 164, 140, 176, 177, 161, 150, 0, 109, 163,
	77, 97, 172, 99, 100, 135, 56, 118, 0, 94,
	75, 0, 0, 0, 80, 49, 89, 50, 78, 111,
	0, 76, 0, 152, 121, 0, 0, 0, 170, 0,
	126, 0, 0, 1296, 0, 0, 113, 154, 116, 145,
	108, 136, 65, 125, 165, 95, 131, 166, 0, 0,
	0, 44, 0, 176, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 160, 91, 62, 175, 0, 134,
	48, 128, 0, 0, 54, 57, 171, 158, 85, 84,
	807, 0, 1295, 1284, 1283, 0, 0, 112, 117, 141,
	105, 0, 0, 0, 1285, 0, 0, 0, 0, 0,
	0, 1862, 0, 81, 0, 124, 0, 1286, 0, 61,
	55, 0, 110, 955, 0, 970, 64, 0, 82, 142,
	0, 45, 0, 0, 186, 183, 148, 155, 107, 0,
	0, 159, 104, 103, 0, 0, 0, 0, 0, 0,
	96, 41, 178, 173, 0, 0, 162, 114, 153, 79,
	90, 0, 86, 0, 957, 0, 87, 88, 123, 137,
	0, 0, 2167, 0, 0, 179, 144, 180, 0, 184,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 53,
	46, 83, 146, 149, 69, 133, 58, 92, 139, 93,
	115, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1291, 967, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 0,
	1297, 1298, 0, 964, 963, 0, 0, 969, 1130, 958,
	1293, 0, 0, 0, 966, 965, 0, 260, 956, 0,
	0, 0, 0, 962, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1287,
	1288, 1290, 0, 0, 0, 1289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 0, 0,
	181, 52, 73, 156, 1265, 0, 0, 0, 0, 40,
	0, 0, 0, 182, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 72, 66, 67, 119, 120, 167,
	168, 169, 143, 63, 0, 70, 71, 0, 151, 0,
	0, 0, 122, 0, 0, 0, 174, 261, 0, 0,
	0, 0, 0, 0, 98, 47, 102, 0, 0, 0,
	0, 0, 0, 0, 59, 60, 0, 0, 106, 101,
	127, 129, 138, 147, 157, 164, 140, 176, 177, 161,
	150, 0, 109, 163, 77, 97, 172, 99, 100, 135,
	56, 118, 0, 94, 75, 0, 0, 0, 80, 49,
	89, 50, 78, 111, 0, 76, 0, 152, 121, 0,
	0, 0, 170, 0, 126, 0, 1296, 0, 0, 0,
	113, 154, 116, 145, 108, 136, 65, 125, 165, 95,
	131, 166, 0, 0, 0, 210, 0, 213, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 160, 91,
	62, 175, 0, 134, 48, 128, 0, 0, 54, 57,
	171, 158, 85, 84, 0, 807, 0, 1295, 1284, 1283,
	0, 112, 117, 141, 105, 0, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 124,
	0, 0, 1286, 61, 55, 210, 110, 213, 0, 0,
	64, 0, 82, 142, 0, 45, 0, 0, 186, 183,
	148, 155, 107, 0, 0, 159, 104, 103, 0, 0,
	0, 0, 0, 0, 96, 41, 178, 173, 0, 0,
	162, 114, 153, 79, 90, 0, 86, 0, 0, 0,
	87, 88, 123, 137, 0, 0, 0, 2070, 2071, 179,
	144, 180, 0, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 183,
	0, 0, 0, 53, 46, 83, 146, 149, 69, 133,
	58, 92, 139, 93, 115, 74, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1279, 0, 0, 0, 0, 0, 0, 179,
	0, 180, 1291, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1297, 1298, 0, 0, 0,
	0, 0, 0, 0, 0, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1287, 1288, 1290, 0, 0, 0,
	1289, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 0, 181, 52, 73, 156, 0, 0,
	0, 0, 0, 40, 0, 0, 0, 182, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 72, 66,
	67, 119, 120, 167, 168, 169, 143, 63, 0, 70,
	71, 0, 151, 0, 181, 0, 122, 0, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 182, 98, 47,
	102, 0, 0, 0, 0, 0, 0, 0, 59, 60,
	0, 0, 106, 101, 127, 129, 138, 147, 157, 164,
	140, 176, 177, 161, 150, 0, 109, 163, 77, 97,
	172, 99, 100, 135, 56, 118, 0, 94, 75, 0,
	0, 0, 80, 49, 89, 50, 78, 111, 0, 76,
	0, 152, 121, 0, 0, 0, 170, 0, 126, 0,
	0, 1296, 0, 0, 113, 154, 116, 145, 108, 136,
	65, 125, 165, 95, 131, 166, 0, 0, 0, 44,
	0, 176, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 160, 91, 62, 175, 0, 134, 48, 128,
	0, 0, 54, 57, 171, 158, 85, 84, 644, 807,
	0, 1295, 1284, 1283, 0, 112, 117, 141, 105, 0,
	0, 0, 0, 1285, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 124, 0, 0, 1286, 61, 55, 216,
	110, 213, 0, 0, 64, 0, 82, 142, 0, 45,
	0, 0, 186, 183, 148, 155, 107, 0, 0, 159,
	104, 103, 0, 0, 0, 0, 0, 0, 96, 41,
	178, 173, 0, 0, 162, 114, 153, 79, 90, 0,
	86, 0, 0, 0, 87, 88, 123, 137, 0, 0,
	0, 2235, 0, 179, 144, 180, 0, 184, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 183, 0, 0, 0, 53, 46, 83,
	146, 149, 69, 133, 58, 92, 139, 93, 115, 74,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1279, 0, 0, 0,
	0, 0, 0, 179, 0, 180, 1291, 184, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1297,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 1293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1287, 1288,
	1290, 0, 0, 0, 1289, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 0, 0, 181, 52,
	73, 156, 0, 0, 0, 0, 0, 40, 0, 0,
	0, 182, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 72, 66, 67, 119, 120, 167, 168, 169,
	143, 63, 0, 70, 71, 0, 151, 0, 181, 0,
	122, 0, 0, 0, 174, 0, 0, 0, 0, 0,
	0, 182, 98, 47, 102, 0, 0, 0, 0, 0,
	0, 0, 59, 60, 0, 0, 106, 101, 127, 129,
	138, 147, 157, 164, 140, 176, 177, 161, 150, 0,
	109, 163, 77, 97, 172, 99, 100, 135, 56, 118,
	0, 94, 75, 38, 0, 0, 80, 49, 89, 50,
	78, 111, 0, 76, 0, 152, 121, 0, 0, 0,
	170, 0, 126, 0, 0, 1296, 0, 0, 113, 154,
	116, 145, 108, 136, 65, 125, 165, 95, 131, 166,
	0, 0, 0, 44, 0, 176, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 160, 91, 62, 175,
	0, 134, 48, 128, 0, 0, 54, 57, 171, 158,
	85, 84, 807, 0, 1295, 1284, 1283, 0, 0, 112,
	117, 141, 105, 0, 0, 0, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 124, 0, 1286,
	0, 61, 55, 0, 110, 955, 0, 970, 64, 0,
	82, 142, 0, 45, 0, 0, 186, 183, 148, 155,
	107, 0, 0, 159, 104, 103, 0, 0, 0, 0,
	0, 0, 96, 41, 178, 173, 0, 0, 162, 114,
	153, 79, 90, 0, 86, 0, 957, 0, 87, 88,
	123, 137, 0, 0, 2219, 0, 0, 179, 144, 180,
	0, 184, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 46, 83, 146, 149, 69, 133, 58, 92,
	139, 93, 115, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1291,
	967, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 0, 1297, 1298, 0, 964, 963, 0, 0, 969,
	968, 958, 1293, 0, 0, 0, 966, 965, 0, 260,
	956, 0, 0, 0, 0, 962, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 1288, 1290, 0, 0, 0, 1289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 181, 52, 73, 156, 0, 0, 0, 0,
	0, 40, 0, 0, 0, 182, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 72, 66, 67, 119,
	120, 167, 168, 169, 143, 63, 0, 70, 71, 0,
	151, 0, 0, 0, 122, 0, 0, 0, 174, 261,
	0, 0, 0, 0, 0, 0, 98, 47, 102, 0,
	0, 0, 0, 0, 0, 0, 59, 60, 0, 0,
	106, 101, 127, 129, 138, 147, 157, 164, 140, 176,
	177, 161, 150, 0, 109, 163, 77, 97, 172, 99,
	100, 135, 56, 118, 0, 94, 75, 0, 0, 0,
	80, 49, 89, 50, 78, 111, 0, 76, 0, 152,
	121, 0, 0, 0, 170, 0, 126, 0, 1296, 0,
	0, 0, 113, 154, 116, 145, 108, 136, 65, 125,
	165, 95, 131, 166, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	160, 91, 62, 175, 0, 134, 48, 128, 0, 0,
	54, 57, 171, 158, 85, 84, 807, 0, 1295, 1284,
	1283, 0, 0, 112, 117, 141, 105, 0, 0, 0,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 124, 0, 1286, 0, 61, 55, 0, 110, 0,
	0, 0, 64, 0, 82, 142, 0, 45, 0, 0,
	186, 183, 148, 155, 107, 0, 0, 159, 104, 103,
	0, 0, 0, 0, 0, 0, 96, 41, 178, 173,
	0, 0, 162, 114, 153, 79, 90, 0, 86, 0,
	0, 0, 87, 88, 123, 137, 0, 0, 2214, 0,
	0, 179, 144, 180, 0, 184, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 46, 83, 146, 149,
	69, 133, 58, 92, 139, 93, 115, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1297, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 1293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1287, 1288, 1290, 0, 0,
	0, 1289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 0, 0, 181, 52, 73, 156,
	0, 0, 0, 0, 0, 40, 0, 0, 0, 182,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	72, 66, 67, 119, 120, 167, 168, 169, 143, 63,
	0, 70, 71, 0, 151, 0, 0, 0, 122, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	98, 47, 102, 0, 0, 0, 0, 0, 0, 0,
	59, 60, 0, 0, 106, 101, 127, 129, 138, 147,
	157, 164, 140, 176, 177, 161, 2147, 0, 109, 163,
	77, 97, 172, 99, 100, 135, 56, 118, 0, 94,
	75, 0, 0, 0, 80, 49, 89, 50, 78, 111,
	0, 76, 0, 152, 121, 0, 0, 0, 170, 0,
	126, 0, 1296, 0, 0, 0, 113, 154, 116, 145,
	108, 136, 65, 125, 165, 95, 131, 166, 521, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 160, 91, 62, 175, 0, 134,
	48, 128, 0, 0, 54, 57, 171, 158, 85, 84,
	807, 0, 1295, 1284, 1283, 0, 0, 112, 117, 141,
	105, 0, 0, 0, 1285, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 124, 0, 1286, 0, 61,
	55, 0, 110, 0, 0, 0, 64, 0, 82, 142,
	0, 45, 0, 0, 186, 183, 148, 155, 107, 0,
	0, 159, 104, 103, 0, 0, 0, 0, 0, 0,
	96, 0, 178, 173, 0, 0, 162, 114, 153, 79,
	90, 0, 86, 0, 0, 0, 87, 88, 123, 137,
	0, 0, 0, 0, 0, 179, 144, 180, 0, 184,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 53,
	46, 83, 146, 149, 69, 133, 58, 92, 139, 93,
	115, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1297, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	1293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1287,
	1288, 1290, 0, 0, 0, 1289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 0, 0,
	181, 52, 73, 156, 1265, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 72, 66, 67, 119, 120, 167,
	168, 169, 143, 63, 0, 70, 71, 0, 151, 0,
	0, 0, 122, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 98, 47, 102, 0, 0, 0,
	0, 0, 0, 0, 59, 60, 0, 0, 106, 101,
	127, 129, 138, 147, 157, 164, 140, 176, 177, 161,
	150, 0, 109, 163, 77, 97, 172, 99, 100, 135,
	56, 118, 0, 94, 75, 0, 0, 0, 80, 49,
	89, 50, 78, 111, 0, 76, 0, 152, 121, 0,
	0, 0, 170, 0, 126, 0, 1296, 0, 0, 0,
	113, 154, 116, 145, 108, 136, 65, 125, 165, 95,
	131, 166, 0, 0, 0, 216, 0, 213, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 160, 91,
	62, 175, 0, 134, 48, 128, 0, 0, 54, 57,
	171, 158, 85, 84, 807, 0, 1295, 1284, 1283, 0,
	0, 112, 117, 141, 105, 0, 0, 0, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 124,
	0, 1286, 0, 61, 55, 0, 110, 0, 0, 0,
	64, 0, 82, 142, 0, 45, 0, 0, 186, 183,
	148, 155, 107, 0, 0, 159, 104, 103, 0, 0,
	0, 0, 0, 0, 96, 0, 178, 173, 0, 0,
	162, 114, 153, 79, 90, 0, 86, 0, 0, 0,
	87, 88, 123, 137, 0, 0, 0, 0, 0, 179,
	144, 180, 0, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 46, 83, 146, 149, 69, 133,
	58, 92, 139, 93, 115, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1985, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1297, 1298, 0, 0, 0, 0,
	0, 0, 0, 0, 1293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 1288, 1290, 0, 0, 0, 1289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 0, 181, 52, 73, 156, 1761, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 72, 66,
	67, 119, 120, 167, 168, 169, 143, 63, 0, 70,
	71, 0, 151, 0, 0, 0, 122, 0, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 0, 98, 47,
	102, 0, 0, 0, 0, 0, 0, 0, 59, 60,
	0, 0, 106, 101, 127, 129, 138, 147, 157, 164,
	140, 176, 177, 161, 150, 0, 109, 163, 77, 97,
	172, 99, 100, 135, 56, 118, 0, 94, 75, 0,
	0, 0, 80, 49, 89, 50, 78, 111, 0, 76,
	0, 152, 121, 0, 0, 0, 170, 0, 126, 0,
	1296, 0, 0, 0, 113, 154, 116, 145, 108, 136,
	65, 125, 165, 95, 131, 166, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 160, 91, 62, 175, 0, 134, 48, 128,
	0, 0, 54, 57, 171, 158, 85, 84, 0, 0,
	0, 0, 0, 0, 0, 112, 117, 141, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 124, 0, 0, 0, 61, 55, 0,
	110, 0, 0, 0, 64, 1915, 82, 142, 0, 45,
	0, 0, 186, 183, 148, 155, 107, 0, 0, 159,
	104, 103, 0, 0, 0, 0, 0, 0, 96, 0,
	178, 173, 0, 0, 162, 114, 153, 79, 90, 0,
	86, 216, 0, 213, 87, 88, 123, 137, 0, 0,
	0, 0, 0, 179, 144, 180, 0, 184, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 46, 83,
	146, 149, 69, 133, 58, 92, 139, 93, 115, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 544, 0, 0, 210, 0, 546, 547, 548,
	550, 216, 0, 213, 186, 183, 553, 551, 561, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 179, 0, 180, 0, 184,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 183,
	0, 0, 0, 51, 186, 183, 0, 0, 181, 52,
	73, 156, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 182, 178, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 180, 0, 184, 185, 179, 0, 180, 0, 184,
	185, 68, 72, 66, 67, 119, 120, 167, 168, 169,
	143, 63, 0, 70, 71, 0, 151, 0, 0, 0,
	122, 0, 0, 0, 174, 0, 0, 1889, 0, 0,
	0, 0, 98, 47, 102, 0, 0, 0, 0, 0,
	670, 0, 59, 60, 0, 0, 106, 101, 127, 129,
	138, 147, 157, 164, 140, 176, 177, 669, 0, 216,
	181, 213, 668, 0, 0, 0, 0, 0, 0, 714,
	0, 715, 0, 182, 0, 0, 0, 0, 0, 705,
	706, 0, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 210, 695, 692, 693, 697, 698, 699, 700,
	0, 0, 0, 696, 701, 561, 562, 671, 0, 0,
	0, 0, 666, 684, 555, 560, 713, 0, 0, 0,
	0, 0, 0, 0, 181, 0, 0, 0, 0, 0,
	181, 0, 186, 183, 0, 0, 0, 182, 0, 0,
	681, 682, 0, 182, 0, 0, 730, 0, 683, 0,
	178, 1152, 680, 685, 0, 0, 0, 176, 177, 0,
	0, 0, 0, 0, 0, 186, 183, 557, 0, 559,
	558, 0, 0, 179, 728, 180, 0, 184, 185, 0,
	0, 0, 0, 178, 565, 564, 0, 0, 0, 0,
	0, 0, 1154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 180, 0,
	184, 185, 807, 1967, 1295, 1284, 1283, 691, 0, 0,
	0, 176, 177, 0, 0, 0, 1285, 176, 177, 0,
	0, 0, 216, 0, 213, 0, 0, 0, 0, 1286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 1159, 0,
	324, 325, 326, 328, 327, 1163, 0, 1155, 0, 1167,
	1166, 1168, 1153, 1170, 1980, 0, 0, 1174, 1171, 1173,
	1172, 716, 1169, 0, 0, 186, 183, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 1160, 1161, 0,
	0, 182, 0, 178, 0, 0, 0, 0, 0, 732,
	0, 717, 718, 0, 0, 0, 0, 0, 1162, 1164,
	0, 181, 0, 0, 0, 0, 179, 0, 180, 1279,
	184, 185, 0, 0, 182, 0, 0, 0, 0, 1291,
	0, 0, 703, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1297, 1298, 0, 0, 0, 0, 0, 0,
	0, 0, 1293, 0, 719, 729, 725, 726, 723, 724,
	722, 721, 720, 731, 707, 708, 709, 710, 712, 1353,
	0, 565, 564, 711, 0, 176, 177, 0, 0, 0,
	0, 1287, 1288, 1290, 0, 0, 0, 1289, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 1315, 0, 44,
	0, 1314, 0, 1317, 1318, 1319, 1320, 0, 176, 177,
	727, 1336, 0, 0, 210, 0, 213, 1339, 1338, 1337,
	0, 0, 1343, 1344, 1345, 1346, 1348, 1347, 1311, 1312,
	1313, 0, 0, 0, 0, 1341, 1342, 0, 1340, 0,
	0, 0, 0, 1308, 1307, 0, 0, 1302, 1303, 1304,
	1305, 181, 1306, 0, 1309, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 182, 0, 0, 364, 0, 0,
	0, 0, 186, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 1355, 0, 1354, 1358, 0, 186, 183, 0,
	178, 0, 0, 0, 1356, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 180, 0, 184, 185, 0,
	0, 0, 0, 807, 0, 1295, 1284, 1283, 179, 0,
	180, 0, 184, 185, 0, 0, 0, 1285, 1296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	1286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 0, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 0, 670, 324, 325, 326,
	328, 327, 0, 0, 0, 0, 254, 0, 253, 1332,
	1331, 0, 0, 669, 0, 1882, 0, 0, 668, 1326,
	1333, 1334, 1335, 0, 0, 714, 0, 715, 0, 0,
	1327, 1328, 1329, 1330, 0, 705, 706, 0, 0, 0,
	0, 0, 0, 2035, 0, 521, 0, 0, 210, 695,
	692, 693, 697, 698, 699, 700, 0, 0, 181, 696,
	701, 561, 562, 671, 2036, 268, 0, 298, 666, 684,
	1279, 182, 713, 181, 0, 0, 0, 0, 0, 0,
	1291, 0, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 1297, 1298, 0, 681, 682, 0, 0,
	0, 0, 730, 1293, 683, 0, 290, 679, 680, 685,
	0, 1350, 1349, 1351, 1352, 0, 0, 0, 0, 0,
	0, 186, 183, 807, 0, 1295, 1284, 1283, 0, 0,
	728, 0, 1287, 1288, 1290, 0, 0, 1285, 1289, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 0, 0, 0, 0, 176, 177, 0, 1357, 0,
	0, 0, 179, 0, 180, 0, 184, 185, 0, 0,
	176, 177, 0, 691, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 310, 0, 324, 325, 326, 328, 327, 291,
	292, 293, 297, 295, 294, 296, 262, 264, 0, 260,
	263, 269, 265, 266, 267, 281, 270, 271, 272, 273,
	274, 283, 282, 284, 285, 286, 287, 275, 276, 277,
	278, 279, 280, 288, 299, 300, 301, 302, 303, 304,
	305, 306, 307, 0, 0, 0, 0, 989, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 716, 0, 0,
	1279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1297, 1298, 732, 0, 717, 718, 1296,
	0, 0, 0, 1293, 0, 0, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 703, 261,
	0, 0, 1287, 1288, 1290, 0, 0, 0, 1289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	719, 729, 725, 726, 723, 724, 722, 721, 720, 731,
	707, 708, 709, 710, 712, 0, 0, 565, 564, 711,
	670, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 996, 0, 669, 0, 0,
	0, 0, 668, 0, 0, 0, 0, 0, 0, 714,
	0, 715, 0, 0, 176, 177, 727, 0, 0, 705,
	706, 0, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 210, 695, 692, 693, 697, 698, 699, 700,
	0, 0, 0, 696, 701, 561, 562, 671, 0, 0,
	0, 0, 666, 684, 0, 0, 713, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	681, 682, 999, 0, 0, 0, 730, 0, 683, 0,
	0, 679, 680, 685, 0, 0, 0, 0, 0, 1296,
	0, 0, 0, 0, 0, 186, 183, 0, 0, 0,
	0, 0, 0, 0, 728, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 670, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 669, 0, 179, 0, 180, 668,
	184, 185, 0, 0, 0, 0, 714, 691, 715, 0,
	0, 0, 0, 0, 0, 0, 705, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 521, 0, 870, 210,
	695, 692, 693, 697, 698, 699, 700, 0, 0, 0,
	696, 701, 561, 562, 671, 0, 0, 0, 0, 666,
	684, 0, 0, 713, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 681, 682, 0,
	0, 0, 0, 730, 0, 683, 0, 0, 679, 680,
	685, 716, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 183, 0, 0, 0, 0, 0, 0,
	0, 728, 0, 0, 0, 0, 0, 0, 0, 732,
	178, 717, 718, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 182, 180, 0, 184, 185, 0,
	0, 0, 703, 0, 691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 719, 729, 725, 726, 723, 724,
	722, 721, 720, 731, 707, 708, 709, 710, 712, 0,
	0, 565, 564, 711, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	727, 0, 0, 0, 0, 0, 0, 0, 716, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 0, 717, 718,
	0, 0, 0, 0, 0, 0, 0, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 703,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 719, 729, 725, 726, 723, 724, 722, 721, 720,
	731, 707, 708, 709, 710, 712, 0, 0, 565, 564,
	711, 670, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 669, 0,
	0, 0, 0, 668, 0, 0, 0, 0, 0, 0,
	714, 0, 715, 0, 0, 176, 177, 727, 0, 0,
	705, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	521, 0, 0, 210, 695, 692, 693, 697, 698, 699,
	700, 0, 0, 0, 696, 701, 561, 562, 671, 0,
	0, 0, 0, 666, 684, 0, 0, 713, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 681, 682, 999, 0, 0, 0, 730, 0, 683,
	0, 0, 679, 680, 685, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 183, 0, 0,
	0, 0, 0, 0, 0, 728, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 807, 0, 0, 670, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 669, 0, 179, 0, 180,
	668, 184, 185, 0, 0, 0, 0, 714, 691, 715,
	0, 0, 0, 0, 0, 0, 0, 705, 706, 0,
	0, 0, 0, 0, 0, 0, 0, 521, 0, 0,
	210, 695, 692, 693, 697, 698, 699, 700, 0, 0,
	0, 696, 701, 561, 562, 671, 0, 0, 0, 0,
	666, 684, 0, 0, 713, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 681, 682,
	0, 0, 0, 0, 730, 0, 683, 0, 0, 679,
	680, 685, 716, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 183, 0, 0, 0, 0, 0,
	0, 0, 728, 0, 0, 0, 0, 0, 0, 0,
	732, 178, 717, 718, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 182, 180, 0, 184, 185,
	0, 0, 0, 703, 0, 691, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 719, 729, 725, 726, 723,
	724, 722, 721, 720, 731, 707, 708, 709, 710, 712,
	0, 0, 565, 564, 711, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 727, 0, 0, 0, 0, 0, 0, 0, 716,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 717,
	718, 0, 0, 0, 0, 0, 0, 0, 0, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	703, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 719, 729, 725, 726, 723, 724, 722, 721,
	720, 731, 707, 708, 709, 710, 712, 0, 0, 565,
	564, 711, 670, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 669,
	0, 0, 0, 0, 668, 0, 0, 0, 0, 0,
	0, 714, 0, 715, 0, 0, 176, 177, 727, 0,
	0, 705, 706, 0, 0, 0, 0, 0, 0, 0,
	0, 521, 0, 0, 210, 695, 692, 693, 697, 698,
	699, 700, 0, 0, 0, 696, 701, 561, 562, 671,
	0, 0, 0, 0, 666, 684, 0, 0, 713, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 681, 682, 0, 0, 0, 0, 730, 0,
	683, 0, 0, 679, 680, 685, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 183, 0,
	0, 0, 0, 0, 0, 0, 728, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 714, 0, 715, 179, 0,
	180, 0, 184, 185, 0, 705, 706, 0, 0, 691,
	0, 0, 0, 0, 0, 521, 0, 0, 210, 695,
	692, 693, 697, 698, 699, 700, 0, 0, 0, 696,
	701, 561, 562, 0, 0, 0, 0, 0, 0, 684,
	0, 0, 713, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 681, 682, 0, 0,
	0, 0, 730, 0, 683, 0, 0, 679, 680, 685,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 183, 716, 0, 0, 0, 0, 0, 0,
	728, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 717, 718, 0, 0, 0, 0, 0,
	0, 0, 179, 181, 180, 0, 184, 185, 0, 0,
	0, 0, 0, 691, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 703, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 719, 729, 725, 726,
	723, 724, 722, 721, 720, 731, 707, 708, 709, 710,
	712, 0, 0, 565, 564, 711, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 716, 0, 0,
	176, 177, 727, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 732, 0, 717, 718, 0,
	0, 0, 0, 0, 0, 0, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 703, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	719, 729, 725, 726, 723, 724, 722, 721, 720, 731,
	707, 708, 709, 710, 712, 0, 0, 565, 564, 711,
	0, 0, 0, 714, 0, 715, 0, 0, 0, 0,
	0, 0, 0, 705, 706, 0, 0, 0, 0, 0,
	0, 0, 0, 1017, 0, 0, 210, 695, 692, 693,
	697, 698, 699, 700, 176, 177, 727, 696, 701, 561,
	562, 0, 0, 0, 0, 0, 0, 684, 0, 0,
	713, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 681, 682, 0, 0, 0, 0,
	730, 0, 683, 0, 0, 679, 680, 685, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	183, 0, 0, 0, 0, 0, 0, 0, 728, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 180, 0, 184, 185, 0, 0, 0, 0,
	0, 691, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 716, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 717, 718, 0, 0, 0,
	0, 0, 0, 0, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 703, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 729,
	725, 726, 723, 724, 722, 721, 720, 731, 707, 708,
	709, 710, 712, 0, 0, 565, 564, 711, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 727,
}

var yyPact = [...]int16{
	749, -1000, -1000, -289, -1000, -1000, -1000, -1000, 1660, 3861,
	7912, 7912, 482, 485, 1685, 749, -1000, 6356, 559, 551,
	542, 230, 521, 1141, 10263, 7568, 571, 627, 681, 479,
	-1000, -256, -227, -1000, -91, 1533, -1000, -1000, 528, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1528, 562, -1000,
	541, 642, 653, -1000, 1439, -1000, 5491, 5491, 5491, 5491,
	504, 1141, 1141, 479, 135, 479, 1683, 396, 1682, 880,
	-1000, -1000, 699, -1000, 1814, 696, -1000, -1000, 479, -1000,
	859, -1000, 858, -1000, 7568, 854, -1000, -1000, -1000, -1000,
	5952, 7912, -1000, 4336, 10051, 1680, 1789, -1000, 1787, -1000,
	7568, 7164, 1141, 200, 260, 4036, -178, -6, -1000, -1000,
	-1000, -1000, -1000, 695, 692, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1602, 59, 1659, 1602, 1659, -1000, 1602, 1659,
	51, 51, 51, 51, 51, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1658, 1657,
	-1000, 1602, 1602, 1602, 1602, 1602, -1000, -1000, 1602, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1652, 1602, 1604,
	92, 1612, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4036,
	4036, 4036, 1656, 7568, 1141, 1157, 1679, 1678, 7568, -258,
	7568, 7568, 1890, -1000, -1000, -1000, 174, 7568, 1779, 7104,
	5491, 9124, 7568, 1777, 1775, -1000, 1764, 7568, 676, -1000,
	-1000, 7568, 1572, 625, 7568, 7568, 1141, 1132, 745, 744,
	-1000, 739, 6296, -1000, 1743, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1651, 982, 1141, 360, 187, 1571, 473,
	640, 347, 1341, 348, -1000, -1000, -1000, 952, -1000, 1141,
	-1000, 1910, -1000, -1000, 339, -1000, 335, 846, 1137, 7568,
	1650, 167, 1649, 9694, 1076, -1000, -295, -1000, -9, -1000,
	1136, 1335, 51, 1055, 1602, -1000, 51, 949, 51, 51,
	-1000, -1000, 706, 1752, 706, 706, 706, 706, 1135, 1135,
	-138, -138, -1000, -1000, -1000, -1000, 1075, -1000, -1000, 1074,
	1604, -1000, -1000, 1073, 7568, 1141, 1647, 1677, 1676, 7568,
	7568, 7568, 1811, 507, -1000, -1000, 1810, 1804, 1523, -1000,
	-1000, 171, -1000, -1000, 396, 1141, -1000, 684, -1000, -1000,
	-1000, -1000, -1000, -1000, 1666, 1141, 1131, -1000, 643, 359,
	7568, 1547, 359, 526, 624, -1000, 1675, -1000, -1000, 994,
	963, 1134, 7508, 200, -1000, -1000, -1000, 2738, -1000, 1905,
	1836, -8, 368, -231, 1332, -1000, -1000, 1646, -1000, -1000,
	11873, -1000, 1330, 1221, -1000, 1215, 1213, 49, 1141, -1000,
	-245, 99, -24, -1000, -1000, 1571, -1000, 1645, 11873, 1803,
	-1000, 1755, 768, -1000, 3372, -1000, -274, -1000, -1000, 1043,
	-1000, -274, -1000, -1000, -1000, 1571, -1000, 1644, 1643, -1000,
	1642, -1000, -1000, 1571, 1571, 1571, 683, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 706, 1515, 51, 706, 1512, 1511,
	706, 706, -1000, -1000, 1186, 738, -1000, -1000, -1000, -1000,
	1418, -1000, 1416, -1000, 84, 80, -1000, 1507, 1579, -1000,
	1409, 1578, 1673, 3522, 7568, 7568, 1641, 1640, 1639, 1593,
	479, 1593, 1833, 289, 7568, 1890, 437, 1890, 396, 8316,
	1141, -1000, -1000, -1000, 359, 185, -1000, -1000, -1000, -1000,
	359, 557, 298, 1141, -1000, -1000, -1000, 525, 7568, -1000,
	-1000, -1000, -1000, -1000, 5892, -1000, -1000, 1404, -1000, 250,
	250, 1602, 11873, 560, 560, -252, 1570, 325, -231, 1571,
	323, 1638, -1000, 2738, 646, -1000, 11873, 3149, 1571, 1571,
	1571, 1571, 11509, -1000, -1000, 671, -1000, -1000, -1000, 12007,
	12007, 12007, 12007, 12007, 12007, 12007, -1000, -1000, -1000, -1000,
	8, -1000, -274, -1000, 1125, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 682, 678, -1000, 1571, 1571, 1571, 1571, 1571,
	1571, 1571, 1571, 11873, 1571, 1736, 1571, 1571, 1571, 1571,
	1571, 1571, 1571, 1571, 1571, 1571, 1571, 7915, 1571, 1571,
	1571, 1571, -1000, -1000, -1000, -1000, -1000, -1000, -231, 1637,
	-1000, -1000, -1000, 846, -1000, 11873, 437, 841, 111, -1000,
	1567, -1000, 1072, 1499, 2295, 1492, -1000, 10445, -1000, -1000,
	-1000, 1194, -1000, 1025, -1000, 968, 1486, 10851, 11362, 11362,
	8316, -1000, -1000, 706, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 51, 1122, 51, -4, -11, -1000, 1071, -1000,
	1069, 3522, 1141, 7568, 1480, 1566, -1000, 252, 250, 1635,
	1634, 3522, 437, 2738, -1000, 1854, 1915, -1000, 1593, 7568,
	-1000, 491, 1853, -1000, -1000, 1827, -1000, 1565, -1000, -1000,
	1488, 1890, -1000, 1633, 145, 614, 359, 448, -1000, -1000,
	1141, -1000, -1000, 313, 1141, -1000, -1000, -1000, -1000, -1000,
	-1000, 702, 2738, 1769, -1000, -1000, 1769, -1000, -1000, 697,
	978, -1000, -1000, 890, 217, 973, -1000, 11873, 1141, -231,
	1632, 11873, 1141, 2738, 1399, 220, 11873, 11873, 987, -1000,
	-1000, 285, 3790, 1011, 866, 12007, 12007, 12007, 12007, 12007,
	12007, 12007, 12007, 12007, 12007, 12007, 12007, 12007, 12007, 12007,
	1082, 6703, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1164, -1000, 1593, 7164, 1194, 1194,
	1194, 1397, 11509, 387, 1144, 1144, 13, 11509, 13, 13,
	13, 13, 13, 72, -1000, -291, -1000, -1000, 7104, 8316,
	11362, 11362, 9911, 11873, 11362, 11362, 11362, 1816, 848, 387,
	7164, 1826, 1194, 1194, 1194, 1194, -1000, 1194, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 269, -1000, -1000, -1000,
	-1000, -1000, -1000, 1631, 1630, 1629, 1626, 1625, 1624, 1623,
	-1000, 11362, 11362, 11362, 11362, -1000, 1141, 1571, 646, 1386,
	-193, 11873, 1622, 768, -1000, -1000, 1478, -274, -1000, -1000,
	-178, -1000, -1000, -1000, -1000, 1194, 11362, 1351, -1000, -1000,
	616, 660, 1351, 1351, 1571, -1000, 706, -1000, 706, -1000,
	-1000, 1468, 1466, 1462, 1619, 1618, -259, 1055, 3522, 3522,
	1461, 1382, 1372, 1839, 1855, 1593, 1813, 1714, -1000, 1194,
	1801, 1141, -1000, -1000, -1000, -1000, -1000, 196, 845, 1141,
	8804, 1498, -1000, 10248, 590, 578, -1000, -1000, -1000, 1616,
	94, 436, 1670, 3015, 138, -1000, 1159, 827, 1085, 822,
	819, 817, 815, 810, 798, 796, 794, 783, 772, -1000,
	-1000, -1000, -1000, -1000, 1769, -1000, 1909, -1000, -1000, -1000,
	1895, 1370, -1000, 233, 1615, 1614, 2738, 646, 1613, 1363,
	702, -1000, -112, 285, 352, -1000, -1000, 991, -1000, -1000,
	1062, 12007, 12007, 12007, -1000, -1000, -1000, -1000, 1011, 12007,
	12007, 12007, 2493, 1062, 1774, 247, 115, 13, 43, 43,
	12, 12, 12, 12, 12, 315, 315, -1000, -1000, -1000,
	188, -1000, 1194, 1194, -1000, -1000, -1000, 11873, -1000, 1194,
	-1000, -274, 1081, -1000, -1000, 1009, 1571, -1000, 1351, 1351,
	641, 1564, 12345, 1602, -1000, 1602, 1612, 1604, -1000, 92,
	-1000, -1000, 107, 1602, 104, 1602, 1602, 1602, -1000, -1000,
	1602, 1602, -1000, 1602, 1602, 689, 1532, 1519, 1351, 11362,
	-1000, 785, -1000, 11873, 1194, 7568, -1000, -1000, -1000, -1000,
	-1000, 1611, 1054, 1053, 1052, 1051, 1049, 1047, 1045, 1041,
	1351, 1194, 1560, 1351, 1351, 1356, -1000, 11873, 220, 1672,
	-1000, -1000, 685, -1000, 1459, 1458, -1000, -1000, 1351, 11362,
	-284, -1000, -1000, 1121, -1000, -1000, 5488, -284, -284, 11362,
	-1000, -1000, -1000, -1000, -259, 3522, 2738, 1879, 1610, 1457,
	1454, -259, 1879, 702, 1761, 11873, 11873, 1854, -1000, 1593,
	-1000, -1000, 1816, -1000, -1000, 897, -1000, 1593, 1453, 191,
	119, 11873, -1000, 3871, -1000, 8804, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1854, 11873,
	-1000, -1000, -1000, -1000, -1000, 389, 3067, 1141, 1141, 1141,
	552, 11873, 1161, 11873, -1000, -1000, -1000, -1000, -1000, 7568,
	1449, 10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248,
	10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248,
	10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248,
	10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248,
	10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248,
	10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248, 10248, 577,
	-1000, 2738, 2738, 1609, 1608, 261, -1000, 1141, -1000, -183,
	3015, 1141, -1000, 1038, -1000, -1000, 966, 1018, 966, 966,
	966, 966, 966, 266, 1012, 535, -1000, 560, 560, 1879,
	11873, 951, 11873, 2738, 1329, 220, 1141, 702, 1670, -1000,
	-1000, -1000, -1000, 1062, 1062, 1062, -1000, 2493, 1062, 153,
	-1000, 12007, 12007, 79, -1000, -1000, 387, -1000, 65, -1000,
	-274, -1000, -1000, -1000, -1000, 4296, 1082, 11873, -1000, 258,
	-1000, -1000, -1000, 1604, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4296, 12007, 12007, 12007, 12007, -122,
	1491, 838, -1000, 11873, 607, -1000, -1000, 1005, 1444, 1327,
	1320, 1443, 1440, 1436, 1428, 1419, -1000, -1000, -1000, -1000,
	416, 1141, 646, -1000, 1900, -196, 158, -1000, -1000, -1000,
	-1000, -1000, 1571, -1000, -1000, 658, -1000, -1000, 1194, 1879,
	1376, 1241, 702, 11873, 437, -259, -259, 1879, 702, -1000,
	-1000, 1908, 734, 594, 1559, -1000, 586, 1839, 1194, 1667,
	-1000, -1000, -129, 11873, 8804, 10617, 387, 10617, -1000, 8804,
	2781, 1839, 4765, 482, 4740, 4061, 1544, 366, 165, -1000,
	-1000, -1000, 4276, 965, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1141,
	1892, 1891, 1885, 1881, 5977, 11873, 11873, -1000, 1824, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1367, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1237,
	1235, 2738, 2738, 1603, 1571, 1232, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 846, 846, -1000, -1000, -1000,
	-1000, -1000, -1000, 1225, 1220, 702, -1000, 1212, 1670, -1000,
	-1000, 12007, 1062, 1062, -12, -1000, 1009, -1000, 1194, 1602,
	1194, 539, -1000, -1000, -1000, 1194, 2213, 1016, 986, 101,
	1571, -98, -1000, 387, 11873, 1358, -1000, 972, -1000, 913,
	-1000, -1000, -1000, -1000, -1000, -1000, 7568, -1000, 220, 560,
	560, -1000, -1000, -1000, 175, 863, 768, 768, 911, 68,
	-1000, 1852, 468, 6700, -1000, 702, 1879, 702, 1670, 387,
	1210, 1879, 1879, 702, 1670, -1000, 1733, 11873, 11873, 11873,
	-1000, 1761, -1000, 11362, -1000, -1000, -281, 387, 3871, 2732,
	-1000, -1000, 2725, 10427, -1000, 1761, 8804, 834, -1000, 836,
	-1000, 10617, 9878, 7568, 1360, 1406, 1562, -1000, -1000, -1000,
	1797, 3810, 2315, 1141, 184, 5491, -1000, -1000, 1822, 1543,
	4680, -46, -1000, -1000, -1000, 767, 652, 1050, -1000, 1749,
	-1000, -1000, 3067, 1762, -1000, -1000, -1000, -1000, -1000, 10617,
	-1000, 1531, 1194, 845, 195, 10248, -1000, 304, 1205, 1202,
	2738, 1141, -1000, 3015, -1000, -1000, 1879, 702, 1670, 383,
	-1000, 1062, -1000, -1000, -1000, -1000, -1000, 12007, -1000, -1000,
	12007, -1000, 12007, -1000, 12007, -1000, 12007, 12007, 1194, 993,
	387, -1000, 1238, 1206, 1601, -1000, -1000, -1000, 768, -1000,
	768, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9700, -1000,
	1849, 1194, -1000, 1670, 702, -1000, -1000, -1000, 702, 702,
	1670, -1000, 1722, 387, 387, -1000, -1000, 1432, 11873, 10086,
	-1000, -1000, -1000, -1000, 3630, 9208, 467, 2268, 234, 7568,
	-1000, 234, 1390, 4061, -1000, -1000, 7164, 4061, 4061, 4061,
	4061, 4061, -1000, 1711, 1709, -1000, 1699, 1696, 1703, 7568,
	1200, 3810, 638, 1571, -1000, 7568, -1000, 1797, 1819, -1000,
	430, 5084, 1543, -46, 1542, -1000, -26, -42, 10487, 8316,
	706, -1000, -1000, -1000, -1000, -1000, 1141, 295, -1000, 112,
	190, -1000, 142, -1000, 159, 702, 702, 1198, 1194, -1000,
	-1000, 1670, -1000, 7568, 1534, 1534, 1534, 1534, 1534, 66,
	-1000, -1000, -1000, -1000, 1141, -1000, -1000, -1000, 649, 11873,
	-1000, -1000, -1000, 1670, 1670, -1000, -1000, 1879, 4061, 387,
	-1000, -1000, 7189, -1000, -1000, 11873, -1000, 11873, 10617, -1000,
	1217, 1571, -1000, 1879, 4061, 1401, 1422, -1000, 759, 1562,
	1600, 1671, 1437, -1000, -1000, -1000, -1000, 1700, -1000, 1697,
	-1000, -1000, -1000, -1000, -157, 540, 531, 506, 1141, -1000,
	1593, 3888, -1000, -1000, 1138, -1000, 151, -1000, -1000, -1000,
	1542, -46, -10, -1000, -1000, -1000, -1000, 387, 757, -1000,
	1541, -1000, 10617, -1000, -1000, 150, -1000, 1670, 1670, -1000,
	-1000, -1000, 1597, -1000, -1000, -1000, -1000, -1000, 1194, 197,
	-185, 1193, 8316, 1189, -1000, 387, -1000, -1000, 1865, 1539,
	454, 8804, 6381, 5168, 1669, 7164, 1571, -1000, 8720, 1141,
	1854, 1401, -1000, 1879, 7164, 11873, -1000, -1000, 11873, 1596,
	-1000, 11873, -1000, -1000, -1000, -1000, 1594, 1571, 1571, 1571,
	1181, -1000, -1000, -1000, 430, -1000, 6784, -1000, 989, -1000,
	-1000, -1000, -38, -54, -1000, 11873, 1587, -1000, -1000, -1000,
	-1000, 1141, -1000, 1719, -126, -187, -1000, -1000, -1000, 1194,
	11873, 1863, 1844, -1000, 3447, 834, -1000, -1000, 1757, 1348,
	1526, -1000, -1000, 10998, 1194, 1185, -1000, -1000, 644, -1000,
	-1000, 1181, 1839, -1000, 1854, -1000, 387, 387, 437, 387,
	136, 437, 437, 437, 9630, 1141, -1000, -1000, 2627, -1000,
	-1000, -1000, -1000, 387, 8400, 1179, -1000, 1717, -1000, -1000,
	-1000, -1000, 11873, 11873, 7996, 254, -1000, 1571, -1000, -1000,
	1467, 9528, 1141, -1000, -1000, 1839, 1175, 1173, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1171, 1171, 1171,
	638, -1000, -1000, 7593, -1000, -1000, -135, 387, 1531, 444,
	1907, -1000, 1571, -1000, 1593, -1000, -1000, -1000, -1000, -1000,
	136, -1000, -1000, -1000, -157, -1000, -195, -1000, 7164, 1526,
	1194, -1000, -1000, -215, 1489, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 2153, 1895, 23, 140, 2152, 2151, 2150, 2149, 2148,
	2146, 2145, 2144, 2143, 2142, 2141, 26, 39, 45, 47,
	41, 2140, 2138, 2137, 2136, 2135, 2134, 2130, 116, 2129,
	2127, 2126, 2119, 108, 2117, 2109, 2099, 2097, 72, 76,
	134, 153, 2256, 36, 37, 43, 48, 2096, 31, 2094,
	2091, 61, 2090, 42, 2087, 2084, 112, 2075, 2074, 5,
	34, 93, 106, 55, 2071, 2069, 102, 2339, 2068, 2065,
	145, 2064, 2061, 87, 14, 63, 4, 6, 8, 2060,
	78, 10, 2059, 81, 84, 2058, 2056, 2055, 126, 2054,
	62, 67, 7, 58, 2053, 69, 9, 125, 44, 32,
	15, 1, 52, 33, 2051, 22, 38, 30, 2048, 64,
	2047, 105, 49, 65, 19, 1203, 0, 40, 146, 2043,
	2042, 2041, 1847, 142, 13, 53, 70, 2040, 66, 117,
	54, 95, 2039, 2038, 2037, 2036, 82, 94, 90, 56,
	2035, 2031, 2029, 2026, 2025, 83, 2023, 2403, 318, 107,
	104, 77, 2022, 2021, 88, 114, 68, 85, 118, 341,
	589, 2020, 2017, 2015, 2011, 113, 74, 79, 96, 2010,
	73, 97, 352, 92, 17, 1901, 98, 188, 2009, 2006,
	2004, 2003, 2001, 2000, 1998, 89, 103, 170, 46, 75,
	525, 50, 1996, 1994, 1993, 1992, 86, 1991, 1989, 1988,
	59, 1987, 1986, 115, 160, 110, 101, 109, 1985, 1984,
	71, 80, 1981, 100, 99, 1975, 91, 21, 27, 828,
	57, 1973, 1971, 1969, 20, 1968, 1967, 1966, 2, 3,
	1963, 1961, 1959, 1958, 1956, 1955, 60, 1953, 137, 1952,
	16, 1942, 1940, 51, 1938, 1934, 1929, 1928, 273, 1675,
	1926, 1983, 111, 1924, 143,
}

var yyR1 = [...]uint8{
	0, 245, 2, 2, 2, 1, 1, 1, 1, 24,
	24, 24, 24, 24, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	22, 22, 22, 22, 22, 22, 22, 22, 247, 247,
	3, 3, 4, 5, 5, 6, 6, 7, 7, 31,
	31, 8, 9, 9, 9, 250, 250, 51, 51, 98,
	98, 10, 10, 10, 10, 11, 11, 11, 221, 221,
	220, 222, 222, 223, 223, 225, 225, 224, 224, 224,
	224, 224, 224, 224, 226, 226, 226, 226, 12, 12,
	12, 12, 12, 215, 215, 215, 215, 215, 13, 13,
	218, 218, 218, 16, 16, 16, 16, 17, 17, 18,
	18, 18, 20, 20, 103, 103, 107, 107, 107, 108,
	108, 108, 108, 237, 237, 127, 127, 246, 246, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 213, 213,
	213, 213, 214, 214, 214, 214, 216, 216, 217, 217,
	217, 217, 217, 217, 219, 219, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 14, 14, 32,
	32, 75, 75, 15, 113, 113, 194, 194, 194, 195,
	195, 195, 195, 195, 195, 197, 197, 198, 198, 120,
	120, 199, 199, 23, 23, 23, 23, 23, 23, 23,
	23, 27, 179, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 165, 165, 166, 166, 167, 167, 167, 167,
	159, 159, 159, 159, 130, 130, 130, 130, 130, 130,
	130, 130, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 205, 205, 205, 205, 205, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 207, 208, 209,
	201, 201, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 149, 149, 149, 149,
	149, 149, 200, 200, 196, 196, 196, 132, 132, 132,
	132, 132, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 140, 137, 137, 141, 138, 138, 142, 144,
	145, 145, 156, 156, 157, 157, 157, 139, 139, 143,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 131,
	131, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 146,
	146, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	158, 158, 147, 147, 148, 148, 148, 155, 155, 155,
	152, 152, 153, 153, 154, 154, 154, 150, 150, 150,
	151, 151, 151, 161, 190, 190, 190, 192, 192, 193,
	193, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 178, 178, 210, 210, 211,
	211, 212, 212, 189, 189, 189, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 177, 177, 187,
	187, 188, 188, 185, 185, 185, 185, 185, 185, 186,
	168, 168, 168, 168, 168, 169, 169, 170, 170, 170,
	170, 162, 162, 163, 163, 164, 164, 203, 203, 203,
	241, 241, 241, 241, 241, 241, 242, 242, 204, 204,
	171, 171, 174, 174, 172, 172, 172, 175, 175, 173,
	173, 176, 176, 183, 183, 183, 183, 252, 252, 181,
	181, 181, 182, 182, 182, 253, 28, 29, 29, 30,
	30, 30, 35, 35, 35, 33, 33, 34, 34, 40,
	40, 39, 39, 41, 41, 41, 41, 119, 119, 119,
	118, 118, 238, 238, 238, 238, 238, 43, 43, 44,
	44, 45, 45, 46, 46, 46, 228, 228, 227, 227,
	229, 229, 229, 229, 229, 229, 229, 229, 58, 58,
	95, 95, 95, 99, 99, 47, 47, 47, 47, 48,
	48, 49, 49, 50, 50, 125, 125, 124, 124, 124,
	52, 52, 52, 54, 53, 53, 53, 53, 55, 55,
	57, 57, 56, 56, 59, 59, 59, 59, 60, 60,
	97, 97, 42, 42, 42, 42, 42, 42, 42, 42,
	110, 110, 62, 62, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	72, 72, 72, 72, 72, 72, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 38, 38, 73,
	73, 73, 80, 74, 74, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 70, 70, 70, 70, 70, 70, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 254, 254, 71, 71, 71, 71, 36, 36, 36,
	36, 36, 126, 126, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	84, 84, 37, 37, 82, 82, 83, 112, 112, 85,
	85, 81, 81, 81, 81, 230, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 63, 63, 86, 86,
	87, 87, 239, 239, 240, 88, 88, 89, 89, 90,
	91, 91, 91, 92, 92, 92, 92, 93, 93, 93,
	65, 65, 65, 65, 65, 65, 94, 94, 96, 96,
	96, 96, 100, 100, 76, 76, 78, 78, 77, 79,
	101, 101, 105, 102, 102, 106, 106, 106, 106, 106,
	25, 26, 104, 104, 104, 121, 121, 121, 111, 111,
	109, 109, 116, 117, 117, 117, 117, 117, 122, 122,
	122, 123, 123, 231, 231, 231, 232, 232, 232, 233,
	233, 234, 235, 235, 236, 236, 236, 244, 244, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 248, 249,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 2, 1, 1, 1, 1, 6,
	6, 6, 6, 6, 2, 13, 12, 14, 14, 13,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 7, 10, 6, 9, 7, 8,
	8, 6, 7, 7, 3, 6, 3, 6, 3, 6,
	11, 13, 13, 14, 14, 6, 6, 7, 1, 1,
	4, 6, 10, 1, 3, 1, 3, 7, 8, 1,
	1, 9, 8, 7, 6, 1, 1, 1, 3, 0,
	4, 3, 4, 5, 4, 2, 6, 6, 1, 3,
	3, 0, 1, 1, 1, 1, 3, 1, 2, 3,
	1, 2, 1, 1, 1, 2, 3, 4, 2, 2,
	2, 3, 5, 0, 2, 2, 2, 2, 3, 5,
	1, 2, 3, 7, 10, 1, 1, 5, 5, 3,
	5, 3, 1, 3, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 0, 3, 0,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	4, 2, 3, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 4, 1,
	1, 0, 1, 2, 0, 3, 0, 2, 2, 0,
	2, 2, 2, 2, 2, 0, 2, 0, 3, 0,
	1, 0, 2, 3, 5, 5, 7, 3, 5, 3,
	5, 4, 4, 0, 1, 3, 3, 3, 3, 3,
	3, 3, 7, 9, 1, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 1,
	3, 3, 2, 2, 3, 2, 4, 2, 4, 2,
	2, 3, 2, 3, 2, 7, 9, 3, 3, 6,
	9, 9, 6, 6, 8, 8, 5, 8, 7, 4,
	0, 2, 4, 6, 2, 4, 2, 1, 1, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 2, 1,
	1, 2, 0, 4, 3, 4, 3, 3, 3, 3,
	3, 3, 3, 2, 4, 6, 2, 3, 2, 3,
	1, 3, 0, 2, 0, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 3,
	0, 1, 0, 5, 0, 3, 5, 1, 1, 1,
	1, 3, 3, 2, 2, 2, 1, 1, 2, 1,
	1, 4, 5, 4, 4, 4, 1, 2, 2, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 3, 0, 3, 0, 3, 3, 0, 3, 3,
	0, 1, 0, 1, 0, 2, 1, 0, 3, 3,
	0, 1, 2, 6, 0, 1, 4, 1, 2, 1,
	3, 2, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 5, 3, 3, 2, 3,
	2, 3, 3, 2, 2, 3, 4, 1, 1, 1,
	1, 1, 3, 3, 3, 2, 2, 2, 4, 1,
	2, 5, 5, 8, 8, 13, 11, 1, 1, 2,
	2, 10, 8, 9, 7, 7, 5, 0, 1, 1,
	0, 1, 1, 1, 2, 2, 1, 2, 0, 3,
	0, 1, 1, 3, 1, 1, 2, 1, 3, 1,
	1, 1, 3, 0, 4, 1, 3, 2, 1, 1,
	2, 1, 1, 1, 1, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 3, 6, 4, 7, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 0, 4, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 8,
	1, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	0, 4, 1, 3, 3, 2, 3, 2, 1, 2,
	0, 3, 1, 1, 3, 4, 4, 4, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 4, 3, 3,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 6, 2, 2, 2,
	2, 2, 2, 2, 3, 3, 1, 1, 1, 1,
	2, 1, 4, 5, 5, 5, 5, 6, 4, 4,
	6, 6, 8, 6, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 9, 7, 5, 4, 4, 3, 3,
	3, 1, 3, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	2, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	2, 2, 2, 1, 1, 2, 2, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 6, 6,
	4, 5, 4, 4, 4, 4, 4, 4, 4, 1,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 0,
	2, 1, 1, 3, 5, 3, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 0, 3,
	0, 2, 1, 3, 1, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 1, 3,
	1, 1, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 5, 3,
	1, 3, 1, 2, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 2, 0, 2, 2, 0,
	1, 4, 1, 3, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -245, -2, -1, -21, -22, -23, -24, -27, 126,
	132, 133, 127, 128, 71, 412, -179, 58, -241, -242,
	297, -199, 139, 152, 174, 175, 382, 136, 154, 137,
	394, 395, 156, 397, 79, -175, -172, -117, 21, -116,
	319, 151, -114, -115, 61, 131, 200, 385, 80, 25,
	27, 305, 311, 199, 84, 120, 16, 85, 206, 394,
	395, 119, 76, 363, 126, 52, 355, 356, 353, 204,
	365, 366, 354, 312, 211, 20, 31, 10, 28, 159,
	24, 113, 128, 201, 89, 88, 162, 166, 167, 26,
	160, 75, 207, 209, 19, 55, 150, 11, 384, 13,
	14, 399, 386, 143, 142, 100, 398, 138, 50, 8,
	122, 29, 97, 46, 157, 210, 48, 98, 17, 357,
	358, 34, 372, 168, 115, 53, 40, 400, 81, 401,
	73, 56, 326, 205, 79, 15, 51, 169, 402, 208,
	406, 99, 129, 362, 176, 49, 202, 403, 136, 203,
	6, 368, 33, 158, 47, 137, 313, 404, 87, 141,
	74, 5, 156, 9, 405, 54, 57, 359, 360, 361,
	38, 86, 12, 153, 376, 77, 407, 408, 152, 175,
	177, 310, 323, 135, 179, 180, 134, -175, -109, 142,
	138, 154, 56, -2, -180, -159, -116, -115, 63, 36,
	138, 138, 138, 140, 228, 140, -116, -116, -81, 143,
	61, -115, -122, 63, -56, -122, 61, -115, 137, -116,
	143, -116, 143, 63, -111, 143, 397, 394, 395, 362,
	56, 59, 135, 56, 137, -116, 143, -116, 143, 63,
	137, 145, 138, 60, 59, -160, -130, -132, -131, -134,
	-133, -135, -116, 63, 61, -140, -141, -144, -142, -143,
	264, 374, 261, 265, 262, 267, 268, 269, 120, 266,
	271, 272, 273, 274, 275, 282, 283, 284, 285, 286,
	287, 270, 277, 276, 278, 279, 280, 281, 288, 33,
	161, 254, 255, 256, 259, 258, 260, 257, 122, 289,
	290, 291, 292, 293, 294, 295, 296, 297, -136, -137,
	247, -138, -139, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 246, 249, 250, 251, 253, 252, -160,
	-160, -160, -116, 56, 226, 227, -116, -116, -111, 229,
	-111, 56, -213, 19, 199, 200, 212, 56, 81, 123,
	25, 123, -111, 81, 81, -56, 81, 137, -51, -56,
	-172, 137, -51, -56, 326, 56, 26, 26, -56, -81,
	-116, -116, -183, -252, 377, 37, -159, -161, -168, -162,
	-163, -164, -165, -184, -169, 146, 144, 156, 410, 148,
	149, 297, -177, 150, 138, 157, 73, 81, -205, 146,
	-208, 56, 305, 311, 144, 157, 156, 410, 71, 147,
	25, 384, 386, 31, 32, -154, 413, 299, -152, 308,
	123, 123, -147, 58, -146, 263, -148, 58, -147, -148,
	-147, -148, -150, 265, -150, -150, -150, -150, 58, 58,
	-147, -147, -147, -147, -147, -147, 58, -147, -156, 58,
	-145, 248, -157, 58, 56, 57, -56, -116, -116, 56,
	56, 56, -56, -237, 407, 408, -56, -56, -216, -214,
	8, 9, 10, 213, -56, 26, -117, -123, -114, -115,
	-122, -130, -123, -114, -56, 26, 26, 26, -51, 141,
	59, -51, 11, 131, -56, -56, -116, -116, 63, 97,
	97, 97, -181, 59, -117, 71, 36, 58, -204, 56,
	81, -116, -171, 157, -177, 61, 138, -203, 394, 395,
	-248, 58, -177, -177, 61, 138, 157, 61, 157, 73,
	19, -116, 9, 157, 157, -204, 63, -56, 58, -201,
	385, 16, 58, -206, 58, -207, 63, 64, 65, 110,
	66, 73, -149, 72, -62, 300, -70, 353, 356, 355,
	301, 74, 75, -116, 371, 370, -122, -209, 65, 414,
	-153, 309, 63, 61, -150, 65, -147, -150, 65, 61,
	-150, -150, -151, 120, 119, 33, -151, -151, -151, -151,
	-158, 63, -158, -155, 376, 377, -155, 65, 65, -156,
	65, -56, -116, 58, 56, 56, -56, -56, -56, 25,
	140, 25, -194, 25, 56, 59, 213, -213, -116, 123,
	57, -116, -116, 63, 141, -176, -173, -116, 185, -56,
	11, -176, -120, 146, -165, -168, 156, 131, 56, 63,
	73, 63, 73, 63, 90, -117, -252, -188, -185, -116,
	-115, 157, 58, 10, 9, 19, 155, 144, 156, 410,
	150, -203, 61, 58, -42, -61, 81, -67, 31, 26,
	9, 76, -248, -66, -62, -81, -230, -79, -80, 120,
	121, 109, 110, 117, 82, 122, -70, -68, -69, -71,
	-233, 186, 63, 64, -116, 62, 72, 65, 66, 67,
	68, 73, -122, 331, -77, 48, 49, 363, 364, 365,
	366, 372, 367, 85, 38, 40, 270, 300, 301, 353,
	361, 360, 359, 357, 358, 355, 356, 409, 143, 354,
	115, 362, 298, 61, 61, 61, 61, -203, 156, -171,
	-116, 396, -205, 410, -149, -248, 58, -42, 25, 31,
	-63, 65, 110, -206, 58, -207, -196, 409, 65, 66,
	-196, -248, -147, 58, -147, 58, 58, -248, -248, -248,
	123, -151, 60, -150, -151, 60, 60, -151, -151, 61,
	61, 120, 60, 59, 60, 254, 254, 60, 59, 60,
	59, 58, 57, 56, -187, -188, -70, -116, -115, -56,
	-56, 58, 58, 58, -3, -4, -5, 6, -248, -111,
	-3, -195, 19, 183, 184, -56, -214, -95, -116, 157,
	-216, -213, -117, -116, -176, 376, 59, -176, 180, 179,
	-247, 138, 157, -116, 146, -168, -56, -182, -117, 63,
	65, 60, 59, -147, -186, 303, -147, -186, -147, -42,
	-170, 179, 180, 33, 181, -170, 396, 58, 57, 157,
	-203, -248, 157, 58, -188, -249, 80, 79, 97, 214,
	60, -42, -64, 100, 81, 98, 99, 84, 106, 105,
	116, 109, 110, 111, 112, 113, 114, 115, 107, 108,
	119, 409, 90, 91, 92, 93, 94, 95, 96, 101,
	102, 103, 104, -110, -248, -80, -248, -248, -248, -61,
	-3, -74, -248, -42, 124, 125, -67, -248, -67, -67,
	-67, -67, -67, -67, -234, 299, -196, 63, 123, 123,
	-248, -248, -248, -248, -248, -248, -248, -248, -84, -42,
	-248, 41, -248, -248, -248, -248, -254, -248, -254, -254,
	-254, -254, -254, -254, -129, 120, 265, 161, 256, -136,
	-131, 271, 270, 251, 250, 262, 261, 235, 255, 254,
	122, -248, -248, -248, -248, -203, 58, -204, -42, -95,
	60, 58, 386, 59, 65, 60, -206, 63, 60, 302,
	-130, -249, 60, 60, 60, -40, 24, -39, -41, 111,
	-42, -122, -39, -39, -117, -151, -150, 63, -150, 310,
	310, 65, 65, -187, -116, -56, 60, 58, 58, 58,
	-187, -95, -188, -88, 15, -30, 5, -28, -253, -3,
	-56, 141, 21, 6, 8, 9, 10, 19, -113, 59,
	25, -216, -246, 58, 376, 132, -173, 180, 179, -116,
	156, -116, -190, -192, 376, -191, 57, 151, 71, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 61, -185,
	-91, 27, 28, -91, 60, -204, 56, 73, 182, -204,
	56, -166, -167, -42, -116, -203, 58, -42, -171, -188,
	60, -200, 181, -42, -42, -72, 73, 81, 74, 75,
	-67, 21, 22, 23, -73, -77, -80, 69, 100, 98,
	99, 84, -67, -67, -67, -67, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -126, 61, 63,
	255, -129, 61, -81, -249, -249, -249, 59, -249, -3,
	-66, 63, -116, -66, -116, 413, -117, -117, -39, -39,
	-42, -128, 120, 261, 161, 256, -138, -137, -139, 247,
	286, 287, 307, 254, 308, -136, 259, 258, 260, 271,
	262, 267, 269, 268, 266, -42, -41, -41, -39, -33,
	24, -82, -83, 86, -81, 19, -249, -249, -249, -249,
	-249, 263, 58, 58, 58, 58, 58, 58, 58, 58,
	-39, -40, -39, -39, -39, -174, -116, -248, -249, 60,
	382, 383, -42, 58, -63, 60, -154, -249, -39, 59,
	-249, -119, -118, 25, -116, 63, 123, -249, -249, -248,
	-151, -151, 60, 60, 60, 58, 58, -97, 398, -187,
	-187, 60, 60, 60, -92, 17, 16, -6, -4, -248,
	21, 24, -35, 44, 45, -29, -249, 25, -174, 201,
	-112, 86, -116, -217, -219, 230, -19, -16, -7, -9,
	-8, -11, -10, -12, -13, -14, -15, -25, -4, 143,
	-17, -18, -31, 10, 9, 20, 33, 205, 206, 211,
	207, 153, -32, 176, -26, 8, 362, 166, 167, 56,
	-251, -116, 109, 110, 111, 112, 114, 106, 105, 116,
	123, 90, 91, 92, 63, 59, 58, 65, 66, 67,
	68, -115, -136, -137, -138, -139, 271, 282, 283, 284,
	285, 262, 261, 272, 273, 274, 73, 81, 80, 79,
	100, 97, 98, 84, 85, 86, 87, 89, 88, 364,
	363, 365, 366, 31, 146, 144, 156, 410, 147, 132,
	134, 58, 58, 394, 395, 144, -189, 56, -191, 376,
	58, 378, 61, -178, 90, 63, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, -91, 9, 10, 60,
	59, 376, 58, 58, -188, -249, 58, 60, -190, 369,
	73, 74, 75, -67, -67, -67, -73, -67, -67, -67,
	-38, 162, 80, 376, -249, -249, -42, -249, -235, -236,
	63, 65, 66, -249, -249, 59, 57, 59, -147, -147,
	-147, -157, -156, -145, 241, -147, 241, -147, -147, -147,
	-147, -147, -147, -147, 25, 59, 11, 59, 11, -249,
	-39, -85, -83, 89, -42, -249, -122, 58, 65, 65,
	65, 65, 65, 65, 65, 65, -249, -249, -249, -249,
	60, 59, -42, -200, 56, 60, -202, 60, 60, -249,
	-41, -238, 411, -118, 111, -123, -238, -238, -40, -97,
	-187, -188, -60, 12, 58, 60, 60, -97, -60, -190,
	-93, 19, 34, -42, -89, -90, -42, -88, -3, -33,
	70, -3, -197, 57, 202, 230, -42, 412, -219, 230,
	-217, -88, -42, -28, -28, -28, -221, -116, -223, -220,
	216, 217, -28, -244, -243, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 352, -116, -116, -116, -215,
	40, 208, 209, 210, -42, -116, -248, -84, -56, 60,
	-251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
	-251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
	-251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
	-251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
	-251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
	-251, -251, -251, -251, -251, -251, -251, -251, 134, -188,
	-188, 58, 58, 157, -116, -193, -191, -116, 65, -210,
	56, 77, 65, -210, -210, -210, -210, -210, -211, 197,
	198, 65, -212, -211, 65, -170, -170, -60, -167, 90,
	80, 79, -116, -166, -188, 60, -200, -174, -190, -189,
	-38, 80, -67, -67, 254, 414, 59, -196, -128, 120,
	-126, -42, -150, 61, -156, -128, -67, -67, -67, -67,
	373, -88, 88, -42, 87, 65, 60, 59, 60, 59,
	60, 60, 60, 60, 60, 60, 147, -116, -249, 10,
	9, 382, 383, 60, 231, 388, 389, 168, 390, 181,
	391, 392, -248, 123, -249, -60, 60, 60, -190, -42,
	-95, -97, -97, -60, -190, 9, 100, 59, 18, 59,
	-91, -92, -249, -34, 47, -198, 376, -42, -217, -218,
	-219, -219, -217, 412, 88, -92, 87, -20, -16, -17,
	-19, 230, -109, 11, -51, -44, -45, -46, -47, -58,
	-80, -248, -56, 59, -222, -125, 203, 25, 215, -102,
	-127, 232, -106, 321, 320, -117, 331, -104, 319, 265,
	318, -210, 59, -116, 11, 11, 11, 11, -219, 230,
	-75, -74, -75, -113, 19, 60, 60, 60, -188, -188,
	58, -248, 60, 59, -204, -204, 60, 60, -190, 60,
	-189, -67, 310, -236, -249, -249, -249, 59, -249, -249,
	59, -249, 19, -249, 59, -249, 19, -248, -37, 368,
	-42, 60, 65, 65, -56, -200, -170, -170, 376, -63,
	16, -63, -63, -63, 65, 389, 168, 391, 16, -249,
	169, -88, 111, -190, -60, -190, -189, 60, -60, -60,
	-190, -189, 42, -42, -42, -90, -93, -39, 410, 412,
	-219, 88, 88, -93, -217, 89, 89, -218, -57, 29,
	-56, -56, -51, -250, 11, 57, 33, 59, -52, -54,
	-53, -55, 46, 50, 52, 47, 48, 49, 53, -125,
	-44, -248, -124, 169, -122, 25, -220, -116, 204, -130,
	19, 59, -102, 232, -103, -107, 322, 324, 90, 123,
	-121, -116, 63, 31, 33, -243, 29, -218, -249, -112,
	201, -251, -231, 222, 81, 60, 60, -188, -116, -191,
	-60, -190, -189, 147, -67, -67, -67, -67, -67, -67,
	-249, 63, 60, 60, 58, -63, -63, 393, -122, 16,
	-249, -189, -190, -190, -190, -189, 43, -43, 11, -42,
	88, -219, 412, -17, -20, 143, -18, 143, 412, 88,
	-98, 169, -56, -98, 57, -44, -101, -105, -81, -45,
	-46, -46, -45, -46, 46, 46, 46, 51, 46, 51,
	46, -53, -122, -249, -59, 54, 142, 55, -248, -122,
	19, -225, -224, 65, 220, 219, 81, 218, -116, -106,
	-103, 59, 323, 325, 326, 56, 77, -42, -117, -151,
	-174, 88, 230, 202, -232, 223, 222, -190, -190, 60,
	-249, -189, -56, -249, -249, -249, -249, -249, -36, 100,
	376, -174, 123, -239, -240, -42, -189, -189, -60, -44,
	88, 89, -42, -42, -65, 33, 38, -3, -248, -248,
	-60, -44, -60, -43, 59, 90, -49, -48, 56, 57,
	-50, 56, -48, 46, 46, -228, 376, 138, 138, 138,
	-99, -116, -3, -226, 59, -219, 230, 63, 41, 221,
	-107, -108, 327, 324, 330, 90, -218, 225, 224, -189,
	-189, 58, -249, 374, 53, 379, 60, -117, -249, -88,
	59, -86, 13, 143, -217, -20, -20, -100, 56, -101,
	-76, -78, -77, -248, -3, -94, -96, 6, -116, -114,
	-115, -99, -88, -60, -60, -105, -42, -42, 58, -42,
	58, -248, -248, -248, -249, 59, -224, 88, -217, 63,
	324, 328, 329, -42, 412, -174, 43, 375, 380, -249,
	-240, -87, 14, 16, 412, 30, -100, 59, -249, -249,
	-249, 59, 123, -249, -92, -88, -95, -227, -229, 399,
	400, 401, 402, 403, 404, 405, 406, -95, -95, -95,
	-124, -116, 88, 412, 88, 60, 43, -42, -74, 88,
	157, -78, 38, -3, -248, -96, -116, -92, 60, 60,
	59, -249, -249, -249, -59, 88, 376, 143, 9, -76,
	-3, -229, -228, 379, -101, -249, 380,
}

var yyDef = [...]int16{
	0, -2, 1, 2, 5, 6, 7, 8, 0, -2,
	0, 0, 970, 0, 0, 4, 14, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	561, 562, 563, 566, 0, 0, 577, 574, 575, 973,
	974, 975, 976, 977, 972, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 0, 0, 971,
	0, 0, 0, 3, 0, 274, 330, 330, 330, 330,
	0, 0, 0, 968, 0, 968, 0, 891, 0, 0,
	-2, -2, 0, 980, 0, 682, 978, 979, 968, 44,
	0, 46, 0, 48, 0, 0, 567, 564, 565, 262,
	0, 0, 576, 0, 0, 263, 0, 267, 0, 269,
	0, 0, 0, 583, 0, 290, 474, 470, 295, 296,
	297, 298, 299, 0, 972, 377, 378, 379, 380, 381,
	419, 420, 462, 449, 464, 462, 464, 426, 462, 464,
	477, 477, 477, 477, 477, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 0, 0,
	410, 462, 462, 462, 462, 462, 416, 417, 462, 451,
	452, 453, 454, 455, 456, 457, 458, 0, 462, 402,
	400, 404, 409, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 396, 397, 407, 408, 291,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 77,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 0, 272, 585, 0, 588, 275, 276, 277, 278,
	279, 280, 281, 0, 568, 570, 0, 557, 0, 0,
	0, 0, 0, 0, 527, 528, 303, 0, 305, 0,
	307, 0, 309, 310, 0, 312, 314, 568, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 476, 472, 471,
	0, 0, 477, 0, 462, 450, 477, 0, 477, 477,
	427, 428, 480, 0, 480, 480, 480, 480, 0, 0,
	467, 467, 413, 414, 415, 418, 0, 392, 395, 0,
	402, 401, 398, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 144, 0, 246, 0, 216,
	212, 213, 214, 211, 0, 0, 893, 0, -2, -2,
	981, 32, 683, 982, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 259, 0, 265, 264, 268, 270, 0,
	0, 0, 0, 0, 589, 591, 587, 0, 540, 0,
	0, 571, 0, 557, 0, 523, -2, 0, 558, 559,
	989, 1162, 0, 0, 518, 520, 0, 557, 570, 304,
	0, 0, 0, 311, 313, 0, 317, 318, 989, 0,
	350, 0, 0, 331, 0, 334, -2, 337, 338, 0,
	340, 374, 343, 344, 345, 0, 347, 462, 462, 370,
	0, 702, 703, 0, 0, 0, 0, 348, 349, 475,
	294, 473, 300, 301, 480, 0, 477, 480, 0, 0,
	480, 480, 429, 481, 0, 0, 430, 431, 432, 433,
	0, 460, 0, 411, 0, 0, 412, 0, 0, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 0, 249, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 47, 49, 0, 36, 581, 579, 580, 78,
	0, 41, 0, 570, 55, 56, 260, 0, 0, 9,
	10, 11, 12, 13, 0, 590, 586, 0, 531, 462,
	462, 462, 989, 0, 0, 0, 0, 0, 557, 0,
	0, 0, 522, 0, 0, 692, 989, 698, 700, 0,
	0, 0, 989, 745, 746, 747, 748, 749, 750, 989,
	989, 989, 989, 989, 989, 989, 776, 777, 778, 779,
	0, 781, -2, 897, 891, 899, 900, 901, 902, 903,
	904, 905, 0, 0, 949, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 811,
	821, 821, 821, 821, 821, 821, 821, 0, 0, 0,
	0, 0, 990, 516, 517, 519, 521, 525, 557, 0,
	571, 329, 306, 568, 308, 989, 0, 0, 0, 351,
	0, 906, 0, 0, 0, 0, 336, 0, 339, 341,
	342, 0, 366, 0, 368, 0, 0, -2, 989, 989,
	0, 421, 463, 480, 423, 465, 466, 424, 425, 482,
	478, 479, 477, 0, 477, 0, 0, 459, 0, 405,
	0, 0, 0, 0, 0, 529, 530, 462, -2, 0,
	0, 0, 0, 0, -2, 915, 0, 595, 0, 0,
	-2, 0, 0, 247, 248, 244, 217, 215, 650, 651,
	0, 0, 894, 147, 34, 0, 0, 38, 42, 43,
	0, 58, 59, 571, 570, 57, 266, 584, 592, 593,
	594, 484, 0, 920, 536, 539, 920, 537, 535, 0,
	568, 547, 548, 0, 0, 568, 569, 989, 0, 557,
	0, 989, 570, 0, 0, 372, 989, 989, 0, 697,
	1163, 695, 989, 0, 0, 989, 989, 989, 989, 989,
	989, 989, 989, 989, 989, 989, 989, 989, 989, 989,
	0, 0, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 699, 0, 716, 0, 0, 0, 692,
	63, 0, 989, 743, 0, 0, 767, 989, 768, 769,
	770, 771, 772, 773, 780, 0, 896, 898, 0, 0,
	989, 989, 989, 989, 989, 989, 989, 605, 0, 881,
	0, 0, 0, 0, 0, 0, 813, 0, 814, 815,
	816, 817, 818, 819, 820, 860, 0, 862, 863, 864,
	865, 866, 867, 0, 0, 0, 0, 382, 0, 0,
	879, 989, -2, 989, 989, 526, 0, 0, 0, 0,
	0, 989, 326, 0, 907, 332, 0, 374, 335, 375,
	474, 346, 367, 369, 371, 0, 989, 0, 611, 613,
	617, 0, 0, 0, 0, 422, 480, 461, 480, 468,
	469, 0, 0, 0, 0, 0, 690, 1162, 0, 0,
	0, 0, 0, 923, 0, 0, 599, 602, 597, 63,
	0, 0, 250, 251, 252, 253, 254, 0, 887, 0,
	0, 0, 33, 149, 0, 0, 582, 39, 40, 0,
	0, 571, 513, 485, 0, 487, 0, 505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 532,
	533, 921, 922, 534, 920, 541, 0, 549, 550, 542,
	0, 0, 284, 0, 0, 0, 0, 0, 0, 0,
	484, 556, 0, 693, 694, 696, 720, 0, 722, 724,
	704, 989, 989, 989, 708, 739, 740, 741, 0, 989,
	989, 989, 737, 712, 0, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 765, 832, 833,
	0, 775, 0, 0, 718, 719, 742, 989, 948, 63,
	763, 374, 0, 764, 774, 0, 893, 895, 0, 0,
	0, 0, -2, 462, 837, 462, 404, 402, 841, 400,
	843, 844, 845, 462, 848, 462, 462, 462, 853, 854,
	462, 462, 857, 462, 462, 0, 0, 0, 0, 989,
	606, 889, 884, 989, 0, 0, 808, 809, 810, 812,
	822, 861, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 610, 0, 0, 0, 572, 989, 372, 319,
	322, 323, 0, 352, 0, 0, 376, 782, 0, 989,
	622, 614, 618, 0, 620, 621, 0, 622, 622, -2,
	447, 448, 403, 406, 690, 0, 0, 688, 0, 0,
	0, 690, 688, 484, 927, 989, 989, 915, 65, 0,
	600, 601, 605, 603, 604, 596, 64, 0, 255, 0,
	0, 989, 652, 29, 218, 0, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 233, 234, 235, 915, 989,
	125, 126, 595, 595, 595, 0, 595, 0, 0, 0,
	113, 989, 0, -2, 960, 69, 70, 239, 240, 0,
	0, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 0,
	37, 0, 0, 0, 0, 0, 483, 0, 488, 0,
	0, 0, 491, 0, 506, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 538, 0, 0, 688,
	989, 0, 989, 0, 0, 372, 0, 484, 513, 373,
	721, 723, 725, 705, 706, 707, 709, 737, 713, 0,
	710, 989, 989, 0, 701, 717, 744, -2, 0, 992,
	374, 995, 996, 788, 789, 0, 0, 989, 834, 477,
	838, 839, 840, 402, 846, 847, 849, 850, 851, 852,
	855, 856, 858, 859, 0, 989, 989, 989, 989, 0,
	915, 0, 885, 989, 0, 806, 807, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 823, 824, 825, 826,
	0, 0, 0, 315, 0, 0, 0, 328, 333, 783,
	612, 784, 0, 619, 615, 0, 785, 786, 0, 688,
	0, 0, 484, 989, 0, 690, 690, 688, 484, 23,
	60, 0, 0, 924, 916, 917, 920, 923, 63, 607,
	598, -2, 257, 989, 245, 0, 888, 0, 221, 0,
	0, 923, 0, 970, 0, 0, 85, -2, 0, 88,
	93, 94, 0, 0, 997, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 108, 109, 110, 0,
	0, 0, 0, 0, 0, -2, -2, 243, 244, 148,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207, 35, 0,
	0, 0, 0, 0, 514, 0, 489, 494, 492, 495,
	507, 508, 496, 497, 498, 499, 500, 501, 502, 509,
	510, 503, 504, 511, 512, 568, 568, 282, 285, 286,
	287, 288, 289, 0, 0, 484, 555, 0, 513, 554,
	711, 989, 738, 714, 0, 991, 0, 994, 0, 462,
	0, 0, 835, 836, 842, 0, 0, 0, 0, 0,
	0, 882, 805, 890, 989, 0, 873, 0, 875, 0,
	876, 870, 872, 874, 877, 878, 0, 573, 372, 0,
	0, 324, 325, 327, 0, 0, 0, 0, 0, 0,
	363, 0, 0, 0, 787, 484, 688, 484, 513, 689,
	0, 688, 688, 484, 513, 928, 0, 989, 989, 989,
	919, 927, 66, 989, 608, 27, 0, 256, 28, 0,
	120, 219, 0, 0, 222, 927, 0, 131, 129, 125,
	132, 0, 0, 0, 0, 0, 629, 631, 632, 633,
	665, 0, 667, 0, 0, 0, 92, 666, 0, 81,
	0, 0, 953, 145, 146, 0, 0, 0, -2, 0,
	964, 961, 0, 111, 114, 115, 116, 117, 118, 0,
	237, 242, 0, 887, 0, 149, 50, 983, 0, 0,
	0, 0, 486, 0, 543, 544, 688, 484, 513, 0,
	552, 715, 766, 993, 790, 794, 791, 989, 793, 795,
	989, 797, 989, 799, 989, 801, 989, 989, 0, 0,
	886, 871, 0, 0, 0, 316, 320, 321, 0, 354,
	0, 356, 357, 358, 359, 360, 361, 362, 0, 623,
	0, 0, 616, 513, 484, 20, 16, 691, 484, 484,
	513, 22, 0, 925, 926, 918, 61, 627, 989, 0,
	121, 223, 220, 236, 0, 0, 0, 0, 79, 0,
	681, -2, 0, 0, 75, 76, 0, 0, 0, 0,
	0, 0, 670, 0, 0, 673, 0, 0, 0, 0,
	0, 0, 684, 0, 668, 0, 89, 665, 0, 90,
	0, 0, 82, 0, 84, 134, 0, 0, 989, 0,
	480, 965, 966, 967, 963, 998, 0, 0, 238, 0,
	0, 165, 986, 984, 0, 484, 484, 0, 0, 490,
	283, 513, 553, 0, 0, 0, 0, 0, 0, 827,
	804, 883, 868, 869, 0, 353, 355, 364, 0, 989,
	625, 15, 21, 513, 513, 19, 929, 688, 0, 258,
	30, 122, 0, 127, 128, 989, 130, 989, 0, 133,
	0, 0, 680, 688, 0, 688, 627, 950, 0, 630,
	661, 663, 0, 658, 671, 672, 674, 0, 676, 0,
	678, 679, 634, 635, 636, 0, 0, 0, 0, 669,
	0, 0, 95, 97, 0, 100, 0, 102, 103, 954,
	83, 0, 0, 137, 138, 955, 956, 957, 0, 959,
	112, 119, 0, 245, 52, 0, 985, 513, 513, 51,
	515, 551, 0, 792, 796, 798, 800, 802, 0, 0,
	0, 0, 0, 0, 912, 914, 17, 18, 908, 628,
	0, 0, 0, 0, 942, 0, 0, -2, 0, 0,
	915, 688, 74, 688, 0, 989, 655, 662, 989, 0,
	656, 989, 657, 675, 677, 648, 0, 0, 0, 0,
	0, 653, -2, 87, 0, 104, 0, 98, 0, 101,
	135, 136, 0, 0, 142, 989, 0, 987, 988, 53,
	54, 0, 803, 0, 0, 0, 546, 365, 624, 0,
	989, 910, 0, 123, 0, 0, 131, 67, 0, 942,
	930, 944, 946, 989, 63, 0, 936, -2, 938, 940,
	941, 0, 923, 73, 915, 951, 952, 659, 0, 664,
	0, 0, 0, 0, 667, 0, 96, 105, 0, 99,
	139, 140, 141, 958, 0, 0, 828, 0, 831, 626,
	913, 62, 989, 989, 0, 0, 68, 0, 947, -2,
	0, 0, 0, 80, 72, 923, 0, 0, 638, 640,
	641, 642, 643, 644, 645, 646, 647, 0, 0, 0,
	684, 654, 106, 0, 31, 545, 829, 911, 909, 0,
	0, 945, 0, -2, 0, 937, 939, 71, 660, 637,
	0, 685, 686, 687, 636, 107, 0, 124, 0, 933,
	63, 639, 649, 0, 943, -2, 830,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 412,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 413, 3, 414, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:440
		{
			switch len(yyDollar[1].statements) {
			case 0:
				setParseTree(yylex, nil)
			case 1:
				setParseTree(yylex, yyDollar[1].statements[0])
			default:
				setParseTree(yylex, &MultiStatement{Statements: yyDollar[1].statements})
			}
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:453
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:457
		{
			yyVAL.statements = append([]Statement{yyDollar[1].statement}, yyDollar[3].statements...)
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:461
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 9:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:473
		{
			tableName := ""
			if !yyDollar[4].tableName.Schema.isEmpty() {
				tableName = yyDollar[4].tableName.Schema.String() + "."
			}
			tableName += yyDollar[4].tableName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Table:  yyDollar[4].tableName,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     tableName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 10:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:490
		{
			tableName := ""
			if !yyDollar[4].tableName.Schema.isEmpty() {
				tableName = yyDollar[4].tableName.Schema.String() + "."
			}
			tableName += yyDollar[4].tableName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Table:  yyDollar[4].tableName,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     tableName,
					Comment:    "",
				},
			}
		}
	case 11:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:507
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 12:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:526
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    "",
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:545
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "INDEX",
					Object:     yyDollar[4].colIdent.String(),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:558
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 15:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:563
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 16:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:583
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 17:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:603
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 18:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:624
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 19:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:645
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 20:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:667
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 21:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:683
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 22:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:700
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:720
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:735
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:746
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:758
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 27:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:769
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:785
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 29:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:799
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 30:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:813
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 31:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:826
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:840
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name:       yyDollar[3].tableName,
					Type:       yyDollar[5].columnType,
					EnumValues: yyDollar[5].columnType.EnumValues,
				},
			}
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:852
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:856
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[5].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: GrantPrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:    true,
						Privileges: privs,
						Grantees:   grantees,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, table := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: GrantPrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    true,
							Privileges: privs,
							Grantees:   grantees,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:893
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[5].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: GrantPrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:         true,
						Privileges:      privs,
						Grantees:        grantees,
						WithGrantOption: true,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, table := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: GrantPrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:         true,
							Privileges:      privs,
							Grantees:        grantees,
							WithGrantOption: true,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:932
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[4].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: GrantPrivilege,
					Table:  yyDollar[4].tableNames[0],
					Grant: &Grant{
						IsGrant:    true,
						Privileges: privs,
						Grantees:   grantees,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[4].tableNames))
				for i, table := range yyDollar[4].tableNames {
					stmts[i] = &DDL{
						Action: GrantPrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    true,
							Privileges: privs,
							Grantees:   grantees,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:969
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[4].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: GrantPrivilege,
					Table:  yyDollar[4].tableNames[0],
					Grant: &Grant{
						IsGrant:         true,
						Privileges:      privs,
						Grantees:        grantees,
						WithGrantOption: true,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[4].tableNames))
				for i, table := range yyDollar[4].tableNames {
					stmts[i] = &DDL{
						Action: GrantPrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:         true,
							Privileges:      privs,
							Grantees:        grantees,
							WithGrantOption: true,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1008
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[5].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:    false,
						Privileges: privs,
						Grantees:   grantees,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, table := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    false,
							Privileges: privs,
							Grantees:   grantees,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1045
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[5].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:       false,
						Privileges:    privs,
						Grantees:      grantees,
						CascadeOption: true,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, table := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:       false,
							Privileges:    privs,
							Grantees:      grantees,
							CascadeOption: true,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1084
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[5].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:    false,
						Privileges: privs,
						Grantees:   grantees,
						// RESTRICT is the default, no special flag needed
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, table := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    false,
							Privileges: privs,
							Grantees:   grantees,
							// RESTRICT is the default, no special flag needed
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1123
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[4].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[4].tableNames[0],
					Grant: &Grant{
						IsGrant:    false,
						Privileges: privs,
						Grantees:   grantees,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[4].tableNames))
				for i, table := range yyDollar[4].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    false,
							Privileges: privs,
							Grantees:   grantees,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1160
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[4].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[4].tableNames[0],
					Grant: &Grant{
						IsGrant:       false,
						Privileges:    privs,
						Grantees:      grantees,
						CascadeOption: true,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[4].tableNames))
				for i, table := range yyDollar[4].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:       false,
							Privileges:    privs,
							Grantees:      grantees,
							CascadeOption: true,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1199
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[4].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[4].tableNames[0],
					Grant: &Grant{
						IsGrant:    false,
						Privileges: privs,
						Grantees:   grantees,
						// RESTRICT is the default, no special flag needed
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[4].tableNames))
				for i, table := range yyDollar[4].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    false,
							Privileges: privs,
							Grantees:   grantees,
							// RESTRICT is the default, no special flag needed
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1238
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1247
		{
			yyVAL.statement = &DDL{
				Action:      CreateSchema,
				IfNotExists: true,
				Schema: &Schema{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1258
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1267
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1277
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1286
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: string(yyDollar[6].bytes),
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1298
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 51:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 52:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1326
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 53:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1346
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 54:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1364
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1382
		{
			yyVAL.statement = &DDL{
				Action:    AddExclusion,
				Table:     yyDollar[4].tableName,
				Exclusion: yyDollar[6].exclusionDefinition,
			}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1390
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1399
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1414
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1422
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 62:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1429
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1435
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1439
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1445
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1449
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 67:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1456
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 68:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1468
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1480
		{
			yyVAL.str = InsertStr
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1484
		{
			yyVAL.str = ReplaceStr
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1490
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1496
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1500
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1504
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1509
		{
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1510
		{
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1514
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1518
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1523
		{
			yyVAL.partitions = nil
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1527
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1533
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1537
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1541
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1545
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1551
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1555
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1566
		{
			yyVAL.statement = &Declare{
				Type: declareHandler,
				Handler: &HandlerDefinition{
					Action:     yyDollar[2].str,
					Conditions: yyDollar[5].handlerConditions,
					Statement:  yyDollar[6].statement,
				},
			}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1579
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1583
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1589
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1594
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1598
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1604
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1608
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1614
		{
			yyVAL.handlerConditions = []HandlerCondition{yyDollar[1].handlerCondition}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1618
		{
			yyVAL.handlerConditions = append(yyVAL.handlerConditions, yyDollar[3].handlerCondition)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1624
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionMysqlErrorCode, Value: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1628
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[2].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1632
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[3].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1636
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlwarning}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1640
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionNotFound}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1644
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlexception}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1648
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionName, Value: string(yyDollar[1].colIdent.String())}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1654
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1658
		{
			yyVAL.statement = &BeginEnd{
				Statements:        []Statement{},
				SuppressSemicolon: false,
			}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1665
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1672
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1681
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1688
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1695
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1702
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1710
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1720
		{
			yyVAL.str = ""
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1724
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1728
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1732
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1736
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1742
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 119:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1749
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1763
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1767
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 123:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1778
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 124:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1786
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1796
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1800
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1807
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 128:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1817
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1828
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1833
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1838
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1845
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1849
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1860
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1864
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1870
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1874
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1878
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1884
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1888
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1892
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1896
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1902
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1906
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1912
		{
			yyVAL.str = SessionStr
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1916
		{
			yyVAL.str = GlobalStr
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1989
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1993
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1997
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2001
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2007
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2011
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2015
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2020
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2026
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2030
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2036
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2040
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2045
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2054
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2058
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2067
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2083
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2096
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2106
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2111
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2117
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2118
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2121
		{
			yyVAL.exprs = nil
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2122
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2126
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2131
		{
			yyVAL.empty = struct{}{}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2133
		{
			yyVAL.empty = struct{}{}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2136
		{
			yyVAL.bytes = nil
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2140
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2144
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2149
		{
			yyVAL.bytes = nil
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2153
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2157
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2161
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2165
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2169
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2174
		{
			yyVAL.expr = nil
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2178
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2183
		{
			yyVAL.expr = nil
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2187
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2192
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2196
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2201
		{
			yyVAL.bytes = nil
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2205
		{
			yyVAL.bytes = nil
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2211
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2220
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2230
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				Table:  yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 266:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2240
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				Table:    yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2252
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2261
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: yyDollar[5].colIdent.String(),
				},
			}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2271
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2280
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: string(yyDollar[5].bytes),
				},
			}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2292
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2299
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2305
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2309
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2314
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2318
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2322
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2326
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2330
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2334
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2338
		{
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2344
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      NewColIdent(""), // Default index type
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 283:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2353
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent, // GIST, btree, etc.
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2364
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2368
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2374
		{
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "=",
			}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2381
		{
			// AND token represents && in the lexer
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "&&",
			}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2389
		{
			// OR token represents || in the lexer
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "||",
			}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2397
		{
			// Handle all other operators and GIST-specific operators
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   string(yyDollar[3].colIdent.val),
			}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2407
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2411
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2416
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2421
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2427
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2438
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2442
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + "." + string(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2446
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + "." + string(yyDollar[3].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2452
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2465
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2470
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2475
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2480
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2486
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2491
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2496
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2501
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2506
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2511
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2516
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2521
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2526
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 316:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2535
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2545
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2550
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 319:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2555
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 320:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2562
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 321:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2569
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 322:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2577
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2582
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 324:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2587
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 325:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2592
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2598
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 327:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2604
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2611
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2618
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2624
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2630
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2634
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 333:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2638
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2642
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2646
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2652
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2656
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2660
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2664
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2668
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2672
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2676
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2680
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2684
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2688
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2692
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2698
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2704
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2710
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2716
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2720
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2725
		{
			yyVAL.sequence = &Sequence{}
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2729
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2734
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2739
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2744
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2749
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2754
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2759
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2764
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2769
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2774
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2779
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2784
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 365:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2789
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2796
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2800
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2804
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2808
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2812
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2816
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2821
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2825
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2830
		{
			yyVAL.bytes = nil
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), DisplayWidth: yyDollar[2].optVal}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2894
		{
			yyVAL.str = ""
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2903
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2907
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2915
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2919
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2925
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 422:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3020
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3028
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3032
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3036
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3040
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3044
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3048
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3056
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3060
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3064
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3072
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3076
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3080
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3084
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3088
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3092
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3096
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3101
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3106
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3110
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3116
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3120
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3124
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3128
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3132
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3136
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3140
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3144
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3148
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3154
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3159
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3164
		{
			yyVAL.optVal = nil
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3168
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3173
		{
			yyVAL.optVal = nil
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3177
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3181
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3190
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3194
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3198
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3203
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3207
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3212
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3216
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3221
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3225
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3229
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3234
		{
			yyVAL.str = ""
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3238
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3242
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3247
		{
			yyVAL.str = ""
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3251
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3255
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3261
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3266
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3270
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3274
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3280
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3284
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3290
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3294
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3300
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3304
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3309
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3313
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3317
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3321
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3325
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3329
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3333
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3337
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3341
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3345
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3349
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3353
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3364
		{
			yyVAL.str = ""
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3374
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3378
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3384
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3388
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3394
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3398
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3404
		{
			yyVAL.indexPartition = nil
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3408
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3412
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3418
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3422
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3426
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3430
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3434
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3438
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3442
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3446
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3450
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3454
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3458
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3464
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3468
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3474
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3479
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3485
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3489
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3495
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3499
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3504
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3508
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3512
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), OperatorClass: string(yyDollar[2].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3516
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3526
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3531
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3538
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3545
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 544:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3552
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 545:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3561
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 546:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3572
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3583
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3587
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3591
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3595
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 551:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3601
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 552:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3611
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 553:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3622
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 554:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3633
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 555:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3644
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 556:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3653
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3662
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3666
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3670
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3676
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3680
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3684
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3688
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3692
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3696
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3702
		{
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3703
		{
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3707
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3711
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3716
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3723
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3727
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3733
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3737
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3741
		{
			yyVAL.colIdent = NewColIdent("ALL")
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3747
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3751
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3758
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3762
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3768
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3772
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3779
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3783
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3789
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3793
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3798
		{
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3799
		{
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3803
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3807
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3811
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3817
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3821
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3825
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3830
		{
			setAllowComments(yylex, true)
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3834
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3840
		{
			yyVAL.bytes2 = nil
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3844
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3850
		{
			yyVAL.str = UnionStr
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3854
		{
			yyVAL.str = UnionAllStr
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3858
		{
			yyVAL.str = UnionDistinctStr
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3863
		{
			yyVAL.str = ""
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3867
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3871
		{
			yyVAL.str = SQLCacheStr
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.str = ""
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.str = DistinctStr
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3885
		{
			yyVAL.str = ""
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3889
		{
			yyVAL.str = StraightJoinHint
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3894
		{
			yyVAL.selectExprs = nil
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3898
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3904
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3908
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3914
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3918
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3922
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3926
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3931
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3935
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3939
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3946
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3951
		{
			yyVAL.overExpr = nil
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3955
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 624:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3963
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 626:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3972
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3976
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3982
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3986
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3996
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4000
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4004
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4009
		{
			yyVAL.strs = []string{}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4013
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4019
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4023
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4029
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4033
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4037
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4045
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4049
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4053
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4063
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 649:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4067
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4073
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4078
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4082
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4088
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4092
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4105
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4109
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4113
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4117
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4123
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4125
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4129
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4131
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4137
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4140
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4145
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4149
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4153
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4159
		{
			yyVAL.str = JoinStr
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.str = JoinStr
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4167
		{
			yyVAL.str = JoinStr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4173
		{
			yyVAL.str = StraightJoinStr
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4179
		{
			yyVAL.str = LeftJoinStr
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4183
		{
			yyVAL.str = LeftJoinStr
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4187
		{
			yyVAL.str = RightJoinStr
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4191
		{
			yyVAL.str = RightJoinStr
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.str = NaturalJoinStr
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4201
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4221
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4225
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4230
		{
			yyVAL.indexHints = nil
		}
	case 685:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4234
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4238
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 687:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4242
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4247
		{
			yyVAL.expr = nil
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4251
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4256
		{
			yyVAL.columns = nil
		}
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4260
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4266
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4270
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4274
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4278
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4282
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4286
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4290
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4294
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4300
		{
			yyVAL.str = ""
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4304
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4310
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4314
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4320
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4324
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4328
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4332
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4336
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4340
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4344
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 711:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4348
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4352
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4356
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 714:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4360
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4364
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4368
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4373
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4377
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4381
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4387
		{
			yyVAL.str = IsNullStr
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4391
		{
			yyVAL.str = IsNotNullStr
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4395
		{
			yyVAL.str = IsTrueStr
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4399
		{
			yyVAL.str = IsNotTrueStr
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4403
		{
			yyVAL.str = IsFalseStr
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4407
		{
			yyVAL.str = IsNotFalseStr
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4413
		{
			yyVAL.str = EqualStr
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4417
		{
			yyVAL.str = LessThanStr
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4421
		{
			yyVAL.str = GreaterThanStr
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4425
		{
			yyVAL.str = LessEqualStr
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4429
		{
			yyVAL.str = GreaterEqualStr
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4433
		{
			yyVAL.str = NotEqualStr
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4437
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4441
		{
			yyVAL.str = PosixRegexStr
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4445
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4449
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4453
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4458
		{
			yyVAL.expr = nil
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4462
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4468
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4472
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4476
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4482
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4488
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4498
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4502
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4506
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4510
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4514
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4518
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4522
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4526
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4530
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4534
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4538
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4542
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4546
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4550
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4554
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4558
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4562
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4566
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4570
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4574
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4578
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 766:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4582
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4586
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4590
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4594
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4602
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4616
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4620
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4624
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4632
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4640
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4648
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4652
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 782:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4662
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 783:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4666
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 784:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4670
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 785:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4674
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 786:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4678
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 787:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4682
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4692
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4696
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 790:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4700
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 791:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4705
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 792:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4709
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 793:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4713
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 794:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4717
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 795:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4721
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 796:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4725
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 797:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4729
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 798:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4733
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 799:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4737
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 800:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4741
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 801:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4745
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 802:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4749
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 803:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4753
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 804:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4757
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 805:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4761
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4765
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4770
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4774
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4778
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4782
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4793
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4797
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4801
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4805
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4809
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4814
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4819
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4824
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4829
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4833
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 823:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4847
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 824:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4851
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 825:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4855
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 826:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4859
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4865
		{
			yyVAL.str = ""
		}
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4869
		{
			yyVAL.str = BooleanModeStr
		}
	case 829:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4873
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 830:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4877
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4881
		{
			yyVAL.str = QueryExpansionStr
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4887
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4891
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4897
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4901
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4905
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4909
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4913
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4917
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4923
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4929
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4933
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.convertType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4939
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4943
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4947
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4951
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4955
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4959
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4963
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4967
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4971
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4975
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4979
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4983
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4987
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4991
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4995
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4999
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5003
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5009
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5013
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5017
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5021
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5025
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5029
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5033
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5037
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 868:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5041
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 869:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5045
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5049
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 871:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5053
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: NewIntVal(yyDollar[4].bytes)}
		}
	case 872:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5057
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 873:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5061
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 874:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5065
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 875:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5069
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 876:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5073
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 877:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5077
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5081
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5085
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5090
		{
			yyVAL.expr = nil
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5094
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 882:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5099
		{
			yyVAL.str = string("")
		}
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5103
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5109
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5113
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 886:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5119
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5124
		{
			yyVAL.empty = struct{}{}
		}
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5126
		{
			yyVAL.empty = struct{}{}
		}
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5129
		{
			yyVAL.expr = nil
		}
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5133
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5139
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5143
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5147
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 894:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5151
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5157
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5163
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5167
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5172
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5177
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5181
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5185
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5189
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5193
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5197
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5201
		{
			yyVAL.expr = &NullVal{}
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5207
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5211
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5216
		{
			yyVAL.exprs = nil
		}
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5220
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5225
		{
			yyVAL.expr = nil
		}
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5229
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5235
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5239
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5245
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5250
		{
			yyVAL.orderBy = nil
		}
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5254
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5260
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5264
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5270
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 920:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5275
		{
			yyVAL.str = AscScr
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5279
		{
			yyVAL.str = AscScr
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5283
		{
			yyVAL.str = DescScr
		}
	case 923:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5288
		{
			yyVAL.limit = nil
		}
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5292
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 925:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5296
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 926:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5300
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 927:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5305
		{
			yyVAL.str = ""
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5309
		{
			yyVAL.str = ForUpdateStr
		}
	case 929:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5313
		{
			yyVAL.str = ShareModeStr
		}
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5326
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5330
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 932:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5334
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 933:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5339
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 934:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5343
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 935:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5347
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5354
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5358
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5364
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 939:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5368
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5372
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5376
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 942:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5381
		{
			yyVAL.updateExprs = nil
		}
	case 943:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5385
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5391
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5395
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5401
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 947:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5405
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 948:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5411
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5417
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5427
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5431
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5437
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5443
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5447
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5453
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 956:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5457
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5461
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 958:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5466
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5470
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5476
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5482
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 963:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5489
		{
			yyVAL.bytes = []byte("charset")
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5496
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5500
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5504
		{
			yyVAL.expr = &Default{}
		}
	case 968:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5509
		{
			yyVAL.empty = struct{}{}
		}
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5511
		{
			yyVAL.empty = struct{}{}
		}
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5514
		{
			yyVAL.str = ""
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5516
		{
			yyVAL.str = IgnoreStr
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5520
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5527
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5531
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5535
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5539
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5545
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5549
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5554
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5561
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 983:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5567
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5571
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5575
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 986:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5581
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5585
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5589
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 989:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5595
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5599
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 991:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5606
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5613
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5617
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 994:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5624
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5628
		{
			yyVAL.arrayElement = NewIntVal(yyDollar[1].bytes)
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5632
		{
			yyVAL.arrayElement = NewFloatVal(yyDollar[1].bytes)
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5638
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5642
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5824
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5833
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
