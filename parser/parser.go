// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const VINDEX = 57489
const VINDEXES = 57490
const STATUS = 57491
const VARIABLES = 57492
const RESTRICT = 57493
const CASCADE = 57494
const NO = 57495
const ACTION = 57496
const PERMISSIVE = 57497
const RESTRICTIVE = 57498
const PUBLIC = 57499
const CURRENT_USER = 57500
const SESSION_USER = 57501
const PAD_INDEX = 57502
const FILLFACTOR = 57503
const IGNORE_DUP_KEY = 57504
const STATISTICS_NORECOMPUTE = 57505
const STATISTICS_INCREMENTAL = 57506
const ALLOW_ROW_LOCKS = 57507
const ALLOW_PAGE_LOCKS = 57508
const BEFORE = 57509
const AFTER = 57510
const EACH = 57511
const ROW = 57512
const SCROLL = 57513
const CURSOR = 57514
const OPEN = 57515
const CLOSE = 57516
const FETCH = 57517
const PRIOR = 57518
const FIRST = 57519
const LAST = 57520
const DEALLOCATE = 57521
const INSTEAD = 57522
const OF = 57523
const DEFERRABLE = 57524
const INITIALLY = 57525
const IMMEDIATE = 57526
const DEFERRED = 57527
const CONCURRENTLY = 57528
const SQL = 57529
const SECURITY = 57530
const BEGIN = 57531
const START = 57532
const TRANSACTION = 57533
const COMMIT = 57534
const ROLLBACK = 57535
const BIT = 57536
const TINYINT = 57537
const SMALLINT = 57538
const SMALLSERIAL = 57539
const MEDIUMINT = 57540
const INT = 57541
const INTEGER = 57542
const SERIAL = 57543
const BIGINT = 57544
const BIGSERIAL = 57545
const INTNUM = 57546
const REAL = 57547
const DOUBLE = 57548
const PRECISION = 57549
const FLOAT_TYPE = 57550
const DECIMAL = 57551
const NUMERIC = 57552
const SMALLMONEY = 57553
const MONEY = 57554
const TIME = 57555
const TIMESTAMP = 57556
const DATETIME = 57557
const YEAR = 57558
const DATETIMEOFFSET = 57559
const DATETIME2 = 57560
const SMALLDATETIME = 57561
const CHAR = 57562
const VARCHAR = 57563
const VARYING = 57564
const BOOL = 57565
const CHARACTER = 57566
const VARBINARY = 57567
const NCHAR = 57568
const NVARCHAR = 57569
const NTEXT = 57570
const UUID = 57571
const TEXT = 57572
const TINYTEXT = 57573
const MEDIUMTEXT = 57574
const LONGTEXT = 57575
const CITEXT = 57576
const BLOB = 57577
const TINYBLOB = 57578
const MEDIUMBLOB = 57579
const LONGBLOB = 57580
const JSON = 57581
const JSONB = 57582
const ENUM = 57583
const GEOMETRY = 57584
const POINT = 57585
const LINESTRING = 57586
const POLYGON = 57587
const GEOMETRYCOLLECTION = 57588
const MULTIPOINT = 57589
const MULTILINESTRING = 57590
const MULTIPOLYGON = 57591
const VARIADIC = 57592
const ARRAY = 57593
const NOW = 57594
const GETDATE = 57595
const BPCHAR = 57596
const TEXT_PATTERN_OPS = 57597
const NULLX = 57598
const AUTO_INCREMENT = 57599
const APPROXNUM = 57600
const SIGNED = 57601
const UNSIGNED = 57602
const ZEROFILL = 57603
const ZONE = 57604
const AUTOINCREMENT = 57605
const DATABASES = 57606
const TABLES = 57607
const VITESS_KEYSPACES = 57608
const VITESS_SHARDS = 57609
const VITESS_TABLETS = 57610
const VSCHEMA_TABLES = 57611
const EXTENDED = 57612
const FULL = 57613
const PROCESSLIST = 57614
const NAMES = 57615
const CHARSET = 57616
const GLOBAL = 57617
const SESSION = 57618
const ISOLATION = 57619
const LEVEL = 57620
const READ = 57621
const WRITE = 57622
const ONLY = 57623
const REPEATABLE = 57624
const COMMITTED = 57625
const UNCOMMITTED = 57626
const SERIALIZABLE = 57627
const NEW = 57628
const CONCAT_NULL_YIELDS_NULL = 57629
const CURSOR_CLOSE_ON_COMMIT = 57630
const QUOTED_IDENTIFIER = 57631
const ARITHABORT = 57632
const FMTONLY = 57633
const NOCOUNT = 57634
const NOEXEC = 57635
const NUMERIC_ROUNDABORT = 57636
const ANSI_DEFAULTS = 57637
const ANSI_NULL_DFLT_OFF = 57638
const ANSI_NULL_DFLT_ON = 57639
const ANSI_NULLS = 57640
const ANSI_PADDING = 57641
const ANSI_WARNINGS = 57642
const FORCEPLAN = 57643
const SHOWPLAN_ALL = 57644
const SHOWPLAN_TEXT = 57645
const SHOWPLAN_XML = 57646
const IMPLICIT_TRANSACTIONS = 57647
const REMOTE_PROC_TRANSACTIONS = 57648
const XACT_ABORT = 57649
const CURRENT_TIMESTAMP = 57650
const DATABASE = 57651
const CURRENT_DATE = 57652
const CURRENT_TIME = 57653
const LOCALTIME = 57654
const LOCALTIMESTAMP = 57655
const UTC_DATE = 57656
const UTC_TIME = 57657
const UTC_TIMESTAMP = 57658
const REPLACE = 57659
const CONVERT = 57660
const CAST = 57661
const SUBSTR = 57662
const SUBSTRING = 57663
const GROUP_CONCAT = 57664
const SEPARATOR = 57665
const INHERIT = 57666
const LEAD = 57667
const LAG = 57668
const MATCH = 57669
const AGAINST = 57670
const BOOLEAN = 57671
const LANGUAGE = 57672
const WITH = 57673
const WITHOUT = 57674
const PARSER = 57675
const QUERY = 57676
const EXPANSION = 57677
const UNUSED = 57678
const VIRTUAL = 57679
const STORED = 57680
const GENERATED = 57681
const ALWAYS = 57682
const IDENTITY = 57683
const SEQUENCE = 57684
const INCREMENT = 57685
const MINVALUE = 57686
const CACHE = 57687
const CYCLE = 57688
const OWNED = 57689
const NONE = 57690
const CLUSTERED = 57691
const NONCLUSTERED = 57692
const REPLICATION = 57693
const COLUMNSTORE = 57694
const INCLUDE = 57695
const HOLDLOCK = 57696
const NOLOCK = 57697
const NOWAIT = 57698
const PAGLOCK = 57699
const ROWLOCK = 57700
const TABLELOCK = 57701
const DEFINER = 57702
const INVOKER = 57703
const TYPECAST = 57704
const CHECK = 57705
const OVER = 57706

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 26,
	-2, 4,
	-1, 29,
	130, 412,
	-2, 166,
	-1, 35,
	166, 520,
	167, 520,
	-2, 510,
	-1, 281,
	119, 910,
	-2, 906,
	-1, 282,
	119, 911,
	-2, 907,
	-1, 283,
	119, 912,
	-2, 254,
	-1, 325,
	268, 921,
	-2, 799,
	-1, 359,
	86, 1162,
	-2, 86,
	-1, 360,
	86, 1112,
	-2, 87,
	-1, 366,
	86, 1091,
	-2, 879,
	-1, 368,
	86, 1136,
	-2, 881,
	-1, 630,
	268, 921,
	-2, 548,
	-1, 680,
	268, 921,
	-2, 548,
	-1, 710,
	55, 40,
	57, 40,
	-2, 42,
	-1, 742,
	116, 1086,
	251, 1086,
	257, 1086,
	-2, 291,
	-1, 743,
	116, 1087,
	251, 1087,
	257, 1087,
	-2, 292,
	-1, 744,
	251, 1089,
	257, 1089,
	-2, 326,
	-1, 745,
	251, 1090,
	257, 1090,
	-2, 326,
	-1, 746,
	251, 1191,
	257, 1191,
	-2, 333,
	-1, 747,
	251, 1137,
	257, 1137,
	-2, 326,
	-1, 748,
	251, 1142,
	257, 1142,
	-2, 333,
	-1, 749,
	116, 1140,
	251, 1140,
	257, 1140,
	-2, 298,
	-1, 751,
	116, 1190,
	251, 1190,
	257, 1190,
	-2, 333,
	-1, 752,
	251, 1176,
	257, 1176,
	-2, 346,
	-1, 753,
	251, 1182,
	257, 1182,
	-2, 346,
	-1, 754,
	251, 1130,
	257, 1130,
	-2, 346,
	-1, 755,
	251, 1126,
	257, 1126,
	-2, 346,
	-1, 757,
	116, 1085,
	251, 1085,
	257, 1085,
	-2, 307,
	-1, 758,
	116, 1180,
	251, 1180,
	257, 1180,
	-2, 308,
	-1, 759,
	116, 1128,
	251, 1128,
	257, 1128,
	-2, 309,
	-1, 760,
	116, 1125,
	251, 1125,
	257, 1125,
	-2, 310,
	-1, 761,
	116, 1117,
	251, 1117,
	257, 1117,
	-2, 311,
	-1, 763,
	116, 1189,
	251, 1189,
	257, 1189,
	-2, 313,
	-1, 766,
	116, 1098,
	251, 1098,
	257, 1098,
	-2, 283,
	-1, 767,
	116, 1178,
	251, 1178,
	257, 1178,
	-2, 326,
	-1, 768,
	116, 1179,
	251, 1179,
	257, 1179,
	-2, 326,
	-1, 769,
	116, 1099,
	251, 1099,
	257, 1099,
	-2, 326,
	-1, 770,
	116, 1100,
	251, 1100,
	257, 1100,
	-2, 326,
	-1, 771,
	116, 1101,
	251, 1101,
	257, 1101,
	-2, 326,
	-1, 772,
	116, 1169,
	251, 1169,
	257, 1169,
	-2, 289,
	-1, 773,
	116, 1203,
	251, 1203,
	257, 1203,
	-2, 290,
	-1, 774,
	116, 1109,
	251, 1109,
	257, 1109,
	-2, 316,
	-1, 775,
	116, 1146,
	251, 1146,
	257, 1146,
	-2, 317,
	-1, 776,
	116, 1124,
	251, 1124,
	257, 1124,
	-2, 318,
	-1, 777,
	116, 1147,
	251, 1147,
	257, 1147,
	-2, 319,
	-1, 778,
	116, 1110,
	251, 1110,
	257, 1110,
	-2, 320,
	-1, 779,
	116, 1134,
	251, 1134,
	257, 1134,
	-2, 321,
	-1, 780,
	116, 1133,
	251, 1133,
	257, 1133,
	-2, 322,
	-1, 781,
	116, 1135,
	251, 1135,
	257, 1135,
	-2, 323,
	-1, 782,
	116, 1084,
	251, 1084,
	257, 1084,
	-2, 265,
	-1, 783,
	116, 1181,
	251, 1181,
	257, 1181,
	-2, 266,
	-1, 784,
	116, 1170,
	251, 1170,
	257, 1170,
	-2, 267,
	-1, 785,
	116, 1172,
	251, 1172,
	257, 1172,
	-2, 268,
	-1, 786,
	116, 1129,
	251, 1129,
	257, 1129,
	-2, 269,
	-1, 787,
	116, 1114,
	251, 1114,
	257, 1114,
	-2, 270,
	-1, 788,
	116, 1115,
	251, 1115,
	257, 1115,
	-2, 271,
	-1, 789,
	116, 1163,
	251, 1163,
	257, 1163,
	-2, 272,
	-1, 790,
	116, 1082,
	251, 1082,
	257, 1082,
	-2, 273,
	-1, 791,
	116, 1083,
	251, 1083,
	257, 1083,
	-2, 274,
	-1, 792,
	116, 1154,
	251, 1154,
	257, 1154,
	-2, 328,
	-1, 793,
	116, 1103,
	251, 1103,
	257, 1103,
	-2, 328,
	-1, 794,
	116, 1107,
	251, 1107,
	257, 1107,
	-2, 328,
	-1, 795,
	116, 1102,
	251, 1102,
	257, 1102,
	-2, 330,
	-1, 796,
	116, 1141,
	251, 1141,
	257, 1141,
	-2, 330,
	-1, 797,
	116, 1132,
	251, 1132,
	257, 1132,
	-2, 281,
	-1, 798,
	116, 1171,
	251, 1171,
	257, 1171,
	-2, 282,
	-1, 876,
	119, 914,
	-2, 909,
	-1, 920,
	116, 346,
	268, 346,
	383, 346,
	-2, 259,
	-1, 921,
	268, 311,
	383, 311,
	-2, 260,
	-1, 922,
	268, 312,
	383, 312,
	-2, 261,
	-1, 945,
	268, 921,
	-2, 326,
	-1, 946,
	57, 326,
	59, 326,
	241, 326,
	-2, 1089,
	-1, 947,
	57, 761,
	-2, 1098,
	-1, 948,
	57, 326,
	-2, 1099,
	-1, 949,
	57, 330,
	-2, 1102,
	-1, 950,
	57, 764,
	-2, 1117,
	-1, 952,
	57, 326,
	-2, 1137,
	-1, 953,
	57, 767,
	-2, 1168,
	-1, 954,
	57, 326,
	-2, 1178,
	-1, 955,
	57, 770,
	-2, 1187,
	-1, 956,
	57, 772,
	-2, 1082,
	-1, 957,
	57, 773,
	-2, 1084,
	-1, 958,
	57, 774,
	-2, 1114,
	-1, 959,
	57, 775,
	-2, 1132,
	-1, 960,
	57, 330,
	-2, 1141,
	-1, 961,
	57, 777,
	-2, 1170,
	-1, 962,
	57, 778,
	-2, 1171,
	-1, 963,
	57, 779,
	-2, 1181,
	-1, 964,
	57, 780,
	-2, 1107,
	-1, 965,
	57, 781,
	-2, 1154,
	-1, 966,
	57, 326,
	-2, 1100,
	-1, 967,
	57, 326,
	-2, 1101,
	-1, 968,
	57, 784,
	-2, 1169,
	-1, 969,
	57, 785,
	-2, 1176,
	-1, 970,
	57, 326,
	-2, 1191,
	-1, 971,
	57, 788,
	-2, 1140,
	-1, 972,
	57, 326,
	-2, 1142,
	-1, 973,
	57, 326,
	-2, 1190,
	-1, 1049,
	142, 422,
	-2, 1096,
	-1, 1176,
	268, 921,
	-2, 548,
	-1, 1186,
	116, 326,
	268, 326,
	383, 326,
	-2, 255,
	-1, 1200,
	5, 27,
	-2, 674,
	-1, 1243,
	5, 26,
	-2, 850,
	-1, 1292,
	59, 387,
	-2, 384,
	-1, 1310,
	119, 912,
	-2, 254,
	-1, 1578,
	5, 26,
	-2, 95,
	-1, 1580,
	5, 26,
	-2, 97,
	-1, 1637,
	5, 27,
	-2, 851,
	-1, 1708,
	5, 26,
	-2, 96,
	-1, 1745,
	5, 26,
	-2, 853,
	-1, 1830,
	58, 110,
	-2, 185,
	-1, 1833,
	58, 110,
	-2, 185,
	-1, 1906,
	189, 53,
	-2, 185,
	-1, 1947,
	58, 110,
	-2, 184,
	-1, 1972,
	5, 27,
	-2, 854,
	-1, 2140,
	5, 26,
	-2, 49,
}

const yyPrivate = 57344

const yyLast = 21681

var yyAct = [...]int16{
	370, 1800, 1759, 2022, 1965, 733, 1860, 1806, 1907, 1909,
	1957, 1281, 1573, 1123, 634, 265, 808, 561, 1796, 1668,
	997, 1482, 732, 1883, 1589, 1803, 1259, 1572, 1756, 1525,
	287, 2023, 277, 1979, 95, 1645, 545, 95, 1946, 1718,
	1284, 315, 1015, 859, 1658, 1513, 1483, 702, 704, 1363,
	1479, 1192, 286, 1044, 1307, 1132, 1131, 1035, 282, 1038,
	1309, 95, 95, 998, 1109, 944, 1315, 1181, 1059, 901,
	934, 298, 365, 1104, 930, 95, 290, 53, 814, 1264,
	1346, 1187, 1251, 720, 95, 983, 95, 1075, 878, 567,
	1834, 719, 95, 1085, 1246, 258, 510, 691, 358, 361,
	994, 706, 345, 1054, 740, 615, 285, 734, 344, 851,
	658, 1328, 1428, 346, 735, 633, 3, 1169, 576, 1077,
	929, 2118, 52, 1073, 1433, 543, 1520, 2083, 273, 1543,
	1627, 560, 616, 1091, 1120, 1121, 1797, 349, 259, 260,
	261, 262, 600, 519, 46, 1526, 48, 25, 26, 1527,
	1528, 279, 1674, 590, 1529, 500, 600, 991, 1818, 520,
	521, 1682, 2153, 264, 1305, 355, 2054, 2073, 512, 1819,
	515, 1997, 1998, 518, 589, 588, 598, 599, 591, 592,
	593, 594, 595, 596, 597, 590, 353, 584, 600, 587,
	2147, 1970, 1865, 1817, 21, 602, 603, 604, 605, 606,
	607, 608, 2066, 585, 586, 583, 609, 610, 611, 612,
	589, 588, 598, 599, 591, 592, 593, 594, 595, 596,
	597, 590, 1864, 2159, 600, 46, 1041, 48, 25, 26,
	1188, 1189, 2133, 1124, 1076, 2016, 1081, 95, 1260, 1818,
	1184, 21, 2053, 593, 594, 595, 596, 597, 590, 269,
	1819, 600, 46, 1474, 48, 25, 26, 1646, 1647, 1648,
	1649, 1650, 1651, 1994, 1631, 1969, 1818, 282, 282, 522,
	90, 86, 87, 1825, 88, 1272, 1505, 1819, 1271, 282,
	721, 1273, 722, 1824, 1506, 1507, 1029, 1030, 1028, 553,
	1079, 1616, 282, 282, 282, 282, 282, 282, 282, 848,
	1687, 1311, 1312, 1313, 2126, 1533, 849, 1073, 1074, 1316,
	1314, 312, 313, 1615, 629, 1614, 1330, 282, 1092, 1207,
	1081, 988, 1426, 1425, 1466, 1424, 282, 1214, 1820, 1821,
	1823, 2123, 1062, 1212, 1822, 591, 592, 593, 594, 595,
	596, 597, 590, 1081, 95, 600, 569, 1069, 257, 1057,
	1081, 95, 95, 95, 1825, 559, 1058, 2151, 2040, 538,
	1320, 617, 1322, 1321, 1824, 1527, 1528, 546, 547, 548,
	1521, 551, 2072, 1105, 2074, 2039, 1901, 806, 555, 2145,
	2144, 1825, 505, 2129, 2130, 816, 570, 1369, 1137, 2090,
	2099, 1824, 2041, 361, 588, 598, 599, 591, 592, 593,
	594, 595, 596, 597, 590, 1900, 601, 600, 1944, 1820,
	1821, 1823, 1802, 1775, 1065, 1822, 1060, 1070, 1884, 2146,
	601, 1935, 549, 550, 1067, 1066, 2131, 349, 1958, 540,
	1585, 1586, 542, 1406, 995, 1959, 1820, 1821, 1823, 1427,
	1596, 663, 1822, 621, 622, 623, 624, 625, 626, 627,
	560, 664, 601, 1742, 507, 1403, 1676, 1597, 1055, 1606,
	1675, 539, 541, 1683, 21, 1299, 1291, 1298, 89, 1286,
	1999, 54, 49, 1671, 1531, 1056, 1725, 1519, 2108, 1840,
	2150, 511, 527, 84, 83, 1289, 84, 2065, 601, 1016,
	1018, 1711, 827, 589, 588, 598, 599, 591, 592, 593,
	594, 595, 596, 597, 590, 1304, 1092, 600, 1688, 1533,
	21, 2098, 805, 508, 560, 601, 1865, 1263, 1262, 95,
	2124, 1261, 717, 504, 95, 799, 1186, 95, 1188, 1189,
	95, 503, 523, 1084, 95, 1666, 1666, 1292, 517, 711,
	1040, 1106, 236, 85, 21, 46, 1407, 48, 25, 26,
	817, 818, 1063, 49, 1056, 95, 1055, 2137, 1064, 1818,
	1968, 1162, 1404, 819, 1320, 1402, 1322, 1321, 2003, 1857,
	1819, 1017, 95, 1056, 282, 282, 1936, 1937, 1938, 1405,
	49, 282, 2005, 282, 1640, 862, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 2124, 804, 619, 620, 807, 836, 1551, 1416, 601,
	1669, 1670, 1672, 1734, 822, 1227, 1175, 875, 857, 2000,
	649, 816, 923, 724, 632, 879, 537, 580, 2124, 533,
	1561, 282, 1037, 1036, 1071, 1411, 1072, 282, 282, 282,
	282, 282, 282, 282, 282, 933, 1163, 854, 282, 1223,
	826, 834, 575, 876, 573, 1876, 815, 2141, 1068, 1875,
	880, 837, 838, 839, 840, 841, 842, 843, 844, 936,
	575, 601, 975, 977, 1825, 845, 846, 1874, 985, 1873,
	282, 282, 282, 282, 1824, 1872, 95, 1562, 282, 95,
	95, 95, 95, 95, 1871, 1222, 872, 1870, 874, 1868,
	1582, 95, 1274, 1249, 95, 885, 907, 723, 95, 904,
	1804, 2139, 906, 95, 95, 1476, 664, 1410, 999, 883,
	884, 882, 984, 984, 282, 1232, 924, 927, 2142, 1820,
	1821, 1823, 1777, 1773, 877, 1822, 1283, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 940, 361, 981, 990, 1283, 1283, 619, 620,
	1023, 1034, 1204, 811, 1203, 349, 349, 349, 349, 349,
	1980, 601, 2001, 2002, 2004, 2006, 2007, 1295, 304, 1774,
	349, 860, 861, 574, 573, 683, 817, 818, 932, 349,
	1981, 1000, 2111, 976, 1003, 941, 942, 1012, 2110, 819,
	575, 980, 95, 1001, 1002, 95, 1004, 2071, 95, 1020,
	1026, 1021, 21, 2067, 95, 1025, 95, 574, 573, 940,
	1282, 1221, 1042, 95, 2038, 50, 95, 1139, 95, 1294,
	21, 95, 574, 573, 575, 560, 881, 989, 2070, 992,
	993, 364, 1088, 501, 1283, 1090, 574, 573, 509, 575,
	1693, 513, 514, 574, 573, 1331, 282, 282, 282, 282,
	2068, 1111, 2069, 575, 1625, 1337, 1692, 1107, 1108, 1336,
	575, 1331, 1982, 49, 574, 573, 1172, 1173, 1174, 46,
	1171, 48, 25, 26, 282, 282, 282, 1093, 1094, 1095,
	1096, 575, 1978, 1818, 875, 1787, 1701, 21, 1700, 1138,
	1980, 1538, 1118, 2030, 1819, 526, 1331, 1353, 589, 588,
	598, 599, 591, 592, 593, 594, 595, 596, 597, 590,
	1981, 2127, 600, 1886, 879, 1351, 863, 1327, 574, 573,
	876, 902, 282, 903, 856, 1478, 1127, 1869, 1129, 282,
	1741, 574, 573, 1698, 50, 575, 282, 1193, 1170, 631,
	651, 652, 653, 654, 655, 656, 657, 1160, 575, 880,
	598, 599, 591, 592, 593, 594, 595, 596, 597, 590,
	1608, 1177, 600, 855, 1393, 1347, 560, 1111, 1301, 868,
	870, 871, 282, 1107, 1108, 282, 869, 95, 631, 937,
	939, 1866, 574, 573, 529, 530, 531, 1898, 2158, 82,
	1663, 2132, 1719, 2080, 1663, 2061, 987, 54, 1825, 575,
	1524, 1190, 1898, 2060, 1210, 2057, 2056, 2009, 1824, 364,
	364, 364, 364, 95, 364, 1215, 2046, 560, 1663, 2043,
	1945, 364, 1663, 2042, 1895, 1178, 1179, 1180, 1663, 2010,
	1719, 1955, 1719, 1799, 1889, 1394, 1760, 1719, 1784, 50,
	560, 1396, 1389, 1390, 578, 1397, 1392, 1391, 1014, 343,
	1762, 1399, 1395, 1820, 1821, 1823, 1719, 560, 1231, 1822,
	1267, 95, 1398, 1523, 282, 1277, 1751, 1750, 1888, 1388,
	1300, 693, 696, 697, 698, 694, 1256, 695, 699, 1195,
	1522, 1252, 1253, 1719, 1749, 1663, 1662, 621, 1293, 349,
	1502, 560, 1639, 560, 1568, 1567, 1564, 1565, 1564, 1563,
	1243, 1269, 1275, 95, 1196, 560, 1266, 95, 1268, 95,
	938, 560, 938, 1126, 688, 560, 1317, 915, 833, 832,
	812, 810, 731, 730, 1761, 364, 535, 46, 528, 1229,
	1793, 1899, 726, 1898, 1720, 1319, 714, 1792, 1791, 1340,
	1788, 1342, 1343, 1344, 1345, 1287, 1288, 1290, 1705, 46,
	1694, 1364, 1241, 95, 95, 282, 1689, 1242, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1685, 1558, 282, 1368, 1348,
	1352, 1349, 1350, 282, 282, 1611, 601, 50, 21, 1744,
	715, 1480, 713, 1248, 1247, 1371, 1376, 282, 1593, 1557,
	1552, 1368, 54, 687, 46, 1367, 282, 49, 1368, 50,
	2148, 1226, 1418, 1248, 1247, 1370, 1332, 1333, 1022, 1335,
	713, 1338, 1339, 282, 282, 282, 282, 282, 282, 688,
	2051, 1196, 2025, 282, 1635, 688, 601, 1373, 688, 1719,
	1663, 1684, 282, 1581, 1196, 1566, 1420, 1278, 282, 282,
	282, 1419, 1027, 282, 50, 2125, 282, 1225, 1247, 1760,
	1570, 1569, 1481, 1196, 1473, 1205, 716, 1431, 858, 1434,
	2048, 1185, 999, 1762, 1463, 282, 1894, 1880, 999, 1879,
	739, 739, 800, 803, 1484, 1408, 1194, 1467, 1197, 1198,
	275, 1837, 1836, 1512, 820, 1795, 1200, 1201, 1202, 1429,
	876, 1794, 1786, 364, 1726, 1723, 1706, 1475, 1550, 282,
	1081, 1491, 1110, 1510, 364, 364, 364, 364, 364, 364,
	364, 364, 1414, 1577, 1490, 1489, 1549, 1547, 364, 364,
	1535, 1497, 1495, 1356, 1422, 1423, 1228, 1105, 1511, 1758,
	1306, 1234, 1465, 1280, 1503, 1236, 1237, 1761, 1238, 1239,
	1252, 1253, 1112, 1113, 1861, 1098, 578, 282, 95, 364,
	1486, 1317, 1504, 1539, 1532, 1530, 1097, 1086, 95, 1541,
	64, 809, 1372, 1885, 1468, 1469, 1470, 1471, 1472, 1571,
	1319, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1480, 1357,
	1553, 1554, 1255, 1556, 1116, 739, 1559, 1560, 926, 926,
	830, 95, 813, 554, 1165, 1009, 928, 1258, 316, 47,
	1010, 364, 282, 1007, 1257, 1006, 1542, 1005, 1008, 2105,
	1544, 978, 282, 2052, 1588, 1415, 978, 1592, 1574, 1166,
	693, 696, 697, 698, 694, 1852, 695, 699, 21, 648,
	589, 588, 598, 599, 591, 592, 593, 594, 595, 596,
	597, 590, 2102, 1418, 600, 1011, 47, 697, 698, 557,
	558, 1607, 1279, 562, 270, 62, 978, 1341, 1555, 350,
	729, 536, 1537, 1599, 1633, 1578, 563, 1580, 2092, 282,
	1617, 860, 861, 1601, 1727, 1128, 282, 829, 1579, 57,
	59, 60, 61, 1536, 1366, 364, 1713, 1604, 1714, 1715,
	1716, 1361, 95, 364, 1210, 1359, 1642, 821, 701, 852,
	501, 1712, 263, 266, 1215, 271, 272, 2121, 1828, 1657,
	1643, 1717, 1584, 1652, 1653, 1654, 1518, 986, 2075, 1962,
	1846, 267, 1634, 54, 1961, 282, 1842, 1673, 1248, 1133,
	1134, 1135, 1878, 1679, 2035, 2034, 1659, 2033, 1277, 923,
	1655, 1430, 1863, 21, 2032, 21, 1678, 564, 568, 571,
	1681, 1996, 1995, 1517, 1516, 1877, 1854, 1297, 853, 581,
	282, 56, 95, 1613, 1812, 8, 1809, 7, 1810, 6,
	58, 1115, 1808, 5, 1377, 1595, 1383, 1039, 1695, 364,
	1722, 364, 712, 1317, 95, 1686, 51, 1702, 1, 1908,
	739, 66, 1707, 65, 1964, 1732, 1432, 635, 506, 1119,
	364, 1191, 95, 1696, 628, 302, 646, 2128, 1364, 1659,
	1501, 2097, 288, 1644, 2026, 282, 282, 1710, 282, 282,
	282, 1709, 1905, 2019, 1934, 1326, 364, 1061, 1887, 1303,
	67, 1574, 2015, 1897, 1583, 1365, 1387, 1125, 1362, 544,
	544, 544, 544, 1145, 544, 1956, 1975, 1757, 1665, 1730,
	1047, 544, 1276, 1384, 1380, 1375, 499, 1385, 1382, 1381,
	63, 1867, 1048, 1379, 1046, 1045, 1043, 1484, 282, 47,
	1772, 1329, 1743, 282, 1386, 1776, 1078, 1853, 349, 614,
	738, 1378, 736, 618, 737, 1708, 1733, 1697, 1755, 1699,
	741, 244, 356, 700, 725, 1729, 1780, 282, 1771, 1770,
	1374, 572, 1401, 630, 578, 1400, 1778, 1141, 601, 1409,
	847, 1161, 552, 246, 613, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 1798, 647, 1270, 650, 650, 650,
	650, 650, 650, 650, 650, 363, 679, 680, 681, 682,
	1487, 1838, 1807, 566, 1745, 1789, 1960, 1790, 1841, 703,
	1862, 1827, 1829, 1230, 645, 982, 1855, 289, 867, 301,
	300, 299, 1240, 21, 582, 1612, 1735, 1736, 1574, 1737,
	1738, 1739, 1859, 282, 348, 684, 1484, 1858, 692, 690,
	1619, 689, 1254, 1542, 1250, 282, 347, 1610, 1265, 1630,
	1851, 556, 1164, 24, 55, 282, 342, 19, 1892, 18,
	1844, 17, 1890, 20, 16, 15, 14, 364, 28, 1620,
	1621, 1826, 1891, 1622, 1623, 282, 282, 1626, 1285, 1816,
	13, 12, 21, 11, 10, 9, 1815, 1814, 1903, 1296,
	1813, 1636, 1637, 1638, 1811, 1641, 4, 282, 268, 1953,
	1954, 22, 1324, 1943, 2, 282, 799, 1939, 1942, 0,
	0, 0, 1856, 0, 865, 866, 1574, 1976, 0, 0,
	1948, 1949, 1950, 1951, 1952, 1971, 0, 0, 0, 0,
	0, 1990, 0, 0, 0, 999, 0, 0, 0, 0,
	0, 1893, 1355, 1991, 1896, 1904, 0, 1988, 1989, 0,
	282, 1691, 0, 364, 0, 1992, 1983, 1984, 1985, 1986,
	1987, 0, 2027, 0, 2013, 0, 0, 0, 0, 2012,
	2024, 935, 2011, 0, 0, 2014, 0, 635, 0, 0,
	943, 974, 2020, 544, 0, 0, 0, 0, 364, 0,
	21, 0, 2029, 0, 544, 544, 544, 544, 544, 544,
	544, 544, 0, 0, 364, 0, 0, 0, 544, 544,
	0, 0, 282, 282, 0, 0, 0, 0, 0, 0,
	0, 2036, 2044, 0, 1731, 0, 1940, 2050, 0, 0,
	0, 0, 0, 0, 0, 2008, 1740, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2058, 2059, 0, 0, 0, 0, 364, 0, 1752, 1753,
	1754, 0, 0, 0, 1033, 2063, 2064, 2062, 2079, 0,
	978, 2082, 0, 1488, 1265, 0, 978, 47, 0, 0,
	0, 0, 0, 0, 2088, 0, 1783, 2076, 0, 2078,
	2091, 2093, 2087, 2095, 2096, 636, 2094, 0, 0, 0,
	0, 0, 282, 2084, 2085, 364, 2104, 2101, 2100, 1514,
	2107, 2103, 0, 0, 0, 0, 0, 0, 0, 0,
	1807, 0, 0, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 2114, 282, 0, 0, 1324, 1843, 1845,
	2109, 1847, 1848, 1849, 1850, 2027, 0, 350, 350, 350,
	350, 350, 0, 0, 2077, 0, 2115, 0, 2081, 95,
	2116, 0, 703, 0, 1019, 0, 2136, 0, 2119, 0,
	0, 350, 0, 2138, 0, 2085, 1903, 2085, 2085, 0,
	0, 0, 0, 0, 0, 1575, 0, 1881, 0, 0,
	0, 0, 0, 0, 0, 0, 1167, 1168, 1590, 568,
	2154, 1594, 0, 282, 1598, 2155, 2119, 1600, 0, 2119,
	0, 0, 0, 0, 351, 0, 0, 1602, 0, 46,
	0, 48, 25, 26, 2149, 1628, 0, 0, 46, 0,
	48, 25, 26, 1818, 0, 1605, 0, 2085, 0, 0,
	0, 1151, 1818, 1080, 1819, 364, 0, 0, 92, 0,
	1963, 0, 0, 1819, 0, 1150, 0, 1967, 0, 0,
	0, 0, 1972, 0, 0, 0, 0, 0, 0, 544,
	0, 544, 0, 0, 0, 0, 354, 0, 0, 1199,
	0, 0, 0, 0, 0, 1155, 0, 2140, 1993, 516,
	544, 0, 0, 0, 0, 1149, 0, 0, 524, 0,
	525, 0, 0, 0, 0, 0, 532, 589, 588, 598,
	599, 591, 592, 593, 594, 595, 596, 597, 590, 0,
	0, 600, 0, 0, 1590, 1233, 0, 1590, 1590, 1590,
	0, 1656, 0, 0, 1176, 0, 0, 0, 364, 0,
	364, 0, 0, 0, 0, 0, 0, 0, 1825, 1146,
	1143, 1144, 0, 1142, 2156, 0, 1624, 1825, 1824, 0,
	0, 0, 2045, 0, 1590, 21, 0, 1824, 0, 0,
	0, 0, 1690, 0, 0, 0, 0, 0, 0, 0,
	364, 0, 0, 1153, 1156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1575, 1703,
	0, 0, 0, 1820, 1821, 1823, 1590, 81, 0, 1822,
	364, 364, 1820, 1821, 1823, 0, 0, 0, 1822, 0,
	0, 565, 0, 0, 1724, 0, 0, 0, 2037, 0,
	0, 0, 0, 0, 0, 1728, 0, 0, 589, 588,
	598, 599, 591, 592, 593, 594, 595, 596, 597, 590,
	0, 534, 600, 1244, 1245, 93, 0, 0, 256, 71,
	76, 0, 68, 0, 0, 0, 0, 1148, 1747, 1748,
	0, 0, 0, 0, 0, 72, 0, 79, 0, 276,
	0, 350, 93, 93, 0, 0, 0, 0, 0, 0,
	1421, 0, 1514, 73, 74, 69, 93, 0, 0, 0,
	1147, 0, 0, 0, 1779, 93, 0, 93, 0, 0,
	0, 0, 2134, 93, 589, 588, 598, 599, 591, 592,
	593, 594, 595, 596, 597, 590, 0, 0, 600, 0,
	0, 0, 0, 0, 0, 1575, 0, 0, 0, 0,
	1801, 0, 0, 0, 0, 0, 1464, 49, 1805, 0,
	0, 0, 1830, 0, 0, 1590, 49, 0, 686, 0,
	0, 1152, 2160, 2161, 0, 0, 0, 710, 0, 0,
	0, 0, 0, 1477, 0, 0, 0, 0, 0, 1154,
	0, 1224, 0, 0, 0, 601, 0, 0, 0, 1492,
	1493, 0, 0, 1494, 0, 2086, 1496, 0, 0, 0,
	0, 0, 589, 588, 598, 599, 591, 592, 593, 594,
	595, 596, 597, 590, 0, 1508, 600, 0, 544, 0,
	0, 0, 0, 1575, 1514, 589, 588, 598, 599, 591,
	592, 593, 594, 595, 596, 597, 590, 0, 0, 600,
	0, 0, 0, 0, 1183, 0, 0, 1906, 0, 1931,
	1932, 1933, 0, 1182, 0, 0, 0, 70, 93, 1947,
	1830, 1830, 1947, 1830, 1830, 1514, 1514, 0, 589, 588,
	598, 599, 591, 592, 593, 594, 595, 596, 597, 590,
	0, 0, 600, 978, 0, 75, 1973, 0, 0, 0,
	1974, 0, 0, 0, 1977, 0, 0, 77, 78, 0,
	80, 1485, 0, 47, 0, 0, 0, 0, 1801, 1514,
	0, 46, 0, 48, 25, 26, 601, 0, 0, 0,
	1498, 1499, 1500, 1590, 0, 1818, 0, 2017, 0, 0,
	0, 0, 659, 823, 0, 739, 1819, 0, 824, 0,
	0, 828, 0, 0, 831, 0, 0, 0, 0, 0,
	0, 0, 1609, 0, 0, 0, 0, 0, 0, 1534,
	0, 0, 0, 2031, 0, 93, 0, 661, 0, 850,
	0, 0, 93, 708, 93, 0, 1947, 1545, 0, 0,
	0, 0, 0, 630, 0, 0, 864, 2047, 0, 0,
	2143, 0, 601, 589, 588, 598, 599, 591, 592, 593,
	594, 595, 596, 597, 590, 0, 0, 600, 0, 0,
	0, 659, 0, 0, 0, 0, 0, 0, 47, 1632,
	47, 0, 0, 0, 0, 0, 635, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 0, 908, 909,
	1825, 910, 911, 912, 914, 913, 661, 905, 662, 0,
	1824, 0, 0, 0, 2089, 0, 677, 660, 0, 0,
	0, 0, 666, 665, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1680, 0, 1514, 0, 0,
	601, 0, 0, 0, 2106, 0, 0, 0, 0, 0,
	0, 0, 1618, 0, 0, 1820, 1821, 1823, 0, 0,
	996, 1822, 0, 601, 0, 0, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 0, 0, 739, 0,
	0, 2122, 0, 0, 0, 0, 0, 662, 1024, 0,
	0, 0, 0, 1629, 0, 677, 660, 0, 0, 0,
	93, 666, 665, 0, 0, 93, 601, 0, 93, 0,
	0, 93, 0, 0, 0, 835, 46, 0, 48, 25,
	26, 0, 678, 0, 0, 0, 364, 0, 0, 0,
	1818, 0, 0, 0, 0, 0, 93, 1801, 0, 0,
	1677, 1819, 0, 0, 0, 0, 0, 0, 1082, 1083,
	0, 1087, 0, 93, 1089, 0, 0, 0, 0, 0,
	0, 0, 835, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 1100, 1101, 1102, 1103, 1114, 0, 1781, 1117,
	0, 0, 1122, 1785, 0, 0, 0, 0, 1130, 0,
	1136, 0, 0, 0, 630, 2120, 0, 1140, 47, 49,
	1157, 678, 1158, 0, 0, 1159, 0, 0, 0, 0,
	0, 0, 276, 0, 0, 0, 0, 0, 0, 276,
	276, 0, 0, 0, 979, 276, 0, 0, 0, 979,
	350, 601, 0, 46, 0, 48, 25, 26, 0, 0,
	0, 0, 0, 0, 0, 1825, 0, 1818, 0, 0,
	0, 0, 0, 0, 1485, 1824, 0, 1746, 1819, 0,
	0, 276, 276, 276, 276, 0, 0, 93, 0, 979,
	93, 93, 93, 93, 93, 0, 0, 0, 0, 0,
	0, 0, 1013, 1882, 0, 93, 0, 0, 0, 708,
	0, 0, 0, 0, 93, 93, 242, 0, 1782, 0,
	1820, 1821, 1823, 0, 0, 1902, 1822, 1545, 0, 0,
	0, 0, 0, 0, 1176, 0, 0, 0, 0, 0,
	1083, 1100, 252, 0, 0, 0, 1941, 0, 0, 0,
	0, 0, 0, 0, 46, 23, 48, 25, 26, 0,
	0, 46, 0, 48, 25, 26, 1839, 1966, 0, 1206,
	1208, 0, 1209, 0, 41, 1818, 1211, 0, 1213, 27,
	0, 0, 1825, 1485, 0, 47, 1819, 0, 0, 0,
	1216, 1217, 1824, 0, 1218, 0, 1219, 1220, 0, 237,
	36, 0, 0, 93, 50, 239, 93, 0, 0, 93,
	0, 0, 245, 241, 0, 93, 0, 93, 0, 0,
	2018, 0, 0, 0, 93, 0, 0, 93, 0, 93,
	0, 0, 93, 0, 0, 0, 0, 1820, 1821, 1823,
	0, 0, 0, 1822, 243, 0, 0, 0, 247, 0,
	0, 0, 0, 2021, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 49, 1302, 0, 0, 0, 0,
	29, 30, 32, 31, 34, 0, 0, 0, 0, 0,
	0, 0, 2049, 635, 0, 0, 0, 0, 0, 0,
	1825, 0, 0, 0, 0, 0, 35, 42, 43, 0,
	1824, 44, 45, 33, 0, 0, 0, 1354, 1334, 0,
	0, 1358, 0, 1360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 238, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1820, 1821, 1823, 0, 0,
	0, 1822, 0, 0, 37, 38, 0, 39, 40, 0,
	0, 0, 0, 0, 240, 0, 248, 249, 250, 251,
	255, 0, 1966, 0, 0, 254, 253, 0, 0, 0,
	0, 49, 0, 276, 0, 0, 0, 0, 1235, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2117, 0, 0, 0, 0, 0,
	1334, 0, 0, 2055, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 0, 49,
	0, 1435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 93, 0,
	93, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1546, 1548, 0, 0, 0, 0,
	0, 0, 1576, 0, 0, 0, 0, 0, 0, 0,
	47, 0, 1587, 0, 1412, 1413, 276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	0, 0, 0, 0, 0, 2152, 1446, 1452, 1450, 0,
	0, 1447, 0, 0, 1445, 1603, 0, 1454, 276, 0,
	1453, 1439, 1449, 1451, 1448, 1443, 0, 1438, 0, 1456,
	1455, 1457, 1436, 1459, 0, 0, 0, 1462, 1441, 1461,
	1460, 0, 1458, 0, 0, 0, 0, 0, 0, 835,
	0, 1440, 951, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 979, 0, 0, 0, 0, 0, 979,
	0, 1442, 1444, 0, 0, 0, 0, 0, 0, 1206,
	1208, 0, 1209, 0, 0, 1211, 0, 1213, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1216,
	1217, 0, 0, 1218, 0, 1219, 1220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1664, 1667,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1325, 93,
	0, 0, 0, 0, 0, 0, 1704, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1721, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1664,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 485, 474, 1325, 433, 487, 403,
	421, 495, 423, 424, 460, 382, 443, 162, 418, 400,
	99, 406, 375, 413, 376, 404, 435, 123, 401, 0,
	476, 446, 137, 232, 233, 493, 140, 451, 0, 186,
	150, 0, 0, 438, 478, 441, 469, 432, 461, 390,
	450, 488, 419, 456, 489, 0, 0, 0, 369, 0,
	1660, 0, 1661, 0, 0, 0, 979, 0, 112, 0,
	455, 483, 415, 498, 0, 459, 374, 453, 0, 380,
	383, 494, 481, 410, 411, 0, 0, 0, 0, 0,
	0, 0, 437, 442, 466, 429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 407, 0,
	449, 0, 0, 2135, 387, 381, 0, 434, 0, 0,
	0, 389, 0, 408, 467, 0, 371, 472, 479, 431,
	146, 213, 482, 428, 427, 169, 0, 115, 0, 192,
	127, 420, 138, 464, 496, 486, 439, 477, 405, 414,
	117, 412, 176, 163, 204, 448, 462, 174, 141, 196,
	170, 203, 484, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 379, 372, 409, 470, 473, 394, 458,
	384, 416, 465, 417, 440, 399, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 377, 0, 187, 206, 223, 224, 378,
	398, 480, 216, 217, 218, 219, 0, 2113, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 457, 177, 114,
	205, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 393, 397, 391, 392, 444, 445,
	490, 491, 492, 468, 388, 0, 395, 396, 0, 475,
	132, 234, 235, 447, 98, 106, 139, 497, 220, 0,
	171, 125, 207, 0, 0, 422, 373, 426, 0, 0,
	0, 0, 0, 0, 0, 385, 386, 178, 0, 430,
	425, 452, 454, 463, 471, 0, 402, 436, 0, 111,
	485, 474, 0, 433, 487, 403, 421, 495, 423, 424,
	460, 382, 443, 162, 418, 400, 99, 406, 375, 413,
	376, 404, 435, 123, 401, 0, 476, 446, 137, 232,
	233, 493, 140, 451, 0, 186, 150, 0, 0, 438,
	478, 441, 469, 432, 461, 390, 450, 488, 419, 456,
	489, 0, 0, 0, 281, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 455, 483, 415, 498,
	0, 459, 374, 453, 0, 380, 383, 494, 481, 410,
	411, 0, 0, 0, 0, 0, 0, 0, 437, 442,
	466, 429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 407, 0, 449, 0, 0, 0,
	387, 381, 0, 434, 0, 0, 0, 389, 0, 408,
	467, 0, 371, 472, 479, 431, 146, 213, 482, 428,
	427, 169, 0, 115, 0, 192, 127, 420, 138, 464,
	496, 486, 439, 477, 405, 414, 117, 412, 176, 163,
	204, 448, 462, 174, 141, 196, 170, 203, 484, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 379,
	372, 409, 470, 473, 394, 458, 384, 416, 465, 417,
	440, 399, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 377,
	0, 187, 206, 223, 224, 378, 398, 480, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 457, 177, 114, 205, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	393, 397, 391, 392, 444, 445, 490, 491, 492, 468,
	388, 0, 395, 396, 0, 475, 132, 234, 235, 447,
	98, 106, 139, 497, 220, 0, 171, 125, 207, 0,
	0, 422, 373, 426, 0, 0, 0, 0, 0, 0,
	0, 385, 386, 178, 0, 430, 425, 452, 454, 463,
	471, 0, 402, 436, 0, 111, 485, 474, 0, 433,
	487, 403, 421, 495, 423, 424, 460, 382, 443, 162,
	418, 400, 99, 406, 375, 413, 376, 404, 435, 123,
	401, 0, 476, 446, 137, 232, 233, 493, 140, 451,
	0, 186, 150, 0, 0, 438, 478, 441, 469, 432,
	461, 390, 450, 488, 419, 456, 489, 0, 0, 0,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 455, 483, 415, 498, 0, 459, 374, 453,
	0, 380, 383, 494, 481, 410, 411, 1509, 0, 0,
	0, 0, 0, 0, 437, 442, 466, 429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	407, 0, 449, 0, 0, 0, 387, 381, 0, 434,
	0, 0, 0, 389, 0, 408, 467, 0, 371, 472,
	479, 431, 146, 213, 482, 428, 427, 169, 0, 115,
	0, 192, 127, 420, 138, 464, 496, 486, 439, 477,
	405, 414, 117, 412, 176, 163, 204, 448, 462, 174,
	141, 196, 170, 203, 484, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 379, 372, 409, 470, 473,
	394, 458, 384, 416, 465, 417, 440, 399, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 377, 0, 187, 206, 223,
	224, 378, 398, 480, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 457,
	177, 114, 205, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 393, 397, 391, 392,
	444, 445, 490, 491, 492, 468, 388, 0, 395, 396,
	0, 475, 132, 234, 235, 447, 98, 106, 139, 497,
	220, 0, 171, 125, 207, 0, 0, 422, 373, 426,
	0, 0, 0, 0, 0, 0, 0, 385, 386, 178,
	0, 430, 425, 452, 454, 463, 471, 0, 402, 436,
	0, 111, 485, 474, 0, 433, 487, 403, 421, 495,
	423, 424, 460, 382, 443, 162, 418, 400, 99, 406,
	375, 413, 376, 404, 435, 123, 401, 0, 476, 446,
	137, 232, 233, 493, 140, 451, 0, 186, 150, 0,
	0, 438, 478, 441, 469, 432, 461, 390, 450, 488,
	419, 456, 489, 0, 0, 0, 281, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 455, 483,
	415, 498, 0, 459, 374, 453, 0, 380, 383, 494,
	481, 410, 411, 0, 0, 0, 0, 0, 0, 0,
	437, 442, 466, 429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 407, 0, 449, 0,
	0, 0, 387, 381, 0, 434, 0, 0, 0, 389,
	0, 408, 467, 0, 371, 472, 479, 431, 146, 213,
	482, 428, 427, 169, 0, 115, 0, 192, 127, 420,
	138, 464, 496, 486, 439, 477, 405, 414, 117, 412,
	176, 163, 204, 448, 462, 174, 141, 196, 170, 203,
	484, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 379, 372, 409, 470, 473, 394, 458, 384, 416,
	465, 417, 440, 399, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 377, 0, 187, 206, 223, 224, 378, 398, 480,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 457, 177, 114, 205, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 393, 397, 391, 392, 444, 445, 490, 491,
	492, 468, 388, 0, 395, 396, 0, 475, 132, 234,
	235, 447, 98, 106, 139, 497, 220, 0, 171, 125,
	207, 0, 0, 422, 373, 426, 0, 0, 0, 0,
	0, 0, 0, 385, 386, 178, 0, 430, 425, 452,
	454, 463, 471, 0, 402, 436, 0, 111, 485, 474,
	0, 433, 487, 403, 421, 495, 423, 424, 460, 382,
	443, 162, 418, 400, 99, 406, 375, 413, 376, 404,
	435, 123, 401, 0, 476, 446, 137, 232, 233, 493,
	140, 451, 0, 186, 150, 0, 0, 438, 478, 441,
	469, 432, 461, 390, 450, 488, 419, 456, 489, 0,
	0, 0, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 455, 483, 415, 498, 0, 459,
	374, 453, 0, 380, 383, 494, 481, 410, 411, 0,
	0, 0, 0, 0, 0, 0, 437, 442, 466, 429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1417, 0, 407, 0, 449, 0, 0, 0, 387, 381,
	0, 434, 0, 0, 0, 389, 0, 408, 467, 0,
	371, 472, 479, 431, 146, 213, 482, 428, 427, 169,
	0, 115, 0, 192, 127, 420, 138, 464, 496, 486,
	439, 477, 405, 414, 117, 412, 176, 163, 204, 448,
	462, 174, 141, 196, 170, 203, 484, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 379, 372, 409,
	470, 473, 394, 458, 384, 416, 465, 417, 440, 399,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 377, 0, 187,
	206, 223, 224, 378, 398, 480, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 457, 177, 114, 205, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 393, 397,
	391, 392, 444, 445, 490, 491, 492, 468, 388, 0,
	395, 396, 0, 475, 132, 234, 235, 447, 98, 106,
	139, 497, 220, 0, 171, 125, 207, 0, 0, 422,
	373, 426, 0, 0, 0, 0, 0, 0, 0, 385,
	386, 178, 0, 430, 425, 452, 454, 463, 471, 0,
	402, 436, 0, 111, 485, 474, 0, 433, 487, 403,
	421, 495, 423, 424, 460, 382, 443, 162, 418, 400,
	99, 406, 375, 413, 376, 404, 435, 123, 401, 0,
	476, 446, 137, 232, 233, 493, 140, 451, 0, 186,
	150, 0, 0, 438, 478, 441, 469, 432, 461, 390,
	450, 488, 419, 456, 489, 50, 0, 0, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	455, 483, 415, 498, 0, 459, 374, 453, 0, 380,
	383, 494, 481, 410, 411, 0, 0, 0, 0, 0,
	0, 0, 437, 442, 466, 429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 407, 0,
	449, 0, 0, 0, 387, 381, 0, 434, 0, 0,
	0, 389, 0, 408, 467, 0, 371, 472, 479, 431,
	146, 213, 482, 428, 427, 169, 0, 115, 0, 192,
	127, 420, 138, 464, 496, 486, 439, 477, 405, 414,
	117, 412, 176, 163, 204, 448, 462, 174, 141, 196,
	170, 203, 484, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 379, 372, 409, 470, 473, 394, 458,
	384, 416, 465, 417, 440, 399, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 377, 0, 187, 206, 223, 224, 378,
	398, 480, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 457, 177, 114,
	205, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 393, 397, 391, 392, 444, 445,
	490, 491, 492, 468, 388, 0, 395, 396, 0, 475,
	132, 234, 235, 447, 98, 106, 139, 497, 220, 0,
	171, 125, 207, 0, 0, 422, 373, 426, 0, 0,
	0, 0, 0, 0, 0, 385, 386, 178, 0, 430,
	425, 452, 454, 463, 471, 0, 402, 436, 0, 111,
	485, 474, 0, 433, 487, 403, 421, 495, 423, 424,
	460, 382, 443, 162, 418, 400, 99, 406, 375, 413,
	376, 404, 435, 123, 401, 0, 476, 446, 137, 232,
	233, 493, 140, 451, 0, 186, 150, 0, 0, 438,
	478, 441, 469, 432, 461, 390, 450, 488, 419, 456,
	489, 0, 0, 0, 369, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 455, 483, 415, 498,
	0, 459, 374, 453, 0, 380, 383, 494, 481, 410,
	411, 0, 0, 0, 0, 0, 0, 0, 437, 442,
	466, 429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 407, 0, 449, 0, 0, 0,
	387, 381, 0, 434, 0, 0, 0, 389, 0, 408,
	467, 0, 371, 472, 479, 431, 146, 213, 482, 428,
	427, 169, 0, 115, 0, 192, 127, 420, 138, 464,
	496, 486, 439, 477, 405, 414, 117, 412, 176, 163,
	204, 448, 462, 174, 141, 196, 170, 203, 484, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 379,
	372, 409, 470, 473, 394, 458, 384, 416, 465, 417,
	440, 399, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 367, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 377,
	0, 187, 206, 223, 224, 378, 398, 480, 216, 217,
	218, 219, 0, 0, 0, 368, 366, 131, 181, 135,
	142, 172, 221, 457, 177, 114, 205, 183, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	393, 397, 391, 392, 444, 445, 490, 491, 492, 468,
	388, 0, 395, 396, 0, 475, 132, 234, 235, 447,
	98, 106, 139, 497, 220, 0, 171, 125, 207, 0,
	0, 422, 373, 426, 0, 0, 0, 0, 0, 0,
	0, 385, 386, 178, 0, 430, 425, 452, 454, 463,
	471, 0, 402, 436, 0, 111, 485, 474, 0, 433,
	487, 403, 421, 495, 423, 424, 460, 382, 443, 162,
	418, 400, 99, 406, 375, 413, 376, 404, 435, 123,
	401, 0, 476, 446, 137, 232, 233, 493, 140, 451,
	0, 186, 150, 0, 0, 438, 478, 441, 469, 432,
	461, 390, 450, 488, 419, 456, 489, 0, 0, 0,
	94, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 455, 483, 415, 498, 0, 459, 374, 453,
	0, 380, 383, 494, 481, 410, 411, 0, 0, 0,
	0, 0, 0, 0, 437, 442, 466, 429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	407, 0, 449, 0, 0, 0, 387, 381, 0, 434,
	0, 0, 0, 389, 0, 408, 467, 0, 371, 472,
	479, 431, 146, 213, 482, 428, 427, 169, 0, 115,
	0, 192, 127, 420, 138, 464, 496, 486, 439, 477,
	405, 414, 117, 412, 176, 163, 204, 448, 462, 174,
	141, 196, 170, 203, 484, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 379, 372, 409, 470, 473,
	394, 458, 384, 416, 465, 417, 440, 399, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 377, 0, 187, 206, 223,
	224, 378, 398, 480, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 457,
	177, 114, 205, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 393, 397, 391, 392,
	444, 445, 490, 491, 492, 468, 388, 0, 395, 396,
	0, 475, 132, 234, 235, 447, 98, 106, 139, 497,
	220, 0, 171, 125, 207, 0, 0, 422, 373, 426,
	0, 0, 0, 0, 0, 0, 0, 385, 386, 178,
	0, 430, 425, 452, 454, 463, 471, 0, 402, 436,
	0, 111, 485, 474, 0, 433, 487, 403, 421, 495,
	423, 424, 460, 382, 443, 162, 418, 400, 99, 406,
	375, 413, 376, 404, 435, 123, 401, 0, 476, 446,
	137, 232, 233, 493, 140, 451, 0, 186, 150, 0,
	0, 438, 478, 441, 469, 432, 461, 390, 450, 488,
	419, 456, 489, 0, 0, 0, 369, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 455, 483,
	415, 498, 0, 459, 374, 453, 0, 380, 383, 494,
	481, 410, 411, 0, 0, 0, 0, 0, 0, 0,
	437, 442, 466, 429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 407, 0, 449, 0,
	0, 0, 387, 381, 0, 434, 0, 0, 0, 389,
	0, 408, 467, 0, 371, 472, 479, 431, 146, 213,
	482, 428, 427, 169, 0, 115, 0, 192, 127, 420,
	138, 464, 496, 486, 439, 477, 405, 414, 117, 412,
	176, 163, 204, 448, 462, 174, 141, 196, 170, 203,
	484, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 379, 372, 409, 470, 473, 394, 458, 384, 416,
	465, 417, 440, 399, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 718, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 367, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 377, 0, 187, 206, 223, 224, 378, 398, 480,
	216, 217, 218, 219, 0, 0, 0, 368, 366, 131,
	181, 135, 142, 172, 221, 457, 177, 114, 205, 183,
	362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 393, 397, 391, 392, 444, 445, 490, 491,
	492, 468, 388, 0, 395, 396, 0, 475, 132, 234,
	235, 447, 98, 106, 139, 497, 220, 0, 171, 125,
	207, 0, 0, 422, 373, 426, 0, 0, 0, 0,
	0, 0, 0, 385, 386, 178, 0, 430, 425, 452,
	454, 463, 471, 0, 402, 436, 0, 111, 485, 474,
	0, 433, 487, 403, 421, 495, 423, 424, 460, 382,
	443, 162, 418, 400, 99, 406, 375, 413, 376, 404,
	435, 123, 401, 0, 476, 446, 137, 232, 233, 493,
	140, 451, 0, 186, 150, 0, 0, 438, 478, 441,
	469, 432, 461, 390, 450, 488, 419, 456, 489, 0,
	0, 0, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 455, 483, 415, 498, 0, 459,
	374, 453, 0, 380, 383, 494, 481, 410, 411, 0,
	0, 0, 0, 0, 0, 0, 437, 442, 466, 429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 407, 0, 449, 0, 0, 0, 387, 381,
	0, 434, 0, 0, 0, 389, 0, 408, 467, 0,
	371, 472, 479, 431, 146, 213, 482, 428, 427, 169,
	0, 115, 0, 192, 127, 420, 138, 464, 496, 486,
	439, 477, 405, 414, 117, 412, 176, 163, 204, 448,
	462, 174, 141, 196, 170, 203, 484, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 379, 372, 409,
	470, 473, 394, 458, 384, 416, 465, 417, 440, 399,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 357, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 367, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 377, 0, 187,
	206, 223, 224, 378, 398, 480, 216, 217, 218, 219,
	0, 0, 0, 368, 366, 360, 359, 135, 142, 172,
	221, 457, 177, 114, 205, 183, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 393, 397,
	391, 392, 444, 445, 490, 491, 492, 468, 388, 0,
	395, 396, 0, 475, 132, 234, 235, 447, 98, 106,
	139, 497, 220, 0, 171, 125, 207, 0, 0, 422,
	373, 426, 0, 0, 0, 0, 0, 0, 0, 385,
	386, 178, 0, 430, 425, 452, 454, 463, 471, 0,
	402, 436, 0, 111, 485, 474, 0, 433, 487, 403,
	421, 495, 423, 424, 460, 382, 443, 162, 418, 400,
	99, 406, 375, 413, 376, 404, 435, 123, 401, 0,
	476, 446, 137, 232, 233, 493, 140, 451, 0, 186,
	150, 0, 0, 438, 478, 441, 469, 432, 461, 390,
	450, 488, 419, 456, 489, 0, 0, 0, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	455, 483, 415, 498, 0, 459, 374, 453, 0, 380,
	383, 494, 481, 410, 411, 0, 0, 0, 0, 0,
	0, 0, 437, 442, 466, 429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 407, 0,
	449, 0, 0, 0, 387, 381, 0, 434, 0, 0,
	0, 389, 0, 408, 467, 0, 371, 472, 479, 431,
	146, 213, 482, 428, 427, 169, 0, 115, 0, 192,
	127, 420, 138, 464, 496, 486, 439, 477, 405, 414,
	117, 412, 176, 163, 204, 448, 462, 174, 141, 196,
	170, 203, 484, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 379, 372, 409, 470, 473, 394, 458,
	384, 416, 465, 417, 440, 399, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 377, 0, 187, 206, 223, 224, 378,
	398, 480, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 457, 177, 114,
	205, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 393, 397, 391, 392, 444, 445,
	490, 491, 492, 468, 388, 0, 395, 396, 0, 475,
	132, 234, 235, 447, 98, 106, 139, 497, 220, 0,
	171, 125, 207, 0, 0, 422, 373, 426, 0, 0,
	0, 0, 0, 0, 0, 385, 386, 178, 0, 430,
	425, 452, 454, 463, 471, 162, 402, 436, 99, 111,
	0, 284, 0, 0, 0, 123, 280, 0, 0, 0,
	137, 232, 233, 326, 140, 327, 0, 186, 150, 0,
	0, 0, 0, 317, 318, 0, 0, 0, 0, 0,
	0, 1031, 0, 50, 0, 0, 281, 305, 283, 303,
	307, 308, 309, 310, 0, 0, 112, 306, 311, 312,
	313, 1032, 0, 0, 0, 278, 296, 0, 325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 0, 0, 0, 0, 339, 0,
	295, 0, 0, 291, 292, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 337, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 341, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 328, 338, 334, 335, 332, 333, 331, 330,
	329, 340, 319, 320, 321, 322, 324, 0, 132, 234,
	235, 323, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 162, 0, 0, 99, 931, 0, 284, 0, 0,
	0, 123, 280, 0, 0, 178, 137, 232, 233, 326,
	140, 327, 0, 186, 150, 0, 336, 111, 0, 317,
	318, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 281, 305, 283, 303, 307, 308, 309, 310,
	0, 0, 112, 306, 311, 312, 313, 0, 0, 0,
	0, 278, 296, 0, 325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	274, 0, 0, 0, 339, 0, 295, 0, 0, 291,
	292, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 337, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	341, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 328, 338,
	334, 335, 332, 333, 331, 330, 329, 340, 319, 320,
	321, 322, 324, 0, 132, 234, 235, 323, 98, 106,
	139, 0, 220, 0, 171, 125, 207, 162, 0, 0,
	99, 0, 0, 284, 0, 0, 0, 123, 280, 0,
	0, 178, 137, 232, 233, 326, 140, 327, 0, 186,
	150, 0, 336, 111, 0, 317, 318, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 560, 281, 305,
	283, 303, 307, 308, 309, 310, 0, 0, 112, 306,
	311, 312, 313, 0, 0, 0, 0, 278, 296, 0,
	325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	339, 0, 295, 0, 0, 291, 292, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 337, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 341, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 328, 338, 334, 335, 332, 333,
	331, 330, 329, 340, 319, 320, 321, 322, 324, 0,
	132, 234, 235, 323, 98, 106, 139, 0, 220, 0,
	171, 125, 207, 162, 0, 0, 99, 0, 0, 284,
	0, 0, 0, 123, 280, 0, 0, 178, 137, 232,
	233, 326, 140, 327, 0, 186, 150, 0, 336, 111,
	0, 317, 318, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 281, 305, 283, 303, 307, 308,
	309, 310, 0, 0, 112, 306, 311, 312, 313, 0,
	0, 0, 0, 278, 296, 0, 325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 274, 0, 0, 0, 339, 0, 295, 0,
	0, 291, 292, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	337, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 341, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	328, 338, 334, 335, 332, 333, 331, 330, 329, 340,
	319, 320, 321, 322, 324, 0, 132, 234, 235, 323,
	98, 106, 139, 0, 220, 0, 171, 125, 207, 162,
	0, 0, 99, 0, 0, 284, 0, 0, 0, 123,
	280, 0, 0, 178, 137, 232, 233, 326, 140, 327,
	0, 186, 150, 0, 336, 111, 0, 317, 318, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	281, 305, 283, 303, 307, 308, 309, 310, 0, 0,
	112, 306, 311, 312, 313, 0, 0, 0, 0, 278,
	296, 0, 325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 0, 0,
	0, 0, 339, 0, 295, 0, 0, 945, 292, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 337, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 947, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 957, 963, 961, 191, 148, 958, 134, 182,
	956, 102, 0, 965, 122, 167, 964, 949, 960, 962,
	959, 954, 198, 948, 222, 967, 966, 968, 946, 970,
	211, 105, 109, 973, 952, 972, 971, 208, 969, 201,
	149, 145, 0, 104, 199, 147, 144, 950, 951, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 341, 0,
	158, 130, 0, 0, 0, 0, 0, 953, 955, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 338, 334, 335,
	332, 333, 331, 330, 329, 340, 319, 320, 321, 322,
	324, 0, 132, 234, 235, 323, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 178,
	99, 0, 0, 284, 0, 0, 0, 123, 280, 0,
	336, 111, 137, 232, 233, 326, 140, 327, 0, 186,
	150, 0, 0, 0, 0, 317, 318, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 281, 305,
	283, 303, 307, 308, 309, 310, 0, 0, 112, 306,
	311, 312, 313, 0, 0, 0, 0, 278, 296, 0,
	325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	339, 0, 295, 0, 0, 291, 292, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 337, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 341, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 328, 338, 334, 335, 332, 333,
	331, 330, 329, 340, 319, 320, 321, 322, 324, 0,
	132, 234, 235, 323, 98, 106, 139, 0, 220, 0,
	171, 125, 207, 162, 0, 0, 99, 0, 0, 284,
	0, 0, 0, 123, 280, 0, 0, 178, 137, 232,
	233, 326, 140, 327, 0, 186, 150, 0, 336, 111,
	0, 317, 318, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 281, 305, 283, 303, 307, 308,
	309, 310, 0, 0, 112, 306, 311, 312, 313, 0,
	0, 0, 0, 278, 296, 0, 325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 0, 0, 0, 0, 339, 0, 295, 0,
	0, 291, 292, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	337, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 341, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	328, 338, 334, 335, 332, 333, 331, 330, 329, 340,
	319, 320, 321, 322, 324, 0, 132, 234, 235, 323,
	98, 106, 139, 0, 220, 0, 171, 125, 207, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 178, 137, 232, 233, 326, 140, 327,
	0, 186, 150, 0, 336, 111, 0, 317, 318, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	281, 305, 283, 303, 307, 308, 309, 310, 0, 0,
	112, 306, 311, 312, 313, 0, 0, 0, 0, 0,
	296, 0, 325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 0, 0,
	0, 0, 339, 0, 295, 0, 0, 291, 292, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 337, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 2157, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 341, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 338, 334, 335,
	332, 333, 331, 330, 329, 340, 319, 320, 321, 322,
	324, 0, 132, 234, 235, 323, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 162, 0, 0, 99, 0,
	0, 284, 0, 0, 0, 123, 0, 0, 0, 178,
	137, 232, 233, 326, 140, 327, 0, 186, 150, 0,
	336, 111, 0, 317, 318, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 281, 305, 283, 303,
	307, 308, 309, 310, 0, 0, 112, 306, 311, 312,
	313, 0, 0, 0, 0, 0, 296, 0, 325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 0, 0, 0, 0, 339, 0,
	295, 0, 0, 291, 292, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 337, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 341, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 328, 338, 334, 335, 332, 333, 331, 330,
	329, 340, 319, 320, 321, 322, 324, 0, 132, 234,
	235, 323, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 178, 137, 232, 233, 326,
	140, 327, 0, 186, 150, 0, 336, 111, 0, 317,
	318, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 281, 305, 283, 303, 307, 308, 309, 310,
	0, 0, 112, 306, 311, 312, 313, 0, 0, 0,
	0, 0, 296, 0, 325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	0, 0, 0, 0, 339, 0, 295, 0, 0, 291,
	292, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 337, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	341, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 328, 338,
	334, 335, 332, 333, 331, 330, 329, 340, 319, 320,
	321, 322, 324, 0, 132, 234, 235, 323, 98, 106,
	139, 0, 220, 0, 171, 125, 207, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 178, 137, 232, 233, 326, 140, 327, 0, 186,
	150, 0, 336, 111, 0, 317, 318, 0, 0, 0,
	0, 0, 0, 0, 0, 1207, 0, 0, 281, 305,
	283, 303, 307, 308, 309, 310, 0, 0, 112, 306,
	311, 312, 313, 0, 0, 0, 0, 0, 296, 0,
	325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	339, 0, 295, 0, 0, 291, 292, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 337, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 341, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 328, 338, 334, 335, 332, 333,
	331, 330, 329, 340, 319, 320, 321, 322, 324, 0,
	132, 234, 235, 323, 98, 106, 139, 0, 220, 0,
	171, 125, 207, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 178, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 336, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1540, 0, 0, 281, 0, 1310, 1311, 1312, 1313,
	0, 0, 0, 0, 112, 1316, 1314, 312, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 1318, 1323, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1320, 0, 1322, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 0,
	98, 106, 139, 0, 220, 0, 171, 125, 207, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 178, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1308, 0, 0,
	281, 0, 1310, 1311, 1312, 1313, 0, 0, 0, 0,
	112, 1316, 1314, 312, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	1318, 1323, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 1320, 0, 1322, 1321,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 132, 234, 235, 0, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 0, 369, 305, 925, 303,
	307, 308, 309, 310, 0, 0, 112, 306, 311, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 765, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 132, 234,
	235, 0, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 1835, 0, 369, 0, 1833, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	1832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1831,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	750, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 766, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 0, 792, 793, 167, 794,
	795, 796, 798, 797, 767, 768, 769, 773, 771, 770,
	772, 744, 746, 211, 742, 745, 751, 747, 748, 749,
	763, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 764, 774, 775, 776, 777, 778, 779, 780,
	781, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	765, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 234, 235, 369, 98,
	743, 139, 0, 220, 0, 171, 125, 207, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 919, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	766, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	0, 792, 793, 167, 794, 795, 796, 798, 797, 767,
	917, 769, 773, 771, 770, 772, 744, 746, 211, 742,
	916, 751, 747, 748, 749, 763, 920, 753, 754, 755,
	756, 757, 758, 759, 760, 921, 922, 764, 774, 775,
	776, 777, 778, 779, 780, 781, 0, 0, 158, 130,
	918, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 765, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 369, 98, 743, 139, 0, 220, 0,
	171, 125, 207, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	750, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 766, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 2028, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 0, 792, 793, 167, 794,
	795, 796, 798, 797, 767, 768, 769, 773, 771, 770,
	772, 744, 746, 211, 742, 745, 751, 747, 748, 749,
	763, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 764, 774, 775, 776, 777, 778, 779, 780,
	781, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 162, 0, 0, 99, 0, 577, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 234, 235, 0, 98,
	743, 139, 369, 220, 579, 171, 125, 207, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 574,
	573, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 575, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 765,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 234, 235, 369, 98, 106,
	139, 0, 220, 0, 171, 125, 207, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 766,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 0,
	792, 793, 167, 794, 795, 796, 798, 797, 767, 768,
	769, 773, 771, 770, 772, 744, 746, 211, 742, 745,
	751, 747, 748, 749, 763, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 764, 774, 775, 776,
	777, 778, 779, 780, 781, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 0, 132,
	234, 235, 0, 98, 743, 139, 0, 220, 0, 171,
	125, 207, 1835, 0, 369, 0, 1833, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 1832, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 0,
	98, 106, 139, 369, 220, 502, 171, 125, 207, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1055, 146, 213, 0, 0, 0,
	1050, 0, 1049, 0, 1051, 1052, 0, 138, 0, 0,
	1053, 1056, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 0, 46, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 132, 234, 235, 0, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 50, 0,
	0, 94, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 112, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 0, 98, 106, 139,
	94, 220, 96, 171, 125, 207, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 0, 98, 106, 139, 281,
	220, 96, 171, 125, 207, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 2112, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 1515, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 132, 234, 235, 0, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 50, 0, 0, 94, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 112, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	707, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	234, 235, 0, 98, 106, 139, 94, 220, 709, 171,
	125, 207, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	0, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 132, 234,
	235, 0, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 50, 0, 0, 369, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 0,
	98, 106, 139, 94, 220, 96, 171, 125, 207, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 825, 177, 114, 205, 183, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 801, 0, 132, 234, 235, 369, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 802, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 728, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 0, 98, 106, 139, 369, 220, 727,
	171, 125, 207, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	707, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	234, 235, 0, 98, 106, 139, 94, 220, 709, 171,
	125, 207, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 705, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	0, 0, 0, 0, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 685, 123, 0, 0, 0, 0, 137,
	232, 233, 0, 140, 0, 0, 186, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 234,
	235, 0, 98, 106, 139, 94, 220, 96, 171, 125,
	207, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 0, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 132, 234, 235,
	0, 98, 106, 139, 0, 220, 0, 171, 125, 207,
	94, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 0, 98, 106, 139, 94,
	220, 96, 171, 125, 207, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 234, 235, 0, 98, 106, 139, 94, 220,
	96, 171, 125, 207, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 369, 98, 106, 139, 0, 220, 0,
	171, 125, 207, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 1515, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 234, 235, 369, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 1591, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 0, 98, 106, 139, 281, 220, 96,
	171, 125, 207, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	234, 235, 0, 98, 106, 139, 94, 220, 709, 171,
	125, 207, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 234,
	235, 369, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 0, 98, 106, 139,
	369, 220, 579, 171, 125, 207, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 137,
	232, 233, 0, 140, 0, 0, 186, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 369, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 511, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 234, 235,
	0, 98, 106, 139, 369, 220, 502, 171, 125, 207,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 369,
	98, 106, 139, 0, 220, 0, 171, 125, 207, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 234, 235, 0, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111,
}

var yyPact = [...]int16{
	3118, -1000, -260, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1518, 1566, -1000, -1000, -1000, -1000, -1000, 1314, 2281,
	352, 414, 142, 18430, 413, 3053, 18719, -1000, 140, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1198, -1000, -1000,
	-1000, -1000, -1000, 1496, 1515, 1198, 1494, 9285, -1000, 349,
	15818, 18141, 7543, -1000, 21015, 401, 393, 250, 381, 21300,
	346, 346, 21300, 20726, 18719, 409, 346, -1000, -226, -207,
	-1000, -65, 403, 18719, -1000, 18719, 347, 1079, 347, 347,
	347, 18719, -1000, 510, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 18719, 1077, 1440, 300,
	6039, 6039, 6039, 6039, 256, 6039, 1, 1349, -1000, -1000,
	-1000, -1000, 6039, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1417, 918, 1444, 10305, 10305, 1518, -1000,
	1198, -1000, -1000, 1548, -1000, 13773, 508, -1000, 10305, 109,
	993, -1000, -1000, -247, 993, -1000, -1000, 483, -1000, -1000,
	-1000, 11313, 11313, 11313, 11313, 11313, 11313, 11313, -1000, -1000,
	-1000, -1000, 46, -1000, 888, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 505, -1000, 9969, 993, 993, 993,
	993, 993, 993, 993, 993, 10305, 993, 1400, 993, 993,
	993, 993, 993, 993, 993, 993, 2645, 993, 993, 993,
	993, -1000, 717, 17846, 1172, 1386, -1000, -1000, -1000, 1485,
	14942, 17557, 18719, 1135, -1000, 1209, 7167, -14, -1000, -1000,
	-1000, 621, 504, 17268, -1000, -1000, -1000, 1439, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1075,
	-1000, 14058, 14058, 16979, 21300, 346, 380, 172, 346, 1316,
	1072, 685, 1071, 1348, 602, 21300, 1484, 346, 18719, -1000,
	-1000, -1000, -1000, 16694, 6039, 359, 18719, 1463, 1346, 18719,
	1070, 1069, -1000, 6791, -1000, 6039, 6039, 6039, 6039, 6039,
	6039, 6039, 6039, -1000, -1000, -1000, -1000, -1000, -1000, 6039,
	6039, -1000, 17, -1000, 18719, -1000, 1487, -1000, -1000, -1000,
	-1000, -1000, 1559, 551, 916, 499, 1211, -1000, 756, 1496,
	918, 18719, -1000, 10305, 10305, 908, -1000, 20441, -1000, -1000,
	4535, 559, 11313, 769, 625, 11313, 11313, 11313, 11313, 11313,
	11313, 11313, 11313, 11313, 11313, 11313, 11313, 11313, 11313, 11313,
	872, 2566, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1068, -1000, 13199, -1000, 1198, 12617,
	12617, 27, 27, 27, 27, 27, 27, 20152, -1000, -263,
	8613, -1000, 7919, 918, 1063, 770, 9969, 9285, 9285, 9621,
	10305, 11313, 19578, 9285, 1487, 640, 770, 19578, 1508, -1000,
	918, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	82, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9285,
	9285, 9285, 9285, -1000, 277, 18719, -1000, 19578, 15818, 15818,
	15818, 15818, 15818, -1000, 1373, 1371, -1000, 1369, 1361, 1411,
	18719, -1000, 1067, 14942, 437, 993, -1000, 19867, -1000, -1000,
	277, 1163, 15818, 18719, -1000, -1000, 6415, 1209, -14, 1195,
	-1000, -7, -11, 8277, 7919, 517, -1000, -1000, -1000, -1000,
	191, 14644, 278, -149, 13, -1000, -1000, -1000, -1000, -1000,
	1254, -1000, -1000, -1000, 1254, 294, 1311, 1254, 1311, -1000,
	1254, 1311, 77, 77, 77, 77, 77, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1310, 1299, -1000, 1254, 1254, 1254,
	1254, 1254, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1281, 317, 1281, 1256, 1256, -1000, -1000, 278,
	1298, 18719, 21300, 1340, 18719, 346, -243, 18719, -115, 1064,
	6039, 1461, 6039, 18719, 1531, 18719, -1000, -1000, -1000, 190,
	366, 14058, 18719, -1000, 2176, 18719, -1000, 18719, -1000, -1000,
	18719, 6039, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 550, -1000, -1000,
	-1000, 1359, -1000, -1000, 1389, 10305, 10305, 5287, 10305, -1000,
	-1000, -1000, 1444, -1000, -1000, 559, 577, -1000, -1000, 805,
	-1000, -1000, -1000, -1000, 497, 993, -1000, 2642, -1000, -1000,
	-1000, -1000, 769, 11313, 11313, 11313, 2451, 2642, 2517, 857,
	292, 27, 136, 136, 41, 41, 41, 41, 41, 230,
	230, -1000, -1000, -1000, -1000, -108, -1000, 1254, 1281, 317,
	1281, 1256, 1256, -1000, -1000, 918, 287, 180, -1000, -1000,
	77, -1000, -1000, -149, -1000, -247, 927, -1000, -1000, 886,
	918, 9285, 1057, 1063, -1000, 13773, -1000, -1000, 10305, -1000,
	918, 1057, 1057, 707, 1208, 11649, 1254, -1000, 1254, 1256,
	-1000, -1000, 1254, 116, 1254, 110, -1000, -1000, -1000, -1000,
	1256, -1000, -1000, -1000, -1000, -1000, 1254, 1254, -1000, -1000,
	1254, -1000, 1254, 1254, 798, 638, 2474, 1200, -1000, 496,
	1057, 9285, 641, -1000, 10305, 918, 18719, -1000, -1000, 1057,
	918, 1206, 1057, 1057, 1131, 993, -1000, 1201, -1000, 617,
	1386, 1296, 1338, 1037, -1000, -1000, -1000, -1000, 1370, -1000,
	1363, -1000, -1000, -1000, -1000, -110, 391, 388, 387, 21300,
	-1000, 1526, 15818, 1181, -1000, -1000, 1195, -14, -21, -1000,
	-1000, -1000, -1000, 770, 616, -1000, -1000, 1053, 7919, 1190,
	1428, -1000, -1000, -1000, -1000, -1000, -1000, 1287, 766, 21300,
	322, 328, 426, 407, 1039, -1000, -1000, -1000, 758, -1000,
	21300, -1000, 1558, -1000, -1000, 320, -1000, 318, 658, 917,
	18719, 148, 1284, 12321, 864, -1000, -273, -1000, 38, -1000,
	-1000, 843, 77, 77, 1254, 77, 806, 77, 77, -1000,
	-1000, 517, 1436, 517, 517, 517, 517, 914, 914, -118,
	-118, -1000, -1000, -1000, -1000, 862, 1281, -1000, -1000, -1000,
	844, -1000, 18719, 21300, 1277, 1335, 18719, 1482, 18719, -1000,
	-1000, -1000, 1478, -1000, 7919, -1000, -1000, -1000, -1000, -1000,
	1471, 1151, -1000, -1000, 189, -1000, 366, -1000, 1531, -1000,
	1317, -1000, 1527, 915, 432, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 276, 419, -1000, 6039,
	-1000, 623, 18719, 18719, 9285, -1000, 1384, 770, 770, 489,
	-1000, -1000, -1000, -1000, -1000, 5663, 9285, -1000, 2451, 2642,
	2363, -1000, 11313, 11313, 95, -1000, 1254, -1000, 93, 92,
	-1000, 55, -1000, -247, -1000, 1057, 9285, -257, -1000, 770,
	-1000, -1000, -1000, 3345, 872, 10305, -1000, 843, 265, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3345, 11313, 11313, 11313, 11313, 11313, 5287, -92, 1187,
	630, -1000, 10305, 852, -1000, -1000, -1000, -1000, -1000, -1000,
	1334, 19578, 993, -1000, 16405, 21300, 1518, 19578, 10305, 10305,
	-1000, -1000, 10305, 1276, -1000, 10305, -1000, -1000, -1000, -1000,
	1275, 993, 993, 993, 1043, -1000, 1518, 1181, -1000, -1000,
	-1000, -20, -16, -1000, 10305, -1000, 4911, -1000, 191, -1000,
	19004, -1000, 1554, 1507, 335, -10, -1000, 1031, 1014, -1000,
	951, -1000, -1000, -1, -1000, -214, 94, 35, -1000, -1000,
	993, -1000, 1274, 1470, -1000, 1443, 838, -1000, 11985, -1000,
	-250, -1000, -1000, -1000, -247, -1000, -1000, -1000, 993, -1000,
	1271, 1270, -1000, 1252, 993, 488, -1000, -1000, -1000, -1000,
	-1000, 1142, 517, 517, 77, 517, 1141, 1118, 517, 517,
	-1000, 571, -1000, -1000, -1000, -1000, 1051, -1000, 1049, -1000,
	-1000, 1188, -1000, 1047, 1205, 1325, 15520, 18719, 1267, 1198,
	1465, 1198, 1186, -1000, 614, 1503, 258, 18719, 1531, 19289,
	1531, 1144, 21300, -1000, 310, 21300, -1000, -1000, 21300, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 21300, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	18719, -1000, -1000, -1000, -1000, -1000, 21300, 321, -1000, -1000,
	909, 10305, -1000, -1000, 1174, -1000, 7919, -1000, -1000, 918,
	-1000, 11313, 2642, 2642, 36, 34, 12, -1000, 886, -1000,
	-1000, -1000, -1000, 993, 918, 1254, 1254, -1000, 1254, 1256,
	-1000, 1254, 116, 1254, 110, -1000, -1000, -1000, -1000, 1256,
	-1000, -1000, -1000, -1000, -1000, 1254, 1254, -1000, -1000, 1254,
	-1000, 1254, 1254, 918, 777, -1000, -1000, 918, 392, 2287,
	807, 73, 2156, -1000, 993, -76, -1000, 770, 10305, -1000,
	1446, 1137, 1177, -1000, -1000, 8949, 918, 1045, 465, 1043,
	1496, -1000, 770, 770, 770, 19289, 770, -114, 19289, 19289,
	19289, 16107, 21300, 1496, -1000, -1000, -1000, -1000, 770, 4159,
	-1000, 7919, 1038, -1000, 264, 1254, 442, 442, -216, 313,
	309, 993, -1000, -1000, -1000, -1000, -217, -1000, -1000, -1000,
	-1000, 658, -1000, 1252, 10305, 19289, 105, -1000, 1184, 1117,
	239, 1108, -1000, 13199, -1000, 918, -1000, 808, -1000, 792,
	1102, 7919, -1000, -1000, -1000, 517, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 77, 882, 77, 835, -1000, 833, 15520,
	21300, 18719, 1100, 1183, -1000, 263, 1250, 19289, -1000, 1198,
	-1000, 7919, 4159, 358, 1490, -1000, -1000, 1502, -1000, 1182,
	-1000, -1000, 1121, 18719, 1249, 21300, -1000, -1000, 330, -1000,
	1248, -1000, -1000, -1000, -1000, 1457, 21300, -1000, -1000, 770,
	1526, 15818, -1000, 2642, -1000, -1000, -1000, -1000, 456, -1000,
	-1000, -1000, -1000, -1000, 11313, 11313, -1000, 11313, 11313, 11313,
	918, 879, 770, 306, -1000, 993, -1000, -1000, 1153, 21300,
	21300, -1000, -1000, 1036, 1019, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1009, 1009, 1009, 437, -1000, -1000, -1000, -1000,
	-1000, -1000, 991, 19004, 1456, -1000, -1000, -1000, 679, -1000,
	-1000, 708, 242, 678, -1000, 21300, -217, 10305, -1000, 993,
	777, 990, 10305, 1246, 832, -1000, 1092, -250, 993, -1000,
	-1000, -1000, -1000, -1000, -1000, 993, -1000, 517, -1000, 517,
	1090, 1089, 1082, 1245, 1239, -234, 15520, 985, -1000, -1000,
	-1000, 21300, -1000, -1000, -1000, -1000, -1000, 226, 628, 21300,
	3125, 1499, -1000, 14355, 1236, 1235, 19289, 993, 343, 1523,
	1178, -1000, 992, 918, 1514, 392, 392, 392, 392, 1339,
	-1000, -1000, 1557, -1000, 993, -1000, 1198, 450, -1000, -1000,
	-1000, -114, -1000, -1000, -1000, -110, 1300, 1204, 166, -1000,
	932, 613, 876, 611, 608, 599, 593, 591, 573, 569,
	-1000, -1000, -1000, 1556, -1000, -1000, -1000, 1532, 1223, -1000,
	1221, 777, 10305, 248, 1319, 865, -1000, 1020, 986, -1000,
	-1000, -1000, -1000, -234, 15520, 19004, 1526, 1220, 976, 1526,
	1086, -1000, 218, 170, 10305, -1000, 3125, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1518, 21300, 3091,
	21300, 21300, 21300, 383, 10977, 10305, -1000, 628, 222, 972,
	12914, 14355, 14355, 12914, 14355, 14355, 19004, 19004, 983, 271,
	288, 1520, 1513, -1000, 918, -1000, 10305, -1000, -1000, -1000,
	-1000, 918, 214, -160, 19578, 1177, 918, 21300, -1000, -1000,
	-1000, 21300, -1000, -158, 1204, 21300, -1000, 829, -1000, -1000,
	716, 809, 716, 716, 716, 716, 716, 442, 442, 21300,
	19004, 248, 777, -1000, -78, 1552, -183, 412, -1000, -1000,
	1526, 959, 981, 991, 19289, -234, 991, -113, 21300, 10305,
	3017, 3125, 770, -1000, 1496, 1175, 13484, -1000, 846, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 21300, 1543, 1536, 1534, 1533, 2172,
	109, 741, 169, 152, 205, -1000, -1000, 12914, -1000, -1000,
	-1000, -1000, -1000, 975, 971, 1316, 969, -1000, 21300, 1214,
	-1000, 10305, 10305, -1000, 1173, -1000, 770, -1000, 1382, -105,
	-186, 1157, -1000, -1000, 993, 958, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 658, 658,
	955, 947, -1000, 248, -1000, 442, 442, -1000, -1000, -1000,
	139, 797, 799, 775, 744, 11, -1000, 1512, 991, 1526,
	991, 1300, 945, 1526, 1300, -1000, -253, -1000, 770, -1000,
	-1000, 3125, 2163, -1000, 1444, 21300, 200, -1000, -1000, -1000,
	3091, 1451, -1000, -1000, -1000, -1000, -1000, 3125, 3125, 3125,
	3125, -1000, -1000, 312, -115, -1000, 271, 1416, 19004, 770,
	1065, 10305, -1000, 1378, -1000, 21300, -1000, 1204, -1000, -1000,
	339, 991, -1000, -1000, -1000, 735, -1000, 729, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15231, 1300, 991, -1000, -1000,
	-1000, 991, -1000, 10305, -261, -1000, 2900, -1000, -1000, 14058,
	1498, -1000, 21300, 246, 873, 219, 539, 183, -1000, 185,
	-1000, -1000, 267, 943, -1000, -116, 918, -1000, 18719, 1300,
	-1000, -1000, -1000, 438, -1000, -1000, 1300, 770, 626, -1000,
	-1000, 1198, -1000, -1000, 3125, 572, 644, 2655, -1000, 178,
	-1000, 259, -1000, -161, -1000, 1154, -1000, 7919, -1000, -1000,
	-1000, 345, 151, -1000, -1000, -1000, 993, -190, 21300, -1000,
	-1000, 3125, 10641, -1000, 940, 138, 392, 918, -1000, -1000,
	-1000, -1000,
}

var yyPgo = [...]int16{
	0, 1854, 115, 193, 1851, 1848, 1846, 1582, 1578, 1576,
	1574, 1844, 1840, 1837, 1836, 1835, 1834, 1833, 1831, 1830,
	1829, 1821, 1818, 1816, 1815, 1814, 1813, 1811, 1809, 1807,
	1465, 1806, 1804, 1803, 109, 1802, 1801, 1800, 1799, 67,
	157, 74, 70, 1290, 1797, 47, 102, 113, 1796, 82,
	1794, 1792, 186, 1791, 97, 1789, 1788, 2164, 1785, 1784,
	42, 94, 32, 52, 1774, 1772, 106, 151, 1771, 1770,
	71, 1769, 1768, 88, 14, 21, 41, 46, 1767, 76,
	30, 1765, 85, 1764, 1763, 1758, 1756, 77, 1753, 89,
	43, 15, 17, 1750, 24, 18, 100, 79, 50, 20,
	165, 91, 1745, 63, 98, 83, 1736, 999, 1724, 1723,
	1722, 1721, 1720, 1719, 905, 96, 1717, 1715, 1712, 25,
	39, 72, 0, 778, 36, 118, 1711, 1710, 1704, 2371,
	117, 101, 48, 1703, 95, 125, 69, 1702, 1701, 65,
	110, 5, 114, 104, 1700, 107, 1694, 1692, 1690, 2193,
	93, 66, 133, 57, 1686, 1681, 87, 81, 73, 64,
	80, 90, 22, 1676, 1675, 1674, 53, 1672, 19, 40,
	1, 103, 1671, 1670, 1666, 1662, 44, 59, 1660, 45,
	1658, 27, 12, 6, 28, 2, 1657, 1656, 1655, 10,
	1653, 49, 1648, 13, 1647, 16, 1646, 1645, 1644, 105,
	1643, 1642, 1640, 23, 1639, 1638, 29, 11, 68, 54,
	60, 1637, 1635, 33, 78, 55, 1634, 56, 7, 3,
	31, 1633, 8, 1632, 1624, 1623, 26, 35, 1622, 1621,
	1617, 1615, 1614, 1611, 51, 1609, 1608, 1606, 1605, 1604,
	4, 1603, 1601, 9, 1599, 1598, 1596, 1408, 355, 1592,
	1590, 38, 1587, 1585, 1584, 1580, 620,
}

var yyR1 = [...]int16{
	0, 245, 246, 246, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 6, 3, 4, 4, 5, 5,
	7, 7, 33, 33, 8, 9, 9, 9, 249, 249,
	52, 52, 96, 96, 10, 10, 10, 10, 11, 11,
	223, 223, 222, 224, 224, 12, 12, 12, 12, 12,
	216, 216, 216, 216, 216, 13, 13, 219, 219, 219,
	14, 14, 14, 101, 101, 105, 105, 105, 106, 106,
	106, 106, 236, 236, 235, 235, 137, 137, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 250, 250,
	251, 251, 251, 251, 251, 251, 251, 214, 214, 214,
	214, 215, 215, 215, 215, 217, 217, 218, 218, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 221,
	221, 120, 120, 197, 197, 197, 198, 198, 198, 198,
	198, 198, 200, 200, 201, 201, 127, 127, 195, 195,
	194, 193, 193, 192, 192, 191, 202, 202, 22, 173,
	174, 174, 174, 174, 174, 174, 174, 161, 161, 141,
	141, 141, 141, 141, 141, 141, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 208, 208, 208, 208, 208, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 210, 211, 212,
	204, 204, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 151, 151, 151, 151,
	151, 151, 203, 203, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 145, 145, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 144, 144, 144, 144, 144,
	144, 144, 144, 146, 146, 146, 146, 146, 146, 146,
	146, 142, 142, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 148, 148, 148, 148,
	148, 148, 148, 148, 160, 160, 149, 149, 158, 158,
	159, 159, 159, 150, 150, 150, 157, 157, 157, 154,
	154, 155, 155, 156, 156, 156, 152, 152, 152, 153,
	153, 153, 163, 184, 184, 184, 186, 186, 187, 187,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 172, 172, 213, 213, 183, 183, 183, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 171, 171, 181,
	181, 182, 182, 179, 179, 179, 180, 166, 166, 166,
	166, 166, 167, 168, 168, 168, 168, 164, 165, 206,
	206, 206, 241, 241, 241, 241, 241, 241, 242, 242,
	207, 207, 169, 169, 170, 170, 177, 177, 177, 177,
	252, 252, 175, 175, 176, 176, 176, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 253, 253, 254, 254, 254, 254, 254, 254,
	254, 190, 188, 188, 189, 189, 17, 18, 18, 18,
	18, 18, 19, 19, 23, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 112, 112,
	109, 109, 110, 110, 111, 111, 111, 113, 113, 113,
	138, 138, 138, 25, 25, 27, 27, 28, 29, 26,
	26, 26, 26, 26, 255, 30, 31, 31, 32, 32,
	32, 36, 36, 36, 34, 34, 35, 35, 41, 41,
	40, 40, 42, 42, 42, 42, 126, 126, 126, 125,
	125, 237, 237, 237, 237, 237, 44, 44, 45, 45,
	46, 46, 47, 47, 47, 226, 226, 225, 225, 227,
	227, 227, 227, 227, 227, 59, 59, 94, 94, 94,
	97, 97, 48, 48, 48, 48, 49, 49, 50, 50,
	51, 51, 133, 133, 132, 132, 132, 131, 131, 53,
	53, 53, 55, 54, 54, 54, 54, 56, 56, 58,
	58, 57, 57, 60, 60, 60, 60, 61, 61, 95,
	95, 43, 43, 43, 43, 43, 43, 43, 108, 108,
	63, 63, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 72, 72, 72, 72, 72, 72, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 39,
	39, 73, 73, 73, 79, 74, 74, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 70, 70, 70, 70, 70, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 256, 256, 71, 71, 71,
	71, 37, 37, 37, 37, 37, 136, 136, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 140, 140, 140, 140, 140, 140, 140, 140, 83,
	83, 38, 38, 81, 81, 82, 119, 119, 84, 84,
	80, 80, 80, 228, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 85, 85, 86, 86, 238,
	238, 239, 239, 240, 87, 87, 88, 88, 89, 90,
	90, 90, 91, 91, 91, 91, 92, 92, 92, 65,
	65, 65, 65, 65, 65, 93, 93, 93, 93, 98,
	98, 75, 75, 77, 77, 76, 78, 99, 99, 103,
	100, 100, 104, 104, 104, 104, 104, 20, 21, 102,
	102, 102, 128, 128, 128, 114, 114, 115, 115, 107,
	107, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 117, 117, 117, 118, 118, 123, 123, 124, 124,
	129, 129, 129, 130, 130, 229, 229, 229, 230, 230,
	230, 231, 231, 232, 233, 233, 234, 244, 244, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 247, 248, 134,
	135, 135, 135,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 5, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 8, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 2, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 0, 3, 1, 1, 1, 1, 2, 13,
	12, 14, 12, 13, 12, 7, 8, 7, 5, 5,
	5, 11, 11, 9, 13, 14, 5, 8, 0, 3,
	0, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 1, 1, 1, 3, 1, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 1,
	4, 0, 3, 0, 2, 2, 0, 2, 2, 2,
	2, 2, 0, 2, 0, 3, 0, 1, 0, 2,
	1, 0, 2, 1, 3, 3, 0, 2, 4, 4,
	0, 1, 3, 3, 3, 3, 3, 2, 2, 3,
	1, 1, 1, 1, 1, 0, 2, 2, 3, 2,
	4, 2, 4, 2, 2, 3, 2, 3, 2, 7,
	9, 3, 3, 6, 9, 9, 8, 8, 5, 8,
	7, 4, 2, 4, 6, 2, 4, 2, 1, 1,
	1, 2, 1, 1, 1, 3, 3, 1, 2, 1,
	1, 2, 0, 4, 3, 4, 3, 3, 3, 3,
	3, 3, 3, 2, 4, 6, 2, 3, 2, 3,
	1, 3, 0, 2, 0, 3, 3, 2, 2, 2,
	2, 2, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	2, 1, 1, 1, 3, 3, 2, 2, 2, 1,
	1, 1, 1, 4, 4, 4, 4, 4, 1, 5,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 3, 3, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 6, 0, 1, 4, 1, 2, 1, 3,
	2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 1, 1, 0, 2, 5, 2, 3,
	3, 2, 3, 2, 2, 3, 4, 1, 1, 1,
	1, 1, 3, 3, 2, 2, 1, 2, 5, 5,
	8, 8, 13, 1, 1, 2, 2, 10, 7, 0,
	1, 1, 0, 1, 1, 1, 2, 2, 1, 2,
	0, 3, 0, 1, 1, 3, 0, 4, 1, 3,
	2, 1, 1, 2, 1, 1, 1, 6, 11, 13,
	13, 6, 7, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 3, 3, 3, 3, 4, 3, 6,
	4, 2, 4, 2, 2, 2, 2, 3, 1, 1,
	0, 1, 0, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 3, 4, 4, 5, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 0, 4, 1, 3, 1,
	1, 1, 1, 1, 1, 4, 8, 1, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 0,
	4, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 6,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 1,
	1, 1, 1, 2, 4, 5, 5, 6, 4, 4,
	4, 6, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 1, 2, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 2, 2, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 0, 2,
	1, 3, 5, 3, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 3, 0, 2, 0,
	3, 1, 3, 1, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 5, 3, 1, 3, 1,
	2, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 2, 0, 2,
	2, 0, 1, 4, 1, 3, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -245, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -23, -24, -25, -27, -28, -29,
	-26, -3, -4, 7, -33, 9, 10, 31, -22, 122,
	123, 125, 124, 155, 126, 148, 52, 206, 207, 209,
	210, 26, 149, 150, 153, 154, 6, -247, 8, 334,
	56, -246, 382, -87, 15, -32, 5, -30, -255, -30,
	-30, -30, -30, -173, 56, -241, -242, -202, 131, 164,
	326, 128, 144, 162, 163, 354, 129, 366, 367, 146,
	369, 76, -107, 132, 134, 129, 129, 130, 132, 326,
	128, 129, -57, -129, 59, -122, 61, 171, 345, 21,
	206, 219, 220, 211, 252, 240, 346, 169, 237, 241,
	291, 380, 69, 209, 300, 138, 175, 151, 232, 235,
	234, 226, 223, 28, 258, 352, 225, 141, 259, 263,
	270, 292, 341, 216, 217, 294, 256, 33, 143, 347,
	37, 159, 295, 261, 255, 250, 131, 254, 215, 249,
	41, 229, 265, 264, 266, 290, 243, 170, 269, 245,
	227, 244, 18, 154, 157, 260, 262, 224, 172, 136,
	161, 351, 296, 222, 158, 173, 153, 299, 368, 168,
	210, 293, 218, 302, 205, 204, 40, 276, 236, 213,
	228, 214, 140, 207, 166, 247, 160, 230, 231, 253,
	212, 248, 208, 162, 155, 301, 277, 353, 246, 242,
	238, 239, 167, 132, 164, 165, 283, 284, 285, 286,
	349, 297, 233, 278, 279, 177, 178, 179, 180, 181,
	182, 183, 34, 35, 342, 343, 129, 116, 241, 122,
	281, 130, 33, 161, -138, 129, -109, 165, 283, 284,
	285, 286, 59, 293, 292, 287, -129, 208, -134, -134,
	-134, -134, -134, -30, -2, -91, 17, 16, -5, -3,
	-247, 21, 22, -42, 107, -43, -129, -62, 78, -67,
	29, 59, -122, 61, 24, -66, -63, -80, -228, -78,
	-79, 116, 117, 105, 106, 113, 79, 118, -70, -68,
	-69, -71, -231, 62, -123, 60, 70, 63, 64, 65,
	66, 71, 72, 73, 303, -76, -247, 46, 47, 335,
	336, 337, 338, 344, 339, 81, 36, 38, 325, 333,
	332, 331, 329, 330, 327, 328, 379, 135, 326, 111,
	334, 267, -31, -107, -45, -46, -47, -48, -59, -79,
	-247, -57, 11, -52, -57, -100, -137, 208, -104, 293,
	292, -124, 303, -102, -123, -121, 291, 241, 290, 59,
	-122, 127, 185, 357, 77, 23, 25, 274, 280, 184,
	80, 116, 16, 81, 191, 366, 367, 115, 335, 122,
	50, 327, 328, 325, 189, 337, 338, 326, 281, 196,
	20, 29, 377, 10, 26, 149, 22, 109, 124, 186,
	84, 85, 152, 24, 150, 73, 192, 194, 19, 53,
	142, 11, 356, 13, 14, 371, 358, 135, 134, 96,
	370, 130, 48, 8, 118, 27, 378, 93, 44, 147,
	195, 46, 94, 17, 329, 330, 32, 344, 156, 111,
	51, 38, 372, 78, 373, 71, 54, 298, 190, 76,
	15, 49, 157, 374, 144, 193, 95, 125, 334, 47,
	187, 375, 128, 188, 6, 340, 31, 148, 45, 129,
	282, 83, 133, 72, 163, 5, 146, 9, 52, 55,
	331, 332, 333, 36, 82, 12, 145, 348, 74, -174,
	-161, -123, 61, 130, 130, 132, -236, 204, 132, -123,
	-115, 135, -115, -123, -123, -115, -57, 129, -115, 369,
	366, 367, 334, 129, -57, -57, -114, 135, 59, -114,
	-114, -114, -57, 119, -57, 59, 31, 326, 59, 161,
	129, 162, 132, -135, -247, -124, -135, -135, -135, 166,
	167, -135, -110, 288, 54, -135, -36, 42, 43, -248,
	58, -92, 19, 32, -43, -129, -88, -89, -43, -87,
	-2, 11, -126, 77, 76, 93, -125, 23, -123, 61,
	119, -43, -64, 96, 78, 94, 95, 80, 102, 101,
	112, 105, 106, 107, 108, 109, 110, 111, 103, 104,
	115, 379, 86, 87, 88, 89, 90, 91, 92, 97,
	98, 99, 100, -108, -247, -199, 379, -79, -247, 120,
	121, -67, -67, -67, -67, -67, -67, -67, -232, 268,
	-247, 61, 119, -2, -74, -43, -247, -247, -247, -247,
	-247, -247, -247, -247, -247, -83, -43, -247, 39, -256,
	-247, -256, -256, -256, -256, -256, -256, -256, -140, 116,
	241, 151, 232, -143, -142, 247, 246, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 240, 346, -247,
	-247, -247, -247, 68, -58, 27, -57, 31, 57, -53,
	-55, -54, -56, 44, 48, 50, 45, 46, 47, 51,
	-133, 23, -45, -247, -132, 157, -131, 23, -129, 61,
	-57, -52, -249, 57, 11, 55, 57, -100, 208, -101,
	-105, 294, 296, 86, 119, -128, -123, 61, 29, 31,
	58, 57, -162, -141, -145, -142, -147, -146, -148, -123,
	-143, -144, 240, 346, 237, 241, 238, 243, 244, 245,
	116, 242, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 246, 258, 31, 151, 230, 231, 232,
	235, 234, 236, 233, 259, 260, 261, 262, 263, 264,
	265, 266, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 222, 223, 225, 226, 227, 229, 228, -162,
	-123, 54, 203, -123, -115, 132, 205, -115, -195, 55,
	59, 78, 59, 54, -214, 54, 19, 184, 185, 197,
	-123, 23, -115, -57, -57, 298, -135, 133, -57, 24,
	54, -57, 59, 59, -130, -129, -121, -135, -135, -135,
	-135, -135, -135, -135, -135, -135, -135, -112, 282, 289,
	-57, -34, 22, 9, 96, 57, 18, 119, 57, -90,
	25, 26, -91, -248, -57, -43, -43, -72, 71, 78,
	72, 73, -125, 107, -130, -124, -121, -67, -73, -76,
	-79, 67, 96, 94, 95, 80, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -67, -67,
	-67, -136, 59, 61, -145, 231, -140, -143, 222, 223,
	225, 226, 227, 229, 228, 59, 241, 231, 271, 118,
	247, 256, 257, -141, -66, 61, -123, -66, -123, 383,
	-41, 22, -40, -74, -42, -43, -124, -248, 57, -248,
	-2, -40, -40, -43, -139, 116, 237, 151, 232, 226,
	256, 257, 243, 276, 230, 277, 219, 211, 216, 229,
	227, 213, 228, 212, 225, 222, 235, 234, 236, 247,
	238, 245, 244, 242, -43, -80, -67, -80, -123, -129,
	-40, -34, -81, -82, 82, -80, 19, -248, 239, -40,
	-41, -40, -40, -40, -96, 157, -57, -99, -103, -80,
	-46, -47, -47, -46, -47, 44, 44, 44, 49, 44,
	49, 44, -54, -129, -248, -60, 52, 134, 53, -247,
	-131, -96, 55, -45, -57, -104, -101, 57, 295, 297,
	298, 54, 74, -43, -124, -153, 116, 115, -177, -252,
	349, 35, -161, -163, -166, -164, -165, -178, -167, 138,
	136, 140, 141, 146, -171, 130, 147, 71, 78, -208,
	138, -211, 54, 274, 280, 136, 147, 146, 380, 69,
	139, 356, 358, 29, 30, -156, 383, 268, -154, 277,
	-149, 56, -149, -149, 239, -150, 56, -149, -150, -149,
	-150, -152, 241, -152, -152, -152, -152, 56, 56, -149,
	-149, -149, -149, -149, -158, 56, 224, -158, -158, -159,
	56, -159, 54, 55, -57, -123, 54, -57, -115, -235,
	377, 378, -57, -193, 348, -194, 59, -135, 24, -135,
	-57, -217, -215, 8, 9, 10, -57, 198, -214, -141,
	-57, -116, 127, 124, 125, -190, 123, 274, 241, 69,
	29, 15, 335, 157, 353, 59, 158, -57, -57, -57,
	-135, -111, 11, 96, -35, 45, 40, -43, -43, -130,
	-89, -92, 71, 72, 73, 119, -247, -73, -67, -67,
	-67, -39, 152, 77, 348, -248, 239, -157, 348, 349,
	-156, -233, -234, 61, -248, -40, 57, -248, -248, -43,
	-248, -248, -248, 57, 55, 57, -149, 56, -149, -149,
	-159, -149, 217, -149, 217, -159, -149, -149, -149, -149,
	-149, 23, 57, 11, 57, 57, 11, 119, -248, -40,
	-84, -82, 84, -43, -248, -129, -248, -248, -248, -248,
	-65, 31, 36, -2, -247, -247, -61, 57, 12, 86,
	-50, -49, 54, 55, -51, 54, -49, 44, 44, -226,
	348, 130, 130, 130, -97, -123, -61, -45, -61, -105,
	-106, 299, 296, 302, 86, 59, -175, -124, 57, 34,
	56, -207, 54, 78, -169, -123, 147, -171, -171, 59,
	-171, 59, 130, 59, 71, 19, -123, 9, 147, 147,
	-207, 61, -57, -204, 357, 16, 56, -209, 56, -210,
	61, 62, 63, 64, 71, -151, 70, -63, 269, -70,
	325, 328, 327, 270, -123, -129, -212, 63, 384, -155,
	278, 63, -152, -152, -149, -152, 63, 59, -152, -152,
	-153, 31, -153, -153, -153, -153, -160, 61, -160, -157,
	-157, 63, -158, 63, -57, -123, 56, 54, -57, 23,
	-57, 23, -192, -191, -124, -197, 23, 54, 57, 198,
	-214, -217, 55, -134, -127, 138, -166, -254, 164, 146,
	137, 142, 141, 59, 136, 140, 157, -196, 164, 137,
	138, 142, 141, 59, 130, 147, 136, 140, 157, 146,
	-117, -118, 133, 23, 130, 147, 157, 127, -135, -113,
	94, 12, -129, -129, -40, 41, 119, 107, -124, -41,
	-39, 77, -67, -67, 230, 230, 230, 384, 57, -199,
	-248, -42, -237, 381, -139, 116, 237, 151, 232, 226,
	256, 243, 276, 230, 277, 219, 211, 216, 229, 227,
	213, 228, 212, 225, 222, 235, 234, 236, 247, 238,
	245, 244, 242, -136, -43, -152, 59, -139, -67, -67,
	-67, -67, -67, -124, 345, -87, 85, -43, 83, -98,
	54, -99, -75, -77, -76, -247, -2, -93, -123, -97,
	-87, -103, -43, -43, -43, 56, -43, 56, -247, -247,
	-247, -248, 57, -87, -61, 296, 300, 301, -43, 86,
	-124, -177, -182, -179, -123, 147, 10, 9, 19, 142,
	136, 380, 59, 59, 59, -206, 146, 366, 367, 368,
	-208, 380, -151, 270, -247, 56, 23, 29, 63, -209,
	56, -210, -199, 379, -199, -247, -149, 56, -149, 56,
	56, 119, 58, -153, -153, -152, -153, 58, 58, -153,
	-153, 59, 116, 58, 57, 58, 57, 58, 57, 56,
	55, 54, -181, -182, -70, -123, -57, 56, -2, 23,
	-2, 57, 86, -198, 19, 172, 173, -57, -215, -94,
	-123, 147, -217, 54, -123, -253, 130, 147, -123, -134,
	-123, -134, -123, -57, -134, -123, 138, -166, 61, -43,
	-44, 11, -248, -67, 279, 279, 279, -234, -247, -248,
	-248, -248, -248, -248, 19, 57, -248, 57, 19, -247,
	-38, 340, -43, 28, -98, 57, -248, -248, -248, 57,
	119, -248, -91, -94, -225, -227, 371, 372, 373, 374,
	375, 376, -94, -94, -94, -132, -123, -91, -176, -124,
	61, 63, 58, 57, -149, -180, 272, -149, -168, 168,
	169, 31, 170, -168, 368, 147, 147, -247, -206, -207,
	-43, -94, 56, 358, 57, 58, -209, 61, 269, 58,
	-123, -248, 58, 58, 58, -124, -153, -152, 61, -152,
	63, 63, -181, -123, -57, 58, 56, -94, -2, -191,
	-176, 133, 21, 6, 8, 9, 10, 19, -120, 57,
	23, -57, -250, 56, -123, 146, 56, 27, -123, -61,
	-45, -248, -238, -87, 157, -67, -67, -67, -67, -67,
	-248, 61, 147, -77, 36, -2, -247, -123, -123, 58,
	58, 57, -248, -248, -248, -60, -184, -186, 348, -185,
	55, 143, 69, 177, 178, 179, 180, 181, 182, 183,
	-179, -90, -207, 54, 71, 171, -207, 54, -169, -123,
	-206, -43, -247, -248, 58, -43, 56, 63, 58, -153,
	-153, 58, 58, 58, 56, 56, -95, 370, -181, 58,
	-170, -123, 186, -119, 82, -123, -218, -220, -7, -9,
	-8, -11, -10, -12, -13, -14, -20, -3, 20, 31,
	190, 191, 196, 192, 145, 135, -21, -120, 19, -251,
	-123, 105, 86, 61, -161, 57, 56, 56, -94, -247,
	136, -85, 13, -248, -87, -248, 16, -248, -248, -248,
	-248, -37, 96, 348, 9, -75, -2, 119, -227, -226,
	-183, 54, -185, 348, 56, 350, 59, -172, 86, 61,
	86, 86, 86, 86, 86, 86, 86, 9, 10, 56,
	56, -248, -43, -203, 170, 54, 58, -205, 58, 58,
	-95, -181, -182, -61, 56, 58, -61, -200, 57, 55,
	187, 206, -43, -220, -87, -223, -123, -222, -244, -243,
	304, 305, 306, 307, 308, 309, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 323,
	324, -123, -123, -123, -216, 38, 193, 194, 195, -62,
	-67, -43, -62, -119, 186, 58, -251, -123, -251, -251,
	-251, -251, -251, -182, -182, 58, -188, -189, 157, 147,
	-86, 14, 16, -248, -239, -240, -43, -248, 346, 51,
	351, -99, -248, -123, -123, -187, -185, -123, 63, -213,
	54, 74, 63, -213, -213, -213, -213, -213, -168, -168,
	-170, -182, -203, -248, 341, 10, 9, 354, 355, 58,
	207, 360, 361, 156, 362, 170, 363, 364, -61, 58,
	58, -184, -94, -95, -184, -201, 348, -123, -43, -221,
	-220, 206, -219, -220, -91, 57, -224, -141, 188, -213,
	57, -123, 11, 11, 11, 11, -220, 206, 83, 206,
	206, 187, 58, 58, -195, -248, 57, -123, 56, -43,
	-74, 57, 41, 347, 352, -247, 58, 57, -207, -207,
	58, 58, -203, -168, -168, 348, 63, 16, 63, 63,
	63, 63, 361, 156, 363, 16, -184, -61, -184, -183,
	58, -61, -183, 380, -220, -220, 382, -92, -222, -123,
	189, -243, 27, -219, -218, -219, -219, -229, 199, 78,
	-193, -189, 36, -182, -240, 41, -123, -185, 139, -184,
	63, 63, 365, -129, -183, -184, -184, -43, 382, -220,
	85, 19, -123, 85, 382, 382, 85, 382, -230, 200,
	199, 159, 58, 348, -248, -57, -183, 119, -183, 85,
	-2, 85, 84, 85, 202, 201, 160, 351, 56, -124,
	135, 206, -247, 352, -170, -219, -67, 156, 58, 85,
	-248, -248,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 834, 0, 534, 534, 534, 534, 534, 0, -2,
	889, 0, 0, 0, 0, -2, 524, 525, 0, 527,
	528, 1219, 1219, 1219, 1219, 1219, 534, 0, 32, 33,
	1217, 1, 3, 842, 0, 0, 538, 921, 536, 889,
	0, 0, 0, 88, 170, 0, 0, 0, 0, 0,
	887, 887, 0, 0, 0, 0, 887, 413, 414, 415,
	418, 0, 0, 0, 890, 0, 885, 0, 885, 885,
	885, 0, 483, 621, 910, 911, 912, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 0, 0, 0, 0,
	1220, 1220, 1220, 1220, 0, 1220, 512, 501, 503, 504,
	505, 506, 1220, 521, 522, 511, 523, 526, 529, 530,
	531, 532, 533, 541, 26, 846, 921, 921, 834, 28,
	0, 539, 540, 0, 552, 556, 0, 631, 921, 636,
	638, -2, -2, -2, 0, 677, 678, 679, 680, 681,
	682, 921, 921, 921, 921, 921, 921, 921, 709, 710,
	711, 712, 0, 816, 810, 818, 819, 820, 821, 822,
	823, 824, 640, 641, 0, 866, 921, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, 745, 745,
	745, 745, 745, 745, 745, 745, 0, 0, 0, 0,
	0, 922, 535, 0, 0, 568, 570, 571, 572, 602,
	0, 604, 0, 0, 40, 44, 0, 1183, 870, -2,
	-2, 0, 0, 0, 908, 909, -2, 1090, -2, 906,
	907, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 0,
	171, 185, 185, 0, 0, 887, 0, 0, 887, 158,
	0, 0, 0, 0, 0, 0, 0, 887, 0, 419,
	416, 417, 167, 0, 1220, 0, 0, 0, 0, 0,
	0, 0, 482, 0, 484, 1220, 1220, 1220, 1220, 1220,
	1220, 1220, 1220, 493, 1221, 1222, 494, 495, 496, 1220,
	1220, 498, 0, 513, 0, 507, 544, 542, 543, 27,
	1218, 22, 0, 0, 843, 0, 835, 836, 839, 842,
	26, 0, 553, 921, 921, 0, 557, 0, 559, 560,
	0, 634, 921, 0, 0, 921, 921, 921, 921, 921,
	921, 921, 921, 921, 921, 921, 921, 921, 921, 921,
	0, 0, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 637, 0, 815, 185, 651, 0, 0,
	0, 700, 701, 702, 703, 704, 705, 706, 713, 0,
	-2, 817, 0, 26, 0, 675, 921, 921, 921, 921,
	921, 921, 0, 921, 544, 0, 800, 0, 0, 736,
	0, 737, 738, 739, 740, 741, 742, 743, 744, 791,
	0, 793, 794, 795, 796, 797, 798, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 291, 292, 921,
	-2, 921, 921, 537, 42, 0, 620, 0, 0, 0,
	0, 0, 0, 609, 0, 0, 612, 0, 0, 0,
	0, 603, 0, 0, 623, 1145, 605, 0, 607, 608,
	-2, 0, 0, 0, 38, 39, 0, 45, 1183, 47,
	73, 0, 0, 921, 0, 349, 882, 883, 884, 880,
	426, 0, 177, 343, 339, 180, 181, 182, 183, 184,
	326, 264, -2, -2, -2, -2, -2, -2, -2, -2,
	326, -2, -2, -2, -2, -2, 346, -2, -2, -2,
	-2, -2, 312, -2, 1105, 0, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 178,
	0, 0, 0, 0, 0, 887, 0, 0, 161, 0,
	1220, 0, 1220, 0, 0, 0, 117, 118, 119, 0,
	0, 185, 0, 168, 0, 0, 449, 0, 477, 886,
	0, 1220, 480, 481, 622, 913, 914, 485, 486, 487,
	488, 489, 490, 491, 492, 497, 500, 514, 508, 509,
	502, 546, 545, 847, 0, 921, 921, 0, 921, 838,
	840, 841, 846, 29, 24, 632, 633, 635, 652, 0,
	654, 656, 558, 554, 0, 811, -2, 642, 643, 671,
	672, 673, 0, 921, 921, 921, 669, 647, 0, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 697, 756, 757, 698, 0, 708, 326, 328, 328,
	328, 330, 330, 281, 282, 0, 326, 326, 257, 258,
	-2, -2, -2, 343, 695, 254, 0, 696, 707, 0,
	0, 921, 0, 0, 550, 556, 813, 674, 921, 865,
	26, 0, 0, 0, 0, -2, -2, -2, -2, -2,
	-2, 765, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 0, 679, 0, 0, 810, 0,
	0, 921, 808, 803, 921, 0, 0, 746, 792, 0,
	0, 549, 0, 0, 0, 0, 619, 627, 867, 0,
	569, 598, 600, 0, 595, 610, 611, 613, 0, 615,
	0, 617, 618, 573, 574, 575, 0, 0, 0, 0,
	606, 627, 0, 627, 41, 871, 46, 0, 0, 76,
	77, 872, 873, 874, 0, 876, 350, 0, 169, 428,
	0, 431, 172, 173, 174, 175, 176, 0, 420, -2,
	1150, 1173, 1108, 0, 0, 387, 388, 187, 0, 189,
	0, 191, 0, 193, 194, 0, 196, 198, 420, 0,
	0, 0, 0, 0, 0, 186, 0, 345, 341, 340,
	263, 0, 346, 346, 326, 346, 0, 346, 346, 300,
	301, 349, 0, 349, 349, 349, 349, 0, 0, 336,
	336, 286, 287, 288, 275, 0, 328, 277, 278, 279,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 83,
	84, 85, 0, 98, 0, 159, 160, 99, 888, 100,
	143, 0, 125, 121, 122, 123, 0, 120, 0, 106,
	0, 1219, 156, 0, 901, 450, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 0, 0, 476, 1220,
	479, 517, 0, 0, 921, 547, 0, 844, 845, 0,
	837, 23, 653, 655, 657, 0, -2, 644, 669, 648,
	0, 645, 921, 921, 0, 639, -2, 256, 0, 0,
	262, 0, 924, 254, 714, 0, 921, 561, 718, 676,
	-2, 719, 720, 0, 0, 921, 758, 1217, 346, 762,
	763, 766, 768, 769, 771, 776, 782, 783, 786, 789,
	790, 0, 921, 921, 921, 921, 921, 0, 0, 834,
	0, 804, 921, 0, 734, 735, 747, 748, 749, 750,
	859, 0, 0, -2, 0, 0, 834, 0, 921, 921,
	592, 599, 921, 0, 593, 921, 594, 614, 616, 585,
	0, 0, 0, 0, 0, 590, 834, 627, 37, 74,
	75, 0, 0, 81, 921, 351, 0, 432, 426, 430,
	0, 397, 0, 0, 0, 423, 378, 0, 0, 381,
	0, 383, -2, 409, 188, 0, 0, 0, 195, 197,
	0, 201, 202, 0, 230, 0, 0, 212, 0, 215,
	-2, 218, 219, 220, 254, 222, 223, 224, 1139, 227,
	326, 326, 250, 1111, 0, 0, 228, 229, 344, 179,
	342, 0, 349, 349, 346, 349, 0, 0, 349, 349,
	302, 0, 303, 304, 305, 306, 0, 324, 0, 284,
	285, 0, 276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 163, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 437, 0, 422, 441, 1219, 0, 157,
	464, 465, 466, 467, 468, 469, 470, 1219, 0, 451,
	452, 453, 454, 455, 456, 457, 458, 459, 460, 461,
	0, 1219, 902, 903, 904, 905, 0, 0, 478, 499,
	0, 921, 515, 516, 566, 848, 0, 555, 812, 0,
	646, 921, 670, 649, 0, 0, 0, 923, 0, 926,
	715, 551, 716, 0, 0, 326, 326, 761, 326, 330,
	764, 326, 767, 326, 770, 772, 773, 774, 775, 330,
	777, 778, 779, 780, 781, 326, 326, 784, 785, 326,
	788, 326, 326, 0, 0, 759, 760, 0, 0, 0,
	0, 0, 0, 811, 0, 801, 733, 809, 921, 30,
	0, 859, 849, 861, 863, 921, 26, 0, 855, 0,
	842, 868, 628, 869, 596, 0, 601, 0, 0, 0,
	0, 604, 0, 842, 36, 78, 79, 80, 875, 0,
	433, 429, 0, 391, 326, 326, 0, 0, 0, 0,
	0, 0, 379, 380, 382, 385, 409, 410, 411, 211,
	190, 420, 192, 0, 921, 0, 0, 231, 0, 0,
	0, 0, 217, 185, 221, 0, 246, 0, 248, 0,
	0, 0, 327, 293, 294, 349, 295, 334, 335, 296,
	297, 347, 348, 346, 0, 346, 0, 331, 0, 0,
	0, 0, 0, 389, 390, 326, 0, 0, -2, 0,
	-2, 0, 0, 0, 0, 144, 145, 141, 126, 124,
	587, 588, 0, 0, 108, 0, 462, 463, 423, 443,
	0, 444, 446, 447, 448, 0, 422, 442, 518, 519,
	627, 0, 717, 650, 699, 337, 338, 925, 0, 721,
	724, 722, 723, 725, 921, 921, 728, 921, 921, 921,
	0, 0, 805, 0, 31, 0, 864, -2, 0, 0,
	0, 43, 34, 0, 0, 577, 579, 580, 581, 582,
	583, 584, 0, 0, 0, 623, 591, 35, 427, 434,
	435, 436, 353, 0, 839, 395, 396, 394, 420, 403,
	404, 0, 0, 420, 421, 422, 409, 921, 386, 0,
	0, 0, 921, 208, 0, 213, 0, 254, 0, 216,
	184, 225, 247, 249, 251, 0, 299, 349, 325, 349,
	0, 0, 0, 0, 0, 629, 0, 0, -2, 164,
	165, 0, 147, 148, 149, 150, 151, 0, 806, 0,
	0, 141, 107, 110, 0, 0, 0, 0, 423, 825,
	567, 562, 0, 0, 0, 0, 0, 0, 0, 751,
	732, 802, 0, 862, 0, -2, 0, 857, 856, 597,
	576, 0, 624, 625, 626, 575, 375, 354, 0, 356,
	0, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	392, 393, 398, 0, 405, 406, 399, 0, 0, 423,
	0, 0, 921, 252, 203, 0, 232, 0, 0, 314,
	315, 329, 332, 629, 0, 0, 627, 0, 0, 627,
	152, 424, 0, 0, 921, 589, 103, 127, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 834, 0, 534,
	0, 0, 0, 60, 921, 921, 877, 806, 0, 0,
	-2, 110, 110, -2, 110, 110, 0, 0, 0, 0,
	0, 827, 0, 563, 0, 564, 921, 727, 726, 729,
	730, 0, 0, 0, 0, 852, 26, 0, 578, 586,
	352, 0, 357, 0, 0, 0, 360, 0, 372, 362,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 252, 0, 199, 0, 0, 0, 0, 210, 214,
	627, 0, 0, 353, 0, 629, 353, 154, 0, 921,
	142, 0, 807, 128, 842, 48, -2, 50, 0, 927,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 55, 56, 57, 0, 0, 0, 0, 0, 0,
	0, 0, 631, 0, 0, 109, 111, -2, 112, 113,
	114, 115, 116, 0, 0, 158, 0, 472, 0, 0,
	25, 921, 921, 565, 830, 831, 833, 731, 0, 0,
	0, 860, -2, 858, 376, 0, 358, 363, 361, 364,
	373, 374, 365, 366, 367, 368, 369, 370, 420, 420,
	0, 0, 408, 252, 253, 0, 0, 206, 207, 209,
	0, 0, 0, 0, 0, 0, 243, 0, 353, 627,
	353, 375, 0, 627, 375, 101, 0, 425, 153, 102,
	139, 0, 0, 67, 846, 0, 0, 52, 54, 878,
	0, 58, 61, 62, 63, 64, 65, 0, 0, 0,
	0, 142, 438, 915, 161, 471, 0, 0, 0, 828,
	826, 921, 752, 0, 755, 0, 355, 0, 400, 401,
	0, 353, 200, 204, 205, 0, 234, 0, 236, 237,
	238, 239, 240, 241, 242, 0, 375, 353, 92, 90,
	630, 353, 94, 921, 0, 68, 0, 138, 51, 185,
	0, 928, 0, 0, 0, 0, 0, 918, 916, 0,
	445, 473, 0, 0, 832, 753, 0, 359, 0, 375,
	233, 235, 244, 0, 89, 93, 375, 155, 0, 69,
	104, 0, 59, 66, 0, 0, 71, 0, 440, 0,
	917, 0, 439, 0, 377, 0, 407, 0, 91, 140,
	-2, 0, 0, 105, 919, 920, 0, 0, 0, 245,
	70, 0, 921, 754, 0, 0, 0, 0, 402, 72,
	474, 475,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 382,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 383, 3, 384, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:421
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:426
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:427
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:431
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:454
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:462
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:468
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:475
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:481
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:485
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:491
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:495
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:502
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:514
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
			yyVAL.str = InsertStr
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:530
		{
			yyVAL.str = ReplaceStr
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:536
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:542
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:546
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:550
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:555
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:556
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:560
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:564
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:569
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:573
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:579
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:583
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:587
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:591
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:597
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:601
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:614
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:618
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:624
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:629
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:633
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:639
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:646
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:653
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:660
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:668
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:678
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:682
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:686
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:690
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:694
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:700
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:707
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:717
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:721
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:725
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:732
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:741
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:749
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:760
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:764
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:770
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:774
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:778
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:784
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:788
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:792
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:796
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:801
		{
			yyVAL.str = ""
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:805
		{
			yyVAL.str = yyDollar[3].str
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:811
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:815
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:821
		{
			yyVAL.str = SessionStr
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:825
		{
			yyVAL.str = GlobalStr
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:831
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 89:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:836
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:856
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 91:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:876
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 92:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:897
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 93:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:913
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 94:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:930
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:949
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:957
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:       CreateSqlSecurityStr,
				SecurityType: yyDollar[3].str,
				Name:         yyDollar[6].tableName.ToViewName(),
				Definition:   yyDollar[8].selStmt,
			}}
		}
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:966
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:974
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:982
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:986
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:990
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 102:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1002
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 103:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1013
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 104:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1024
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      yyDollar[11].blockStatement,
			}}
		}
	case 105:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:1034
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[4].colIdent,
				TableName: yyDollar[8].tableName,
				Time:      yyDollar[5].str,
				Event:     yyDollar[6].strs,
				Body:      yyDollar[12].blockStatement,
			}}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1045
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 107:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1056
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1061
		{
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1062
		{
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1066
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1067
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1068
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1069
		{
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1070
		{
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1071
		{
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1072
		{
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1076
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1080
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1084
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1088
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1094
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1098
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1102
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1107
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1113
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1117
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1123
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1127
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1133
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1145
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1157
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1164
		{
			yyVAL.empty = struct{}{}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1166
		{
			yyVAL.empty = struct{}{}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1169
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1173
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1177
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1182
		{
			yyVAL.bytes = nil
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1186
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1190
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1194
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1198
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1202
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1207
		{
			yyVAL.expr = nil
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1211
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1216
		{
			yyVAL.expr = nil
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1220
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1225
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1229
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1234
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1238
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1244
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1249
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1254
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1260
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1265
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1271
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1276
		{
			yyVAL.bytes = nil
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1280
		{
			yyVAL.bytes = nil
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1286
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1293
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1299
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1303
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1308
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1312
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1316
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1320
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1324
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1330
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1335
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1341
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1352
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1357
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1363
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1376
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1381
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1386
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1391
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1397
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1402
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1407
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1412
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1417
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1422
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1427
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1432
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1437
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1446
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1456
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1461
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1466
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1473
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1480
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1488
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1493
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1499
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 209:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1505
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1511
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1517
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1524
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1528
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1532
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1536
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1540
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1546
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1550
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1554
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1558
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1562
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1566
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1570
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1574
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1578
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1582
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1588
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1594
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1600
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1606
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1610
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1615
		{
			yyVAL.sequence = &Sequence{}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1619
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1624
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1629
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1634
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1639
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1644
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1649
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1654
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1659
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1664
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1669
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1674
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1679
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1686
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1690
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1694
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1698
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1702
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1706
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1711
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1715
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1720
		{
			yyVAL.bytes = nil
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1734
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1739
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 315:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2006
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2011
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2016
		{
			yyVAL.optVal = nil
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2020
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2025
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2029
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2037
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2041
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2047
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2055
		{
			yyVAL.optVal = nil
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2059
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2063
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2072
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2076
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2080
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2085
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2089
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2094
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2098
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2103
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2107
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2111
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2116
		{
			yyVAL.str = ""
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2120
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2124
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2129
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2133
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2137
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2143
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2148
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2152
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2156
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2162
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2166
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2172
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2176
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2182
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2186
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2191
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2195
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2199
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2203
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2207
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2211
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2215
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2219
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2223
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2229
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2233
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2239
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2243
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2249
		{
			yyVAL.indexPartition = nil
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2253
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2257
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2263
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2267
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2271
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2275
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2279
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2283
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2287
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2291
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2295
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2301
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2305
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2311
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2316
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2322
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2326
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2332
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2337
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2341
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2351
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2356
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2363
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 400:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2370
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 401:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2377
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 402:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2386
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2398
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2402
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2406
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2410
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 407:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2416
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 408:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2427
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2437
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2441
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2445
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2451
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2455
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2459
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2463
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2467
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2471
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2477
		{
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2478
		{
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2482
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2486
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2491
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2498
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2502
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2509
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2513
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2519
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2523
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2528
		{
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2529
		{
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2533
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2537
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2543
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2547
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2551
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2557
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 438:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2561
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 439:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2575
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 440:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2589
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2608
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 442:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2617
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2626
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 444:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2630
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 445:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2634
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2647
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 447:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2657
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 448:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2662
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2667
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2671
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 471:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2703
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2709
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2713
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2719
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 475:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2723
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2729
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2735
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2743
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 479:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2748
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2756
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2760
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2766
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2770
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2775
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2781
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2785
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2789
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2794
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2798
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2802
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2806
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2810
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2814
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2818
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2822
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2826
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2830
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2834
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2838
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2848
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2852
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2856
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2860
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2864
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2868
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2872
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2882
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2888
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2892
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2898
		{
			yyVAL.str = ""
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2902
		{
			yyVAL.str = "extended "
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2908
		{
			yyVAL.str = ""
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2912
		{
			yyVAL.str = "full "
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2918
		{
			yyVAL.str = ""
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2922
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2926
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2932
		{
			yyVAL.showFilter = nil
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2936
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2940
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2946
		{
			yyVAL.str = ""
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2950
		{
			yyVAL.str = SessionStr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2954
		{
			yyVAL.str = GlobalStr
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2960
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2964
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2970
		{
			yyVAL.statement = &Begin{}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2974
		{
			yyVAL.statement = &Begin{}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2980
		{
			yyVAL.statement = &Commit{}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2986
		{
			yyVAL.statement = &Rollback{}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2992
		{
			yyVAL.statement = &OtherRead{}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2996
		{
			yyVAL.statement = &OtherRead{}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3000
		{
			yyVAL.statement = &OtherRead{}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3004
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3008
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3013
		{
			setAllowComments(yylex, true)
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3017
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3023
		{
			yyVAL.bytes2 = nil
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3027
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3033
		{
			yyVAL.str = UnionStr
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3037
		{
			yyVAL.str = UnionAllStr
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3041
		{
			yyVAL.str = UnionDistinctStr
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3046
		{
			yyVAL.str = ""
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3050
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3054
		{
			yyVAL.str = SQLCacheStr
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3059
		{
			yyVAL.str = ""
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3063
		{
			yyVAL.str = DistinctStr
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3068
		{
			yyVAL.str = ""
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3072
		{
			yyVAL.str = StraightJoinHint
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3077
		{
			yyVAL.selectExprs = nil
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3081
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3087
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3091
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3097
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3101
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3105
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3109
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3114
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3118
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3122
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3129
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3134
		{
			yyVAL.overExpr = nil
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3138
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3142
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3146
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3150
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy, OrderBy: yyDollar[4].orderBy}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3155
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3159
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3165
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3169
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3179
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3183
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3187
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3192
		{
			yyVAL.strs = []string{}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3196
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3202
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3206
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3216
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3220
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3224
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3228
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3232
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3238
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 586:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3242
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3248
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3253
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3257
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3263
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3267
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3280
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3284
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3288
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3292
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3298
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3300
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3304
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3306
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3310
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3312
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3315
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3317
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3320
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3324
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3328
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3335
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3341
		{
			yyVAL.str = JoinStr
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3345
		{
			yyVAL.str = JoinStr
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3349
		{
			yyVAL.str = JoinStr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3355
		{
			yyVAL.str = StraightJoinStr
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3361
		{
			yyVAL.str = LeftJoinStr
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3365
		{
			yyVAL.str = LeftJoinStr
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3369
		{
			yyVAL.str = RightJoinStr
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3373
		{
			yyVAL.str = RightJoinStr
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3379
		{
			yyVAL.str = NaturalJoinStr
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3383
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3393
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3397
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3403
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3407
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3412
		{
			yyVAL.indexHints = nil
		}
	case 624:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3416
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3420
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 626:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3424
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3429
		{
			yyVAL.expr = nil
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3433
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3438
		{
			yyVAL.columns = nil
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3442
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3448
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3452
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3456
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3460
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3464
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3468
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3472
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3478
		{
			yyVAL.str = ""
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3482
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3488
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3492
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3498
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3502
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3506
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3510
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3514
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3518
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3522
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3526
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 650:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3530
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3534
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3540
		{
			yyVAL.str = IsNullStr
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3544
		{
			yyVAL.str = IsNotNullStr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3548
		{
			yyVAL.str = IsTrueStr
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3552
		{
			yyVAL.str = IsNotTrueStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3556
		{
			yyVAL.str = IsFalseStr
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3560
		{
			yyVAL.str = IsNotFalseStr
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3566
		{
			yyVAL.str = EqualStr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3570
		{
			yyVAL.str = LessThanStr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3574
		{
			yyVAL.str = GreaterThanStr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3578
		{
			yyVAL.str = LessEqualStr
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3582
		{
			yyVAL.str = GreaterEqualStr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3586
		{
			yyVAL.str = NotEqualStr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3590
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3594
		{
			yyVAL.str = PosixRegexStr
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3598
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3602
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3606
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3611
		{
			yyVAL.expr = nil
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3615
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3621
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3625
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3629
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3635
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3641
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3645
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3651
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3655
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3659
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3663
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3667
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3671
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3675
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3679
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3683
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3687
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3691
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3695
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3699
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3703
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3707
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3711
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3715
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3719
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3723
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3727
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3731
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3735
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 699:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3739
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3743
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3747
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3751
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3759
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3773
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3777
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3781
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3789
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3797
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3805
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3815
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 715:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3819
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3823
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 717:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3827
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3831
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3841
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3845
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 721:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3849
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 722:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3853
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 723:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3857
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 724:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3861
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 725:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3865
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 726:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3869
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 727:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3873
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 728:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3877
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 729:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3881
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 730:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3885
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 731:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3889
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 732:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3893
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 733:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3897
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 734:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3901
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3906
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3916
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3920
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3924
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3928
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3933
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3938
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3943
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3948
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3952
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3966
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3970
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3974
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3978
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3984
		{
			yyVAL.str = ""
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3988
		{
			yyVAL.str = BooleanModeStr
		}
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3992
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 754:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3996
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4000
		{
			yyVAL.str = QueryExpansionStr
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4006
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4010
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4016
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4020
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4024
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4028
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4032
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4036
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4042
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4046
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4050
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4054
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4058
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4062
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4066
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4070
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4074
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4078
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4082
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4086
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4090
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4094
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4098
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4102
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4106
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4110
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4114
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4118
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4122
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4126
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4130
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4134
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4138
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4142
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4146
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4152
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4156
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4160
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4164
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4168
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4172
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4176
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4180
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4185
		{
			yyVAL.expr = nil
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4189
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4194
		{
			yyVAL.str = string("")
		}
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4198
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4204
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4208
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 805:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4214
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4219
		{
			yyVAL.empty = struct{}{}
		}
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4221
		{
			yyVAL.empty = struct{}{}
		}
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4224
		{
			yyVAL.expr = nil
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4228
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4234
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4238
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 812:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4242
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4248
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4254
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4258
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4262
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4267
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4272
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4276
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4280
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4284
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4288
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4292
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4296
		{
			yyVAL.expr = &NullVal{}
		}
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4301
		{
			yyVAL.exprs = nil
		}
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4305
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4310
		{
			yyVAL.expr = nil
		}
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4314
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4319
		{
			yyVAL.partitionBy = nil
		}
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4323
		{
			yyVAL.partitionBy = yyDollar[3].partitionBy
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4329
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4333
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4339
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4344
		{
			yyVAL.orderBy = nil
		}
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4348
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4354
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4358
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4364
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 839:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4369
		{
			yyVAL.str = AscScr
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4373
		{
			yyVAL.str = AscScr
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4377
		{
			yyVAL.str = DescScr
		}
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4382
		{
			yyVAL.limit = nil
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4386
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 844:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4390
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 845:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4394
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4399
		{
			yyVAL.str = ""
		}
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4403
		{
			yyVAL.str = ForUpdateStr
		}
	case 848:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4407
		{
			yyVAL.str = ShareModeStr
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4420
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4424
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4428
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 852:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4433
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 853:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4437
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 854:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4441
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4448
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4452
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4456
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 858:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4460
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4465
		{
			yyVAL.updateExprs = nil
		}
	case 860:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4469
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4475
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4479
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4485
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4489
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4495
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4501
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4511
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4515
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4521
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4527
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4531
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4537
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 873:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4541
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4545
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 875:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4550
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 876:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4554
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4560
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4566
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4573
		{
			yyVAL.bytes = []byte("charset")
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4580
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4584
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4588
		{
			yyVAL.expr = &Default{}
		}
	case 885:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4593
		{
			yyVAL.byt = 0
		}
	case 886:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4595
		{
			yyVAL.byt = 1
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4598
		{
			yyVAL.empty = struct{}{}
		}
	case 888:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4600
		{
			yyVAL.empty = struct{}{}
		}
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4603
		{
			yyVAL.str = ""
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4605
		{
			yyVAL.str = IgnoreStr
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4609
		{
			yyVAL.empty = struct{}{}
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4611
		{
			yyVAL.empty = struct{}{}
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4613
		{
			yyVAL.empty = struct{}{}
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4615
		{
			yyVAL.empty = struct{}{}
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4617
		{
			yyVAL.empty = struct{}{}
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4619
		{
			yyVAL.empty = struct{}{}
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4621
		{
			yyVAL.empty = struct{}{}
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4623
		{
			yyVAL.empty = struct{}{}
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4625
		{
			yyVAL.empty = struct{}{}
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4627
		{
			yyVAL.empty = struct{}{}
		}
	case 901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4630
		{
			yyVAL.empty = struct{}{}
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4632
		{
			yyVAL.empty = struct{}{}
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4634
		{
			yyVAL.empty = struct{}{}
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4638
		{
			yyVAL.empty = struct{}{}
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4640
		{
			yyVAL.empty = struct{}{}
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4644
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4648
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4655
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4661
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4665
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4670
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4677
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4683
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4687
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4691
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 918:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4697
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4701
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4705
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 921:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4711
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4715
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 923:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4722
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4729
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4733
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4740
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4746
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 928:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4750
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5066
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5075
		{
			decNesting(yylex)
		}
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:5080
		{
			forceEOF(yylex)
		}
	case 1220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:5085
		{
			forceEOF(yylex)
		}
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5089
		{
			forceEOF(yylex)
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5093
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
