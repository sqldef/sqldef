// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const LIKE_OP = 57440
const NOT_LIKE_OP = 57441
const ILIKE_OP = 57442
const NOT_ILIKE_OP = 57443
const SHIFT_LEFT = 57444
const SHIFT_RIGHT = 57445
const DIV = 57446
const MOD = 57447
const UNARY = 57448
const COLLATE = 57449
const BINARY = 57450
const UNDERSCORE_BINARY = 57451
const INTERVAL = 57452
const JSON_EXTRACT_OP = 57453
const JSON_UNQUOTE_EXTRACT_OP = 57454
const CREATE = 57455
const ALTER = 57456
const DROP = 57457
const RENAME = 57458
const ANALYZE = 57459
const ADD = 57460
const SCHEMA = 57461
const TABLE = 57462
const INDEX = 57463
const MATERIALIZED = 57464
const VIEW = 57465
const TO = 57466
const IGNORE = 57467
const IF = 57468
const PRIMARY = 57469
const COLUMN = 57470
const CONSTRAINT = 57471
const REFERENCES = 57472
const SPATIAL = 57473
const FULLTEXT = 57474
const FOREIGN = 57475
const KEY_BLOCK_SIZE = 57476
const POLICY = 57477
const WHILE = 57478
const UNIQUE = 57479
const KEY = 57480
const SHOW = 57481
const DESCRIBE = 57482
const EXPLAIN = 57483
const DATE = 57484
const ESCAPE = 57485
const REPAIR = 57486
const OPTIMIZE = 57487
const TRUNCATE = 57488
const EXEC = 57489
const EXECUTE = 57490
const CONNECT = 57491
const USAGE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const TYPE = 57500
const RETURN = 57501
const STATUS = 57502
const VARIABLES = 57503
const RESTRICT = 57504
const CASCADE = 57505
const NO = 57506
const ACTION = 57507
const PERMISSIVE = 57508
const RESTRICTIVE = 57509
const PUBLIC = 57510
const CURRENT_USER = 57511
const SESSION_USER = 57512
const PAD_INDEX = 57513
const FILLFACTOR = 57514
const IGNORE_DUP_KEY = 57515
const STATISTICS_NORECOMPUTE = 57516
const STATISTICS_INCREMENTAL = 57517
const ALLOW_ROW_LOCKS = 57518
const ALLOW_PAGE_LOCKS = 57519
const DISTANCE = 57520
const M = 57521
const EUCLIDEAN = 57522
const COSINE = 57523
const BEFORE = 57524
const AFTER = 57525
const EACH = 57526
const ROW = 57527
const SCROLL = 57528
const CURSOR = 57529
const OPEN = 57530
const CLOSE = 57531
const FETCH = 57532
const PRIOR = 57533
const FIRST = 57534
const LAST = 57535
const DEALLOCATE = 57536
const INSTEAD = 57537
const OF = 57538
const OUTPUT = 57539
const DEFERRABLE = 57540
const INITIALLY = 57541
const IMMEDIATE = 57542
const DEFERRED = 57543
const CONCURRENTLY = 57544
const SQL = 57545
const SECURITY = 57546
const EXTENSION = 57547
const GRANT = 57548
const REVOKE = 57549
const PRIVILEGES = 57550
const EXCLUDE = 57551
const GIST = 57552
const OPTION = 57553
const BEGIN = 57554
const START = 57555
const TRANSACTION = 57556
const COMMIT = 57557
const ROLLBACK = 57558
const BIT = 57559
const TINYINT = 57560
const SMALLINT = 57561
const SMALLSERIAL = 57562
const MEDIUMINT = 57563
const INT = 57564
const INTEGER = 57565
const SERIAL = 57566
const BIGINT = 57567
const BIGSERIAL = 57568
const INTNUM = 57569
const REAL = 57570
const DOUBLE = 57571
const PRECISION = 57572
const FLOAT_TYPE = 57573
const DECIMAL = 57574
const NUMERIC = 57575
const SMALLMONEY = 57576
const MONEY = 57577
const TIME = 57578
const TIMESTAMP = 57579
const TIMESTAMPTZ = 57580
const TIMETZ = 57581
const DATETIME = 57582
const YEAR = 57583
const DATETIMEOFFSET = 57584
const DATETIME2 = 57585
const SMALLDATETIME = 57586
const CHAR = 57587
const VARCHAR = 57588
const VARYING = 57589
const BOOL = 57590
const CHARACTER = 57591
const VARBINARY = 57592
const NCHAR = 57593
const NVARCHAR = 57594
const NTEXT = 57595
const UUID = 57596
const TEXT = 57597
const TINYTEXT = 57598
const MEDIUMTEXT = 57599
const LONGTEXT = 57600
const CITEXT = 57601
const BLOB = 57602
const TINYBLOB = 57603
const MEDIUMBLOB = 57604
const LONGBLOB = 57605
const JSON = 57606
const JSONB = 57607
const ENUM = 57608
const GEOMETRY = 57609
const POINT = 57610
const LINESTRING = 57611
const POLYGON = 57612
const GEOMETRYCOLLECTION = 57613
const MULTIPOINT = 57614
const MULTILINESTRING = 57615
const MULTIPOLYGON = 57616
const VECTOR = 57617
const VARIADIC = 57618
const ARRAY = 57619
const NOW = 57620
const GETDATE = 57621
const BPCHAR = 57622
const TEXT_PATTERN_OPS = 57623
const NULLX = 57624
const AUTO_INCREMENT = 57625
const APPROXNUM = 57626
const SIGNED = 57627
const UNSIGNED = 57628
const ZEROFILL = 57629
const ZONE = 57630
const AUTOINCREMENT = 57631
const DATABASES = 57632
const TABLES = 57633
const VSCHEMA_TABLES = 57634
const EXTENDED = 57635
const FULL = 57636
const PROCESSLIST = 57637
const NAMES = 57638
const CHARSET = 57639
const GLOBAL = 57640
const SESSION = 57641
const ISOLATION = 57642
const LEVEL = 57643
const READ = 57644
const WRITE = 57645
const ONLY = 57646
const REPEATABLE = 57647
const COMMITTED = 57648
const UNCOMMITTED = 57649
const SERIALIZABLE = 57650
const NEW = 57651
const CONCAT_NULL_YIELDS_NULL = 57652
const CURSOR_CLOSE_ON_COMMIT = 57653
const QUOTED_IDENTIFIER = 57654
const ARITHABORT = 57655
const FMTONLY = 57656
const NOCOUNT = 57657
const NOEXEC = 57658
const NUMERIC_ROUNDABORT = 57659
const ANSI_DEFAULTS = 57660
const ANSI_NULL_DFLT_OFF = 57661
const ANSI_NULL_DFLT_ON = 57662
const ANSI_NULLS = 57663
const ANSI_PADDING = 57664
const ANSI_WARNINGS = 57665
const FORCEPLAN = 57666
const SHOWPLAN_ALL = 57667
const SHOWPLAN_TEXT = 57668
const SHOWPLAN_XML = 57669
const IMPLICIT_TRANSACTIONS = 57670
const REMOTE_PROC_TRANSACTIONS = 57671
const XACT_ABORT = 57672
const CURRENT_TIMESTAMP = 57673
const DATABASE = 57674
const CURRENT_DATE = 57675
const CURRENT_TIME = 57676
const LOCALTIME = 57677
const LOCALTIMESTAMP = 57678
const UTC_DATE = 57679
const UTC_TIME = 57680
const UTC_TIMESTAMP = 57681
const REPLACE = 57682
const CONVERT = 57683
const CAST = 57684
const SUBSTR = 57685
const SUBSTRING = 57686
const GROUP_CONCAT = 57687
const SEPARATOR = 57688
const INHERIT = 57689
const LEAD = 57690
const LAG = 57691
const MATCH = 57692
const AGAINST = 57693
const BOOLEAN = 57694
const LANGUAGE = 57695
const WITH = 57696
const WITHOUT = 57697
const PARSER = 57698
const QUERY = 57699
const EXPANSION = 57700
const UNUSED = 57701
const VIRTUAL = 57702
const STORED = 57703
const GENERATED = 57704
const ALWAYS = 57705
const IDENTITY = 57706
const SEQUENCE = 57707
const INCREMENT = 57708
const MINVALUE = 57709
const CACHE = 57710
const CYCLE = 57711
const OWNED = 57712
const NONE = 57713
const CLUSTERED = 57714
const NONCLUSTERED = 57715
const REPLICATION = 57716
const COLUMNSTORE = 57717
const INCLUDE = 57718
const HOLDLOCK = 57719
const NOLOCK = 57720
const NOWAIT = 57721
const PAGLOCK = 57722
const ROWLOCK = 57723
const TABLOCK = 57724
const UPDLOCK = 57725
const READUNCOMMITTED = 57726
const DEFINER = 57727
const INVOKER = 57728
const TYPECAST = 57729
const CHECK = 57730
const OVER = 57731

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"LIKE_OP",
	"NOT_LIKE_OP",
	"ILIKE_OP",
	"NOT_ILIKE_OP",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"CONNECT",
	"USAGE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"EXTENSION",
	"GRANT",
	"REVOKE",
	"PRIVILEGES",
	"EXCLUDE",
	"GIST",
	"OPTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TIMETZ",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 8,
	138, 498,
	-2, 208,
	-1, 80,
	127, 922,
	-2, 916,
	-1, 81,
	127, 923,
	-2, 828,
	-1, 336,
	127, 926,
	-2, 920,
	-1, 337,
	127, 923,
	-2, 921,
	-1, 504,
	61, 447,
	-2, 444,
	-1, 566,
	127, 924,
	-2, 833,
	-1, 690,
	59, 376,
	60, 376,
	-2, 1033,
	-1, 704,
	86, 816,
	-2, 977,
	-1, 707,
	298, 1088,
	-2, 761,
	-1, 708,
	298, 1087,
	-2, 761,
	-1, 709,
	298, 1086,
	-2, 761,
	-1, 710,
	298, 1038,
	-2, 761,
	-1, 711,
	298, 1039,
	-2, 761,
	-1, 712,
	298, 986,
	-2, 761,
	-1, 713,
	298, 987,
	-2, 761,
	-1, 886,
	60, 450,
	-2, 857,
	-1, 890,
	5, 78,
	-2, 16,
	-1, 893,
	5, 78,
	-2, 18,
	-1, 1237,
	216, 927,
	-2, 250,
	-1, 1262,
	5, 79,
	-2, 679,
	-1, 1386,
	60, 148,
	-2, 264,
	-1, 1389,
	60, 148,
	-2, 264,
	-1, 1504,
	5, 78,
	-2, 17,
	-1, 1520,
	204, 105,
	-2, 596,
	-1, 1561,
	60, 148,
	-2, 231,
	-1, 1708,
	90, 918,
	-2, 899,
	-1, 1743,
	216, 927,
	-2, 251,
	-1, 1744,
	216, 927,
	-2, 252,
	-1, 1794,
	57, 92,
	59, 92,
	-2, 94,
	-1, 1970,
	5, 78,
	-2, 868,
	-1, 1995,
	5, 78,
	-2, 101,
	-1, 2032,
	59, 1069,
	60, 1069,
	-2, 526,
	-1, 2069,
	5, 79,
	-2, 869,
	-1, 2101,
	5, 78,
	-2, 871,
	-1, 2122,
	5, 79,
	-2, 872,
}

const yyPrivate = 57344

const yyLast = 14360

var yyAct = [...]int16{
	568, 545, 1898, 2078, 2025, 1916, 1988, 580, 2031, 807,
	492, 50, 50, 2026, 1263, 900, 1815, 57, 1362, 1956,
	2022, 1948, 1217, 76, 77, 78, 1899, 1993, 93, 1347,
	1829, 1670, 947, 1980, 1866, 1364, 1351, 1828, 805, 1048,
	1702, 1350, 714, 1817, 1803, 1813, 1365, 1402, 1678, 1892,
	1687, 755, 1696, 1524, 1344, 1688, 1179, 1699, 121, 121,
	121, 121, 121, 115, 1348, 479, 1230, 1126, 1693, 1521,
	1461, 189, 192, 193, 34, 1153, 730, 625, 1214, 1456,
	950, 1720, 1335, 1560, 842, 884, 1026, 496, 1588, 114,
	332, 209, 1469, 85, 1113, 1071, 1253, 1063, 1052, 1116,
	998, 1079, 1220, 1281, 323, 50, 941, 287, 499, 535,
	1059, 122, 117, 232, 57, 1579, 1164, 543, 1169, 917,
	688, 1390, 731, 198, 689, 96, 308, 324, 552, 253,
	227, 236, 1288, 1455, 1454, 613, 272, 1258, 56, 1257,
	831, 14, 1470, 268, 916, 849, 505, 1781, 185, 186,
	187, 188, 51, 98, 775, 503, 812, 785, 1379, 1368,
	1367, 785, 319, 320, 1336, 213, 956, 739, 506, 507,
	1369, 215, 778, 779, 780, 781, 782, 775, 742, 224,
	785, 983, 812, 1370, 1379, 1368, 1367, 721, 99, 100,
	531, 2113, 314, 1614, 1615, 2120, 1369, 722, 2017, 194,
	1961, 196, 1238, 1239, 1407, 1393, 333, 121, 1165, 1370,
	637, 638, 229, 1491, 1989, 208, 336, 2096, 472, 776,
	777, 778, 779, 780, 781, 782, 775, 333, 1667, 785,
	2016, 1406, 504, 756, 1435, 230, 1753, 1657, 1784, 101,
	500, 2051, 509, 289, 290, 291, 292, 828, 1960, 250,
	271, 1999, 2052, 2053, 1998, 521, 749, 2000, 1830, 313,
	1831, 885, 1926, 317, 1675, 321, 322, 1927, 1928, 724,
	469, 1134, 329, 1133, 303, 615, 616, 473, 274, 636,
	633, 581, 757, 288, 1256, 478, 480, 280, 876, 482,
	483, 306, 485, 1363, 277, 875, 548, 1572, 471, 1303,
	51, 1485, 663, 1375, 1301, 1936, 759, 758, 746, 310,
	748, 747, 1508, 645, 1381, 1382, 1296, 195, 1162, 1363,
	1398, 948, 190, 716, 760, 109, 1377, 51, 106, 1375,
	331, 659, 949, 527, 12, 1199, 1198, 657, 328, 247,
	1381, 1382, 760, 1823, 812, 758, 1379, 1368, 1367, 1442,
	525, 490, 1377, 1937, 1507, 1371, 1372, 1374, 1369, 1844,
	1698, 1373, 760, 1343, 1203, 73, 1215, 629, 630, 631,
	632, 1370, 1550, 1893, 716, 1589, 1590, 966, 199, 1512,
	644, 1371, 1372, 1374, 648, 649, 618, 1373, 2098, 620,
	724, 623, 624, 8, 9, 51, 1571, 92, 765, 896,
	897, 772, 506, 507, 958, 1512, 957, 787, 788, 789,
	790, 791, 792, 793, 1176, 766, 771, 764, 794, 795,
	796, 797, 767, 768, 769, 770, 774, 773, 783, 784,
	776, 777, 778, 779, 780, 781, 782, 775, 786, 276,
	785, 761, 786, 278, 265, 74, 283, 911, 723, 285,
	268, 269, 1752, 658, 1754, 307, 515, 715, 524, 761,
	1594, 786, 759, 758, 912, 523, 295, 296, 297, 298,
	299, 300, 301, 516, 1165, 256, 664, 95, 57, 761,
	760, 1363, 1287, 506, 507, 191, 10, 11, 682, 333,
	263, 1375, 251, 542, 108, 786, 696, 105, 472, 51,
	252, 919, 1381, 1382, 984, 518, 288, 1380, 715, 501,
	786, 333, 732, 720, 1377, 665, 1853, 744, 1608, 741,
	1166, 774, 773, 783, 784, 776, 777, 778, 779, 780,
	781, 782, 775, 1380, 937, 785, 1394, 1395, 1697, 1745,
	1551, 1552, 1553, 1371, 1372, 1374, 1407, 228, 514, 1373,
	676, 249, 914, 679, 530, 970, 248, 1510, 200, 201,
	1396, 809, 35, 259, 1959, 254, 264, 1512, 250, 942,
	943, 202, 1254, 261, 260, 635, 639, 2114, 683, 110,
	642, 502, 2018, 1674, 512, 513, 953, 111, 1049, 812,
	1889, 670, 1589, 1590, 1171, 1170, 619, 761, 971, 667,
	2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 97, 671,
	94, 1645, 966, 685, 91, 675, 1146, 922, 1282, 677,
	686, 759, 758, 920, 651, 249, 75, 740, 1992, 1991,
	1990, 759, 758, 966, 72, 729, 71, 70, 484, 760,
	966, 509, 250, 481, 87, 223, 84, 696, 725, 760,
	221, 743, 804, 220, 51, 217, 1284, 102, 333, 759,
	758, 333, 89, 908, 738, 1917, 1919, 57, 673, 809,
	913, 809, 759, 758, 477, 918, 2072, 760, 918, 918,
	870, 918, 813, 814, 1952, 333, 1833, 1640, 1285, 890,
	760, 893, 946, 826, 1876, 1380, 862, 674, 864, 928,
	1616, 867, 868, 774, 773, 783, 784, 776, 777, 778,
	779, 780, 781, 782, 775, 830, 887, 785, 1632, 257,
	1747, 786, 829, 660, 898, 258, 487, 863, 696, 275,
	281, 207, 951, 952, 954, 64, 508, 205, 627, 626,
	1401, 756, 1763, 871, 921, 2064, 851, 852, 853, 854,
	855, 856, 333, 1918, 1630, 1444, 761, 687, 65, 1631,
	66, 67, 927, 903, 486, 2001, 761, 981, 38, 756,
	1978, 1832, 999, 1421, 759, 758, 1420, 892, 1419, 759,
	758, 1418, 901, 904, 899, 905, 1417, 915, 909, 1294,
	757, 1293, 760, 1416, 761, 1415, 1414, 760, 266, 955,
	267, 944, 945, 1040, 1039, 1413, 1412, 761, 1620, 930,
	69, 759, 758, 1311, 1056, 1056, 786, 1410, 757, 1006,
	809, 1622, 923, 924, 262, 926, 1058, 809, 1788, 760,
	333, 333, 974, 1004, 1005, 1003, 800, 1062, 809, 1789,
	336, 1117, 759, 758, 1320, 1040, 1118, 1047, 1493, 1205,
	1495, 1345, 1117, 1201, 851, 852, 853, 854, 855, 856,
	760, 284, 498, 214, 286, 212, 497, 759, 758, 959,
	1617, 211, 204, 218, 498, 1580, 901, 1202, 498, 1243,
	1244, 1245, 696, 1138, 1466, 760, 972, 1196, 68, 333,
	696, 498, 1234, 1751, 520, 1061, 1581, 617, 1034, 1035,
	1073, 1075, 1076, 1077, 1142, 1591, 759, 758, 1112, 761,
	809, 1161, 1233, 1580, 761, 1163, 1712, 617, 804, 982,
	1582, 1837, 509, 918, 760, 1124, 918, 1127, 1128, 1175,
	1144, 1054, 1057, 1001, 1581, 696, 1110, 1111, 759, 758,
	1773, 1129, 990, 992, 993, 622, 761, 333, 519, 621,
	991, 51, 1139, 1836, 1067, 1068, 760, 1578, 741, 617,
	1136, 1145, 333, 732, 696, 1877, 1135, 1137, 732, 1125,
	732, 1228, 1228, 986, 1231, 643, 641, 761, 640, 612,
	1130, 1027, 1132, 1028, 1573, 62, 63, 1411, 1384, 964,
	1805, 1808, 1809, 1810, 1806, 815, 1807, 1811, 786, 277,
	1981, 1982, 761, 51, 816, 1284, 935, 938, 939, 1156,
	509, 999, 51, 901, 210, 828, 1654, 828, 1174, 750,
	1131, 809, 907, 1618, 1619, 1621, 1623, 1624, 817, 816,
	681, 634, 799, 801, 802, 803, 808, 1242, 1200, 1211,
	1168, 761, 1194, 1204, 1216, 1173, 1195, 819, 819, 819,
	819, 819, 819, 819, 526, 1193, 509, 966, 509, 51,
	51, 1000, 827, 975, 977, 1283, 1206, 1167, 1408, 1267,
	1172, 1197, 1038, 761, 1229, 1283, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 1210, 844, 1049, 846,
	847, 848, 1219, 850, 850, 850, 850, 850, 850, 850,
	857, 858, 859, 860, 1249, 1207, 774, 773, 783, 784,
	776, 777, 778, 779, 780, 781, 782, 775, 1154, 966,
	785, 2108, 2107, 1154, 2106, 2008, 2093, 966, 1276, 2050,
	966, 1660, 2014, 966, 2071, 966, 2008, 2007, 934, 1941,
	1451, 1797, 696, 869, 891, 737, 891, 1231, 1800, 966,
	1559, 1143, 934, 1847, 1501, 333, 934, 1846, 1154, 1778,
	1446, 1386, 969, 1738, 934, 1736, 918, 1439, 1735, 774,
	773, 783, 784, 776, 777, 778, 779, 780, 781, 782,
	775, 1317, 736, 785, 1732, 1731, 1332, 1798, 735, 675,
	827, 1331, 834, 835, 836, 838, 839, 840, 734, 844,
	726, 850, 850, 850, 850, 850, 850, 850, 1328, 696,
	1329, 1300, 517, 1342, 1896, 1319, 675, 960, 1977, 51,
	560, 1304, 934, 1726, 1330, 1212, 827, 1337, 934, 1725,
	934, 1661, 934, 1601, 1404, 1277, 966, 1235, 1225, 1439,
	1438, 969, 1436, 1423, 1385, 934, 1433, 1425, 1221, 1223,
	1224, 1226, 1227, 1222, 969, 1432, 2023, 819, 1002, 1977,
	819, 819, 819, 819, 819, 819, 819, 819, 819, 819,
	819, 819, 819, 819, 819, 819, 819, 819, 819, 1346,
	1443, 934, 1339, 1283, 1399, 1397, 333, 809, 1154, 1338,
	1140, 1400, 1045, 966, 812, 891, 336, 812, 1154, 1237,
	1000, 877, 808, 1422, 934, 1213, 1463, 1464, 1158, 1157,
	969, 968, 1218, 808, 1867, 1441, 51, 569, 1055, 567,
	571, 572, 573, 574, 1968, 819, 2100, 570, 575, 1969,
	934, 933, 880, 879, 696, 696, 783, 784, 776, 777,
	778, 779, 780, 781, 782, 775, 509, 1450, 785, 509,
	866, 873, 874, 873, 872, 113, 112, 1492, 1499, 1800,
	809, 1502, 1977, 1867, 865, 1506, 1465, 1439, 1383, 1155,
	1520, 656, 1546, 1547, 1548, 1468, 1473, 1555, 1315, 1513,
	1504, 1482, 1476, 1477, 1475, 891, 1471, 1561, 1386, 1386,
	1561, 1386, 1386, 696, 696, 1478, 1313, 1474, 1298, 1049,
	1299, 786, 1514, 656, 1574, 1302, 1484, 861, 1577, 578,
	1067, 1277, 1511, 1486, 2067, 1496, 1799, 1305, 1306, 1497,
	655, 1307, 1308, 656, 1309, 1310, 1314, 107, 1231, 696,
	104, 812, 732, 83, 86, 103, 1045, 1800, 104, 1439,
	1609, 1925, 1800, 1277, 1312, 1825, 1694, 1805, 1808, 1809,
	1810, 1806, 1558, 1807, 1811, 1604, 1595, 1633, 1597, 1607,
	961, 962, 1557, 1576, 786, 1516, 1517, 1518, 1232, 1522,
	1429, 1562, 1563, 1564, 1565, 1566, 1613, 1277, 1635, 187,
	1295, 33, 1606, 509, 1987, 1154, 934, 985, 878, 1246,
	1247, 1248, 882, 881, 1599, 2045, 808, 1002, 819, 819,
	819, 333, 510, 511, 2043, 1596, 86, 1598, 1603, 1602,
	1593, 2005, 86, 1981, 1982, 662, 1663, 1858, 1729, 1659,
	86, 225, 277, 333, 1570, 1569, 1500, 1431, 1428, 1676,
	1583, 1584, 1585, 1586, 1587, 1427, 1392, 1669, 26, 28,
	1334, 21, 1673, 1638, 1268, 1333, 80, 965, 84, 309,
	1713, 1680, 1679, 1241, 22, 1208, 31, 1681, 1160, 1141,
	979, 1286, 1561, 978, 1686, 1721, 1721, 976, 973, 1634,
	696, 696, 967, 1671, 819, 1672, 23, 24, 1511, 963,
	889, 888, 751, 1685, 1664, 727, 480, 661, 646, 304,
	532, 1683, 528, 495, 311, 312, 1498, 302, 294, 293,
	86, 282, 16, 2023, 86, 1403, 86, 86, 1984, 883,
	562, 647, 316, 86, 315, 338, 222, 338, 86, 1718,
	219, 203, 197, 54, 27, 901, 86, 86, 1434, 786,
	86, 86, 1986, 86, 1723, 1910, 1907, 64, 1722, 1711,
	1911, 333, 1912, 1908, 1809, 1810, 1906, 1705, 1909, 1740,
	1272, 1273, 2063, 1739, 1567, 1568, 561, 2015, 1865, 1756,
	65, 845, 66, 67, 494, 1457, 1838, 628, 754, 1746,
	1748, 1749, 1750, 2065, 86, 476, 1840, 1741, 475, 1764,
	1458, 942, 943, 1775, 1733, 474, 1734, 1779, 330, 1742,
	1600, 1286, 1743, 1744, 19, 1822, 1698, 121, 1341, 1269,
	753, 333, 1270, 1114, 1759, 1761, 654, 1787, 1835, 652,
	1777, 809, 69, 1780, 1790, 1760, 693, 650, 206, 1922,
	1724, 86, 1152, 1119, 895, 86, 86, 719, 1264, 2060,
	696, 1849, 1868, 1755, 1511, 1783, 1265, 1049, 1511, 1672,
	819, 819, 819, 2059, 1812, 2011, 1218, 1671, 819, 819,
	1795, 1841, 1793, 1794, 1503, 36, 1786, 1717, 1826, 1716,
	1824, 1856, 891, 1715, 1821, 905, 1839, 52, 1148, 1845,
	1149, 1150, 1151, 1857, 1714, 925, 1851, 1852, 1843, 25,
	1612, 1611, 819, 1147, 1671, 1855, 1859, 1860, 680, 1850,
	68, 29, 30, 678, 32, 718, 717, 1861, 1302, 1862,
	1040, 1900, 1426, 82, 2115, 1629, 819, 819, 819, 819,
	325, 326, 327, 1424, 522, 1691, 1051, 1053, 1796, 910,
	1159, 13, 1878, 1, 1885, 1705, 333, 1523, 18, 17,
	1681, 1727, 1728, 809, 333, 891, 1888, 1886, 1955, 318,
	1069, 1231, 1897, 564, 1895, 546, 2077, 1883, 1605, 1695,
	1519, 1901, 1511, 1047, 1904, 1783, 1913, 1902, 1903, 333,
	1905, 1894, 1921, 1549, 1592, 1924, 1923, 886, 611, 255,
	1556, 533, 1445, 529, 20, 1666, 1505, 894, 1938, 653,
	1575, 1177, 936, 237, 1943, 1944, 226, 62, 63, 1953,
	929, 86, 1950, 1951, 86, 488, 55, 338, 1947, 15,
	1409, 238, 1946, 235, 234, 697, 1783, 1934, 233, 231,
	270, 809, 1933, 1954, 1662, 614, 273, 1665, 1973, 745,
	1975, 1994, 1945, 279, 305, 120, 118, 119, 1962, 116,
	123, 1970, 1029, 1976, 1700, 1834, 90, 668, 1985, 1280,
	798, 809, 1974, 1997, 1707, 819, 2030, 1460, 693, 1672,
	1705, 2058, 2010, 333, 1318, 1883, 1996, 1115, 1932, 547,
	989, 1995, 563, 1967, 1639, 763, 544, 1690, 2002, 1040,
	1900, 2024, 2033, 1994, 1791, 1804, 1802, 2027, 1040, 1900,
	2006, 1801, 2034, 1949, 1983, 1655, 1979, 2003, 2004, 1691,
	809, 1848, 1689, 906, 2019, 2013, 1656, 2038, 1875, 2039,
	2036, 1671, 1680, 1679, 2040, 1271, 333, 1681, 1681, 333,
	2029, 1637, 1692, 2037, 2020, 2021, 1737, 1376, 1366, 812,
	1050, 1379, 1368, 1367, 1274, 7, 1378, 2056, 1361, 6,
	5, 4, 3, 1369, 2062, 1360, 1359, 1358, 1357, 1355,
	1356, 1353, 1354, 1352, 333, 2066, 1370, 333, 333, 333,
	1266, 2091, 2074, 810, 2, 0, 697, 86, 0, 2076,
	0, 0, 2087, 2088, 2089, 86, 2090, 1783, 1730, 0,
	2095, 0, 2033, 2104, 1774, 2027, 1776, 2009, 0, 2075,
	2103, 2099, 2034, 0, 1511, 86, 0, 0, 0, 809,
	2105, 0, 0, 1691, 0, 0, 2112, 1691, 1691, 1691,
	1691, 1691, 886, 0, 0, 2116, 695, 0, 2027, 2101,
	693, 1691, 2118, 0, 0, 0, 1040, 1900, 2121, 2119,
	1883, 809, 0, 0, 0, 0, 0, 0, 0, 1672,
	1949, 0, 0, 2057, 0, 0, 0, 697, 0, 819,
	0, 2117, 819, 0, 819, 0, 819, 966, 819, 819,
	0, 1854, 694, 0, 0, 693, 1363, 0, 0, 0,
	0, 0, 0, 0, 1691, 0, 1375, 0, 901, 0,
	0, 901, 901, 901, 0, 0, 0, 1381, 1382, 0,
	0, 0, 0, 0, 693, 0, 1814, 0, 0, 1377,
	1879, 0, 0, 1691, 1880, 0, 774, 773, 783, 784,
	776, 777, 778, 779, 780, 781, 782, 775, 0, 0,
	785, 0, 83, 0, 0, 81, 0, 0, 1371, 1372,
	1374, 1652, 966, 0, 1373, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 1066, 0, 338,
	88, 0, 1066, 1066, 1066, 1066, 0, 0, 1066, 1066,
	1066, 87, 0, 84, 83, 0, 0, 695, 0, 0,
	0, 1939, 1940, 0, 0, 0, 0, 1066, 1066, 1066,
	1066, 774, 773, 783, 784, 776, 777, 778, 779, 780,
	781, 782, 775, 0, 0, 785, 0, 0, 0, 0,
	1692, 697, 0, 86, 1692, 1692, 1692, 1692, 1692, 697,
	0, 0, 86, 694, 0, 0, 0, 0, 1814, 0,
	1920, 0, 88, 0, 0, 0, 0, 0, 88, 812,
	0, 1379, 1368, 1367, 0, 0, 88, 88, 0, 58,
	0, 0, 0, 1369, 0, 0, 0, 0, 695, 0,
	0, 0, 64, 0, 697, 0, 1370, 0, 0, 0,
	0, 1041, 1042, 1043, 1044, 1046, 0, 0, 0, 0,
	0, 1692, 886, 0, 0, 65, 0, 66, 67, 0,
	1380, 0, 0, 697, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 694, 0, 1971, 1972, 0, 0,
	1692, 0, 0, 0, 1120, 1121, 1122, 0, 1123, 0,
	812, 1935, 1379, 1368, 1367, 0, 88, 0, 0, 0,
	88, 0, 88, 88, 1369, 0, 891, 69, 0, 88,
	2055, 337, 0, 88, 88, 0, 0, 1370, 0, 693,
	0, 0, 88, 88, 0, 0, 88, 88, 0, 88,
	0, 0, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1648, 966, 0, 0, 1363, 0, 0, 0,
	0, 0, 0, 2028, 0, 891, 1375, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 0, 1381, 1382, 0,
	88, 0, 1891, 0, 2046, 2047, 2048, 0, 0, 1377,
	0, 786, 695, 0, 0, 68, 0, 0, 0, 0,
	695, 0, 774, 773, 783, 784, 776, 777, 778, 779,
	780, 781, 782, 775, 0, 0, 785, 0, 1371, 1372,
	1374, 0, 0, 1066, 1373, 0, 0, 88, 1236, 1323,
	0, 88, 88, 0, 0, 0, 1650, 1363, 694, 0,
	61, 0, 0, 1074, 0, 695, 694, 1375, 0, 0,
	0, 697, 0, 0, 886, 693, 0, 0, 1381, 1382,
	0, 2028, 0, 0, 2102, 51, 786, 60, 0, 0,
	1377, 0, 0, 0, 695, 0, 0, 966, 1863, 0,
	0, 0, 0, 0, 0, 0, 1259, 1260, 0, 0,
	0, 694, 62, 63, 2028, 1262, 891, 0, 0, 1371,
	1372, 1374, 0, 0, 0, 1373, 0, 1275, 0, 1278,
	1279, 0, 0, 693, 693, 0, 0, 0, 697, 0,
	694, 1289, 0, 1290, 1291, 1292, 774, 773, 783, 784,
	776, 777, 778, 779, 780, 781, 782, 775, 0, 0,
	785, 0, 249, 0, 0, 0, 0, 0, 240, 693,
	239, 0, 244, 245, 248, 0, 64, 0, 241, 250,
	1316, 0, 0, 0, 0, 0, 1322, 0, 0, 0,
	1380, 0, 1324, 1325, 0, 1326, 1327, 0, 0, 65,
	0, 66, 67, 0, 0, 0, 0, 1066, 0, 0,
	0, 0, 1340, 58, 0, 338, 1066, 88, 0, 0,
	88, 0, 0, 88, 493, 0, 0, 0, 0, 0,
	0, 337, 0, 0, 0, 0, 0, 0, 0, 812,
	1890, 1379, 1368, 1367, 0, 0, 493, 0, 0, 0,
	243, 69, 0, 1369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 697, 697, 0, 1370, 0, 0, 0,
	765, 1380, 695, 772, 0, 0, 0, 1430, 0, 787,
	788, 789, 790, 791, 792, 793, 0, 766, 771, 764,
	794, 795, 796, 797, 767, 768, 769, 770, 774, 773,
	783, 784, 776, 777, 778, 779, 780, 781, 782, 775,
	693, 693, 785, 86, 0, 0, 246, 786, 694, 0,
	1180, 1890, 697, 697, 1192, 0, 0, 0, 0, 68,
	0, 0, 534, 0, 1182, 0, 0, 0, 0, 695,
	0, 0, 59, 0, 1467, 0, 774, 773, 783, 784,
	776, 777, 778, 779, 780, 781, 782, 775, 697, 0,
	785, 0, 0, 0, 0, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1363, 1818, 0, 0,
	0, 0, 337, 88, 0, 694, 1375, 0, 0, 0,
	0, 88, 0, 493, 0, 0, 493, 1381, 1382, 0,
	0, 0, 58, 0, 0, 0, 61, 0, 0, 1377,
	0, 88, 0, 87, 1181, 1820, 0, 0, 0, 0,
	493, 0, 0, 0, 0, 0, 62, 63, 0, 242,
	0, 51, 0, 60, 0, 0, 0, 0, 1371, 1372,
	1374, 786, 0, 0, 1373, 0, 0, 86, 86, 0,
	0, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	0, 0, 1512, 337, 695, 695, 0, 0, 0, 0,
	693, 0, 0, 0, 0, 0, 0, 0, 0, 812,
	0, 1379, 1368, 1367, 0, 0, 39, 493, 40, 41,
	42, 0, 0, 1369, 0, 0, 0, 0, 0, 697,
	697, 53, 0, 0, 64, 0, 1370, 0, 1610, 0,
	694, 694, 0, 0, 0, 1625, 1626, 1627, 0, 0,
	0, 1816, 64, 695, 695, 0, 0, 65, 0, 66,
	67, 0, 1636, 0, 0, 0, 0, 0, 86, 0,
	0, 51, 1641, 0, 0, 65, 1642, 66, 67, 0,
	1643, 1644, 0, 0, 1646, 1647, 1649, 1651, 1653, 695,
	0, 0, 0, 0, 0, 337, 493, 1066, 0, 694,
	694, 0, 728, 0, 0, 733, 0, 0, 0, 69,
	812, 0, 1379, 1368, 1367, 0, 0, 0, 0, 0,
	1380, 0, 752, 786, 1369, 0, 0, 69, 0, 0,
	762, 0, 0, 0, 0, 694, 811, 1370, 0, 0,
	46, 0, 0, 86, 86, 0, 1363, 337, 0, 88,
	0, 0, 86, 1819, 493, 337, 1375, 44, 88, 0,
	0, 0, 0, 0, 1178, 0, 0, 1381, 1382, 0,
	1884, 786, 0, 43, 0, 48, 47, 49, 0, 1377,
	0, 0, 0, 0, 45, 0, 843, 68, 0, 697,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 812,
	337, 1379, 1368, 1367, 0, 68, 0, 0, 1371, 1372,
	1374, 0, 493, 1369, 1373, 1864, 0, 0, 59, 0,
	0, 0, 0, 51, 0, 60, 1370, 493, 0, 337,
	695, 695, 1512, 0, 0, 0, 0, 1762, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1363, 0, 0,
	0, 0, 86, 0, 1772, 0, 86, 1375, 0, 83,
	86, 86, 86, 86, 86, 0, 0, 0, 1381, 1382,
	0, 0, 1914, 0, 86, 0, 694, 694, 1819, 80,
	1377, 84, 0, 0, 62, 63, 940, 773, 783, 784,
	776, 777, 778, 779, 780, 781, 782, 775, 843, 0,
	785, 0, 62, 63, 0, 0, 0, 666, 669, 1371,
	1372, 1374, 248, 86, 64, 1373, 672, 0, 0, 0,
	1842, 0, 0, 0, 61, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 1363, 65, 0, 66,
	67, 0, 0, 0, 980, 0, 1375, 1391, 0, 51,
	0, 1389, 987, 988, 0, 0, 86, 1381, 1382, 0,
	1380, 79, 1869, 0, 1870, 1871, 1872, 1873, 1874, 1377,
	64, 0, 0, 0, 0, 0, 0, 0, 1388, 0,
	39, 1818, 40, 41, 42, 88, 0, 0, 243, 69,
	695, 0, 0, 65, 0, 66, 67, 0, 1371, 1372,
	1374, 1387, 811, 0, 1373, 0, 0, 337, 0, 0,
	1510, 1915, 0, 811, 0, 0, 0, 87, 0, 1820,
	493, 1064, 1349, 0, 0, 0, 58, 0, 83, 0,
	1078, 1109, 0, 0, 0, 51, 694, 83, 0, 806,
	64, 0, 0, 0, 0, 69, 0, 1942, 0, 0,
	818, 820, 821, 822, 823, 824, 825, 1255, 0, 0,
	0, 1380, 0, 65, 0, 66, 67, 68, 0, 0,
	0, 0, 0, 1958, 337, 0, 1684, 0, 0, 0,
	59, 0, 0, 0, 0, 0, 774, 773, 783, 784,
	776, 777, 778, 779, 780, 781, 782, 775, 0, 0,
	785, 0, 0, 0, 46, 0, 0, 0, 64, 1819,
	0, 1782, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 44, 0, 68, 0, 0, 87, 0, 84, 0,
	0, 65, 0, 66, 67, 0, 82, 43, 0, 48,
	47, 49, 0, 0, 0, 0, 0, 0, 45, 0,
	1380, 337, 0, 2012, 1209, 0, 733, 0, 0, 0,
	0, 733, 0, 733, 62, 63, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 0, 1240, 1792, 0,
	0, 786, 0, 69, 0, 0, 0, 0, 0, 0,
	0, 2049, 0, 68, 0, 0, 811, 0, 0, 337,
	337, 0, 509, 0, 0, 87, 59, 84, 0, 0,
	87, 2061, 84, 0, 0, 0, 0, 64, 1180, 0,
	62, 63, 1192, 0, 0, 0, 2068, 2069, 2070, 0,
	0, 0, 1182, 0, 2073, 0, 0, 0, 0, 1261,
	65, 0, 66, 67, 0, 0, 0, 0, 0, 88,
	0, 0, 58, 58, 58, 58, 58, 58, 337, 337,
	994, 68, 0, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 0, 0, 0, 2109, 2110, 2111, 0, 0,
	62, 63, 69, 0, 337, 0, 64, 0, 0, 0,
	0, 64, 0, 0, 0, 806, 0, 0, 0, 0,
	0, 1321, 1181, 0, 0, 2122, 806, 0, 0, 65,
	0, 66, 67, 0, 65, 0, 66, 67, 1072, 0,
	0, 0, 0, 0, 87, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 84, 1183,
	1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 62, 63,
	0, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	68, 69, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 786, 0, 88, 88, 0, 0, 0, 493, 0,
	0, 0, 0, 0, 593, 0, 594, 0, 0, 0,
	0, 0, 0, 0, 584, 585, 0, 0, 0, 0,
	0, 0, 1437, 87, 509, 1820, 0, 80, 569, 566,
	567, 571, 572, 573, 574, 64, 1440, 58, 570, 575,
	576, 577, 0, 0, 0, 337, 337, 64, 558, 0,
	0, 592, 0, 0, 0, 0, 0, 0, 65, 68,
	66, 67, 0, 0, 68, 0, 0, 0, 1459, 1462,
	65, 0, 66, 67, 0, 0, 0, 62, 63, 555,
	556, 0, 0, 0, 88, 608, 0, 557, 0, 0,
	553, 554, 559, 0, 0, 0, 0, 1030, 0, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	69, 1250, 1251, 1252, 64, 0, 493, 0, 64, 0,
	0, 0, 69, 0, 1494, 549, 0, 0, 0, 0,
	0, 0, 1032, 0, 0, 0, 0, 65, 0, 66,
	67, 65, 1405, 66, 67, 0, 0, 0, 0, 1509,
	0, 0, 565, 0, 0, 0, 62, 63, 0, 88,
	88, 62, 63, 0, 0, 0, 0, 1515, 88, 88,
	0, 0, 0, 0, 0, 0, 493, 0, 0, 1554,
	0, 843, 0, 0, 0, 0, 0, 818, 68, 69,
	0, 0, 0, 69, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 216, 337, 0, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 0, 0, 550,
	551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1033, 88, 0, 0, 0, 733, 0, 595, 124, 1031,
	0, 0, 0, 0, 1037, 1036, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 610,
	581, 596, 597, 0, 0, 0, 0, 68, 88, 0,
	0, 68, 88, 0, 0, 0, 88, 88, 88, 88,
	88, 0, 0, 0, 82, 62, 63, 0, 88, 0,
	88, 0, 579, 0, 88, 0, 0, 62, 63, 1658,
	0, 493, 0, 0, 0, 0, 0, 0, 0, 493,
	1668, 0, 0, 0, 598, 607, 604, 605, 602, 603,
	601, 600, 599, 609, 586, 587, 588, 589, 591, 88,
	0, 583, 582, 590, 493, 0, 812, 0, 1379, 1368,
	1367, 0, 125, 88, 0, 0, 0, 0, 0, 0,
	1369, 0, 0, 1447, 1448, 1449, 0, 0, 0, 811,
	811, 1452, 1453, 1370, 62, 63, 0, 0, 62, 63,
	0, 147, 88, 0, 0, 1070, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 39,
	0, 40, 41, 42, 0, 1072, 0, 0, 0, 51,
	0, 0, 0, 0, 37, 0, 0, 0, 0, 759,
	758, 0, 0, 0, 0, 0, 0, 1677, 0, 1487,
	1488, 1489, 1490, 0, 0, 0, 0, 760, 493, 0,
	0, 0, 0, 0, 0, 1757, 1758, 1462, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 2035, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 1363, 0, 0, 0, 0, 0, 0,
	0, 493, 0, 1375, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1381, 1382, 0, 148, 0, 0,
	812, 0, 1379, 1368, 1367, 0, 1377, 0, 0, 0,
	0, 0, 0, 46, 1369, 0, 0, 0, 0, 493,
	0, 0, 493, 493, 493, 88, 0, 1370, 0, 0,
	44, 0, 0, 0, 0, 1371, 1372, 1374, 0, 0,
	0, 1373, 0, 0, 761, 0, 43, 2035, 48, 47,
	49, 0, 0, 0, 0, 0, 0, 45, 1628, 1682,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 2097, 178, 179, 1881, 180, 181, 182, 184,
	183, 149, 150, 151, 152, 153, 157, 155, 154, 156,
	126, 128, 0, 124, 127, 133, 129, 130, 131, 145,
	134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 146, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 0, 0, 0, 0, 0, 1931, 1363, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1381, 1382,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1377, 0, 1957, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1380, 0, 0,
	0, 1965, 0, 1966, 0, 0, 0, 0, 0, 1371,
	1372, 1374, 0, 0, 0, 1373, 0, 125, 1525, 1526,
	1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
	1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1766, 0, 0, 1767, 0, 1768, 0, 1769,
	0, 1770, 1771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2041, 0, 0, 2042, 0, 0, 2044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2054, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1957, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 811, 454, 443, 0, 402, 456, 370, 390,
	465, 392, 393, 428, 350, 411, 0, 387, 368, 0,
	0, 1380, 373, 343, 382, 344, 371, 404, 0, 369,
	0, 445, 414, 2094, 811, 0, 705, 0, 706, 0,
	0, 0, 0, 0, 406, 447, 698, 699, 401, 429,
	359, 418, 458, 388, 424, 459, 692, 0, 0, 80,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 423, 453, 384, 356, 468, 0, 427, 342, 421,
	0, 0, 348, 704, 464, 451, 378, 377, 0, 0,
	0, 0, 0, 0, 0, 405, 410, 434, 398, 0,
	0, 0, 1479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 374, 0, 417, 0, 0,
	0, 355, 349, 0, 403, 0, 0, 0, 358, 0,
	375, 435, 0, 339, 441, 448, 400, 1480, 0, 452,
	397, 396, 0, 0, 0, 0, 0, 0, 389, 335,
	64, 466, 455, 690, 446, 372, 383, 0, 379, 0,
	0, 0, 380, 381, 0, 0, 416, 430, 0, 0,
	0, 0, 0, 65, 437, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 340, 376,
	439, 442, 362, 426, 352, 385, 432, 386, 408, 367,
	0, 0, 1091, 1097, 1095, 0, 0, 1092, 0, 0,
	1090, 0, 0, 1099, 0, 69, 1098, 1084, 1094, 1096,
	1093, 1481, 0, 0, 0, 1083, 0, 1101, 1100, 1102,
	1081, 1104, 0, 0, 0, 1108, 1105, 1107, 1106, 0,
	1103, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1087, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 597, 0, 0, 0, 345, 0,
	0, 0, 0, 68, 346, 366, 449, 0, 0, 0,
	0, 0, 334, 0, 0, 0, 691, 0, 0, 425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 365, 712, 713,
	710, 711, 709, 708, 707, 436, 700, 587, 701, 702,
	591, 444, 0, 583, 582, 703, 0, 0, 0, 467,
	0, 0, 0, 0, 0, 0, 0, 391, 341, 395,
	0, 0, 0, 0, 0, 0, 0, 353, 354, 0,
	0, 399, 394, 420, 422, 431, 440, 450, 457, 433,
	62, 63, 454, 443, 0, 402, 456, 370, 390, 465,
	392, 393, 428, 350, 411, 0, 387, 368, 0, 0,
	0, 373, 343, 382, 344, 371, 404, 0, 369, 0,
	445, 414, 0, 0, 0, 463, 0, 419, 0, 0,
	0, 0, 0, 406, 447, 409, 438, 401, 429, 359,
	418, 458, 388, 424, 459, 0, 0, 0, 51, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	423, 453, 384, 356, 468, 0, 427, 342, 421, 0,
	0, 348, 351, 464, 451, 378, 377, 0, 812, 0,
	1379, 1368, 1367, 0, 405, 410, 434, 398, 0, 0,
	0, 0, 1369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 374, 1370, 417, 0, 0, 0,
	355, 349, 0, 403, 0, 0, 0, 358, 0, 375,
	435, 0, 339, 441, 448, 400, 0, 0, 452, 397,
	396, 0, 0, 0, 0, 0, 0, 389, 335, 64,
	466, 455, 407, 446, 372, 383, 0, 379, 0, 0,
	0, 380, 381, 0, 0, 416, 430, 0, 0, 0,
	1963, 1964, 65, 437, 66, 67, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 340, 376, 439,
	442, 362, 426, 352, 385, 432, 386, 408, 367, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 1363, 0, 0, 1701, 0,
	0, 0, 0, 0, 0, 1375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1381, 1382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1377, 0,
	0, 0, 0, 1709, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1371, 1372, 1374,
	0, 0, 0, 1373, 0, 0, 0, 345, 0, 0,
	0, 0, 68, 346, 366, 449, 0, 0, 0, 0,
	1710, 1708, 1704, 1703, 0, 0, 0, 0, 425, 0,
	0, 0, 0, 1706, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 365, 360, 361, 412,
	413, 460, 461, 462, 436, 357, 0, 363, 364, 0,
	444, 0, 0, 0, 415, 0, 0, 0, 467, 0,
	0, 0, 0, 0, 0, 0, 391, 341, 395, 0,
	0, 0, 0, 0, 0, 0, 353, 354, 0, 0,
	399, 394, 420, 422, 431, 440, 450, 457, 433, 62,
	63, 454, 443, 0, 402, 456, 370, 390, 465, 392,
	393, 428, 350, 411, 0, 387, 368, 0, 0, 0,
	373, 343, 382, 344, 371, 404, 0, 369, 0, 445,
	414, 0, 0, 0, 463, 0, 419, 0, 0, 1380,
	0, 0, 406, 447, 409, 438, 401, 429, 359, 418,
	458, 388, 424, 459, 0, 0, 0, 51, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 423,
	453, 384, 356, 468, 0, 427, 342, 421, 0, 0,
	348, 351, 464, 451, 378, 377, 0, 812, 0, 1379,
	1368, 1367, 0, 405, 410, 434, 398, 0, 0, 0,
	0, 1369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 374, 1370, 417, 0, 0, 0, 355,
	349, 0, 403, 0, 0, 0, 358, 0, 375, 435,
	0, 339, 441, 448, 400, 0, 0, 452, 397, 396,
	0, 0, 0, 0, 0, 0, 389, 335, 64, 466,
	455, 407, 446, 372, 383, 0, 379, 0, 0, 0,
	380, 381, 0, 0, 416, 430, 0, 0, 0, 2092,
	0, 65, 437, 66, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 347, 340, 376, 439, 442,
	362, 426, 352, 385, 432, 386, 408, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 1363, 0, 0, 1827, 0, 0,
	0, 0, 0, 0, 1375, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1381, 1382, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1377, 0, 0,
	0, 0, 1709, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1371, 1372, 1374, 0,
	0, 0, 1373, 0, 0, 0, 345, 0, 0, 0,
	0, 68, 346, 366, 449, 0, 0, 0, 0, 1710,
	1708, 0, 0, 0, 0, 0, 0, 425, 0, 0,
	0, 0, 1706, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 365, 360, 361, 412, 413,
	460, 461, 462, 436, 357, 0, 363, 364, 0, 444,
	0, 0, 0, 415, 0, 0, 0, 467, 0, 0,
	0, 0, 0, 0, 0, 391, 341, 395, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 0, 0, 399,
	394, 420, 422, 431, 440, 450, 457, 433, 62, 63,
	454, 443, 0, 402, 456, 370, 390, 465, 392, 393,
	428, 350, 411, 0, 387, 368, 0, 0, 0, 373,
	343, 382, 344, 371, 404, 0, 369, 0, 445, 414,
	0, 0, 0, 463, 0, 419, 0, 0, 1380, 0,
	0, 406, 447, 409, 438, 401, 429, 359, 418, 458,
	388, 424, 459, 0, 0, 0, 51, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 423, 453,
	384, 356, 468, 0, 427, 342, 421, 0, 0, 348,
	351, 464, 451, 378, 377, 0, 812, 0, 1379, 1368,
	1367, 0, 405, 410, 434, 398, 0, 0, 0, 0,
	1369, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 374, 1370, 417, 0, 0, 0, 355, 349,
	0, 403, 0, 0, 0, 358, 0, 375, 435, 0,
	339, 441, 448, 400, 0, 0, 452, 397, 396, 0,
	0, 0, 0, 0, 0, 389, 335, 64, 466, 455,
	407, 446, 372, 383, 0, 379, 0, 0, 0, 380,
	381, 0, 0, 416, 430, 0, 0, 0, 1882, 0,
	65, 437, 66, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 340, 376, 439, 442, 362,
	426, 352, 385, 432, 386, 408, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 1363, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1375, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1381, 1382, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1377, 0, 0, 0,
	0, 1709, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1371, 1372, 1374, 0, 0,
	0, 1373, 0, 0, 0, 345, 0, 0, 0, 0,
	68, 346, 366, 449, 0, 0, 0, 0, 1710, 1708,
	0, 0, 0, 0, 0, 0, 425, 0, 0, 0,
	0, 1706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 365, 360, 361, 412, 413, 460,
	461, 462, 436, 357, 0, 363, 364, 0, 444, 0,
	0, 0, 415, 0, 0, 0, 467, 0, 0, 0,
	0, 0, 0, 0, 391, 341, 395, 0, 0, 0,
	0, 0, 0, 0, 353, 354, 0, 0, 399, 394,
	420, 422, 431, 440, 450, 457, 433, 62, 63, 454,
	443, 0, 402, 456, 370, 390, 465, 392, 393, 428,
	350, 411, 0, 387, 368, 0, 0, 0, 373, 343,
	382, 344, 371, 404, 0, 369, 0, 445, 414, 0,
	147, 0, 463, 0, 419, 0, 0, 1380, 0, 0,
	406, 447, 409, 438, 401, 429, 359, 418, 458, 388,
	424, 459, 0, 0, 0, 80, 0, 84, 51, 0,
	0, 0, 0, 0, 0, 0, 0, 423, 453, 384,
	356, 468, 0, 427, 342, 421, 0, 0, 348, 351,
	464, 451, 378, 377, 0, 0, 0, 0, 0, 0,
	0, 405, 410, 434, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 374, 0, 417, 0, 0, 0, 355, 349, 0,
	403, 132, 0, 158, 358, 0, 375, 435, 0, 339,
	441, 448, 400, 0, 0, 452, 397, 396, 0, 0,
	0, 0, 0, 0, 389, 335, 64, 466, 455, 407,
	446, 372, 383, 0, 379, 0, 148, 0, 380, 381,
	0, 0, 416, 430, 0, 0, 0, 0, 0, 65,
	437, 66, 67, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 347, 340, 376, 439, 442, 362, 426,
	352, 385, 432, 386, 408, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 0, 178, 179, 0, 180, 181, 182, 184, 183,
	149, 150, 151, 152, 153, 157, 155, 154, 156, 126,
	128, 0, 124, 127, 133, 129, 130, 131, 145, 134,
	135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
	470, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	0, 0, 0, 0, 345, 0, 0, 0, 0, 68,
	346, 366, 449, 0, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 0, 0, 425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 365, 360, 361, 412, 413, 460, 461,
	462, 436, 357, 0, 363, 364, 0, 444, 0, 0,
	0, 415, 0, 0, 0, 467, 125, 0, 0, 0,
	0, 0, 0, 391, 341, 395, 0, 0, 0, 0,
	0, 0, 0, 353, 354, 0, 0, 399, 394, 420,
	422, 431, 440, 450, 457, 433, 62, 63, 454, 443,
	0, 402, 456, 370, 390, 465, 392, 393, 428, 350,
	411, 0, 387, 368, 0, 0, 0, 373, 343, 382,
	344, 371, 404, 0, 369, 0, 445, 414, 0, 0,
	0, 463, 0, 419, 0, 0, 0, 0, 0, 406,
	447, 409, 438, 401, 429, 359, 418, 458, 388, 424,
	459, 0, 0, 0, 51, 0, 931, 0, 932, 0,
	0, 0, 0, 0, 0, 0, 423, 453, 384, 356,
	468, 0, 427, 342, 421, 0, 0, 348, 351, 464,
	451, 378, 377, 0, 812, 0, 1379, 1368, 1367, 0,
	405, 410, 434, 398, 0, 0, 0, 0, 1369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	374, 1370, 417, 0, 0, 0, 355, 349, 0, 403,
	0, 0, 0, 358, 0, 375, 435, 0, 339, 441,
	448, 400, 0, 0, 452, 397, 396, 0, 0, 0,
	0, 0, 0, 389, 335, 64, 466, 455, 407, 446,
	372, 383, 0, 379, 0, 0, 0, 380, 381, 0,
	0, 416, 430, 0, 0, 0, 1785, 0, 65, 437,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 340, 376, 439, 442, 362, 426, 352,
	385, 432, 386, 408, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 1363, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1381, 1382, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1377, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1371, 1372, 1374, 0, 0, 0, 1373,
	0, 0, 0, 345, 0, 0, 0, 0, 68, 346,
	366, 449, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 365, 360, 361, 412, 413, 460, 461, 462,
	436, 357, 0, 363, 364, 0, 444, 0, 0, 0,
	415, 0, 0, 0, 467, 0, 0, 0, 0, 0,
	0, 0, 391, 341, 395, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 0, 0, 399, 394, 420, 422,
	431, 440, 450, 457, 433, 62, 63, 454, 443, 0,
	402, 456, 370, 390, 465, 392, 393, 428, 350, 411,
	0, 387, 368, 0, 0, 0, 373, 343, 382, 344,
	371, 404, 0, 369, 0, 445, 414, 0, 0, 0,
	463, 0, 419, 0, 0, 1380, 0, 0, 406, 447,
	409, 438, 401, 429, 359, 418, 458, 388, 424, 459,
	0, 489, 0, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 491, 0, 423, 453, 384, 356, 468,
	0, 427, 342, 421, 0, 0, 348, 351, 464, 451,
	378, 377, 0, 812, 0, 1379, 1368, 1367, 0, 405,
	410, 434, 398, 0, 0, 0, 0, 1369, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 374,
	1370, 417, 0, 0, 0, 355, 349, 0, 403, 0,
	0, 0, 358, 0, 375, 435, 0, 339, 441, 448,
	400, 0, 0, 452, 397, 396, 0, 0, 0, 0,
	0, 0, 389, 335, 64, 466, 455, 407, 446, 372,
	383, 0, 379, 0, 0, 0, 380, 381, 0, 0,
	416, 430, 0, 0, 0, 0, 0, 65, 437, 66,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 347, 340, 376, 439, 442, 362, 426, 352, 385,
	432, 386, 408, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	1363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1381, 1382, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1377, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1371, 1372, 1374, 0, 0, 0, 1373, 0,
	0, 0, 345, 0, 0, 0, 0, 68, 346, 366,
	449, 0, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 0, 0, 425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 365, 360, 361, 412, 413, 460, 461, 462, 436,
	357, 0, 363, 364, 0, 444, 0, 0, 0, 415,
	0, 0, 0, 467, 0, 0, 0, 0, 0, 0,
	0, 391, 341, 395, 0, 0, 0, 0, 0, 0,
	0, 353, 354, 0, 0, 399, 394, 420, 422, 431,
	440, 450, 457, 433, 62, 63, 454, 443, 0, 402,
	456, 370, 390, 465, 392, 393, 428, 350, 411, 0,
	387, 368, 0, 0, 0, 373, 343, 382, 344, 371,
	404, 0, 369, 0, 445, 414, 0, 0, 0, 463,
	0, 419, 0, 0, 1380, 0, 0, 406, 447, 409,
	438, 401, 429, 359, 418, 458, 388, 424, 459, 0,
	0, 0, 51, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 423, 453, 384, 356, 468, 0,
	427, 342, 421, 0, 0, 348, 351, 464, 451, 378,
	377, 0, 0, 0, 0, 0, 0, 0, 405, 410,
	434, 398, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1765, 0, 374, 0,
	417, 0, 0, 0, 355, 349, 0, 403, 0, 0,
	0, 358, 0, 375, 435, 0, 339, 441, 448, 400,
	0, 0, 452, 397, 396, 0, 0, 0, 0, 0,
	0, 389, 335, 64, 466, 455, 407, 446, 372, 383,
	0, 379, 0, 0, 0, 380, 381, 0, 0, 416,
	430, 0, 0, 0, 0, 0, 65, 437, 66, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 340, 376, 439, 442, 362, 426, 352, 385, 432,
	386, 408, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 345, 0, 0, 0, 0, 68, 346, 366, 449,
	0, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 360, 361, 412, 413, 460, 461, 462, 436, 357,
	0, 363, 364, 0, 444, 0, 0, 0, 415, 0,
	0, 0, 467, 0, 0, 0, 0, 0, 0, 0,
	391, 341, 395, 0, 0, 0, 0, 0, 0, 0,
	353, 354, 0, 0, 399, 394, 420, 422, 431, 440,
	450, 457, 433, 62, 63, 454, 443, 0, 402, 456,
	370, 390, 465, 392, 393, 428, 350, 411, 0, 387,
	368, 0, 0, 0, 373, 343, 382, 344, 371, 404,
	0, 369, 0, 445, 414, 0, 0, 0, 463, 0,
	419, 0, 0, 0, 0, 0, 406, 447, 409, 438,
	401, 429, 359, 418, 458, 388, 424, 459, 0, 0,
	0, 80, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 423, 453, 384, 356, 468, 0, 427,
	342, 421, 0, 0, 348, 351, 464, 451, 378, 377,
	0, 0, 0, 0, 0, 0, 0, 405, 410, 434,
	398, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 374, 0, 417,
	0, 0, 0, 355, 349, 0, 403, 0, 0, 0,
	358, 0, 375, 435, 0, 339, 441, 448, 400, 0,
	0, 452, 397, 396, 0, 0, 0, 0, 0, 0,
	389, 335, 64, 466, 455, 407, 446, 372, 383, 0,
	379, 0, 0, 0, 380, 381, 0, 0, 416, 430,
	0, 0, 0, 0, 0, 65, 437, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	340, 376, 439, 442, 362, 426, 352, 385, 432, 386,
	408, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 0, 0, 0, 0, 68, 346, 366, 449, 0,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	360, 361, 412, 413, 460, 461, 462, 436, 357, 0,
	363, 364, 0, 444, 0, 0, 0, 415, 0, 0,
	0, 467, 0, 0, 0, 0, 0, 0, 0, 391,
	341, 395, 0, 0, 0, 0, 0, 0, 0, 353,
	354, 0, 0, 399, 394, 420, 422, 431, 440, 450,
	457, 433, 62, 63, 454, 443, 0, 402, 456, 370,
	390, 465, 392, 393, 428, 350, 411, 0, 387, 368,
	0, 0, 0, 373, 343, 382, 344, 371, 404, 0,
	369, 0, 445, 414, 0, 0, 0, 463, 0, 419,
	0, 0, 0, 0, 0, 406, 447, 409, 438, 401,
	429, 359, 418, 458, 388, 424, 459, 0, 0, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 423, 453, 384, 356, 468, 0, 427, 342,
	421, 0, 0, 348, 351, 464, 451, 378, 377, 684,
	0, 0, 0, 0, 0, 0, 405, 410, 434, 398,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 374, 0, 417, 0,
	0, 0, 355, 349, 0, 403, 0, 0, 0, 358,
	0, 375, 435, 0, 339, 441, 448, 400, 0, 0,
	452, 397, 396, 0, 0, 0, 0, 0, 0, 389,
	335, 64, 466, 455, 407, 446, 372, 383, 0, 379,
	0, 0, 0, 380, 381, 0, 0, 416, 430, 0,
	0, 0, 0, 0, 65, 437, 66, 67, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 347, 340,
	376, 439, 442, 362, 426, 352, 385, 432, 386, 408,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 68, 346, 366, 449, 0, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 360,
	361, 412, 413, 460, 461, 462, 436, 357, 0, 363,
	364, 0, 444, 0, 0, 0, 415, 0, 0, 0,
	467, 0, 0, 0, 0, 0, 0, 0, 391, 341,
	395, 0, 0, 0, 0, 0, 0, 0, 353, 354,
	0, 0, 399, 394, 420, 422, 431, 440, 450, 457,
	433, 62, 63, 454, 443, 0, 402, 456, 370, 390,
	465, 392, 393, 428, 350, 411, 0, 387, 368, 0,
	0, 0, 373, 343, 382, 344, 371, 404, 0, 369,
	0, 445, 414, 0, 0, 0, 463, 0, 419, 0,
	0, 0, 0, 0, 406, 447, 409, 438, 401, 429,
	359, 418, 458, 388, 424, 459, 0, 0, 0, 51,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 423, 453, 384, 356, 468, 0, 427, 342, 421,
	0, 0, 348, 351, 464, 451, 378, 377, 0, 0,
	0, 0, 0, 0, 0, 405, 410, 434, 398, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 374, 0, 417, 0, 0,
	0, 355, 349, 0, 403, 0, 0, 0, 358, 0,
	375, 435, 0, 339, 441, 448, 400, 0, 0, 452,
	397, 396, 0, 0, 0, 0, 0, 0, 389, 335,
	64, 466, 455, 902, 446, 372, 383, 0, 379, 0,
	0, 0, 380, 381, 0, 0, 416, 430, 0, 0,
	0, 0, 0, 65, 437, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 340, 376,
	439, 442, 362, 426, 352, 385, 432, 386, 408, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 68, 346, 366, 449, 0, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 0, 0, 425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 365, 360, 361,
	412, 413, 460, 461, 462, 436, 357, 0, 363, 364,
	0, 444, 0, 0, 0, 415, 0, 0, 0, 467,
	0, 0, 0, 0, 0, 0, 0, 391, 341, 395,
	0, 0, 0, 0, 0, 0, 0, 353, 354, 0,
	0, 399, 394, 420, 422, 431, 440, 450, 457, 433,
	62, 63, 454, 443, 0, 402, 456, 370, 390, 465,
	392, 393, 428, 350, 411, 0, 387, 368, 0, 0,
	0, 373, 343, 382, 344, 371, 404, 0, 369, 0,
	445, 414, 0, 0, 0, 463, 0, 419, 0, 0,
	0, 0, 0, 406, 447, 409, 438, 401, 429, 359,
	418, 458, 388, 424, 459, 0, 0, 0, 51, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	423, 453, 384, 356, 468, 0, 427, 342, 421, 0,
	0, 348, 351, 464, 451, 378, 377, 0, 0, 0,
	0, 0, 0, 0, 405, 410, 434, 398, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 374, 0, 417, 0, 0, 0,
	355, 349, 0, 403, 0, 0, 0, 358, 0, 375,
	435, 0, 339, 441, 448, 400, 0, 0, 452, 397,
	396, 0, 0, 0, 0, 0, 0, 389, 335, 64,
	466, 455, 407, 446, 372, 383, 0, 379, 0, 0,
	0, 380, 381, 0, 0, 416, 430, 0, 0, 0,
	0, 0, 65, 437, 66, 67, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 340, 376, 439,
	442, 362, 426, 352, 385, 432, 386, 408, 367, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 345, 0, 0,
	0, 0, 68, 346, 366, 449, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 365, 360, 361, 412,
	413, 460, 461, 462, 436, 357, 0, 363, 364, 0,
	444, 0, 0, 0, 415, 0, 0, 0, 467, 0,
	0, 0, 0, 0, 0, 0, 391, 341, 395, 0,
	0, 0, 0, 0, 0, 0, 353, 354, 0, 0,
	399, 394, 420, 422, 431, 440, 450, 457, 433, 62,
	63, 454, 2032, 0, 402, 456, 370, 390, 465, 392,
	393, 428, 350, 411, 0, 387, 368, 0, 0, 0,
	373, 343, 382, 344, 371, 404, 0, 369, 0, 445,
	414, 0, 0, 0, 463, 0, 419, 0, 0, 0,
	0, 0, 406, 447, 409, 438, 401, 429, 359, 418,
	458, 388, 424, 459, 509, 0, 0, 51, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 423,
	453, 384, 356, 468, 0, 427, 342, 421, 0, 0,
	348, 351, 464, 451, 378, 377, 0, 812, 0, 1379,
	1368, 1367, 0, 405, 410, 434, 398, 0, 0, 0,
	0, 1369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 374, 1370, 417, 0, 0, 0, 355,
	349, 0, 403, 0, 0, 0, 358, 0, 375, 435,
	0, 339, 441, 448, 400, 0, 0, 452, 397, 396,
	0, 0, 0, 0, 0, 0, 389, 0, 64, 466,
	455, 407, 446, 372, 383, 0, 379, 0, 0, 0,
	380, 381, 0, 0, 416, 430, 0, 0, 0, 0,
	0, 65, 437, 66, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 347, 340, 376, 439, 442,
	362, 426, 352, 385, 432, 386, 408, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 1887, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1375, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1381, 1382, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1377, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1371, 1372, 1374, 0,
	0, 0, 1373, 0, 0, 0, 345, 0, 0, 0,
	0, 68, 346, 366, 449, 0, 0, 0, 0, 0,
	1682, 0, 0, 0, 0, 0, 0, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 365, 360, 361, 412, 413,
	460, 461, 462, 436, 357, 0, 363, 364, 0, 444,
	0, 0, 0, 415, 0, 0, 0, 467, 0, 0,
	0, 0, 0, 0, 0, 391, 341, 395, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 0, 0, 399,
	394, 420, 422, 431, 440, 450, 457, 433, 62, 63,
	454, 443, 0, 402, 456, 370, 390, 465, 392, 393,
	428, 350, 411, 0, 387, 368, 0, 0, 0, 373,
	343, 382, 344, 371, 404, 0, 369, 0, 445, 414,
	0, 0, 0, 463, 0, 419, 0, 0, 1380, 0,
	0, 406, 447, 409, 438, 401, 429, 359, 418, 458,
	388, 424, 459, 0, 0, 0, 80, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 423, 453,
	384, 356, 468, 0, 427, 342, 421, 0, 0, 348,
	351, 464, 451, 378, 377, 0, 0, 0, 0, 0,
	0, 0, 405, 410, 434, 398, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 374, 0, 417, 0, 0, 0, 355, 349,
	0, 403, 0, 0, 0, 358, 0, 375, 435, 0,
	339, 441, 448, 400, 0, 0, 452, 397, 396, 0,
	0, 0, 0, 0, 0, 389, 0, 64, 466, 455,
	407, 446, 372, 383, 0, 379, 0, 0, 0, 380,
	381, 0, 0, 416, 430, 0, 0, 0, 0, 0,
	65, 437, 66, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 340, 376, 439, 442, 362,
	426, 352, 385, 432, 386, 408, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	68, 346, 366, 449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 365, 360, 361, 412, 413, 460,
	461, 462, 436, 357, 0, 363, 364, 0, 444, 0,
	0, 0, 415, 0, 0, 0, 467, 0, 0, 0,
	0, 0, 0, 0, 391, 341, 395, 0, 0, 0,
	0, 0, 0, 0, 353, 354, 0, 0, 399, 394,
	420, 422, 431, 440, 450, 457, 433, 62, 63, 454,
	443, 0, 402, 456, 370, 390, 465, 392, 393, 428,
	350, 411, 0, 387, 368, 0, 0, 0, 373, 343,
	382, 344, 371, 404, 0, 369, 0, 445, 414, 0,
	0, 0, 463, 0, 419, 0, 0, 0, 0, 0,
	406, 447, 409, 438, 401, 429, 359, 418, 458, 388,
	424, 459, 0, 0, 0, 87, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 423, 453, 384,
	356, 468, 0, 427, 342, 421, 0, 0, 348, 351,
	464, 451, 378, 377, 0, 0, 0, 0, 0, 0,
	0, 405, 410, 434, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 374, 0, 417, 0, 0, 0, 355, 349, 0,
	403, 0, 0, 0, 358, 0, 375, 435, 0, 339,
	441, 448, 400, 0, 0, 452, 397, 396, 0, 0,
	0, 0, 0, 0, 389, 0, 64, 466, 455, 407,
	446, 372, 383, 0, 379, 0, 0, 0, 380, 381,
	0, 0, 416, 430, 0, 0, 0, 0, 0, 65,
	437, 66, 67, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 347, 340, 376, 439, 442, 362, 426,
	352, 385, 432, 386, 408, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 345, 0, 0, 0, 0, 68,
	346, 366, 449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 365, 360, 361, 412, 413, 460, 461,
	462, 436, 357, 0, 363, 364, 0, 444, 0, 0,
	0, 415, 0, 0, 0, 467, 0, 0, 0, 0,
	0, 0, 0, 391, 341, 395, 0, 0, 0, 0,
	0, 0, 0, 353, 354, 0, 0, 399, 394, 420,
	422, 431, 440, 450, 457, 433, 62, 63, 454, 443,
	0, 402, 456, 370, 390, 465, 392, 393, 428, 350,
	411, 0, 387, 368, 0, 0, 0, 373, 343, 382,
	344, 371, 404, 0, 369, 0, 445, 414, 0, 0,
	0, 463, 0, 419, 0, 0, 0, 0, 0, 406,
	447, 409, 438, 401, 429, 359, 418, 458, 388, 424,
	459, 0, 0, 0, 51, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 423, 453, 384, 356,
	468, 0, 427, 342, 421, 0, 0, 348, 351, 464,
	451, 378, 377, 0, 0, 0, 0, 0, 0, 0,
	405, 410, 434, 398, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	374, 0, 417, 0, 0, 0, 355, 349, 0, 403,
	0, 0, 0, 358, 0, 375, 435, 0, 339, 441,
	448, 400, 0, 0, 452, 397, 396, 0, 0, 0,
	0, 0, 0, 389, 0, 64, 466, 455, 407, 446,
	372, 383, 0, 379, 0, 0, 0, 380, 381, 0,
	0, 416, 430, 0, 0, 0, 0, 0, 65, 437,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 340, 376, 439, 442, 362, 426, 352,
	385, 432, 386, 408, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 68, 346,
	366, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 365, 360, 361, 412, 413, 460, 461, 462,
	436, 357, 0, 363, 364, 0, 444, 0, 0, 0,
	415, 0, 0, 0, 467, 0, 0, 0, 0, 0,
	0, 0, 391, 341, 395, 0, 0, 0, 0, 0,
	540, 0, 353, 354, 0, 0, 399, 394, 420, 422,
	431, 440, 450, 457, 433, 62, 63, 539, 0, 0,
	0, 0, 538, 0, 0, 0, 0, 0, 0, 593,
	0, 594, 0, 0, 0, 0, 0, 0, 0, 584,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 509,
	0, 0, 80, 569, 566, 567, 571, 572, 573, 574,
	0, 0, 0, 570, 575, 576, 577, 541, 0, 0,
	0, 0, 536, 558, 0, 0, 592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 0, 0, 0, 0,
	608, 0, 557, 0, 0, 1080, 554, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 66, 67,
	0, 0, 0, 0, 0, 0, 0, 565, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 812, 0,
	1379, 1368, 1367, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 1369, 0, 0, 1091, 1097, 1095, 0, 0,
	1092, 0, 0, 1090, 0, 1370, 1099, 0, 0, 1098,
	1084, 1094, 1096, 1093, 1088, 551, 0, 0, 1083, 0,
	1101, 1100, 1102, 1081, 1104, 0, 0, 0, 1108, 1105,
	1107, 1106, 595, 1103, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 1086, 0, 0, 0, 0, 0, 0,
	147, 759, 758, 61, 610, 581, 596, 597, 0, 0,
	0, 0, 0, 1087, 1089, 0, 68, 0, 0, 760,
	0, 0, 0, 0, 0, 0, 1391, 0, 51, 82,
	1389, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1388, 0, 598,
	607, 604, 605, 602, 603, 601, 600, 599, 609, 586,
	587, 588, 589, 591, 0, 1375, 583, 582, 590, 0,
	1387, 0, 0, 0, 0, 0, 1381, 1382, 0, 0,
	0, 132, 0, 158, 275, 0, 0, 0, 1377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 63, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 148, 1371, 1372, 1374,
	0, 0, 0, 1373, 0, 0, 761, 0, 0, 0,
	0, 0, 65, 0, 66, 67, 0, 0, 0, 0,
	0, 1682, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	0, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 0, 178, 179, 0, 180, 181, 182, 184, 183,
	149, 150, 151, 152, 153, 157, 155, 154, 156, 126,
	128, 0, 124, 127, 133, 129, 130, 131, 145, 134,
	135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
	146, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	147, 0, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 1380,
	0, 0, 0, 0, 0, 59, 1391, 0, 51, 0,
	1389, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1388, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 0,
	1387, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	63, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 65, 0, 66, 67, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	0, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 0, 178, 179, 0, 180, 181, 182, 184, 183,
	149, 150, 151, 152, 153, 157, 155, 154, 156, 126,
	128, 0, 124, 127, 133, 129, 130, 131, 145, 134,
	135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
	146, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	0, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 0, 0, 812, 539, 1379,
	1368, 1367, 0, 538, 0, 59, 0, 0, 0, 0,
	593, 1369, 594, 0, 0, 0, 0, 0, 0, 0,
	584, 585, 0, 0, 1370, 0, 0, 0, 1929, 0,
	509, 0, 0, 80, 569, 566, 567, 571, 572, 573,
	574, 0, 0, 0, 570, 575, 576, 577, 541, 1930,
	0, 0, 0, 536, 558, 0, 125, 592, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	759, 758, 0, 0, 0, 0, 0, 0, 0, 0,
	812, 0, 1379, 1368, 1367, 555, 556, 0, 760, 62,
	63, 608, 0, 557, 1369, 0, 553, 554, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 1370, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 549, 0, 0, 1363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1375, 0, 0, 65, 0, 66,
	67, 0, 0, 759, 758, 1381, 1382, 0, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 1377, 0, 0,
	0, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1371, 1372, 1374, 69,
	0, 0, 1373, 0, 0, 761, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1363, 0, 0,
	1682, 0, 0, 0, 0, 550, 551, 1375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1381, 1382,
	0, 0, 0, 595, 0, 0, 0, 0, 0, 0,
	1377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 581, 596, 597, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 1371,
	1372, 1374, 0, 0, 0, 1373, 0, 0, 761, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 579, 0,
	0, 0, 0, 1719, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 607, 604, 605, 602, 603, 601, 600, 599, 609,
	586, 587, 588, 589, 591, 0, 0, 583, 582, 590,
	540, 0, 0, 0, 0, 0, 0, 0, 1380, 0,
	0, 0, 0, 0, 0, 1060, 0, 539, 0, 0,
	0, 0, 538, 0, 0, 0, 0, 0, 0, 593,
	0, 594, 0, 0, 62, 63, 0, 0, 0, 584,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 509,
	0, 0, 80, 569, 566, 567, 571, 572, 573, 574,
	0, 0, 0, 570, 575, 576, 577, 541, 0, 0,
	0, 0, 536, 558, 0, 0, 592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1380, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 1065, 0, 0, 0,
	608, 0, 557, 0, 0, 553, 554, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	549, 0, 0, 0, 0, 0, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 66, 67,
	0, 0, 0, 539, 0, 0, 0, 565, 538, 0,
	0, 0, 0, 0, 0, 593, 0, 594, 0, 0,
	0, 0, 0, 0, 0, 584, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 509, 0, 966, 80, 569,
	566, 567, 571, 572, 573, 574, 0, 0, 69, 570,
	575, 576, 577, 541, 0, 0, 0, 0, 536, 558,
	0, 0, 592, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 550, 551, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 595, 0, 0, 0, 608, 0, 557, 0,
	0, 553, 554, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 610, 581, 596, 597, 0, 0,
	606, 0, 0, 0, 0, 0, 68, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 549, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	0, 0, 65, 0, 66, 67, 0, 0, 0, 0,
	0, 0, 0, 565, 0, 0, 0, 0, 0, 598,
	607, 604, 605, 602, 603, 601, 600, 599, 609, 586,
	587, 588, 589, 591, 0, 0, 583, 582, 590, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 63, 0, 0, 0, 0, 0,
	550, 551, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	610, 581, 596, 597, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 607, 604, 605, 602,
	603, 601, 600, 599, 609, 586, 587, 588, 589, 591,
	0, 0, 583, 582, 590, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 0, 0, 0, 0, 538, 0, 0,
	0, 0, 0, 0, 593, 0, 594, 0, 0, 62,
	63, 0, 0, 0, 584, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 509, 0, 0, 80, 569, 566,
	567, 571, 572, 573, 574, 0, 0, 0, 570, 575,
	576, 577, 541, 0, 0, 0, 0, 536, 558, 0,
	0, 592, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 1065, 0, 0, 0, 608, 0, 557, 0, 0,
	553, 554, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 549, 0, 0, 812, 0,
	0, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 66, 67, 0, 0, 0, 539, 0,
	0, 0, 565, 538, 0, 0, 0, 0, 0, 0,
	593, 0, 594, 0, 0, 0, 0, 0, 0, 0,
	584, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	509, 0, 0, 80, 569, 566, 567, 571, 572, 573,
	574, 0, 0, 69, 570, 575, 576, 577, 541, 0,
	0, 0, 0, 536, 558, 0, 0, 592, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 550,
	551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 595, 0, 0,
	0, 608, 0, 557, 0, 0, 553, 554, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 610,
	581, 596, 597, 0, 0, 606, 0, 0, 0, 0,
	0, 68, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 549, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 0, 0, 65, 0, 66,
	67, 0, 0, 0, 0, 0, 0, 0, 565, 0,
	0, 0, 0, 0, 598, 607, 604, 605, 602, 603,
	601, 600, 599, 609, 586, 587, 588, 589, 591, 0,
	0, 583, 582, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 63,
	0, 0, 0, 0, 0, 550, 551, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 595, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 581, 596, 597, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 607, 604, 605, 602, 603, 601, 600, 599, 609,
	586, 587, 588, 589, 591, 0, 0, 583, 582, 590,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 0, 0,
	0, 0, 538, 0, 0, 0, 0, 0, 0, 593,
	0, 594, 0, 0, 62, 63, 0, 0, 0, 584,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 509,
	0, 0, 80, 569, 566, 567, 571, 572, 573, 574,
	0, 0, 0, 570, 575, 576, 577, 541, 0, 0,
	0, 0, 536, 558, 0, 0, 592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 0, 0, 0, 0,
	608, 0, 557, 0, 0, 553, 554, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 66, 67,
	0, 0, 0, 0, 0, 0, 0, 565, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 550, 551, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 610, 581, 596, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 598,
	607, 604, 605, 602, 603, 601, 600, 599, 609, 586,
	587, 588, 589, 591, 0, 0, 583, 582, 590, 995,
	996, 997, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 593, 0, 594, 0,
	0, 0, 0, 0, 0, 0, 584, 585, 0, 0,
	0, 0, 0, 62, 63, 0, 509, 0, 0, 80,
	569, 566, 567, 571, 572, 573, 574, 0, 0, 0,
	570, 575, 576, 577, 0, 0, 0, 0, 0, 0,
	558, 0, 0, 592, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 556, 0, 0, 0, 0, 608, 0, 557,
	0, 0, 553, 554, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 565, 0, 0, 0, 0, 0,
	0, 0, 593, 0, 594, 0, 0, 0, 0, 0,
	0, 0, 584, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 509, 0, 0, 80, 569, 566, 567, 571,
	572, 573, 574, 0, 0, 69, 570, 575, 576, 577,
	0, 0, 0, 0, 0, 0, 558, 0, 0, 592,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 550, 551, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 595,
	0, 0, 0, 608, 0, 557, 0, 0, 553, 554,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 610, 581, 596, 597, 0, 0, 606, 0, 0,
	0, 0, 0, 68, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 549, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 579, 0, 0, 0, 0, 65,
	0, 66, 67, 0, 0, 0, 0, 0, 0, 0,
	565, 0, 0, 0, 0, 0, 598, 607, 604, 605,
	602, 603, 601, 600, 599, 609, 586, 587, 588, 589,
	591, 0, 0, 583, 582, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 63, 0, 0, 0, 0, 0, 550, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 610, 581, 596,
	597, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 607, 604, 605, 602, 603, 601, 600,
	599, 609, 586, 587, 588, 589, 591, 0, 0, 583,
	582, 590, 0, 0, 593, 0, 594, 0, 0, 0,
	0, 0, 0, 0, 584, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 1297, 0, 0, 80, 569, 566,
	567, 571, 572, 573, 574, 0, 62, 63, 570, 575,
	576, 577, 0, 0, 0, 0, 0, 0, 558, 0,
	0, 592, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 0, 0, 0, 0, 608, 0, 557, 0, 0,
	553, 554, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 66, 67, 0, 0, 0, 0, 0,
	0, 0, 565, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 550,
	551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 610,
	581, 596, 597, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 607, 604, 605, 602, 603,
	601, 600, 599, 609, 586, 587, 588, 589, 591, 0,
	0, 583, 582, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 63,
}

var yyPact = [...]int16{
	263, -1000, -266, -1000, -1000, -1000, -1000, 1544, 1402, 420,
	4123, 2960, 1567, -1000, -1000, -1000, 2850, 499, 498, 496,
	225, 486, 999, 3168, 3635, 525, 471, 334, 465, -1000,
	-239, -201, -1000, -118, 520, -1000, 1379, 272, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1371, 269, 442, 1296, -1000, 4078, 4078, 4078,
	4078, 4078, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	266, 999, 999, 465, 96, 465, 1566, 359, 1565, 791,
	-1000, -1000, -1000, 610, -1000, 1693, 604, -1000, -1000, 465,
	951, 790, -1000, -1000, -1000, 784, 3635, 782, -1000, -1000,
	-1000, -1000, 3623, 518, 3324, 1564, 516, 513, 1560, 508,
	3635, 3635, 175, 2504, 419, -158, -25, -1000, -1000, -1000,
	-1000, 602, 1464, -1000, -1000, -1000, 1464, 23, 1543, 1464,
	1543, -1000, 1464, 1543, 17, 17, 17, 17, 17, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1541, 1540, -1000, 1464,
	1464, 1464, 1464, 1464, 1464, 1464, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1539, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1531, 44,
	1531, 1491, 1491, -1000, -1000, 419, 419, 419, 419, 1538,
	3635, 999, 1558, 1556, 3635, -240, 3635, 3635, 1802, -1000,
	-1000, -1000, 125, 3635, 1662, 7760, 6167, 10154, 3635, -1000,
	-1000, 1659, 1652, -1000, 1649, 539, 3635, 3635, -1000, 506,
	3635, 3635, 501, 3635, 667, 599, 6962, -1000, 1628, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1535, 810, 999,
	354, 94, 1000, 1445, 413, 487, 318, 1151, 350, -1000,
	-1000, -1000, 875, -1000, 999, -1000, 1805, -1000, -1000, 310,
	-1000, 303, 781, 991, 3635, 1534, 174, 1532, 13121, 914,
	-1000, -274, -1000, -29, -1000, 999, -1000, 894, 17, 1464,
	-1000, 17, 884, 17, 17, -1000, -1000, 615, 1634, 615,
	615, 615, 615, 968, 968, -161, -161, -1000, -1000, -1000,
	-1000, -1000, 913, -1000, 911, 1531, -1000, -1000, -1000, 910,
	-1000, 3635, 999, 1530, 1555, 3635, 3635, 1692, 484, -1000,
	-1000, 1684, 1681, 1364, -1000, -1000, 124, -1000, -1000, 359,
	999, -1000, 596, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1529, -1000, -1000, 1458, -1000, 239, -1000, 3112, 533, 556,
	-1000, 3635, 478, 1782, 3635, 1777, 967, 9755, 8159, 175,
	-1000, -1000, -1000, -1000, -1000, 4568, 242, 1786, 1708, 363,
	43, -221, 1139, -1000, -1000, 1527, -1000, -1000, 13121, -1000,
	8957, 13121, 1137, 1127, -1000, 1121, 1084, 13, 999, -1000,
	-213, 112, -40, -1000, -1000, 1000, -1000, 1524, 13121, 1675,
	-1000, 1637, 676, -1000, 383, -1000, 13121, 2669, 1000, 1000,
	1000, 1000, 12762, -1000, -1000, 554, -1000, -1000, -1000, 932,
	966, 965, -1000, 13624, 13624, 13624, 13624, 13624, 13624, 13624,
	-1000, -1000, -1000, -1000, -13, -1000, -1000, -1000, 952, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 595, 588,
	-1000, -268, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
	1000, 1000, 13121, 1000, 1620, 1000, 1000, 1000, -1000, 1000,
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1347, 615, 17,
	615, 1304, 1290, 615, 615, -1000, -1000, 1082, 619, -1000,
	-1000, -1000, -1000, 1294, -1000, 1292, -1000, 42, 35, -1000,
	1241, 1429, -1000, 1273, 1435, 1553, 4568, 3635, 1523, 1522,
	1425, 465, 1425, 1705, 216, 3635, 1802, 8558, 1802, 359,
	8957, 959, 999, -1000, -1000, -1000, 2850, -1000, 309, 999,
	-1000, -1000, -1000, 406, 438, 3635, 476, 438, 438, 1764,
	438, -1000, 665, 572, 6563, -1000, -1000, 1271, -1000, 236,
	1464, 1464, 13121, 1654, 1654, 1654, 1000, 565, 1000, 1000,
	1000, 1000, 1000, 1000, 13121, 1000, 1620, 1000, 1000, 1000,
	1000, 1000, 1000, 1000, 105, -1000, 117, 553, 553, -225,
	251, 249, -221, 1000, 1403, 1521, -1000, 4568, 580, 1514,
	1251, -1000, 184, 227, -1000, -1000, -1000, -1000, -1000, -221,
	1510, -1000, -1000, -1000, 781, -1000, 1509, 1505, -1000, 1502,
	13121, 8558, 859, 123, -1000, 1428, -1000, 908, 13121, 13121,
	869, -1000, 245, 13468, 864, 735, 13624, 13624, 13624, 13624,
	13624, 13624, 13624, 13624, 13624, 13624, 13624, 13624, 13624, 13624,
	13624, 13624, 13624, 13624, 13624, 920, 3713, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1011,
	-1000, 1425, 1485, 1067, 1067, 1067, 317, 1233, 12762, 1722,
	1811, 383, -1000, 1255, 1255, -1000, -1000, -1000, 38, 12762,
	38, 38, 38, 38, 38, 91, -1000, 12091, -1000, 7760,
	8957, 3706, 12606, 12606, 12606, 12606, 10931, 13121, 12606, 12606,
	12606, 1679, 766, 383, 1485, 1704, 1067, 1067, 1067, -1000,
	1067, -1000, -1000, -1000, -1000, -1000, -1000, 12606, 12606, 12606,
	12606, -1000, -1000, 615, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 17, 957, 17, -32, -34, -1000, 901, -1000,
	895, 4568, 999, 3635, 1230, 1427, 1654, 1501, 8558, 4568,
	-1000, 1425, 3635, -1000, 475, 1762, -1000, -1000, 1703, -1000,
	1426, -1000, -1000, 1344, 1802, -1000, 1249, -1000, 1500, -1000,
	999, -1000, -1000, 164, 999, -1000, 149, -1000, -1000, -1000,
	-1000, -1000, 438, 149, 415, 438, 415, 955, 999, -1000,
	-1000, -1000, -1000, 2743, 4568, 1654, -1000, -1000, -1000, 1654,
	827, -1000, -1000, -1000, -1000, -1000, 8957, -1000, 118, -1000,
	797, -1000, -1000, 804, 182, 793, -1000, 999, -221, 1497,
	13121, 8957, 13121, 4568, 1245, 185, -1000, 13121, 1734, 13121,
	1158, 1158, -1000, 999, 1000, -1000, 852, -1000, 832, 1177,
	580, 1239, -175, 13121, 1495, 676, -1000, 245, 265, -1000,
	-1000, 806, -1000, -1000, 2717, 1000, 1000, 1000, -1000, -1000,
	-1000, -1000, 12762, 864, 13624, 13624, 13624, 412, 2717, 2717,
	2717, 2717, 2717, 3327, 1225, 3127, 38, 57, 57, 34,
	34, 34, 34, 34, 106, 106, -1000, -1000, -1000, -1000,
	-1000, 20, -1000, -1000, -269, -1000, -271, -1000, 1067, 1067,
	-1000, -1000, -1000, -1000, -1000, 13121, -1000, 1067, 1711, 1720,
	1425, 1678, 1606, -1000, -1000, -1000, 954, -1000, -1000, 1067,
	12606, 1176, 1233, -1000, 593, -1000, 561, 1000, -1000, 73,
	-1000, -1000, 2717, 1176, 593, 1176, 1176, 1176, 732, 1421,
	13956, 1464, 932, 1464, 1491, -1000, -1000, 64, 941, 59,
	-1000, -1000, -1000, -1000, 1491, -1000, -1000, -1000, -1000, -1000,
	1464, 1464, -1000, -1000, 1464, 1464, -1000, 1464, 1464, 788,
	1385, 1367, 1176, 12606, -1000, 755, -1000, 13121, 1067, 3635,
	-1000, -1000, -1000, -1000, 1176, 1067, 1418, 1176, 1176, -1000,
	615, -1000, 615, -1000, -1000, 1164, 1131, 1126, 1487, 1482,
	-229, 4568, 1229, 1222, 1067, 1673, 999, -1000, -1000, -1000,
	-1000, -1000, 162, 765, 8957, 3143, 1312, -1000, 925, -1000,
	3238, 1478, 147, 416, -1000, 438, 97, 149, -1000, -1000,
	-1000, -1000, 415, -1000, -1000, 643, 1549, 3511, 173, -1000,
	1007, 727, 924, 716, 715, 706, 705, 703, 696, 691,
	688, 686, 683, -1000, -1000, -1000, 1654, 1000, -1000, -1000,
	242, 1804, -1000, -1000, 242, 1792, 1477, 1470, 4568, 580,
	1469, 1195, 1186, 2743, -1000, -130, 1182, -1000, 13121, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1180, -1000, 13121, -1000, -1000, -1000, 185, 293, -1000, -1000,
	695, -1000, 1100, -1000, -1000, -1000, 13624, 13624, 13624, -1000,
	412, 2717, 1060, -1000, 13624, 13624, -1000, -275, -276, -1000,
	-1000, 383, -1000, 1646, 13121, 13121, 1722, -1000, 1425, -1000,
	-1000, 1679, -1000, -1000, 814, -1000, 1176, 12606, -264, -1000,
	-1000, -1000, 942, -1000, -1000, 6164, 12606, -1000, 13624, -264,
	-264, -1000, -1000, 4548, 920, 13121, -1000, 894, 240, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4548, 13624, 13624, 13624, 13624, -155, 1384, 760, -1000,
	13121, 763, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -229, 4568, 4568, 1734, 1468, 1094, 1734, 2743,
	-1000, 1425, 1308, 152, 83, 13121, -1000, 2953, -1000, 3143,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1722, 13121, -1000, -1000, -1000, -1000, -1000, 999,
	4121, 999, 999, 999, 332, 13121, 998, 13121, -1000, -1000,
	-1000, -1000, -1000, 3635, -1000, 1090, 11447, 3238, 3238, 11447,
	3238, 3238, 4568, 4568, 1467, 1466, 241, -1000, 69, -1000,
	-1000, 921, -1000, 999, -1000, -169, 3511, 999, -1000, 892,
	-1000, -1000, 819, 855, 819, 819, 819, 819, 819, 178,
	840, 395, -1000, 105, 553, 105, 553, 999, 4568, 1173,
	185, 13121, 1734, 2743, 1549, -1000, 1734, 383, 371, 999,
	580, -1000, 1771, 105, -184, 640, -1000, 2087, 2087, 2087,
	-1000, 13624, 2717, 2717, -1000, -1000, -1000, 1796, 654, 700,
	1398, -1000, 542, 1711, 1067, 1496, -1000, -1000, -1000, -1000,
	1000, -1000, -1000, 560, 1067, -1000, -1000, -1000, 1067, 1464,
	-1000, 1464, 1067, 552, -1000, -1000, 1067, 2393, 2517, 2162,
	997, 1000, -126, -1000, 383, 13121, 1734, 1071, 1171, 2743,
	8558, -229, 2743, -1000, -1000, -143, 13121, 3143, 7047, 383,
	7047, -1000, 3143, 176, 1711, 4070, 420, 3415, 3494, 1387,
	335, -1000, 4967, 857, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 999,
	1763, 1752, 1748, 1746, 11834, 13121, 13121, -1000, 1701, -1000,
	-1000, 11187, -1000, -1000, -1000, -1000, -1000, 1169, 1163, 4568,
	4568, 1460, -1000, -1000, 1000, 1125, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 781, -1000, 781, 1108,
	1105, 2743, -1000, 1103, -1000, 1549, 242, -1000, 3635, -1000,
	185, 553, 553, -1000, -1000, -1000, -1000, 168, 704, 676,
	676, 828, 68, -1000, 1717, -1000, -1000, -1000, 2717, -1000,
	1617, 13121, 13121, 13121, -1000, 1646, -1000, 12606, -1000, 573,
	7361, -1000, -1000, -1000, -1000, 13624, -1000, -1000, 13624, -1000,
	13624, -1000, 13624, -1000, 13624, 13624, 1067, 877, 383, 2743,
	1734, 2743, 1549, 1099, 1734, 1549, -1000, -258, 383, 2953,
	3054, -1000, -1000, 150, 6648, -1000, 1646, 3143, 739, -1000,
	750, -1000, 7047, 3499, 3635, 1130, 1383, 1401, -1000, -1000,
	-1000, 1671, 583, 2832, 999, 139, 4078, -1000, -1000, 1386,
	5366, -59, -1000, -1000, -1000, 681, 559, 890, -1000, 1633,
	-1000, -1000, 4121, 1647, -1000, -1000, -1000, -1000, -1000, 7047,
	-1000, 1377, 1067, 765, 158, -1000, 242, 1097, 1093, 4568,
	999, -1000, 3511, 242, 242, 369, 2743, 1549, 1734, -1000,
	105, 1459, -1000, 242, 242, 676, -1000, 676, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2190, 1615, 383, 383, -1000,
	-1000, 1352, -1000, 1716, 1067, -1000, 2087, 2087, 2087, 2087,
	2087, 594, -1000, -1000, 1549, 2743, -1000, -1000, -1000, 2743,
	-1000, 13121, 5850, -1000, -1000, -1000, -1000, 2713, 9441, 447,
	2394, 204, 3635, -1000, 204, 1157, 3494, -1000, -1000, 1485,
	3494, 3494, 3494, 3494, 3494, -1000, 1600, 1590, -1000, 1597,
	1589, 1596, 3635, 1089, 583, 611, 1000, -1000, 3702, -1000,
	-1000, -1000, 1671, 1700, -1000, 5765, 1386, -59, 1382, -1000,
	-56, -53, 11732, 8957, 615, -1000, -1000, -1000, -1000, -1000,
	999, 2313, -1000, 76, 151, 105, 2743, 2743, 1079, 1067,
	-1000, 105, 105, 3635, 1549, 242, -1000, -1000, 8957, 105,
	105, -1000, -1000, -1000, 557, -1000, 1734, 3494, 13121, -1000,
	-1000, -1000, -1000, -1000, -1000, 1067, 195, -174, -1000, -1000,
	1549, 383, -1000, -1000, 5052, -1000, -1000, 13121, -1000, 13121,
	7047, -1000, 1291, 1000, -1000, 1734, 3494, 1300, 1303, -1000,
	680, 1401, 1457, 1552, 944, -1000, -1000, -1000, -1000, 1586,
	-1000, 1438, -1000, -1000, -1000, -1000, -157, 492, 491, 490,
	999, -1000, 1425, -1000, 1382, -59, -68, -1000, -1000, -1000,
	-1000, 383, 675, -1000, 1380, -1000, 7047, -1000, -1000, 1549,
	1549, -1000, -1000, -1000, -1000, 1453, -1000, 105, 1077, -1000,
	-1000, -1000, 8957, 1732, 1378, 1073, -1000, 383, -1000, 1614,
	-140, -177, -1000, 439, 3143, 11142, 11751, 1547, 1485, 1000,
	-1000, 9356, 999, 1722, 1300, -1000, 1734, 1485, 13121, -1000,
	-1000, 13121, 1446, -1000, 13121, -1000, -1000, -1000, -1000, 1437,
	1000, 1000, 1000, 1070, -1000, -1000, -1000, -1000, -78, -71,
	-1000, 13121, 2013, -1000, -1000, 8957, -1000, -1000, 8957, -1000,
	1729, 1713, -1000, 1067, 13121, -1000, 1609, -1000, -1000, 338,
	739, -1000, -1000, 1643, 1200, 1355, -1000, -1000, 12247, 1067,
	1075, -1000, -1000, 549, -1000, -1000, 1070, 1711, -1000, 1722,
	-1000, 383, 383, 8558, 383, 206, 8558, 8558, 8558, 3306,
	999, -1000, -1000, -1000, 383, 5451, 1066, -1000, -1000, 13121,
	13121, -1000, -1000, -154, 4234, 233, -1000, 1000, -1000, -1000,
	1288, 10553, 999, -1000, -1000, 1711, 1064, 1062, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1059, 1059, 1059,
	611, -1000, -1000, -1000, 383, 1377, -183, 434, 1795, -1000,
	1000, -1000, 1425, -1000, -1000, -1000, -1000, -1000, 206, -1000,
	-1000, -1000, -157, -180, -1000, 1485, 1355, 1067, -1000, -1000,
	-1000, 1159, -1000,
}

var yyPgo = [...]int16{
	0, 2054, 38, 18, 2053, 2050, 2043, 2042, 2041, 2040,
	2039, 2038, 2037, 2036, 2035, 36, 35, 46, 41, 48,
	2032, 2031, 2030, 2029, 2028, 2026, 2025, 98, 2024, 2020,
	2018, 2017, 768, 102, 94, 2011, 2005, 1998, 1996, 1993,
	96, 67, 110, 97, 2543, 34, 45, 50, 55, 1992,
	33, 1986, 1984, 65, 1981, 44, 1976, 1975, 68, 1974,
	1967, 5, 22, 109, 1966, 51, 1965, 1963, 117, 2846,
	1656, 1610, 1220, 1962, 1960, 100, 9, 81, 4, 7,
	13, 1959, 296, 1, 1957, 99, 84, 1954, 1952, 1951,
	39, 1947, 70, 106, 14, 79, 1946, 15, 8, 82,
	49, 27, 20, 2, 57, 37, 1944, 26, 40, 30,
	1943, 74, 1940, 118, 125, 54, 75, 10, 2215, 0,
	124, 103, 1939, 1937, 1936, 116, 1935, 1409, 90, 43,
	16, 52, 86, 1934, 101, 1932, 63, 112, 111, 1930,
	1929, 1927, 1926, 1925, 1924, 1923, 316, 730, 1919, 107,
	77, 1916, 1915, 1910, 279, 274, 126, 280, 121, 89,
	1909, 1908, 1904, 1903, 131, 122, 76, 113, 1901, 80,
	108, 66, 21, 339, 1900, 1899, 1896, 1895, 1890, 1886,
	1883, 120, 1882, 85, 261, 47, 414, 56, 1881, 1880,
	1879, 1877, 1877, 1876, 1875, 1874, 78, 1873, 1872, 146,
	87, 129, 1872, 1871, 1869, 1868, 115, 88, 1864, 123,
	127, 1863, 104, 1755, 144, 119, 29, 31, 64, 69,
	1850, 1849, 1846, 6, 3, 1845, 42, 32, 1843, 128,
	1840, 95, 1839, 92, 1838, 19, 1829, 1828, 53, 1827,
	1823, 1821, 1820, 1819, 493, 1547, 1818, 83, 130, 1817,
	145,
}

var yyR1 = [...]uint8{
	0, 240, 241, 241, 1, 1, 1, 1, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 22, 22, 22, 22, 22,
	22, 213, 213, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 214, 214, 215, 215, 215,
	23, 23, 23, 243, 243, 2, 2, 3, 4, 4,
	5, 5, 6, 6, 30, 30, 7, 8, 8, 8,
	246, 246, 53, 53, 100, 100, 9, 9, 9, 9,
	10, 10, 220, 220, 219, 221, 221, 11, 11, 11,
	11, 11, 211, 211, 211, 211, 211, 12, 12, 217,
	217, 217, 15, 15, 15, 15, 16, 16, 17, 17,
	17, 19, 19, 105, 105, 109, 109, 109, 110, 110,
	110, 110, 232, 232, 133, 133, 242, 242, 247, 247,
	247, 247, 247, 247, 247, 209, 209, 209, 209, 210,
	210, 210, 210, 212, 212, 216, 216, 216, 216, 216,
	216, 218, 218, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 13, 13, 31, 31, 77, 77,
	14, 116, 116, 190, 190, 190, 191, 191, 191, 191,
	191, 191, 193, 193, 194, 194, 123, 123, 195, 195,
	26, 175, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 158, 158, 158, 158, 158, 136, 136, 136, 136,
	136, 136, 136, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 201, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 203, 204, 205, 197,
	197, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 148, 148, 148, 148, 148,
	148, 196, 196, 192, 192, 192, 192, 140, 140, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 139,
	139, 139, 139, 139, 139, 139, 144, 144, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 137,
	137, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 145, 145, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 157, 157, 146, 146, 155, 155,
	156, 156, 156, 147, 147, 147, 154, 154, 154, 151,
	151, 152, 152, 153, 153, 153, 149, 149, 149, 150,
	150, 150, 160, 186, 186, 186, 188, 188, 189, 189,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 174, 174, 206, 206, 207, 207,
	208, 208, 185, 185, 185, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 173, 173, 183,
	183, 184, 184, 181, 181, 181, 181, 181, 181, 181,
	181, 182, 167, 167, 167, 167, 167, 168, 168, 169,
	169, 169, 169, 161, 161, 162, 162, 163, 163, 164,
	164, 164, 164, 166, 166, 165, 165, 33, 33, 33,
	33, 33, 33, 33, 33, 199, 199, 199, 236, 236,
	236, 236, 236, 236, 237, 237, 200, 200, 170, 170,
	171, 171, 172, 172, 179, 179, 179, 179, 248, 248,
	177, 177, 177, 178, 178, 178, 249, 27, 28, 28,
	29, 29, 29, 36, 36, 36, 34, 34, 35, 35,
	42, 42, 41, 41, 43, 43, 43, 43, 122, 122,
	122, 121, 121, 233, 233, 233, 233, 233, 45, 45,
	46, 46, 47, 47, 48, 48, 48, 223, 223, 222,
	222, 224, 224, 224, 224, 224, 224, 224, 224, 60,
	60, 97, 97, 97, 101, 101, 49, 49, 49, 49,
	50, 50, 51, 51, 52, 52, 131, 131, 130, 130,
	130, 129, 129, 54, 54, 54, 56, 55, 55, 55,
	55, 57, 57, 59, 59, 58, 58, 61, 61, 61,
	61, 62, 62, 99, 99, 44, 44, 44, 44, 44,
	44, 44, 44, 112, 112, 64, 64, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 74, 74, 74,
	74, 74, 74, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 40, 40, 75, 75, 75, 82,
	76, 76, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 72, 72, 72, 72, 72, 72, 72,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 71, 71, 71, 71, 71, 71, 71,
	71, 250, 250, 73, 73, 73, 73, 37, 37, 37,
	37, 37, 132, 132, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 86, 86, 38, 38,
	84, 84, 85, 115, 115, 87, 87, 83, 83, 83,
	83, 83, 225, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 65, 65, 88, 88, 89, 89, 234,
	234, 235, 90, 90, 91, 91, 92, 93, 93, 93,
	94, 94, 94, 94, 95, 95, 95, 67, 67, 67,
	67, 67, 67, 96, 96, 98, 98, 98, 98, 102,
	102, 78, 78, 80, 80, 79, 81, 103, 103, 107,
	104, 104, 108, 108, 108, 108, 108, 24, 25, 106,
	106, 106, 126, 126, 126, 114, 114, 124, 124, 111,
	111, 113, 113, 113, 125, 125, 119, 120, 120, 120,
	120, 120, 127, 127, 127, 128, 128, 226, 226, 226,
	227, 227, 227, 228, 228, 229, 229, 230, 230, 231,
	39, 39, 239, 239, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 118, 118, 118, 118, 118,
	118, 118, 118, 244, 245,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 2, 13,
	12, 14, 12, 13, 12, 10, 7, 10, 7, 11,
	11, 9, 13, 16, 5, 8, 8, 4, 4, 3,
	3, 3, 6, 6, 6, 7, 6, 11, 13, 13,
	14, 14, 6, 7, 6, 8, 9, 8, 8, 9,
	8, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	6, 8, 10, 1, 1, 4, 6, 10, 1, 3,
	1, 3, 7, 8, 1, 1, 9, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	2, 6, 1, 3, 3, 0, 1, 2, 2, 2,
	3, 5, 0, 2, 2, 2, 2, 3, 5, 1,
	2, 3, 7, 10, 1, 1, 5, 5, 3, 5,
	3, 1, 3, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 0, 3, 0, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 4, 2, 3,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 4, 1, 1, 0, 1,
	2, 0, 3, 0, 2, 2, 0, 2, 2, 2,
	2, 2, 0, 2, 0, 3, 0, 1, 0, 2,
	4, 4, 0, 1, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 1, 3, 2, 2, 3, 2, 4, 2, 4,
	2, 2, 3, 2, 3, 2, 7, 9, 3, 3,
	6, 9, 9, 8, 11, 11, 6, 6, 8, 8,
	5, 8, 7, 4, 0, 2, 2, 1, 1, 2,
	1, 2, 2, 1, 1, 3, 1, 2, 1, 1,
	2, 0, 4, 3, 4, 3, 3, 3, 3, 3,
	3, 3, 2, 4, 6, 2, 3, 2, 3, 1,
	3, 0, 2, 0, 2, 2, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 2, 2, 2, 1, 1, 0, 1, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 4, 5, 4, 4, 4, 1, 2, 2, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 3, 3, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 6, 0, 1, 4, 1, 2, 1, 3,
	2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 5, 2, 3, 3, 2, 3,
	2, 3, 3, 2, 2, 3, 4, 1, 1, 1,
	1, 1, 3, 3, 2, 3, 2, 4, 2, 2,
	2, 1, 4, 7, 7, 10, 10, 13, 11, 1,
	1, 2, 2, 10, 8, 11, 9, 7, 5, 9,
	7, 7, 5, 1, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 0, 1,
	1, 1, 2, 2, 1, 2, 0, 3, 0, 1,
	1, 3, 1, 3, 0, 4, 1, 3, 2, 1,
	1, 2, 1, 1, 1, 1, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 3, 6, 4, 7, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 0, 4, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	8, 1, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 0, 4, 1, 3, 3, 2, 3,
	2, 1, 2, 0, 3, 1, 1, 3, 6, 6,
	6, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 5, 6, 2, 4, 3, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 3, 3, 3, 1, 1, 1,
	1, 2, 1, 4, 5, 5, 5, 5, 6, 4,
	4, 4, 6, 6, 8, 6, 6, 6, 8, 6,
	8, 6, 8, 6, 8, 9, 7, 5, 4, 4,
	3, 3, 3, 1, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 2, 2, 1, 2, 2, 1, 2, 1, 1,
	1, 3, 1, 1, 3, 1, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 0, 2, 1, 1, 1,
	3, 5, 3, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 0, 3, 0, 2, 1,
	3, 1, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 1, 3, 1, 1, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 5, 3, 1, 3, 1,
	2, 1, 1, 1, 1, 0, 3, 0, 3, 0,
	1, 0, 1, 1, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 2,
	0, 2, 2, 0, 1, 4, 3, 1, 3, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -240, -1, -20, -21, -22, -23, -26, 130, 131,
	223, 224, 71, -241, 407, -175, 58, -236, -237, 292,
	-195, 139, 152, 174, 175, 377, 136, 222, 137, 389,
	390, 154, 392, 79, -111, 142, -213, 21, -32, 6,
	8, 9, 10, 163, 147, 174, 130, 166, 165, 167,
	-119, 61, -213, 21, 56, -176, -158, -119, -118, 318,
	63, 36, 402, 403, 152, 175, 177, 178, 305, 227,
	138, 138, 138, 140, 220, 140, -119, -119, -83, 143,
	61, -118, 318, -127, 63, -58, -127, 61, -118, 137,
	-124, 143, 63, -119, 276, 143, -114, 143, 392, 389,
	390, 357, 137, 56, 59, 225, 56, 56, 225, 56,
	137, 145, 60, 59, -159, -136, -140, -137, -142, -141,
	-143, -119, -138, -139, 265, 369, 262, 266, 263, 268,
	269, 270, 124, 267, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 271, 283, 33, 159, 253,
	254, 255, 256, 257, 260, 259, 261, 258, 126, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 245, 246,
	248, 249, 250, 252, 251, -159, -159, -159, -159, -119,
	56, 219, -119, -119, -114, 221, -114, 56, -209, 19,
	199, 200, 212, 56, 81, 127, 25, 127, -114, -119,
	63, 81, 81, -58, 81, -58, 321, 137, -32, 56,
	137, 137, 56, 137, -58, -127, -179, -248, 372, 37,
	-158, -160, -167, -161, -162, -163, -164, -180, -168, 146,
	144, 154, 405, 226, 148, 149, 292, -173, 150, 138,
	155, 73, 81, -201, 146, -204, 56, 300, 306, 144,
	155, 154, 405, 71, 147, 25, 379, 381, 31, 32,
	-153, 408, 294, -151, 303, 127, -146, 58, -146, -145,
	264, -147, 58, -146, -147, -146, -147, -149, 266, -149,
	-149, -149, -149, 58, 58, -146, -146, -146, -146, -146,
	-146, -146, 58, -155, 58, -144, 247, -155, -156, 58,
	-156, 56, 57, -58, -119, 56, 56, -58, -232, 402,
	403, -58, -58, -212, -210, 8, 9, 10, 213, -58,
	26, -120, -128, -119, 314, 151, -117, -118, -127, 135,
	200, 380, 80, 25, 27, 300, 306, 199, 84, 124,
	16, 85, 206, 389, 390, 123, 76, 358, 130, 52,
	350, 351, 204, 360, 361, 349, 307, 211, 20, 31,
	10, 28, 157, 24, 117, 132, 201, 89, 88, 160,
	164, 165, 26, 158, 75, 207, 209, 19, 55, 150,
	11, 379, 13, 14, 394, 381, 143, 142, 100, 393,
	138, 50, 8, 126, 29, 97, 46, 155, 210, 48,
	98, 17, 352, 353, 34, 367, 168, 119, 53, 40,
	395, 81, 396, 73, 56, 321, 205, 79, 15, 51,
	169, 397, 208, 401, 99, 133, 357, 176, 49, 202,
	398, 136, 203, 6, 363, 33, 156, 47, 137, 308,
	399, 87, 141, 74, 5, 154, 9, 400, 54, 57,
	354, 355, 356, 38, 86, 12, 153, 371, 77, -136,
	283, -128, -117, -58, 26, 26, 26, 135, -58, -53,
	-58, 137, -58, -58, 137, -58, 97, 127, -177, 59,
	-120, 71, -117, -118, 36, 58, -200, 56, 81, -170,
	-119, 155, -173, 61, 138, -199, 389, 390, -244, 58,
	57, 58, -173, -173, 61, 138, 155, 61, 155, 73,
	19, -119, 9, 155, 155, -200, 63, -58, 58, -197,
	380, 16, 58, -203, -44, -63, 81, -69, 31, 26,
	9, 76, -244, -68, -64, -83, -225, -81, -82, 159,
	253, 254, -229, 124, 125, 113, 114, 121, 82, 126,
	-72, -70, -71, -73, -228, 186, 63, 64, -119, 62,
	72, 65, 66, 67, 68, 73, 74, 75, -127, 326,
	-79, 294, 366, 365, 48, 49, 358, 359, 360, 361,
	367, 362, 85, 38, 40, 271, 295, 296, 348, 356,
	355, 354, 352, 353, 350, 351, 143, 349, 119, 357,
	293, -205, 65, 409, -152, 304, -119, 65, -149, -146,
	-149, 65, 61, -149, -149, -150, 124, 123, 33, -150,
	-150, -150, -150, -157, 63, -157, -154, 371, 372, -154,
	65, 65, -155, 65, -58, -119, 58, 56, -58, -58,
	25, 140, 25, -190, 25, 56, 59, 213, -209, -119,
	127, 58, 57, 63, -119, 276, 145, -158, -123, 146,
	-167, -164, 154, 135, 141, 59, -58, 141, 11, -58,
	11, 63, -119, -128, 90, -120, -248, -184, -181, -120,
	155, 318, 58, -72, -70, -71, -119, -127, 48, 49,
	358, 360, 361, 367, 85, 38, 40, 356, 355, 354,
	352, 353, 350, 351, -226, 215, 81, 10, 9, 19,
	150, 144, 154, 405, 226, -199, 61, 58, -44, -120,
	-166, -165, -119, -44, 61, 61, 61, 61, -199, 154,
	-170, -119, 391, -201, 405, -148, 348, 351, 350, 296,
	-244, 58, -44, 25, 31, -65, 65, 114, 80, 79,
	97, 214, -44, -66, 100, 81, 98, 105, 106, 107,
	108, 99, 84, 110, 109, 120, 113, 114, 115, 116,
	117, 118, 119, 111, 112, 123, 404, 90, 91, 92,
	93, 94, 95, 96, 101, 102, 103, 104, -112, -244,
	-82, -244, -244, -244, -63, -2, -69, -76, -244, -3,
	-4, -44, 6, 128, 129, 63, 63, 63, -69, -244,
	-69, -69, -69, -69, -69, -69, -229, -244, 63, 127,
	127, 408, -244, -244, -244, -244, -244, -244, -244, -244,
	-244, -244, -86, -44, -244, 41, -244, -244, -244, -250,
	-244, -250, -250, -250, -250, -250, -250, -244, -244, -244,
	-244, 60, -150, -149, -150, 60, 60, -150, -150, 61,
	61, 124, 60, 59, 60, 253, 253, 60, 59, 60,
	59, 58, 57, 56, -183, -184, -72, -58, 58, 58,
	-2, -244, -114, -2, -191, 19, 183, 184, -58, -210,
	-97, -120, 155, -212, -209, -120, -39, 63, -119, -158,
	-243, 138, 155, -119, 146, -167, -214, -215, -119, 63,
	185, -58, 141, -214, -214, 11, -214, 97, 127, -178,
	-120, 63, 65, 60, 59, -146, -182, 298, -146, -146,
	-44, -93, 27, 28, -93, -93, 127, -227, 216, 215,
	-169, 179, 180, 33, 181, -169, 391, 155, 155, -199,
	-244, 57, 58, 58, -184, -245, 60, 58, 60, 59,
	371, 371, -199, 58, -200, -146, 58, -146, 58, 58,
	-44, -97, 60, 58, 381, 59, 65, -44, -44, -74,
	73, 81, 74, 75, -69, 21, 22, 23, -75, -79,
	-82, 69, -244, 100, 98, 99, 84, -69, -69, -69,
	-69, -69, -69, -69, -69, -69, -69, -69, -69, -69,
	-69, -69, -69, -69, -69, -69, -132, 61, 63, -135,
	124, 266, 159, 257, -138, -137, 272, 271, 61, -83,
	-119, -245, -245, -245, -245, 59, -245, -2, -90, 15,
	-29, 5, -27, -249, -68, 63, -119, -68, -119, -42,
	24, -41, -76, -43, -44, 115, -127, -120, -120, -230,
	409, -231, -69, -41, -44, -41, -41, -41, -44, -134,
	124, 262, 159, 257, 249, 281, 282, 302, 253, 303,
	242, 234, 239, 252, 250, 236, 251, 235, 248, 245,
	260, 259, 261, 272, 263, 268, 270, 269, 267, -44,
	-43, -43, -41, -34, 24, -84, -85, 86, -83, 19,
	-245, -245, -245, -245, -41, -42, -41, -41, -41, -150,
	-149, 63, -149, 305, 305, 65, 65, -183, -119, -58,
	60, 58, -97, -184, -2, -58, 141, 21, 6, 8,
	9, 10, 19, -116, 59, 25, -212, 60, 59, -242,
	58, -119, 154, -119, -125, 59, 371, -214, -125, -113,
	180, 179, -214, -113, 63, -119, -186, -188, 371, -187,
	57, 151, 71, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 61, -181, -93, -93, 60, -120, 218, 217,
	-200, 56, 73, 182, -200, 56, -170, -199, 58, -44,
	-120, -166, -184, 60, -196, 181, -166, -62, 12, -165,
	-33, 90, 95, 91, 92, 80, 93, 94, -119, -33,
	-171, -119, -244, 60, 60, 60, -245, 60, 377, 378,
	-44, 58, -65, 73, 74, 75, -244, -244, -244, -75,
	-69, -69, -69, -40, 160, 80, 264, 408, 408, -245,
	-245, -44, -245, -94, 17, 16, -5, -3, -244, 21,
	24, -36, 44, 45, -28, -245, -41, 59, -245, -245,
	-122, -121, 25, -119, 63, 127, -244, 409, 59, -245,
	-245, -245, -245, 59, 57, 59, -146, 58, -146, -146,
	-156, 240, -146, 240, -156, -146, -146, -146, -146, -146,
	-146, 25, 59, 11, 59, 11, -245, -41, -87, -85,
	89, -44, -245, -127, -245, -245, -245, -245, -150, -150,
	60, 60, 60, 58, 58, -99, 393, -183, 60, 60,
	-245, 25, -171, 201, -115, 86, -120, -216, -218, 229,
	-18, -15, -6, -8, -7, -10, -9, -11, -12, -13,
	-14, -24, -3, 143, -16, -17, -30, 10, 9, 20,
	33, 205, 206, 211, 207, 153, -31, 176, -25, 8,
	357, 164, 165, 56, 63, -247, -119, 113, 90, 63,
	-158, 59, 58, 58, 389, 390, 144, -215, 223, -125,
	-113, 97, -185, 56, -187, 371, 58, 373, 61, -174,
	90, 63, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, -93, -226, 9, -226, 10, 58, 58, -184,
	-245, 58, 60, 60, -186, 364, 60, -44, 60, 59,
	-44, -196, 56, -226, 60, -198, 60, -69, -69, -69,
	-40, 80, -69, -69, 409, 409, -95, 19, 34, -44,
	-91, -92, -44, -90, -2, -34, 70, -245, -43, -233,
	406, -121, 115, -128, -42, -231, -233, -233, -134, 124,
	159, 253, -132, -44, -149, 61, -134, -69, -69, -69,
	-69, 368, -90, 88, -44, 87, -99, -183, -184, -62,
	58, 60, -62, -186, -2, -193, 57, 202, 229, -44,
	407, -218, 229, -216, -90, -44, -27, -27, -27, -220,
	-119, -219, -27, -239, -238, 327, 328, 329, 330, 331,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, -119, -119, -119, -211,
	40, 208, 209, 210, -44, -119, -244, -86, -58, 60,
	-247, -119, -247, -247, -247, -247, -247, -184, -184, 58,
	58, 155, 228, 63, -119, -189, -187, -119, 65, -206,
	56, 77, 65, -206, -206, -206, -206, -206, -207, 197,
	198, 65, -208, -207, 65, -227, -169, -227, -169, -171,
	-184, 60, -196, -166, -62, -186, -185, -62, 147, -119,
	-245, 10, 9, -227, 377, 378, 60, 230, 383, 384,
	168, 385, 181, 386, 387, -245, -245, -245, -69, 9,
	100, 59, 18, 59, -93, -94, -245, -35, 47, -244,
	127, -245, -245, -245, -245, 59, -245, -245, 59, -245,
	19, -245, 59, -245, 19, -244, -38, 363, -44, -62,
	60, 60, -186, -97, -99, -186, -194, 371, -44, -216,
	-217, -218, -218, -216, 407, 88, -94, 87, -19, -15,
	-16, -18, 229, -111, 11, -53, -46, -47, -48, -49,
	-60, -82, -244, -58, 59, -221, -131, 203, 25, -104,
	-133, 231, -108, 316, 315, -120, 326, -106, 314, 266,
	313, -206, 59, -119, 11, 11, 11, 11, -218, 229,
	-77, -76, -77, -116, 19, 60, 60, -184, -184, 58,
	-244, 60, 59, -200, -200, 60, 60, -186, 60, -185,
	-226, -58, -196, -169, -169, 371, -65, 16, -65, -65,
	-65, 65, 384, 168, 386, 16, 42, -44, -44, -92,
	-95, -41, -245, 169, -90, 115, -69, -69, -69, -69,
	-69, -69, -245, 63, -186, -62, -186, -185, 60, -62,
	-185, 405, 407, -218, 88, 88, -95, -216, 89, 89,
	-217, -59, 29, -58, -58, -53, -246, 11, 57, 33,
	59, -54, -56, -55, -57, 46, 50, 52, 47, 48,
	49, 53, -131, -46, -244, -130, 169, -129, 25, -127,
	63, -219, -119, 204, -136, 59, -104, 231, -105, -109,
	317, 319, 90, 127, -126, -119, 63, 31, 33, -238,
	29, -217, -245, -115, 201, -226, 60, 60, -184, -119,
	-187, -226, -226, 147, -186, -185, -62, -227, 58, -226,
	-226, -65, -65, 388, -127, 43, -45, 11, 16, -245,
	-245, -245, -245, -245, -245, -37, 100, 371, -185, -186,
	-186, -44, 88, -218, 407, -16, -19, 143, -17, 143,
	407, 88, -100, 169, -58, -100, 57, -46, -103, -107,
	-83, -47, -48, -48, -47, -48, 46, 46, 46, 51,
	46, 51, 46, -55, -127, -245, -61, 54, 142, 55,
	-244, -129, 19, -108, -105, 59, 318, 320, 321, 56,
	77, -44, -120, -150, -171, 88, 229, 202, -227, -186,
	-186, 60, -245, -227, -227, -58, -185, -226, -172, -120,
	-227, -227, 127, -62, -46, -234, -235, -44, -245, 369,
	53, 374, -185, 88, 89, -44, -44, -67, 33, 38,
	-2, -244, -244, -62, -46, -62, -45, 59, 90, -51,
	-50, 56, 57, -52, 56, -50, 46, 46, -223, 371,
	138, 138, 138, -101, -119, -2, -109, -110, 322, 319,
	325, 90, -217, -185, -185, 58, -227, 60, 59, -120,
	-88, 13, -245, -90, 59, 43, 370, 375, 143, -216,
	-19, -19, -102, 56, -103, -78, -80, -79, -244, -2,
	-96, -98, 6, -119, -117, -118, -101, -90, -62, -62,
	-107, -44, -44, 58, -44, 58, -244, -244, -244, -245,
	59, 319, 323, 324, -44, 407, -172, -120, -89, 14,
	16, -245, -235, 43, 407, 30, -102, 59, -245, -245,
	-245, 59, 127, -245, -94, -90, -97, -222, -224, 394,
	395, 396, 397, 398, 399, 400, 401, -97, -97, -97,
	-130, -119, 88, 60, -44, -76, 371, 88, 155, -80,
	38, -2, -244, -98, -119, -94, 60, 60, 59, -245,
	-245, -245, -61, 374, 143, 9, -78, -2, -224, -223,
	375, -103, -245,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 7, 0, -2, 909,
	0, 0, 0, 1, 3, 8, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 907, 0, 905, 499,
	500, 501, 504, 0, 0, 910, 0, 0, 51, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 916, 0, 0, 0, 0, 213, 264, 264, 264,
	264, 264, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	0, 0, 0, 905, 0, 905, 0, 827, 0, 0,
	-2, -2, 829, 0, 924, 0, 615, 922, 923, 905,
	0, 0, 29, 30, 31, 0, 0, 0, 505, 502,
	503, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 514, 0, 221, 393, 389, 227, 228, 229,
	230, 231, 376, 308, 339, 340, 376, 363, 383, 376,
	383, 346, 376, 383, 396, 396, 396, 396, 396, 354,
	355, 356, 357, 358, 359, 360, 0, 0, 328, 376,
	376, 376, 376, 376, 376, 376, 336, 337, 338, 365,
	366, 367, 368, 369, 370, 371, 372, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 378, 326,
	378, 380, 380, 324, 325, 222, 223, 224, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	156, 157, 0, 0, 0, 0, 0, 0, 0, 27,
	28, 0, 0, 210, 0, 0, 0, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 211, 516, 0, 519,
	214, 215, 216, 217, 218, 219, 220, 0, 506, 508,
	0, 495, 0, 0, 0, 0, 0, 0, 0, 447,
	448, 234, 0, 236, 0, 238, 0, 240, 241, 0,
	243, 245, 506, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 395, 391, 390, 0, 307, 0, 396, 376,
	364, 396, 0, 396, 396, 347, 348, 399, 0, 399,
	399, 399, 399, 0, 0, 386, 386, 331, 332, 333,
	334, 335, 0, 319, 0, 378, 327, 321, 322, 0,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	143, 0, 193, 0, 163, 159, 160, 161, 158, 0,
	0, 830, 0, 917, 918, 919, -2, -2, 925, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 24,
	0, 616, 926, 0, 908, 0, 906, 206, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	520, 522, 920, 921, 518, 0, 927, 0, 0, 0,
	509, 435, 0, 443, -2, 0, 496, 497, 0, 1103,
	0, 0, 0, 0, 438, 440, 0, 495, 508, 235,
	0, 0, 0, 242, 244, 0, 248, 249, 0, 0,
	279, 0, 0, 265, 276, 625, 0, 631, 633, 0,
	0, 0, 0, 682, 683, 684, 685, 686, 687, 0,
	0, 0, 691, 0, 0, 0, 0, 0, 0, 0,
	717, 718, 719, 720, 0, 722, -2, 834, 827, 836,
	837, 838, 839, 840, 841, 842, 635, 636, 0, 0,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 0, 753, 761,
	761, 761, 761, 761, 761, 761, 0, 0, 0, 0,
	934, 277, 278, 394, 226, 392, 232, 0, 399, 396,
	399, 0, 0, 399, 399, 349, 400, 0, 0, 350,
	351, 352, 353, 0, 374, 0, 329, 0, 0, 330,
	0, 0, 320, 0, 0, 0, 0, 0, 0, 0,
	0, 905, 0, 196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 32, 33, 34, 0, 36, 0, 508,
	42, 44, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 0, 0, 0, 521, 517, 0, 451, 376,
	-2, 376, 0, 857, 857, 857, 917, 0, 1035, 1064,
	983, 989, 990, 1041, -2, 1089, 1045, -2, -2, -2,
	-2, -2, -2, -2, 930, 928, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 0, 442, 0, 0, 0,
	0, 483, 827, 0, 436, 437, 439, 441, 445, 495,
	0, 509, 263, 237, 506, 239, 376, 376, 299, 0,
	0, 0, 0, 0, 280, 0, 843, 0, 0, 0,
	0, 630, 628, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 632, 0,
	653, 0, 0, 0, 625, 78, 631, 0, 0, 852,
	0, 680, 526, 0, 0, 688, 689, 690, 707, 0,
	708, 709, 710, 711, 712, 713, 721, 540, 835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 0, 817, 0, 0, 0, 0, 0, 754,
	0, 755, 756, 757, 758, 759, 760, 0, 540, 0,
	0, 377, 341, 399, 343, 384, 385, 344, 345, 401,
	397, 398, 396, 0, 396, 0, 0, 373, 0, 381,
	0, 0, 0, 0, 0, 449, -2, 0, 0, 0,
	-2, 0, 0, -2, 0, 0, 194, 195, 191, 164,
	162, 581, 582, 0, 0, 831, 0, 374, 146, 35,
	0, 73, 74, 509, 508, 43, 914, 65, 67, 68,
	69, 93, 0, 914, 911, 0, 911, 0, 0, 515,
	523, 524, 525, 403, 0, 857, 456, 461, 454, 857,
	0, 458, 858, 859, 459, 460, 0, 462, 0, 929,
	506, 469, 470, 0, 0, 506, 507, 508, 495, 0,
	0, 0, 0, 0, 0, 301, 1104, 0, 621, 0,
	0, 0, 446, 0, 0, 295, 0, 297, 0, 0,
	0, 0, 0, 0, 260, 0, 844, 626, 627, 629,
	657, 0, 659, 661, 637, 0, 0, 0, 641, 676,
	677, 678, 0, 0, 0, 0, 0, 674, 645, 646,
	647, 648, 649, 0, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 706, 772, 773, 715,
	806, 0, 808, 809, 810, 812, 813, 815, 0, 0,
	827, 655, 656, 679, 716, 0, 885, 78, 860, 0,
	0, 530, 533, 528, 704, 833, 0, 705, 714, 0,
	0, 0, 0, 542, 548, 544, 0, 830, 832, 0,
	936, 937, 939, 0, 548, 0, 0, 0, 0, 0,
	376, 376, 777, 376, 380, 780, 781, 782, 376, 785,
	787, 788, 789, 790, 380, 792, 793, 794, 795, 796,
	376, 376, 799, 800, 376, 376, 803, 376, 376, 0,
	0, 0, 0, 0, 537, 825, 820, 0, 0, 0,
	750, 751, 752, 762, 0, 0, 541, 0, 0, 342,
	399, 375, 399, 387, 388, 0, 0, 0, 0, 0,
	623, 0, 0, 0, 78, 0, 0, 197, 198, 199,
	200, 201, 0, 823, 0, 0, 0, 25, 0, 26,
	148, 0, 0, 509, 45, 0, 0, 914, 47, 48,
	912, 913, 911, 50, 71, 0, 432, 404, 0, 406,
	0, 424, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 452, 453, 455, 857, 0, 931, 932,
	927, 0, 471, 472, 927, 0, 0, 0, 0, 0,
	0, 0, 0, 403, 478, 0, 0, 482, 0, 484,
	485, 487, 488, 489, 490, 491, 492, 493, 494, 486,
	0, 510, 0, 296, 298, 300, 301, -2, 256, 257,
	0, 281, 0, 658, 660, 662, 0, 0, 0, 642,
	674, 650, 0, 643, 0, 0, 807, 0, 0, 634,
	654, 681, -2, 864, 0, 0, 852, 80, 0, 531,
	532, 536, 534, 535, 527, 723, 0, 0, 553, 729,
	545, 549, 0, 551, 552, 0, 540, 935, 0, 553,
	553, 730, 731, 0, 0, 0, 774, 1103, 396, 778,
	779, 783, 784, 786, 791, 797, 798, 801, 802, 804,
	805, 0, 0, 0, 0, 0, 0, 852, 0, 821,
	0, 0, 748, 749, 763, 764, 765, 766, 361, 362,
	379, 382, 623, 0, 0, 621, 0, 0, 621, 403,
	79, 0, 202, 0, 0, 0, 583, 21, 165, 0,
	171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 852, 0, 124, 125, 526, 526, 526, 0,
	526, 0, 0, 0, 112, 0, 0, 816, 897, 84,
	85, 186, 187, 0, 941, 0, -2, 148, 148, -2,
	148, 148, 0, 0, 0, 0, 0, 66, 0, 46,
	49, 0, 402, 0, 407, 0, 0, 0, 410, 0,
	425, 412, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 457, 930, 0, 930, 0, 0, 0, 0,
	301, 0, 621, 403, 432, 302, 621, 622, 0, 0,
	0, 246, 0, 930, 0, 0, 262, 0, 0, 0,
	644, 0, 675, 651, 811, 814, 75, 0, 0, 861,
	853, 854, 857, 860, 78, 538, 529, 724, 543, 725,
	0, 550, 546, 0, 0, 938, 726, 727, 0, 376,
	777, 376, 0, 0, 775, 776, 0, 0, 0, 0,
	0, 0, 818, 747, 826, 0, 621, 0, 0, 403,
	0, 623, 403, 15, -2, 204, 0, 192, 0, 824,
	0, 168, 0, 0, 860, 0, 909, 0, 0, 100,
	-2, 102, 0, 0, 942, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 107, 108, 109, 0,
	0, 0, 0, 0, 0, 188, 188, 190, 191, 147,
	149, -2, 150, 151, 152, 153, 154, 0, 0, 0,
	0, 0, 915, 72, 433, 0, 408, 413, 411, 414,
	426, 427, 415, 416, 417, 418, 419, 420, 421, 428,
	429, 422, 423, 430, 431, 463, 506, 464, 506, 0,
	0, 403, 477, 0, 480, 432, 927, 481, 0, 511,
	301, 0, 0, 253, 258, 259, 261, 0, 0, 0,
	0, 0, 0, 292, 0, 638, 639, 640, 652, 865,
	0, 0, 0, 0, 856, 864, 81, 0, 539, 0,
	0, 728, 732, 736, 733, 0, 735, 737, 0, 739,
	0, 741, 0, 743, 0, 0, 0, 0, 822, 403,
	621, 403, 432, 0, 621, 432, 19, 0, 203, 20,
	0, 119, 166, 0, 0, 169, 864, 0, 130, 128,
	124, 131, 0, 0, 0, 0, 0, 560, 562, 563,
	564, 596, 0, 598, 0, 0, 0, 106, 597, 96,
	0, 0, 890, 144, 145, 0, 0, 0, -2, 0,
	901, 898, 0, 110, 113, 114, 115, 116, 117, 0,
	184, 189, 0, 823, 0, 37, 927, 0, 0, 0,
	0, 405, 0, 927, 927, 0, 403, 432, 621, 474,
	930, 0, 247, -2, -2, 0, 283, 0, 285, 286,
	287, 288, 289, 290, 291, 0, 0, 862, 863, 855,
	76, 558, 554, 0, 0, 547, 0, 0, 0, 0,
	0, 767, 746, 819, 432, 403, 12, 10, 624, 403,
	14, 0, 0, 120, 170, 167, 183, 0, 0, 0,
	0, 94, 0, 614, -2, 0, 0, 90, 91, 0,
	0, 0, 0, 0, 0, 603, 0, 0, 606, 0,
	0, 0, 0, 0, 0, 617, 0, 599, 0, 601,
	602, 103, 596, 0, 104, 0, 97, 0, 99, 133,
	0, 0, 0, 0, 399, 902, 903, 904, 900, 943,
	0, 0, 185, 0, 0, 930, 403, 403, 0, 0,
	409, 930, 930, 0, 432, 927, 479, 476, 0, 930,
	930, 282, 284, 293, 0, 866, 621, 0, 0, 556,
	734, 738, 740, 742, 744, 0, 0, 0, 9, 13,
	432, 205, 22, 121, 0, 126, 127, 0, 129, 0,
	0, 132, 0, 0, 613, 621, 0, 621, 558, 887,
	0, 561, 592, 594, 0, 589, 604, 605, 607, 0,
	609, 0, 611, 612, 565, 566, 567, 0, 0, 0,
	0, 600, 0, 891, 98, 0, 0, 136, 137, 892,
	893, 894, 0, 896, 111, 118, 0, 192, 39, 432,
	432, 38, 434, 465, 466, 0, 473, 930, 0, 512,
	254, 255, 0, 845, 559, 0, 849, 851, 745, 0,
	0, 0, 11, 0, 0, 0, 0, 879, 0, 0,
	-2, 0, 0, 852, 621, 89, 621, 0, 0, 586,
	593, 0, 0, 587, 0, 588, 608, 610, 579, 0,
	0, 0, 0, 0, 584, -2, 134, 135, 0, 0,
	141, 0, 0, 40, 41, 0, 475, 468, 0, 294,
	847, 0, 555, 0, 0, 768, 0, 771, 122, 0,
	0, 130, 82, 0, 879, 867, 881, 883, 0, 78,
	0, 873, -2, 875, 877, 878, 0, 860, 88, 852,
	888, 889, 590, 0, 595, 0, 0, 0, 0, 598,
	0, 138, 139, 140, 895, 0, 0, 513, 77, 0,
	0, 557, 850, 769, 0, 0, 83, 0, 884, -2,
	0, 0, 0, 95, 87, 860, 0, 0, 569, 571,
	572, 573, 574, 575, 576, 577, 578, 0, 0, 0,
	617, 585, 23, 467, 848, 846, 0, 0, 0, 882,
	0, -2, 0, 874, 876, 86, 591, 568, 0, 618,
	619, 620, 567, 0, 123, 0, 870, 78, 570, 580,
	770, 880, -2,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 118, 110, 3,
	58, 60, 115, 113, 59, 114, 127, 116, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 407,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 408, 3, 409, 120, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 121,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	111, 112, 117, 119, 122, 123, 124, 125, 126, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:433
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:438
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:439
		{
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:449
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 9:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:454
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:474
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 11:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:494
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:515
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 13:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:531
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 14:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:548
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:568
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:583
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:594
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:606
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:617
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:633
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:647
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:661
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:674
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:688
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:698
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name:       yyDollar[3].tableName,
					IsEnum:     true,
					EnumValues: yyDollar[7].strs,
				},
			}
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:710
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:715
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name:        yyDollar[4].colIdent.String(),
					IfNotExists: bool(yyDollar[3].boolVal),
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:725
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name:        string(yyDollar[4].bytes),
					IfNotExists: bool(yyDollar[3].boolVal),
				},
			}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:736
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:745
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:754
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: "citext",
				},
			}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:763
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[6].bytes),
				},
			}
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:772
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:781
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: "citext",
				},
			}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:792
		{
			yyVAL.statement = &DDL{
				Action:    AddColumn,
				Table:     yyDollar[4].tableName,
				NewName:   yyDollar[4].tableName,
				ColumnDef: yyDollar[7].columnDefinition,
			}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:801
		{
			yyVAL.statement = &DDL{
				Action:    AddColumn,
				Table:     yyDollar[4].tableName,
				NewName:   yyDollar[4].tableName,
				ColumnDef: yyDollar[6].columnDefinition,
			}
		}
	case 37:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:810
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 38:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:824
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 39:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:838
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 40:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:858
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 41:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:876
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:894
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:903
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:912
		{
			yyVAL.statement = &DDL{
				Action:    AddExclusion,
				Table:     yyDollar[4].tableName,
				NewName:   yyDollar[4].tableName,
				Exclusion: yyDollar[6].exclusionDefinition,
			}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:924
		{
			if yyDollar[8].byt != 0 {
				yylex.Error("WITH GRANT OPTION is not supported yet")
				return 1
			}
			// Handle multiple tables by creating a MultiStatement
			if len(yyDollar[5].tableNames) > 1 {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, tableName := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: GrantPrivilege,
						Table:  tableName,
						Grant: &Grant{
							IsGrant:    true,
							Privileges: yyDollar[2].strs,
							TableName:  tableName,
							Grantees:   yyDollar[7].strs,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			} else {
				yyVAL.statement = &DDL{
					Action: GrantPrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:    true,
						Privileges: yyDollar[2].strs,
						TableName:  yyDollar[5].tableNames[0],
						Grantees:   yyDollar[7].strs,
					},
				}
			}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:959
		{
			if yyDollar[9].byt != 0 {
				yylex.Error("WITH GRANT OPTION is not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[6].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[6].tableName,
					Grantees:   yyDollar[8].strs,
				},
			}
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:976
		{
			if yyDollar[8].byt != 0 {
				yylex.Error("WITH GRANT OPTION is not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[5].tableName,
					Grantees:   yyDollar[7].strs,
				},
			}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:993
		{
			if yyDollar[8].str == "CASCADE" {
				yylex.Error("CASCADE/RESTRICT options are not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: yyDollar[2].strs,
					TableName:  yyDollar[5].tableName,
					Grantees:   yyDollar[7].strs,
				},
			}
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1010
		{
			if yyDollar[9].str == "CASCADE" {
				yylex.Error("CASCADE/RESTRICT options are not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[6].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[6].tableName,
					Grantees:   yyDollar[8].strs,
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1027
		{
			if yyDollar[8].str == "CASCADE" {
				yylex.Error("CASCADE/RESTRICT options are not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[5].tableName,
					Grantees:   yyDollar[7].strs,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1046
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1050
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1056
		{
			yyVAL.str = "SELECT"
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1060
		{
			yyVAL.str = "INSERT"
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1064
		{
			yyVAL.str = "UPDATE"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1068
		{
			yyVAL.str = "DELETE"
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1072
		{
			yyVAL.str = "TRUNCATE"
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1076
		{
			yyVAL.str = "REFERENCES"
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1080
		{
			yyVAL.str = "TRIGGER"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1084
		{
			yyVAL.str = "CREATE"
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1088
		{
			yyVAL.str = "CONNECT"
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1092
		{
			yyVAL.str = "EXECUTE"
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.str = "USAGE"
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1100
		{
			yyVAL.str = strings.ToUpper(yyDollar[1].colIdent.String())
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1106
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1110
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1116
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1120
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1124
		{
			yyVAL.str = "PUBLIC"
		}
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1131
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     String(yyDollar[4].tableName),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 71:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1142
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     String(TableName{Name: yyDollar[4].tableIdent}) + "." + yyDollar[6].colIdent.String(),
					Comment:    string(yyDollar[8].bytes),
				},
			}
		}
	case 72:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1153
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     String(TableName{Schema: yyDollar[4].tableIdent, Name: yyDollar[6].tableIdent}) + "." + yyDollar[8].colIdent.String(),
					Comment:    string(yyDollar[10].bytes),
				},
			}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1170
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1178
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 77:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1185
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1191
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1195
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1201
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1205
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 82:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1212
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1224
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1236
		{
			yyVAL.str = InsertStr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1240
		{
			yyVAL.str = ReplaceStr
		}
	case 86:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1246
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 87:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1252
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 88:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1256
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 89:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1260
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1265
		{
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1266
		{
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1270
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1274
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.partitions = nil
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1283
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1289
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1293
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1301
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1307
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1311
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1324
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1328
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1334
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1339
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1343
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1349
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1356
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1363
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1370
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1378
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1388
		{
			yyVAL.str = ""
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1392
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1396
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1400
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1404
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1410
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1417
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1431
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1435
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1439
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 122:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1446
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1454
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1464
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1468
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1475
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1485
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1496
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1501
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1506
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1513
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1517
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1528
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1532
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1538
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1542
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1546
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1552
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1556
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1560
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1564
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1570
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1574
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1580
		{
			yyVAL.str = SessionStr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1584
		{
			yyVAL.str = GlobalStr
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1589
		{
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1590
		{
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1594
		{
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1595
		{
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1596
		{
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1597
		{
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1598
		{
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1599
		{
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1600
		{
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1604
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1608
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1612
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1616
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1622
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1626
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1630
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1635
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1641
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1645
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1651
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1655
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1660
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1669
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1673
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1682
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1698
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1711
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1721
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1726
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1732
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1733
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1736
		{
			yyVAL.exprs = nil
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1737
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1741
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1746
		{
			yyVAL.empty = struct{}{}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1748
		{
			yyVAL.empty = struct{}{}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1751
		{
			yyVAL.bytes = nil
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1755
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1764
		{
			yyVAL.bytes = nil
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1768
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1772
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1776
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1780
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1784
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1789
		{
			yyVAL.expr = nil
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1793
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1798
		{
			yyVAL.expr = nil
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1802
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1807
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1811
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1816
		{
			yyVAL.bytes = nil
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1820
		{
			yyVAL.bytes = nil
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1826
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1833
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1839
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1843
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1848
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1852
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1856
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1860
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1864
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1868
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1872
		{
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1878
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1882
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1886
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1896
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1902
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1913
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1917
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val + "." + yyDollar[3].colIdent.val}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1923
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1936
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1941
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1946
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1951
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1957
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1962
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1967
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1972
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1977
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1982
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1987
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1992
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1997
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2006
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2016
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2021
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2026
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 251:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2033
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 252:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2040
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 253:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2048
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[7].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[8].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 254:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2056
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[10].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[11].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 255:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2065
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[10].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[11].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 256:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2075
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2080
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 258:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2085
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 259:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2090
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2096
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2102
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2109
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2116
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2122
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2128
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2148
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2152
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2156
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2160
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2164
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2168
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2172
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2176
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2180
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2184
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2190
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2196
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2202
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2212
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2217
		{
			yyVAL.sequence = &Sequence{}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2221
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2226
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2231
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2236
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2241
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2246
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2251
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2256
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2261
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2266
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2271
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2276
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 294:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2281
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2288
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2292
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2296
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2300
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2304
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2308
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2313
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2317
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2322
		{
			yyVAL.bytes = nil
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2331
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2336
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2342
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2346
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2350
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2354
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2358
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2362
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2366
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2370
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2374
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2378
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2384
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2390
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2396
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2402
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2408
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2414
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2418
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2423
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2427
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2433
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2437
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2441
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2445
		{
			yyVAL.columnType = ColumnType{Type: "timestamp", Length: yyDollar[2].optVal, Timezone: BoolVal(true)}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2449
		{
			yyVAL.columnType = ColumnType{Type: "time", Length: yyDollar[2].optVal, Timezone: BoolVal(true)}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2453
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2457
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2461
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2465
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2469
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2473
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2479
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2483
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2489
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2493
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2497
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2501
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2505
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2509
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2513
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2517
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2541
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 362:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2579
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2583
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2589
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2597
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2601
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2627
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2632
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2637
		{
			yyVAL.optVal = nil
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2641
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2646
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2650
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2658
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2662
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2668
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2676
		{
			yyVAL.optVal = nil
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2680
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2684
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2693
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2697
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2701
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2706
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2710
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2715
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2719
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2724
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2728
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2732
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2737
		{
			yyVAL.str = ""
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2741
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2745
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2750
		{
			yyVAL.str = ""
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2754
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2758
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2764
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2773
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2777
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2783
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2787
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2793
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2797
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2803
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2807
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2812
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2816
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2820
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2824
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2828
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2832
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2836
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2840
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2844
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2848
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2856
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2867
		{
			yyVAL.str = ""
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2871
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2877
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2881
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2887
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2891
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2897
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2901
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2907
		{
			yyVAL.indexPartition = nil
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2911
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2915
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2921
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2925
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2929
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2933
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2937
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2941
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2945
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2949
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2953
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2965
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2971
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2975
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2981
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2986
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2992
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2996
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3002
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3007
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3011
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent("level"), Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3015
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3019
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3024
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3028
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3032
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3042
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			if bool(yyDollar[3].boolVal) || bool(yyDollar[4].boolVal) {
				yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
					Deferrable:        bool(yyDollar[3].boolVal),
					InitiallyDeferred: bool(yyDollar[4].boolVal),
				}
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 463:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3053
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			if bool(yyDollar[6].boolVal) || bool(yyDollar[7].boolVal) {
				yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
					Deferrable:        bool(yyDollar[6].boolVal),
					InitiallyDeferred: bool(yyDollar[7].boolVal),
				}
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 464:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3066
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			if bool(yyDollar[6].boolVal) || bool(yyDollar[7].boolVal) {
				yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
					Deferrable:        bool(yyDollar[6].boolVal),
					InitiallyDeferred: bool(yyDollar[7].boolVal),
				}
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 465:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3079
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			if bool(yyDollar[9].boolVal) || bool(yyDollar[10].boolVal) {
				yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
					Deferrable:        bool(yyDollar[9].boolVal),
					InitiallyDeferred: bool(yyDollar[10].boolVal),
				}
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 466:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3092
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			if bool(yyDollar[9].boolVal) || bool(yyDollar[10].boolVal) {
				yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
					Deferrable:        bool(yyDollar[9].boolVal),
					InitiallyDeferred: bool(yyDollar[10].boolVal),
				}
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 467:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3107
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 468:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3118
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3129
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3133
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3137
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3141
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 473:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3147
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3157
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 475:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3168
		{
			constraintOptions := &ConstraintOptions{
				Deferrable:        bool(yyDollar[10].boolVal),
				InitiallyDeferred: bool(yyDollar[11].boolVal),
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: constraintOptions,
			}
		}
	case 476:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3183
		{
			var constraintOptions *ConstraintOptions
			if bool(yyDollar[8].boolVal) || bool(yyDollar[9].boolVal) {
				constraintOptions = &ConstraintOptions{
					Deferrable:        bool(yyDollar[8].boolVal),
					InitiallyDeferred: bool(yyDollar[9].boolVal),
				}
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:           yyDollar[4].indexColumns,
				Options:           yyDollar[6].indexOptions,
				Partition:         yyDollar[7].indexPartition,
				ConstraintOptions: constraintOptions,
			}
		}
	case 477:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3202
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 478:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3211
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 479:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3221
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 480:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3230
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "",
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3239
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				IndexType:  yyDollar[3].colIdent.String(),
				Exclusions: yyDollar[5].exclusionPairs,
				Where:      NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3247
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				IndexType:  "",
				Exclusions: yyDollar[3].exclusionPairs,
				Where:      NewWhere(WhereStr, yyDollar[5].expr),
			}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3257
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3261
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3267
		{
			yyVAL.exclusionPair = ExclusionPair{
				Column:   yyDollar[1].colIdent,
				Operator: yyDollar[3].str,
			}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3274
		{
			yyVAL.exclusionPair = ExclusionPair{
				Column:   NewColIdent(String(yyDollar[1].expr)),
				Operator: yyDollar[3].str,
			}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3283
		{
			yyVAL.str = "="
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3287
		{
			yyVAL.str = "<>"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3291
		{
			yyVAL.str = "<"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3295
		{
			yyVAL.str = ">"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3299
		{
			yyVAL.str = "&&"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3303
		{
			yyVAL.str = "<="
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3307
		{
			yyVAL.str = ">="
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3311
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3317
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3321
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3325
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3331
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3335
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3339
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3343
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3347
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3351
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3357
		{
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3358
		{
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3362
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3366
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3371
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3378
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3382
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3388
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3392
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3399
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3403
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3409
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3413
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3418
		{
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3419
		{
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3423
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3427
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3431
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3445
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3450
		{
			setAllowComments(yylex, true)
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3454
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3460
		{
			yyVAL.bytes2 = nil
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3464
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3470
		{
			yyVAL.str = UnionStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3474
		{
			yyVAL.str = UnionAllStr
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3478
		{
			yyVAL.str = UnionDistinctStr
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3483
		{
			yyVAL.str = ""
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3487
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3491
		{
			yyVAL.str = SQLCacheStr
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3496
		{
			yyVAL.str = ""
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3500
		{
			yyVAL.str = DistinctStr
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3505
		{
			yyVAL.str = ""
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3509
		{
			yyVAL.str = StraightJoinHint
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3514
		{
			yyVAL.selectExprs = nil
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3518
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3524
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3528
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3534
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3542
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3546
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3551
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3555
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3559
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3566
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3571
		{
			yyVAL.overExpr = nil
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3575
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3579
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3583
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 557:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3587
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3592
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3596
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3602
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3606
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3616
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3620
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3624
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3629
		{
			yyVAL.strs = []string{}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3633
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3639
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3643
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3649
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3653
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3657
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3661
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3665
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3669
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3673
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3677
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3683
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 580:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3687
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3693
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3698
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3702
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3708
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3712
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3725
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3729
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3733
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3737
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3743
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3745
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3749
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3751
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3755
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3757
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3760
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3762
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3765
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3769
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3773
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3780
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3786
		{
			yyVAL.str = JoinStr
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3790
		{
			yyVAL.str = JoinStr
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3794
		{
			yyVAL.str = JoinStr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3800
		{
			yyVAL.str = StraightJoinStr
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3806
		{
			yyVAL.str = LeftJoinStr
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3810
		{
			yyVAL.str = LeftJoinStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3814
		{
			yyVAL.str = RightJoinStr
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3818
		{
			yyVAL.str = RightJoinStr
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3824
		{
			yyVAL.str = NaturalJoinStr
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3828
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3838
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3842
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3848
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3852
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3857
		{
			yyVAL.indexHints = nil
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3861
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3865
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3869
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3874
		{
			yyVAL.expr = nil
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3878
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3883
		{
			yyVAL.columns = nil
		}
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3887
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3893
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3897
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3901
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3905
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3909
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3913
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3917
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3921
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3927
		{
			yyVAL.str = ""
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3931
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3941
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3947
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 638:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3951
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, All: true}
		}
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3955
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3963
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3971
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 644:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3975
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3979
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOpStr, Right: yyDollar[3].expr}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3983
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOpStr, Right: yyDollar[3].expr}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3987
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: ILikeOpStr, Right: yyDollar[3].expr}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3991
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotILikeOpStr, Right: yyDollar[3].expr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4003
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 652:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4007
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4011
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4016
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4020
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4024
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4030
		{
			yyVAL.str = IsNullStr
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4034
		{
			yyVAL.str = IsNotNullStr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4038
		{
			yyVAL.str = IsTrueStr
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4042
		{
			yyVAL.str = IsNotTrueStr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4046
		{
			yyVAL.str = IsFalseStr
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4050
		{
			yyVAL.str = IsNotFalseStr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4056
		{
			yyVAL.str = EqualStr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4060
		{
			yyVAL.str = LessThanStr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4064
		{
			yyVAL.str = GreaterThanStr
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4068
		{
			yyVAL.str = LessEqualStr
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4072
		{
			yyVAL.str = GreaterEqualStr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4076
		{
			yyVAL.str = NotEqualStr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4080
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4084
		{
			yyVAL.str = PosixRegexStr
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4088
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4092
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4096
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4101
		{
			yyVAL.expr = nil
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4105
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4111
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4115
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4119
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4125
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4131
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4141
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4145
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4149
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4153
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4157
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4161
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4165
		{
			yyVAL.expr = &CastExpr{Expr: NewStrVal(yyDollar[2].bytes), Type: &ConvertType{Type: "date"}}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4169
		{
			yyVAL.expr = &CastExpr{Expr: NewStrVal(yyDollar[2].bytes), Type: &ConvertType{Type: "time"}}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4173
		{
			yyVAL.expr = &CastExpr{Expr: NewStrVal(yyDollar[2].bytes), Type: &ConvertType{Type: "timestamp"}}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.expr = yyDollar[1].arrayConstructor
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4205
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4209
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4213
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4217
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4221
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4225
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4229
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4233
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4268
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4277
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4281
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4285
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4293
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4307
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4311
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4315
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4323
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4331
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4335
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4343
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4347
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 723:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4357
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4361
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4365
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 726:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4369
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 727:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4373
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 728:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4377
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 729:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4381
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4391
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4395
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 732:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4399
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 733:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4404
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 734:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4408
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 735:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4412
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 736:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4416
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 737:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4420
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 738:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4424
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 739:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4428
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 740:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4432
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 741:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4436
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 742:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4440
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 743:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4444
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 744:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4448
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 745:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4452
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 746:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4456
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 747:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4460
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4464
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4469
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4473
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4477
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4481
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4496
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4500
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4504
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4509
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4514
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4519
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4524
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4543
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4547
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4551
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 766:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4561
		{
			yyVAL.str = ""
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4565
		{
			yyVAL.str = BooleanModeStr
		}
	case 769:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4569
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 770:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4573
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4577
		{
			yyVAL.str = QueryExpansionStr
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4583
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4587
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4593
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4597
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4601
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4605
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4609
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4613
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4619
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4627
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4639
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4643
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4647
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4651
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4655
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4659
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4663
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4667
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4671
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4675
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4679
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4683
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4687
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4691
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4695
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4699
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4703
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4707
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4711
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4715
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4719
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4725
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4729
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4733
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4741
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4745
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type, Array: true}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4749
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4753
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4757
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Array: true}
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4761
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4766
		{
			yyVAL.expr = nil
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4770
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4775
		{
			yyVAL.str = string("")
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4779
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4785
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4789
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 822:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4795
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4800
		{
			yyVAL.empty = struct{}{}
		}
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4802
		{
			yyVAL.empty = struct{}{}
		}
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4805
		{
			yyVAL.expr = nil
		}
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4809
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4815
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4819
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4823
		{
			yyVAL.colName = &ColName{Name: NewColIdent("level")}
		}
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4827
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 831:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4831
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4837
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4843
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4847
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4852
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4857
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4861
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4865
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4869
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4873
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4877
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4881
		{
			yyVAL.expr = &NullVal{}
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4887
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4891
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 845:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4896
		{
			yyVAL.exprs = nil
		}
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4900
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4905
		{
			yyVAL.expr = nil
		}
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4909
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4915
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4919
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4925
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4930
		{
			yyVAL.orderBy = nil
		}
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4934
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4940
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4944
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4950
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4955
		{
			yyVAL.str = AscScr
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4959
		{
			yyVAL.str = AscScr
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4963
		{
			yyVAL.str = DescScr
		}
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4968
		{
			yyVAL.limit = nil
		}
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4972
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 862:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4976
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 863:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4980
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 864:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4985
		{
			yyVAL.str = ""
		}
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4989
		{
			yyVAL.str = ForUpdateStr
		}
	case 866:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4993
		{
			yyVAL.str = ShareModeStr
		}
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5006
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5010
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5014
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 870:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5019
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 871:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5023
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 872:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5027
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5034
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5038
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5044
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 876:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5048
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5052
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5056
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5061
		{
			yyVAL.updateExprs = nil
		}
	case 880:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5065
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5071
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5075
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5081
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5085
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5091
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5097
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5107
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 888:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5111
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 889:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5117
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5123
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 891:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5127
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5133
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5137
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5141
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 895:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5146
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5150
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5156
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 898:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5162
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5169
		{
			yyVAL.bytes = []byte("charset")
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5176
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5180
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5184
		{
			yyVAL.expr = &Default{}
		}
	case 905:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5189
		{
			yyVAL.empty = struct{}{}
		}
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5191
		{
			yyVAL.empty = struct{}{}
		}
	case 907:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5194
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5196
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 909:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5199
		{
			yyVAL.str = ""
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5201
		{
			yyVAL.str = IgnoreStr
		}
	case 911:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5204
		{
			yyVAL.str = ""
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5206
		{
			yyVAL.str = "CASCADE"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5208
		{
			yyVAL.str = "RESTRICT"
		}
	case 914:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5211
		{
			yyVAL.byt = 0
		}
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5213
		{
			yyVAL.byt = 1
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5217
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5224
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5228
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5232
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5236
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5242
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5246
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5251
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5258
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 927:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5264
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5268
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5272
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 930:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5278
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5282
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5286
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 933:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5292
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5296
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 935:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5303
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 936:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5307
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: nil}
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5314
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5318
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5325
		{
			// Most expressions should implement ArrayElement now
			// We use a type assertion here since value_expression returns Expr
			yyVAL.arrayElement = yyDollar[1].expr.(ArrayElement)
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5333
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 941:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5337
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5343
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5347
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5525
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5534
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
