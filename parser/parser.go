// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex any, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex any, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex any, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex any) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex any) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex any) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const SCHEMA = 57457
const TABLE = 57458
const INDEX = 57459
const MATERIALIZED = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const PRIMARY = 57465
const COLUMN = 57466
const CONSTRAINT = 57467
const REFERENCES = 57468
const SPATIAL = 57469
const FULLTEXT = 57470
const FOREIGN = 57471
const KEY_BLOCK_SIZE = 57472
const POLICY = 57473
const WHILE = 57474
const UNIQUE = 57475
const KEY = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const EXEC = 57485
const EXECUTE = 57486
const MAXVALUE = 57487
const PARTITION = 57488
const REORGANIZE = 57489
const LESS = 57490
const THAN = 57491
const PROCEDURE = 57492
const TRIGGER = 57493
const TYPE = 57494
const RETURN = 57495
const STATUS = 57496
const VARIABLES = 57497
const RESTRICT = 57498
const CASCADE = 57499
const NO = 57500
const ACTION = 57501
const PERMISSIVE = 57502
const RESTRICTIVE = 57503
const PUBLIC = 57504
const CURRENT_USER = 57505
const SESSION_USER = 57506
const PAD_INDEX = 57507
const FILLFACTOR = 57508
const IGNORE_DUP_KEY = 57509
const STATISTICS_NORECOMPUTE = 57510
const STATISTICS_INCREMENTAL = 57511
const ALLOW_ROW_LOCKS = 57512
const ALLOW_PAGE_LOCKS = 57513
const DISTANCE = 57514
const M = 57515
const EUCLIDEAN = 57516
const COSINE = 57517
const BEFORE = 57518
const AFTER = 57519
const EACH = 57520
const ROW = 57521
const SCROLL = 57522
const CURSOR = 57523
const OPEN = 57524
const CLOSE = 57525
const FETCH = 57526
const PRIOR = 57527
const FIRST = 57528
const LAST = 57529
const DEALLOCATE = 57530
const INSTEAD = 57531
const OF = 57532
const OUTPUT = 57533
const DEFERRABLE = 57534
const INITIALLY = 57535
const IMMEDIATE = 57536
const DEFERRED = 57537
const CONCURRENTLY = 57538
const SQL = 57539
const SECURITY = 57540
const BEGIN = 57541
const START = 57542
const TRANSACTION = 57543
const COMMIT = 57544
const ROLLBACK = 57545
const BIT = 57546
const TINYINT = 57547
const SMALLINT = 57548
const SMALLSERIAL = 57549
const MEDIUMINT = 57550
const INT = 57551
const INTEGER = 57552
const SERIAL = 57553
const BIGINT = 57554
const BIGSERIAL = 57555
const INTNUM = 57556
const REAL = 57557
const DOUBLE = 57558
const PRECISION = 57559
const FLOAT_TYPE = 57560
const DECIMAL = 57561
const NUMERIC = 57562
const SMALLMONEY = 57563
const MONEY = 57564
const TIME = 57565
const TIMESTAMP = 57566
const DATETIME = 57567
const YEAR = 57568
const DATETIMEOFFSET = 57569
const DATETIME2 = 57570
const SMALLDATETIME = 57571
const CHAR = 57572
const VARCHAR = 57573
const VARYING = 57574
const BOOL = 57575
const CHARACTER = 57576
const VARBINARY = 57577
const NCHAR = 57578
const NVARCHAR = 57579
const NTEXT = 57580
const UUID = 57581
const TEXT = 57582
const TINYTEXT = 57583
const MEDIUMTEXT = 57584
const LONGTEXT = 57585
const CITEXT = 57586
const BLOB = 57587
const TINYBLOB = 57588
const MEDIUMBLOB = 57589
const LONGBLOB = 57590
const JSON = 57591
const JSONB = 57592
const ENUM = 57593
const GEOMETRY = 57594
const POINT = 57595
const LINESTRING = 57596
const POLYGON = 57597
const GEOMETRYCOLLECTION = 57598
const MULTIPOINT = 57599
const MULTILINESTRING = 57600
const MULTIPOLYGON = 57601
const VECTOR = 57602
const VARIADIC = 57603
const ARRAY = 57604
const NOW = 57605
const GETDATE = 57606
const BPCHAR = 57607
const TEXT_PATTERN_OPS = 57608
const NULLX = 57609
const AUTO_INCREMENT = 57610
const APPROXNUM = 57611
const SIGNED = 57612
const UNSIGNED = 57613
const ZEROFILL = 57614
const ZONE = 57615
const AUTOINCREMENT = 57616
const DATABASES = 57617
const TABLES = 57618
const VSCHEMA_TABLES = 57619
const EXTENDED = 57620
const FULL = 57621
const PROCESSLIST = 57622
const NAMES = 57623
const CHARSET = 57624
const GLOBAL = 57625
const SESSION = 57626
const ISOLATION = 57627
const LEVEL = 57628
const READ = 57629
const WRITE = 57630
const ONLY = 57631
const REPEATABLE = 57632
const COMMITTED = 57633
const UNCOMMITTED = 57634
const SERIALIZABLE = 57635
const NEW = 57636
const CONCAT_NULL_YIELDS_NULL = 57637
const CURSOR_CLOSE_ON_COMMIT = 57638
const QUOTED_IDENTIFIER = 57639
const ARITHABORT = 57640
const FMTONLY = 57641
const NOCOUNT = 57642
const NOEXEC = 57643
const NUMERIC_ROUNDABORT = 57644
const ANSI_DEFAULTS = 57645
const ANSI_NULL_DFLT_OFF = 57646
const ANSI_NULL_DFLT_ON = 57647
const ANSI_NULLS = 57648
const ANSI_PADDING = 57649
const ANSI_WARNINGS = 57650
const FORCEPLAN = 57651
const SHOWPLAN_ALL = 57652
const SHOWPLAN_TEXT = 57653
const SHOWPLAN_XML = 57654
const IMPLICIT_TRANSACTIONS = 57655
const REMOTE_PROC_TRANSACTIONS = 57656
const XACT_ABORT = 57657
const CURRENT_TIMESTAMP = 57658
const DATABASE = 57659
const CURRENT_DATE = 57660
const CURRENT_TIME = 57661
const LOCALTIME = 57662
const LOCALTIMESTAMP = 57663
const UTC_DATE = 57664
const UTC_TIME = 57665
const UTC_TIMESTAMP = 57666
const REPLACE = 57667
const CONVERT = 57668
const CAST = 57669
const SUBSTR = 57670
const SUBSTRING = 57671
const GROUP_CONCAT = 57672
const SEPARATOR = 57673
const INHERIT = 57674
const LEAD = 57675
const LAG = 57676
const MATCH = 57677
const AGAINST = 57678
const BOOLEAN = 57679
const LANGUAGE = 57680
const WITH = 57681
const WITHOUT = 57682
const PARSER = 57683
const QUERY = 57684
const EXPANSION = 57685
const UNUSED = 57686
const VIRTUAL = 57687
const STORED = 57688
const GENERATED = 57689
const ALWAYS = 57690
const IDENTITY = 57691
const SEQUENCE = 57692
const INCREMENT = 57693
const MINVALUE = 57694
const CACHE = 57695
const CYCLE = 57696
const OWNED = 57697
const NONE = 57698
const CLUSTERED = 57699
const NONCLUSTERED = 57700
const REPLICATION = 57701
const COLUMNSTORE = 57702
const INCLUDE = 57703
const HOLDLOCK = 57704
const NOLOCK = 57705
const NOWAIT = 57706
const PAGLOCK = 57707
const ROWLOCK = 57708
const TABLOCK = 57709
const UPDLOCK = 57710
const READUNCOMMITTED = 57711
const DEFINER = 57712
const INVOKER = 57713
const TYPECAST = 57714
const CHECK = 57715
const OVER = 57716

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	134, 490,
	-2, 218,
	-1, 52,
	123, 887,
	-2, 881,
	-1, 53,
	123, 888,
	-2, 801,
	-1, 275,
	123, 891,
	-2, 885,
	-1, 276,
	123, 888,
	-2, 886,
	-1, 432,
	61, 459,
	-2, 456,
	-1, 462,
	123, 889,
	-2, 312,
	-1, 584,
	123, 889,
	-2, 312,
	-1, 605,
	279, 898,
	-2, 789,
	-1, 659,
	279, 898,
	-2, 530,
	-1, 693,
	5, 36,
	-2, 14,
	-1, 699,
	5, 36,
	-2, 16,
	-1, 842,
	279, 898,
	-2, 530,
	-1, 1012,
	279, 898,
	-2, 394,
	-1, 1081,
	279, 898,
	-2, 530,
	-1, 1143,
	279, 898,
	-2, 789,
	-1, 1261,
	5, 37,
	-2, 663,
	-1, 1342,
	5, 36,
	-2, 15,
	-1, 1358,
	198, 63,
	-2, 586,
	-1, 1393,
	279, 898,
	-2, 198,
	-1, 1394,
	279, 898,
	-2, 198,
	-1, 1595,
	90, 883,
	-2, 871,
	-1, 1692,
	57, 50,
	59, 50,
	-2, 52,
	-1, 1865,
	5, 36,
	-2, 840,
	-1, 1890,
	5, 36,
	-2, 59,
	-1, 1928,
	59, 1032,
	60, 1032,
	-2, 516,
	-1, 1966,
	5, 37,
	-2, 841,
	-1, 1998,
	5, 36,
	-2, 843,
	-1, 2019,
	5, 37,
	-2, 844,
}

const yyPrivate = 57344

const yyLast = 11933

var yyAct = [...]int16{
	586, 567, 1793, 1921, 1975, 1811, 1883, 596, 1927, 1922,
	1714, 420, 31, 1918, 789, 1853, 1057, 892, 48, 49,
	50, 706, 1794, 1094, 1888, 1556, 1128, 1592, 1726, 1875,
	1773, 1725, 77, 77, 77, 77, 1702, 1589, 916, 1786,
	1131, 788, 496, 148, 151, 152, 919, 1362, 1564, 1110,
	1586, 1172, 1116, 642, 1359, 71, 1117, 1712, 1130, 687,
	1571, 1583, 1331, 1336, 570, 1263, 907, 1607, 1575, 27,
	31, 730, 1011, 1574, 950, 934, 1042, 986, 1254, 1475,
	816, 246, 248, 124, 124, 124, 124, 963, 896, 244,
	214, 229, 557, 1466, 565, 73, 832, 433, 1113, 427,
	542, 648, 178, 262, 157, 468, 566, 459, 263, 1039,
	461, 61, 197, 424, 1496, 824, 485, 1005, 173, 9,
	216, 1315, 1114, 1679, 768, 1325, 649, 758, 1089, 578,
	768, 686, 1090, 550, 271, 35, 696, 630, 1145, 1134,
	1133, 1717, 1580, 551, 866, 258, 259, 1314, 212, 63,
	1135, 253, 736, 1074, 434, 435, 1659, 153, 869, 155,
	633, 2020, 56, 1136, 1955, 272, 77, 64, 65, 2017,
	457, 1218, 167, 272, 1520, 1521, 275, 58, 411, 55,
	1062, 1063, 1906, 1219, 643, 428, 231, 232, 233, 234,
	508, 509, 270, 1175, 175, 1214, 1210, 1954, 1174, 447,
	418, 851, 1884, 2010, 168, 1173, 1553, 431, 1257, 1510,
	170, 1243, 1645, 479, 1905, 66, 1894, 124, 1682, 1893,
	1947, 409, 1895, 1821, 1054, 128, 128, 128, 128, 644,
	127, 127, 127, 127, 215, 1948, 1949, 125, 125, 125,
	125, 696, 1628, 1145, 1134, 1133, 761, 762, 763, 764,
	765, 758, 516, 881, 768, 1135, 1822, 1823, 1727, 696,
	1728, 1145, 1134, 1133, 38, 880, 487, 218, 1136, 1129,
	530, 803, 476, 1135, 500, 501, 502, 503, 1503, 1141,
	432, 888, 230, 220, 1051, 39, 1136, 40, 222, 1494,
	1147, 1148, 252, 678, 677, 247, 256, 194, 260, 261,
	1143, 410, 1278, 507, 1276, 268, 1831, 1346, 154, 504,
	412, 488, 45, 1834, 415, 491, 149, 494, 495, 470,
	451, 35, 1745, 1561, 473, 528, 475, 474, 744, 1137,
	1138, 1140, 1899, 1898, 1835, 1139, 513, 1720, 267, 941,
	1832, 1345, 472, 1741, 1585, 746, 1350, 1109, 746, 545,
	1787, 453, 52, 437, 55, 951, 58, 1995, 55, 128,
	914, 434, 435, 1658, 127, 1660, 1476, 1477, 935, 936,
	1460, 125, 714, 529, 1129, 759, 760, 761, 762, 763,
	764, 765, 758, 552, 1141, 768, 702, 703, 738, 715,
	46, 441, 1129, 515, 769, 1147, 1148, 519, 520, 1481,
	769, 193, 1141, 534, 2011, 1143, 41, 192, 442, 737,
	450, 536, 1751, 1147, 1148, 449, 1388, 272, 194, 444,
	745, 744, 429, 1143, 543, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 35, 1137, 1138, 1140, 1515, 746, 38,
	1139, 1213, 544, 38, 539, 632, 549, 745, 744, 1495,
	1744, 1350, 1137, 1138, 1140, 1514, 747, 1914, 1139, 747,
	39, 479, 40, 769, 39, 746, 40, 752, 230, 1350,
	755, 1219, 1146, 150, 1783, 1651, 770, 771, 772, 773,
	774, 775, 776, 541, 753, 754, 751, 777, 778, 779,
	780, 757, 756, 766, 767, 759, 760, 761, 762, 763,
	764, 765, 758, 36, 37, 768, 727, 635, 727, 852,
	1642, 1690, 1211, 1212, 174, 1904, 1584, 535, 689, 456,
	434, 435, 1348, 708, 769, 1476, 1477, 553, 62, 707,
	28, 663, 272, 712, 666, 716, 540, 669, 670, 272,
	900, 629, 510, 58, 631, 55, 506, 733, 694, 747,
	694, 748, 745, 744, 636, 748, 543, 522, 440, 711,
	634, 545, 47, 693, 35, 699, 720, 470, 645, 652,
	746, 647, 893, 1717, 745, 744, 747, 1146, 1389, 1390,
	1391, 41, 665, 1887, 717, 41, 1886, 191, 192, 1885,
	472, 694, 746, 44, 43, 1146, 757, 756, 766, 767,
	759, 760, 761, 762, 763, 764, 765, 758, 42, 58,
	768, 55, 67, 1812, 1814, 742, 158, 748, 60, 735,
	696, 537, 1969, 414, 6, 7, 783, 1560, 792, 793,
	38, 193, 1851, 709, 698, 710, 705, 1543, 1730, 707,
	718, 481, 480, 1532, 1286, 1961, 1078, 688, 194, 739,
	77, 39, 807, 40, 544, 769, 806, 787, 662, 531,
	849, 690, 166, 272, 164, 498, 497, 672, 1896, 704,
	1873, 837, 437, 1653, 1729, 58, 643, 55, 36, 37,
	1233, 747, 36, 37, 689, 885, 804, 731, 732, 734,
	875, 1232, 707, 543, 1570, 1231, 38, 1813, 745, 744,
	1230, 124, 58, 747, 55, 861, 1229, 1043, 876, 1075,
	1295, 1715, 1228, 890, 913, 838, 746, 39, 915, 40,
	1663, 644, 643, 1227, 694, 543, 673, 1226, 845, 826,
	827, 828, 829, 830, 831, 1225, 1224, 1222, 632, 898,
	1633, 748, 543, 1686, 58, 35, 55, 1077, 1268, 847,
	1267, 1687, 891, 470, 856, 1512, 1111, 1043, 426, 964,
	745, 744, 38, 745, 744, 1341, 877, 644, 879, 169,
	745, 744, 41, 163, 430, 769, 438, 439, 746, 943,
	564, 746, 940, 39, 970, 40, 993, 992, 746, 38,
	159, 160, 493, 1002, 1002, 58, 492, 55, 968, 969,
	967, 948, 1004, 161, 426, 939, 446, 272, 272, 1657,
	39, 694, 40, 688, 910, 884, 965, 694, 275, 993,
	1044, 837, 694, 30, 864, 933, 1308, 747, 886, 489,
	426, 38, 999, 1545, 1006, 1007, 945, 944, 41, 425,
	1467, 899, 1478, 128, 938, 745, 744, 1058, 127, 942,
	1467, 1469, 39, 1599, 40, 125, 223, 650, 651, 937,
	445, 1468, 1025, 746, 426, 838, 990, 1761, 863, 36,
	37, 1468, 1076, 489, 1544, 1244, 1245, 1246, 745, 744,
	769, 1465, 38, 787, 868, 873, 874, 1000, 1003, 747,
	689, 437, 747, 176, 745, 744, 746, 1734, 35, 747,
	489, 1058, 966, 39, 41, 40, 850, 1066, 883, 1112,
	882, 1264, 746, 1151, 854, 514, 512, 1108, 511, 484,
	1082, 1098, 1083, 437, 805, 745, 744, 35, 805, 1733,
	696, 41, 1145, 1134, 1133, 36, 37, 955, 957, 958,
	987, 1223, 988, 746, 1135, 956, 226, 543, 35, 228,
	1077, 878, 1068, 505, 452, 437, 1220, 1136, 35, 1704,
	1707, 1708, 1709, 1705, 1216, 1706, 1710, 991, 436, 1876,
	1877, 1036, 1037, 41, 747, 964, 1522, 908, 748, 2005,
	2004, 893, 908, 2003, 1848, 1304, 1990, 1053, 1242, 757,
	756, 766, 767, 759, 760, 761, 762, 763, 764, 765,
	758, 36, 37, 768, 1018, 671, 1239, 747, 628, 1016,
	1946, 748, 1830, 1234, 1765, 627, 1017, 1491, 626, 688,
	625, 1091, 554, 747, 41, 1911, 748, 748, 36, 37,
	1968, 748, 965, 1008, 1009, 1304, 1907, 724, 1838, 1038,
	171, 443, 757, 756, 766, 767, 759, 760, 761, 762,
	763, 764, 765, 758, 747, 1250, 768, 1699, 748, 724,
	1747, 724, 1746, 1129, 1696, 1790, 1052, 1695, 1055, 1056,
	36, 37, 1612, 1141, 908, 1670, 1076, 1535, 1526, 272,
	724, 1624, 1304, 1623, 1147, 1148, 1620, 1619, 689, 543,
	275, 1528, 1070, 1397, 1143, 724, 1614, 724, 1613, 1273,
	1326, 1275, 1328, 804, 724, 1536, 1006, 1274, 724, 1486,
	1697, 1698, 1695, 1071, 748, 1338, 1304, 1303, 1294, 724,
	1241, 36, 37, 1137, 1138, 1140, 694, 724, 1093, 1139,
	908, 1092, 1330, 1523, 694, 1306, 1358, 1699, 1384, 1385,
	1386, 1339, 1311, 1393, 908, 1061, 1352, 1699, 1324, 1342,
	997, 748, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
	1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
	1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
	1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
	1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
	1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
	543, 543, 1340, 1318, 1351, 1322, 1461, 688, 1329, 1323,
	1464, 1354, 1355, 1356, 1395, 1360, 1321, 1319, 1320, 1316,
	1313, 696, 637, 724, 949, 1344, 1349, 1304, 1058, 543,
	1849, 766, 767, 759, 760, 761, 762, 763, 764, 765,
	758, 1774, 653, 768, 1484, 724, 723, 696, 1863, 893,
	659, 660, 661, 1864, 1292, 1463, 1146, 682, 681, 1456,
	1457, 675, 676, 769, 675, 674, 69, 68, 1919, 1774,
	1488, 1872, 1872, 437, 1524, 1525, 1527, 1529, 1530, 1997,
	1310, 1290, 1396, 1149, 1086, 1085, 527, 909, 1485, 1872,
	1288, 1084, 697, 1071, 697, 1516, 1067, 1482, 1483, 437,
	1511, 437, 887, 1480, 865, 1487, 1784, 858, 855, 1025,
	1470, 1471, 1472, 1473, 1474, 679, 769, 1071, 707, 668,
	1490, 527, 1964, 740, 667, 664, 997, 1699, 1025, 1289,
	1498, 782, 784, 785, 786, 790, 1500, 526, 1287, 1539,
	527, 1304, 795, 795, 795, 795, 795, 795, 795, 1505,
	1820, 272, 1548, 1502, 1537, 1504, 1497, 659, 1541, 1941,
	696, 52, 1722, 55, 1581, 1546, 1562, 1071, 808, 809,
	810, 811, 812, 813, 814, 815, 1269, 818, 1600, 820,
	821, 822, 823, 825, 825, 825, 825, 825, 825, 825,
	908, 841, 842, 843, 844, 724, 1567, 853, 1608, 1608,
	1565, 680, 1566, 1547, 1573, 684, 683, 1939, 1902, 1876,
	1877, 1578, 437, 1762, 1569, 757, 756, 766, 767, 759,
	760, 761, 762, 763, 764, 765, 758, 220, 1489, 768,
	1617, 245, 1459, 1458, 1555, 1327, 249, 1238, 1534, 1559,
	1237, 1209, 532, 1640, 748, 1598, 1088, 1540, 38, 543,
	543, 1018, 1609, 1610, 1087, 1065, 1016, 946, 912, 1557,
	659, 1558, 889, 1017, 1349, 846, 1255, 741, 697, 39,
	1018, 40, 692, 691, 658, 1016, 657, 1704, 1707, 1708,
	1709, 1705, 1017, 1706, 1710, 655, 638, 555, 1572, 757,
	756, 766, 767, 759, 760, 761, 762, 763, 764, 765,
	758, 517, 458, 768, 454, 1605, 423, 242, 1615, 1616,
	250, 251, 1551, 769, 236, 1625, 235, 224, 11, 1919,
	1215, 795, 795, 272, 795, 795, 795, 795, 795, 795,
	795, 795, 795, 795, 795, 795, 795, 795, 795, 1664,
	1879, 1307, 685, 518, 255, 254, 162, 156, 1805, 1882,
	711, 1803, 1629, 1806, 743, 697, 1804, 1807, 1881, 1708,
	1709, 790, 1802, 1666, 1801, 1668, 790, 1652, 1654, 1655,
	1656, 1991, 1719, 1953, 77, 58, 1772, 55, 272, 1673,
	1649, 1650, 1648, 819, 1688, 1732, 1621, 1622, 1103, 1104,
	41, 422, 1332, 1735, 499, 641, 694, 1962, 70, 1737,
	1676, 1677, 413, 1151, 935, 936, 269, 1333, 543, 1749,
	1585, 1107, 640, 1100, 525, 1684, 1101, 1040, 1059, 523,
	521, 1693, 1738, 165, 53, 124, 1718, 1817, 1723, 1721,
	1711, 145, 146, 147, 1578, 1611, 32, 1736, 1045, 902,
	906, 903, 904, 905, 59, 701, 1081, 548, 1647, 1095,
	1740, 1667, 1685, 1752, 901, 1960, 1671, 1750, 1767, 1661,
	1096, 1959, 38, 893, 1913, 1099, 1326, 1748, 1349, 1681,
	1604, 1603, 1349, 1558, 1626, 264, 265, 266, 895, 1602,
	1601, 1557, 1236, 39, 2012, 40, 59, 36, 37, 993,
	1795, 1542, 59, 1235, 32, 1763, 1770, 1764, 448, 769,
	1771, 897, 1691, 1692, 1519, 1518, 1694, 52, 713, 55,
	547, 546, 911, 272, 8, 1, 1361, 13, 1782, 1557,
	12, 272, 1789, 1669, 1852, 1780, 257, 1672, 1058, 1567,
	694, 795, 795, 795, 1262, 1779, 802, 1808, 795, 795,
	795, 795, 1791, 582, 1829, 999, 1819, 1833, 1827, 1578,
	1818, 1743, 568, 1058, 1578, 1578, 1578, 1578, 1578, 1797,
	1798, 34, 1800, 1796, 1828, 1678, 1799, 128, 1578, 1850,
	1974, 1582, 127, 769, 59, 1836, 1837, 1081, 59, 125,
	59, 59, 1357, 795, 1387, 51, 35, 59, 33, 276,
	1479, 59, 59, 1777, 38, 483, 59, 421, 1349, 199,
	1309, 1681, 455, 694, 41, 15, 1889, 1552, 1343, 700,
	524, 1753, 1462, 917, 1871, 39, 726, 40, 1865, 1880,
	182, 172, 1857, 1788, 719, 416, 29, 10, 1792, 1578,
	1221, 183, 181, 59, 694, 180, 179, 59, 1869, 1891,
	177, 486, 272, 217, 221, 1578, 80, 1897, 82, 1890,
	81, 1681, 1769, 79, 993, 1795, 1920, 1929, 1889, 78,
	1910, 76, 1923, 993, 1795, 74, 75, 72, 1930, 1908,
	697, 1587, 1731, 38, 533, 59, 1933, 1073, 697, 59,
	59, 871, 1932, 694, 1840, 1936, 781, 1892, 1594, 1856,
	1926, 1558, 1335, 1058, 39, 1958, 40, 1777, 1925, 1916,
	1917, 36, 37, 1567, 1567, 1868, 1912, 1870, 1565, 1952,
	1566, 1293, 1041, 1394, 569, 954, 581, 1957, 580, 579,
	1862, 750, 1577, 1689, 1963, 1703, 1701, 1700, 1878, 1874,
	707, 1576, 1644, 707, 707, 707, 41, 1988, 1841, 1847,
	1102, 1550, 1142, 1972, 1557, 1132, 1987, 1971, 1915, 894,
	1105, 1973, 5, 1144, 1984, 1985, 1986, 1855, 1127, 1929,
	2001, 4, 1923, 3, 1996, 1993, 1126, 2000, 1125, 1124,
	1930, 1123, 1121, 1122, 1119, 1120, 1118, 1097, 695, 2,
	0, 0, 0, 2009, 694, 1934, 2002, 1935, 0, 0,
	0, 2013, 0, 0, 0, 1923, 0, 0, 0, 1998,
	2015, 0, 0, 993, 1795, 2018, 2016, 0, 725, 0,
	1681, 0, 0, 0, 0, 41, 694, 0, 0, 0,
	0, 0, 1900, 1901, 0, 0, 795, 795, 1349, 0,
	0, 2014, 209, 36, 37, 0, 26, 0, 212, 213,
	0, 421, 0, 0, 0, 0, 0, 0, 594, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 795, 795,
	795, 795, 0, 200, 1777, 0, 0, 54, 57, 0,
	0, 0, 0, 0, 1558, 0, 0, 0, 207, 0,
	195, 0, 0, 0, 0, 59, 1531, 0, 196, 0,
	21, 0, 16, 0, 219, 0, 0, 225, 0, 0,
	227, 0, 0, 0, 0, 17, 0, 24, 0, 0,
	57, 0, 36, 37, 0, 0, 57, 237, 238, 239,
	240, 241, 0, 0, 0, 18, 19, 1579, 0, 0,
	0, 0, 0, 243, 0, 0, 0, 0, 0, 0,
	34, 0, 59, 59, 0, 0, 0, 203, 0, 198,
	208, 59, 0, 0, 0, 0, 421, 205, 204, 0,
	0, 0, 0, 421, 0, 35, 646, 33, 0, 52,
	0, 462, 463, 464, 466, 0, 0, 0, 0, 0,
	469, 467, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 696, 0, 1145, 1134, 1133, 0, 57, 0,
	0, 0, 57, 0, 57, 57, 1135, 0, 862, 0,
	0, 57, 0, 277, 0, 277, 57, 0, 465, 1136,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	490, 0, 1618, 0, 14, 0, 0, 0, 193, 0,
	0, 0, 0, 0, 185, 0, 184, 0, 188, 189,
	192, 0, 38, 0, 186, 194, 38, 57, 0, 0,
	0, 482, 795, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1638, 39, 1785, 40, 0, 39, 0, 40,
	0, 1643, 0, 0, 0, 0, 0, 421, 0, 0,
	0, 0, 201, 0, 0, 0, 0, 0, 202, 57,
	0, 0, 0, 57, 57, 0, 0, 0, 59, 0,
	59, 0, 696, 748, 1145, 1134, 1133, 0, 556, 20,
	0, 0, 0, 59, 0, 1129, 1135, 0, 0, 0,
	0, 22, 23, 0, 25, 1141, 639, 0, 0, 1136,
	0, 994, 995, 996, 998, 0, 1147, 1148, 0, 0,
	1713, 0, 0, 0, 0, 0, 1143, 0, 757, 756,
	766, 767, 759, 760, 761, 762, 763, 764, 765, 758,
	0, 210, 768, 211, 0, 1046, 1047, 1048, 1049, 0,
	1050, 190, 0, 0, 0, 1137, 1138, 1140, 471, 476,
	0, 1139, 0, 0, 41, 0, 0, 206, 41, 0,
	0, 0, 0, 1060, 795, 0, 0, 795, 0, 795,
	0, 795, 0, 795, 795, 0, 0, 0, 0, 0,
	0, 1069, 0, 1072, 0, 0, 0, 729, 1079, 1080,
	0, 276, 421, 0, 0, 0, 0, 0, 0, 0,
	749, 473, 0, 475, 474, 1129, 791, 0, 0, 0,
	0, 0, 0, 1106, 0, 1141, 0, 0, 481, 480,
	0, 0, 0, 0, 0, 1579, 1147, 1148, 0, 0,
	1579, 1579, 1579, 1579, 1579, 0, 1143, 0, 0, 0,
	0, 0, 654, 656, 1713, 0, 1815, 817, 0, 0,
	0, 36, 37, 0, 187, 36, 37, 559, 0, 0,
	0, 0, 1240, 0, 0, 1137, 1138, 1140, 0, 482,
	0, 1139, 0, 0, 59, 0, 0, 0, 0, 848,
	0, 0, 1350, 0, 0, 0, 0, 0, 1146, 35,
	587, 1001, 585, 589, 590, 591, 592, 1171, 0, 0,
	588, 593, 0, 0, 0, 1579, 1258, 1259, 0, 0,
	0, 0, 0, 728, 1261, 920, 0, 1866, 1867, 932,
	0, 1579, 0, 1265, 1266, 0, 482, 57, 0, 922,
	0, 0, 0, 0, 0, 57, 0, 0, 1784, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 697, 0,
	0, 0, 0, 1291, 0, 0, 0, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 0, 1299, 1300, 0,
	1301, 1302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 947, 0, 0, 1312, 952, 953, 0, 0,
	0, 0, 0, 0, 0, 1924, 0, 697, 0, 0,
	0, 0, 769, 0, 0, 921, 0, 0, 1146, 0,
	0, 0, 0, 0, 0, 0, 1942, 1943, 1944, 0,
	0, 0, 0, 0, 0, 0, 0, 1636, 748, 0,
	59, 0, 791, 0, 0, 0, 0, 791, 0, 0,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 0,
	0, 1150, 1010, 1035, 0, 0, 0, 0, 1778, 0,
	0, 0, 0, 276, 748, 0, 0, 0, 872, 872,
	872, 0, 59, 757, 756, 766, 767, 759, 760, 761,
	762, 763, 764, 765, 758, 0, 0, 768, 0, 0,
	0, 0, 482, 1064, 57, 1924, 0, 0, 1999, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 757,
	756, 766, 767, 759, 760, 761, 762, 763, 764, 765,
	758, 0, 0, 768, 0, 0, 0, 0, 1924, 0,
	697, 0, 0, 0, 59, 0, 1171, 1171, 1171, 1171,
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
	1171, 1171, 1171, 1171, 54, 0, 460, 0, 0, 52,
	0, 462, 463, 464, 466, 0, 0, 0, 0, 0,
	469, 467, 477, 478, 918, 277, 0, 872, 872, 0,
	1517, 872, 872, 872, 0, 0, 0, 54, 0, 0,
	1256, 0, 0, 0, 0, 0, 1533, 0, 0, 1260,
	0, 0, 0, 0, 0, 0, 0, 0, 465, 0,
	872, 872, 872, 872, 1549, 757, 756, 766, 767, 759,
	760, 761, 762, 763, 764, 765, 758, 0, 0, 768,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 0, 0, 1296, 38, 756, 766, 767,
	759, 760, 761, 762, 763, 764, 765, 758, 482, 0,
	768, 1305, 0, 0, 0, 0, 0, 39, 696, 40,
	1145, 1134, 1133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1136, 0, 1334, 1337, 0,
	59, 59, 0, 0, 0, 421, 0, 0, 0, 0,
	0, 0, 0, 1347, 0, 0, 0, 769, 0, 757,
	756, 766, 767, 759, 760, 761, 762, 763, 764, 765,
	758, 1353, 0, 768, 0, 0, 0, 0, 0, 0,
	0, 1270, 1271, 1392, 1272, 817, 0, 0, 0, 0,
	0, 0, 1277, 769, 1279, 1280, 1281, 0, 0, 1282,
	1283, 0, 1284, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1630, 0, 1631, 1632, 0, 471, 476,
	1634, 1635, 1637, 1639, 1641, 0, 0, 0, 41, 794,
	796, 797, 798, 799, 800, 801, 0, 0, 0, 0,
	0, 1129, 0, 0, 0, 0, 1662, 0, 872, 0,
	0, 1141, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 1147, 1148, 0, 0, 0, 0, 0, 0,
	0, 473, 1143, 475, 474, 0, 0, 0, 0, 0,
	872, 0, 857, 463, 464, 466, 0, 277, 481, 480,
	872, 469, 467, 477, 478, 0, 482, 0, 0, 0,
	59, 1137, 1138, 1140, 0, 0, 0, 1139, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 421, 1350, 0,
	0, 0, 0, 0, 1739, 36, 37, 0, 0, 465,
	0, 0, 0, 0, 0, 0, 0, 1513, 0, 769,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 696,
	0, 1145, 1134, 1133, 59, 59, 0, 0, 57, 1760,
	0, 0, 0, 1135, 59, 59, 0, 0, 1538, 0,
	769, 0, 421, 0, 0, 0, 1136, 0, 0, 1768,
	0, 0, 0, 0, 0, 0, 1554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 0, 1810, 0, 0,
	0, 0, 0, 0, 0, 791, 791, 0, 696, 0,
	1145, 1134, 1133, 769, 1146, 0, 59, 0, 0, 0,
	0, 0, 1135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1839, 1136, 0, 0, 0, 1842,
	1843, 1844, 1845, 1846, 0, 59, 0, 0, 0, 59,
	59, 0, 1129, 0, 59, 59, 59, 59, 59, 0,
	0, 0, 1141, 0, 1348, 0, 59, 0, 59, 471,
	476, 0, 59, 1147, 1148, 0, 0, 421, 0, 0,
	0, 0, 0, 1143, 0, 421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 920, 0, 0, 0, 932, 59, 0, 0, 0,
	0, 0, 1137, 1138, 1140, 922, 0, 0, 1139, 0,
	0, 0, 473, 0, 475, 474, 1646, 0, 0, 59,
	0, 0, 1903, 0, 57, 57, 0, 1909, 0, 0,
	0, 1129, 0, 0, 0, 59, 0, 0, 0, 0,
	0, 1141, 0, 0, 0, 0, 1674, 1675, 1337, 0,
	0, 0, 1147, 1148, 0, 0, 0, 0, 0, 0,
	0, 0, 1143, 1945, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1247, 1248,
	1249, 921, 0, 0, 0, 1956, 1251, 1252, 1253, 0,
	0, 1137, 1138, 1140, 0, 0, 421, 1139, 0, 1965,
	1966, 1967, 0, 0, 0, 0, 0, 1970, 0, 0,
	0, 1931, 0, 0, 106, 0, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 0, 0, 0, 1270, 0,
	794, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 35, 0, 0, 1146, 0, 0, 0, 0,
	833, 0, 0, 0, 0, 0, 0, 0, 0, 2006,
	2007, 2008, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1775, 0, 0, 57, 835, 0, 0, 0, 2019,
	59, 0, 0, 0, 0, 1951, 0, 0, 0, 0,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1931, 0, 0, 0, 0, 0, 872,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1826, 0, 0, 1146, 0, 107, 0, 57, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 1716,
	0, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 1854,
	0, 989, 836, 0, 0, 0, 0, 0, 0, 0,
	83, 834, 0, 1860, 1680, 1861, 840, 839, 0, 0,
	1217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 0, 139, 126, 0, 140, 141, 142, 144,
	143, 108, 109, 110, 114, 112, 111, 113, 85, 87,
	1766, 83, 86, 92, 88, 89, 90, 104, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 105,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 57,
	0, 0, 0, 57, 57, 0, 0, 54, 57, 57,
	57, 57, 57, 1492, 1493, 1937, 0, 0, 1938, 0,
	1809, 1940, 57, 0, 84, 0, 1816, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1950, 0,
	0, 0, 0, 0, 0, 1506, 1507, 1508, 1509, 0,
	0, 0, 0, 1854, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 0, 0, 0, 791, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	0, 1992, 791, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
	1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414,
	1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424,
	1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
	1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370,
	1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
	1381, 1382, 1383, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 394, 383, 0, 342, 396,
	310, 330, 405, 332, 333, 368, 289, 351, 0, 327,
	308, 0, 0, 0, 313, 282, 322, 283, 311, 344,
	0, 309, 0, 385, 354, 0, 0, 0, 403, 1627,
	359, 0, 0, 0, 1716, 0, 346, 387, 349, 378,
	341, 369, 298, 358, 398, 328, 364, 399, 0, 0,
	0, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 393, 324, 295, 408, 0, 367,
	281, 361, 0, 0, 287, 290, 404, 391, 318, 317,
	0, 0, 0, 0, 0, 0, 0, 345, 350, 374,
	338, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 314, 0, 357, 0, 0, 0, 294,
	288, 0, 343, 833, 0, 0, 297, 0, 315, 375,
	0, 278, 381, 388, 340, 0, 0, 392, 337, 336,
	0, 0, 0, 0, 0, 0, 329, 274, 38, 406,
	395, 347, 386, 312, 323, 0, 319, 0, 835, 0,
	320, 321, 356, 370, 0, 0, 0, 0, 0, 39,
	377, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1754, 0, 0, 1755, 0, 1756, 0, 1757, 0,
	1758, 1759, 0, 286, 279, 316, 379, 382, 302, 366,
	291, 325, 372, 326, 348, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1588, 0,
	0, 0, 0, 0, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 1596, 0, 83, 834, 0, 0, 0, 0, 840,
	839, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 0, 0, 0,
	41, 285, 306, 389, 0, 0, 0, 0, 1597, 1595,
	1591, 1590, 0, 0, 0, 0, 365, 0, 0, 0,
	0, 1593, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 305, 299, 300, 352, 353, 400,
	401, 402, 376, 296, 0, 303, 304, 0, 384, 0,
	0, 0, 355, 0, 1742, 0, 407, 84, 0, 0,
	0, 0, 0, 0, 331, 280, 335, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 0, 0, 339, 334,
	360, 362, 371, 380, 390, 397, 373, 36, 37, 394,
	383, 0, 342, 396, 310, 330, 405, 332, 333, 368,
	289, 351, 0, 327, 308, 0, 0, 0, 313, 282,
	322, 283, 311, 344, 0, 309, 0, 385, 354, 0,
	0, 0, 403, 0, 359, 0, 0, 0, 0, 0,
	346, 387, 349, 378, 341, 369, 298, 358, 398, 328,
	364, 399, 0, 0, 0, 35, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 393, 324,
	295, 408, 0, 367, 281, 361, 0, 0, 287, 290,
	404, 391, 318, 317, 0, 0, 0, 0, 0, 0,
	0, 345, 350, 374, 338, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 0, 0, 0, 314, 0, 357,
	0, 0, 0, 294, 288, 0, 343, 0, 0, 0,
	297, 0, 315, 375, 0, 278, 381, 388, 340, 0,
	0, 392, 337, 336, 0, 0, 1014, 0, 0, 0,
	329, 274, 38, 406, 395, 347, 386, 312, 323, 0,
	319, 0, 0, 0, 320, 321, 356, 370, 696, 0,
	1145, 1134, 1133, 39, 377, 40, 0, 0, 0, 0,
	0, 0, 1135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1136, 0, 286, 279, 316,
	379, 382, 302, 366, 291, 325, 372, 326, 348, 307,
	0, 0, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 1724, 139, 1019, 0, 140, 141, 142, 144,
	143, 1023, 0, 1015, 0, 1027, 1026, 1028, 1013, 1030,
	0, 0, 0, 1034, 1031, 1033, 1032, 0, 1029, 0,
	1858, 1859, 0, 0, 0, 1596, 0, 1020, 1021, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1022, 1024,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 41, 285, 306, 389, 0, 0,
	0, 1129, 1597, 1595, 0, 0, 0, 0, 0, 0,
	365, 1141, 0, 0, 0, 1593, 0, 0, 0, 0,
	0, 0, 1147, 1148, 0, 0, 0, 0, 0, 0,
	0, 0, 1143, 0, 0, 0, 0, 301, 305, 299,
	300, 352, 353, 400, 401, 402, 376, 296, 0, 303,
	304, 0, 384, 0, 0, 0, 355, 0, 0, 0,
	407, 1137, 1138, 1140, 0, 0, 0, 1139, 331, 280,
	335, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	0, 0, 339, 334, 360, 362, 371, 380, 390, 397,
	373, 36, 37, 394, 383, 0, 342, 396, 310, 330,
	405, 332, 333, 368, 289, 351, 0, 327, 308, 0,
	0, 0, 313, 282, 322, 283, 311, 344, 0, 309,
	0, 385, 354, 0, 0, 0, 403, 0, 359, 0,
	0, 0, 0, 0, 346, 387, 349, 378, 341, 369,
	298, 358, 398, 328, 364, 399, 0, 0, 0, 35,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 363, 393, 324, 295, 408, 0, 367, 281, 361,
	0, 0, 287, 290, 404, 391, 318, 317, 0, 0,
	0, 0, 0, 0, 0, 345, 350, 374, 338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 357, 1146, 0, 0, 294, 288, 0,
	343, 0, 0, 0, 297, 0, 315, 375, 0, 278,
	381, 388, 340, 0, 0, 392, 337, 336, 0, 0,
	0, 0, 0, 0, 329, 274, 38, 406, 395, 347,
	386, 312, 323, 0, 319, 0, 0, 0, 320, 321,
	356, 370, 696, 0, 1145, 1134, 1133, 39, 377, 40,
	0, 0, 0, 0, 0, 0, 1135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1136,
	0, 286, 279, 316, 379, 382, 302, 366, 291, 325,
	372, 326, 348, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1994, 0, 0, 0, 0, 1596,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 284, 0, 0, 0, 0, 41, 285,
	306, 389, 0, 0, 0, 1129, 1597, 1595, 0, 0,
	0, 0, 0, 0, 365, 1141, 0, 0, 0, 1593,
	0, 0, 0, 0, 0, 0, 1147, 1148, 0, 0,
	0, 0, 0, 0, 0, 0, 1143, 0, 0, 0,
	0, 301, 305, 299, 300, 352, 353, 400, 401, 402,
	376, 296, 0, 303, 304, 0, 384, 0, 0, 0,
	355, 0, 0, 0, 407, 1137, 1138, 1140, 0, 0,
	0, 1139, 331, 280, 335, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 0, 0, 339, 334, 360, 362,
	371, 380, 390, 397, 373, 36, 37, 394, 383, 0,
	342, 396, 310, 330, 405, 332, 333, 368, 289, 351,
	0, 327, 308, 0, 0, 0, 313, 282, 322, 283,
	311, 344, 0, 309, 0, 385, 354, 0, 0, 0,
	403, 0, 359, 0, 0, 0, 0, 0, 346, 387,
	349, 378, 341, 369, 298, 358, 398, 328, 364, 399,
	0, 0, 0, 52, 0, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 393, 324, 295, 408,
	0, 367, 281, 361, 0, 0, 287, 290, 404, 391,
	318, 317, 0, 0, 0, 0, 0, 0, 0, 345,
	350, 374, 338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1317, 0, 314, 0, 357, 1146, 0,
	0, 294, 288, 0, 343, 0, 0, 0, 297, 0,
	315, 375, 0, 278, 381, 388, 340, 0, 0, 392,
	337, 336, 0, 0, 0, 0, 0, 0, 329, 274,
	38, 406, 395, 347, 386, 312, 323, 0, 319, 0,
	0, 0, 320, 321, 356, 370, 696, 0, 1145, 1134,
	1133, 39, 377, 40, 0, 0, 0, 0, 0, 0,
	1135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1136, 0, 286, 279, 316, 379, 382,
	302, 366, 291, 325, 372, 326, 348, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1989, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 284, 0, 0,
	0, 0, 41, 285, 306, 389, 0, 0, 0, 1129,
	0, 273, 0, 0, 0, 0, 0, 0, 365, 1141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1147, 1148, 0, 0, 0, 0, 0, 0, 0, 0,
	1143, 0, 0, 0, 0, 301, 305, 299, 300, 352,
	353, 400, 401, 402, 376, 296, 0, 303, 304, 0,
	384, 0, 0, 0, 355, 0, 0, 0, 407, 1137,
	1138, 1140, 0, 0, 0, 1139, 331, 280, 335, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 0, 0,
	339, 334, 360, 362, 371, 380, 390, 397, 373, 36,
	37, 394, 383, 0, 342, 396, 310, 330, 405, 332,
	333, 368, 289, 351, 0, 327, 308, 0, 0, 0,
	313, 282, 322, 283, 311, 344, 0, 309, 0, 385,
	354, 0, 0, 0, 403, 0, 359, 0, 0, 0,
	0, 0, 346, 387, 349, 378, 341, 369, 298, 358,
	398, 328, 364, 399, 0, 0, 0, 35, 0, 721,
	0, 722, 0, 0, 0, 0, 0, 0, 0, 363,
	393, 324, 295, 408, 0, 367, 281, 361, 0, 0,
	287, 290, 404, 391, 318, 317, 0, 0, 0, 0,
	0, 0, 0, 345, 350, 374, 338, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 357, 1146, 0, 0, 294, 288, 0, 343, 0,
	0, 0, 297, 0, 315, 375, 0, 278, 381, 388,
	340, 0, 0, 392, 337, 336, 0, 0, 0, 0,
	0, 0, 329, 274, 38, 406, 395, 347, 386, 312,
	323, 0, 319, 0, 0, 0, 320, 321, 356, 370,
	696, 0, 1145, 1134, 1133, 39, 377, 40, 0, 0,
	0, 0, 0, 0, 1135, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1136, 0, 286,
	279, 316, 379, 382, 302, 366, 291, 325, 372, 326,
	348, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1776, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 284, 0, 0, 0, 0, 41, 285, 306, 389,
	0, 0, 0, 1129, 0, 273, 0, 0, 0, 0,
	0, 0, 365, 1141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1147, 1148, 0, 0, 0, 0,
	0, 0, 0, 0, 1143, 0, 0, 0, 0, 301,
	305, 299, 300, 352, 353, 400, 401, 402, 376, 296,
	0, 303, 304, 0, 384, 0, 0, 0, 355, 0,
	0, 0, 407, 1137, 1138, 1140, 0, 0, 0, 1139,
	331, 280, 335, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 0, 0, 339, 334, 360, 362, 371, 380,
	390, 397, 373, 36, 37, 394, 383, 0, 342, 396,
	310, 330, 405, 332, 333, 368, 289, 351, 0, 327,
	308, 0, 0, 0, 313, 282, 322, 283, 311, 344,
	0, 309, 0, 385, 354, 0, 0, 0, 403, 0,
	359, 0, 0, 0, 0, 0, 346, 387, 349, 378,
	341, 369, 298, 358, 398, 328, 364, 399, 0, 417,
	0, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 419, 0, 363, 393, 324, 295, 408, 0, 367,
	281, 361, 0, 0, 287, 290, 404, 391, 318, 317,
	0, 0, 0, 0, 0, 0, 0, 345, 350, 374,
	338, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 357, 1146, 0, 0, 294,
	288, 0, 343, 0, 0, 0, 297, 0, 315, 375,
	0, 278, 381, 388, 340, 0, 0, 392, 337, 336,
	0, 0, 0, 0, 0, 0, 329, 274, 38, 406,
	395, 347, 386, 312, 323, 0, 319, 0, 0, 0,
	320, 321, 356, 370, 696, 0, 1145, 1134, 1133, 39,
	377, 40, 0, 0, 0, 0, 0, 0, 1135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1136, 0, 286, 279, 316, 379, 382, 302, 366,
	291, 325, 372, 326, 348, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1683, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 0, 0, 0,
	41, 285, 306, 389, 0, 0, 0, 1129, 0, 273,
	0, 0, 0, 0, 0, 0, 365, 1141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1147, 1148,
	0, 0, 0, 0, 0, 0, 0, 0, 1143, 0,
	0, 0, 0, 301, 305, 299, 300, 352, 353, 400,
	401, 402, 376, 296, 0, 303, 304, 0, 384, 0,
	0, 0, 355, 0, 0, 0, 407, 1137, 1138, 1140,
	0, 0, 0, 1139, 331, 280, 335, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 0, 0, 339, 334,
	360, 362, 371, 380, 390, 397, 373, 36, 37, 394,
	383, 0, 342, 396, 310, 330, 405, 332, 333, 368,
	289, 351, 0, 327, 308, 0, 0, 0, 313, 282,
	322, 283, 311, 344, 0, 309, 0, 385, 354, 0,
	0, 0, 403, 0, 359, 0, 0, 0, 0, 0,
	346, 387, 349, 378, 341, 369, 298, 358, 398, 328,
	364, 399, 0, 0, 0, 35, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 393, 324,
	295, 408, 0, 367, 281, 361, 0, 0, 287, 290,
	404, 391, 318, 317, 0, 0, 0, 0, 0, 0,
	0, 345, 350, 374, 338, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1665, 0, 314, 0, 357,
	1146, 0, 0, 294, 288, 0, 343, 0, 0, 0,
	297, 0, 315, 375, 0, 278, 381, 388, 340, 0,
	0, 392, 337, 336, 0, 0, 0, 0, 0, 0,
	329, 274, 38, 406, 395, 347, 386, 312, 323, 0,
	319, 0, 0, 0, 320, 321, 356, 370, 696, 0,
	1145, 1134, 1133, 39, 377, 40, 0, 0, 0, 0,
	0, 0, 1135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1136, 0, 286, 279, 316,
	379, 382, 302, 366, 291, 325, 372, 326, 348, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 41, 285, 306, 389, 0, 0,
	0, 1129, 0, 273, 0, 0, 0, 0, 0, 0,
	365, 1141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1147, 1148, 0, 0, 0, 0, 0, 0,
	0, 0, 1143, 0, 0, 0, 0, 301, 305, 299,
	300, 352, 353, 400, 401, 402, 376, 296, 0, 303,
	304, 0, 384, 0, 0, 0, 355, 0, 0, 0,
	407, 1137, 1138, 1140, 0, 0, 0, 1139, 331, 280,
	335, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	0, 0, 339, 334, 360, 362, 371, 380, 390, 397,
	373, 36, 37, 394, 383, 0, 342, 396, 310, 330,
	405, 332, 333, 368, 289, 351, 0, 327, 308, 0,
	0, 0, 313, 282, 322, 283, 311, 344, 0, 309,
	0, 385, 354, 0, 0, 0, 403, 0, 359, 0,
	0, 0, 0, 0, 346, 387, 349, 378, 341, 369,
	298, 358, 398, 328, 364, 399, 0, 0, 0, 52,
	0, 55, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 363, 393, 324, 295, 408, 0, 367, 281, 361,
	0, 0, 287, 290, 404, 391, 318, 317, 0, 0,
	0, 0, 0, 0, 0, 345, 350, 374, 338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 357, 1146, 0, 0, 294, 288, 0,
	343, 0, 0, 0, 297, 0, 315, 375, 0, 278,
	381, 388, 340, 0, 0, 392, 337, 336, 0, 0,
	0, 0, 0, 0, 329, 274, 38, 406, 395, 347,
	386, 312, 323, 0, 319, 0, 0, 0, 320, 321,
	356, 370, 0, 0, 0, 0, 0, 39, 377, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 279, 316, 379, 382, 302, 366, 291, 325,
	372, 326, 348, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 284, 0, 0, 0, 0, 41, 285,
	306, 389, 0, 0, 0, 0, 0, 273, 0, 0,
	0, 0, 0, 0, 365, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 305, 299, 300, 352, 353, 400, 401, 402,
	376, 296, 0, 303, 304, 0, 384, 0, 0, 0,
	355, 0, 0, 0, 407, 0, 0, 0, 0, 0,
	0, 0, 331, 280, 335, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 0, 0, 339, 334, 360, 362,
	371, 380, 390, 397, 373, 36, 37, 394, 383, 0,
	342, 396, 310, 330, 405, 332, 333, 368, 289, 351,
	0, 327, 308, 0, 0, 0, 313, 282, 322, 283,
	311, 344, 0, 309, 0, 385, 354, 0, 0, 0,
	403, 0, 359, 0, 0, 0, 0, 0, 346, 387,
	349, 378, 341, 369, 298, 358, 398, 328, 364, 399,
	0, 0, 0, 35, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 393, 324, 295, 408,
	0, 367, 281, 361, 0, 0, 287, 290, 404, 391,
	318, 317, 538, 0, 0, 0, 0, 0, 0, 345,
	350, 374, 338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 357, 0, 0,
	0, 294, 288, 0, 343, 0, 0, 0, 297, 0,
	315, 375, 0, 278, 381, 388, 340, 0, 0, 392,
	337, 336, 0, 0, 0, 0, 0, 0, 329, 274,
	38, 406, 395, 347, 386, 312, 323, 0, 319, 0,
	0, 0, 320, 321, 356, 370, 0, 0, 0, 0,
	0, 39, 377, 40, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 279, 316, 379, 382,
	302, 366, 291, 325, 372, 326, 348, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 284, 0, 0,
	0, 0, 41, 285, 306, 389, 0, 0, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 305, 299, 300, 352,
	353, 400, 401, 402, 376, 296, 0, 303, 304, 0,
	384, 0, 0, 0, 355, 0, 0, 0, 407, 0,
	0, 0, 0, 0, 0, 0, 331, 280, 335, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 0, 0,
	339, 334, 360, 362, 371, 380, 390, 397, 373, 36,
	37, 394, 383, 0, 342, 396, 310, 330, 405, 332,
	333, 368, 289, 351, 0, 327, 308, 0, 0, 0,
	313, 282, 322, 283, 311, 344, 0, 309, 0, 385,
	354, 0, 0, 0, 403, 0, 359, 0, 0, 0,
	0, 0, 346, 387, 349, 378, 341, 369, 298, 358,
	398, 328, 364, 399, 0, 0, 0, 35, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	393, 324, 295, 408, 0, 367, 281, 361, 0, 0,
	287, 290, 404, 391, 318, 317, 0, 0, 0, 0,
	0, 0, 0, 345, 350, 374, 338, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 357, 0, 0, 0, 294, 288, 0, 343, 0,
	0, 0, 297, 0, 315, 375, 0, 278, 381, 388,
	340, 0, 0, 392, 337, 336, 0, 0, 0, 0,
	0, 0, 329, 274, 38, 406, 395, 347, 386, 312,
	323, 0, 319, 0, 0, 0, 320, 321, 356, 370,
	0, 0, 0, 0, 0, 39, 377, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	279, 316, 379, 382, 302, 366, 291, 325, 372, 326,
	348, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 284, 0, 0, 0, 0, 41, 285, 306, 389,
	0, 0, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 365, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	305, 299, 300, 352, 353, 400, 401, 402, 376, 296,
	0, 303, 304, 0, 384, 0, 0, 0, 355, 0,
	0, 0, 407, 0, 0, 0, 0, 0, 0, 0,
	331, 280, 335, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 0, 0, 339, 334, 360, 362, 371, 380,
	390, 397, 373, 36, 37, 394, 1928, 0, 342, 396,
	310, 330, 405, 332, 333, 368, 289, 351, 0, 327,
	308, 0, 0, 0, 313, 282, 322, 283, 311, 344,
	0, 309, 0, 385, 354, 0, 0, 0, 403, 0,
	359, 0, 0, 0, 0, 0, 346, 387, 349, 378,
	341, 369, 298, 358, 398, 328, 364, 399, 437, 0,
	0, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 393, 324, 295, 408, 0, 367,
	281, 361, 0, 0, 287, 290, 404, 391, 318, 317,
	0, 0, 0, 0, 0, 0, 0, 345, 350, 374,
	338, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 357, 0, 0, 0, 294,
	288, 0, 343, 0, 0, 0, 297, 0, 315, 375,
	0, 278, 381, 388, 340, 0, 0, 392, 337, 336,
	0, 0, 0, 0, 0, 0, 329, 0, 38, 406,
	395, 347, 386, 312, 323, 0, 319, 0, 0, 0,
	320, 321, 356, 370, 0, 0, 0, 0, 0, 39,
	377, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 279, 316, 379, 382, 302, 366,
	291, 325, 372, 326, 348, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 0, 0, 0,
	41, 285, 306, 389, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 365, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 305, 299, 300, 352, 353, 400,
	401, 402, 376, 296, 0, 303, 304, 0, 384, 0,
	0, 0, 355, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 331, 280, 335, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 0, 0, 339, 334,
	360, 362, 371, 380, 390, 397, 373, 36, 37, 394,
	383, 0, 342, 396, 310, 330, 405, 332, 333, 368,
	289, 351, 0, 327, 308, 0, 0, 0, 313, 282,
	322, 283, 311, 344, 0, 309, 0, 385, 354, 0,
	0, 0, 403, 0, 359, 0, 0, 0, 0, 0,
	346, 387, 349, 378, 341, 369, 298, 358, 398, 328,
	364, 399, 0, 0, 0, 58, 0, 55, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 393, 324,
	295, 408, 0, 367, 281, 361, 0, 0, 287, 290,
	404, 391, 318, 317, 0, 0, 0, 0, 0, 0,
	0, 345, 350, 374, 338, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 357,
	0, 0, 0, 294, 288, 0, 343, 0, 0, 0,
	297, 0, 315, 375, 0, 278, 381, 388, 340, 0,
	0, 392, 337, 336, 0, 0, 0, 0, 0, 0,
	329, 0, 38, 406, 395, 347, 386, 312, 323, 0,
	319, 0, 0, 0, 320, 321, 356, 370, 0, 0,
	0, 0, 0, 39, 377, 40, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 279, 316,
	379, 382, 302, 366, 291, 325, 372, 326, 348, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 41, 285, 306, 389, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 305, 299,
	300, 352, 353, 400, 401, 402, 376, 296, 0, 303,
	304, 0, 384, 0, 0, 0, 355, 0, 0, 0,
	407, 0, 0, 0, 0, 0, 0, 0, 331, 280,
	335, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	0, 0, 339, 334, 360, 362, 371, 380, 390, 397,
	373, 36, 37, 394, 383, 0, 342, 396, 310, 330,
	405, 332, 333, 368, 289, 351, 0, 327, 308, 0,
	0, 0, 313, 282, 322, 283, 311, 344, 0, 309,
	0, 385, 354, 0, 0, 0, 403, 0, 359, 0,
	0, 0, 0, 0, 346, 387, 349, 378, 341, 369,
	298, 358, 398, 328, 364, 399, 0, 0, 0, 35,
	0, 0, 0, 0, 0, 0, 696, 0, 1145, 1134,
	1133, 363, 393, 324, 295, 408, 0, 367, 281, 361,
	1135, 0, 287, 290, 404, 391, 318, 317, 0, 0,
	0, 0, 0, 1136, 0, 345, 350, 374, 338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 357, 0, 0, 0, 294, 288, 0,
	343, 0, 0, 0, 297, 0, 315, 375, 0, 278,
	381, 388, 340, 0, 0, 392, 337, 336, 0, 745,
	744, 0, 0, 0, 329, 0, 38, 406, 395, 347,
	386, 312, 323, 0, 319, 0, 0, 746, 320, 321,
	356, 370, 0, 0, 0, 0, 0, 39, 377, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 279, 316, 379, 382, 302, 366, 291, 325,
	372, 326, 348, 307, 0, 0, 0, 0, 0, 1141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1147, 1148, 0, 0, 0, 0, 0, 0, 0, 0,
	1143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1137,
	1138, 1140, 0, 0, 0, 1139, 0, 0, 747, 0,
	0, 0, 0, 0, 0, 0, 1568, 0, 0, 0,
	0, 0, 0, 284, 0, 0, 0, 0, 41, 285,
	306, 389, 0, 0, 0, 0, 0, 696, 0, 1145,
	1134, 1133, 0, 0, 365, 0, 0, 0, 0, 0,
	0, 1135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1136, 0, 0, 0, 0, 0,
	0, 301, 305, 299, 300, 352, 353, 400, 401, 402,
	376, 296, 0, 303, 304, 0, 384, 0, 0, 0,
	355, 0, 0, 0, 407, 0, 0, 0, 0, 0,
	0, 0, 331, 280, 335, 0, 0, 0, 0, 0,
	562, 0, 292, 293, 0, 0, 339, 334, 360, 362,
	371, 380, 390, 397, 373, 36, 37, 561, 0, 0,
	0, 0, 560, 0, 0, 0, 0, 0, 0, 606,
	0, 607, 1146, 0, 0, 0, 0, 0, 0, 597,
	598, 0, 0, 0, 0, 0, 0, 0, 0, 437,
	0, 0, 52, 587, 584, 585, 589, 590, 591, 592,
	1129, 0, 0, 588, 593, 477, 478, 563, 0, 0,
	1141, 0, 558, 576, 0, 0, 605, 0, 0, 0,
	0, 1147, 1148, 0, 0, 0, 0, 0, 0, 0,
	0, 1143, 0, 0, 0, 0, 0, 0, 0, 0,
	573, 574, 0, 0, 0, 0, 622, 0, 575, 0,
	0, 1012, 572, 577, 0, 0, 0, 0, 0, 0,
	1137, 1138, 1140, 0, 0, 0, 1139, 0, 0, 0,
	620, 0, 0, 0, 0, 0, 0, 1115, 0, 38,
	0, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 696, 0, 1145, 1134, 1133, 0, 0, 0, 0,
	39, 0, 40, 0, 0, 1135, 0, 0, 0, 0,
	0, 583, 0, 0, 0, 0, 0, 0, 1136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 0, 139, 1019, 0, 140, 141, 142, 144,
	143, 1023, 0, 1015, 0, 1027, 1026, 1028, 1013, 1030,
	0, 0, 0, 1034, 1031, 1033, 1032, 608, 1029, 0,
	0, 0, 0, 0, 0, 0, 0, 1020, 1021, 0,
	0, 0, 0, 1146, 0, 0, 0, 0, 0, 624,
	0, 609, 610, 0, 0, 0, 0, 0, 1022, 1024,
	0, 41, 0, 0, 1781, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1141, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 1147, 1148, 0, 0, 0,
	0, 0, 0, 0, 0, 1143, 0, 0, 0, 0,
	0, 0, 0, 0, 611, 621, 617, 618, 615, 616,
	614, 613, 612, 623, 599, 600, 601, 602, 604, 1203,
	0, 481, 480, 603, 1137, 1138, 1140, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1568, 0, 0, 0, 0, 1166, 1165, 0, 35,
	0, 1164, 0, 1167, 1168, 1169, 1170, 0, 36, 37,
	619, 1186, 0, 0, 0, 0, 0, 1189, 1188, 1187,
	0, 0, 1193, 1194, 1195, 1196, 1198, 1197, 1161, 1162,
	1163, 0, 0, 0, 0, 1191, 1192, 0, 1190, 0,
	0, 0, 0, 1158, 1157, 0, 0, 1152, 1153, 1154,
	1155, 0, 1156, 0, 1159, 0, 0, 0, 0, 0,
	0, 1160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1205, 0,
	1204, 1208, 0, 0, 0, 0, 38, 0, 1206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 0, 40,
	0, 0, 0, 0, 0, 0, 0, 1146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 0,
	139, 0, 0, 140, 141, 142, 144, 143, 0, 0,
	0, 0, 0, 0, 0, 1182, 1181, 0, 0, 0,
	562, 0, 0, 0, 0, 1176, 1183, 1184, 1185, 0,
	1177, 1178, 1179, 1180, 0, 0, 0, 561, 0, 0,
	0, 0, 560, 0, 0, 0, 0, 0, 0, 606,
	0, 607, 0, 0, 0, 0, 0, 0, 41, 597,
	598, 0, 0, 0, 0, 0, 0, 1824, 0, 437,
	0, 0, 52, 587, 584, 585, 589, 590, 591, 592,
	0, 0, 0, 588, 593, 477, 478, 563, 1825, 0,
	0, 0, 558, 576, 0, 0, 605, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1200, 1199, 1201, 1202, 0, 0, 0, 0, 0,
	573, 574, 0, 0, 0, 0, 622, 0, 575, 0,
	0, 571, 572, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 0, 0, 0, 0,
	620, 0, 0, 0, 0, 36, 37, 0, 1207, 38,
	867, 0, 561, 0, 0, 0, 0, 560, 0, 0,
	0, 0, 0, 0, 606, 0, 607, 0, 0, 0,
	39, 0, 40, 0, 597, 598, 0, 0, 0, 0,
	0, 583, 0, 0, 437, 0, 0, 52, 587, 584,
	585, 589, 590, 591, 592, 0, 0, 0, 588, 593,
	477, 478, 563, 0, 0, 0, 0, 558, 576, 0,
	0, 605, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 574, 870, 0, 0,
	0, 622, 0, 575, 0, 0, 571, 572, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 0, 0, 0, 624,
	0, 609, 610, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 0, 39, 0, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 611, 621, 617, 618, 615, 616,
	614, 613, 612, 623, 599, 600, 601, 602, 604, 0,
	0, 481, 480, 603, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 0, 0, 0, 0, 0, 36, 37,
	619, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 624, 0, 609, 610, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 611,
	621, 617, 618, 615, 616, 614, 613, 612, 623, 599,
	600, 601, 602, 604, 0, 0, 481, 480, 603, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 561, 0, 0, 0,
	0, 560, 0, 0, 0, 0, 0, 0, 606, 0,
	607, 0, 0, 36, 37, 619, 0, 0, 597, 598,
	0, 0, 0, 0, 0, 0, 0, 0, 437, 0,
	748, 52, 587, 584, 585, 589, 590, 591, 592, 0,
	0, 0, 588, 593, 477, 478, 563, 0, 0, 0,
	0, 558, 576, 0, 0, 605, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 0, 0, 0, 0, 0, 0, 0, 573,
	574, 0, 0, 0, 0, 622, 0, 575, 561, 0,
	571, 572, 577, 560, 0, 0, 0, 0, 0, 0,
	606, 0, 607, 0, 0, 0, 0, 0, 0, 620,
	597, 598, 0, 0, 0, 0, 0, 0, 38, 0,
	437, 0, 0, 52, 587, 584, 585, 589, 590, 591,
	592, 0, 0, 0, 588, 593, 477, 478, 563, 39,
	0, 40, 0, 558, 576, 0, 0, 605, 0, 0,
	583, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 574, 870, 0, 0, 0, 622, 0, 575,
	0, 0, 571, 572, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 0, 0, 0, 0, 0, 0,
	38, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 608, 0, 0, 0,
	0, 39, 0, 40, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 0, 0, 0, 0, 0, 624, 0,
	609, 610, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 595, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 611, 621, 617, 618, 615, 616, 614,
	613, 612, 623, 599, 600, 601, 602, 604, 608, 0,
	481, 480, 603, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	624, 0, 609, 610, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 36, 37, 619,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 595, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 611, 621, 617, 618, 615,
	616, 614, 613, 612, 623, 599, 600, 601, 602, 604,
	0, 0, 481, 480, 603, 0, 0, 0, 0, 0,
	696, 0, 0, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 0, 0, 0, 0, 560, 0, 0, 0, 36,
	37, 619, 606, 0, 607, 0, 0, 0, 0, 0,
	0, 0, 597, 598, 0, 0, 0, 0, 0, 0,
	0, 0, 437, 0, 0, 52, 587, 584, 585, 589,
	590, 591, 592, 0, 0, 0, 588, 593, 477, 478,
	563, 0, 0, 0, 0, 558, 576, 0, 0, 605,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 0, 0, 0, 0,
	0, 0, 0, 573, 574, 0, 0, 0, 0, 622,
	0, 575, 561, 0, 571, 572, 577, 560, 0, 0,
	0, 0, 0, 0, 606, 0, 607, 0, 0, 0,
	0, 0, 0, 620, 597, 598, 0, 0, 0, 0,
	0, 0, 38, 0, 437, 0, 0, 52, 587, 584,
	585, 589, 590, 591, 592, 0, 0, 0, 588, 593,
	477, 478, 563, 39, 0, 40, 0, 558, 576, 0,
	0, 605, 0, 0, 583, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 574, 0, 0, 0,
	0, 622, 0, 575, 0, 0, 571, 572, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	608, 0, 0, 0, 0, 39, 0, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 0, 0, 0,
	0, 0, 624, 0, 609, 610, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 611, 621, 617,
	618, 615, 616, 614, 613, 612, 623, 599, 600, 601,
	602, 604, 608, 0, 481, 480, 603, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 624, 0, 609, 610, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 36, 37, 619, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 611,
	621, 617, 618, 615, 616, 614, 613, 612, 623, 599,
	600, 601, 602, 604, 0, 0, 481, 480, 603, 960,
	961, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 607, 0,
	0, 0, 0, 0, 0, 0, 597, 598, 0, 0,
	0, 0, 0, 36, 37, 619, 437, 0, 0, 52,
	587, 584, 585, 589, 590, 591, 592, 0, 0, 0,
	588, 593, 477, 478, 0, 0, 0, 0, 0, 0,
	576, 0, 0, 605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 574, 0,
	0, 0, 0, 622, 0, 575, 0, 0, 571, 572,
	577, 0, 0, 0, 0, 0, 0, 0, 606, 0,
	607, 0, 0, 0, 0, 0, 0, 620, 597, 598,
	0, 0, 0, 0, 0, 0, 38, 0, 437, 0,
	0, 52, 587, 584, 585, 589, 590, 591, 592, 0,
	0, 0, 588, 593, 477, 478, 0, 39, 0, 40,
	0, 0, 576, 0, 0, 605, 0, 0, 583, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	574, 0, 0, 0, 0, 622, 0, 575, 0, 0,
	571, 572, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 0, 0, 0, 0, 39,
	0, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 0, 0, 0, 0, 0, 624, 0, 609, 610,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 611, 621, 617, 618, 615, 616, 614, 613, 612,
	623, 599, 600, 601, 602, 604, 608, 0, 481, 480,
	603, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 624, 0,
	609, 610, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 0, 0, 36, 37, 619, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 595, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 611, 621, 617, 618, 615, 616, 614,
	613, 612, 623, 599, 600, 601, 602, 604, 35, 0,
	481, 480, 603, 0, 0, 0, 606, 0, 607, 0,
	0, 0, 0, 0, 0, 0, 597, 598, 0, 0,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 52,
	587, 584, 585, 589, 590, 591, 592, 36, 37, 619,
	588, 593, 477, 478, 0, 0, 0, 0, 0, 0,
	576, 0, 0, 605, 0, 0, 0, 91, 0, 860,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 574, 0,
	0, 0, 0, 622, 0, 575, 0, 0, 571, 572,
	577, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 0, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 0, 139,
	126, 0, 140, 141, 142, 144, 143, 108, 109, 110,
	114, 112, 111, 113, 85, 87, 0, 83, 86, 92,
	88, 89, 90, 104, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 105, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 0, 0, 0, 0, 859,
	0, 0, 0, 0, 608, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 624, 0, 609, 610,
	696, 0, 1145, 1134, 1133, 0, 0, 0, 41, 0,
	0, 0, 0, 0, 1135, 0, 0, 0, 0, 696,
	0, 1145, 1134, 1133, 0, 0, 0, 1136, 0, 595,
	0, 0, 0, 1135, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 1136, 0, 0, 0,
	0, 611, 621, 617, 618, 615, 616, 614, 613, 612,
	623, 599, 600, 601, 602, 604, 0, 0, 481, 480,
	603, 0, 0, 745, 744, 0, 696, 0, 1145, 1134,
	1133, 1563, 0, 0, 0, 0, 0, 0, 0, 0,
	1135, 746, 745, 744, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1136, 0, 36, 37, 619, 0, 0,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1141, 0, 0, 0, 0, 0, 745,
	744, 0, 1129, 0, 1147, 1148, 0, 0, 0, 0,
	0, 0, 1141, 0, 1143, 0, 0, 746, 0, 0,
	0, 0, 0, 1147, 1148, 0, 0, 0, 0, 0,
	0, 0, 0, 1143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1137, 1138, 1140, 0, 0, 0, 1139,
	0, 0, 747, 0, 0, 0, 0, 0, 0, 1129,
	1568, 0, 1137, 1138, 1140, 0, 0, 0, 1139, 1141,
	0, 747, 0, 0, 0, 0, 0, 0, 0, 1568,
	1147, 1148, 0, 0, 0, 0, 0, 0, 0, 0,
	1143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1137,
	1138, 1140, 0, 0, 0, 1139, 0, 0, 747, 0,
	0, 0, 0, 0, 0, 0, 1606, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1146,
}

var yyPact = [...]int16{
	498, -1000, -273, -1000, -1000, 1470, 1967, 392, -1000, -1000,
	-1000, 1735, 474, 460, 459, 176, 426, 837, 1656, 1524,
	485, 389, -1000, -228, -207, -1000, -127, 479, -1000, 1217,
	-1000, 3471, 3471, 3471, 3471, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 260, 837, 837, 389, 93, 389, 1501, 597,
	1500, 692, -1000, -1000, 541, -1000, 1608, 539, -1000, -1000,
	389, 1524, 688, -1000, -1000, -1000, -1000, 734, 157, 2114,
	2017, -159, -21, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1379, 39, 1469, 1379, 1469,
	-1000, 1379, 1469, 31, 31, 31, 31, 31, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1468, 1466, -1000, 1379, 1379,
	1379, 1379, 1379, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1459, 1379, 1383, 61, 1388, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2017, 2017, 2017, 1464, 1524,
	837, 1499, 1498, 1524, -242, 1524, 1524, 1677, -1000, -1000,
	-1000, 131, 1524, 1590, 6648, 3471, 8184, 1524, -1000, 1586,
	492, 1524, 5880, -1000, 1565, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1458, 783, 837, 271, 146, 1253, 267, 497,
	257, 980, 268, -1000, -1000, -1000, 787, -1000, 837, -1000,
	1699, -1000, -1000, 264, -1000, 259, 677, 891, 1524, 1456,
	154, 1454, 2788, 854, -1000, -278, -1000, -23, -1000, 31,
	835, 1379, -1000, 31, 731, 31, 31, -1000, -1000, 546,
	1571, 546, 546, 546, 546, 890, 890, -166, -166, -1000,
	-1000, -1000, 853, -1000, -1000, 851, 1383, -1000, -1000, 850,
	1524, 837, 1453, 1497, 1524, 1524, 1605, 421, -1000, -1000,
	1604, 1599, 1291, -1000, -1000, 118, -1000, -1000, 597, 837,
	-1000, 536, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1395, -1000, 261, 490, 7032, 157, -1000, -1000,
	-1000, -1000, -1000, 503, -1000, 1711, 1638, 300, -7, -220,
	961, -1000, -1000, 1439, -1000, -1000, 10496, -1000, 959, 957,
	-1000, 954, 947, -13, 837, -1000, -216, 117, -9, -1000,
	-1000, 1253, -1000, 1438, 10496, 1597, -1000, 1574, 611, -1000,
	2118, -1000, -263, -1000, -1000, 792, -1000, -263, -1000, -1000,
	-1000, 1253, -1000, 1437, 1428, -1000, 1426, -1000, -1000, 1253,
	1253, 1253, 535, -1000, -1000, -1000, -1000, -1000, 546, 1275,
	31, 546, 1274, 1269, 546, 546, -1000, -1000, 944, 606,
	-1000, -1000, -1000, -1000, 1215, -1000, 1212, -1000, 54, 53,
	-1000, 1265, 1352, -1000, 1208, 1358, 1496, 291, 1524, 1425,
	1424, 1364, 389, 1364, 1636, 209, 1524, 1677, 372, 1677,
	597, 7416, 837, 238, 837, -1000, -1000, 442, 5496, -1000,
	-1000, 1196, -1000, 225, 1379, 10496, 514, 514, -224, 258,
	237, -220, 1253, 1419, -1000, 503, 495, -1000, 10496, 386,
	1253, 1253, 1253, 1253, 10404, -1000, -1000, 504, -1000, -1000,
	-1000, 10920, 10920, 10920, 10920, 10920, 10920, 10920, -1000, -1000,
	-1000, -1000, -8, -1000, -263, -1000, 865, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 533, 529, -1000, 1253, 1253, 1253,
	1253, 1253, 1253, 1253, 1253, 10496, 1253, 1552, 1253, 1253,
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 3963,
	1253, 1253, 1253, 1253, -1000, -1000, -1000, -1000, -1000, -1000,
	-220, 1417, -1000, -1000, -1000, 677, -1000, 10496, 372, 846,
	143, -1000, 1348, -1000, 849, 1258, 3069, 1257, -1000, 11207,
	-1000, -1000, -1000, 967, -1000, 808, -1000, 764, 1254, 9616,
	10052, 10052, 7416, -1000, -1000, 546, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 31, 888, 31, -25, -37, -1000,
	845, -1000, 843, 291, 837, 1524, 1252, 1346, -1000, 223,
	1414, 372, 503, -1000, 1658, 1683, -1000, 1364, 1524, -1000,
	403, 1643, -1000, -1000, 1631, -1000, 1341, -1000, -1000, 1272,
	1677, -1000, 1410, 837, -1000, -1000, 210, 837, -1000, -1000,
	-1000, -1000, -1000, 2508, 503, 1587, -1000, -1000, -1000, 799,
	749, -1000, -1000, 709, 163, 723, -1000, 837, -220, 1409,
	10496, 503, 1174, 180, 10496, 10496, 864, -1000, -1000, 251,
	10828, 833, 700, 10920, 10920, 10920, 10920, 10920, 10920, 10920,
	10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 879, 3420,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 906, -1000, 1364, 1310, 967, 967, 967, 1091,
	10404, 473, 2478, 2478, 5, 10404, 5, 5, 5, 5,
	5, 74, -1000, -276, -1000, -1000, 6648, 7416, 10052, 10052,
	8931, 10496, 10052, 10052, 10052, 1603, 671, 473, 1310, 1629,
	967, 967, 967, 967, -1000, 967, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35, -1000, -1000, -1000, -1000, -1000,
	-1000, 10052, 10052, 10052, 10052, -1000, 837, 1253, 495, 1085,
	-182, 10496, 1407, 611, -1000, -1000, 1246, -263, -1000, -1000,
	-1000, -159, -1000, -1000, -1000, -1000, 967, 10052, 1054, -1000,
	-1000, 684, 523, 1054, 1054, 1253, -1000, 546, -1000, 546,
	-1000, -1000, 1241, 1235, 1234, 1406, 1398, -246, 835, 291,
	1071, 1068, 1642, 1654, 1364, 1602, 1554, -1000, 967, 1596,
	837, -1000, -1000, -1000, -1000, -1000, 152, 670, 837, 8861,
	1237, -1000, 9248, 1393, 138, 301, 1474, 3324, 113, -1000,
	895, 647, 878, 646, 645, 637, 633, 622, 616, 610,
	605, 601, 590, -1000, -1000, -1000, -1000, 1587, -1000, 1694,
	-1000, -1000, -1000, 1682, 1392, 1389, 503, 495, 1060, 2508,
	-1000, -138, 251, 248, -1000, -1000, 802, -1000, -1000, 2904,
	10920, 10920, 10920, -1000, -1000, -1000, -1000, 833, 10920, 10920,
	10920, 1320, 2904, 2800, 1134, 2831, 5, 135, 135, 11,
	11, 11, 11, 11, 266, 266, -1000, -1000, -1000, -148,
	-1000, 967, 967, -1000, -1000, -1000, -1000, 10496, -1000, 967,
	-1000, -263, 861, -1000, -1000, 848, 1253, -1000, 1054, 1054,
	691, 1327, 11238, 1379, -1000, 1379, 1388, 1383, -1000, 61,
	-1000, -1000, 77, 1379, 75, 1379, 1379, 1379, -1000, -1000,
	1379, 1379, -1000, 1379, 1379, 619, 1289, 1280, 1054, 10052,
	-1000, 621, -1000, 10496, 967, 1524, -1000, -1000, -1000, -1000,
	-1000, -1000, 1054, 967, 1318, 1054, 1054, 1057, -1000, 10496,
	180, 1495, -1000, -1000, 766, -1000, 1230, 1082, -1000, -1000,
	1054, 10052, -270, -1000, -1000, 887, -1000, -1000, 5112, -270,
	-270, 10052, -1000, -1000, -1000, -1000, -246, 291, 503, 1664,
	1387, 1042, 1664, 2508, 1583, 10496, 10496, 1658, -1000, 1364,
	-1000, -1000, 1603, -1000, -1000, 695, -1000, 1364, 1178, 145,
	91, 10496, -1000, 2952, -1000, 8861, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1658, 10496,
	-1000, -1000, -1000, -1000, -1000, 837, 3620, 837, 837, 837,
	376, 10496, 897, 10496, -1000, -1000, -1000, -1000, -1000, 1524,
	1033, 9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248,
	9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248,
	9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248,
	9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248,
	9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248,
	9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248, 9248, 503,
	503, 1385, 1384, 219, -1000, 837, -1000, -175, 3324, 837,
	-1000, 816, -1000, -1000, 784, 786, 784, 784, 784, 784,
	784, 175, 777, 334, -1000, 514, 514, 837, 503, 1049,
	180, 2508, 1474, -1000, -1000, -1000, -1000, 2904, 2904, 2904,
	-1000, 1320, 2904, 937, -1000, 10920, 10920, 49, -1000, -1000,
	473, -1000, 55, -1000, -263, -1000, -1000, 4331, 879, 10496,
	-1000, 217, -1000, -1000, -1000, 1383, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4331, 10920, 10920, 10920,
	10920, -144, 1244, 667, -1000, 10496, 368, -1000, -1000, -1000,
	-1000, -1000, -1000, 294, 837, 495, -1000, 1705, -188, 916,
	-1000, -1000, -1000, -1000, -1000, 1253, -1000, -1000, 520, -1000,
	-1000, 967, 1664, 1017, 1045, 2508, 10496, 372, -246, 2508,
	-1000, -1000, 1692, 537, 815, 1316, -1000, 341, 1642, 967,
	1475, -1000, -1000, -150, 10496, 8861, 6422, 473, 6422, -1000,
	8861, 235, 1642, 11514, 392, 683, 295, 1315, 319, -1000,
	3960, 794, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 837, 1679, 1678,
	1670, 1669, 11590, 10496, 10496, -1000, 1626, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1012, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1038, 1036, 503, 503,
	1382, 1253, 1027, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 677, 677, 1023, 1021, 2508, -1000, 1474, -1000,
	-1000, 10920, 2904, 2904, -48, -1000, 848, -1000, 967, 1379,
	967, 681, -1000, -1000, -1000, 967, 2618, 2263, 1394, 491,
	1253, -136, -1000, 473, 10496, 1524, -1000, 180, 514, 514,
	-1000, -1000, -1000, 119, 657, 611, 611, 744, -6, -1000,
	1653, 557, 6264, -1000, 2508, 1664, 2508, 1474, 473, 1015,
	1664, 1474, -1000, 1547, 10496, 10496, 10496, -1000, 1583, -1000,
	10052, -1000, -1000, -267, 473, 2952, 3282, -1000, -1000, 130,
	6038, -1000, 1583, 8861, 654, -1000, 662, -1000, 6422, 482,
	1524, 1053, -1000, 1078, 1441, -1000, -1000, -1000, 1595, 614,
	548, 837, 139, 3471, -1000, -1000, 1313, 4344, -44, -1000,
	-1000, -1000, 584, 515, 866, -1000, 1570, -1000, -1000, 3620,
	1580, -1000, -1000, -1000, -1000, -1000, 6422, -1000, 1277, 967,
	670, 148, 9248, -1000, 241, 1002, 1000, 503, 837, -1000,
	3324, -1000, -1000, 269, 2508, 1474, -1000, 2904, -1000, -1000,
	-1000, -1000, -1000, 10920, -1000, -1000, 10920, -1000, 10920, -1000,
	10920, -1000, 10920, 10920, 967, 804, 473, 1365, -1000, -1000,
	-1000, 611, -1000, 611, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 641, -1000, 1652, 967, -1000, 1474, 2508, -1000, -1000,
	-1000, 2508, -1000, 1543, 473, 473, -1000, -1000, 1268, 10496,
	5654, -1000, -1000, -1000, -1000, 2316, 9085, 335, 2196, 187,
	1524, -1000, 187, 1008, 295, 1524, -1000, -1000, 1310, 295,
	295, 295, 295, 295, -1000, 1528, 1526, -1000, 1515, 1512,
	1521, 1524, 998, 614, 559, 1253, -1000, 1524, -1000, 1595,
	1618, -1000, 4728, 1313, -44, 1301, -1000, -80, -49, 9491,
	7416, 546, -1000, -1000, -1000, -1000, -1000, 837, 924, -1000,
	90, 144, -1000, 103, -1000, 125, 2508, 2508, 978, 967,
	-1000, 1524, 1474, -1000, 2654, 2654, 2654, 2654, 2654, 884,
	-1000, -1000, 837, -1000, -1000, -1000, 509, 10496, -1000, -1000,
	-1000, 1474, -1000, 1664, 295, 473, -1000, -1000, 4502, -1000,
	-1000, 10496, -1000, 10496, 6422, -1000, 1225, 1253, -1000, 1664,
	295, 1088, -1000, 1240, -1000, 580, 1441, 1363, 1494, 913,
	-1000, -1000, -1000, -1000, 1522, -1000, 1513, -1000, -1000, -1000,
	-1000, -154, 455, 452, 449, 837, -1000, 1364, -1000, 1301,
	-44, -88, -1000, -1000, -1000, -1000, 473, 578, -1000, 1292,
	-1000, 6422, -1000, -1000, 121, -1000, 1474, 1474, -1000, -1000,
	1360, -1000, -1000, -1000, -1000, -1000, -1000, 967, 161, -177,
	976, 7416, 966, -1000, 473, -1000, 1661, 1278, 318, 8861,
	8630, 11533, 1473, 1310, 1253, -1000, 7800, 837, 1658, 1088,
	-1000, 1664, 1310, 10496, -1000, -1000, 10496, 1359, -1000, 10496,
	-1000, -1000, -1000, -1000, 1311, 1253, 1253, 1253, 951, -1000,
	-1000, -1000, -1000, -84, -73, -1000, 10496, 3193, -1000, -1000,
	-1000, -1000, 837, -1000, 1540, -158, -196, -1000, -1000, -1000,
	967, 10496, 1657, 1649, -1000, 253, 654, -1000, -1000, 1577,
	1222, 1273, -1000, -1000, 9960, 967, 971, -1000, -1000, 499,
	-1000, -1000, 951, 1642, -1000, 1658, -1000, 473, 473, 372,
	473, 46, 372, 372, 372, 116, 837, -1000, -1000, -1000,
	473, 5270, 926, -1000, 1538, -1000, -1000, -1000, -1000, 10496,
	10496, 4886, 206, -1000, 1253, -1000, -1000, 1251, 8568, 837,
	-1000, -1000, 1642, 923, 920, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 918, 918, 918, 559, -1000, -1000,
	-1000, -153, 473, 1277, 265, 1685, -1000, 1253, -1000, 1364,
	-1000, -1000, -1000, -1000, -1000, 46, -1000, -1000, -1000, -154,
	-190, -1000, 1310, 1273, 967, -1000, -1000, -199, 1223, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 1989, 41, 26, 1988, 1987, 1986, 1985, 1984, 1983,
	1982, 1981, 1979, 1978, 1976, 56, 58, 40, 52, 48,
	1973, 1971, 1968, 1963, 1962, 88, 1960, 1959, 1955, 1952,
	109, 1951, 1950, 1949, 1942, 78, 224, 144, 158, 1891,
	30, 57, 73, 68, 1941, 29, 1939, 1938, 60, 1937,
	36, 1936, 1935, 142, 1933, 1932, 5, 125, 92, 106,
	53, 1931, 1930, 94, 2507, 1929, 1928, 129, 1926, 1925,
	87, 14, 67, 3, 7, 9, 1924, 64, 1, 1922,
	76, 80, 1921, 1916, 1905, 17, 1902, 63, 75, 23,
	62, 1900, 21, 8, 128, 39, 24, 13, 2, 50,
	31, 1898, 22, 37, 28, 1897, 69, 1896, 111, 49,
	66, 11, 1634, 0, 27, 153, 1887, 1884, 1882, 2058,
	134, 10, 61, 77, 1881, 72, 96, 55, 95, 1877,
	1876, 1875, 1871, 51, 205, 198, 193, 1869, 1863, 1860,
	1858, 1856, 81, 1854, 2018, 856, 105, 91, 42, 1853,
	1851, 90, 303, 89, 82, 309, 823, 1608, 1850, 1846,
	1845, 1842, 102, 1841, 71, 99, 16, 587, 1840, 1837,
	1836, 1835, 1834, 1831, 1830, 100, 1826, 131, 59, 195,
	38, 46, 1823, 1822, 1820, 1819, 101, 1818, 1817, 1815,
	74, 1812, 1810, 97, 113, 112, 107, 110, 1809, 1805,
	93, 79, 1800, 104, 108, 1794, 103, 98, 25, 122,
	54, 1792, 1781, 1780, 6, 4, 1762, 1761, 1757, 1753,
	1746, 1744, 65, 1736, 147, 1734, 15, 1730, 1727, 47,
	1726, 1725, 1724, 1722, 1718, 780, 1564, 1716, 2701, 118,
	1711, 115,
}

var yyR1 = [...]uint8{
	0, 231, 232, 232, 1, 1, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
	21, 234, 234, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 28, 28, 7, 8, 8, 8, 237, 237,
	48, 48, 95, 95, 9, 9, 9, 9, 10, 10,
	211, 211, 210, 212, 212, 11, 11, 11, 11, 11,
	205, 205, 205, 205, 205, 12, 12, 208, 208, 208,
	15, 15, 15, 15, 16, 16, 17, 17, 17, 19,
	19, 100, 100, 104, 104, 104, 105, 105, 105, 105,
	223, 223, 124, 124, 233, 233, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 203, 203, 203, 203, 204,
	204, 204, 204, 206, 206, 207, 207, 207, 207, 207,
	207, 209, 209, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 13, 13, 29, 29, 72, 72,
	14, 110, 110, 184, 184, 184, 185, 185, 185, 185,
	185, 185, 187, 187, 188, 188, 117, 117, 189, 189,
	24, 169, 170, 170, 170, 170, 170, 170, 170, 170,
	156, 156, 156, 156, 127, 127, 127, 127, 127, 127,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 195,
	195, 195, 195, 195, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 197, 198, 199, 191, 191,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 146, 146, 146, 146, 146, 146,
	190, 190, 186, 186, 186, 186, 129, 129, 129, 129,
	129, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 137, 134, 134, 138, 135, 135, 139, 141, 142,
	142, 153, 153, 154, 154, 154, 136, 136, 140, 130,
	130, 130, 130, 130, 130, 130, 130, 128, 128, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 143, 143, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 155, 155, 144, 144, 145, 145, 145, 152,
	152, 152, 149, 149, 150, 150, 151, 151, 151, 147,
	147, 147, 148, 148, 148, 158, 180, 180, 180, 182,
	182, 183, 183, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 168, 168, 200,
	200, 201, 201, 202, 202, 179, 179, 179, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 167,
	167, 177, 177, 178, 178, 175, 175, 175, 175, 176,
	162, 162, 162, 162, 162, 163, 163, 164, 164, 164,
	164, 159, 159, 160, 160, 161, 161, 193, 193, 193,
	227, 227, 227, 227, 227, 227, 228, 228, 194, 194,
	165, 165, 166, 166, 173, 173, 173, 173, 239, 239,
	171, 171, 171, 172, 172, 172, 240, 25, 26, 26,
	27, 27, 27, 32, 32, 32, 30, 30, 31, 31,
	37, 37, 36, 36, 38, 38, 38, 38, 116, 116,
	116, 115, 115, 224, 224, 224, 224, 224, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 214, 214, 213,
	213, 215, 215, 215, 215, 215, 215, 215, 215, 55,
	55, 92, 92, 92, 96, 96, 44, 44, 44, 44,
	45, 45, 46, 46, 47, 47, 122, 122, 121, 121,
	121, 49, 49, 49, 51, 50, 50, 50, 50, 52,
	52, 54, 54, 53, 53, 56, 56, 56, 56, 57,
	57, 94, 94, 39, 39, 39, 39, 39, 39, 39,
	39, 107, 107, 59, 59, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 69, 69, 69, 69, 69, 69, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 35, 35,
	70, 70, 70, 77, 71, 71, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 67, 67, 67, 67, 67, 67, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 241, 241, 68, 68, 68, 68, 33, 33,
	33, 33, 33, 123, 123, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 126, 126, 126, 126, 126, 126, 126, 126, 81,
	81, 34, 34, 79, 79, 80, 109, 109, 82, 82,
	78, 78, 78, 78, 216, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 60, 60, 83, 83, 84,
	84, 225, 225, 226, 85, 85, 86, 86, 87, 88,
	88, 88, 89, 89, 89, 89, 90, 90, 90, 62,
	62, 62, 62, 62, 62, 91, 91, 93, 93, 93,
	93, 97, 97, 73, 73, 75, 75, 74, 76, 98,
	98, 102, 99, 99, 103, 103, 103, 103, 103, 22,
	23, 101, 101, 101, 118, 118, 118, 108, 108, 106,
	106, 113, 114, 114, 114, 114, 114, 119, 119, 119,
	120, 120, 217, 217, 217, 218, 218, 218, 219, 219,
	220, 221, 221, 222, 230, 230, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 112, 112,
	112, 112, 112, 112, 235, 236,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 3, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 10, 1, 1, 5, 5, 3, 5, 3, 1,
	3, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 4, 2, 3,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 4, 1, 1, 0, 1,
	2, 0, 3, 0, 2, 2, 0, 2, 2, 2,
	2, 2, 0, 2, 0, 3, 0, 1, 0, 2,
	4, 4, 0, 1, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 1,
	2, 2, 3, 2, 4, 2, 4, 2, 2, 3,
	2, 3, 2, 7, 9, 3, 3, 6, 9, 9,
	6, 6, 8, 8, 5, 8, 7, 4, 0, 2,
	4, 6, 2, 4, 2, 1, 1, 2, 1, 2,
	2, 1, 1, 1, 3, 1, 2, 1, 1, 2,
	0, 4, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 2, 4, 6, 2, 3, 2, 3, 1, 3,
	0, 2, 0, 2, 2, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 2, 1, 1, 2, 3, 0,
	1, 0, 5, 0, 3, 5, 1, 1, 1, 1,
	3, 3, 2, 2, 2, 1, 1, 1, 1, 4,
	5, 4, 4, 4, 1, 2, 2, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 1, 3, 0, 3, 0, 3, 3, 0,
	3, 3, 0, 1, 0, 1, 0, 2, 1, 0,
	3, 3, 0, 1, 2, 6, 0, 1, 4, 1,
	2, 1, 3, 2, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 5, 3, 3,
	2, 3, 2, 3, 3, 2, 2, 3, 4, 1,
	1, 1, 1, 1, 3, 3, 2, 2, 4, 1,
	2, 5, 5, 8, 8, 13, 11, 1, 1, 2,
	2, 10, 8, 9, 7, 7, 5, 0, 1, 1,
	0, 1, 1, 1, 2, 2, 1, 2, 0, 3,
	0, 1, 1, 3, 0, 4, 1, 3, 2, 1,
	1, 2, 1, 1, 1, 1, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 3, 6, 4, 7, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 0, 4, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	8, 1, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 0, 4, 1, 3, 3, 2, 3, 2, 1,
	2, 0, 3, 1, 1, 3, 4, 4, 4, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 4, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 6, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 1, 1, 1,
	1, 2, 1, 4, 5, 5, 5, 5, 6, 4,
	4, 6, 6, 8, 6, 6, 6, 8, 6, 8,
	6, 8, 6, 8, 9, 7, 5, 4, 4, 3,
	3, 3, 1, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 2, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 2, 2, 2, 1, 1, 2, 2, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 0, 2,
	1, 1, 3, 5, 3, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 0, 3, 0,
	2, 1, 3, 1, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 1, 3, 1,
	1, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 5, 3, 1,
	3, 1, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 2, 0, 2, 2, 0, 1,
	4, 1, 3, 2, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -231, -1, -20, -21, -24, 126, 127, -232, 392,
	-169, 58, -227, -228, 277, -189, 135, 148, 168, 169,
	362, 133, 374, 375, 150, 377, 79, -106, 138, -170,
	-156, -113, -112, 63, 36, 61, 387, 388, 148, 169,
	171, 290, 134, 134, 134, 136, 214, 136, -113, -113,
	-78, 139, 61, -112, -119, 63, -53, -119, 61, -112,
	133, -108, 139, 377, 374, 375, 342, 133, 60, 59,
	-157, -127, -129, -128, -131, -130, -132, -113, -137, -138,
	-141, -139, -140, 250, 354, 247, 251, 248, 253, 254,
	255, 120, 252, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 256, 268, 33, 155, 240, 241,
	242, 245, 244, 246, 243, 269, 270, 271, 272, 273,
	274, 275, 276, 277, -133, -134, 233, -135, -136, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 232,
	235, 236, 237, 239, 238, -157, -157, -157, -113, 56,
	213, -113, -113, -108, 215, -108, 56, -203, 19, 193,
	194, 206, 56, 81, 123, 25, 123, -108, -53, 81,
	-53, 306, -173, -239, 357, 37, -156, -158, -162, -159,
	-160, -161, -174, -163, 142, 140, 150, 390, 144, 145,
	277, -167, 146, 134, 151, 73, 81, -195, 142, -198,
	56, 285, 291, 140, 151, 150, 390, 71, 143, 25,
	364, 366, 31, 32, -151, 393, 279, -149, 288, -144,
	58, -143, 249, -145, 58, -144, -145, -144, -145, -147,
	251, -147, -147, -147, -147, 58, 58, -144, -144, -144,
	-144, -144, 58, -144, -153, 58, -142, 234, -154, 58,
	56, 57, -53, -113, 56, 56, -53, -223, 387, 388,
	-53, -53, -206, -204, 8, 9, 10, 207, -53, 26,
	-114, -120, -113, 299, 147, -111, -112, -119, 131, 194,
	365, 80, 25, 27, 285, 291, 193, 84, 120, 16,
	85, 200, 374, 375, 119, 76, 343, 126, 52, 335,
	336, 333, 198, 345, 346, 334, 292, 205, 20, 31,
	10, 28, 153, 24, 113, 128, 195, 89, 88, 156,
	160, 161, 26, 154, 75, 201, 203, 19, 55, 146,
	11, 364, 13, 14, 379, 366, 139, 138, 100, 378,
	134, 50, 8, 122, 29, 97, 46, 151, 204, 48,
	98, 17, 337, 338, 34, 352, 162, 115, 53, 40,
	380, 81, 381, 73, 56, 306, 199, 79, 15, 51,
	163, 382, 202, 386, 99, 129, 342, 170, 49, 196,
	383, 132, 197, 6, 348, 33, 152, 47, 133, 293,
	384, 87, 137, 74, 5, 150, 9, 385, 54, 57,
	339, 340, 341, 38, 86, 12, 149, 356, 77, -127,
	-120, -111, -53, 26, 131, -53, -171, 59, -114, 71,
	-111, -112, 36, 58, -194, 56, 81, -165, -113, 151,
	-167, 61, 134, -193, 374, 375, -235, 58, -167, -167,
	61, 134, 151, 61, 151, 73, 19, -113, 9, 151,
	151, -194, 63, -53, 58, -191, 365, 16, 58, -196,
	58, -197, 63, 64, 65, 110, 66, 73, -146, 72,
	-59, 280, -67, 333, 336, 335, 281, 74, 75, -113,
	351, 350, -119, -199, 65, 394, -150, 289, -147, 65,
	-144, -147, 65, 61, -147, -147, -148, 120, 119, 33,
	-148, -148, -148, -148, -155, 63, -155, -152, 356, 357,
	-152, 65, 65, -153, 65, -53, -113, 58, 56, -53,
	-53, 25, 136, 25, -184, 25, 56, 59, 207, -203,
	-113, 123, 57, -117, 142, -162, 150, 131, 90, -114,
	-239, -178, -175, -113, 151, 58, 10, 9, 19, 146,
	140, 150, 390, -193, 61, 58, -39, -58, 81, -64,
	31, 26, 9, 76, -235, -63, -59, -78, -216, -76,
	-77, 120, 121, 109, 110, 117, 82, 122, -67, -65,
	-66, -68, -219, 180, 63, 64, -113, 62, 72, 65,
	66, 67, 68, 73, -119, 311, -74, 48, 49, 343,
	344, 345, 346, 352, 347, 85, 38, 40, 256, 280,
	281, 333, 341, 340, 339, 337, 338, 335, 336, 389,
	139, 334, 115, 342, 278, 61, 61, 61, 61, -193,
	150, -165, -113, 376, -195, 390, -146, -235, 58, -39,
	25, 31, -60, 65, 110, -196, 58, -197, -186, 389,
	65, 66, -186, -235, -144, 58, -144, 58, 58, -235,
	-235, -235, 123, -148, 60, -147, -148, 60, 60, -148,
	-148, 61, 61, 120, 60, 59, 60, 240, 240, 60,
	59, 60, 59, 58, 57, 56, -177, -178, -67, -113,
	-53, 58, 58, -2, -3, -4, 6, -235, -108, -2,
	-185, 19, 177, 178, -53, -204, -92, -113, 151, -206,
	-203, -114, -113, -234, 134, 151, -113, 142, -162, -172,
	-114, 63, 65, 60, 59, -144, -176, 283, -144, -39,
	-164, 173, 174, 33, 175, -164, 376, 151, 151, -193,
	-235, 58, -178, -236, 80, 79, 97, 208, 60, -39,
	-61, 100, 81, 98, 99, 84, 106, 105, 116, 109,
	110, 111, 112, 113, 114, 115, 107, 108, 119, 389,
	90, 91, 92, 93, 94, 95, 96, 101, 102, 103,
	104, -107, -235, -77, -235, -235, -235, -58, -2, -71,
	-235, -39, 124, 125, -64, -235, -64, -64, -64, -64,
	-64, -64, -220, 279, -186, 63, 123, 123, -235, -235,
	-235, -235, -235, -235, -235, -235, -81, -39, -235, 41,
	-235, -235, -235, -235, -241, -235, -241, -241, -241, -241,
	-241, -241, -126, 120, 251, 155, 242, -133, -128, 257,
	256, -235, -235, -235, -235, -193, 58, -194, -39, -92,
	60, 58, 366, 59, 65, 60, -196, 63, 60, 282,
	122, -127, -236, 60, 60, 60, -37, 24, -36, -38,
	111, -39, -119, -36, -36, -114, -148, -147, 63, -147,
	290, 290, 65, 65, -177, -113, -53, 60, 58, 58,
	-92, -178, -85, 15, -27, 5, -25, -240, -2, -53,
	137, 21, 6, 8, 9, 10, 19, -110, 59, 25,
	-206, -233, 58, -113, 150, -113, -180, -182, 356, -181,
	57, 147, 71, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 61, -175, -88, 27, 28, 60, -194, 56,
	73, 176, -194, 56, -165, -193, 58, -39, -178, 60,
	-190, 175, -39, -39, -69, 73, 81, 74, 75, -64,
	21, 22, 23, -70, -74, -77, 69, 100, 98, 99,
	84, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -123, 61, 63, 241,
	-126, 61, -78, -113, -236, -236, -236, 59, -236, -2,
	-63, 63, -113, -63, -113, 393, -114, -114, -36, -36,
	-39, -125, 120, 247, 155, 242, -135, -134, -136, 233,
	266, 267, 287, 240, 288, -133, 245, 244, 246, 257,
	248, 253, 255, 254, 252, -39, -38, -38, -36, -30,
	24, -79, -80, 86, -78, 19, -236, -236, -236, -236,
	-236, 249, -36, -37, -36, -36, -36, -166, -113, -235,
	-236, 60, 362, 363, -39, 58, -60, 60, -151, -236,
	-36, 59, -236, -116, -115, 25, -113, 63, 123, -236,
	-236, -235, -148, -148, 60, 60, 60, 58, 58, -94,
	378, -177, 60, 60, -89, 17, 16, -5, -3, -235,
	21, 24, -32, 44, 45, -26, -236, 25, -166, 195,
	-109, 86, -113, -207, -209, 216, -18, -15, -6, -8,
	-7, -10, -9, -11, -12, -13, -14, -22, -3, 139,
	-16, -17, -28, 10, 9, 20, 33, 199, 200, 205,
	201, 149, -29, 170, -23, 8, 342, 160, 161, 56,
	-238, -113, 109, 110, 111, 112, 114, 106, 105, 116,
	123, 90, 91, 92, 63, 59, 58, 65, 66, 67,
	68, -112, -133, -134, -135, -136, 257, 262, 263, 264,
	265, 248, 247, 258, 259, 260, 73, 81, 80, 79,
	100, 97, 98, 84, 85, 86, 87, 89, 88, 344,
	343, 345, 346, 31, 142, 140, 150, 390, 143, 58,
	58, 374, 375, 140, -179, 56, -181, 356, 58, 358,
	61, -168, 90, 63, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, -88, 9, 10, 58, 58, -178,
	-236, 60, -180, 349, 73, 74, 75, -64, -64, -64,
	-70, -64, -64, -64, -35, 156, 80, 356, -236, -236,
	-39, -236, -221, -222, 63, -236, -236, 59, 57, 59,
	-144, -144, -144, -154, -153, -142, 227, -144, 227, -144,
	-144, -144, -144, -144, -144, -144, 25, 59, 11, 59,
	11, -236, -36, -82, -80, 89, -39, -236, -119, -236,
	-236, -236, -236, 60, 59, -39, -190, 56, 60, -192,
	60, 60, -236, -38, -224, 391, -115, 111, -120, -224,
	-224, -37, -94, -177, -178, -57, 12, 58, 60, -57,
	-180, -90, 19, 34, -39, -86, -87, -39, -85, -2,
	-30, 70, -2, -187, 57, 196, 216, -39, 392, -209,
	216, -207, -85, -39, -25, -25, -25, -211, -113, -210,
	-25, -230, -229, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, -113, -113, -113, -205, 40, 202,
	203, 204, -39, -113, -235, -81, -53, 60, -238, -238,
	-238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
	-238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
	-238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
	-238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
	-238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
	-238, -238, -238, -238, -238, -238, -178, -178, 58, 58,
	151, -113, -183, -181, -113, 65, -200, 56, 77, 65,
	-200, -200, -200, -200, -200, -201, 191, 192, 65, -202,
	-201, 65, -164, -164, -166, -178, 60, -190, -180, -179,
	-35, 80, -64, -64, 240, 394, 59, -186, -125, 120,
	-123, -39, -147, 61, -153, -125, -64, -64, -64, -64,
	353, -85, 88, -39, 87, 143, -113, -236, 10, 9,
	362, 363, 60, 217, 368, 369, 162, 370, 175, 371,
	372, -235, 123, -236, -57, 60, 60, -180, -39, -92,
	-94, -180, 9, 100, 59, 18, 59, -88, -89, -236,
	-31, 47, -188, 356, -39, -207, -208, -209, -209, -207,
	392, 88, -89, 87, -19, -15, -16, -18, 216, -106,
	11, -48, -53, -41, -42, -43, -44, -55, -77, -235,
	-53, 59, -212, -122, 197, 25, -99, -124, 218, -103,
	301, 300, -114, 311, -101, 299, 251, 298, -200, 59,
	-113, 11, 11, 11, 11, -209, 216, -72, -71, -72,
	-110, 19, 60, 60, 60, -178, -178, 58, -235, 60,
	59, -194, -194, 60, 60, -180, -179, -64, 290, -222,
	-236, -236, -236, 59, -236, -236, 59, -236, 19, -236,
	59, -236, 19, -235, -34, 348, -39, -53, -190, -164,
	-164, 356, -60, 16, -60, -60, -60, 65, 369, 162,
	371, 16, -236, 163, -85, 111, -180, -57, -180, -179,
	60, -57, -179, 42, -39, -39, -87, -90, -36, 390,
	392, -209, 88, 88, -90, -207, 89, 89, -208, -54,
	29, -53, -53, -48, -237, 59, 11, 57, 33, 59,
	-49, -51, -50, -52, 46, 50, 52, 47, 48, 49,
	53, -122, -41, -235, -121, 163, -119, 25, -210, -113,
	198, -127, 59, -99, 218, -100, -104, 302, 304, 90,
	123, -118, -113, 63, 31, 33, -229, 29, -208, -236,
	-109, 195, -238, -217, 209, 81, 60, 60, -178, -113,
	-181, 143, -180, -179, -64, -64, -64, -64, -64, -64,
	-236, 63, 58, -60, -60, 373, -119, 16, -236, -179,
	-180, -180, 43, -40, 11, -39, 88, -209, 392, -16,
	-19, 139, -17, 139, 392, 88, -95, 163, -53, -95,
	57, -41, -53, -98, -102, -78, -42, -43, -43, -42,
	-43, 46, 46, 46, 51, 46, 51, 46, -50, -119,
	-236, -56, 54, 138, 55, -235, -119, 19, -103, -100,
	59, 303, 305, 306, 56, 77, -39, -114, -148, -166,
	88, 216, 196, -218, 210, 209, -180, -180, 60, -236,
	-53, -179, -236, -236, -236, -236, -236, -33, 100, 356,
	-166, 123, -225, -226, -39, -179, -57, -41, 88, 89,
	-39, -39, -62, 33, 38, -2, -235, -235, -57, -41,
	-57, -40, 59, 90, -46, -45, 56, 57, -47, 56,
	-45, 46, 46, -214, 356, 134, 134, 134, -96, -113,
	-2, -104, -105, 307, 304, 310, 90, -208, 212, 211,
	-179, -179, 58, -236, 354, 53, 359, 60, -114, -236,
	-85, 59, -83, 13, 139, -207, -19, -19, -97, 56,
	-98, -73, -75, -74, -235, -2, -91, -93, 6, -113,
	-111, -112, -96, -85, -57, -57, -102, -39, -39, 58,
	-39, 58, -235, -235, -235, -236, 59, 304, 308, 309,
	-39, 392, -166, 43, 355, 360, -236, -226, -84, 14,
	16, 392, 30, -97, 59, -236, -236, -236, 59, 123,
	-236, -89, -85, -92, -213, -215, 379, 380, 381, 382,
	383, 384, 385, 386, -92, -92, -92, -121, -113, 88,
	60, 43, -39, -71, 88, 151, -75, 38, -2, -235,
	-93, -113, -89, 60, 60, 59, -236, -236, -236, -56,
	356, 139, 9, -73, -2, -215, -214, 359, -98, -236,
	360,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 879, 1, 3,
	6, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 491, 492, 493, 496, 0, 0, 880, 0,
	223, 268, 268, 268, 268, 881, 1058, 1059, 1060, 1061,
	1062, 1063, 0, 0, 0, 877, 0, 877, 0, 800,
	0, 0, -2, -2, 0, 889, 0, 603, 887, 888,
	877, 0, 0, 497, 494, 495, 219, 0, 504, 0,
	230, 406, 402, 235, 236, 237, 238, 239, 316, 317,
	318, 319, 320, 357, 358, 394, 381, 396, 394, 396,
	364, 394, 396, 409, 409, 409, 409, 409, 372, 373,
	374, 375, 376, 377, 378, 0, 0, 349, 394, 394,
	394, 394, 394, 355, 356, 383, 384, 385, 386, 387,
	388, 389, 390, 0, 394, 341, 339, 343, 348, 321,
	322, 323, 324, 325, 326, 327, 328, 329, 330, 332,
	333, 335, 336, 346, 347, 231, 232, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 166,
	167, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 221, 506, 0, 509, 224, 225, 226, 227,
	228, 229, 0, 498, 500, 0, 487, 0, 0, 0,
	0, 0, 0, 459, 460, 241, 0, 243, 0, 245,
	0, 247, 248, 0, 250, 252, 498, 0, 0, 0,
	0, 0, 0, 0, 240, 0, 408, 404, 403, 409,
	0, 394, 382, 409, 0, 409, 409, 365, 366, 412,
	0, 412, 412, 412, 412, 0, 0, 399, 399, 352,
	353, 354, 0, 331, 334, 0, 341, 340, 337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 101,
	0, 203, 0, 173, 169, 170, 171, 168, 0, 0,
	802, 0, 882, 883, 884, -2, -2, 890, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 22,
	604, 891, 0, 878, 216, 0, 0, 0, 510, 512,
	885, 886, 508, 0, 470, 0, 0, 0, 501, 487,
	0, 455, -2, 0, 488, 489, 898, 1064, 0, 0,
	450, 452, 0, 487, 500, 242, 0, 0, 0, 249,
	251, 0, 255, 256, 898, 0, 288, 0, 0, 269,
	0, 272, -2, 275, 276, 0, 278, 312, 281, 282,
	283, 0, 285, 394, 394, 308, 0, 623, 624, 0,
	0, 0, 0, 286, 287, 407, 234, 405, 412, 0,
	409, 412, 0, 0, 412, 412, 367, 413, 0, 0,
	368, 369, 370, 371, 0, 392, 0, 350, 0, 0,
	351, 0, 0, 338, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 500, 29, 217, 0, 0, 511,
	507, 0, 463, 394, 394, 898, 0, 0, 0, 0,
	0, 487, 0, 0, 454, 0, 0, 613, 898, 619,
	621, 0, 0, 0, 898, 666, 667, 668, 669, 670,
	671, 898, 898, 898, 898, 898, 898, 898, 697, 698,
	699, 700, 0, 702, -2, 806, 800, 808, 809, 810,
	811, 812, 813, 814, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 732, 742, 742, 742, 742, 742, 742, 742, 0,
	0, 0, 0, 0, 899, 448, 449, 451, 453, 457,
	487, 0, 501, 267, 244, 498, 246, 898, 0, 0,
	0, 289, 0, 815, 0, 0, 0, 0, 274, 0,
	277, 279, 280, 0, 304, 0, 306, 0, 0, -2,
	898, 898, 0, 359, 395, 412, 361, 397, 398, 362,
	363, 414, 410, 411, 409, 0, 409, 0, 0, 391,
	0, 344, 0, 0, 0, 0, 0, 461, 462, 394,
	0, 0, 0, -2, 824, 0, 516, 0, 0, -2,
	0, 0, 204, 205, 201, 174, 172, 571, 572, 0,
	0, 803, 104, 0, 31, 32, 501, 500, 30, 505,
	513, 514, 515, 416, 0, 829, 467, 469, 466, 0,
	498, 477, 478, 0, 0, 498, 499, 500, 487, 0,
	898, 0, 0, 310, 898, 898, 0, 618, 1065, 616,
	898, 0, 0, 898, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 0, 0,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 620, 0, 637, 0, 0, 0, 613, 36, 0,
	898, 664, 0, 0, 688, 898, 689, 690, 691, 692,
	693, 694, 701, 0, 805, 807, 0, 0, 898, 898,
	898, 898, 898, 898, 898, 526, 0, 790, 0, 0,
	0, 0, 0, 0, 734, 0, 735, 736, 737, 738,
	739, 740, 741, 781, 0, 783, 784, 785, 786, 787,
	788, 898, -2, 898, 898, 458, 0, 0, 0, 0,
	0, 898, 264, 0, 816, 270, 0, 312, 273, 313,
	314, 406, 284, 305, 307, 309, 0, 898, 0, 532,
	534, 538, 0, 0, 0, 0, 360, 412, 393, 412,
	400, 401, 0, 0, 0, 0, 0, 611, 1064, 0,
	0, 0, 832, 0, 0, 520, 523, 518, 36, 0,
	0, 207, 208, 209, 210, 211, 0, 796, 0, 0,
	0, 23, 106, 0, 0, 501, 445, 417, 0, 419,
	0, 437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 464, 465, 830, 831, 829, 471, 0,
	479, 480, 472, 0, 0, 0, 0, 0, 0, 416,
	486, 0, 614, 615, 617, 641, 0, 643, 645, 625,
	898, 898, 898, 629, 660, 661, 662, 0, 898, 898,
	898, 658, 633, 0, 672, 673, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 686, 753, 754, 0,
	696, 0, 0, 800, 639, 640, 663, 898, 857, 36,
	684, 312, 0, 685, 695, 0, 802, 804, 0, 0,
	0, 0, -2, 394, 758, 394, 343, 341, 762, 339,
	764, 765, 766, 394, 769, 394, 394, 394, 774, 775,
	394, 394, 778, 394, 394, 0, 0, 0, 0, 898,
	527, 798, 793, 898, 0, 0, 729, 730, 731, 733,
	743, 782, 0, 0, 531, 0, 0, 0, 502, 898,
	310, 257, 260, 261, 0, 290, 0, 0, 315, 703,
	0, 898, 543, 535, 539, 0, 541, 542, 0, 543,
	543, -2, 379, 380, 342, 345, 611, 0, 0, 609,
	0, 0, 609, 416, 836, 898, 898, 824, 38, 0,
	521, 522, 526, 524, 525, 517, 37, 0, 212, 0,
	0, 898, 573, 19, 175, 0, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 192, 824, 898,
	82, 83, 516, 516, 516, 0, 516, 0, 0, 0,
	70, 898, 0, -2, 869, 42, 43, 196, 197, 0,
	0, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 0,
	0, 0, 0, 0, 415, 0, 420, 0, 0, 0,
	423, 0, 438, 425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 468, 0, 0, 0, 0, 0,
	310, 416, 445, 311, 642, 644, 646, 626, 627, 628,
	630, 658, 634, 0, 631, 898, 898, 0, 622, 638,
	665, -2, 0, 901, 312, 709, 710, 0, 0, 898,
	755, 409, 759, 760, 761, 341, 767, 768, 770, 771,
	772, 773, 776, 777, 779, 780, 0, 898, 898, 898,
	898, 0, 824, 0, 794, 898, 0, 727, 728, 744,
	745, 746, 747, 0, 0, 0, 253, 0, 0, 0,
	266, 271, 704, 533, 705, 0, 540, 536, 0, 706,
	707, 0, 609, 0, 0, 416, 898, 0, 611, 416,
	13, 33, 0, 0, 833, 825, 826, 829, 832, 36,
	528, 519, -2, 214, 898, 202, 0, 797, 0, 178,
	0, 0, 832, 0, 879, 0, 0, 58, -2, 60,
	0, 0, 904, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 65, 66, 67, 0, 0, 0,
	0, 0, 0, -2, -2, 200, 201, 105, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 0, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 0, 0, 0, 0,
	0, 446, 0, 421, 426, 424, 427, 439, 440, 428,
	429, 430, 431, 432, 433, 434, 441, 442, 435, 436,
	443, 444, 498, 498, 0, 0, 416, 485, 445, 484,
	632, 898, 659, 635, 0, 900, 0, 903, 0, 394,
	0, 0, 756, 757, 763, 0, 0, 0, 0, 0,
	0, 791, 726, 799, 898, 0, 503, 310, 0, 0,
	262, 263, 265, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 708, 416, 609, 416, 445, 610, 0,
	609, 445, 837, 0, 898, 898, 898, 828, 836, 39,
	898, 529, 17, 0, 213, 18, 0, 77, 176, 0,
	0, 179, 836, 0, 88, 86, 82, 89, 0, 0,
	0, 0, 50, 0, 550, 552, 553, 554, 586, 0,
	588, 0, 0, 0, 64, 587, 54, 0, 0, 862,
	102, 103, 0, 0, 0, -2, 0, 873, 870, 0,
	68, 71, 72, 73, 74, 75, 0, 194, 199, 0,
	796, 0, 106, 24, 892, 0, 0, 0, 0, 418,
	0, 473, 474, 0, 416, 445, 482, 636, 687, 902,
	711, 715, 712, 898, 714, 716, 898, 718, 898, 720,
	898, 722, 898, 898, 0, 0, 795, 0, 254, 258,
	259, 0, 292, 0, 294, 295, 296, 297, 298, 299,
	300, 0, 544, 0, 0, 537, 445, 416, 10, 8,
	612, 416, 12, 0, 834, 835, 827, 34, 548, 898,
	0, 78, 180, 177, 193, 0, 0, 0, 0, 52,
	0, 602, -2, 0, 0, 0, 48, 49, 0, 0,
	0, 0, 0, 0, 591, 0, 0, 594, 0, 0,
	0, 0, 0, 0, 605, 0, 589, 0, 61, 586,
	0, 62, 0, 55, 0, 57, 91, 0, 0, 898,
	0, 412, 874, 875, 876, 872, 905, 0, 0, 195,
	0, 0, 122, 895, 893, 0, 416, 416, 0, 0,
	422, 0, 445, 483, 0, 0, 0, 0, 0, 748,
	725, 792, 0, 291, 293, 302, 0, 898, 546, 7,
	11, 445, 838, 609, 0, 215, 20, 79, 0, 84,
	85, 898, 87, 898, 0, 90, 0, 0, 601, 609,
	0, 609, 51, 548, 859, 0, 551, 582, 584, 0,
	579, 592, 593, 595, 0, 597, 0, 599, 600, 555,
	556, 557, 0, 0, 0, 0, 590, 0, 863, 56,
	0, 0, 94, 95, 864, 865, 866, 0, 868, 69,
	76, 0, 202, 26, 0, 894, 445, 445, 25, 447,
	0, 481, 713, 717, 719, 721, 723, 0, 0, 0,
	0, 0, 0, 821, 823, 9, 817, 549, 0, 0,
	0, 0, 851, 0, 0, -2, 0, 0, 824, 609,
	47, 609, 0, 898, 576, 583, 898, 0, 577, 898,
	578, 596, 598, 569, 0, 0, 0, 0, 0, 574,
	-2, 92, 93, 0, 0, 99, 898, 0, 896, 897,
	27, 28, 0, 724, 0, 0, 0, 476, 303, 545,
	0, 898, 819, 0, 80, 0, 0, 88, 40, 0,
	851, 839, 853, 855, 898, 36, 0, 845, -2, 847,
	849, 850, 0, 832, 46, 824, 860, 861, 580, 0,
	585, 0, 0, 0, 0, 588, 0, 96, 97, 98,
	867, 0, 0, 749, 0, 752, 547, 822, 35, 898,
	898, 0, 0, 41, 0, 856, -2, 0, 0, 0,
	53, 45, 832, 0, 0, 559, 561, 562, 563, 564,
	565, 566, 567, 568, 0, 0, 0, 605, 575, 21,
	475, 750, 820, 818, 0, 0, 854, 0, -2, 0,
	846, 848, 44, 581, 558, 0, 606, 607, 608, 557,
	0, 81, 0, 842, 36, 560, 570, 0, 852, -2,
	751,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 392,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 393, 3, 394, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:424
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:429
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:430
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:438
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:443
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:463
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:483
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:504
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:520
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:537
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:557
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 14:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:572
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:583
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:595
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:606
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:622
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:636
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:650
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:663
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:677
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:688
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:694
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:708
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:722
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:742
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:760
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:778
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:787
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:802
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:810
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:817
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:823
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:827
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:833
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:837
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:844
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:856
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:868
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:872
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:878
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:884
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:888
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:892
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:897
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:898
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:902
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:906
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:911
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:915
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:921
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:925
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:929
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:933
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:939
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:943
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:956
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:960
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:966
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:971
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:975
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:981
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:988
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:995
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1002
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1010
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1020
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1024
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1028
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1032
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1036
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1042
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1049
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1063
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1067
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1071
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1078
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1086
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1100
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1107
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1117
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1128
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1133
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1138
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1145
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1149
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1160
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1164
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1170
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1174
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1178
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1184
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1192
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1196
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1206
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1212
		{
			yyVAL.str = SessionStr
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1216
		{
			yyVAL.str = GlobalStr
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1289
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1293
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1301
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1307
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1311
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1315
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1320
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1326
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1330
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1336
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1340
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1345
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1354
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1358
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1367
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1383
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1396
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1406
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1411
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1417
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1418
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1421
		{
			yyVAL.exprs = nil
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1422
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1426
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1431
		{
			yyVAL.empty = struct{}{}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1433
		{
			yyVAL.empty = struct{}{}
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1436
		{
			yyVAL.bytes = nil
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1440
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1444
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1449
		{
			yyVAL.bytes = nil
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1453
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1457
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1461
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1465
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1469
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1474
		{
			yyVAL.expr = nil
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1478
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1483
		{
			yyVAL.expr = nil
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1487
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1492
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1496
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1501
		{
			yyVAL.bytes = nil
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1505
		{
			yyVAL.bytes = nil
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1511
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1518
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1524
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1528
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1533
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1537
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1541
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1545
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1549
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1553
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1559
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1563
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1568
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1573
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1579
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1590
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1596
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1609
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1614
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1619
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1624
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1630
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1635
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1640
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1645
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1650
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1655
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1660
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1665
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 253:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1670
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 254:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1679
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1689
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1694
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1699
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 258:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1706
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 259:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1713
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1721
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1726
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 262:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1731
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 263:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1736
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1742
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 265:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1748
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 266:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1755
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1762
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1768
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1774
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1778
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1782
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1786
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1790
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1796
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1800
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1804
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1808
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1812
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1816
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1820
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1824
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1828
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1832
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1836
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1842
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1848
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1854
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1860
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1864
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1869
		{
			yyVAL.sequence = &Sequence{}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1873
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1878
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1883
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1888
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1893
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1898
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1903
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1908
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1913
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1918
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1923
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1928
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1933
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1940
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1944
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1948
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1952
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1956
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1960
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1965
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1969
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1974
		{
			yyVAL.bytes = nil
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2002
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), DisplayWidth: yyDollar[2].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2032
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2039
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2043
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2048
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2052
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2060
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2064
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 345:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2070
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2089
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2093
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2097
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2101
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2105
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2109
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2113
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2117
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2133
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2137
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2141
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2145
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2149
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2153
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2157
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2161
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2165
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2169
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2173
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2177
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2181
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2185
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2189
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2193
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2197
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2201
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2205
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2209
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2213
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 380:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2218
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2223
		{
			yyVAL.str = ""
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2227
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2233
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2237
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2241
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2245
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2249
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2253
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2257
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2261
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2265
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2271
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2276
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2281
		{
			yyVAL.optVal = nil
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2285
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2290
		{
			yyVAL.optVal = nil
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2294
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2298
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2307
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2311
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2315
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2320
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2324
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2329
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2333
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2338
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2342
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2346
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2351
		{
			yyVAL.str = ""
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2355
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2359
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2364
		{
			yyVAL.str = ""
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2368
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2372
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2378
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2383
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2387
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2391
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2397
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2401
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2407
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2411
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2417
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2421
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2426
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2430
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2434
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2438
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2442
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2446
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2450
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2454
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2458
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2462
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2466
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2470
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2481
		{
			yyVAL.str = ""
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2485
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2491
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2495
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2501
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2505
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2511
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2515
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2521
		{
			yyVAL.indexPartition = nil
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2525
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2529
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2535
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2539
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2543
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2547
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2551
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2555
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2559
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2563
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2567
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2571
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2575
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2581
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2585
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2591
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2596
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2602
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2606
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2612
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2617
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2621
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2625
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2635
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2640
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2647
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 473:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2654
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2661
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 475:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2670
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 476:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2681
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2692
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2696
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2700
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2704
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 481:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2710
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2720
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 483:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2731
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 484:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2742
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 485:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2753
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2762
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2771
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2775
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2779
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2789
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2793
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2797
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2801
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2805
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2811
		{
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2812
		{
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2816
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2820
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2825
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2832
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2836
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2843
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2847
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2853
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2857
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2862
		{
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2863
		{
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2867
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2871
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2875
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2881
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2885
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2889
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2894
		{
			setAllowComments(yylex, true)
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2904
		{
			yyVAL.bytes2 = nil
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2908
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2914
		{
			yyVAL.str = UnionStr
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2918
		{
			yyVAL.str = UnionAllStr
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2922
		{
			yyVAL.str = UnionDistinctStr
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2927
		{
			yyVAL.str = ""
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2931
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2935
		{
			yyVAL.str = SQLCacheStr
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2940
		{
			yyVAL.str = ""
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2944
		{
			yyVAL.str = DistinctStr
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2949
		{
			yyVAL.str = ""
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2953
		{
			yyVAL.str = StraightJoinHint
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2958
		{
			yyVAL.selectExprs = nil
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2962
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2968
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2972
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2978
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2982
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2986
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2995
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2999
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3003
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3010
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3015
		{
			yyVAL.overExpr = nil
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3019
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 545:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3023
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3027
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 547:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3031
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3036
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3040
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3046
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3050
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3060
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3064
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3073
		{
			yyVAL.strs = []string{}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3077
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3083
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3087
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3093
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3097
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3101
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3109
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3113
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3117
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3121
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3127
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 570:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3131
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3137
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3142
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3146
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3152
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3156
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3169
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3173
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3177
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3181
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3187
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3189
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3195
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3199
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3201
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3204
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3206
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3217
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3223
		{
			yyVAL.str = JoinStr
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3227
		{
			yyVAL.str = JoinStr
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3231
		{
			yyVAL.str = JoinStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3237
		{
			yyVAL.str = StraightJoinStr
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3243
		{
			yyVAL.str = LeftJoinStr
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3247
		{
			yyVAL.str = LeftJoinStr
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3251
		{
			yyVAL.str = RightJoinStr
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3255
		{
			yyVAL.str = RightJoinStr
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3261
		{
			yyVAL.str = NaturalJoinStr
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3265
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3275
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3279
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3285
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3289
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3294
		{
			yyVAL.indexHints = nil
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3298
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3302
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3306
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3311
		{
			yyVAL.expr = nil
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3315
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3320
		{
			yyVAL.columns = nil
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3324
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3330
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3334
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3338
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3342
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3346
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3350
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3354
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3358
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3364
		{
			yyVAL.str = ""
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3374
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3378
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3384
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3388
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3392
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3396
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3400
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3404
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3408
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 632:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3412
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3416
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3420
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 635:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3424
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 636:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3428
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3432
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3445
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3451
		{
			yyVAL.str = IsNullStr
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3455
		{
			yyVAL.str = IsNotNullStr
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3459
		{
			yyVAL.str = IsTrueStr
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.str = IsNotTrueStr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.str = IsFalseStr
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.str = IsNotFalseStr
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3477
		{
			yyVAL.str = EqualStr
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3481
		{
			yyVAL.str = LessThanStr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3485
		{
			yyVAL.str = GreaterThanStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3489
		{
			yyVAL.str = LessEqualStr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3493
		{
			yyVAL.str = GreaterEqualStr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3497
		{
			yyVAL.str = NotEqualStr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3501
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3505
		{
			yyVAL.str = PosixRegexStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3509
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3513
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3517
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3522
		{
			yyVAL.expr = nil
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3526
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3532
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3536
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3540
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3546
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3552
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3556
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3562
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3566
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3570
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3574
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3586
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3590
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3594
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3598
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3602
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3606
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3610
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3614
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3618
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3622
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3626
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3630
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3634
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3638
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3642
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 687:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3646
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3650
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3654
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3658
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3666
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3680
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3684
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3688
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3696
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3712
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3716
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3726
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 704:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3730
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 705:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3734
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 706:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3738
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 707:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3742
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 708:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3746
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3756
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3760
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 711:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3764
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 712:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3769
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 713:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3773
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 714:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3777
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3781
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 716:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3785
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 717:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3789
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 718:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3793
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 719:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3797
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 720:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3801
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 721:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3805
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 722:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3809
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 723:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3813
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 724:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3817
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 725:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3821
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 726:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3825
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3829
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3834
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3838
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3842
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3846
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3857
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3861
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3865
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3869
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3873
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3878
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3883
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3888
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3893
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3897
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3911
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3915
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3929
		{
			yyVAL.str = ""
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3933
		{
			yyVAL.str = BooleanModeStr
		}
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 751:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3941
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3945
		{
			yyVAL.str = QueryExpansionStr
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3951
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3955
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3961
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3965
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3969
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3973
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3977
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3981
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3987
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3993
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3997
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.convertType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4003
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4007
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4011
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4015
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4019
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4023
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4027
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4031
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4035
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4039
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4043
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4047
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4051
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4055
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4059
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4063
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4067
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4073
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4077
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4081
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4085
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4089
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4093
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4097
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4101
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4106
		{
			yyVAL.expr = nil
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4110
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4115
		{
			yyVAL.str = string("")
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4119
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4125
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4129
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 795:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4140
		{
			yyVAL.empty = struct{}{}
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.empty = struct{}{}
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4145
		{
			yyVAL.expr = nil
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4149
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4155
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4159
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 803:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4167
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4173
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4179
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4183
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4188
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4205
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4209
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4213
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4217
		{
			yyVAL.expr = &NullVal{}
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4223
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4227
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4232
		{
			yyVAL.exprs = nil
		}
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4236
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4241
		{
			yyVAL.expr = nil
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4245
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4251
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4255
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4261
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4266
		{
			yyVAL.orderBy = nil
		}
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4270
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4276
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4280
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4286
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4291
		{
			yyVAL.str = AscScr
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4295
		{
			yyVAL.str = AscScr
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4299
		{
			yyVAL.str = DescScr
		}
	case 832:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4304
		{
			yyVAL.limit = nil
		}
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4308
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 834:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4312
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 835:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4316
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4321
		{
			yyVAL.str = ""
		}
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4325
		{
			yyVAL.str = ForUpdateStr
		}
	case 838:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4329
		{
			yyVAL.str = ShareModeStr
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4342
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4346
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4350
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 842:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4355
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 843:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4359
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 844:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4363
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4370
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4374
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4380
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4384
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4388
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4392
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4397
		{
			yyVAL.updateExprs = nil
		}
	case 852:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4401
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4407
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4411
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4417
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4421
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4427
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4433
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4443
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4447
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4453
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4459
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4463
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4469
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4473
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4477
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 867:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4482
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4486
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4498
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4505
		{
			yyVAL.bytes = []byte("charset")
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4512
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4516
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4520
		{
			yyVAL.expr = &Default{}
		}
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4525
		{
			yyVAL.empty = struct{}{}
		}
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4527
		{
			yyVAL.empty = struct{}{}
		}
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4530
		{
			yyVAL.str = ""
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4532
		{
			yyVAL.str = IgnoreStr
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4536
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4543
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4547
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4551
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4555
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4561
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4565
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4570
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4577
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 892:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4583
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4587
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4591
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4597
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4601
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4605
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 898:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4611
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4615
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 900:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4622
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4629
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4633
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4640
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4646
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4650
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4827
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4836
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
