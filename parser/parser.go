// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const VINDEX = 57489
const VINDEXES = 57490
const STATUS = 57491
const VARIABLES = 57492
const RESTRICT = 57493
const CASCADE = 57494
const NO = 57495
const ACTION = 57496
const PERMISSIVE = 57497
const RESTRICTIVE = 57498
const PUBLIC = 57499
const CURRENT_USER = 57500
const SESSION_USER = 57501
const PAD_INDEX = 57502
const FILLFACTOR = 57503
const IGNORE_DUP_KEY = 57504
const STATISTICS_NORECOMPUTE = 57505
const STATISTICS_INCREMENTAL = 57506
const ALLOW_ROW_LOCKS = 57507
const ALLOW_PAGE_LOCKS = 57508
const BEFORE = 57509
const AFTER = 57510
const EACH = 57511
const ROW = 57512
const SCROLL = 57513
const CURSOR = 57514
const OPEN = 57515
const CLOSE = 57516
const FETCH = 57517
const PRIOR = 57518
const FIRST = 57519
const LAST = 57520
const DEALLOCATE = 57521
const INSTEAD = 57522
const OF = 57523
const DEFERRABLE = 57524
const INITIALLY = 57525
const IMMEDIATE = 57526
const DEFERRED = 57527
const CONCURRENTLY = 57528
const SQL = 57529
const SECURITY = 57530
const BEGIN = 57531
const START = 57532
const TRANSACTION = 57533
const COMMIT = 57534
const ROLLBACK = 57535
const BIT = 57536
const TINYINT = 57537
const SMALLINT = 57538
const SMALLSERIAL = 57539
const MEDIUMINT = 57540
const INT = 57541
const INTEGER = 57542
const SERIAL = 57543
const BIGINT = 57544
const BIGSERIAL = 57545
const INTNUM = 57546
const REAL = 57547
const DOUBLE = 57548
const PRECISION = 57549
const FLOAT_TYPE = 57550
const DECIMAL = 57551
const NUMERIC = 57552
const SMALLMONEY = 57553
const MONEY = 57554
const TIME = 57555
const TIMESTAMP = 57556
const DATETIME = 57557
const YEAR = 57558
const DATETIMEOFFSET = 57559
const DATETIME2 = 57560
const SMALLDATETIME = 57561
const CHAR = 57562
const VARCHAR = 57563
const VARYING = 57564
const BOOL = 57565
const CHARACTER = 57566
const VARBINARY = 57567
const NCHAR = 57568
const NVARCHAR = 57569
const NTEXT = 57570
const UUID = 57571
const TEXT = 57572
const TINYTEXT = 57573
const MEDIUMTEXT = 57574
const LONGTEXT = 57575
const CITEXT = 57576
const BLOB = 57577
const TINYBLOB = 57578
const MEDIUMBLOB = 57579
const LONGBLOB = 57580
const JSON = 57581
const JSONB = 57582
const ENUM = 57583
const GEOMETRY = 57584
const POINT = 57585
const LINESTRING = 57586
const POLYGON = 57587
const GEOMETRYCOLLECTION = 57588
const MULTIPOINT = 57589
const MULTILINESTRING = 57590
const MULTIPOLYGON = 57591
const VARIADIC = 57592
const ARRAY = 57593
const NOW = 57594
const GETDATE = 57595
const BPCHAR = 57596
const TEXT_PATTERN_OPS = 57597
const NULLX = 57598
const AUTO_INCREMENT = 57599
const APPROXNUM = 57600
const SIGNED = 57601
const UNSIGNED = 57602
const ZEROFILL = 57603
const ZONE = 57604
const AUTOINCREMENT = 57605
const DATABASES = 57606
const TABLES = 57607
const VITESS_KEYSPACES = 57608
const VITESS_SHARDS = 57609
const VITESS_TABLETS = 57610
const VSCHEMA_TABLES = 57611
const EXTENDED = 57612
const FULL = 57613
const PROCESSLIST = 57614
const NAMES = 57615
const CHARSET = 57616
const GLOBAL = 57617
const SESSION = 57618
const ISOLATION = 57619
const LEVEL = 57620
const READ = 57621
const WRITE = 57622
const ONLY = 57623
const REPEATABLE = 57624
const COMMITTED = 57625
const UNCOMMITTED = 57626
const SERIALIZABLE = 57627
const NEW = 57628
const CONCAT_NULL_YIELDS_NULL = 57629
const CURSOR_CLOSE_ON_COMMIT = 57630
const QUOTED_IDENTIFIER = 57631
const ARITHABORT = 57632
const FMTONLY = 57633
const NOCOUNT = 57634
const NOEXEC = 57635
const NUMERIC_ROUNDABORT = 57636
const ANSI_DEFAULTS = 57637
const ANSI_NULL_DFLT_OFF = 57638
const ANSI_NULL_DFLT_ON = 57639
const ANSI_NULLS = 57640
const ANSI_PADDING = 57641
const ANSI_WARNINGS = 57642
const FORCEPLAN = 57643
const SHOWPLAN_ALL = 57644
const SHOWPLAN_TEXT = 57645
const SHOWPLAN_XML = 57646
const IMPLICIT_TRANSACTIONS = 57647
const REMOTE_PROC_TRANSACTIONS = 57648
const XACT_ABORT = 57649
const CURRENT_TIMESTAMP = 57650
const DATABASE = 57651
const CURRENT_DATE = 57652
const CURRENT_TIME = 57653
const LOCALTIME = 57654
const LOCALTIMESTAMP = 57655
const UTC_DATE = 57656
const UTC_TIME = 57657
const UTC_TIMESTAMP = 57658
const REPLACE = 57659
const CONVERT = 57660
const CAST = 57661
const SUBSTR = 57662
const SUBSTRING = 57663
const GROUP_CONCAT = 57664
const SEPARATOR = 57665
const INHERIT = 57666
const LEAD = 57667
const LAG = 57668
const MATCH = 57669
const AGAINST = 57670
const BOOLEAN = 57671
const LANGUAGE = 57672
const WITH = 57673
const WITHOUT = 57674
const PARSER = 57675
const QUERY = 57676
const EXPANSION = 57677
const UNUSED = 57678
const VIRTUAL = 57679
const STORED = 57680
const GENERATED = 57681
const ALWAYS = 57682
const IDENTITY = 57683
const SEQUENCE = 57684
const INCREMENT = 57685
const MINVALUE = 57686
const CACHE = 57687
const CYCLE = 57688
const OWNED = 57689
const NONE = 57690
const CLUSTERED = 57691
const NONCLUSTERED = 57692
const REPLICATION = 57693
const COLUMNSTORE = 57694
const INCLUDE = 57695
const HOLDLOCK = 57696
const NOLOCK = 57697
const NOWAIT = 57698
const PAGLOCK = 57699
const ROWLOCK = 57700
const TABLELOCK = 57701
const DEFINER = 57702
const INVOKER = 57703
const TYPECAST = 57704
const CHECK = 57705
const OVER = 57706

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 26,
	-2, 4,
	-1, 29,
	130, 414,
	-2, 166,
	-1, 35,
	166, 522,
	167, 522,
	-2, 512,
	-1, 281,
	119, 912,
	-2, 908,
	-1, 282,
	119, 913,
	-2, 909,
	-1, 283,
	119, 914,
	-2, 256,
	-1, 325,
	268, 923,
	-2, 801,
	-1, 359,
	86, 1164,
	-2, 86,
	-1, 360,
	86, 1114,
	-2, 87,
	-1, 366,
	86, 1093,
	-2, 881,
	-1, 368,
	86, 1138,
	-2, 883,
	-1, 630,
	268, 923,
	-2, 550,
	-1, 680,
	268, 923,
	-2, 550,
	-1, 710,
	55, 40,
	57, 40,
	-2, 42,
	-1, 742,
	116, 1088,
	251, 1088,
	257, 1088,
	-2, 293,
	-1, 743,
	116, 1089,
	251, 1089,
	257, 1089,
	-2, 294,
	-1, 744,
	251, 1091,
	257, 1091,
	-2, 328,
	-1, 745,
	251, 1092,
	257, 1092,
	-2, 328,
	-1, 746,
	251, 1193,
	257, 1193,
	-2, 335,
	-1, 747,
	251, 1139,
	257, 1139,
	-2, 328,
	-1, 748,
	251, 1144,
	257, 1144,
	-2, 335,
	-1, 749,
	116, 1142,
	251, 1142,
	257, 1142,
	-2, 300,
	-1, 751,
	116, 1192,
	251, 1192,
	257, 1192,
	-2, 335,
	-1, 752,
	251, 1178,
	257, 1178,
	-2, 348,
	-1, 753,
	251, 1184,
	257, 1184,
	-2, 348,
	-1, 754,
	251, 1132,
	257, 1132,
	-2, 348,
	-1, 755,
	251, 1128,
	257, 1128,
	-2, 348,
	-1, 757,
	116, 1087,
	251, 1087,
	257, 1087,
	-2, 309,
	-1, 758,
	116, 1182,
	251, 1182,
	257, 1182,
	-2, 310,
	-1, 759,
	116, 1130,
	251, 1130,
	257, 1130,
	-2, 311,
	-1, 760,
	116, 1127,
	251, 1127,
	257, 1127,
	-2, 312,
	-1, 761,
	116, 1119,
	251, 1119,
	257, 1119,
	-2, 313,
	-1, 763,
	116, 1191,
	251, 1191,
	257, 1191,
	-2, 315,
	-1, 766,
	116, 1100,
	251, 1100,
	257, 1100,
	-2, 285,
	-1, 767,
	116, 1180,
	251, 1180,
	257, 1180,
	-2, 328,
	-1, 768,
	116, 1181,
	251, 1181,
	257, 1181,
	-2, 328,
	-1, 769,
	116, 1101,
	251, 1101,
	257, 1101,
	-2, 328,
	-1, 770,
	116, 1102,
	251, 1102,
	257, 1102,
	-2, 328,
	-1, 771,
	116, 1103,
	251, 1103,
	257, 1103,
	-2, 328,
	-1, 772,
	116, 1171,
	251, 1171,
	257, 1171,
	-2, 291,
	-1, 773,
	116, 1205,
	251, 1205,
	257, 1205,
	-2, 292,
	-1, 774,
	116, 1111,
	251, 1111,
	257, 1111,
	-2, 318,
	-1, 775,
	116, 1148,
	251, 1148,
	257, 1148,
	-2, 319,
	-1, 776,
	116, 1126,
	251, 1126,
	257, 1126,
	-2, 320,
	-1, 777,
	116, 1149,
	251, 1149,
	257, 1149,
	-2, 321,
	-1, 778,
	116, 1112,
	251, 1112,
	257, 1112,
	-2, 322,
	-1, 779,
	116, 1136,
	251, 1136,
	257, 1136,
	-2, 323,
	-1, 780,
	116, 1135,
	251, 1135,
	257, 1135,
	-2, 324,
	-1, 781,
	116, 1137,
	251, 1137,
	257, 1137,
	-2, 325,
	-1, 782,
	116, 1086,
	251, 1086,
	257, 1086,
	-2, 267,
	-1, 783,
	116, 1183,
	251, 1183,
	257, 1183,
	-2, 268,
	-1, 784,
	116, 1172,
	251, 1172,
	257, 1172,
	-2, 269,
	-1, 785,
	116, 1174,
	251, 1174,
	257, 1174,
	-2, 270,
	-1, 786,
	116, 1131,
	251, 1131,
	257, 1131,
	-2, 271,
	-1, 787,
	116, 1116,
	251, 1116,
	257, 1116,
	-2, 272,
	-1, 788,
	116, 1117,
	251, 1117,
	257, 1117,
	-2, 273,
	-1, 789,
	116, 1165,
	251, 1165,
	257, 1165,
	-2, 274,
	-1, 790,
	116, 1084,
	251, 1084,
	257, 1084,
	-2, 275,
	-1, 791,
	116, 1085,
	251, 1085,
	257, 1085,
	-2, 276,
	-1, 792,
	116, 1156,
	251, 1156,
	257, 1156,
	-2, 330,
	-1, 793,
	116, 1105,
	251, 1105,
	257, 1105,
	-2, 330,
	-1, 794,
	116, 1109,
	251, 1109,
	257, 1109,
	-2, 330,
	-1, 795,
	116, 1104,
	251, 1104,
	257, 1104,
	-2, 332,
	-1, 796,
	116, 1143,
	251, 1143,
	257, 1143,
	-2, 332,
	-1, 797,
	116, 1134,
	251, 1134,
	257, 1134,
	-2, 283,
	-1, 798,
	116, 1173,
	251, 1173,
	257, 1173,
	-2, 284,
	-1, 876,
	119, 916,
	-2, 911,
	-1, 920,
	116, 348,
	268, 348,
	383, 348,
	-2, 261,
	-1, 921,
	268, 313,
	383, 313,
	-2, 262,
	-1, 922,
	268, 314,
	383, 314,
	-2, 263,
	-1, 945,
	268, 923,
	-2, 328,
	-1, 946,
	57, 328,
	59, 328,
	241, 328,
	-2, 1091,
	-1, 947,
	57, 763,
	-2, 1100,
	-1, 948,
	57, 328,
	-2, 1101,
	-1, 949,
	57, 332,
	-2, 1104,
	-1, 950,
	57, 766,
	-2, 1119,
	-1, 952,
	57, 328,
	-2, 1139,
	-1, 953,
	57, 769,
	-2, 1170,
	-1, 954,
	57, 328,
	-2, 1180,
	-1, 955,
	57, 772,
	-2, 1189,
	-1, 956,
	57, 774,
	-2, 1084,
	-1, 957,
	57, 775,
	-2, 1086,
	-1, 958,
	57, 776,
	-2, 1116,
	-1, 959,
	57, 777,
	-2, 1134,
	-1, 960,
	57, 332,
	-2, 1143,
	-1, 961,
	57, 779,
	-2, 1172,
	-1, 962,
	57, 780,
	-2, 1173,
	-1, 963,
	57, 781,
	-2, 1183,
	-1, 964,
	57, 782,
	-2, 1109,
	-1, 965,
	57, 783,
	-2, 1156,
	-1, 966,
	57, 328,
	-2, 1102,
	-1, 967,
	57, 328,
	-2, 1103,
	-1, 968,
	57, 786,
	-2, 1171,
	-1, 969,
	57, 787,
	-2, 1178,
	-1, 970,
	57, 328,
	-2, 1193,
	-1, 971,
	57, 790,
	-2, 1142,
	-1, 972,
	57, 328,
	-2, 1144,
	-1, 973,
	57, 328,
	-2, 1192,
	-1, 1049,
	142, 424,
	-2, 1098,
	-1, 1177,
	268, 923,
	-2, 550,
	-1, 1187,
	116, 328,
	268, 328,
	383, 328,
	-2, 257,
	-1, 1201,
	5, 27,
	-2, 676,
	-1, 1244,
	5, 26,
	-2, 852,
	-1, 1293,
	59, 389,
	-2, 386,
	-1, 1312,
	119, 914,
	-2, 256,
	-1, 1581,
	5, 26,
	-2, 95,
	-1, 1583,
	5, 26,
	-2, 97,
	-1, 1640,
	5, 27,
	-2, 853,
	-1, 1712,
	5, 26,
	-2, 96,
	-1, 1749,
	5, 26,
	-2, 855,
	-1, 1836,
	58, 110,
	-2, 185,
	-1, 1839,
	58, 110,
	-2, 185,
	-1, 1912,
	189, 53,
	-2, 185,
	-1, 1953,
	58, 110,
	-2, 184,
	-1, 1978,
	5, 27,
	-2, 856,
	-1, 2146,
	5, 26,
	-2, 49,
}

const yyPrivate = 57344

const yyLast = 21591

var yyAct = [...]int16{
	370, 1806, 2028, 1971, 1866, 1763, 1963, 1812, 733, 1124,
	1915, 561, 808, 1576, 1282, 634, 1247, 1802, 633, 3,
	997, 1913, 1985, 1889, 1671, 732, 1760, 277, 1809, 298,
	1592, 1260, 1575, 265, 95, 1484, 1648, 95, 1722, 1285,
	315, 615, 1823, 21, 859, 1527, 1515, 1015, 1661, 1035,
	2029, 1485, 1365, 702, 1952, 286, 704, 1481, 282, 1193,
	53, 95, 95, 258, 1044, 1309, 264, 287, 1110, 1133,
	290, 1132, 1311, 1038, 901, 95, 279, 998, 1317, 934,
	1059, 1105, 1265, 1092, 95, 1182, 95, 1348, 930, 720,
	21, 1188, 95, 1252, 944, 983, 878, 1076, 269, 1054,
	814, 1840, 719, 1086, 567, 358, 259, 260, 261, 262,
	706, 691, 851, 365, 344, 285, 994, 740, 735, 734,
	576, 345, 1170, 1330, 658, 1430, 1078, 510, 929, 2124,
	52, 349, 1522, 1074, 1435, 2089, 600, 273, 593, 594,
	595, 596, 597, 590, 545, 1546, 600, 616, 1121, 1122,
	1803, 346, 1649, 1650, 1651, 1652, 1653, 1654, 519, 1529,
	1530, 584, 1528, 587, 1677, 1531, 500, 353, 991, 602,
	603, 604, 605, 606, 607, 608, 1307, 585, 586, 583,
	609, 610, 611, 612, 589, 588, 598, 599, 591, 592,
	593, 594, 595, 596, 597, 590, 520, 521, 600, 512,
	590, 515, 2079, 600, 518, 2003, 2004, 361, 1071, 355,
	1789, 1790, 2159, 2060, 1074, 1075, 591, 592, 593, 594,
	595, 596, 597, 590, 1686, 2153, 600, 1976, 46, 1082,
	48, 25, 26, 1871, 1041, 1870, 2139, 95, 1125, 1062,
	2072, 1077, 1824, 1189, 1190, 2022, 1261, 1185, 2059, 1975,
	543, 1476, 2000, 1825, 1069, 1634, 1057, 522, 90, 86,
	87, 1535, 88, 1058, 1508, 1509, 1507, 282, 282, 598,
	599, 591, 592, 593, 594, 595, 596, 597, 590, 282,
	1273, 600, 1332, 1272, 1029, 1030, 1274, 1028, 721, 570,
	722, 553, 282, 282, 282, 282, 282, 282, 282, 848,
	1208, 1619, 1618, 1617, 1080, 629, 849, 2165, 1093, 1468,
	988, 1428, 1082, 21, 1082, 1082, 1322, 282, 1324, 1323,
	1427, 1065, 1426, 1060, 1070, 1215, 282, 1213, 257, 569,
	1106, 1067, 1066, 588, 598, 599, 591, 592, 593, 594,
	595, 596, 597, 590, 95, 2157, 600, 2046, 2045, 1907,
	806, 95, 95, 95, 2135, 617, 2136, 1831, 2096, 21,
	2151, 2150, 505, 1371, 2105, 1138, 1950, 1830, 621, 622,
	623, 624, 625, 626, 627, 2047, 1523, 304, 1630, 560,
	1906, 559, 1529, 1530, 1588, 1589, 1808, 1779, 1890, 549,
	550, 1964, 2152, 21, 1941, 2137, 54, 1408, 995, 1599,
	601, 1965, 1055, 2114, 1746, 1521, 1729, 2078, 1679, 2080,
	601, 1292, 1826, 1827, 1829, 1674, 1600, 1678, 1828, 1056,
	1300, 349, 589, 588, 598, 599, 591, 592, 593, 594,
	595, 596, 597, 590, 507, 1764, 600, 1299, 1287, 560,
	364, 1609, 501, 1846, 2156, 511, 527, 509, 816, 1766,
	513, 514, 1429, 84, 663, 664, 89, 1715, 827, 1063,
	1405, 560, 601, 805, 1858, 1064, 538, 601, 508, 589,
	588, 598, 599, 591, 592, 593, 594, 595, 596, 597,
	590, 1264, 1293, 600, 1533, 2104, 83, 1263, 84, 1262,
	601, 1093, 546, 547, 548, 1187, 551, 1085, 1107, 1056,
	504, 361, 503, 555, 589, 588, 598, 599, 591, 592,
	593, 594, 595, 596, 597, 590, 1669, 1306, 600, 95,
	711, 1189, 1190, 1765, 95, 2071, 1687, 95, 799, 1871,
	95, 1669, 1409, 523, 95, 517, 540, 236, 1738, 542,
	1290, 1072, 85, 1073, 1974, 601, 619, 620, 1040, 1942,
	1943, 1944, 1672, 1673, 1675, 95, 49, 1767, 1768, 1769,
	1770, 1771, 1772, 1773, 649, 1068, 717, 1406, 539, 541,
	1404, 2143, 95, 816, 282, 282, 1016, 1018, 1863, 1643,
	1554, 282, 1418, 282, 1407, 1228, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 1176, 857, 862, 2130, 724, 632, 580, 815, 533,
	601, 1055, 1163, 817, 818, 1037, 1036, 854, 364, 364,
	364, 364, 575, 364, 879, 923, 819, 1564, 1056, 1413,
	364, 282, 2005, 804, 1882, 885, 807, 282, 282, 282,
	282, 282, 282, 282, 282, 822, 933, 836, 282, 883,
	884, 882, 1881, 578, 880, 940, 834, 1880, 1017, 877,
	2147, 21, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 1879, 1878, 21,
	282, 282, 282, 282, 1565, 1224, 95, 2145, 282, 95,
	95, 95, 95, 95, 876, 574, 573, 1164, 872, 1877,
	601, 95, 2044, 874, 95, 1478, 574, 573, 95, 975,
	977, 1412, 575, 95, 95, 985, 1859, 1876, 976, 907,
	664, 904, 940, 575, 282, 875, 906, 1205, 1762, 1204,
	2009, 1223, 1874, 537, 364, 924, 927, 1585, 817, 818,
	573, 726, 1275, 1250, 2011, 723, 21, 601, 574, 573,
	2148, 819, 860, 861, 1778, 999, 575, 981, 1810, 349,
	349, 349, 349, 349, 984, 575, 1023, 1284, 984, 990,
	1233, 811, 1781, 526, 349, 826, 683, 936, 868, 870,
	871, 2006, 601, 349, 1764, 869, 837, 838, 839, 840,
	841, 842, 843, 844, 619, 620, 1284, 1986, 1766, 932,
	845, 846, 95, 574, 573, 95, 941, 942, 95, 2117,
	1000, 1012, 980, 1003, 95, 2116, 95, 1987, 1020, 1777,
	575, 1026, 1025, 95, 2077, 1283, 95, 1021, 95, 856,
	1140, 95, 1339, 1042, 1872, 560, 1338, 1094, 1095, 1096,
	1097, 1001, 1002, 1284, 1004, 1173, 1174, 1175, 989, 1284,
	992, 993, 1089, 574, 573, 1091, 282, 282, 282, 282,
	50, 361, 529, 530, 531, 1112, 574, 573, 855, 1034,
	575, 881, 1765, 1480, 1172, 1108, 1109, 2073, 2076, 739,
	739, 800, 803, 575, 282, 282, 282, 574, 573, 2075,
	1988, 1296, 1984, 820, 651, 652, 653, 654, 655, 656,
	657, 1793, 364, 1705, 575, 1704, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 364, 364, 364, 364, 364, 364, 364,
	364, 1139, 1892, 879, 2074, 1541, 1697, 364, 364, 1685,
	1222, 1333, 282, 1119, 2007, 2008, 2010, 2012, 2013, 282,
	574, 573, 1333, 1295, 1696, 1355, 282, 574, 573, 1333,
	1353, 1329, 863, 880, 902, 578, 903, 575, 364, 1631,
	1179, 1180, 1181, 1171, 575, 1875, 1691, 1313, 1314, 1315,
	1986, 876, 1745, 2036, 1702, 1318, 1316, 312, 313, 1178,
	1194, 1112, 282, 574, 573, 282, 1611, 95, 50, 1349,
	1987, 1108, 1109, 631, 739, 1302, 631, 926, 926, 82,
	575, 1526, 875, 1904, 2164, 928, 1525, 1524, 1395, 1294,
	364, 1666, 2138, 1244, 1276, 937, 939, 54, 1211, 1127,
	978, 1191, 621, 95, 915, 978, 1723, 2086, 560, 1216,
	1666, 2067, 987, 1904, 2066, 2063, 2062, 21, 1267, 833,
	1269, 589, 588, 598, 599, 591, 592, 593, 594, 595,
	596, 597, 590, 2052, 560, 600, 1385, 1666, 2049, 343,
	560, 1128, 832, 1130, 812, 978, 1666, 2048, 1666, 2016,
	2015, 95, 1723, 1961, 1951, 282, 1268, 1869, 1232, 1396,
	1723, 1805, 1161, 1301, 1014, 1398, 1391, 1392, 810, 1399,
	1394, 1393, 535, 349, 364, 1401, 1397, 1257, 1723, 1788,
	1196, 528, 364, 1905, 1321, 1904, 1400, 1723, 560, 501,
	1755, 1754, 1901, 1390, 95, 1723, 1753, 1270, 95, 1895,
	95, 693, 696, 697, 698, 694, 1894, 695, 699, 1799,
	1319, 1253, 1254, 1386, 1382, 1377, 1798, 1387, 1384, 1383,
	1666, 1665, 1342, 1381, 1344, 1345, 1346, 1347, 1504, 560,
	1230, 1288, 1289, 1291, 1388, 1642, 560, 1571, 1570, 1567,
	1568, 1380, 1567, 1566, 95, 95, 282, 1334, 1335, 714,
	1337, 46, 1340, 1341, 1692, 1535, 1197, 560, 282, 1797,
	1116, 938, 560, 1278, 282, 282, 1794, 1350, 364, 1354,
	364, 1709, 1351, 1352, 688, 560, 1242, 1724, 282, 739,
	1698, 1243, 731, 730, 1693, 1689, 1375, 282, 1378, 364,
	1614, 1373, 46, 715, 1482, 713, 1596, 1248, 1022, 1370,
	713, 50, 1561, 1249, 282, 282, 282, 282, 282, 282,
	1322, 1370, 1324, 1323, 282, 364, 1431, 1560, 1372, 1555,
	54, 1369, 1748, 282, 1370, 1249, 1227, 687, 46, 282,
	282, 282, 938, 1248, 282, 2057, 1197, 282, 2031, 1638,
	1424, 1425, 50, 1483, 1488, 1422, 1421, 688, 688, 1723,
	1366, 1666, 1688, 688, 1584, 1569, 282, 1433, 1573, 1572,
	1465, 1279, 1197, 1027, 1486, 1506, 1197, 1206, 21, 716,
	1248, 1477, 1226, 1467, 858, 1514, 50, 1186, 50, 1436,
	1470, 1471, 1472, 1473, 1474, 282, 2154, 2054, 1492, 1900,
	999, 282, 1195, 578, 1198, 1199, 999, 1469, 1886, 601,
	1885, 1420, 1201, 1202, 1203, 1843, 1493, 1842, 1505, 1491,
	1801, 1800, 1792, 1730, 1416, 1727, 1710, 1553, 1082, 1111,
	1321, 1580, 876, 693, 696, 697, 698, 694, 1552, 695,
	699, 1152, 1550, 1513, 1545, 1166, 1537, 1499, 1547, 282,
	95, 1497, 1229, 1358, 1106, 1151, 1319, 1235, 1308, 1304,
	95, 1237, 1238, 1475, 1239, 1240, 1542, 1534, 1532, 1281,
	1581, 1099, 1583, 1544, 1556, 1557, 1098, 1559, 1577, 1087,
	1562, 1563, 1253, 1254, 809, 1156, 46, 1266, 48, 25,
	26, 1113, 1114, 95, 21, 1150, 21, 64, 1374, 1867,
	1824, 1410, 1891, 1574, 282, 1482, 364, 1359, 1256, 1117,
	1558, 1825, 1512, 830, 282, 813, 554, 1286, 1009, 1259,
	1258, 1006, 46, 1010, 48, 25, 26, 1007, 1297, 1005,
	1591, 2111, 1008, 1602, 1595, 1011, 1824, 697, 698, 557,
	558, 2058, 1326, 1604, 1417, 1167, 648, 1825, 62, 1147,
	1144, 1145, 1540, 1143, 2108, 1280, 562, 1607, 1343, 729,
	536, 1636, 2098, 1731, 1610, 2132, 860, 861, 1129, 563,
	829, 282, 57, 59, 60, 61, 1582, 1539, 282, 1368,
	1620, 1363, 1357, 1154, 1157, 1361, 821, 701, 271, 272,
	1616, 852, 2127, 364, 95, 263, 1834, 1721, 1587, 1520,
	1211, 2129, 1717, 986, 1718, 1719, 1720, 266, 2081, 1968,
	1216, 1852, 1967, 267, 54, 1831, 1645, 1716, 1646, 1848,
	1249, 1655, 1656, 1657, 2041, 1830, 2040, 282, 364, 1660,
	2039, 1637, 2038, 571, 1676, 1134, 1135, 1136, 1682, 2002,
	2001, 1519, 1518, 1884, 364, 923, 1883, 275, 1860, 1298,
	1658, 1831, 853, 1420, 56, 1818, 8, 58, 1684, 1815,
	7, 1830, 1379, 282, 1681, 95, 1598, 1149, 1432, 1039,
	1826, 1827, 1829, 1816, 6, 1726, 1828, 1814, 5, 712,
	51, 1, 1914, 66, 65, 1970, 1736, 95, 1434, 1319,
	506, 1712, 1577, 1120, 1192, 1706, 364, 628, 1700, 1690,
	1148, 1711, 302, 2134, 2103, 95, 1826, 1827, 1829, 288,
	978, 1647, 1828, 1490, 1266, 21, 978, 2032, 282, 282,
	1733, 282, 282, 282, 1714, 1911, 2025, 1713, 1940, 1328,
	1061, 1893, 1305, 67, 2021, 1903, 1586, 1503, 1367, 1389,
	1701, 1126, 1703, 1364, 1146, 364, 1662, 1962, 1278, 1516,
	1749, 1981, 1761, 1668, 1047, 1277, 499, 63, 1734, 1873,
	1048, 1153, 1046, 1045, 1043, 1331, 1079, 738, 736, 1486,
	737, 282, 1737, 741, 21, 349, 1776, 282, 1326, 1155,
	1747, 1780, 244, 356, 700, 725, 1376, 572, 1403, 1699,
	1402, 1142, 1411, 847, 1739, 1740, 1759, 1741, 1742, 1743,
	1162, 282, 1775, 1774, 552, 246, 613, 1271, 1782, 363,
	1489, 566, 1966, 1847, 49, 1784, 1231, 645, 982, 1366,
	1662, 289, 867, 1545, 301, 300, 1578, 299, 1241, 582,
	1577, 348, 684, 1804, 692, 690, 689, 1255, 1251, 1593,
	347, 1795, 1597, 1796, 1613, 1601, 1633, 1857, 1603, 556,
	49, 1844, 1165, 24, 1833, 55, 342, 1868, 1605, 1862,
	19, 18, 2130, 17, 20, 1813, 16, 15, 14, 28,
	1832, 1822, 1835, 13, 1861, 12, 1608, 282, 11, 1486,
	10, 1865, 1864, 21, 9, 1821, 364, 1850, 1820, 1819,
	1817, 282, 4, 1615, 268, 22, 2, 0, 2130, 0,
	0, 282, 0, 0, 0, 1898, 0, 1896, 1622, 1899,
	0, 0, 1902, 0, 564, 568, 0, 0, 0, 0,
	1577, 282, 282, 1897, 0, 0, 581, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1623, 1624, 0,
	0, 1625, 1626, 282, 0, 1629, 1959, 1960, 1945, 1948,
	0, 282, 1949, 1909, 0, 799, 0, 0, 0, 1639,
	1640, 1641, 0, 1644, 635, 1593, 1982, 0, 1593, 1593,
	1593, 1977, 1659, 646, 1910, 0, 0, 1996, 0, 364,
	0, 364, 1954, 1955, 1956, 1957, 1958, 0, 0, 0,
	1997, 1989, 1990, 1991, 1992, 1993, 282, 1946, 1994, 1995,
	0, 1998, 0, 2014, 0, 1593, 0, 0, 81, 2019,
	0, 2033, 0, 0, 1694, 0, 2017, 0, 999, 2020,
	1695, 2018, 364, 0, 0, 0, 0, 2035, 0, 0,
	0, 0, 0, 0, 2030, 0, 0, 0, 0, 0,
	1578, 1707, 46, 0, 48, 25, 26, 2026, 1593, 0,
	0, 0, 364, 364, 0, 0, 1824, 0, 282, 282,
	71, 76, 0, 68, 2050, 0, 1728, 1825, 0, 0,
	0, 0, 1081, 0, 2056, 0, 72, 1732, 79, 0,
	0, 0, 0, 0, 0, 0, 2042, 0, 0, 0,
	0, 0, 0, 1735, 73, 74, 69, 0, 0, 2064,
	2065, 0, 0, 0, 0, 1744, 316, 47, 0, 0,
	1751, 1752, 2085, 2068, 0, 2088, 2069, 2070, 0, 0,
	0, 0, 2083, 0, 0, 0, 2087, 1756, 1757, 1758,
	0, 2082, 2093, 2084, 1516, 0, 2099, 2097, 2101, 2102,
	0, 0, 2100, 2094, 0, 565, 1783, 0, 282, 2107,
	2106, 2110, 0, 0, 47, 1787, 0, 0, 2109, 2113,
	0, 0, 270, 0, 0, 0, 0, 350, 2090, 2091,
	0, 1831, 95, 0, 0, 0, 0, 2120, 1578, 93,
	282, 1830, 256, 1807, 2115, 1813, 0, 0, 0, 0,
	0, 1811, 0, 0, 2033, 1836, 0, 0, 1593, 0,
	2121, 0, 0, 276, 2122, 95, 93, 93, 1849, 1851,
	2142, 1853, 1854, 1855, 1856, 0, 0, 2144, 0, 0,
	93, 865, 866, 0, 0, 0, 1826, 1827, 1829, 93,
	0, 93, 1828, 2125, 0, 0, 2146, 93, 0, 0,
	2091, 1909, 2091, 2091, 0, 0, 2160, 0, 0, 282,
	2161, 0, 0, 0, 0, 0, 0, 1887, 70, 0,
	21, 0, 0, 0, 0, 0, 0, 0, 1578, 1516,
	0, 2125, 0, 0, 2125, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 635, 0, 75, 943, 974, 0,
	0, 0, 1912, 0, 1937, 1938, 1939, 0, 77, 78,
	0, 80, 2091, 0, 1953, 1836, 1836, 1953, 1836, 1836,
	1516, 1516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1969, 0, 0, 2162, 0, 0, 978, 1973,
	0, 1979, 0, 0, 1978, 1980, 0, 0, 0, 1983,
	0, 0, 46, 0, 48, 25, 26, 544, 544, 544,
	544, 1628, 544, 1807, 1516, 0, 1824, 0, 0, 544,
	1999, 46, 0, 48, 25, 26, 0, 1825, 1593, 0,
	49, 1033, 2023, 0, 0, 1824, 1627, 47, 2155, 0,
	739, 0, 93, 0, 0, 0, 1825, 614, 0, 0,
	0, 618, 0, 0, 0, 589, 588, 598, 599, 591,
	592, 593, 594, 595, 596, 597, 590, 0, 2037, 600,
	0, 630, 0, 0, 0, 0, 0, 0, 2133, 0,
	0, 1953, 0, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 2053, 647, 2051, 650, 650, 650, 650, 650,
	650, 650, 650, 0, 679, 680, 681, 682, 0, 0,
	351, 0, 0, 0, 0, 0, 0, 703, 589, 588,
	598, 599, 591, 592, 593, 594, 595, 596, 597, 590,
	0, 1831, 600, 0, 0, 0, 0, 0, 0, 0,
	0, 1830, 0, 0, 92, 0, 0, 0, 0, 93,
	1831, 0, 0, 0, 0, 0, 93, 708, 93, 2095,
	1830, 0, 0, 1168, 1169, 0, 568, 0, 0, 0,
	0, 0, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1516, 0, 0, 516, 1826, 1827, 1829, 2112,
	0, 0, 1828, 0, 524, 0, 525, 0, 0, 0,
	0, 0, 532, 1423, 0, 1826, 1827, 1829, 0, 0,
	0, 1828, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 2128, 589, 588, 598,
	599, 591, 592, 593, 594, 595, 596, 597, 590, 0,
	0, 600, 0, 0, 2140, 0, 1200, 589, 588, 598,
	599, 591, 592, 593, 594, 595, 596, 597, 590, 0,
	0, 600, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1807, 0, 0, 0, 0, 0, 0, 0,
	0, 544, 1234, 0, 2166, 2167, 0, 0, 1183, 0,
	0, 0, 544, 544, 544, 544, 544, 544, 544, 544,
	0, 0, 0, 0, 0, 0, 544, 544, 0, 0,
	0, 1225, 0, 0, 93, 0, 0, 0, 0, 93,
	49, 0, 93, 601, 0, 93, 0, 0, 0, 835,
	0, 0, 0, 0, 0, 0, 0, 534, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 589, 588, 598, 599, 591,
	592, 593, 594, 595, 596, 597, 590, 93, 2131, 600,
	0, 1184, 0, 0, 0, 47, 835, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 2092, 0, 0,
	0, 0, 0, 636, 0, 589, 588, 598, 599, 591,
	592, 593, 594, 595, 596, 597, 590, 0, 0, 600,
	589, 588, 598, 599, 591, 592, 593, 594, 595, 596,
	597, 590, 0, 0, 600, 0, 276, 0, 0, 0,
	0, 0, 0, 276, 276, 0, 0, 0, 979, 276,
	0, 0, 0, 979, 686, 350, 350, 350, 350, 350,
	0, 0, 0, 710, 0, 0, 0, 0, 0, 0,
	703, 0, 1019, 0, 0, 0, 0, 1083, 1084, 350,
	1088, 0, 0, 1090, 0, 276, 276, 276, 276, 0,
	0, 93, 0, 979, 93, 93, 93, 93, 93, 0,
	1100, 1101, 1102, 1103, 1104, 601, 1013, 0, 0, 93,
	0, 0, 0, 708, 1466, 0, 0, 0, 93, 93,
	0, 0, 0, 0, 0, 601, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 1495, 0,
	0, 1496, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 544, 0, 544,
	0, 0, 0, 1510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	93, 0, 1538, 93, 0, 0, 659, 0, 0, 93,
	0, 93, 0, 0, 0, 0, 0, 0, 93, 823,
	0, 93, 0, 93, 824, 0, 93, 828, 0, 0,
	831, 0, 1177, 601, 0, 0, 0, 0, 0, 1084,
	1101, 661, 0, 659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 850, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1207, 1209,
	0, 1210, 864, 601, 0, 1212, 0, 1214, 661, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 1217,
	1218, 0, 0, 1219, 0, 1220, 1221, 0, 0, 0,
	0, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 1612, 908, 909, 0, 910, 911, 912, 914, 913,
	0, 905, 662, 0, 0, 0, 0, 276, 0, 0,
	677, 660, 0, 0, 0, 0, 666, 665, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 0, 0,
	0, 1245, 1246, 0, 0, 0, 0, 0, 0, 662,
	0, 0, 0, 0, 0, 0, 0, 677, 660, 0,
	0, 0, 0, 666, 665, 0, 0, 276, 1635, 350,
	0, 0, 1236, 0, 0, 635, 996, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 46, 0, 48, 25,
	26, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	1824, 0, 0, 46, 1024, 48, 25, 26, 93, 0,
	0, 1825, 0, 0, 0, 0, 0, 1824, 46, 23,
	48, 25, 26, 0, 1683, 0, 678, 0, 1825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 0, 0, 27, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 46, 93, 48, 25, 26,
	1327, 0, 0, 678, 36, 2149, 0, 0, 50, 1824,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1825, 0, 2126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1115, 0, 0, 1118, 0, 0, 1123, 93,
	1336, 0, 0, 93, 1131, 93, 1137, 544, 0, 0,
	0, 0, 0, 1141, 0, 1831, 1158, 0, 1159, 0,
	0, 1160, 0, 0, 0, 1830, 0, 0, 0, 0,
	0, 0, 1831, 0, 29, 30, 32, 31, 34, 0,
	0, 0, 1830, 0, 0, 0, 0, 0, 0, 1414,
	1415, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	35, 42, 43, 276, 0, 44, 45, 33, 1785, 0,
	1826, 1827, 1829, 0, 1791, 0, 1828, 0, 0, 0,
	0, 0, 0, 276, 1831, 0, 0, 1826, 1827, 1829,
	1487, 0, 47, 1828, 1830, 0, 0, 0, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	1501, 1502, 0, 46, 835, 48, 25, 26, 37, 38,
	0, 39, 40, 0, 252, 0, 0, 1824, 979, 0,
	0, 0, 0, 0, 979, 1549, 1551, 0, 1825, 1826,
	1827, 1829, 0, 0, 0, 1828, 0, 0, 1536, 0,
	46, 0, 48, 25, 26, 2043, 0, 0, 0, 0,
	0, 0, 0, 0, 1824, 0, 0, 1548, 0, 0,
	0, 0, 0, 630, 1888, 1825, 0, 0, 0, 0,
	0, 237, 0, 0, 0, 0, 0, 239, 0, 0,
	0, 0, 0, 0, 245, 241, 1327, 0, 1908, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 47, 0,
	47, 0, 0, 0, 49, 0, 0, 0, 0, 1947,
	0, 0, 0, 0, 0, 0, 243, 0, 0, 0,
	247, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	1972, 0, 1831, 0, 1327, 93, 49, 0, 0, 0,
	1207, 1209, 1830, 1210, 0, 93, 1212, 0, 1214, 0,
	0, 1303, 0, 0, 0, 0, 0, 0, 0, 0,
	1217, 1218, 0, 0, 1219, 0, 1220, 1221, 0, 1831,
	0, 0, 1621, 49, 0, 0, 0, 0, 93, 1830,
	0, 0, 0, 2024, 0, 0, 0, 1826, 1827, 1829,
	0, 0, 0, 1828, 1356, 0, 238, 0, 1360, 0,
	1362, 0, 0, 2027, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1632, 0, 0, 0, 0, 0, 1667,
	1670, 0, 0, 0, 1826, 1827, 1829, 0, 0, 0,
	1828, 0, 0, 0, 0, 0, 240, 0, 248, 249,
	250, 251, 255, 0, 0, 2055, 635, 254, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1680, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 708,
	0, 1667, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
	1934, 1935, 1936, 0, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 630, 0, 0, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 1972, 0, 0, 0, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	93, 350, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2123, 49, 0,
	0, 0, 93, 0, 0, 1487, 0, 0, 1750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	1454, 1452, 0, 0, 1449, 0, 0, 1447, 0, 0,
	1456, 0, 0, 1455, 1441, 1451, 1453, 1450, 1445, 1786,
	1440, 0, 1458, 1457, 1459, 1438, 1461, 0, 0, 1548,
	1464, 1443, 1463, 1462, 0, 1460, 1177, 0, 0, 0,
	1579, 0, 0, 0, 1442, 951, 0, 0, 0, 0,
	1590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1446, 0, 0, 1845, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1606, 0, 1487, 1327, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 979, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1708, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1725, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2061, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 485, 474, 0, 433, 487, 403,
	421, 495, 423, 424, 460, 382, 443, 162, 418, 400,
	99, 406, 375, 413, 376, 404, 435, 123, 401, 0,
	476, 446, 137, 232, 233, 493, 140, 451, 0, 186,
	150, 0, 0, 438, 478, 441, 469, 432, 461, 390,
	450, 488, 419, 456, 489, 0, 0, 0, 369, 0,
	1663, 0, 1664, 0, 0, 0, 0, 2119, 112, 0,
	455, 483, 415, 498, 47, 459, 374, 453, 0, 380,
	383, 494, 481, 410, 411, 0, 0, 0, 0, 0,
	0, 0, 437, 442, 466, 429, 0, 0, 0, 2158,
	93, 0, 0, 0, 0, 0, 0, 0, 407, 0,
	449, 0, 0, 0, 387, 381, 0, 434, 0, 0,
	0, 389, 0, 408, 467, 0, 371, 472, 479, 431,
	146, 213, 482, 428, 427, 169, 0, 115, 0, 192,
	127, 420, 138, 464, 496, 486, 439, 477, 405, 414,
	117, 412, 176, 163, 204, 448, 462, 174, 141, 196,
	170, 203, 484, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 379, 372, 409, 470, 473, 394, 458,
	384, 416, 465, 417, 440, 399, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 377, 0, 187, 206, 223, 224, 378,
	398, 480, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 457, 177, 114,
	205, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 393, 397, 391, 392, 444, 445,
	490, 491, 492, 468, 388, 0, 395, 396, 0, 475,
	132, 234, 235, 447, 98, 106, 139, 497, 220, 0,
	171, 125, 207, 0, 0, 422, 373, 426, 0, 0,
	0, 0, 0, 0, 0, 385, 386, 178, 0, 430,
	425, 452, 454, 463, 471, 0, 402, 436, 0, 111,
	485, 474, 0, 433, 487, 403, 421, 495, 423, 424,
	460, 382, 443, 162, 418, 400, 99, 406, 375, 413,
	376, 404, 435, 123, 401, 2141, 476, 446, 137, 232,
	233, 493, 140, 451, 0, 186, 150, 0, 0, 438,
	478, 441, 469, 432, 461, 390, 450, 488, 419, 456,
	489, 0, 0, 0, 281, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 455, 483, 415, 498,
	0, 459, 374, 453, 0, 380, 383, 494, 481, 410,
	411, 0, 0, 0, 0, 0, 0, 0, 437, 442,
	466, 429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 407, 0, 449, 0, 0, 0,
	387, 381, 0, 434, 0, 0, 0, 389, 0, 408,
	467, 0, 371, 472, 479, 431, 146, 213, 482, 428,
	427, 169, 0, 115, 0, 192, 127, 420, 138, 464,
	496, 486, 439, 477, 405, 414, 117, 412, 176, 163,
	204, 448, 462, 174, 141, 196, 170, 203, 484, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 379,
	372, 409, 470, 473, 394, 458, 384, 416, 465, 417,
	440, 399, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 377,
	0, 187, 206, 223, 224, 378, 398, 480, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 457, 177, 114, 205, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	393, 397, 391, 392, 444, 445, 490, 491, 492, 468,
	388, 0, 395, 396, 0, 475, 132, 234, 235, 447,
	98, 106, 139, 497, 220, 0, 171, 125, 207, 0,
	0, 422, 373, 426, 0, 0, 0, 0, 0, 0,
	0, 385, 386, 178, 0, 430, 425, 452, 454, 463,
	471, 0, 402, 436, 0, 111, 485, 474, 0, 433,
	487, 403, 421, 495, 423, 424, 460, 382, 443, 162,
	418, 400, 99, 406, 375, 413, 376, 404, 435, 123,
	401, 0, 476, 446, 137, 232, 233, 493, 140, 451,
	0, 186, 150, 0, 0, 438, 478, 441, 469, 432,
	461, 390, 450, 488, 419, 456, 489, 0, 0, 0,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 455, 483, 415, 498, 0, 459, 374, 453,
	0, 380, 383, 494, 481, 410, 411, 1511, 0, 0,
	0, 0, 0, 0, 437, 442, 466, 429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	407, 0, 449, 0, 0, 0, 387, 381, 0, 434,
	0, 0, 0, 389, 0, 408, 467, 0, 371, 472,
	479, 431, 146, 213, 482, 428, 427, 169, 0, 115,
	0, 192, 127, 420, 138, 464, 496, 486, 439, 477,
	405, 414, 117, 412, 176, 163, 204, 448, 462, 174,
	141, 196, 170, 203, 484, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 379, 372, 409, 470, 473,
	394, 458, 384, 416, 465, 417, 440, 399, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 377, 0, 187, 206, 223,
	224, 378, 398, 480, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 457,
	177, 114, 205, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 393, 397, 391, 392,
	444, 445, 490, 491, 492, 468, 388, 0, 395, 396,
	0, 475, 132, 234, 235, 447, 98, 106, 139, 497,
	220, 0, 171, 125, 207, 0, 0, 422, 373, 426,
	0, 0, 0, 0, 0, 0, 0, 385, 386, 178,
	0, 430, 425, 452, 454, 463, 471, 0, 402, 436,
	0, 111, 485, 474, 0, 433, 487, 403, 421, 495,
	423, 424, 460, 382, 443, 162, 418, 400, 99, 406,
	375, 413, 376, 404, 435, 123, 401, 0, 476, 446,
	137, 232, 233, 493, 140, 451, 0, 186, 150, 0,
	0, 438, 478, 441, 469, 432, 461, 390, 450, 488,
	419, 456, 489, 0, 0, 0, 281, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 455, 483,
	415, 498, 0, 459, 374, 453, 0, 380, 383, 494,
	481, 410, 411, 0, 0, 0, 0, 0, 0, 0,
	437, 442, 466, 429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 407, 0, 449, 0,
	0, 0, 387, 381, 0, 434, 0, 0, 0, 389,
	0, 408, 467, 0, 371, 472, 479, 431, 146, 213,
	482, 428, 427, 169, 0, 115, 0, 192, 127, 420,
	138, 464, 496, 486, 439, 477, 405, 414, 117, 412,
	176, 163, 204, 448, 462, 174, 141, 196, 170, 203,
	484, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 379, 372, 409, 470, 473, 394, 458, 384, 416,
	465, 417, 440, 399, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 377, 0, 187, 206, 223, 224, 378, 398, 480,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 457, 177, 114, 205, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 393, 397, 391, 392, 444, 445, 490, 491,
	492, 468, 388, 0, 395, 396, 0, 475, 132, 234,
	235, 447, 98, 106, 139, 497, 220, 0, 171, 125,
	207, 0, 0, 422, 373, 426, 0, 0, 0, 0,
	0, 0, 0, 385, 386, 178, 0, 430, 425, 452,
	454, 463, 471, 0, 402, 436, 0, 111, 485, 474,
	0, 433, 487, 403, 421, 495, 423, 424, 460, 382,
	443, 162, 418, 400, 99, 406, 375, 413, 376, 404,
	435, 123, 401, 0, 476, 446, 137, 232, 233, 493,
	140, 451, 0, 186, 150, 0, 0, 438, 478, 441,
	469, 432, 461, 390, 450, 488, 419, 456, 489, 0,
	0, 0, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 455, 483, 415, 498, 0, 459,
	374, 453, 0, 380, 383, 494, 481, 410, 411, 0,
	0, 0, 0, 0, 0, 0, 437, 442, 466, 429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 407, 0, 449, 0, 0, 0, 387, 381,
	0, 434, 0, 0, 0, 389, 0, 408, 467, 0,
	371, 472, 479, 431, 146, 213, 482, 428, 427, 169,
	0, 115, 0, 192, 127, 420, 138, 464, 496, 486,
	439, 477, 405, 414, 117, 412, 176, 163, 204, 448,
	462, 174, 141, 196, 170, 203, 484, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 379, 372, 409,
	470, 473, 394, 458, 384, 416, 465, 417, 440, 399,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 377, 0, 187,
	206, 223, 224, 378, 398, 480, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 457, 177, 114, 205, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 393, 397,
	391, 392, 444, 445, 490, 491, 492, 468, 388, 0,
	395, 396, 0, 475, 132, 234, 235, 447, 98, 106,
	139, 497, 220, 0, 171, 125, 207, 0, 0, 422,
	373, 426, 0, 0, 0, 0, 0, 0, 0, 385,
	386, 178, 0, 430, 425, 452, 454, 463, 471, 0,
	402, 436, 0, 111, 485, 474, 0, 433, 487, 403,
	421, 495, 423, 424, 460, 382, 443, 162, 418, 400,
	99, 406, 375, 413, 376, 404, 435, 123, 401, 0,
	476, 446, 137, 232, 233, 493, 140, 451, 0, 186,
	150, 0, 0, 438, 478, 441, 469, 432, 461, 390,
	450, 488, 419, 456, 489, 50, 0, 0, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	455, 483, 415, 498, 0, 459, 374, 453, 0, 380,
	383, 494, 481, 410, 411, 0, 0, 0, 0, 0,
	0, 0, 437, 442, 466, 429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 407, 0,
	449, 0, 0, 0, 387, 381, 0, 434, 0, 0,
	0, 389, 0, 408, 467, 0, 371, 472, 479, 431,
	146, 213, 482, 428, 427, 169, 0, 115, 0, 192,
	127, 420, 138, 464, 496, 486, 439, 477, 405, 414,
	117, 412, 176, 163, 204, 448, 462, 174, 141, 196,
	170, 203, 484, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 379, 372, 409, 470, 473, 394, 458,
	384, 416, 465, 417, 440, 399, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 377, 0, 187, 206, 223, 224, 378,
	398, 480, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 457, 177, 114,
	205, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 393, 397, 391, 392, 444, 445,
	490, 491, 492, 468, 388, 0, 395, 396, 0, 475,
	132, 234, 235, 447, 98, 106, 139, 497, 220, 0,
	171, 125, 207, 0, 0, 422, 373, 426, 0, 0,
	0, 0, 0, 0, 0, 385, 386, 178, 0, 430,
	425, 452, 454, 463, 471, 0, 402, 436, 0, 111,
	485, 474, 0, 433, 487, 403, 421, 495, 423, 424,
	460, 382, 443, 162, 418, 400, 99, 406, 375, 413,
	376, 404, 435, 123, 401, 0, 476, 446, 137, 232,
	233, 493, 140, 451, 0, 186, 150, 0, 0, 438,
	478, 441, 469, 432, 461, 390, 450, 488, 419, 456,
	489, 0, 0, 0, 369, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 455, 483, 415, 498,
	0, 459, 374, 453, 0, 380, 383, 494, 481, 410,
	411, 0, 0, 0, 0, 0, 0, 0, 437, 442,
	466, 429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 407, 0, 449, 0, 0, 0,
	387, 381, 0, 434, 0, 0, 0, 389, 0, 408,
	467, 0, 371, 472, 479, 431, 146, 213, 482, 428,
	427, 169, 0, 115, 0, 192, 127, 420, 138, 464,
	496, 486, 439, 477, 405, 414, 117, 412, 176, 163,
	204, 448, 462, 174, 141, 196, 170, 203, 484, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 379,
	372, 409, 470, 473, 394, 458, 384, 416, 465, 417,
	440, 399, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 367, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 377,
	0, 187, 206, 223, 224, 378, 398, 480, 216, 217,
	218, 219, 0, 0, 0, 368, 366, 131, 181, 135,
	142, 172, 221, 457, 177, 114, 205, 183, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	393, 397, 391, 392, 444, 445, 490, 491, 492, 468,
	388, 0, 395, 396, 0, 475, 132, 234, 235, 447,
	98, 106, 139, 497, 220, 0, 171, 125, 207, 0,
	0, 422, 373, 426, 0, 0, 0, 0, 0, 0,
	0, 385, 386, 178, 0, 430, 425, 452, 454, 463,
	471, 0, 402, 436, 0, 111, 485, 474, 0, 433,
	487, 403, 421, 495, 423, 424, 460, 382, 443, 162,
	418, 400, 99, 406, 375, 413, 376, 404, 435, 123,
	401, 0, 476, 446, 137, 232, 233, 493, 140, 451,
	0, 186, 150, 0, 0, 438, 478, 441, 469, 432,
	461, 390, 450, 488, 419, 456, 489, 0, 0, 0,
	94, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 455, 483, 415, 498, 0, 459, 374, 453,
	0, 380, 383, 494, 481, 410, 411, 0, 0, 0,
	0, 0, 0, 0, 437, 442, 466, 429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	407, 0, 449, 0, 0, 0, 387, 381, 0, 434,
	0, 0, 0, 389, 0, 408, 467, 0, 371, 472,
	479, 431, 146, 213, 482, 428, 427, 169, 0, 115,
	0, 192, 127, 420, 138, 464, 496, 486, 439, 477,
	405, 414, 117, 412, 176, 163, 204, 448, 462, 174,
	141, 196, 170, 203, 484, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 379, 372, 409, 470, 473,
	394, 458, 384, 416, 465, 417, 440, 399, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 377, 0, 187, 206, 223,
	224, 378, 398, 480, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 457,
	177, 114, 205, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 393, 397, 391, 392,
	444, 445, 490, 491, 492, 468, 388, 0, 395, 396,
	0, 475, 132, 234, 235, 447, 98, 106, 139, 497,
	220, 0, 171, 125, 207, 0, 0, 422, 373, 426,
	0, 0, 0, 0, 0, 0, 0, 385, 386, 178,
	0, 430, 425, 452, 454, 463, 471, 0, 402, 436,
	0, 111, 485, 474, 0, 433, 487, 403, 421, 495,
	423, 424, 460, 382, 443, 162, 418, 400, 99, 406,
	375, 413, 376, 404, 435, 123, 401, 0, 476, 446,
	137, 232, 233, 493, 140, 451, 0, 186, 150, 0,
	0, 438, 478, 441, 469, 432, 461, 390, 450, 488,
	419, 456, 489, 0, 0, 0, 369, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 455, 483,
	415, 498, 0, 459, 374, 453, 0, 380, 383, 494,
	481, 410, 411, 0, 0, 0, 0, 0, 0, 0,
	437, 442, 466, 429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 407, 0, 449, 0,
	0, 0, 387, 381, 0, 434, 0, 0, 0, 389,
	0, 408, 467, 0, 371, 472, 479, 431, 146, 213,
	482, 428, 427, 169, 0, 115, 0, 192, 127, 420,
	138, 464, 496, 486, 439, 477, 405, 414, 117, 412,
	176, 163, 204, 448, 462, 174, 141, 196, 170, 203,
	484, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 379, 372, 409, 470, 473, 394, 458, 384, 416,
	465, 417, 440, 399, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 718, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 367, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 377, 0, 187, 206, 223, 224, 378, 398, 480,
	216, 217, 218, 219, 0, 0, 0, 368, 366, 131,
	181, 135, 142, 172, 221, 457, 177, 114, 205, 183,
	362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 393, 397, 391, 392, 444, 445, 490, 491,
	492, 468, 388, 0, 395, 396, 0, 475, 132, 234,
	235, 447, 98, 106, 139, 497, 220, 0, 171, 125,
	207, 0, 0, 422, 373, 426, 0, 0, 0, 0,
	0, 0, 0, 385, 386, 178, 0, 430, 425, 452,
	454, 463, 471, 0, 402, 436, 0, 111, 485, 474,
	0, 433, 487, 403, 421, 495, 423, 424, 460, 382,
	443, 162, 418, 400, 99, 406, 375, 413, 376, 404,
	435, 123, 401, 0, 476, 446, 137, 232, 233, 493,
	140, 451, 0, 186, 150, 0, 0, 438, 478, 441,
	469, 432, 461, 390, 450, 488, 419, 456, 489, 0,
	0, 0, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 455, 483, 415, 498, 0, 459,
	374, 453, 0, 380, 383, 494, 481, 410, 411, 0,
	0, 0, 0, 0, 0, 0, 437, 442, 466, 429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 407, 0, 449, 0, 0, 0, 387, 381,
	0, 434, 0, 0, 0, 389, 0, 408, 467, 0,
	371, 472, 479, 431, 146, 213, 482, 428, 427, 169,
	0, 115, 0, 192, 127, 420, 138, 464, 496, 486,
	439, 477, 405, 414, 117, 412, 176, 163, 204, 448,
	462, 174, 141, 196, 170, 203, 484, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 379, 372, 409,
	470, 473, 394, 458, 384, 416, 465, 417, 440, 399,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 357, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 367, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 377, 0, 187,
	206, 223, 224, 378, 398, 480, 216, 217, 218, 219,
	0, 0, 0, 368, 366, 360, 359, 135, 142, 172,
	221, 457, 177, 114, 205, 183, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 393, 397,
	391, 392, 444, 445, 490, 491, 492, 468, 388, 0,
	395, 396, 0, 475, 132, 234, 235, 447, 98, 106,
	139, 497, 220, 0, 171, 125, 207, 0, 0, 422,
	373, 426, 0, 0, 0, 0, 0, 0, 0, 385,
	386, 178, 0, 430, 425, 452, 454, 463, 471, 0,
	402, 436, 0, 111, 485, 474, 0, 433, 487, 403,
	421, 495, 423, 424, 460, 382, 443, 162, 418, 400,
	99, 406, 375, 413, 376, 404, 435, 123, 401, 0,
	476, 446, 137, 232, 233, 493, 140, 451, 0, 186,
	150, 0, 0, 438, 478, 441, 469, 432, 461, 390,
	450, 488, 419, 456, 489, 0, 0, 0, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	455, 483, 415, 498, 0, 459, 374, 453, 0, 380,
	383, 494, 481, 410, 411, 0, 0, 0, 0, 0,
	0, 0, 437, 442, 466, 429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 407, 0,
	449, 0, 0, 0, 387, 381, 0, 434, 0, 0,
	0, 389, 0, 408, 467, 0, 371, 472, 479, 431,
	146, 213, 482, 428, 427, 169, 0, 115, 0, 192,
	127, 420, 138, 464, 496, 486, 439, 477, 405, 414,
	117, 412, 176, 163, 204, 448, 462, 174, 141, 196,
	170, 203, 484, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 379, 372, 409, 470, 473, 394, 458,
	384, 416, 465, 417, 440, 399, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 377, 0, 187, 206, 223, 224, 378,
	398, 480, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 457, 177, 114,
	205, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 393, 397, 391, 392, 444, 445,
	490, 491, 492, 468, 388, 0, 395, 396, 0, 475,
	132, 234, 235, 447, 98, 106, 139, 497, 220, 0,
	171, 125, 207, 0, 0, 422, 373, 426, 0, 0,
	0, 0, 0, 0, 0, 385, 386, 178, 0, 430,
	425, 452, 454, 463, 471, 162, 402, 436, 99, 111,
	0, 284, 0, 0, 0, 123, 280, 0, 0, 0,
	137, 232, 233, 326, 140, 327, 0, 186, 150, 0,
	0, 0, 0, 317, 318, 0, 0, 0, 0, 0,
	0, 1031, 0, 50, 0, 0, 281, 305, 283, 303,
	307, 308, 309, 310, 0, 0, 112, 306, 311, 312,
	313, 1032, 0, 0, 0, 278, 296, 0, 325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 0, 0, 0, 0, 339, 0,
	295, 0, 0, 291, 292, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 337, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 341, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 328, 338, 334, 335, 332, 333, 331, 330,
	329, 340, 319, 320, 321, 322, 324, 0, 132, 234,
	235, 323, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 162, 0, 0, 99, 931, 0, 284, 0, 0,
	0, 123, 280, 0, 0, 178, 137, 232, 233, 326,
	140, 327, 0, 186, 150, 0, 336, 111, 0, 317,
	318, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 281, 305, 283, 303, 307, 308, 309, 310,
	0, 0, 112, 306, 311, 312, 313, 0, 0, 0,
	0, 278, 296, 0, 325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	274, 0, 0, 0, 339, 0, 295, 0, 0, 291,
	292, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 337, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	341, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 328, 338,
	334, 335, 332, 333, 331, 330, 329, 340, 319, 320,
	321, 322, 324, 0, 132, 234, 235, 323, 98, 106,
	139, 0, 220, 0, 171, 125, 207, 162, 0, 0,
	99, 0, 0, 284, 0, 0, 0, 123, 280, 0,
	0, 178, 137, 232, 233, 326, 140, 327, 0, 186,
	150, 0, 336, 111, 0, 317, 318, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 560, 281, 305,
	283, 303, 307, 308, 309, 310, 0, 0, 112, 306,
	311, 312, 313, 0, 0, 0, 0, 278, 296, 0,
	325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	339, 0, 295, 0, 0, 291, 292, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 337, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 341, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 328, 338, 334, 335, 332, 333,
	331, 330, 329, 340, 319, 320, 321, 322, 324, 0,
	132, 234, 235, 323, 98, 106, 139, 0, 220, 0,
	171, 125, 207, 162, 0, 0, 99, 0, 0, 284,
	0, 0, 0, 123, 280, 0, 0, 178, 137, 232,
	233, 326, 140, 327, 0, 186, 150, 0, 336, 111,
	0, 317, 318, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 281, 305, 283, 303, 307, 308,
	309, 310, 0, 0, 112, 306, 311, 312, 313, 0,
	0, 0, 0, 278, 296, 0, 325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 274, 0, 0, 0, 339, 0, 295, 0,
	0, 291, 292, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	337, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 341, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	328, 338, 334, 335, 332, 333, 331, 330, 329, 340,
	319, 320, 321, 322, 324, 0, 132, 234, 235, 323,
	98, 106, 139, 0, 220, 0, 171, 125, 207, 162,
	0, 0, 99, 0, 0, 284, 0, 0, 0, 123,
	280, 0, 0, 178, 137, 232, 233, 326, 140, 327,
	0, 186, 150, 0, 336, 111, 0, 317, 318, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	281, 305, 283, 303, 307, 308, 309, 310, 0, 0,
	112, 306, 311, 312, 313, 0, 0, 0, 0, 278,
	296, 0, 325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 0, 0,
	0, 0, 339, 0, 295, 0, 0, 945, 292, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 337, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 947, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 957, 963, 961, 191, 148, 958, 134, 182,
	956, 102, 0, 965, 122, 167, 964, 949, 960, 962,
	959, 954, 198, 948, 222, 967, 966, 968, 946, 970,
	211, 105, 109, 973, 952, 972, 971, 208, 969, 201,
	149, 145, 0, 104, 199, 147, 144, 950, 951, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 341, 0,
	158, 130, 0, 0, 0, 0, 0, 953, 955, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 338, 334, 335,
	332, 333, 331, 330, 329, 340, 319, 320, 321, 322,
	324, 0, 132, 234, 235, 323, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 178,
	99, 0, 0, 284, 0, 0, 0, 123, 280, 0,
	336, 111, 137, 232, 233, 326, 140, 327, 0, 186,
	150, 0, 0, 0, 0, 317, 318, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 281, 305,
	283, 303, 307, 308, 309, 310, 0, 0, 112, 306,
	311, 312, 313, 0, 0, 0, 0, 278, 296, 0,
	325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	339, 0, 295, 0, 0, 291, 292, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 337, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 341, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 328, 338, 334, 335, 332, 333,
	331, 330, 329, 340, 319, 320, 321, 322, 324, 0,
	132, 234, 235, 323, 98, 106, 139, 0, 220, 0,
	171, 125, 207, 162, 0, 0, 99, 0, 0, 284,
	0, 0, 0, 123, 280, 0, 0, 178, 137, 232,
	233, 326, 140, 327, 0, 186, 150, 0, 336, 111,
	0, 317, 318, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 281, 305, 283, 303, 307, 308,
	309, 310, 0, 0, 112, 306, 311, 312, 313, 0,
	0, 0, 0, 278, 296, 0, 325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 0, 0, 0, 0, 339, 0, 295, 0,
	0, 291, 292, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	337, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 341, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	328, 338, 334, 335, 332, 333, 331, 330, 329, 340,
	319, 320, 321, 322, 324, 0, 132, 234, 235, 323,
	98, 106, 139, 0, 220, 0, 171, 125, 207, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 178, 137, 232, 233, 326, 140, 327,
	0, 186, 150, 0, 336, 111, 0, 317, 318, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	281, 305, 283, 303, 307, 308, 309, 310, 0, 0,
	112, 306, 311, 312, 313, 0, 0, 0, 0, 0,
	296, 0, 325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 0, 0,
	0, 0, 339, 0, 295, 0, 0, 291, 292, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 337, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 2163, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 341, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 338, 334, 335,
	332, 333, 331, 330, 329, 340, 319, 320, 321, 322,
	324, 0, 132, 234, 235, 323, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 162, 0, 0, 99, 0,
	0, 284, 0, 0, 0, 123, 0, 0, 0, 178,
	137, 232, 233, 326, 140, 327, 0, 186, 150, 0,
	336, 111, 0, 317, 318, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 281, 305, 283, 303,
	307, 308, 309, 310, 0, 0, 112, 306, 311, 312,
	313, 0, 0, 0, 0, 0, 296, 0, 325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 0, 0, 0, 0, 339, 0,
	295, 0, 0, 291, 292, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 337, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 341, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 328, 338, 334, 335, 332, 333, 331, 330,
	329, 340, 319, 320, 321, 322, 324, 0, 132, 234,
	235, 323, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 178, 137, 232, 233, 326,
	140, 327, 0, 186, 150, 0, 336, 111, 0, 317,
	318, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 281, 305, 283, 303, 307, 308, 309, 310,
	0, 0, 112, 306, 311, 312, 313, 0, 0, 0,
	0, 0, 296, 0, 325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	0, 0, 0, 0, 339, 0, 295, 0, 0, 291,
	292, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 337, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	341, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 328, 338,
	334, 335, 332, 333, 331, 330, 329, 340, 319, 320,
	321, 322, 324, 0, 132, 234, 235, 323, 98, 106,
	139, 0, 220, 0, 171, 125, 207, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 178, 137, 232, 233, 326, 140, 327, 0, 186,
	150, 0, 336, 111, 0, 317, 318, 0, 0, 0,
	0, 0, 0, 0, 0, 1208, 0, 0, 281, 305,
	283, 303, 307, 308, 309, 310, 0, 0, 112, 306,
	311, 312, 313, 0, 0, 0, 0, 0, 296, 0,
	325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	339, 0, 295, 0, 0, 291, 292, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 337, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 341, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 328, 338, 334, 335, 332, 333,
	331, 330, 329, 340, 319, 320, 321, 322, 324, 0,
	132, 234, 235, 323, 98, 106, 139, 0, 220, 0,
	171, 125, 207, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 178, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 336, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1543, 0, 0, 281, 0, 1312, 1313, 1314, 1315,
	0, 0, 0, 0, 112, 1318, 1316, 312, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 1320, 1325, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1322, 0, 1324, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 0,
	98, 106, 139, 0, 220, 0, 171, 125, 207, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 178, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1310, 0, 0,
	281, 0, 1312, 1313, 1314, 1315, 0, 0, 0, 0,
	112, 1318, 1316, 312, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	1320, 1325, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 1322, 0, 1324, 1323,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 132, 234, 235, 0, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 0, 369, 305, 925, 303,
	307, 308, 309, 310, 0, 0, 112, 306, 311, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 765, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 132, 234,
	235, 0, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 1841, 0, 369, 0, 1839, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	1838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	750, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 766, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 0, 792, 793, 167, 794,
	795, 796, 798, 797, 767, 768, 769, 773, 771, 770,
	772, 744, 746, 211, 742, 745, 751, 747, 748, 749,
	763, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 764, 774, 775, 776, 777, 778, 779, 780,
	781, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	765, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 234, 235, 369, 98,
	743, 139, 0, 220, 0, 171, 125, 207, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 919, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	766, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	0, 792, 793, 167, 794, 795, 796, 798, 797, 767,
	917, 769, 773, 771, 770, 772, 744, 746, 211, 742,
	916, 751, 747, 748, 749, 763, 920, 753, 754, 755,
	756, 757, 758, 759, 760, 921, 922, 764, 774, 775,
	776, 777, 778, 779, 780, 781, 0, 0, 158, 130,
	918, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 765, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 369, 98, 743, 139, 0, 220, 0,
	171, 125, 207, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	750, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 766, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 2034, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 0, 792, 793, 167, 794,
	795, 796, 798, 797, 767, 768, 769, 773, 771, 770,
	772, 744, 746, 211, 742, 745, 751, 747, 748, 749,
	763, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 764, 774, 775, 776, 777, 778, 779, 780,
	781, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 162, 0, 0, 99, 0, 577, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 234, 235, 0, 98,
	743, 139, 369, 220, 579, 171, 125, 207, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 574,
	573, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 575, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 765,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 234, 235, 369, 98, 106,
	139, 0, 220, 0, 171, 125, 207, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 766,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 0,
	792, 793, 167, 794, 795, 796, 798, 797, 767, 768,
	769, 773, 771, 770, 772, 744, 746, 211, 742, 745,
	751, 747, 748, 749, 763, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 764, 774, 775, 776,
	777, 778, 779, 780, 781, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 0, 132,
	234, 235, 0, 98, 743, 139, 0, 220, 0, 171,
	125, 207, 1841, 0, 369, 0, 1839, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 1838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1837, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 0,
	98, 106, 139, 369, 220, 502, 171, 125, 207, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1055, 146, 213, 0, 0, 0,
	1050, 0, 1049, 0, 1051, 1052, 0, 138, 0, 0,
	1053, 1056, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 0, 46, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 132, 234, 235, 0, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 50, 0,
	0, 94, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 112, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 0, 98, 106, 139,
	94, 220, 96, 171, 125, 207, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 0, 98, 106, 139, 281,
	220, 96, 171, 125, 207, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 2118, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 1517, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 132, 234, 235, 0, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 50, 0, 0, 94, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 112, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	707, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	234, 235, 0, 98, 106, 139, 94, 220, 709, 171,
	125, 207, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	0, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 132, 234,
	235, 0, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 50, 0, 0, 369, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 0,
	98, 106, 139, 94, 220, 96, 171, 125, 207, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 825, 177, 114, 205, 183, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 801, 0, 132, 234, 235, 369, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 802, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 728, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 0, 98, 106, 139, 369, 220, 727,
	171, 125, 207, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	707, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	234, 235, 0, 98, 106, 139, 94, 220, 709, 171,
	125, 207, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 705, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	0, 0, 0, 0, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 685, 123, 0, 0, 0, 0, 137,
	232, 233, 0, 140, 0, 0, 186, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 234,
	235, 0, 98, 106, 139, 94, 220, 96, 171, 125,
	207, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 0, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 132, 234, 235,
	0, 98, 106, 139, 0, 220, 0, 171, 125, 207,
	94, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 0, 98, 106, 139, 94,
	220, 96, 171, 125, 207, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 234, 235, 0, 98, 106, 139, 94, 220,
	96, 171, 125, 207, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 369, 98, 106, 139, 0, 220, 0,
	171, 125, 207, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 1517, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 234, 235, 369, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 1594, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 0, 98, 106, 139, 281, 220, 96,
	171, 125, 207, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	234, 235, 0, 98, 106, 139, 94, 220, 709, 171,
	125, 207, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 234,
	235, 369, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 0, 98, 106, 139,
	369, 220, 579, 171, 125, 207, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 137,
	232, 233, 0, 140, 0, 0, 186, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 369, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 511, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 234, 235,
	0, 98, 106, 139, 369, 220, 502, 171, 125, 207,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 369,
	98, 106, 139, 0, 220, 0, 171, 125, 207, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 234, 235, 0, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111,
}

var yyPact = [...]int16{
	3082, -1000, -252, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1509, 1559, -1000, -1000, -1000, -1000, -1000, 1351, 1842,
	354, 413, 130, 18340, 408, 3235, 18629, -1000, 120, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1242, -1000, -1000,
	-1000, -1000, -1000, 1500, 1507, 1242, 1477, 9195, -1000, 319,
	15728, 18051, 7453, -1000, 20925, 372, 370, 230, 336, 21210,
	310, 310, 21210, 20636, 18629, 406, 310, -1000, -211, -170,
	-1000, -77, 404, 18629, -1000, 18629, 311, 1042, 311, 311,
	311, 18629, -1000, 490, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 18629, 1033, 1439, 407,
	5949, 5949, 5949, 5949, 223, 5949, 3, 1372, -1000, -1000,
	-1000, -1000, 5949, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1407, 970, 1447, 10215, 10215, 1509, -1000,
	1242, -1000, -1000, 1532, -1000, 13683, 488, -1000, 10215, 83,
	1240, -1000, -1000, -232, 1240, -1000, -1000, 426, -1000, -1000,
	-1000, 11223, 11223, 11223, 11223, 11223, 11223, 11223, -1000, -1000,
	-1000, -1000, 37, -1000, 932, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 487, -1000, 9879, 1240, 1240, 1240,
	1240, 1240, 1240, 1240, 1240, 10215, 1240, 1417, 1240, 1240,
	1240, 1240, 1240, 1240, 1240, 1240, 2787, 1240, 1240, 1240,
	1240, -1000, 708, 17756, 1216, 1299, -1000, -1000, -1000, 1474,
	14852, 17467, 18629, 1158, -1000, 1232, 7077, -6, -1000, -1000,
	-1000, 659, 486, 17178, -1000, -1000, -1000, 1438, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1145,
	-1000, 13968, 13968, 16889, 21210, 310, 331, 145, 310, 1339,
	1029, 693, 1005, 1371, 554, 21210, 1473, 310, 18629, -1000,
	-1000, -1000, -1000, 16604, 5949, 325, 18629, 1456, 1369, 18629,
	1003, 980, -1000, 6701, -1000, 5949, 5949, 5949, 5949, 5949,
	5949, 5949, 5949, -1000, -1000, -1000, -1000, -1000, -1000, 5949,
	5949, -1000, 17, -1000, 18629, -1000, 1479, -1000, -1000, -1000,
	-1000, -1000, 1553, 521, 811, 483, 1237, -1000, 727, 1500,
	970, 18629, -1000, 10215, 10215, 707, -1000, 20351, -1000, -1000,
	4445, 529, 11223, 804, 555, 11223, 11223, 11223, 11223, 11223,
	11223, 11223, 11223, 11223, 11223, 11223, 11223, 11223, 11223, 11223,
	895, 2750, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 965, -1000, 13109, -1000, 1242, 12527,
	12527, 21, 21, 21, 21, 21, 21, 20062, -1000, -255,
	8523, -1000, 7829, 970, 1124, 630, 9879, 9195, 9195, 9531,
	10215, 11223, 19488, 9195, 1479, 682, 630, 19488, 1494, -1000,
	970, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	71, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9195,
	9195, 9195, 9195, -1000, 241, 18629, -1000, 19488, 15728, 15728,
	15728, 15728, 15728, -1000, 1395, 1387, -1000, 1393, 1384, 1401,
	18629, -1000, 1137, 14852, 524, 1240, -1000, 19777, -1000, -1000,
	241, 1163, 15728, 18629, -1000, -1000, 6325, 1232, -6, 1226,
	-1000, -8, -13, 8187, 7829, 500, -1000, -1000, -1000, -1000,
	199, 14554, 185, -142, 27, -1000, -1000, -1000, -1000, -1000,
	1282, -1000, -1000, -1000, 1282, 258, 1333, 1282, 1333, -1000,
	1282, 1333, 67, 67, 67, 67, 67, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1330, 1325, -1000, 1282, 1282, 1282,
	1282, 1282, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1308, 274, 1308, 1283, 1283, -1000, -1000, 185,
	1347, 18629, 21210, 1365, 18629, 310, -229, 18629, -110, 960,
	5949, 1454, 5949, 18629, 1537, 18629, -1000, -1000, -1000, 167,
	429, 13968, 18629, -1000, 1336, 18629, -1000, 18629, -1000, -1000,
	18629, 5949, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 601, -1000, -1000,
	-1000, 1310, -1000, -1000, 1415, 10215, 10215, 5197, 10215, -1000,
	-1000, -1000, 1447, -1000, -1000, 529, 663, -1000, -1000, 774,
	-1000, -1000, -1000, -1000, 482, 1240, -1000, 2569, -1000, -1000,
	-1000, -1000, 804, 11223, 11223, 11223, 2396, 2569, 2554, 166,
	231, 21, 31, 31, 88, 88, 88, 88, 88, 111,
	111, -1000, -1000, -1000, -1000, -101, -1000, 1282, 1308, 274,
	1308, 1283, 1283, -1000, -1000, 970, 256, 173, -1000, -1000,
	67, -1000, -1000, -142, -1000, -232, 935, -1000, -1000, 919,
	970, 9195, 1119, 1124, -1000, 13683, -1000, -1000, 10215, -1000,
	970, 1119, 1119, 672, 1230, 11559, 1282, -1000, 1282, 1283,
	-1000, -1000, 1282, 110, 1282, 108, -1000, -1000, -1000, -1000,
	1283, -1000, -1000, -1000, -1000, -1000, 1282, 1282, -1000, -1000,
	1282, -1000, 1282, 1282, 907, 674, 2514, 1235, -1000, 466,
	1119, 9195, 686, -1000, 10215, 970, 18629, -1000, -1000, 1119,
	970, 1229, 1119, 1119, 1165, 1240, -1000, 1233, -1000, 657,
	1299, 1338, 1364, 1077, -1000, -1000, -1000, -1000, 1386, -1000,
	1385, -1000, -1000, -1000, -1000, -102, 359, 357, 351, 21210,
	-1000, 1518, 15728, 1211, -1000, -1000, 1226, -6, -16, -1000,
	-1000, -1000, -1000, 630, 656, -1000, -1000, 955, 7829, 1224,
	1431, -1000, -1000, -1000, -1000, -1000, -1000, 1323, 771, 21210,
	291, 272, 481, 352, 950, -1000, -1000, -1000, 872, -1000,
	21210, -1000, 1550, -1000, -1000, 290, -1000, 273, 689, 934,
	18629, 1313, 160, 1312, 12231, 888, -1000, -261, -1000, 4,
	-1000, -1000, 879, 67, 67, 1282, 67, 773, 67, 67,
	-1000, -1000, 500, 1437, 500, 500, 500, 500, 928, 928,
	-105, -105, -1000, -1000, -1000, -1000, 887, 1308, -1000, -1000,
	-1000, 882, -1000, 18629, 21210, 1307, 1363, 18629, 1472, 18629,
	-1000, -1000, -1000, 1468, -1000, 7829, -1000, -1000, -1000, -1000,
	-1000, 1466, 1187, -1000, -1000, 165, -1000, 429, -1000, 1537,
	-1000, 1353, -1000, 997, 949, 437, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 240, 405, -1000,
	5949, -1000, 617, 18629, 18629, 9195, -1000, 1413, 630, 630,
	463, -1000, -1000, -1000, -1000, -1000, 5573, 9195, -1000, 2396,
	2569, 2376, -1000, 11223, 11223, 92, -1000, 1282, -1000, 90,
	81, -1000, 68, -1000, -232, -1000, 1119, 9195, -247, -1000,
	630, -1000, -1000, -1000, 3468, 895, 10215, -1000, 879, 250,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3468, 11223, 11223, 11223, 11223, 11223, 5197, -94,
	1225, 620, -1000, 10215, 790, -1000, -1000, -1000, -1000, -1000,
	-1000, 1361, 19488, 1240, -1000, 16315, 21210, 1509, 19488, 10215,
	10215, -1000, -1000, 10215, 1305, -1000, 10215, -1000, -1000, -1000,
	-1000, 1301, 1240, 1240, 1240, 1091, -1000, 1509, 1211, -1000,
	-1000, -1000, -30, -36, -1000, 10215, -1000, 4821, -1000, 199,
	-1000, 18914, -1000, 1542, 1490, 263, -4, -1000, 948, 947,
	-1000, 942, -1000, -1000, 16, -1000, -203, 104, -9, -1000,
	-1000, 1240, -1000, 1300, 10215, 1464, -1000, 1433, 862, -1000,
	11895, -1000, -234, -1000, -1000, -1000, -232, -1000, -1000, -1000,
	1240, -1000, 1296, 1292, -1000, 1281, 1240, 461, -1000, -1000,
	-1000, -1000, -1000, 1181, 500, 500, 67, 500, 1179, 1164,
	500, 500, -1000, 568, -1000, -1000, -1000, -1000, 1105, -1000,
	1102, -1000, -1000, 1218, -1000, 1100, 1223, 1359, 15430, 18629,
	1285, 1242, 1463, 1242, 1217, -1000, 651, 1489, 212, 18629,
	1537, 19199, 1537, 1162, 21210, -1000, 269, 21210, -1000, -1000,
	21210, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	21210, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 18629, -1000, -1000, -1000, -1000, -1000, 21210, 303,
	-1000, -1000, 925, 10215, -1000, -1000, 1199, -1000, 7829, -1000,
	-1000, 970, -1000, 11223, 2569, 2569, 24, 23, 22, -1000,
	919, -1000, -1000, -1000, -1000, 1240, 970, 1282, 1282, -1000,
	1282, 1283, -1000, 1282, 110, 1282, 108, -1000, -1000, -1000,
	-1000, 1283, -1000, -1000, -1000, -1000, -1000, 1282, 1282, -1000,
	-1000, 1282, -1000, 1282, 1282, 970, 777, -1000, -1000, 970,
	403, 2267, 2204, 321, 940, -1000, 1240, -85, -1000, 630,
	10215, -1000, 1443, 1160, 1202, -1000, -1000, 8859, 970, 1098,
	460, 1091, 1500, -1000, 630, 630, 630, 19199, 630, -219,
	19199, 19199, 19199, 16017, 21210, 1500, -1000, -1000, -1000, -1000,
	630, 4069, -1000, 7829, 1083, -1000, 259, 1282, 384, 384,
	-204, 270, 261, 1240, -1000, -1000, -1000, -1000, -207, -1000,
	-1000, -1000, -1000, 689, -1000, 1281, 10215, 19199, 871, 168,
	-1000, 1215, 1147, 905, 1146, -1000, 13109, -1000, 970, -1000,
	886, -1000, 868, 1142, 7829, -1000, -1000, -1000, 500, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 67, 913, 67, 842,
	-1000, 840, 15430, 21210, 18629, 1133, 1214, -1000, 244, 1280,
	19199, -1000, 1242, -1000, 7829, 4069, 324, 1506, -1000, -1000,
	1488, -1000, 1212, -1000, -1000, 1174, 18629, 1279, 21210, -1000,
	-1000, 260, -1000, 1277, -1000, -1000, -1000, -1000, 1446, 21210,
	-1000, -1000, 630, 1518, 15728, -1000, 2569, -1000, -1000, -1000,
	-1000, 381, -1000, -1000, -1000, -1000, -1000, 11223, 11223, -1000,
	11223, 11223, 11223, 970, 911, 630, 257, -1000, 1240, -1000,
	-1000, 1206, 21210, 21210, -1000, -1000, 1058, 1053, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1050, 1050, 1050, 524, -1000,
	-1000, -1000, -1000, -1000, -1000, 380, 18914, 1451, -1000, -1000,
	-1000, 765, -1000, -1000, 683, 216, 718, -1000, 21210, -207,
	10215, -1000, 1240, 777, 1041, -144, 10215, 1276, 838, -1000,
	1128, -234, 1240, -1000, -1000, -1000, -1000, -1000, -1000, 1240,
	-1000, 500, -1000, 500, 1121, 1078, 1071, 1275, 1274, -220,
	15430, 1023, -1000, -1000, -1000, 21210, -1000, -1000, -1000, -1000,
	-1000, 200, 676, 21210, 3314, 1487, -1000, 14265, 1271, 1269,
	19199, 1240, 307, 1516, 1210, -1000, 1002, 970, 1505, 403,
	403, 403, 403, 368, -1000, -1000, 1549, -1000, 1240, -1000,
	1242, 459, -1000, -1000, -1000, -219, -1000, -1000, -1000, -102,
	1355, 729, 179, -1000, 775, 646, 904, 631, 613, 592,
	591, 571, 566, 548, -1000, -1000, -1000, 1547, -1000, -1000,
	-1000, 1543, 1264, -1000, 1262, 777, 10215, 218, 1358, -1000,
	-1000, 864, -1000, 1068, 1061, -1000, -1000, -1000, -1000, -220,
	15430, 18914, 1518, 1253, 1054, 1518, 1048, -1000, 193, 143,
	10215, -1000, 3314, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1509, 21210, 3258, 21210, 21210, 21210, 356,
	10887, 10215, -1000, 676, 180, 1016, 12824, 14265, 14265, 12824,
	14265, 14265, 18914, 18914, 1015, 234, 254, 1508, 1503, -1000,
	970, -1000, 10215, -1000, -1000, -1000, -1000, 970, 198, -124,
	19488, 1202, 970, 21210, -1000, -1000, -1000, 21210, -1000, -117,
	729, 21210, -1000, 829, -1000, -1000, 743, 827, 743, 743,
	743, 743, 743, 384, 384, 21210, 18914, 218, 777, -1000,
	-89, 1540, -149, 574, -1000, -1000, 1518, 1012, 1011, 380,
	19199, -220, 380, -103, 21210, 10215, 3277, 3314, 630, -1000,
	1500, 1201, 13394, -1000, 916, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	21210, 1531, 1529, 1525, 1523, 3119, 83, 619, 142, 141,
	188, -1000, -1000, 12824, -1000, -1000, -1000, -1000, -1000, 1009,
	1000, 1339, 996, -1000, 21210, 1251, -1000, 10215, 10215, -1000,
	1198, -1000, 630, -1000, 1410, -99, -139, 1196, -1000, -1000,
	1240, 978, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 689, 689, 976, 973, -1000, 218,
	-1000, 384, 384, -1000, -1000, -1000, 177, 861, 826, 815,
	761, 46, -1000, 1502, 380, 1518, 380, 1355, 969, 1518,
	1355, -1000, -245, -1000, 630, -1000, -1000, 3314, 2265, -1000,
	1447, 21210, 169, -1000, -1000, -1000, 3258, 1445, -1000, -1000,
	-1000, -1000, -1000, 3314, 3314, 3314, 3314, -1000, -1000, 286,
	-110, -1000, 234, 1428, 18914, 630, 1195, 10215, -1000, 1400,
	-1000, 21210, -1000, 729, -1000, -1000, 264, 380, -1000, -1000,
	-1000, 752, -1000, 746, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15141, 1355, 380, -1000, -1000, -1000, 380, -1000, 10215,
	-253, -1000, 3067, -1000, -1000, 13968, 1483, -1000, 21210, 1426,
	2246, 1390, 1946, 154, -1000, 157, -1000, -1000, 236, 954,
	-1000, -112, 970, -1000, 18629, 1355, -1000, -1000, -1000, 452,
	-1000, -1000, 1355, 630, 602, -1000, -1000, 1242, -1000, -1000,
	3314, 575, 666, 3050, -1000, 159, -1000, 232, -1000, -126,
	-1000, 1250, -1000, 7829, -1000, -1000, -1000, 309, 139, -1000,
	-1000, -1000, 1240, -140, 21210, -1000, -1000, 3314, 10551, -1000,
	946, 222, 403, 970, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1806, 18, 42, 1805, 1804, 1802, 1587, 1583, 1569,
	1565, 1800, 1799, 1798, 1795, 1794, 1790, 1788, 1785, 1783,
	1781, 1780, 1779, 1778, 1777, 1776, 1774, 1773, 1771, 1770,
	1458, 1766, 1765, 1763, 112, 1762, 1759, 1757, 1756, 85,
	168, 88, 79, 1557, 1754, 53, 121, 151, 1750, 93,
	1748, 1747, 167, 1746, 111, 1745, 1744, 2360, 1742, 1741,
	47, 16, 27, 55, 1739, 1738, 115, 76, 1737, 1735,
	29, 1734, 1732, 96, 15, 35, 40, 51, 1731, 70,
	67, 1728, 95, 1727, 1726, 1723, 1722, 60, 1721, 104,
	44, 33, 11, 1720, 30, 17, 116, 82, 57, 20,
	209, 102, 1719, 77, 105, 89, 1717, 999, 1716, 1715,
	1714, 1710, 1703, 1702, 773, 127, 1701, 1700, 1698, 28,
	38, 113, 0, 377, 144, 120, 1697, 1696, 1695, 2055,
	122, 110, 56, 1694, 63, 250, 74, 1693, 1692, 94,
	124, 8, 118, 117, 1683, 119, 1680, 1678, 1677, 1982,
	103, 78, 83, 49, 1676, 1675, 97, 91, 81, 68,
	87, 101, 25, 1674, 1673, 1672, 64, 1670, 24, 39,
	1, 99, 1669, 1667, 1666, 1665, 48, 73, 1664, 46,
	1663, 32, 13, 4, 26, 5, 1662, 1661, 1657, 6,
	1654, 52, 1653, 9, 1651, 12, 1649, 1648, 1646, 41,
	1645, 1644, 1643, 23, 1642, 1641, 45, 14, 80, 65,
	72, 1640, 1639, 22, 100, 69, 1638, 71, 7, 2,
	50, 1636, 21, 1635, 1627, 1621, 31, 36, 1619, 1614,
	1613, 1612, 1607, 1604, 59, 1603, 1600, 1598, 1596, 1595,
	3, 1594, 1593, 10, 1592, 1591, 1590, 2016, 381, 1589,
	1585, 54, 1579, 1576, 1572, 1567, 564,
}

var yyR1 = [...]int16{
	0, 245, 246, 246, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 6, 3, 4, 4, 5, 5,
	7, 7, 33, 33, 8, 9, 9, 9, 249, 249,
	52, 52, 96, 96, 10, 10, 10, 10, 11, 11,
	223, 223, 222, 224, 224, 12, 12, 12, 12, 12,
	216, 216, 216, 216, 216, 13, 13, 219, 219, 219,
	14, 14, 14, 101, 101, 105, 105, 105, 106, 106,
	106, 106, 236, 236, 235, 235, 137, 137, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 250, 250,
	251, 251, 251, 251, 251, 251, 251, 214, 214, 214,
	214, 215, 215, 215, 215, 217, 217, 218, 218, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 221,
	221, 120, 120, 197, 197, 197, 198, 198, 198, 198,
	198, 198, 200, 200, 201, 201, 127, 127, 195, 195,
	194, 193, 193, 192, 192, 191, 202, 202, 22, 173,
	174, 174, 174, 174, 174, 174, 174, 161, 161, 141,
	141, 141, 141, 141, 141, 141, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 208, 208, 208, 208, 208, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 210,
	211, 212, 204, 204, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 151, 151,
	151, 151, 151, 151, 203, 203, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 145, 145, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 144, 144, 144,
	144, 144, 144, 144, 144, 146, 146, 146, 146, 146,
	146, 146, 146, 142, 142, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 148, 148,
	148, 148, 148, 148, 148, 148, 160, 160, 149, 149,
	158, 158, 159, 159, 159, 150, 150, 150, 157, 157,
	157, 154, 154, 155, 155, 156, 156, 156, 152, 152,
	152, 153, 153, 153, 163, 184, 184, 184, 186, 186,
	187, 187, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 172, 172, 213, 213, 183, 183, 183,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 171,
	171, 181, 181, 182, 182, 179, 179, 179, 180, 166,
	166, 166, 166, 166, 167, 168, 168, 168, 168, 164,
	165, 206, 206, 206, 241, 241, 241, 241, 241, 241,
	242, 242, 207, 207, 169, 169, 170, 170, 177, 177,
	177, 177, 252, 252, 175, 175, 176, 176, 176, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 253, 253, 254, 254, 254, 254,
	254, 254, 254, 190, 188, 188, 189, 189, 17, 18,
	18, 18, 18, 18, 19, 19, 23, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	112, 112, 109, 109, 110, 110, 111, 111, 111, 113,
	113, 113, 138, 138, 138, 25, 25, 27, 27, 28,
	29, 26, 26, 26, 26, 26, 255, 30, 31, 31,
	32, 32, 32, 36, 36, 36, 34, 34, 35, 35,
	41, 41, 40, 40, 42, 42, 42, 42, 126, 126,
	126, 125, 125, 237, 237, 237, 237, 237, 44, 44,
	45, 45, 46, 46, 47, 47, 47, 226, 226, 225,
	225, 227, 227, 227, 227, 227, 227, 59, 59, 94,
	94, 94, 97, 97, 48, 48, 48, 48, 49, 49,
	50, 50, 51, 51, 133, 133, 132, 132, 132, 131,
	131, 53, 53, 53, 55, 54, 54, 54, 54, 56,
	56, 58, 58, 57, 57, 60, 60, 60, 60, 61,
	61, 95, 95, 43, 43, 43, 43, 43, 43, 43,
	108, 108, 63, 63, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 72, 72, 72, 72, 72, 72,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 39, 39, 73, 73, 73, 79, 74, 74, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 70, 70, 70, 70,
	70, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 256, 256, 71,
	71, 71, 71, 37, 37, 37, 37, 37, 136, 136,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 140, 140, 140, 140, 140, 140, 140,
	140, 83, 83, 38, 38, 81, 81, 82, 119, 119,
	84, 84, 80, 80, 80, 228, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 85, 85, 86,
	86, 238, 238, 239, 239, 240, 87, 87, 88, 88,
	89, 90, 90, 90, 91, 91, 91, 91, 92, 92,
	92, 65, 65, 65, 65, 65, 65, 93, 93, 93,
	93, 98, 98, 75, 75, 77, 77, 76, 78, 99,
	99, 103, 100, 100, 104, 104, 104, 104, 104, 20,
	21, 102, 102, 102, 128, 128, 128, 114, 114, 115,
	115, 107, 107, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 117, 117, 117, 118, 118, 123, 123,
	124, 124, 129, 129, 129, 130, 130, 229, 229, 229,
	230, 230, 230, 231, 231, 232, 233, 233, 234, 244,
	244, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 247,
	248, 134, 135, 135, 135,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 5, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 8, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 2, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 0, 3, 1, 1, 1, 1, 2, 13,
	12, 14, 12, 13, 12, 7, 8, 7, 5, 5,
	5, 11, 11, 9, 13, 14, 5, 8, 0, 3,
	0, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 1, 1, 1, 3, 1, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 1,
	4, 0, 3, 0, 2, 2, 0, 2, 2, 2,
	2, 2, 0, 2, 0, 3, 0, 1, 0, 2,
	1, 0, 2, 1, 3, 3, 0, 2, 4, 4,
	0, 1, 3, 3, 3, 3, 3, 2, 2, 3,
	1, 1, 1, 1, 1, 0, 2, 2, 3, 2,
	4, 2, 4, 2, 2, 3, 2, 3, 2, 7,
	9, 3, 3, 6, 9, 9, 6, 6, 8, 8,
	5, 8, 7, 4, 2, 4, 6, 2, 4, 2,
	1, 1, 1, 2, 1, 1, 1, 3, 3, 1,
	2, 1, 1, 2, 0, 4, 3, 4, 3, 3,
	3, 3, 3, 3, 3, 2, 4, 6, 2, 3,
	2, 3, 1, 3, 0, 2, 0, 3, 3, 2,
	2, 2, 2, 2, 3, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 3, 2,
	2, 2, 2, 1, 1, 1, 3, 3, 2, 2,
	2, 1, 1, 1, 1, 4, 4, 4, 4, 4,
	1, 5, 2, 2, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 3, 3, 0, 3,
	3, 0, 1, 0, 1, 0, 2, 1, 0, 3,
	3, 0, 1, 2, 6, 0, 1, 4, 1, 2,
	1, 3, 2, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 1, 0, 2, 5,
	2, 3, 3, 2, 3, 2, 2, 3, 4, 1,
	1, 1, 1, 1, 3, 3, 2, 2, 1, 2,
	5, 5, 8, 8, 13, 1, 1, 2, 2, 10,
	7, 0, 1, 1, 0, 1, 1, 1, 2, 2,
	1, 2, 0, 3, 0, 1, 1, 3, 0, 4,
	1, 3, 2, 1, 1, 2, 1, 1, 1, 6,
	11, 13, 13, 6, 7, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 6, 4, 2, 4, 2, 2, 2, 2, 3,
	1, 1, 0, 1, 0, 1, 0, 2, 2, 0,
	2, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 3, 4, 4, 5, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 0, 4, 1,
	3, 1, 1, 1, 1, 1, 1, 4, 8, 1,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 0, 4, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 6, 2, 2, 2, 2, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 2, 4, 5, 5, 6,
	4, 4, 4, 6, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 9, 7, 5, 4, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 2, 2,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	0, 2, 1, 3, 5, 3, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	2, 0, 3, 1, 3, 1, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 5, 3, 1,
	3, 1, 2, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 2,
	0, 2, 2, 0, 1, 4, 1, 3, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -245, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -23, -24, -25, -27, -28, -29,
	-26, -3, -4, 7, -33, 9, 10, 31, -22, 122,
	123, 125, 124, 155, 126, 148, 52, 206, 207, 209,
	210, 26, 149, 150, 153, 154, 6, -247, 8, 334,
	56, -246, 382, -87, 15, -32, 5, -30, -255, -30,
	-30, -30, -30, -173, 56, -241, -242, -202, 131, 164,
	326, 128, 144, 162, 163, 354, 129, 366, 367, 146,
	369, 76, -107, 132, 134, 129, 129, 130, 132, 326,
	128, 129, -57, -129, 59, -122, 61, 171, 345, 21,
	206, 219, 220, 211, 252, 240, 346, 169, 237, 241,
	291, 380, 69, 209, 300, 138, 175, 151, 232, 235,
	234, 226, 223, 28, 258, 352, 225, 141, 259, 263,
	270, 292, 341, 216, 217, 294, 256, 33, 143, 347,
	37, 159, 295, 261, 255, 250, 131, 254, 215, 249,
	41, 229, 265, 264, 266, 290, 243, 170, 269, 245,
	227, 244, 18, 154, 157, 260, 262, 224, 172, 136,
	161, 351, 296, 222, 158, 173, 153, 299, 368, 168,
	210, 293, 218, 302, 205, 204, 40, 276, 236, 213,
	228, 214, 140, 207, 166, 247, 160, 230, 231, 253,
	212, 248, 208, 162, 155, 301, 277, 353, 246, 242,
	238, 239, 167, 132, 164, 165, 283, 284, 285, 286,
	349, 297, 233, 278, 279, 177, 178, 179, 180, 181,
	182, 183, 34, 35, 342, 343, 129, 116, 241, 122,
	281, 130, 33, 161, -138, 129, -109, 165, 283, 284,
	285, 286, 59, 293, 292, 287, -129, 208, -134, -134,
	-134, -134, -134, -30, -2, -91, 17, 16, -5, -3,
	-247, 21, 22, -42, 107, -43, -129, -62, 78, -67,
	29, 59, -122, 61, 24, -66, -63, -80, -228, -78,
	-79, 116, 117, 105, 106, 113, 79, 118, -70, -68,
	-69, -71, -231, 62, -123, 60, 70, 63, 64, 65,
	66, 71, 72, 73, 303, -76, -247, 46, 47, 335,
	336, 337, 338, 344, 339, 81, 36, 38, 325, 333,
	332, 331, 329, 330, 327, 328, 379, 135, 326, 111,
	334, 267, -31, -107, -45, -46, -47, -48, -59, -79,
	-247, -57, 11, -52, -57, -100, -137, 208, -104, 293,
	292, -124, 303, -102, -123, -121, 291, 241, 290, 59,
	-122, 127, 185, 357, 77, 23, 25, 274, 280, 184,
	80, 116, 16, 81, 191, 366, 367, 115, 335, 122,
	50, 327, 328, 325, 189, 337, 338, 326, 281, 196,
	20, 29, 377, 10, 26, 149, 22, 109, 124, 186,
	84, 85, 152, 24, 150, 73, 192, 194, 19, 53,
	142, 11, 356, 13, 14, 371, 358, 135, 134, 96,
	370, 130, 48, 8, 118, 27, 378, 93, 44, 147,
	195, 46, 94, 17, 329, 330, 32, 344, 156, 111,
	51, 38, 372, 78, 373, 71, 54, 298, 190, 76,
	15, 49, 157, 374, 144, 193, 95, 125, 334, 47,
	187, 375, 128, 188, 6, 340, 31, 148, 45, 129,
	282, 83, 133, 72, 163, 5, 146, 9, 52, 55,
	331, 332, 333, 36, 82, 12, 145, 348, 74, -174,
	-161, -123, 61, 130, 130, 132, -236, 204, 132, -123,
	-115, 135, -115, -123, -123, -115, -57, 129, -115, 369,
	366, 367, 334, 129, -57, -57, -114, 135, 59, -114,
	-114, -114, -57, 119, -57, 59, 31, 326, 59, 161,
	129, 162, 132, -135, -247, -124, -135, -135, -135, 166,
	167, -135, -110, 288, 54, -135, -36, 42, 43, -248,
	58, -92, 19, 32, -43, -129, -88, -89, -43, -87,
	-2, 11, -126, 77, 76, 93, -125, 23, -123, 61,
	119, -43, -64, 96, 78, 94, 95, 80, 102, 101,
	112, 105, 106, 107, 108, 109, 110, 111, 103, 104,
	115, 379, 86, 87, 88, 89, 90, 91, 92, 97,
	98, 99, 100, -108, -247, -199, 379, -79, -247, 120,
	121, -67, -67, -67, -67, -67, -67, -67, -232, 268,
	-247, 61, 119, -2, -74, -43, -247, -247, -247, -247,
	-247, -247, -247, -247, -247, -83, -43, -247, 39, -256,
	-247, -256, -256, -256, -256, -256, -256, -256, -140, 116,
	241, 151, 232, -143, -142, 247, 246, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 240, 346, -247,
	-247, -247, -247, 68, -58, 27, -57, 31, 57, -53,
	-55, -54, -56, 44, 48, 50, 45, 46, 47, 51,
	-133, 23, -45, -247, -132, 157, -131, 23, -129, 61,
	-57, -52, -249, 57, 11, 55, 57, -100, 208, -101,
	-105, 294, 296, 86, 119, -128, -123, 61, 29, 31,
	58, 57, -162, -141, -145, -142, -147, -146, -148, -123,
	-143, -144, 240, 346, 237, 241, 238, 243, 244, 245,
	116, 242, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 246, 258, 31, 151, 230, 231, 232,
	235, 234, 236, 233, 259, 260, 261, 262, 263, 264,
	265, 266, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 222, 223, 225, 226, 227, 229, 228, -162,
	-123, 54, 203, -123, -115, 132, 205, -115, -195, 55,
	59, 78, 59, 54, -214, 54, 19, 184, 185, 197,
	-123, 23, -115, -57, -57, 298, -135, 133, -57, 24,
	54, -57, 59, 59, -130, -129, -121, -135, -135, -135,
	-135, -135, -135, -135, -135, -135, -135, -112, 282, 289,
	-57, -34, 22, 9, 96, 57, 18, 119, 57, -90,
	25, 26, -91, -248, -57, -43, -43, -72, 71, 78,
	72, 73, -125, 107, -130, -124, -121, -67, -73, -76,
	-79, 67, 96, 94, 95, 80, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -67, -67,
	-67, -136, 59, 61, -145, 231, -140, -143, 222, 223,
	225, 226, 227, 229, 228, 59, 241, 231, 271, 118,
	247, 256, 257, -141, -66, 61, -123, -66, -123, 383,
	-41, 22, -40, -74, -42, -43, -124, -248, 57, -248,
	-2, -40, -40, -43, -139, 116, 237, 151, 232, 226,
	256, 257, 243, 276, 230, 277, 219, 211, 216, 229,
	227, 213, 228, 212, 225, 222, 235, 234, 236, 247,
	238, 245, 244, 242, -43, -80, -67, -80, -123, -129,
	-40, -34, -81, -82, 82, -80, 19, -248, 239, -40,
	-41, -40, -40, -40, -96, 157, -57, -99, -103, -80,
	-46, -47, -47, -46, -47, 44, 44, 44, 49, 44,
	49, 44, -54, -129, -248, -60, 52, 134, 53, -247,
	-131, -96, 55, -45, -57, -104, -101, 57, 295, 297,
	298, 54, 74, -43, -124, -153, 116, 115, -177, -252,
	349, 35, -161, -163, -166, -164, -165, -178, -167, 138,
	136, 140, 141, 146, -171, 130, 147, 71, 78, -208,
	138, -211, 54, 274, 280, 136, 147, 146, 380, 69,
	139, 23, 356, 358, 29, 30, -156, 383, 268, -154,
	277, -149, 56, -149, -149, 239, -150, 56, -149, -150,
	-149, -150, -152, 241, -152, -152, -152, -152, 56, 56,
	-149, -149, -149, -149, -149, -158, 56, 224, -158, -158,
	-159, 56, -159, 54, 55, -57, -123, 54, -57, -115,
	-235, 377, 378, -57, -193, 348, -194, 59, -135, 24,
	-135, -57, -217, -215, 8, 9, 10, -57, 198, -214,
	-141, -57, -116, 127, 124, 125, -190, 123, 274, 241,
	69, 29, 15, 335, 157, 353, 59, 158, -57, -57,
	-57, -135, -111, 11, 96, -35, 45, 40, -43, -43,
	-130, -89, -92, 71, 72, 73, 119, -247, -73, -67,
	-67, -67, -39, 152, 77, 348, -248, 239, -157, 348,
	349, -156, -233, -234, 61, -248, -40, 57, -248, -248,
	-43, -248, -248, -248, 57, 55, 57, -149, 56, -149,
	-149, -159, -149, 217, -149, 217, -159, -149, -149, -149,
	-149, -149, 23, 57, 11, 57, 57, 11, 119, -248,
	-40, -84, -82, 84, -43, -248, -129, -248, -248, -248,
	-248, -65, 31, 36, -2, -247, -247, -61, 57, 12,
	86, -50, -49, 54, 55, -51, 54, -49, 44, 44,
	-226, 348, 130, 130, 130, -97, -123, -61, -45, -61,
	-105, -106, 299, 296, 302, 86, 59, -175, -124, 57,
	34, 56, -207, 54, 78, -169, -123, 147, -171, -171,
	59, -171, 59, 130, 59, 71, 19, -123, 9, 147,
	147, -207, 61, -57, 56, -204, 357, 16, 56, -209,
	56, -210, 61, 62, 63, 64, 71, -151, 70, -63,
	269, -70, 325, 328, 327, 270, -123, -129, -212, 63,
	384, -155, 278, 63, -152, -152, -149, -152, 63, 59,
	-152, -152, -153, 31, -153, -153, -153, -153, -160, 61,
	-160, -157, -157, 63, -158, 63, -57, -123, 56, 54,
	-57, 23, -57, 23, -192, -191, -124, -197, 23, 54,
	57, 198, -214, -217, 55, -134, -127, 138, -166, -254,
	164, 146, 137, 142, 141, 59, 136, 140, 157, -196,
	164, 137, 138, 142, 141, 59, 130, 147, 136, 140,
	157, 146, -117, -118, 133, 23, 130, 147, 157, 127,
	-135, -113, 94, 12, -129, -129, -40, 41, 119, 107,
	-124, -41, -39, 77, -67, -67, 230, 230, 230, 384,
	57, -199, -248, -42, -237, 381, -139, 116, 237, 151,
	232, 226, 256, 243, 276, 230, 277, 219, 211, 216,
	229, 227, 213, 228, 212, 225, 222, 235, 234, 236,
	247, 238, 245, 244, 242, -136, -43, -152, 59, -139,
	-67, -67, -67, -67, -67, -124, 345, -87, 85, -43,
	83, -98, 54, -99, -75, -77, -76, -247, -2, -93,
	-123, -97, -87, -103, -43, -43, -43, 56, -43, 56,
	-247, -247, -247, -248, 57, -87, -61, 296, 300, 301,
	-43, 86, -124, -177, -182, -179, -123, 147, 10, 9,
	19, 142, 136, 380, 59, 59, 59, -206, 146, 366,
	367, 368, -208, 380, -151, 270, -247, 56, -43, 23,
	29, 63, -209, 56, -210, -199, 379, -199, -247, -149,
	56, -149, 56, 56, 119, 58, -153, -153, -152, -153,
	58, 58, -153, -153, 59, 116, 58, 57, 58, 57,
	58, 57, 56, 55, 54, -181, -182, -70, -123, -57,
	56, -2, 23, -2, 57, 86, -198, 19, 172, 173,
	-57, -215, -94, -123, 147, -217, 54, -123, -253, 130,
	147, -123, -134, -123, -134, -123, -57, -134, -123, 138,
	-166, 61, -43, -44, 11, -248, -67, 279, 279, 279,
	-234, -247, -248, -248, -248, -248, -248, 19, 57, -248,
	57, 19, -247, -38, 340, -43, 28, -98, 57, -248,
	-248, -248, 57, 119, -248, -91, -94, -225, -227, 371,
	372, 373, 374, 375, 376, -94, -94, -94, -132, -123,
	-91, -176, -124, 61, 63, 58, 57, -149, -180, 272,
	-149, -168, 168, 169, 31, 170, -168, 368, 147, 147,
	-247, -206, -207, -43, -94, 58, 56, 358, 57, 58,
	-209, 61, 269, 58, -123, -248, 58, 58, 58, -124,
	-153, -152, 61, -152, 63, 63, -181, -123, -57, 58,
	56, -94, -2, -191, -176, 133, 21, 6, 8, 9,
	10, 19, -120, 57, 23, -57, -250, 56, -123, 146,
	56, 27, -123, -61, -45, -248, -238, -87, 157, -67,
	-67, -67, -67, -67, -248, 61, 147, -77, 36, -2,
	-247, -123, -123, 58, 58, 57, -248, -248, -248, -60,
	-184, -186, 348, -185, 55, 143, 69, 177, 178, 179,
	180, 181, 182, 183, -179, -90, -207, 54, 71, 171,
	-207, 54, -169, -123, -206, -43, -247, -248, 58, 354,
	355, -43, 56, 63, 58, -153, -153, 58, 58, 58,
	56, 56, -95, 370, -181, 58, -170, -123, 186, -119,
	82, -123, -218, -220, -7, -9, -8, -11, -10, -12,
	-13, -14, -20, -3, 20, 31, 190, 191, 196, 192,
	145, 135, -21, -120, 19, -251, -123, 105, 86, 61,
	-161, 57, 56, 56, -94, -247, 136, -85, 13, -248,
	-87, -248, 16, -248, -248, -248, -248, -37, 96, 348,
	9, -75, -2, 119, -227, -226, -183, 54, -185, 348,
	56, 350, 59, -172, 86, 61, 86, 86, 86, 86,
	86, 86, 86, 9, 10, 56, 56, -248, -43, -203,
	170, 54, 58, -205, 58, 58, -95, -181, -182, -61,
	56, 58, -61, -200, 57, 55, 187, 206, -43, -220,
	-87, -223, -123, -222, -244, -243, 304, 305, 306, 307,
	308, 309, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 323, 324, -123, -123, -123,
	-216, 38, 193, 194, 195, -62, -67, -43, -62, -119,
	186, 58, -251, -123, -251, -251, -251, -251, -251, -182,
	-182, 58, -188, -189, 157, 147, -86, 14, 16, -248,
	-239, -240, -43, -248, 346, 51, 351, -99, -248, -123,
	-123, -187, -185, -123, 63, -213, 54, 74, 63, -213,
	-213, -213, -213, -213, -168, -168, -170, -182, -203, -248,
	341, 10, 9, 354, 355, 58, 207, 360, 361, 156,
	362, 170, 363, 364, -61, 58, 58, -184, -94, -95,
	-184, -201, 348, -123, -43, -221, -220, 206, -219, -220,
	-91, 57, -224, -141, 188, -213, 57, -123, 11, 11,
	11, 11, -220, 206, 83, 206, 206, 187, 58, 58,
	-195, -248, 57, -123, 56, -43, -74, 57, 41, 347,
	352, -247, 58, 57, -207, -207, 58, 58, -203, -168,
	-168, 348, 63, 16, 63, 63, 63, 63, 361, 156,
	363, 16, -184, -61, -184, -183, 58, -61, -183, 380,
	-220, -220, 382, -92, -222, -123, 189, -243, 27, -219,
	-218, -219, -219, -229, 199, 78, -193, -189, 36, -182,
	-240, 41, -123, -185, 139, -184, 63, 63, 365, -129,
	-183, -184, -184, -43, 382, -220, 85, 19, -123, 85,
	382, 382, 85, 382, -230, 200, 199, 159, 58, 348,
	-248, -57, -183, 119, -183, 85, -2, 85, 84, 85,
	202, 201, 160, 351, 56, -124, 135, 206, -247, 352,
	-170, -219, -67, 156, 58, 85, -248, -248,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 836, 0, 536, 536, 536, 536, 536, 0, -2,
	891, 0, 0, 0, 0, -2, 526, 527, 0, 529,
	530, 1221, 1221, 1221, 1221, 1221, 536, 0, 32, 33,
	1219, 1, 3, 844, 0, 0, 540, 923, 538, 891,
	0, 0, 0, 88, 170, 0, 0, 0, 0, 0,
	889, 889, 0, 0, 0, 0, 889, 415, 416, 417,
	420, 0, 0, 0, 892, 0, 887, 0, 887, 887,
	887, 0, 485, 623, 912, 913, 914, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 0, 0, 0, 0,
	1222, 1222, 1222, 1222, 0, 1222, 514, 503, 505, 506,
	507, 508, 1222, 523, 524, 513, 525, 528, 531, 532,
	533, 534, 535, 543, 26, 848, 923, 923, 836, 28,
	0, 541, 542, 0, 554, 558, 0, 633, 923, 638,
	640, -2, -2, -2, 0, 679, 680, 681, 682, 683,
	684, 923, 923, 923, 923, 923, 923, 923, 711, 712,
	713, 714, 0, 818, 812, 820, 821, 822, 823, 824,
	825, 826, 642, 643, 0, 868, 923, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, 747, 747,
	747, 747, 747, 747, 747, 747, 0, 0, 0, 0,
	0, 924, 537, 0, 0, 570, 572, 573, 574, 604,
	0, 606, 0, 0, 40, 44, 0, 1185, 872, -2,
	-2, 0, 0, 0, 910, 911, -2, 1092, -2, 908,
	909, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 0,
	171, 185, 185, 0, 0, 889, 0, 0, 889, 158,
	0, 0, 0, 0, 0, 0, 0, 889, 0, 421,
	418, 419, 167, 0, 1222, 0, 0, 0, 0, 0,
	0, 0, 484, 0, 486, 1222, 1222, 1222, 1222, 1222,
	1222, 1222, 1222, 495, 1223, 1224, 496, 497, 498, 1222,
	1222, 500, 0, 515, 0, 509, 546, 544, 545, 27,
	1220, 22, 0, 0, 845, 0, 837, 838, 841, 844,
	26, 0, 555, 923, 923, 0, 559, 0, 561, 562,
	0, 636, 923, 0, 0, 923, 923, 923, 923, 923,
	923, 923, 923, 923, 923, 923, 923, 923, 923, 923,
	0, 0, 660, 661, 662, 663, 664, 665, 666, 667,
	668, 669, 670, 639, 0, 817, 185, 653, 0, 0,
	0, 702, 703, 704, 705, 706, 707, 708, 715, 0,
	-2, 819, 0, 26, 0, 677, 923, 923, 923, 923,
	923, 923, 0, 923, 546, 0, 802, 0, 0, 738,
	0, 739, 740, 741, 742, 743, 744, 745, 746, 793,
	0, 795, 796, 797, 798, 799, 800, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 293, 294, 923,
	-2, 923, 923, 539, 42, 0, 622, 0, 0, 0,
	0, 0, 0, 611, 0, 0, 614, 0, 0, 0,
	0, 605, 0, 0, 625, 1147, 607, 0, 609, 610,
	-2, 0, 0, 0, 38, 39, 0, 45, 1185, 47,
	73, 0, 0, 923, 0, 351, 884, 885, 886, 882,
	428, 0, 177, 345, 341, 180, 181, 182, 183, 184,
	328, 266, -2, -2, -2, -2, -2, -2, -2, -2,
	328, -2, -2, -2, -2, -2, 348, -2, -2, -2,
	-2, -2, 314, -2, 1107, 0, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 178,
	0, 0, 0, 0, 0, 889, 0, 0, 161, 0,
	1222, 0, 1222, 0, 0, 0, 117, 118, 119, 0,
	0, 185, 0, 168, 0, 0, 451, 0, 479, 888,
	0, 1222, 482, 483, 624, 915, 916, 487, 488, 489,
	490, 491, 492, 493, 494, 499, 502, 516, 510, 511,
	504, 548, 547, 849, 0, 923, 923, 0, 923, 840,
	842, 843, 848, 29, 24, 634, 635, 637, 654, 0,
	656, 658, 560, 556, 0, 813, -2, 644, 645, 673,
	674, 675, 0, 923, 923, 923, 671, 649, 0, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 699, 758, 759, 700, 0, 710, 328, 330, 330,
	330, 332, 332, 283, 284, 0, 328, 328, 259, 260,
	-2, -2, -2, 345, 697, 256, 0, 698, 709, 0,
	0, 923, 0, 0, 552, 558, 815, 676, 923, 867,
	26, 0, 0, 0, 0, -2, -2, -2, -2, -2,
	-2, 767, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 0, 681, 0, 0, 812, 0,
	0, 923, 810, 805, 923, 0, 0, 748, 794, 0,
	0, 551, 0, 0, 0, 0, 621, 629, 869, 0,
	571, 600, 602, 0, 597, 612, 613, 615, 0, 617,
	0, 619, 620, 575, 576, 577, 0, 0, 0, 0,
	608, 629, 0, 629, 41, 873, 46, 0, 0, 76,
	77, 874, 875, 876, 0, 878, 352, 0, 169, 430,
	0, 433, 172, 173, 174, 175, 176, 0, 422, -2,
	1152, 1175, 1110, 0, 0, 389, 390, 187, 0, 189,
	0, 191, 0, 193, 194, 0, 196, 198, 422, 0,
	0, 0, 0, 0, 0, 0, 186, 0, 347, 343,
	342, 265, 0, 348, 348, 328, 348, 0, 348, 348,
	302, 303, 351, 0, 351, 351, 351, 351, 0, 0,
	338, 338, 288, 289, 290, 277, 0, 330, 279, 280,
	281, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	83, 84, 85, 0, 98, 0, 159, 160, 99, 890,
	100, 143, 0, 125, 121, 122, 123, 0, 120, 0,
	106, 0, 1221, 156, 0, 903, 452, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 0, 0, 478,
	1222, 481, 519, 0, 0, 923, 549, 0, 846, 847,
	0, 839, 23, 655, 657, 659, 0, -2, 646, 671,
	650, 0, 647, 923, 923, 0, 641, -2, 258, 0,
	0, 264, 0, 926, 256, 716, 0, 923, 563, 720,
	678, -2, 721, 722, 0, 0, 923, 760, 1219, 348,
	764, 765, 768, 770, 771, 773, 778, 784, 785, 788,
	791, 792, 0, 923, 923, 923, 923, 923, 0, 0,
	836, 0, 806, 923, 0, 736, 737, 749, 750, 751,
	752, 861, 0, 0, -2, 0, 0, 836, 0, 923,
	923, 594, 601, 923, 0, 595, 923, 596, 616, 618,
	587, 0, 0, 0, 0, 0, 592, 836, 629, 37,
	74, 75, 0, 0, 81, 923, 353, 0, 434, 428,
	432, 0, 399, 0, 0, 0, 425, 380, 0, 0,
	383, 0, 385, -2, 411, 188, 0, 0, 0, 195,
	197, 0, 201, 202, 923, 0, 232, 0, 0, 214,
	0, 217, -2, 220, 221, 222, 256, 224, 225, 226,
	1141, 229, 328, 328, 252, 1113, 0, 0, 230, 231,
	346, 179, 344, 0, 351, 351, 348, 351, 0, 0,
	351, 351, 304, 0, 305, 306, 307, 308, 0, 326,
	0, 286, 287, 0, 278, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 163, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 439, 0, 424, 443, 1221,
	0, 157, 466, 467, 468, 469, 470, 471, 472, 1221,
	0, 453, 454, 455, 456, 457, 458, 459, 460, 461,
	462, 463, 0, 1221, 904, 905, 906, 907, 0, 0,
	480, 501, 0, 923, 517, 518, 568, 850, 0, 557,
	814, 0, 648, 923, 672, 651, 0, 0, 0, 925,
	0, 928, 717, 553, 718, 0, 0, 328, 328, 763,
	328, 332, 766, 328, 769, 328, 772, 774, 775, 776,
	777, 332, 779, 780, 781, 782, 783, 328, 328, 786,
	787, 328, 790, 328, 328, 0, 0, 761, 762, 0,
	0, 0, 0, 0, 0, 813, 0, 803, 735, 811,
	923, 30, 0, 861, 851, 863, 865, 923, 26, 0,
	857, 0, 844, 870, 630, 871, 598, 0, 603, 0,
	0, 0, 0, 606, 0, 844, 36, 78, 79, 80,
	877, 0, 435, 431, 0, 393, 328, 328, 0, 0,
	0, 0, 0, 0, 381, 382, 384, 387, 411, 412,
	413, 213, 190, 422, 192, 0, 923, 0, 0, 0,
	233, 0, 0, 0, 0, 219, 185, 223, 0, 248,
	0, 250, 0, 0, 0, 329, 295, 296, 351, 297,
	336, 337, 298, 299, 349, 350, 348, 0, 348, 0,
	333, 0, 0, 0, 0, 0, 391, 392, 328, 0,
	0, -2, 0, -2, 0, 0, 0, 0, 144, 145,
	141, 126, 124, 589, 590, 0, 0, 108, 0, 464,
	465, 425, 445, 0, 446, 448, 449, 450, 0, 424,
	444, 520, 521, 629, 0, 719, 652, 701, 339, 340,
	927, 0, 723, 726, 724, 725, 727, 923, 923, 730,
	923, 923, 923, 0, 0, 807, 0, 31, 0, 866,
	-2, 0, 0, 0, 43, 34, 0, 0, 579, 581,
	582, 583, 584, 585, 586, 0, 0, 0, 625, 593,
	35, 429, 436, 437, 438, 355, 0, 841, 397, 398,
	396, 422, 405, 406, 0, 0, 422, 423, 424, 411,
	923, 388, 0, 0, 0, 0, 923, 210, 0, 215,
	0, 256, 0, 218, 184, 227, 249, 251, 253, 0,
	301, 351, 327, 351, 0, 0, 0, 0, 0, 631,
	0, 0, -2, 164, 165, 0, 147, 148, 149, 150,
	151, 0, 808, 0, 0, 141, 107, 110, 0, 0,
	0, 0, 425, 827, 569, 564, 0, 0, 0, 0,
	0, 0, 0, 753, 734, 804, 0, 864, 0, -2,
	0, 859, 858, 599, 578, 0, 626, 627, 628, 577,
	377, 356, 0, 358, 0, 373, 0, 0, 0, 0,
	0, 0, 0, 0, 394, 395, 400, 0, 407, 408,
	401, 0, 0, 425, 0, 0, 923, 254, 203, 206,
	207, 0, 234, 0, 0, 316, 317, 331, 334, 631,
	0, 0, 629, 0, 0, 629, 152, 426, 0, 0,
	923, 591, 103, 127, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 836, 0, 536, 0, 0, 0, 60,
	923, 923, 879, 808, 0, 0, -2, 110, 110, -2,
	110, 110, 0, 0, 0, 0, 0, 829, 0, 565,
	0, 566, 923, 729, 728, 731, 732, 0, 0, 0,
	0, 854, 26, 0, 580, 588, 354, 0, 359, 0,
	0, 0, 362, 0, 374, 364, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 199,
	0, 0, 0, 0, 212, 216, 629, 0, 0, 355,
	0, 631, 355, 154, 0, 923, 142, 0, 809, 128,
	844, 48, -2, 50, 0, 929, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 55, 56, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 633, 0,
	0, 109, 111, -2, 112, 113, 114, 115, 116, 0,
	0, 158, 0, 474, 0, 0, 25, 923, 923, 567,
	832, 833, 835, 733, 0, 0, 0, 862, -2, 860,
	378, 0, 360, 365, 363, 366, 375, 376, 367, 368,
	369, 370, 371, 372, 422, 422, 0, 0, 410, 254,
	255, 0, 0, 208, 209, 211, 0, 0, 0, 0,
	0, 0, 245, 0, 355, 629, 355, 377, 0, 629,
	377, 101, 0, 427, 153, 102, 139, 0, 0, 67,
	848, 0, 0, 52, 54, 880, 0, 58, 61, 62,
	63, 64, 65, 0, 0, 0, 0, 142, 440, 917,
	161, 473, 0, 0, 0, 830, 828, 923, 754, 0,
	757, 0, 357, 0, 402, 403, 0, 355, 200, 204,
	205, 0, 236, 0, 238, 239, 240, 241, 242, 243,
	244, 0, 377, 355, 92, 90, 632, 355, 94, 923,
	0, 68, 0, 138, 51, 185, 0, 930, 0, 0,
	0, 0, 0, 920, 918, 0, 447, 475, 0, 0,
	834, 755, 0, 361, 0, 377, 235, 237, 246, 0,
	89, 93, 377, 155, 0, 69, 104, 0, 59, 66,
	0, 0, 71, 0, 442, 0, 919, 0, 441, 0,
	379, 0, 409, 0, 91, 140, -2, 0, 0, 105,
	921, 922, 0, 0, 0, 247, 70, 0, 923, 756,
	0, 0, 0, 0, 404, 72, 476, 477,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 382,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 383, 3, 384, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:421
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:426
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:427
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:431
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:454
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:462
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:468
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:475
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:481
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:485
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:491
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:495
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:502
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:514
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
			yyVAL.str = InsertStr
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:530
		{
			yyVAL.str = ReplaceStr
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:536
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:542
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:546
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:550
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:555
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:556
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:560
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:564
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:569
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:573
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:579
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:583
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:587
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:591
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:597
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:601
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:614
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:618
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:624
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:629
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:633
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:639
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:646
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:653
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:660
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:668
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:678
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:682
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:686
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:690
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:694
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:700
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:707
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:717
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:721
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:725
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:732
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:741
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:749
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:760
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:764
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:770
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:774
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:778
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:784
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:788
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:792
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:796
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:801
		{
			yyVAL.str = ""
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:805
		{
			yyVAL.str = yyDollar[3].str
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:811
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:815
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:821
		{
			yyVAL.str = SessionStr
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:825
		{
			yyVAL.str = GlobalStr
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:831
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 89:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:836
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:856
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 91:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:876
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 92:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:897
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 93:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:913
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 94:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:930
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:949
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:957
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:       CreateSqlSecurityStr,
				SecurityType: yyDollar[3].str,
				Name:         yyDollar[6].tableName.ToViewName(),
				Definition:   yyDollar[8].selStmt,
			}}
		}
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:966
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:974
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:982
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:986
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:990
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 102:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1002
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 103:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1013
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 104:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1024
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      yyDollar[11].blockStatement,
			}}
		}
	case 105:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:1034
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[4].colIdent,
				TableName: yyDollar[8].tableName,
				Time:      yyDollar[5].str,
				Event:     yyDollar[6].strs,
				Body:      yyDollar[12].blockStatement,
			}}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1045
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 107:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1056
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1061
		{
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1062
		{
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1066
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1067
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1068
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1069
		{
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1070
		{
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1071
		{
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1072
		{
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1076
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1080
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1084
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1088
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1094
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1098
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1102
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1107
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1113
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1117
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1123
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1127
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1133
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1145
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1157
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1164
		{
			yyVAL.empty = struct{}{}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1166
		{
			yyVAL.empty = struct{}{}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1169
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1173
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1177
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1182
		{
			yyVAL.bytes = nil
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1186
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1190
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1194
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1198
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1202
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1207
		{
			yyVAL.expr = nil
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1211
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1216
		{
			yyVAL.expr = nil
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1220
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1225
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1229
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1234
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1238
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1244
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1249
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1254
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1260
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1265
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1271
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1276
		{
			yyVAL.bytes = nil
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1280
		{
			yyVAL.bytes = nil
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1286
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1293
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1299
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1303
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1308
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1312
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1316
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1320
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1324
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1330
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1335
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1341
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1352
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1357
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1363
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1376
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1381
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1386
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1391
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1397
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1402
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1407
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1412
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1417
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1422
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1427
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1432
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1437
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1446
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1456
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1461
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1466
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1473
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1480
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1488
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1493
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 208:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1498
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 209:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1503
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1509
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 211:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1515
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 212:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1521
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1527
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1534
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1538
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 216:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1542
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1546
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1550
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1556
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1560
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1564
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1568
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1572
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1576
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1580
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1584
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1588
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1592
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1598
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1604
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1610
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1616
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1620
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1625
		{
			yyVAL.sequence = &Sequence{}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1629
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1634
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1639
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1644
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1649
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1654
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1659
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1664
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1669
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1674
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1679
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1684
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1689
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1696
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1700
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1704
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1708
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1712
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1716
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1721
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1725
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1730
		{
			yyVAL.bytes = nil
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1744
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1749
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 317:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1998
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2002
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2006
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2010
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2016
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2021
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2026
		{
			yyVAL.optVal = nil
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2030
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2035
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 331:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2039
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2047
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2051
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2057
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2065
		{
			yyVAL.optVal = nil
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2069
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2073
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2082
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2086
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2090
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2095
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2099
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2104
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2108
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2113
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2117
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2121
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2126
		{
			yyVAL.str = ""
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2130
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2134
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2139
		{
			yyVAL.str = ""
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2143
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2147
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2153
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2158
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2162
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2166
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2172
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2176
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2182
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2186
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2192
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2196
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2201
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2205
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2209
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2213
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2217
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2221
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2225
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2229
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2233
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2239
		{
			yyVAL.str = ""
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2243
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2249
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2253
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2259
		{
			yyVAL.indexPartition = nil
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2263
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2267
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2273
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2277
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2281
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2285
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2289
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2293
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2297
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2301
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2305
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2311
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2315
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2321
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2326
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2332
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2336
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2342
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2347
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2351
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2361
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2366
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2373
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 402:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2380
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 403:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2387
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 404:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2396
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2408
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2412
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2416
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2420
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 409:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2426
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 410:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2437
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2447
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2451
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2455
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2461
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2465
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2469
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2473
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2477
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2481
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2487
		{
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2488
		{
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2492
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2496
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2501
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2508
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2512
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2519
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2523
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2529
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2533
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2538
		{
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2539
		{
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2543
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2547
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2553
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2557
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2561
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2567
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 440:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2571
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 441:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2585
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 442:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2599
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2618
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 444:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2627
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 445:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2636
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2640
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 447:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2644
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 448:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2657
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 449:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2667
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 450:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2672
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2677
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 452:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2681
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 473:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2713
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2719
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2723
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2729
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 477:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2733
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 478:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2739
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2745
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2753
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 481:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2758
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2766
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2770
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2776
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2780
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2785
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2791
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2795
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2799
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2804
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2808
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2812
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2816
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2820
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2824
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2828
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2832
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2836
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2840
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2844
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 501:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2848
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2858
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2862
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2866
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2870
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2874
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2878
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2882
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2892
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2898
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2902
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2908
		{
			yyVAL.str = ""
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2912
		{
			yyVAL.str = "extended "
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2918
		{
			yyVAL.str = ""
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2922
		{
			yyVAL.str = "full "
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2928
		{
			yyVAL.str = ""
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2932
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2936
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2942
		{
			yyVAL.showFilter = nil
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2946
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2950
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2956
		{
			yyVAL.str = ""
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2960
		{
			yyVAL.str = SessionStr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2964
		{
			yyVAL.str = GlobalStr
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2970
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2974
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2980
		{
			yyVAL.statement = &Begin{}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2984
		{
			yyVAL.statement = &Begin{}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2990
		{
			yyVAL.statement = &Commit{}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2996
		{
			yyVAL.statement = &Rollback{}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3002
		{
			yyVAL.statement = &OtherRead{}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3006
		{
			yyVAL.statement = &OtherRead{}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3010
		{
			yyVAL.statement = &OtherRead{}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3014
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3018
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3023
		{
			setAllowComments(yylex, true)
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3027
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3033
		{
			yyVAL.bytes2 = nil
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3037
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3043
		{
			yyVAL.str = UnionStr
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3047
		{
			yyVAL.str = UnionAllStr
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3051
		{
			yyVAL.str = UnionDistinctStr
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3056
		{
			yyVAL.str = ""
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3060
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3064
		{
			yyVAL.str = SQLCacheStr
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3069
		{
			yyVAL.str = ""
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3073
		{
			yyVAL.str = DistinctStr
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3078
		{
			yyVAL.str = ""
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3082
		{
			yyVAL.str = StraightJoinHint
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3087
		{
			yyVAL.selectExprs = nil
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3091
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3097
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3101
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3107
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3111
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3115
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 557:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3119
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3124
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3128
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3132
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3139
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3144
		{
			yyVAL.overExpr = nil
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3148
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3152
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3156
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3160
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy, OrderBy: yyDollar[4].orderBy}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3165
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3169
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3175
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3179
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3189
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3193
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3197
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3202
		{
			yyVAL.strs = []string{}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3206
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3212
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3216
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3222
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3226
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3230
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3234
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3238
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3242
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3248
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 588:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3252
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3258
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3263
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3267
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3273
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3277
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3290
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3294
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3298
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3302
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3308
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3310
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3314
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3316
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3320
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3322
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3325
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3327
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3330
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3334
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3338
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3345
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3351
		{
			yyVAL.str = JoinStr
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3355
		{
			yyVAL.str = JoinStr
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3359
		{
			yyVAL.str = JoinStr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3365
		{
			yyVAL.str = StraightJoinStr
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3371
		{
			yyVAL.str = LeftJoinStr
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3375
		{
			yyVAL.str = LeftJoinStr
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3379
		{
			yyVAL.str = RightJoinStr
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3383
		{
			yyVAL.str = RightJoinStr
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3389
		{
			yyVAL.str = NaturalJoinStr
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3393
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3403
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3407
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3413
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3417
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3422
		{
			yyVAL.indexHints = nil
		}
	case 626:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3426
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 627:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3430
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 628:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3434
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3439
		{
			yyVAL.expr = nil
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3443
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3448
		{
			yyVAL.columns = nil
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3452
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3458
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3462
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3466
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3470
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3474
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3478
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3482
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3488
		{
			yyVAL.str = ""
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3492
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3498
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3502
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3508
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3512
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3516
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3520
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3524
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3528
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3532
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3536
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 652:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3540
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3544
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3550
		{
			yyVAL.str = IsNullStr
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3554
		{
			yyVAL.str = IsNotNullStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3558
		{
			yyVAL.str = IsTrueStr
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3562
		{
			yyVAL.str = IsNotTrueStr
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3566
		{
			yyVAL.str = IsFalseStr
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3570
		{
			yyVAL.str = IsNotFalseStr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3576
		{
			yyVAL.str = EqualStr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3580
		{
			yyVAL.str = LessThanStr
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3584
		{
			yyVAL.str = GreaterThanStr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3588
		{
			yyVAL.str = LessEqualStr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3592
		{
			yyVAL.str = GreaterEqualStr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3596
		{
			yyVAL.str = NotEqualStr
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3600
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3604
		{
			yyVAL.str = PosixRegexStr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3608
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3612
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3616
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3621
		{
			yyVAL.expr = nil
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3625
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3631
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3635
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3639
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3645
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3651
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3655
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3661
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3665
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3669
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3673
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3677
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3681
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3685
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3689
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3693
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3697
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3701
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3705
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3709
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3713
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3717
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3721
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3725
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3729
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3733
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3737
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3741
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3745
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 701:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3749
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3753
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3757
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3761
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3769
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3783
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3787
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3791
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3799
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3807
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3815
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3825
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3829
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 718:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3833
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 719:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3837
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3841
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3851
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3855
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 723:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3859
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 724:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3863
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 725:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3867
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 726:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3871
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 727:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3875
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 728:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3879
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 729:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3883
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 730:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3887
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 731:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3891
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 732:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3895
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 733:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3899
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 734:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3903
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 735:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3907
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3911
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3916
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3926
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3930
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3934
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3938
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3943
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3948
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3953
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3958
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3962
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3976
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3980
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3984
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3988
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3994
		{
			yyVAL.str = ""
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3998
		{
			yyVAL.str = BooleanModeStr
		}
	case 755:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4002
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 756:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:4006
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4010
		{
			yyVAL.str = QueryExpansionStr
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4016
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4020
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4026
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4030
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4034
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4038
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4042
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4046
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4052
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4056
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4060
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4064
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4068
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4072
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4076
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4080
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4084
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4088
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4092
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4096
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4100
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4104
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4108
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4112
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4116
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4120
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4124
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4128
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4132
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4136
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4140
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4144
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4148
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4152
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4156
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4162
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4166
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4170
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4174
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4178
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4182
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4186
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4190
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4195
		{
			yyVAL.expr = nil
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4199
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 803:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4204
		{
			yyVAL.str = string("")
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4208
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4214
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4218
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4224
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4229
		{
			yyVAL.empty = struct{}{}
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4231
		{
			yyVAL.empty = struct{}{}
		}
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4234
		{
			yyVAL.expr = nil
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4238
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4244
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4248
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 814:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4252
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4258
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4264
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4268
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4272
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4277
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4282
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4286
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4290
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4294
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4298
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4302
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4306
		{
			yyVAL.expr = &NullVal{}
		}
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4311
		{
			yyVAL.exprs = nil
		}
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4315
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4320
		{
			yyVAL.expr = nil
		}
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4324
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 831:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4329
		{
			yyVAL.partitionBy = nil
		}
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4333
		{
			yyVAL.partitionBy = yyDollar[3].partitionBy
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4339
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4343
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4349
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4354
		{
			yyVAL.orderBy = nil
		}
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4358
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4364
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 839:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4368
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4374
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4379
		{
			yyVAL.str = AscScr
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4383
		{
			yyVAL.str = AscScr
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4387
		{
			yyVAL.str = DescScr
		}
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4392
		{
			yyVAL.limit = nil
		}
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4396
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 846:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4400
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 847:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4404
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4409
		{
			yyVAL.str = ""
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4413
		{
			yyVAL.str = ForUpdateStr
		}
	case 850:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4417
		{
			yyVAL.str = ShareModeStr
		}
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4430
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4434
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4438
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 854:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4443
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 855:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4447
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 856:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4451
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4458
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4462
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4466
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 860:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4470
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4475
		{
			yyVAL.updateExprs = nil
		}
	case 862:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4479
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4485
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4489
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4495
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4499
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4505
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4511
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4521
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4525
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4531
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4537
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 873:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4541
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4547
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4551
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 876:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4555
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 877:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4560
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4564
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4570
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 880:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4576
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4583
		{
			yyVAL.bytes = []byte("charset")
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4590
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4594
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4598
		{
			yyVAL.expr = &Default{}
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4603
		{
			yyVAL.byt = 0
		}
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4605
		{
			yyVAL.byt = 1
		}
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4608
		{
			yyVAL.empty = struct{}{}
		}
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4610
		{
			yyVAL.empty = struct{}{}
		}
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4613
		{
			yyVAL.str = ""
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4615
		{
			yyVAL.str = IgnoreStr
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4619
		{
			yyVAL.empty = struct{}{}
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4621
		{
			yyVAL.empty = struct{}{}
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4623
		{
			yyVAL.empty = struct{}{}
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4625
		{
			yyVAL.empty = struct{}{}
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4627
		{
			yyVAL.empty = struct{}{}
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4629
		{
			yyVAL.empty = struct{}{}
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4631
		{
			yyVAL.empty = struct{}{}
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4633
		{
			yyVAL.empty = struct{}{}
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4635
		{
			yyVAL.empty = struct{}{}
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4637
		{
			yyVAL.empty = struct{}{}
		}
	case 903:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4640
		{
			yyVAL.empty = struct{}{}
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4642
		{
			yyVAL.empty = struct{}{}
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4644
		{
			yyVAL.empty = struct{}{}
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4648
		{
			yyVAL.empty = struct{}{}
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4650
		{
			yyVAL.empty = struct{}{}
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4654
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4658
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4665
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4671
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4675
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4680
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4687
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 917:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4693
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4697
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4701
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 920:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4707
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4711
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4715
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 923:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4721
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4725
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 925:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4732
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4739
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 927:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4743
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4750
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4756
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 930:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4760
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5076
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5085
		{
			decNesting(yylex)
		}
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:5090
		{
			forceEOF(yylex)
		}
	case 1222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:5095
		{
			forceEOF(yylex)
		}
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5099
		{
			forceEOF(yylex)
		}
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5103
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
