// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const SCHEMA = 57457
const TABLE = 57458
const INDEX = 57459
const MATERIALIZED = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const PRIMARY = 57465
const COLUMN = 57466
const CONSTRAINT = 57467
const REFERENCES = 57468
const SPATIAL = 57469
const FULLTEXT = 57470
const FOREIGN = 57471
const KEY_BLOCK_SIZE = 57472
const POLICY = 57473
const WHILE = 57474
const UNIQUE = 57475
const KEY = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const EXEC = 57485
const EXECUTE = 57486
const MAXVALUE = 57487
const PARTITION = 57488
const REORGANIZE = 57489
const LESS = 57490
const THAN = 57491
const PROCEDURE = 57492
const TRIGGER = 57493
const TYPE = 57494
const RETURN = 57495
const STATUS = 57496
const VARIABLES = 57497
const RESTRICT = 57498
const CASCADE = 57499
const NO = 57500
const ACTION = 57501
const PERMISSIVE = 57502
const RESTRICTIVE = 57503
const PUBLIC = 57504
const CURRENT_USER = 57505
const SESSION_USER = 57506
const PAD_INDEX = 57507
const FILLFACTOR = 57508
const IGNORE_DUP_KEY = 57509
const STATISTICS_NORECOMPUTE = 57510
const STATISTICS_INCREMENTAL = 57511
const ALLOW_ROW_LOCKS = 57512
const ALLOW_PAGE_LOCKS = 57513
const DISTANCE = 57514
const M = 57515
const EUCLIDEAN = 57516
const COSINE = 57517
const BEFORE = 57518
const AFTER = 57519
const EACH = 57520
const ROW = 57521
const SCROLL = 57522
const CURSOR = 57523
const OPEN = 57524
const CLOSE = 57525
const FETCH = 57526
const PRIOR = 57527
const FIRST = 57528
const LAST = 57529
const DEALLOCATE = 57530
const INSTEAD = 57531
const OF = 57532
const OUTPUT = 57533
const DEFERRABLE = 57534
const INITIALLY = 57535
const IMMEDIATE = 57536
const DEFERRED = 57537
const CONCURRENTLY = 57538
const SQL = 57539
const SECURITY = 57540
const BEGIN = 57541
const START = 57542
const TRANSACTION = 57543
const COMMIT = 57544
const ROLLBACK = 57545
const BIT = 57546
const TINYINT = 57547
const SMALLINT = 57548
const SMALLSERIAL = 57549
const MEDIUMINT = 57550
const INT = 57551
const INTEGER = 57552
const SERIAL = 57553
const BIGINT = 57554
const BIGSERIAL = 57555
const INTNUM = 57556
const REAL = 57557
const DOUBLE = 57558
const PRECISION = 57559
const FLOAT_TYPE = 57560
const DECIMAL = 57561
const NUMERIC = 57562
const SMALLMONEY = 57563
const MONEY = 57564
const TIME = 57565
const TIMESTAMP = 57566
const DATETIME = 57567
const YEAR = 57568
const DATETIMEOFFSET = 57569
const DATETIME2 = 57570
const SMALLDATETIME = 57571
const CHAR = 57572
const VARCHAR = 57573
const VARYING = 57574
const BOOL = 57575
const CHARACTER = 57576
const VARBINARY = 57577
const NCHAR = 57578
const NVARCHAR = 57579
const NTEXT = 57580
const UUID = 57581
const TEXT = 57582
const TINYTEXT = 57583
const MEDIUMTEXT = 57584
const LONGTEXT = 57585
const CITEXT = 57586
const BLOB = 57587
const TINYBLOB = 57588
const MEDIUMBLOB = 57589
const LONGBLOB = 57590
const JSON = 57591
const JSONB = 57592
const ENUM = 57593
const GEOMETRY = 57594
const POINT = 57595
const LINESTRING = 57596
const POLYGON = 57597
const GEOMETRYCOLLECTION = 57598
const MULTIPOINT = 57599
const MULTILINESTRING = 57600
const MULTIPOLYGON = 57601
const VECTOR = 57602
const VARIADIC = 57603
const ARRAY = 57604
const NOW = 57605
const GETDATE = 57606
const BPCHAR = 57607
const TEXT_PATTERN_OPS = 57608
const NULLX = 57609
const AUTO_INCREMENT = 57610
const APPROXNUM = 57611
const SIGNED = 57612
const UNSIGNED = 57613
const ZEROFILL = 57614
const ZONE = 57615
const AUTOINCREMENT = 57616
const DATABASES = 57617
const TABLES = 57618
const VSCHEMA_TABLES = 57619
const EXTENDED = 57620
const FULL = 57621
const PROCESSLIST = 57622
const NAMES = 57623
const CHARSET = 57624
const GLOBAL = 57625
const SESSION = 57626
const ISOLATION = 57627
const LEVEL = 57628
const READ = 57629
const WRITE = 57630
const ONLY = 57631
const REPEATABLE = 57632
const COMMITTED = 57633
const UNCOMMITTED = 57634
const SERIALIZABLE = 57635
const NEW = 57636
const CONCAT_NULL_YIELDS_NULL = 57637
const CURSOR_CLOSE_ON_COMMIT = 57638
const QUOTED_IDENTIFIER = 57639
const ARITHABORT = 57640
const FMTONLY = 57641
const NOCOUNT = 57642
const NOEXEC = 57643
const NUMERIC_ROUNDABORT = 57644
const ANSI_DEFAULTS = 57645
const ANSI_NULL_DFLT_OFF = 57646
const ANSI_NULL_DFLT_ON = 57647
const ANSI_NULLS = 57648
const ANSI_PADDING = 57649
const ANSI_WARNINGS = 57650
const FORCEPLAN = 57651
const SHOWPLAN_ALL = 57652
const SHOWPLAN_TEXT = 57653
const SHOWPLAN_XML = 57654
const IMPLICIT_TRANSACTIONS = 57655
const REMOTE_PROC_TRANSACTIONS = 57656
const XACT_ABORT = 57657
const CURRENT_TIMESTAMP = 57658
const DATABASE = 57659
const CURRENT_DATE = 57660
const CURRENT_TIME = 57661
const LOCALTIME = 57662
const LOCALTIMESTAMP = 57663
const UTC_DATE = 57664
const UTC_TIME = 57665
const UTC_TIMESTAMP = 57666
const REPLACE = 57667
const CONVERT = 57668
const CAST = 57669
const SUBSTR = 57670
const SUBSTRING = 57671
const GROUP_CONCAT = 57672
const SEPARATOR = 57673
const INHERIT = 57674
const LEAD = 57675
const LAG = 57676
const MATCH = 57677
const AGAINST = 57678
const BOOLEAN = 57679
const LANGUAGE = 57680
const WITH = 57681
const WITHOUT = 57682
const PARSER = 57683
const QUERY = 57684
const EXPANSION = 57685
const UNUSED = 57686
const VIRTUAL = 57687
const STORED = 57688
const GENERATED = 57689
const ALWAYS = 57690
const IDENTITY = 57691
const SEQUENCE = 57692
const INCREMENT = 57693
const MINVALUE = 57694
const CACHE = 57695
const CYCLE = 57696
const OWNED = 57697
const NONE = 57698
const CLUSTERED = 57699
const NONCLUSTERED = 57700
const REPLICATION = 57701
const COLUMNSTORE = 57702
const INCLUDE = 57703
const HOLDLOCK = 57704
const NOLOCK = 57705
const NOWAIT = 57706
const PAGLOCK = 57707
const ROWLOCK = 57708
const TABLOCK = 57709
const UPDLOCK = 57710
const READUNCOMMITTED = 57711
const DEFINER = 57712
const INVOKER = 57713
const TYPECAST = 57714
const CHECK = 57715
const OVER = 57716

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	134, 430,
	-2, 166,
	-1, 45,
<<<<<<< HEAD
	123, 833,
	-2, 828,
	-1, 260,
	123, 836,
	-2, 832,
	-1, 420,
	61, 400,
	-2, 397,
	-1, 450,
	123, 834,
	-2, 259,
	-1, 571,
	123, 834,
	-2, 259,
	-1, 592,
	279, 843,
	-2, 739,
	-1, 646,
	279, 843,
	-2, 470,
	-1, 680,
=======
	123, 832,
	-2, 827,
	-1, 260,
	123, 835,
	-2, 831,
	-1, 419,
	61, 398,
	-2, 395,
	-1, 449,
	123, 833,
	-2, 257,
	-1, 570,
	123, 833,
	-2, 257,
	-1, 591,
	278, 842,
	-2, 737,
	-1, 645,
	278, 842,
	-2, 468,
	-1, 679,
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	5, 36,
	-2, 14,
	-1, 686,
	5, 36,
	-2, 16,
<<<<<<< HEAD
	-1, 828,
	279, 843,
	-2, 470,
	-1, 1001,
	279, 843,
	-2, 329,
	-1, 1077,
	279, 843,
	-2, 470,
	-1, 1139,
	279, 843,
	-2, 739,
=======
	-1, 827,
	278, 842,
	-2, 468,
	-1, 1000,
	278, 842,
	-2, 327,
	-1, 1076,
	278, 842,
	-2, 468,
	-1, 1144,
	60, 106,
	-2, 213,
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	-1, 1147,
	60, 106,
	-2, 215,
	-1, 1150,
	60, 106,
	-2, 215,
	-1, 1204,
	5, 37,
	-2, 605,
	-1, 1283,
	5, 36,
	-2, 15,
<<<<<<< HEAD
	-1, 1299,
	198, 63,
	-2, 526,
	-1, 1334,
	279, 843,
	-2, 146,
	-1, 1335,
	279, 843,
	-2, 146,
	-1, 1340,
	60, 106,
	-2, 186,
	-1, 1484,
	90, 830,
	-2, 818,
	-1, 1580,
=======
	-1, 1297,
	197, 63,
	-2, 524,
	-1, 1333,
	278, 842,
	-2, 145,
	-1, 1334,
	278, 842,
	-2, 145,
	-1, 1338,
	60, 106,
	-2, 184,
	-1, 1482,
	90, 829,
	-2, 817,
	-1, 1578,
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	57, 50,
	59, 50,
	-2, 52,
	-1, 1754,
	5, 36,
	-2, 789,
	-1, 1779,
	5, 36,
	-2, 59,
<<<<<<< HEAD
	-1, 1851,
	5, 37,
	-2, 790,
	-1, 1883,
	5, 36,
	-2, 792,
=======
	-1, 1815,
	59, 978,
	60, 978,
	-2, 454,
	-1, 1852,
	5, 37,
	-2, 788,
	-1, 1884,
	5, 36,
	-2, 790,
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	-1, 1905,
	5, 37,
	-2, 793,
}

const yyPrivate = 57344

<<<<<<< HEAD
const yyLast = 9538

var yyAct = [...]int16{
	573, 1810, 554, 1700, 774, 1682, 1860, 1772, 1811, 1602,
	1807, 1742, 31, 1266, 693, 1764, 1090, 775, 41, 42,
	1683, 43, 1126, 583, 1777, 1445, 1616, 1600, 1481, 1113,
	1052, 1662, 68, 68, 68, 1109, 131, 134, 135, 1158,
	1604, 1478, 1615, 1590, 1463, 1112, 880, 1453, 1464, 1675,
	1127, 1106, 1303, 1475, 907, 484, 1300, 1472, 674, 1460,
	1272, 31, 1206, 1124, 895, 629, 922, 62, 1277, 1469,
	1000, 27, 977, 1496, 1085, 937, 1356, 213, 1197, 1339,
	412, 802, 950, 61, 1049, 635, 716, 1034, 852, 48,
	1365, 673, 1255, 565, 856, 409, 197, 256, 232, 544,
	1037, 1070, 552, 415, 69, 63, 64, 530, 818, 447,
	247, 553, 140, 810, 248, 161, 129, 130, 52, 421,
	449, 180, 151, 156, 456, 1386, 199, 473, 153, 994,
	9, 1256, 1567, 34, 238, 747, 748, 749, 750, 751,
	744, 884, 195, 755, 537, 636, 243, 244, 257, 68,
	1086, 54, 422, 423, 538, 722, 257, 136, 419, 138,
	215, 216, 217, 218, 744, 755, 192, 755, 416, 620,
	150, 1154, 195, 196, 55, 56, 255, 445, 50, 1907,
	47, 1840, 435, 1903, 407, 742, 752, 753, 745, 746,
	747, 748, 749, 750, 751, 744, 467, 183, 755, 1409,
	1410, 1547, 237, 837, 1057, 1058, 241, 1795, 245, 246,
	1162, 630, 190, 1163, 178, 253, 398, 1773, 617, 1895,
	401, 1442, 179, 1200, 404, 234, 158, 496, 497, 1839,
	1399, 420, 1533, 1794, 202, 1186, 57, 504, 1832, 45,
	198, 47, 464, 260, 1710, 400, 1783, 399, 177, 1782,
	1516, 475, 1784, 1833, 1834, 518, 631, 1617, 50, 1618,
	47, 441, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868,
	439, 488, 489, 490, 491, 1711, 1712, 869, 868, 201,
	789, 186, 477, 181, 191, 479, 214, 482, 483, 460,
	876, 188, 187, 203, 461, 1384, 463, 462, 683, 1046,
	1141, 1130, 1129, 206, 1393, 503, 1723, 458, 204, 507,
	508, 209, 1131, 665, 211, 664, 230, 1219, 1217, 227,
	1720, 495, 1287, 137, 492, 1132, 734, 38, 1724, 532,
	1634, 221, 222, 223, 224, 225, 1788, 1787, 132, 730,
	516, 1110, 252, 34, 732, 731, 730, 1610, 1631, 557,
	1474, 1721, 1286, 1105, 1366, 1367, 732, 928, 738, 689,
	690, 741, 938, 732, 1676, 1880, 517, 756, 757, 758,
	759, 760, 761, 762, 428, 739, 740, 737, 763, 764,
	765, 766, 743, 742, 752, 753, 745, 746, 747, 748,
	749, 750, 751, 744, 539, 174, 755, 745, 746, 747,
	748, 749, 750, 751, 744, 39, 257, 755, 1546, 1737,
	1548, 1350, 531, 754, 743, 742, 752, 753, 745, 746,
	747, 748, 749, 750, 751, 744, 184, 1371, 755, 1528,
	734, 1125, 185, 619, 527, 754, 724, 754, 723, 902,
	478, 1137, 422, 423, 231, 731, 730, 176, 701, 467,
	34, 438, 1143, 1144, 437, 733, 551, 432, 1633, 417,
	1385, 754, 1139, 732, 177, 702, 536, 733, 754, 34,
	529, 422, 423, 141, 733, 743, 742, 752, 753, 745,
	746, 747, 748, 749, 750, 751, 744, 1155, 1156, 755,
	1654, 1133, 1134, 1136, 214, 133, 704, 1135, 1640, 1404,
	175, 622, 1539, 154, 719, 193, 676, 194, 1291, 1157,
	1163, 838, 1896, 1803, 680, 714, 686, 694, 714, 523,
	257, 699, 1473, 703, 1329, 1672, 444, 257, 469, 468,
	528, 189, 53, 651, 1793, 653, 618, 540, 656, 657,
	695, 639, 460, 531, 498, 494, 157, 1605, 698, 501,
	28, 616, 888, 1366, 1367, 707, 652, 621, 632, 532,
	458, 623, 731, 730, 429, 418, 1776, 426, 427, 634,
	1403, 510, 881, 681, 733, 681, 677, 1381, 1701, 1703,
	732, 430, 40, 50, 691, 1607, 743, 742, 752, 753,
	745, 746, 747, 748, 749, 750, 751, 744, 1775, 675,
	755, 728, 743, 742, 752, 753, 745, 746, 747, 748,
	749, 750, 751, 744, 1774, 681, 755, 734, 58, 1411,
	1434, 721, 923, 924, 37, 176, 694, 424, 696, 685,
	692, 697, 36, 35, 1142, 1521, 734, 68, 51, 525,
	835, 705, 177, 403, 717, 718, 720, 142, 143, 1900,
	257, 773, 45, 1854, 47, 731, 730, 790, 725, 522,
	144, 1433, 1702, 175, 855, 1738, 754, 524, 1227, 6,
	7, 676, 873, 732, 731, 730, 1740, 754, 863, 694,
	531, 731, 730, 1620, 1846, 1603, 1330, 1331, 1332, 886,
	1421, 733, 732, 878, 778, 779, 641, 643, 754, 732,
	1074, 901, 26, 833, 847, 903, 793, 792, 864, 649,
	519, 823, 531, 824, 812, 813, 814, 815, 816, 817,
	1551, 1415, 731, 730, 619, 630, 149, 729, 531, 147,
	44, 854, 860, 862, 1417, 486, 485, 831, 879, 865,
	732, 867, 874, 842, 1432, 458, 1785, 1762, 681, 1619,
	1038, 1177, 659, 1236, 1574, 887, 21, 1176, 16, 754,
	1071, 951, 872, 1175, 675, 1174, 712, 715, 1173, 1172,
	631, 17, 982, 24, 981, 1171, 1412, 1170, 1169, 991,
	991, 988, 1168, 1166, 733, 1575, 935, 1401, 993, 1107,
	904, 18, 19, 257, 257, 1038, 34, 925, 1073, 930,
	414, 1541, 929, 733, 152, 982, 1249, 1039, 898, 836,
	733, 660, 926, 146, 731, 730, 1211, 413, 1210, 921,
	434, 995, 996, 927, 414, 731, 730, 931, 731, 730,
	33, 1357, 732, 1053, 681, 1282, 1545, 414, 731, 730,
	681, 33, 414, 732, 932, 681, 732, 1187, 1188, 1189,
	630, 733, 1358, 1152, 207, 34, 732, 1150, 1072, 976,
	973, 824, 1072, 975, 425, 1368, 34, 1359, 32, 1357,
	754, 34, 1488, 481, 433, 953, 773, 480, 676, 997,
	998, 989, 992, 1355, 1149, 1033, 754, 476, 260, 1053,
	1358, 871, 957, 1031, 1032, 631, 624, 1108, 769, 850,
	14, 1147, 870, 1148, 476, 1061, 955, 956, 954, 637,
	638, 712, 1047, 840, 1050, 1051, 640, 1048, 683, 1104,
	502, 1078, 500, 1079, 646, 647, 648, 1413, 1414, 1416,
	1418, 1419, 210, 1624, 531, 212, 1605, 1459, 1065, 176,
	942, 944, 945, 733, 1063, 168, 1094, 167, 943, 171,
	172, 175, 1578, 849, 733, 169, 177, 733, 476, 425,
	1160, 499, 50, 34, 47, 1623, 684, 733, 684, 1087,
	425, 675, 50, 50, 1607, 47, 33, 425, 951, 472,
	1146, 45, 791, 47, 50, 20, 47, 50, 50, 47,
	47, 50, 1182, 1607, 1650, 1207, 726, 22, 23, 791,
	25, 34, 1167, 32, 768, 770, 771, 772, 776, 978,
	34, 979, 1073, 866, 493, 781, 781, 781, 781, 781,
	781, 781, 34, 574, 990, 572, 576, 577, 578, 579,
	646, 683, 440, 575, 580, 881, 425, 1193, 1164, 34,
	980, 794, 795, 796, 797, 798, 799, 800, 801, 658,
	804, 1151, 806, 807, 808, 809, 811, 811, 811, 811,
	811, 811, 811, 30, 827, 828, 829, 830, 896, 734,
	1890, 1889, 1072, 896, 1888, 257, 790, 1245, 1875, 1800,
	734, 1584, 173, 425, 676, 531, 34, 952, 1592, 1595,
	1596, 1597, 1593, 683, 1594, 1598, 1831, 734, 1765, 1766,
	1280, 615, 1270, 995, 1216, 1853, 734, 734, 1283, 1245,
	1796, 1267, 159, 614, 1220, 711, 1727, 1587, 734, 1233,
	1752, 711, 1636, 711, 1635, 1753, 613, 1585, 612, 1583,
	541, 1247, 1299, 646, 1325, 1326, 1327, 1235, 431, 1334,
	1279, 684, 1679, 1265, 1583, 425, 1424, 1292, 1340, 1147,
	1147, 1340, 1147, 1147, 531, 531, 1338, 1263, 1587, 681,
	1351, 1254, 896, 1558, 1354, 1269, 1262, 681, 1260, 1261,
	260, 1293, 1259, 1257, 1663, 1264, 1663, 675, 711, 1512,
	1252, 1053, 531, 1245, 1511, 1251, 1281, 1508, 1507, 711,
	1502, 711, 1501, 781, 781, 170, 781, 781, 781, 781,
	781, 781, 781, 781, 781, 781, 781, 781, 781, 781,
	781, 1374, 1346, 1347, 881, 1337, 1082, 1353, 711, 1425,
	1081, 1336, 1761, 581, 1066, 1379, 1080, 684, 1341, 1342,
	1343, 1344, 1345, 776, 129, 1062, 1213, 1214, 776, 1215,
	1375, 1586, 46, 49, 1218, 875, 1405, 1360, 1361, 1362,
	1363, 1364, 711, 1376, 1066, 734, 1221, 1222, 1066, 1377,
	1223, 1224, 851, 1225, 1226, 1372, 1373, 1587, 1370, 694,
	1295, 1296, 1297, 1380, 1301, 844, 49, 1423, 1245, 1244,
	1400, 1388, 49, 1428, 1390, 711, 1184, 711, 1089, 841,
	1054, 683, 1392, 1387, 1530, 1285, 1437, 1245, 1394, 861,
	896, 1088, 257, 1231, 952, 986, 734, 896, 1056, 1229,
	1451, 711, 936, 711, 710, 669, 668, 1455, 662, 663,
	1077, 666, 1444, 1882, 1454, 1462, 655, 1448, 654, 1489,
	662, 661, 60, 59, 1808, 734, 897, 1761, 1761, 1095,
	1456, 1340, 650, 425, 1429, 1436, 1849, 683, 986, 531,
	531, 1230, 1497, 1497, 1587, 1145, 49, 1228, 515, 1245,
	49, 514, 49, 49, 515, 1709, 1461, 1458, 848, 49,
	515, 261, 1612, 261, 49, 1470, 520, 1435, 49, 1487,
	743, 742, 752, 753, 745, 746, 747, 748, 749, 750,
	751, 744, 1066, 1212, 755, 896, 711, 839, 667, 425,
	671, 670, 1499, 425, 781, 781, 781, 1503, 1504, 1498,
	1826, 781, 781, 781, 781, 49, 1824, 1791, 1514, 470,
	1765, 1766, 257, 1651, 752, 753, 745, 746, 747, 748,
	749, 750, 751, 744, 203, 1505, 755, 1349, 1555, 1348,
	1268, 233, 1181, 1559, 1180, 1153, 1084, 1083, 1060, 1517,
	698, 1290, 1077, 1509, 1510, 933, 900, 877, 781, 49,
	832, 727, 679, 49, 49, 678, 1557, 1552, 645, 644,
	1560, 1609, 642, 68, 1535, 625, 542, 257, 1540, 1542,
	1543, 1544, 1536, 1576, 1622, 505, 228, 446, 1573, 442,
	411, 235, 236, 1808, 1537, 1538, 226, 220, 1565, 219,
	983, 984, 985, 987, 1564, 208, 531, 1638, 11, 1159,
	1768, 1248, 1572, 672, 506, 240, 1440, 239, 145, 1581,
	734, 1628, 139, 1771, 1566, 1599, 1694, 1608, 1579, 1580,
	1613, 1695, 681, 1692, 1041, 1042, 1043, 1044, 1693, 1045,
	1611, 1626, 1592, 1595, 1596, 1597, 1593, 1770, 1594, 1598,
	1691, 1630, 684, 1642, 1696, 1690, 1596, 1597, 1099, 1100,
	684, 1876, 1055, 1639, 1637, 743, 742, 752, 753, 745,
	746, 747, 748, 749, 750, 751, 744, 1838, 1661, 755,
	1064, 1561, 1067, 1068, 805, 410, 1273, 982, 1075, 1684,
	1076, 1625, 487, 628, 1658, 1335, 1847, 1668, 1627, 923,
	924, 1274, 402, 254, 1474, 1652, 988, 1653, 1103, 1096,
	1680, 627, 1097, 257, 1102, 513, 511, 509, 148, 1035,
	1456, 257, 1669, 1706, 1213, 1500, 1671, 1040, 1053, 1446,
	1678, 1447, 1685, 894, 1290, 1688, 688, 1686, 1687, 535,
	1689, 1091, 1697, 1845, 1656, 1549, 1705, 1467, 1677, 1716,
	1092, 881, 1053, 1681, 1707, 781, 781, 1708, 1718, 1844,
	1802, 1267, 1183, 1493, 754, 681, 249, 250, 251, 885,
	1492, 1491, 470, 1490, 1179, 1494, 1745, 1717, 1408, 1407,
	1754, 1730, 1739, 534, 533, 781, 781, 781, 781, 1897,
	1431, 1746, 1757, 1178, 1759, 436, 883, 1582, 700, 899,
	1744, 8, 1, 1302, 1769, 1778, 754, 1758, 1201, 1202,
	1729, 1779, 13, 1420, 1760, 12, 1204, 890, 1741, 891,
	892, 893, 242, 1205, 543, 1208, 1209, 1185, 788, 470,
	49, 569, 889, 1722, 1632, 555, 1780, 1859, 49, 681,
	1471, 257, 626, 1298, 1328, 1369, 1786, 471, 182, 1250,
	443, 15, 1441, 982, 1468, 1684, 1816, 1778, 1809, 1284,
	1814, 1232, 982, 687, 1684, 1789, 1790, 1238, 512, 1797,
	681, 1352, 1819, 1455, 1820, 1240, 1241, 1812, 1242, 1243,
	1454, 1817, 1821, 905, 1804, 713, 1290, 1569, 1799, 165,
	1290, 1447, 1053, 1253, 155, 1456, 1456, 1805, 1806, 1446,
	706, 405, 29, 10, 1818, 1165, 166, 164, 1506, 163,
	162, 160, 1842, 474, 200, 205, 229, 67, 1467, 681,
	1848, 65, 1837, 66, 70, 694, 1476, 1621, 694, 694,
	694, 521, 1873, 1069, 767, 1856, 1781, 1446, 781, 1858,
	1872, 1483, 1869, 1870, 1871, 735, 1815, 1276, 1843, 754,
	1801, 777, 1234, 1036, 1885, 1886, 1531, 1883, 1881, 556,
	941, 568, 567, 1878, 566, 1751, 1526, 1857, 736, 1466,
	859, 859, 859, 1812, 1887, 1577, 1894, 1591, 1589, 1588,
	1271, 1767, 1763, 1465, 1898, 1532, 1736, 1098, 1439, 1899,
	1138, 1128, 803, 882, 470, 1101, 49, 1901, 982, 5,
	1684, 1906, 1902, 1904, 1140, 1123, 1812, 734, 4, 49,
	1666, 3, 1122, 1121, 1120, 1290, 681, 1119, 1569, 1117,
	1118, 1115, 1116, 1114, 834, 1601, 1093, 546, 633, 682,
	2, 45, 1467, 450, 451, 452, 454, 1467, 1467, 1467,
	1467, 1467, 457, 455, 465, 466, 857, 0, 681, 0,
	0, 1467, 743, 742, 752, 753, 745, 746, 747, 748,
	749, 750, 751, 744, 0, 0, 755, 0, 0, 0,
	1569, 0, 0, 0, 1406, 1378, 0, 0, 781, 0,
	453, 781, 0, 781, 0, 781, 0, 781, 781, 0,
	1422, 0, 0, 0, 0, 46, 0, 0, 683, 0,
	1141, 1130, 1129, 0, 0, 0, 0, 0, 1438, 1447,
	0, 0, 1131, 1467, 0, 1666, 261, 0, 859, 859,
	0, 0, 859, 859, 859, 1132, 934, 0, 46, 1467,
	939, 940, 0, 0, 0, 0, 0, 0, 0, 1468,
	0, 0, 0, 0, 1468, 1468, 1468, 1468, 1468, 0,
	0, 859, 859, 859, 859, 0, 0, 1426, 1601, 0,
	1704, 1430, 1446, 0, 743, 742, 752, 753, 745, 746,
	747, 748, 749, 750, 751, 744, 777, 859, 755, 0,
	1570, 777, 0, 0, 683, 0, 1141, 1130, 1129, 0,
	0, 0, 0, 0, 0, 0, 999, 1030, 1131, 0,
	0, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1132, 0, 0, 0, 1198, 1518, 0, 1519, 1520,
	1468, 0, 1522, 1523, 1525, 1527, 1529, 0, 1569, 0,
	0, 1125, 1755, 1756, 0, 0, 1468, 1059, 0, 0,
	0, 1137, 0, 0, 0, 0, 1290, 0, 1550, 0,
	459, 464, 1143, 1144, 0, 0, 0, 0, 0, 0,
	0, 0, 1139, 684, 0, 0, 1450, 1513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1666, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 1133, 1134, 1136, 0, 0, 0, 1135, 0, 0,
	0, 0, 0, 461, 0, 463, 462, 0, 1291, 0,
	1813, 0, 684, 0, 1554, 0, 1556, 1125, 0, 0,
	469, 468, 0, 0, 0, 0, 1629, 1137, 0, 0,
	0, 1827, 1828, 1829, 0, 0, 754, 0, 1143, 1144,
	0, 0, 0, 0, 0, 0, 0, 683, 1139, 1141,
	1130, 1129, 0, 0, 0, 0, 0, 0, 859, 0,
	1649, 1131, 0, 0, 1239, 1524, 734, 0, 0, 0,
	0, 0, 0, 0, 1132, 0, 0, 1133, 1134, 1136,
	1657, 0, 0, 1135, 0, 0, 1203, 0, 0, 0,
	859, 0, 0, 0, 1291, 0, 0, 0, 261, 0,
	0, 859, 0, 1641, 0, 0, 1813, 470, 0, 1884,
	0, 743, 742, 752, 753, 745, 746, 747, 748, 749,
	750, 751, 744, 0, 0, 755, 0, 0, 1699, 1719,
	0, 0, 0, 0, 1142, 0, 0, 0, 1237, 1813,
	0, 684, 0, 0, 0, 0, 1659, 0, 754, 0,
	1660, 0, 0, 0, 1246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1728, 0, 0, 49,
	0, 1731, 1732, 1733, 1734, 1735, 0, 0, 0, 0,
	1125, 0, 0, 683, 1289, 1141, 1130, 1129, 0, 0,
	1137, 1275, 1278, 0, 0, 0, 0, 1131, 0, 0,
	0, 1143, 1144, 0, 0, 0, 0, 1288, 0, 0,
	1132, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	1142, 0, 0, 0, 0, 1294, 1725, 1726, 0, 908,
	0, 0, 0, 920, 0, 0, 0, 1333, 0, 803,
	1133, 1134, 1136, 910, 0, 0, 1135, 683, 0, 1141,
	1130, 1129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1131, 0, 0, 1792, 1674, 0, 0, 1199, 1798,
	1449, 0, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 780, 782, 783, 784,
	785, 786, 787, 743, 742, 752, 753, 745, 746, 747,
	748, 749, 750, 751, 744, 1830, 0, 755, 0, 0,
	0, 0, 1391, 0, 0, 0, 1125, 0, 0, 909,
	49, 49, 0, 0, 0, 0, 1137, 1841, 0, 0,
	0, 0, 0, 0, 0, 0, 1402, 1143, 1144, 0,
	0, 1850, 1851, 1852, 0, 1855, 0, 1139, 0, 0,
	0, 0, 0, 0, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 1133, 1134, 1136, 0,
	1125, 0, 1135, 1142, 0, 1443, 0, 0, 0, 0,
	1137, 0, 0, 0, 0, 754, 0, 1891, 1892, 1893,
	0, 1143, 1144, 0, 0, 0, 0, 0, 0, 0,
	0, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1905, 49, 0,
	0, 0, 0, 1673, 777, 777, 0, 0, 0, 0,
	1133, 1134, 1136, 0, 0, 0, 1135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1291, 0, 0,
	0, 0, 0, 859, 946, 0, 0, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 49, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 49, 1606, 0, 683, 0, 1141, 1130, 1129,
	0, 0, 0, 1534, 947, 948, 949, 0, 0, 1131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1142,
	0, 593, 1132, 594, 0, 0, 0, 0, 906, 0,
	0, 584, 585, 1562, 1563, 1278, 0, 0, 0, 0,
	0, 425, 0, 0, 45, 574, 571, 572, 576, 577,
	578, 579, 0, 0, 0, 575, 580, 465, 466, 0,
	0, 0, 0, 0, 0, 563, 0, 0, 592, 1673,
	0, 0, 0, 1655, 0, 0, 0, 754, 0, 0,
	0, 0, 0, 1142, 0, 843, 451, 452, 454, 0,
	0, 0, 560, 561, 457, 455, 465, 466, 609, 0,
	562, 0, 49, 558, 559, 564, 49, 49, 0, 0,
	46, 49, 49, 49, 49, 49, 908, 0, 0, 0,
	920, 0, 607, 1698, 0, 49, 0, 0, 1125, 1606,
	910, 0, 453, 1667, 0, 0, 0, 0, 1137, 0,
	0, 0, 0, 0, 683, 0, 1141, 1130, 1129, 1143,
	1144, 0, 0, 0, 0, 0, 0, 0, 1131, 1139,
	0, 0, 0, 570, 49, 0, 0, 1664, 0, 0,
	0, 1132, 0, 0, 0, 1190, 1191, 1192, 0, 0,
	0, 0, 0, 1194, 1195, 1196, 0, 49, 1133, 1134,
	1136, 0, 0, 0, 1135, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 1291, 909, 0, 0, 683,
	0, 1141, 1130, 1129, 0, 0, 0, 0, 0, 1715,
	0, 0, 0, 1131, 0, 0, 1747, 1748, 0, 780,
	0, 0, 0, 0, 0, 0, 1132, 0, 0, 595,
	0, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	0, 0, 0, 0, 0, 0, 1743, 0, 0, 0,
	0, 611, 0, 596, 597, 0, 0, 0, 0, 0,
	1749, 0, 1750, 0, 0, 0, 46, 1125, 0, 683,
	0, 1141, 1130, 1129, 0, 46, 0, 1137, 0, 0,
	0, 0, 0, 1131, 582, 0, 0, 0, 1143, 1144,
	0, 0, 459, 464, 0, 0, 1132, 0, 1139, 0,
	0, 0, 0, 0, 0, 0, 598, 608, 604, 605,
	602, 603, 601, 600, 599, 610, 586, 587, 588, 589,
	591, 1142, 0, 469, 468, 590, 0, 1133, 1134, 1136,
	0, 0, 1125, 1135, 0, 0, 0, 0, 0, 0,
	0, 0, 1137, 0, 1606, 461, 0, 463, 462, 0,
	0, 0, 1822, 1143, 1144, 1823, 0, 0, 1825, 0,
	0, 0, 606, 1139, 0, 0, 0, 0, 0, 0,
	0, 1289, 0, 0, 0, 1835, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1743, 0, 1133, 1134, 1136, 0, 0, 0, 1135, 0,
	0, 0, 1125, 777, 0, 1161, 0, 0, 0, 0,
	0, 46, 1137, 0, 0, 0, 1382, 1383, 0, 0,
	0, 0, 0, 1143, 1144, 0, 0, 0, 0, 0,
	0, 0, 0, 1139, 1877, 777, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1395, 1396, 1397, 1398,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1133, 1134, 1136, 0, 0, 0, 1135, 0,
	1142, 0, 0, 0, 383, 370, 0, 327, 385, 295,
	315, 394, 317, 318, 354, 273, 337, 0, 312, 292,
	0, 0, 0, 298, 266, 307, 267, 296, 329, 0,
	293, 0, 372, 340, 0, 0, 0, 392, 0, 345,
	0, 0, 0, 0, 0, 332, 374, 335, 365, 326,
	355, 282, 344, 387, 313, 350, 388, 0, 0, 0,
	34, 0, 0, 0, 0, 1142, 0, 0, 0, 0,
	0, 0, 349, 381, 309, 279, 397, 0, 353, 265,
	347, 0, 0, 271, 274, 393, 379, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 331, 336, 361, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 343, 1836, 0, 0, 278, 272,
	0, 328, 819, 0, 0, 281, 0, 300, 362, 1515,
	262, 368, 376, 325, 0, 1142, 380, 322, 321, 0,
	0, 0, 0, 0, 0, 314, 259, 358, 395, 384,
	333, 373, 297, 308, 0, 304, 0, 821, 0, 305,
	306, 342, 356, 0, 0, 0, 0, 0, 382, 364,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1568, 0, 0, 0, 0,
	0, 0, 270, 263, 301, 366, 369, 286, 352, 275,
	310, 359, 311, 334, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 0, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 0, 122, 123, 0, 124, 125, 126,
	128, 127, 0, 974, 822, 0, 0, 0, 0, 0,
	1485, 0, 71, 820, 0, 0, 0, 0, 826, 825,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1643,
	0, 0, 1644, 0, 1645, 0, 1646, 0, 1647, 1648,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	269, 290, 377, 0, 0, 0, 0, 1486, 1484, 1480,
	1479, 0, 0, 0, 0, 351, 0, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 289, 283, 284, 338, 339, 389, 390,
	391, 363, 280, 0, 287, 288, 0, 371, 0, 0,
	0, 341, 0, 0, 0, 396, 72, 0, 0, 0,
	0, 0, 0, 316, 264, 320, 0, 0, 0, 0,
	0, 0, 0, 276, 277, 0, 0, 324, 319, 346,
	348, 357, 367, 378, 386, 360, 294, 330, 383, 370,
	0, 327, 385, 295, 315, 394, 317, 318, 354, 273,
	337, 0, 312, 292, 0, 0, 0, 298, 266, 307,
	267, 296, 329, 0, 293, 0, 372, 340, 0, 0,
	0, 392, 0, 345, 0, 0, 0, 0, 0, 332,
	374, 335, 365, 326, 355, 282, 344, 387, 313, 350,
	388, 0, 0, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 381, 309, 279,
	397, 0, 353, 265, 347, 0, 0, 271, 274, 393,
	379, 303, 302, 0, 0, 0, 0, 0, 0, 0,
	331, 336, 361, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 0, 343, 0,
	0, 0, 278, 272, 0, 328, 819, 0, 0, 281,
	0, 300, 362, 0, 262, 368, 376, 325, 0, 0,
	380, 322, 321, 0, 0, 0, 0, 0, 0, 314,
	259, 358, 395, 384, 333, 373, 297, 308, 0, 304,
	0, 821, 0, 305, 306, 342, 356, 0, 0, 0,
	0, 0, 382, 364, 375, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 270, 263, 301, 366,
	369, 286, 352, 275, 310, 359, 311, 334, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1614, 0, 0, 0, 0, 0, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 0, 1485, 0, 71, 820, 0, 0,
	0, 0, 826, 825, 0, 0, 0, 448, 0, 0,
	45, 0, 450, 451, 452, 454, 0, 0, 0, 0,
	0, 457, 455, 465, 466, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 377, 0, 0, 0,
	0, 1486, 1484, 0, 0, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	338, 339, 389, 390, 391, 363, 280, 0, 287, 288,
	0, 371, 0, 0, 0, 341, 0, 0, 0, 396,
	72, 0, 0, 0, 0, 0, 0, 316, 264, 320,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 0,
	0, 324, 319, 346, 348, 357, 367, 378, 386, 360,
	294, 330, 383, 370, 0, 327, 385, 295, 315, 394,
	317, 318, 354, 273, 337, 0, 312, 292, 0, 0,
	0, 298, 266, 307, 267, 296, 329, 0, 293, 0,
	372, 340, 0, 0, 0, 392, 0, 345, 0, 0,
	0, 0, 0, 332, 374, 335, 365, 326, 355, 282,
	344, 387, 313, 350, 388, 0, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 381, 309, 279, 397, 0, 353, 265, 347, 0,
	0, 271, 274, 393, 379, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 331, 336, 361, 323, 0, 459,
	464, 0, 0, 1389, 0, 0, 0, 0, 0, 0,
	299, 0, 343, 0, 0, 0, 278, 272, 0, 328,
	0, 0, 0, 281, 0, 300, 362, 0, 262, 368,
	376, 325, 0, 0, 380, 322, 321, 0, 1003, 0,
	0, 0, 0, 314, 259, 358, 395, 384, 333, 373,
	297, 308, 461, 304, 463, 462, 0, 305, 306, 342,
	356, 683, 0, 1141, 1130, 1129, 382, 364, 375, 469,
	468, 0, 0, 0, 0, 1131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1132, 0,
	270, 263, 301, 366, 369, 286, 352, 275, 310, 359,
	311, 334, 291, 0, 1012, 1018, 1016, 0, 0, 1013,
	0, 0, 1011, 0, 0, 1020, 0, 0, 1019, 1005,
	1015, 1017, 1014, 1009, 0, 1004, 0, 1022, 1021, 1023,
	1002, 1025, 0, 0, 0, 1029, 1026, 1028, 1027, 0,
	1024, 0, 0, 1879, 0, 0, 0, 0, 1485, 1006,
	1007, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1008, 1010, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 269, 290,
	377, 0, 0, 0, 1125, 1486, 1484, 0, 0, 0,
	0, 0, 0, 351, 1137, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 1143, 1144, 0, 0, 0,
	0, 0, 0, 0, 0, 1139, 0, 0, 0, 0,
	285, 289, 283, 284, 338, 339, 389, 390, 391, 363,
	280, 0, 287, 288, 0, 371, 0, 0, 0, 341,
	0, 0, 0, 396, 1133, 1134, 1136, 0, 0, 0,
	1135, 316, 264, 320, 0, 0, 0, 0, 0, 0,
	0, 276, 277, 0, 0, 324, 319, 346, 348, 357,
	367, 378, 386, 360, 294, 330, 383, 370, 0, 327,
	385, 295, 315, 394, 317, 318, 354, 273, 337, 0,
	312, 292, 0, 0, 0, 298, 266, 307, 267, 296,
	329, 0, 293, 0, 372, 340, 0, 94, 0, 392,
	33, 345, 0, 0, 0, 0, 0, 332, 374, 335,
	365, 326, 355, 282, 344, 387, 313, 350, 388, 0,
	0, 0, 45, 1152, 47, 34, 0, 1150, 0, 0,
	0, 0, 0, 0, 349, 381, 309, 279, 397, 0,
	353, 265, 347, 0, 0, 271, 274, 393, 379, 303,
	302, 0, 0, 0, 1149, 0, 0, 0, 331, 336,
	361, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1258, 1148, 299, 0, 343, 1142, 0, 0,
	278, 272, 0, 328, 79, 0, 0, 281, 0, 300,
	362, 0, 262, 368, 376, 325, 0, 0, 380, 322,
	321, 0, 0, 0, 0, 0, 0, 314, 259, 358,
	395, 384, 333, 373, 297, 308, 0, 304, 0, 95,
	0, 305, 306, 342, 356, 0, 0, 0, 0, 0,
	382, 364, 375, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 263, 301, 366, 369, 286,
	352, 275, 310, 359, 311, 334, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 0, 122, 123, 0, 124,
	125, 126, 128, 127, 96, 97, 98, 102, 100, 99,
	101, 73, 75, 0, 71, 74, 80, 76, 77, 78,
	92, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 93, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 269, 290, 377, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 289, 283, 284, 338, 339,
	389, 390, 391, 363, 280, 0, 287, 288, 0, 371,
	0, 0, 0, 341, 0, 0, 0, 396, 72, 0,
	0, 0, 0, 0, 0, 316, 264, 320, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 0, 0, 324,
	319, 346, 348, 357, 367, 378, 386, 360, 294, 330,
	383, 370, 0, 327, 385, 295, 315, 394, 317, 318,
	354, 273, 337, 0, 312, 292, 0, 0, 0, 298,
	266, 307, 267, 296, 329, 0, 293, 0, 372, 340,
	0, 94, 0, 392, 0, 345, 0, 0, 0, 0,
	0, 332, 374, 335, 365, 326, 355, 282, 344, 387,
	313, 350, 388, 0, 0, 0, 34, 0, 708, 34,
	709, 0, 0, 0, 0, 0, 0, 0, 349, 381,
	309, 279, 397, 0, 353, 265, 347, 0, 0, 271,
	274, 393, 379, 303, 302, 0, 0, 0, 0, 0,
	0, 0, 331, 336, 361, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 0,
	343, 0, 0, 0, 278, 272, 0, 328, 79, 0,
	0, 281, 0, 300, 362, 0, 262, 368, 376, 325,
	0, 0, 380, 322, 321, 0, 0, 0, 0, 0,
	0, 314, 259, 358, 395, 384, 333, 373, 297, 308,
	0, 304, 0, 95, 0, 305, 306, 342, 356, 0,
	0, 0, 0, 0, 382, 364, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 263,
	301, 366, 369, 286, 352, 275, 310, 359, 311, 334,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 0,
	122, 123, 0, 124, 125, 126, 128, 127, 96, 97,
	98, 102, 100, 99, 101, 73, 75, 0, 71, 74,
	80, 76, 77, 78, 92, 81, 82, 83, 84, 85,
	86, 87, 88, 89, 90, 91, 93, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 377, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 338, 339, 389, 390, 391, 363, 280, 0,
	287, 288, 0, 371, 0, 0, 0, 341, 0, 0,
	0, 396, 72, 0, 0, 0, 0, 0, 0, 316,
	264, 320, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 0, 0, 324, 319, 346, 348, 357, 367, 378,
	386, 360, 294, 330, 383, 370, 0, 327, 385, 295,
	315, 394, 317, 318, 354, 273, 337, 0, 312, 292,
	0, 0, 0, 298, 266, 307, 267, 296, 329, 0,
	293, 0, 372, 340, 0, 0, 0, 392, 0, 345,
	0, 0, 0, 0, 0, 332, 374, 335, 365, 326,
	355, 282, 344, 387, 313, 350, 388, 0, 406, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	408, 0, 349, 381, 309, 279, 397, 0, 353, 265,
	347, 0, 0, 271, 274, 393, 379, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 331, 336, 361, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 343, 0, 0, 0, 278, 272,
	0, 328, 0, 0, 0, 281, 0, 300, 362, 0,
	262, 368, 376, 325, 0, 0, 380, 322, 321, 0,
	0, 0, 0, 0, 0, 314, 259, 358, 395, 384,
	333, 373, 297, 308, 0, 304, 0, 0, 0, 305,
	306, 342, 356, 683, 0, 1141, 1130, 1129, 382, 364,
	375, 0, 0, 0, 0, 0, 0, 1131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1132, 0, 270, 263, 301, 366, 369, 286, 352, 275,
	310, 359, 311, 334, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1874, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	269, 290, 377, 0, 0, 0, 1125, 0, 258, 0,
	0, 0, 0, 0, 0, 351, 1137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1143, 1144, 0,
	0, 0, 0, 0, 0, 0, 0, 1139, 0, 0,
	0, 0, 285, 289, 283, 284, 338, 339, 389, 390,
	391, 363, 280, 0, 287, 288, 0, 371, 0, 0,
	0, 341, 0, 0, 0, 396, 1133, 1134, 1136, 0,
	0, 0, 1135, 316, 264, 320, 0, 0, 0, 0,
	0, 0, 0, 276, 277, 0, 0, 324, 319, 346,
	348, 357, 367, 378, 386, 360, 294, 330, 383, 370,
	0, 327, 385, 295, 315, 394, 317, 318, 354, 273,
	337, 0, 312, 292, 0, 0, 0, 298, 266, 307,
	267, 296, 329, 0, 293, 0, 372, 340, 0, 0,
	0, 392, 0, 345, 0, 0, 0, 0, 0, 332,
	374, 335, 365, 326, 355, 282, 344, 387, 313, 350,
	388, 0, 0, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 381, 309, 279,
	397, 0, 353, 265, 347, 0, 0, 271, 274, 393,
	379, 303, 302, 0, 0, 0, 0, 0, 0, 0,
	331, 336, 361, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1553, 0, 299, 0, 343, 1142,
	0, 0, 278, 272, 0, 328, 0, 0, 0, 281,
	0, 300, 362, 0, 262, 368, 376, 325, 0, 0,
	380, 322, 321, 0, 0, 0, 0, 0, 0, 314,
	259, 358, 395, 384, 333, 373, 297, 308, 0, 304,
	0, 0, 0, 305, 306, 342, 356, 683, 0, 1141,
	1130, 1129, 382, 364, 375, 0, 0, 0, 0, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1132, 0, 270, 263, 301, 366,
	369, 286, 352, 275, 310, 359, 311, 334, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1665,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 377, 0, 0, 0,
	1125, 0, 258, 0, 0, 0, 0, 0, 0, 351,
	1137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1143, 1144, 0, 0, 0, 0, 0, 0, 0,
	0, 1139, 0, 0, 0, 0, 285, 289, 283, 284,
	338, 339, 389, 390, 391, 363, 280, 0, 287, 288,
	0, 371, 0, 0, 0, 341, 0, 0, 0, 396,
	1133, 1134, 1136, 0, 0, 0, 1135, 316, 264, 320,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 0,
	0, 324, 319, 346, 348, 357, 367, 378, 386, 360,
	294, 330, 383, 370, 0, 327, 385, 295, 315, 394,
	317, 318, 354, 273, 337, 0, 312, 292, 0, 0,
	0, 298, 266, 307, 267, 296, 329, 0, 293, 0,
	372, 340, 0, 0, 0, 392, 0, 345, 0, 0,
	0, 0, 0, 332, 374, 335, 365, 326, 355, 282,
	344, 387, 313, 350, 388, 0, 0, 0, 45, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 381, 309, 279, 397, 0, 353, 265, 347, 0,
	0, 271, 274, 393, 379, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 331, 336, 361, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 343, 1142, 0, 0, 278, 272, 0, 328,
	0, 0, 0, 281, 0, 300, 362, 0, 262, 368,
	376, 325, 0, 0, 380, 322, 321, 0, 0, 0,
	0, 0, 0, 314, 259, 358, 395, 384, 333, 373,
	297, 308, 0, 304, 0, 0, 0, 305, 306, 342,
	356, 683, 0, 1141, 1130, 1129, 382, 364, 375, 0,
	0, 0, 0, 0, 0, 1131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1132, 0,
	270, 263, 301, 366, 369, 286, 352, 275, 310, 359,
=======
const yyLast = 10285

var yyAct = [...]int16{
	572, 553, 1680, 1861, 1808, 1089, 1770, 582, 1698, 1809,
	1814, 408, 31, 1805, 692, 774, 1600, 879, 41, 42,
	43, 773, 1681, 1740, 1775, 1108, 1614, 1051, 1479, 1263,
	1443, 1124, 68, 68, 68, 1111, 131, 134, 135, 1598,
	1112, 543, 1660, 1451, 1613, 1476, 1588, 1602, 1762, 1125,
	628, 1673, 1105, 906, 483, 673, 1298, 1301, 1458, 1122,
	1269, 31, 1473, 1274, 1470, 1203, 1461, 62, 894, 411,
	1494, 27, 936, 715, 1084, 921, 1462, 1363, 999, 976,
	1194, 1337, 1155, 672, 61, 256, 851, 1069, 883, 1036,
	564, 232, 1252, 551, 855, 197, 634, 63, 817, 529,
	1033, 949, 69, 414, 213, 247, 64, 552, 446, 161,
	1048, 140, 420, 809, 52, 248, 448, 129, 130, 156,
	1384, 455, 472, 1354, 180, 744, 745, 746, 747, 748,
	749, 750, 743, 199, 238, 754, 746, 747, 748, 749,
	750, 743, 1467, 993, 754, 9, 1253, 536, 257, 68,
	195, 1565, 635, 136, 1085, 138, 257, 537, 54, 260,
	721, 399, 48, 619, 743, 444, 150, 754, 415, 754,
	616, 34, 243, 244, 1526, 733, 255, 421, 422, 1545,
	1151, 1906, 434, 1841, 406, 1903, 33, 215, 216, 217,
	218, 55, 56, 1793, 836, 151, 466, 1160, 50, 158,
	47, 153, 1407, 1408, 1771, 682, 1896, 1138, 1128, 1127,
	1840, 34, 1159, 32, 1056, 1057, 397, 629, 234, 1129,
	742, 741, 751, 752, 744, 745, 746, 747, 748, 749,
	750, 743, 1130, 418, 754, 398, 682, 503, 1138, 1128,
	1127, 495, 496, 1440, 1109, 1197, 1397, 198, 1792, 1183,
	1129, 1531, 57, 463, 1781, 517, 1615, 1780, 1616, 438,
	1782, 1833, 630, 1130, 45, 1708, 47, 1834, 1835, 1514,
	487, 488, 489, 490, 868, 237, 1709, 1710, 867, 241,
	474, 245, 246, 50, 176, 47, 459, 1568, 253, 201,
	168, 875, 167, 400, 171, 172, 175, 403, 1382, 203,
	169, 177, 788, 457, 214, 460, 419, 462, 461, 476,
	1391, 1045, 478, 206, 481, 482, 664, 26, 1448, 663,
	230, 1216, 1214, 177, 192, 137, 494, 1718, 227, 491,
	195, 196, 1284, 38, 440, 1786, 1785, 1721, 1123, 730,
	729, 1722, 731, 556, 1409, 515, 132, 1450, 1135, 252,
	1608, 34, 1719, 1472, 531, 183, 1283, 731, 1629, 1140,
	1141, 1104, 927, 1364, 1365, 516, 688, 689, 1674, 1123,
	190, 21, 178, 16, 937, 34, 1881, 1632, 502, 1135,
	179, 903, 506, 507, 700, 1544, 17, 1546, 24, 901,
	1140, 1141, 428, 421, 422, 176, 538, 1131, 1132, 1134,
	535, 701, 1348, 1133, 753, 257, 18, 19, 723, 429,
	39, 530, 177, 753, 1288, 751, 752, 744, 745, 746,
	747, 748, 749, 750, 743, 722, 173, 754, 1131, 1132,
	1134, 437, 618, 526, 1133, 1369, 753, 436, 753, 186,
	729, 181, 191, 431, 550, 1288, 1413, 1154, 466, 188,
	187, 34, 732, 231, 1383, 416, 1638, 731, 1415, 737,
	703, 1897, 740, 1402, 175, 694, 528, 732, 755, 756,
	757, 758, 759, 760, 761, 1801, 738, 739, 736, 762,
	763, 764, 765, 742, 741, 751, 752, 744, 745, 746,
	747, 748, 749, 750, 743, 1152, 1153, 754, 753, 214,
	1410, 837, 133, 753, 1631, 675, 1670, 1537, 621, 1652,
	174, 1160, 522, 443, 14, 713, 693, 28, 157, 257,
	698, 141, 702, 713, 1471, 527, 257, 154, 53, 539,
	679, 650, 685, 652, 718, 617, 655, 656, 459, 170,
	1139, 531, 530, 615, 887, 421, 422, 697, 1791, 497,
	493, 638, 468, 467, 706, 457, 631, 622, 500, 620,
	1364, 1365, 730, 729, 633, 1070, 509, 732, 680, 40,
	680, 1139, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	731, 1774, 651, 184, 1773, 1519, 733, 1224, 58, 185,
	1286, 1772, 772, 922, 923, 674, 521, 727, 733, 20,
	175, 34, 37, 1072, 523, 730, 729, 720, 730, 729,
	680, 22, 23, 1327, 25, 423, 1401, 730, 729, 730,
	729, 1447, 695, 731, 684, 693, 731, 36, 35, 696,
	691, 45, 51, 47, 704, 731, 68, 731, 524, 834,
	402, 730, 729, 6, 7, 730, 729, 1855, 676, 257,
	724, 1411, 1412, 1414, 1416, 1417, 690, 1738, 1432, 731,
	1618, 854, 193, 731, 194, 1246, 1419, 789, 777, 778,
	675, 872, 1073, 716, 717, 719, 792, 862, 693, 530,
	417, 728, 425, 426, 730, 729, 1603, 791, 189, 1430,
	732, 832, 877, 1783, 142, 143, 753, 648, 518, 1431,
	900, 880, 731, 846, 902, 885, 863, 144, 822, 44,
	427, 530, 823, 811, 812, 813, 814, 815, 816, 730,
	729, 149, 50, 618, 1605, 147, 1760, 530, 1208, 830,
	1207, 1699, 1701, 732, 878, 658, 732, 731, 907, 1539,
	457, 841, 919, 680, 950, 732, 733, 732, 485, 484,
	730, 729, 909, 871, 629, 1617, 853, 859, 861, 1037,
	674, 835, 1233, 413, 1572, 864, 753, 866, 731, 732,
	1174, 981, 980, 732, 1328, 1329, 1330, 1173, 990, 990,
	730, 729, 934, 176, 1172, 924, 1171, 992, 629, 1170,
	928, 1573, 257, 257, 659, 1169, 1168, 987, 731, 630,
	177, 1167, 897, 260, 981, 1038, 1166, 1165, 1163, 1399,
	920, 1106, 732, 1037, 873, 1700, 929, 772, 152, 146,
	994, 995, 926, 956, 1601, 1279, 930, 886, 908, 680,
	925, 433, 1052, 630, 412, 680, 931, 954, 955, 953,
	680, 413, 941, 943, 944, 1543, 207, 732, 849, 1549,
	942, 972, 974, 475, 1355, 413, 975, 1071, 1366, 413,
	823, 1071, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 988, 991, 1355, 33, 1356, 1486, 675, 732, 1184,
	1185, 1186, 1528, 623, 424, 432, 636, 637, 1052, 1060,
	1357, 768, 1030, 1031, 1356, 952, 1107, 1149, 1603, 34,
	1144, 1147, 682, 639, 996, 997, 1353, 475, 732, 870,
	1032, 645, 646, 647, 1047, 1103, 480, 848, 1622, 1077,
	479, 1078, 475, 733, 210, 869, 424, 212, 1146, 50,
	1576, 47, 839, 530, 50, 1457, 1605, 1046, 1648, 1049,
	1050, 1093, 1062, 501, 499, 498, 471, 1145, 34, 45,
	1621, 47, 1204, 683, 424, 683, 790, 50, 1157, 47,
	1086, 950, 50, 1064, 47, 1164, 865, 674, 742, 741,
	751, 752, 744, 745, 746, 747, 748, 749, 750, 743,
	492, 1143, 754, 725, 33, 50, 439, 47, 1179, 1148,
	34, 767, 769, 770, 771, 775, 50, 50, 47, 1605,
	1161, 30, 780, 780, 780, 780, 780, 780, 780, 34,
	977, 32, 978, 1522, 733, 424, 34, 645, 1072, 424,
	790, 979, 34, 895, 733, 1891, 1890, 733, 793, 794,
	795, 796, 797, 798, 799, 800, 905, 803, 657, 805,
	806, 807, 808, 810, 810, 810, 810, 810, 810, 810,
	159, 826, 827, 828, 829, 1190, 880, 895, 1889, 742,
	741, 751, 752, 744, 745, 746, 747, 748, 749, 750,
	743, 1071, 614, 754, 257, 1242, 1876, 1832, 733, 1584,
	951, 1854, 733, 675, 530, 260, 789, 34, 573, 989,
	571, 575, 576, 577, 578, 613, 1213, 612, 574, 579,
	1798, 733, 994, 1242, 1794, 1585, 1217, 710, 1725, 1422,
	1276, 1585, 733, 710, 1634, 1336, 1277, 1267, 710, 1633,
	645, 895, 1556, 580, 1280, 1232, 611, 1244, 683, 540,
	1297, 430, 1323, 1324, 1325, 1806, 1289, 1333, 1759, 1262,
	1290, 1266, 46, 49, 1230, 1338, 1144, 1144, 1338, 1144,
	1144, 530, 530, 1264, 680, 1582, 1260, 1349, 1254, 1256,
	1251, 1352, 680, 1259, 1249, 1292, 1261, 1257, 1258, 710,
	1510, 1248, 682, 674, 1242, 1509, 49, 1331, 1052, 530,
	780, 780, 49, 780, 780, 780, 780, 780, 780, 780,
	780, 780, 780, 780, 780, 780, 780, 780, 1278, 1750,
	1585, 1583, 1081, 1581, 1751, 1372, 1344, 1345, 1506, 1505,
	710, 1500, 682, 1351, 683, 1293, 1294, 1295, 1080, 1299,
	775, 710, 1499, 1142, 424, 775, 514, 1339, 1340, 1341,
	1342, 1343, 129, 1661, 1373, 1590, 1593, 1594, 1595, 1591,
	1079, 1592, 1596, 1403, 1883, 1763, 1764, 1061, 1398, 1370,
	1371, 753, 1368, 1375, 710, 1423, 49, 710, 1374, 1677,
	49, 1581, 49, 49, 424, 1377, 693, 1065, 733, 49,
	1661, 261, 1378, 261, 49, 1242, 1241, 1053, 49, 874,
	1426, 1759, 1435, 710, 1181, 1335, 1386, 1282, 1388, 1242,
	1421, 1358, 1359, 1360, 1361, 1362, 1449, 951, 710, 1088,
	257, 1385, 850, 1392, 895, 1087, 896, 1076, 880, 1442,
	985, 733, 895, 1055, 1446, 49, 1390, 1182, 1065, 469,
	1228, 847, 710, 935, 1453, 1226, 1094, 1487, 1454, 843,
	710, 709, 840, 1452, 860, 1460, 668, 667, 665, 1338,
	514, 1427, 753, 661, 662, 661, 660, 530, 530, 1495,
	1495, 1434, 1065, 1287, 60, 59, 654, 653, 649, 49,
	1759, 1850, 682, 49, 49, 1456, 513, 985, 1227, 514,
	1735, 1585, 1242, 1225, 1707, 742, 741, 751, 752, 744,
	745, 746, 747, 748, 749, 750, 743, 1610, 1468, 754,
	1433, 780, 780, 780, 1065, 1209, 895, 710, 780, 780,
	780, 780, 1501, 1502, 1497, 1496, 1590, 1593, 1594, 1595,
	1591, 838, 1592, 1596, 424, 670, 669, 1438, 666, 424,
	257, 1827, 1825, 1789, 1485, 741, 751, 752, 744, 745,
	746, 747, 748, 749, 750, 743, 1550, 1459, 754, 1076,
	1507, 1508, 1763, 1764, 519, 780, 1649, 203, 697, 1503,
	1515, 1347, 1553, 982, 983, 984, 986, 1557, 1346, 1512,
	1265, 1538, 1540, 1541, 1542, 233, 1178, 1177, 1150, 1607,
	1268, 68, 1083, 1082, 1059, 257, 1571, 1534, 932, 1535,
	1536, 899, 1620, 876, 831, 726, 1574, 1040, 1041, 1042,
	1043, 678, 1044, 677, 644, 643, 1563, 1562, 641, 624,
	541, 504, 228, 445, 530, 1636, 441, 1555, 410, 226,
	1570, 1558, 235, 236, 1806, 1054, 1579, 220, 219, 208,
	11, 1156, 1766, 1245, 1626, 1606, 680, 671, 505, 1444,
	1597, 1445, 240, 1063, 1287, 1066, 1067, 1611, 1609, 683,
	239, 1074, 145, 1075, 1624, 1533, 139, 683, 1564, 1692,
	1628, 1690, 1769, 1768, 1693, 1694, 1691, 1594, 1595, 1635,
	1637, 1689, 1688, 1376, 1098, 1099, 1877, 1101, 1839, 1659,
	1559, 469, 804, 409, 1270, 1623, 1492, 486, 627, 1848,
	1625, 1334, 1472, 922, 923, 981, 1682, 401, 1650, 1271,
	1651, 254, 1102, 1095, 1640, 626, 1096, 1704, 512, 1577,
	1578, 510, 508, 889, 1666, 890, 891, 892, 1454, 148,
	1034, 257, 1498, 1039, 893, 1180, 1667, 687, 888, 257,
	1678, 987, 534, 1669, 1090, 1736, 1052, 1846, 469, 49,
	1676, 1654, 1547, 1091, 880, 1656, 1845, 49, 1800, 1465,
	780, 780, 1264, 1695, 1491, 1424, 1490, 1714, 1489, 1428,
	1052, 1703, 1683, 1716, 1488, 1686, 1705, 1706, 753, 680,
	1176, 1198, 1199, 1684, 1685, 1898, 1687, 1406, 1405, 1201,
	780, 780, 780, 780, 1715, 533, 532, 1737, 1205, 1206,
	249, 250, 251, 1429, 1175, 435, 882, 1287, 1567, 884,
	1743, 1287, 1445, 1580, 699, 1752, 898, 8, 1418, 1,
	1444, 1744, 1300, 1776, 13, 12, 1755, 753, 1757, 1739,
	1747, 242, 1748, 1202, 1229, 787, 568, 1756, 1720, 1675,
	1235, 1630, 1728, 1758, 1679, 554, 1777, 1860, 1237, 1238,
	1469, 1239, 1240, 680, 1778, 1767, 1296, 1326, 1444, 257,
	1466, 1742, 1367, 470, 182, 1247, 1250, 442, 15, 1784,
	1439, 981, 1682, 1807, 1816, 1776, 1511, 1797, 542, 1810,
	981, 1682, 1281, 686, 680, 1817, 511, 1795, 1350, 858,
	858, 858, 1802, 1819, 904, 1812, 625, 712, 165, 1818,
	1453, 1727, 1822, 1454, 1454, 155, 1820, 705, 1821, 1452,
	1052, 1803, 1804, 469, 1504, 49, 404, 29, 10, 1162,
	166, 164, 163, 1552, 162, 1554, 1787, 1788, 49, 160,
	1465, 1664, 473, 680, 200, 205, 1287, 1838, 229, 1567,
	67, 1849, 1843, 65, 780, 1857, 693, 66, 70, 693,
	693, 693, 1474, 1874, 1619, 520, 1068, 766, 1779, 1858,
	1859, 1481, 1529, 1870, 1871, 1872, 1813, 1273, 1873, 1844,
	1799, 1231, 801, 1035, 555, 1816, 1887, 940, 1810, 567,
	1882, 566, 1879, 565, 1888, 1886, 1817, 1749, 735, 1464,
	1575, 1567, 1589, 1587, 1586, 1884, 1765, 1761, 1463, 734,
	1530, 1734, 1895, 1097, 545, 776, 1437, 1136, 1899, 1126,
	881, 1810, 1639, 1100, 46, 1901, 5, 1137, 1121, 981,
	1682, 1904, 1902, 4, 3, 1120, 1119, 1900, 1118, 1116,
	1445, 1599, 1117, 680, 1114, 261, 1664, 858, 858, 1115,
	1113, 858, 858, 858, 1465, 1404, 802, 46, 1092, 1465,
	1465, 1465, 1465, 1465, 681, 1657, 2, 0, 0, 1658,
	202, 1420, 0, 1465, 0, 680, 0, 0, 0, 0,
	858, 858, 858, 858, 0, 0, 0, 0, 833, 1436,
	0, 0, 0, 1444, 780, 0, 0, 780, 0, 780,
	0, 780, 0, 780, 780, 0, 858, 0, 0, 0,
	856, 682, 0, 1138, 1128, 1127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1129, 0, 0, 0, 0,
	469, 0, 0, 0, 0, 1465, 0, 0, 1130, 0,
	0, 0, 0, 0, 204, 1723, 1724, 209, 0, 0,
	211, 1465, 0, 0, 0, 1466, 0, 0, 0, 1567,
	1466, 1466, 1466, 1466, 1466, 0, 0, 221, 222, 223,
	224, 225, 0, 0, 1599, 0, 1702, 1287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	933, 0, 0, 0, 938, 939, 0, 0, 1516, 0,
	1517, 1518, 0, 0, 1520, 1521, 1523, 1525, 1527, 0,
	0, 0, 1664, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 682, 0, 1138, 1128, 1127, 0, 0,
	1548, 0, 0, 0, 0, 0, 1466, 1129, 0, 0,
	776, 0, 0, 0, 1123, 776, 0, 0, 1753, 1754,
	1130, 0, 1466, 0, 1135, 0, 0, 0, 0, 0,
	998, 1029, 0, 0, 0, 1140, 1141, 0, 0, 682,
	0, 1138, 1128, 1127, 0, 0, 477, 0, 0, 683,
	0, 0, 0, 1129, 0, 0, 682, 858, 1138, 1128,
	1127, 0, 0, 1236, 0, 0, 1130, 0, 0, 0,
	1129, 1058, 0, 1131, 1132, 1134, 0, 0, 1627, 1133,
	0, 0, 0, 1130, 0, 0, 0, 0, 0, 858,
	1288, 0, 0, 0, 0, 0, 1811, 261, 683, 0,
	858, 682, 0, 1138, 1128, 1127, 469, 0, 0, 0,
	0, 0, 1647, 0, 0, 1129, 0, 1828, 1829, 1830,
	0, 1717, 0, 0, 0, 0, 1123, 0, 1130, 0,
	0, 0, 1655, 0, 0, 0, 1135, 682, 1672, 1138,
	1128, 1127, 0, 0, 0, 0, 0, 1140, 1141, 0,
	0, 1129, 0, 0, 0, 0, 0, 682, 0, 1138,
	1128, 1127, 0, 0, 1130, 0, 49, 0, 0, 0,
	0, 1129, 1123, 0, 0, 0, 0, 0, 0, 0,
	1697, 0, 1135, 0, 1130, 1131, 1132, 1134, 0, 1123,
	0, 1133, 0, 1140, 1141, 1811, 0, 0, 1885, 1135,
	0, 0, 1288, 0, 0, 0, 0, 0, 0, 0,
	1140, 1141, 0, 0, 0, 0, 1139, 0, 1726, 0,
	1200, 0, 0, 1729, 1730, 1731, 1732, 1733, 1811, 0,
	683, 1131, 1132, 1134, 1123, 0, 0, 1133, 0, 0,
	0, 0, 0, 0, 1135, 0, 0, 0, 1131, 1132,
	1134, 0, 0, 0, 1133, 1140, 1141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1847, 0, 0, 0,
	1123, 0, 1234, 1524, 0, 0, 0, 0, 0, 0,
	1135, 0, 0, 0, 0, 0, 0, 0, 1243, 0,
	1123, 1140, 1141, 1131, 1132, 1134, 0, 0, 0, 1133,
	1135, 640, 642, 0, 0, 0, 0, 0, 0, 0,
	1288, 1140, 1141, 0, 733, 0, 1790, 0, 49, 49,
	0, 1796, 0, 0, 0, 1272, 1275, 0, 1139, 1131,
	1132, 1134, 0, 0, 0, 1133, 0, 0, 0, 0,
	0, 1285, 779, 781, 782, 783, 784, 785, 786, 1131,
	1132, 1134, 0, 0, 0, 1133, 733, 1831, 1291, 742,
	741, 751, 752, 744, 745, 746, 747, 748, 749, 750,
	743, 711, 714, 754, 1139, 0, 0, 0, 1665, 1842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1139, 0, 1851, 1852, 1853, 0, 0, 0, 0,
	1856, 742, 741, 751, 752, 744, 745, 746, 747, 748,
	749, 750, 743, 632, 0, 754, 45, 0, 449, 450,
	451, 453, 0, 0, 1671, 0, 49, 456, 454, 464,
	465, 0, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 1671, 0, 0, 1389, 0, 0, 0, 0, 0,
	0, 0, 1892, 1893, 1894, 0, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 452, 0, 0, 1400, 0,
	0, 0, 1139, 0, 0, 0, 1379, 0, 0, 0,
	49, 49, 1905, 0, 0, 0, 1286, 0, 0, 0,
	49, 1604, 1139, 0, 0, 0, 0, 0, 0, 1425,
	0, 742, 741, 751, 752, 744, 745, 746, 747, 748,
	749, 750, 743, 0, 0, 754, 711, 1441, 0, 0,
	945, 0, 1837, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 0, 0,
	0, 0, 1566, 742, 741, 751, 752, 744, 745, 746,
	747, 748, 749, 750, 743, 0, 1196, 754, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 776, 776,
	0, 1653, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 742, 741, 751, 752, 744, 745, 746, 747, 748,
	749, 750, 743, 907, 1195, 754, 0, 919, 0, 0,
	49, 0, 0, 0, 49, 49, 0, 909, 46, 49,
	49, 49, 49, 49, 0, 0, 0, 0, 0, 0,
	0, 1696, 0, 49, 0, 0, 0, 1604, 0, 842,
	450, 451, 453, 0, 458, 463, 1532, 0, 456, 454,
	464, 465, 753, 742, 741, 751, 752, 744, 745, 746,
	747, 748, 749, 750, 743, 0, 0, 754, 0, 0,
	0, 818, 49, 0, 0, 0, 1560, 1561, 1275, 0,
	0, 0, 0, 0, 0, 0, 452, 0, 0, 0,
	0, 0, 0, 908, 753, 49, 0, 460, 0, 462,
	461, 0, 447, 0, 0, 45, 820, 449, 450, 451,
	453, 49, 818, 0, 468, 467, 456, 454, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 0, 0, 0, 0,
	0, 1187, 1188, 1189, 0, 0, 0, 820, 0, 1191,
	1192, 1193, 0, 0, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 0, 122, 123, 46, 124, 125, 126, 128, 127,
	0, 973, 821, 46, 753, 779, 0, 0, 0, 0,
	71, 819, 0, 0, 0, 0, 825, 824, 0, 0,
	1662, 0, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 821, 0, 0, 753, 0, 0, 0,
	0, 71, 819, 0, 0, 0, 0, 825, 824, 0,
	0, 1210, 1211, 0, 1212, 458, 463, 0, 0, 1215,
	0, 0, 1713, 0, 0, 1604, 0, 0, 0, 0,
	0, 1218, 1219, 0, 753, 1220, 1221, 0, 1222, 1223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1741,
	0, 1158, 0, 0, 72, 0, 0, 0, 460, 0,
	462, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 458, 463, 0, 0, 0, 0, 0,
	1332, 0, 46, 0, 0, 0, 753, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 460, 0, 462, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1380, 1381, 0, 468, 467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1823, 0, 0, 1824, 0,
	0, 1826, 0, 0, 0, 0, 0, 0, 0, 0,
	1393, 1394, 1395, 1396, 0, 0, 0, 0, 1836, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1741, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 382, 369, 776, 327, 384, 295,
	315, 393, 317, 318, 354, 273, 337, 0, 312, 292,
	0, 0, 0, 298, 266, 307, 267, 296, 329, 0,
	293, 0, 371, 340, 0, 0, 0, 391, 0, 345,
	1878, 776, 0, 0, 0, 332, 373, 335, 364, 326,
	355, 282, 344, 386, 313, 350, 387, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 380, 309, 279, 396, 0, 353, 265,
	347, 0, 0, 271, 274, 392, 378, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 331, 336, 361, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1387,
	0, 0, 299, 0, 343, 0, 0, 0, 278, 272,
	0, 328, 0, 0, 1513, 281, 0, 300, 362, 0,
	262, 367, 375, 325, 0, 0, 379, 322, 321, 0,
	0, 0, 0, 0, 1002, 314, 259, 358, 394, 383,
	333, 372, 297, 308, 0, 304, 0, 0, 0, 305,
	306, 342, 356, 0, 0, 0, 0, 0, 381, 374,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1210, 0,
	0, 270, 263, 301, 365, 368, 286, 352, 275, 310,
	359, 311, 334, 291, 0, 0, 0, 0, 0, 1011,
	1017, 1015, 0, 0, 1012, 0, 1475, 1010, 0, 0,
	1019, 0, 0, 1018, 1004, 1014, 1016, 1013, 1008, 0,
	1003, 0, 1021, 1020, 1022, 1001, 1024, 0, 0, 0,
	1028, 1025, 1027, 1026, 0, 1023, 0, 0, 0, 1483,
	0, 0, 0, 0, 1005, 1006, 0, 0, 0, 0,
	0, 0, 0, 0, 1641, 0, 0, 1642, 0, 1643,
	0, 1644, 0, 1645, 1646, 1007, 1009, 0, 0, 0,
	0, 0, 0, 268, 0, 0, 0, 0, 0, 269,
	290, 376, 0, 0, 0, 0, 1484, 1482, 1478, 1477,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 289, 283, 284, 338, 339, 388, 389, 390,
	363, 280, 0, 287, 288, 0, 370, 0, 0, 0,
	341, 0, 0, 0, 395, 0, 0, 0, 0, 0,
	0, 0, 316, 264, 320, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 0, 0, 324, 319, 346, 348,
	357, 366, 377, 385, 360, 294, 330, 0, 382, 369,
	0, 327, 384, 295, 315, 393, 317, 318, 354, 273,
	337, 0, 312, 292, 0, 0, 0, 298, 266, 307,
	267, 296, 329, 1332, 293, 1332, 371, 340, 0, 0,
	0, 391, 0, 345, 0, 0, 0, 0, 0, 332,
	373, 335, 364, 326, 355, 282, 344, 386, 313, 350,
	387, 0, 0, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 380, 309, 279,
	396, 0, 353, 265, 347, 0, 0, 271, 274, 392,
	378, 303, 302, 0, 0, 0, 0, 0, 0, 0,
	331, 336, 361, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 0, 343, 0,
	0, 0, 278, 272, 0, 328, 0, 0, 0, 281,
	0, 300, 362, 0, 262, 367, 375, 325, 0, 0,
	379, 322, 321, 0, 0, 0, 0, 0, 0, 314,
	259, 358, 394, 383, 333, 372, 297, 308, 0, 304,
	0, 0, 0, 305, 306, 342, 356, 0, 0, 0,
	0, 0, 381, 374, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 263, 301, 365, 368,
	286, 352, 275, 310, 359, 311, 334, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1612, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 269, 290, 376, 0, 0, 0, 0,
	1484, 1482, 682, 0, 1138, 1128, 1127, 0, 351, 0,
	0, 0, 0, 1480, 0, 0, 1129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1130,
	0, 0, 0, 0, 0, 285, 289, 283, 284, 338,
	339, 388, 389, 390, 363, 280, 0, 287, 288, 0,
	370, 0, 0, 0, 341, 0, 0, 0, 395, 0,
	0, 0, 0, 0, 0, 0, 316, 264, 320, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 0, 0,
	324, 319, 346, 348, 357, 366, 377, 385, 360, 294,
	330, 382, 369, 0, 327, 384, 295, 315, 393, 317,
	318, 354, 273, 337, 0, 312, 292, 0, 0, 0,
	298, 266, 307, 267, 296, 329, 0, 293, 0, 371,
	340, 0, 0, 0, 391, 0, 345, 0, 0, 0,
	0, 0, 332, 373, 335, 364, 326, 355, 282, 344,
	386, 313, 350, 387, 0, 1135, 0, 34, 0, 0,
	0, 0, 0, 0, 0, 0, 1140, 1141, 0, 349,
	380, 309, 279, 396, 0, 353, 265, 347, 0, 0,
	271, 274, 392, 378, 303, 302, 0, 0, 0, 0,
	0, 0, 0, 331, 336, 361, 323, 0, 0, 0,
	0, 0, 0, 0, 1131, 1132, 1134, 0, 0, 299,
	1133, 343, 0, 0, 0, 278, 272, 0, 328, 0,
	0, 1455, 281, 0, 300, 362, 0, 262, 367, 375,
	325, 0, 0, 379, 322, 321, 0, 0, 0, 0,
	0, 0, 314, 259, 358, 394, 383, 333, 372, 297,
	308, 0, 304, 0, 0, 0, 305, 306, 342, 356,
	0, 0, 0, 0, 0, 381, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 263,
	301, 365, 368, 286, 352, 275, 310, 359, 311, 334,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1483, 1139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 376, 0,
	0, 0, 0, 1484, 1482, 0, 0, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 338, 339, 388, 389, 390, 363, 280, 0,
	287, 288, 0, 370, 0, 0, 0, 341, 0, 0,
	0, 395, 0, 0, 0, 0, 0, 0, 0, 316,
	264, 320, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 0, 0, 324, 319, 346, 348, 357, 366, 377,
	385, 360, 294, 330, 382, 369, 0, 327, 384, 295,
	315, 393, 317, 318, 354, 273, 337, 0, 312, 292,
	0, 0, 0, 298, 266, 307, 267, 296, 329, 0,
	293, 0, 371, 340, 0, 94, 0, 391, 33, 345,
	0, 0, 0, 0, 0, 332, 373, 335, 364, 326,
	355, 282, 344, 386, 313, 350, 387, 0, 0, 0,
	45, 1149, 47, 34, 0, 1147, 0, 0, 0, 0,
	0, 0, 349, 380, 309, 279, 396, 0, 353, 265,
	347, 0, 0, 271, 274, 392, 378, 303, 302, 0,
	0, 0, 1146, 0, 0, 0, 331, 336, 361, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1255, 1145, 299, 0, 343, 0, 0, 0, 278, 272,
	0, 328, 79, 0, 0, 281, 0, 300, 362, 0,
	262, 367, 375, 325, 0, 0, 379, 322, 321, 0,
	0, 0, 0, 0, 0, 314, 259, 358, 394, 383,
	333, 372, 297, 308, 0, 304, 0, 95, 0, 305,
	306, 342, 356, 0, 0, 0, 0, 0, 381, 374,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 263, 301, 365, 368, 286, 352, 275, 310,
	359, 311, 334, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 0, 122, 123, 0, 124, 125, 126, 128,
	127, 96, 97, 98, 102, 100, 99, 101, 73, 75,
	0, 71, 74, 80, 76, 77, 78, 92, 81, 82,
	83, 84, 85, 86, 87, 88, 89, 90, 91, 93,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 0,
	0, 0, 0, 268, 0, 0, 0, 0, 0, 269,
	290, 376, 0, 0, 0, 0, 0, 258, 0, 0,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 289, 283, 284, 338, 339, 388, 389, 390,
	363, 280, 0, 287, 288, 0, 370, 0, 0, 0,
	341, 0, 0, 0, 395, 72, 0, 0, 0, 0,
	0, 0, 316, 264, 320, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 0, 0, 324, 319, 346, 348,
	357, 366, 377, 385, 360, 294, 330, 382, 369, 0,
	327, 384, 295, 315, 393, 317, 318, 354, 273, 337,
	0, 312, 292, 0, 0, 0, 298, 266, 307, 267,
	296, 329, 0, 293, 0, 371, 340, 0, 94, 0,
	391, 0, 345, 0, 0, 0, 0, 0, 332, 373,
	335, 364, 326, 355, 282, 344, 386, 313, 350, 387,
	0, 0, 0, 34, 0, 707, 34, 708, 0, 0,
	0, 0, 0, 0, 0, 349, 380, 309, 279, 396,
	0, 353, 265, 347, 0, 0, 271, 274, 392, 378,
	303, 302, 0, 0, 0, 0, 0, 0, 0, 331,
	336, 361, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 343, 0, 0,
	0, 278, 272, 0, 328, 79, 0, 0, 281, 0,
	300, 362, 0, 262, 367, 375, 325, 0, 0, 379,
	322, 321, 0, 0, 0, 0, 0, 0, 314, 259,
	358, 394, 383, 333, 372, 297, 308, 0, 304, 0,
	95, 0, 305, 306, 342, 356, 0, 0, 0, 0,
	0, 381, 374, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 263, 301, 365, 368, 286,
	352, 275, 310, 359, 311, 334, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 0, 122, 123, 0, 124,
	125, 126, 128, 127, 96, 97, 98, 102, 100, 99,
	101, 73, 75, 0, 71, 74, 80, 76, 77, 78,
	92, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 93, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 269, 290, 376, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 289, 283, 284, 338, 339,
	388, 389, 390, 363, 280, 0, 287, 288, 0, 370,
	0, 0, 0, 341, 0, 0, 0, 395, 72, 0,
	0, 0, 0, 0, 0, 316, 264, 320, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 0, 0, 324,
	319, 346, 348, 357, 366, 377, 385, 360, 294, 330,
	382, 369, 0, 327, 384, 295, 315, 393, 317, 318,
	354, 273, 337, 0, 312, 292, 0, 0, 0, 298,
	266, 307, 267, 296, 329, 0, 293, 0, 371, 340,
	0, 0, 0, 391, 0, 345, 0, 0, 0, 0,
	0, 332, 373, 335, 364, 326, 355, 282, 344, 386,
	313, 350, 387, 0, 405, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 407, 0, 349, 380,
	309, 279, 396, 0, 353, 265, 347, 0, 0, 271,
	274, 392, 378, 303, 302, 0, 0, 0, 0, 0,
	0, 0, 331, 336, 361, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 0,
	343, 0, 0, 0, 278, 272, 0, 328, 0, 0,
	0, 281, 0, 300, 362, 0, 262, 367, 375, 325,
	0, 0, 379, 322, 321, 0, 0, 0, 0, 0,
	0, 314, 259, 358, 394, 383, 333, 372, 297, 308,
	0, 304, 0, 0, 0, 305, 306, 342, 356, 682,
	0, 1138, 1128, 1127, 381, 374, 0, 0, 0, 0,
	0, 0, 0, 1129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1130, 270, 263, 301,
	365, 368, 286, 352, 275, 310, 359, 311, 334, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1745, 1746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 268,
	0, 0, 0, 0, 0, 269, 290, 376, 0, 0,
	0, 0, 1123, 258, 0, 0, 0, 0, 0, 0,
	351, 0, 1135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1140, 1141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 289, 283,
	284, 338, 339, 388, 389, 390, 363, 280, 0, 287,
	288, 0, 370, 0, 0, 0, 341, 0, 0, 0,
	395, 1131, 1132, 1134, 0, 0, 0, 1133, 316, 264,
	320, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	0, 0, 324, 319, 346, 348, 357, 366, 377, 385,
	360, 294, 330, 382, 369, 0, 327, 384, 295, 315,
	393, 317, 318, 354, 273, 337, 0, 312, 292, 0,
	0, 0, 298, 266, 307, 267, 296, 329, 0, 293,
	0, 371, 340, 0, 0, 0, 391, 0, 345, 0,
	0, 0, 0, 0, 332, 373, 335, 364, 326, 355,
	282, 344, 386, 313, 350, 387, 0, 0, 0, 34,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 349, 380, 309, 279, 396, 0, 353, 265, 347,
	0, 0, 271, 274, 392, 378, 303, 302, 0, 0,
	0, 0, 0, 0, 0, 331, 336, 361, 323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1551,
	0, 299, 0, 343, 1139, 0, 0, 278, 272, 0,
	328, 0, 0, 0, 281, 0, 300, 362, 0, 262,
	367, 375, 325, 0, 0, 379, 322, 321, 0, 0,
	0, 0, 0, 0, 314, 259, 358, 394, 383, 333,
	372, 297, 308, 0, 304, 0, 0, 0, 305, 306,
	342, 356, 682, 0, 1138, 1128, 1127, 381, 374, 0,
	0, 0, 0, 0, 0, 0, 1129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1130,
	270, 263, 301, 365, 368, 286, 352, 275, 310, 359,
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	311, 334, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
<<<<<<< HEAD
	0, 0, 0, 1571, 0, 0, 0, 0, 0, 0,
=======
	0, 0, 0, 0, 1880, 0, 0, 0, 0, 0,
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 269, 290,
	377, 0, 0, 0, 1125, 0, 258, 0, 0, 0,
	0, 0, 0, 351, 1137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1143, 1144, 0, 0, 0,
	0, 0, 0, 0, 0, 1139, 0, 0, 0, 0,
	285, 289, 283, 284, 338, 339, 389, 390, 391, 363,
	280, 0, 287, 288, 0, 371, 0, 0, 0, 341,
	0, 0, 0, 396, 1133, 1134, 1136, 0, 0, 0,
	1135, 316, 264, 320, 0, 0, 0, 0, 0, 0,
	0, 276, 277, 0, 0, 324, 319, 346, 348, 357,
	367, 378, 386, 360, 294, 330, 383, 370, 0, 327,
	385, 295, 315, 394, 317, 318, 354, 273, 337, 0,
	312, 292, 0, 0, 0, 298, 266, 307, 267, 296,
<<<<<<< HEAD
	329, 0, 293, 0, 372, 340, 0, 0, 0, 392,
	0, 345, 0, 0, 0, 0, 0, 332, 374, 335,
	365, 326, 355, 282, 344, 387, 313, 350, 388, 0,
	0, 0, 34, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 349, 381, 309, 279, 397, 0,
	353, 265, 347, 0, 0, 271, 274, 393, 379, 303,
	302, 526, 0, 0, 0, 0, 0, 0, 331, 336,
=======
	329, 0, 293, 0, 371, 340, 0, 0, 0, 391,
	0, 345, 0, 0, 0, 0, 0, 332, 373, 335,
	364, 326, 355, 282, 344, 386, 313, 350, 387, 0,
	0, 0, 45, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 349, 380, 309, 279, 396, 0,
	353, 265, 347, 0, 0, 271, 274, 392, 378, 303,
	302, 0, 0, 0, 0, 0, 0, 0, 331, 336,
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	361, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 343, 1142, 0, 0,
	278, 272, 0, 328, 0, 0, 0, 281, 0, 300,
<<<<<<< HEAD
	362, 0, 262, 368, 376, 325, 0, 0, 380, 322,
	321, 0, 0, 0, 0, 0, 0, 314, 259, 358,
	395, 384, 333, 373, 297, 308, 0, 304, 0, 0,
	0, 305, 306, 342, 356, 683, 0, 1141, 1130, 1129,
	382, 364, 375, 0, 0, 0, 0, 0, 0, 1131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1132, 0, 270, 263, 301, 366, 369, 286,
	352, 275, 310, 359, 311, 334, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 269, 290, 377, 0, 0, 0, 1125, 0,
	258, 0, 0, 0, 0, 0, 0, 351, 1137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1143,
	1144, 0, 0, 0, 0, 0, 0, 0, 0, 1139,
	0, 0, 0, 0, 285, 289, 283, 284, 338, 339,
	389, 390, 391, 363, 280, 0, 287, 288, 0, 371,
	0, 0, 0, 341, 0, 0, 0, 396, 1133, 1134,
	1136, 0, 0, 0, 1135, 316, 264, 320, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 0, 0, 324,
	319, 346, 348, 357, 367, 378, 386, 360, 294, 330,
	383, 370, 0, 327, 385, 295, 315, 394, 317, 318,
	354, 273, 337, 0, 312, 292, 0, 0, 0, 298,
	266, 307, 267, 296, 329, 0, 293, 0, 372, 340,
	0, 0, 0, 392, 0, 345, 0, 0, 0, 0,
	0, 332, 374, 335, 365, 326, 355, 282, 344, 387,
	313, 350, 388, 0, 0, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 349, 381,
	309, 279, 397, 0, 353, 265, 347, 0, 0, 271,
	274, 393, 379, 303, 302, 0, 0, 0, 0, 0,
	0, 0, 331, 336, 361, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 0,
	343, 1142, 0, 0, 278, 272, 0, 328, 0, 0,
	0, 281, 0, 300, 362, 0, 262, 368, 376, 325,
	0, 0, 380, 322, 321, 0, 0, 0, 0, 0,
	0, 314, 259, 358, 395, 384, 333, 373, 297, 308,
	0, 304, 0, 0, 0, 305, 306, 342, 356, 0,
	0, 0, 0, 0, 382, 364, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 263,
	301, 366, 369, 286, 352, 275, 310, 359, 311, 334,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 377, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 338, 339, 389, 390, 391, 363, 280, 0,
	287, 288, 0, 371, 0, 0, 0, 341, 0, 0,
	0, 396, 0, 0, 0, 0, 0, 0, 0, 316,
	264, 320, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 0, 0, 324, 319, 346, 348, 357, 367, 378,
	386, 360, 294, 330, 383, 370, 0, 327, 385, 295,
	315, 394, 317, 318, 354, 273, 337, 0, 312, 292,
	0, 0, 0, 298, 266, 307, 267, 296, 329, 0,
	293, 0, 372, 340, 0, 0, 0, 392, 0, 345,
	0, 0, 0, 0, 0, 332, 374, 335, 365, 326,
	355, 282, 344, 387, 313, 350, 388, 0, 0, 0,
	50, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 381, 309, 279, 397, 0, 353, 265,
	347, 0, 0, 271, 274, 393, 379, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 331, 336, 361, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 343, 0, 0, 0, 278, 272,
	0, 328, 0, 0, 0, 281, 0, 300, 362, 0,
	262, 368, 376, 325, 0, 0, 380, 322, 321, 0,
	0, 0, 0, 0, 0, 314, 0, 358, 395, 384,
	333, 373, 297, 308, 0, 304, 0, 0, 0, 305,
	306, 342, 356, 0, 0, 0, 0, 0, 382, 364,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 263, 301, 366, 369, 286, 352, 275,
	310, 359, 311, 334, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 593, 0, 594, 0, 0, 0,
	0, 0, 0, 0, 584, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 425, 0, 0, 45, 574, 571,
	572, 576, 577, 578, 579, 0, 0, 0, 575, 580,
	465, 466, 0, 0, 0, 0, 0, 0, 563, 0,
	0, 592, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	269, 290, 377, 0, 0, 560, 561, 0, 0, 0,
	0, 609, 0, 562, 0, 351, 558, 559, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 0, 0,
	0, 0, 285, 289, 283, 284, 338, 339, 389, 390,
	391, 363, 280, 0, 287, 288, 0, 371, 0, 0,
	0, 341, 0, 0, 0, 396, 0, 0, 0, 0,
	0, 0, 0, 316, 264, 320, 570, 0, 0, 0,
	0, 549, 0, 276, 277, 0, 0, 324, 319, 346,
	348, 357, 367, 378, 386, 360, 294, 330, 548, 0,
	0, 0, 0, 547, 0, 0, 0, 0, 0, 0,
	593, 0, 594, 0, 0, 0, 0, 0, 0, 0,
	584, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	425, 0, 0, 45, 574, 571, 572, 576, 577, 578,
	579, 0, 0, 0, 575, 580, 465, 466, 550, 0,
	0, 0, 595, 545, 563, 0, 0, 592, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 611, 0, 596, 597, 0, 0,
	0, 560, 561, 0, 0, 0, 0, 609, 0, 562,
	0, 0, 1001, 559, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 0, 0,
	0, 607, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1003, 0, 598,
	608, 604, 605, 602, 603, 601, 600, 599, 610, 586,
	587, 588, 589, 591, 0, 0, 469, 468, 590, 0,
	0, 0, 570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 0, 0,
	0, 0, 0, 1012, 1018, 1016, 0, 0, 1013, 0,
	0, 1011, 0, 0, 1020, 0, 0, 1019, 1005, 1015,
	1017, 1014, 1009, 0, 1004, 0, 1022, 1021, 1023, 1002,
	1025, 0, 0, 0, 1029, 1026, 1028, 1027, 595, 1024,
	0, 0, 0, 0, 0, 0, 0, 0, 1006, 1007,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	611, 0, 596, 597, 0, 0, 0, 0, 0, 1008,
	1010, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 608, 604, 605, 602,
	603, 601, 600, 599, 610, 586, 587, 588, 589, 591,
	549, 0, 469, 468, 590, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 548, 0, 0,
	0, 0, 547, 0, 0, 0, 0, 0, 0, 593,
	0, 594, 0, 0, 0, 0, 0, 0, 0, 584,
	585, 606, 0, 0, 0, 0, 0, 1713, 0, 425,
	0, 0, 45, 574, 571, 572, 576, 577, 578, 579,
	0, 0, 0, 575, 580, 465, 466, 550, 1714, 0,
	0, 0, 545, 563, 0, 0, 592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 0, 0, 0, 0, 0, 0, 0,
	560, 561, 0, 0, 0, 0, 609, 853, 562, 548,
	0, 558, 559, 564, 547, 0, 0, 0, 0, 0,
	0, 593, 0, 594, 0, 0, 0, 0, 0, 0,
	607, 584, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 425, 0, 0, 45, 574, 571, 572, 576, 577,
	578, 579, 0, 0, 0, 575, 580, 465, 466, 550,
	0, 0, 0, 0, 545, 563, 0, 0, 592, 0,
	0, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 0, 0, 0, 0,
	0, 0, 560, 561, 858, 0, 0, 0, 609, 0,
	562, 0, 548, 558, 559, 564, 0, 547, 0, 0,
	0, 0, 0, 0, 593, 0, 594, 0, 0, 0,
	0, 0, 607, 0, 584, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 425, 0, 734, 45, 574, 571,
	572, 576, 577, 578, 579, 0, 0, 595, 575, 580,
	465, 466, 550, 0, 0, 0, 0, 545, 563, 0,
	0, 592, 0, 570, 0, 0, 0, 0, 0, 611,
	0, 596, 597, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 560, 561, 0, 0, 0,
	0, 609, 0, 562, 0, 0, 558, 559, 564, 0,
	0, 0, 582, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 608, 604, 605, 602, 603,
	601, 600, 599, 610, 586, 587, 588, 589, 591, 595,
	0, 469, 468, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 570, 0, 0, 0,
	0, 611, 0, 596, 597, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 608, 604, 605,
	602, 603, 601, 600, 599, 610, 586, 587, 588, 589,
	591, 0, 595, 469, 468, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 611, 0, 596, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 598,
	608, 604, 605, 602, 603, 601, 600, 599, 610, 586,
	587, 588, 589, 591, 549, 0, 469, 468, 590, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 0, 0, 0, 0, 547, 0, 0, 0,
	0, 0, 0, 593, 0, 594, 0, 0, 0, 0,
	0, 0, 0, 584, 585, 606, 0, 0, 0, 0,
	0, 0, 0, 425, 0, 0, 45, 574, 571, 572,
	576, 577, 578, 579, 0, 0, 0, 575, 580, 465,
	466, 550, 0, 0, 0, 0, 545, 563, 0, 0,
	592, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 560, 561, 858, 0, 0, 0,
	609, 0, 562, 548, 0, 558, 559, 564, 547, 0,
	0, 0, 0, 0, 0, 593, 0, 594, 0, 0,
	0, 0, 0, 0, 607, 584, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 425, 0, 0, 45, 574,
	571, 572, 576, 577, 578, 579, 0, 0, 0, 575,
	580, 465, 466, 550, 0, 0, 0, 0, 545, 563,
	0, 0, 592, 0, 0, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 0, 0, 560, 561, 0, 0,
	0, 0, 609, 0, 562, 0, 548, 558, 559, 564,
	0, 547, 0, 0, 0, 0, 0, 0, 593, 0,
	594, 0, 0, 0, 0, 0, 607, 0, 584, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 425, 0,
	0, 45, 574, 571, 572, 576, 577, 578, 579, 0,
	0, 595, 575, 580, 465, 466, 550, 0, 0, 0,
	0, 545, 563, 0, 0, 592, 0, 570, 0, 0,
	0, 0, 0, 611, 0, 596, 597, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 560,
	561, 0, 0, 0, 0, 609, 0, 562, 0, 0,
	558, 559, 564, 0, 0, 0, 582, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 608,
	604, 605, 602, 603, 601, 600, 599, 610, 586, 587,
	588, 589, 591, 595, 0, 469, 468, 590, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	570, 0, 0, 0, 0, 611, 0, 596, 597, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 608, 604, 605, 602, 603, 601, 600, 599, 610,
	586, 587, 588, 589, 591, 0, 595, 469, 468, 590,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 611, 0,
	596, 597, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	34, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 608, 604, 605, 602, 603, 601,
	600, 599, 610, 586, 587, 588, 589, 591, 0, 0,
	469, 468, 590, 0, 0, 0, 593, 0, 594, 0,
	0, 0, 0, 0, 0, 0, 584, 585, 0, 79,
	0, 846, 0, 0, 0, 0, 876, 0, 0, 45,
	574, 571, 572, 576, 577, 578, 579, 0, 0, 606,
	575, 580, 465, 466, 0, 0, 0, 0, 0, 0,
	563, 0, 0, 592, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 560, 561, 0,
	0, 0, 0, 609, 0, 562, 0, 0, 558, 559,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	0, 122, 123, 0, 124, 125, 126, 128, 127, 96,
	97, 98, 102, 100, 99, 101, 73, 75, 570, 71,
	74, 80, 76, 77, 78, 92, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 93, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 0, 0, 0,
	0, 845, 0, 683, 0, 1141, 1130, 1129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 683,
	1132, 1141, 1130, 1129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1131, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 611, 0, 596, 597,
	0, 0, 0, 72, 0, 0, 731, 730, 683, 0,
	1141, 1130, 1129, 0, 1452, 0, 0, 0, 0, 0,
	0, 0, 1131, 0, 732, 0, 0, 0, 0, 582,
	0, 0, 731, 730, 0, 1132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	732, 598, 608, 604, 605, 602, 603, 601, 600, 599,
	610, 586, 587, 588, 589, 591, 1125, 0, 469, 468,
	590, 683, 0, 1141, 1130, 1129, 1137, 0, 0, 0,
	0, 731, 730, 0, 0, 1131, 0, 1143, 1144, 0,
	0, 683, 1125, 1141, 1130, 1129, 0, 1139, 1132, 732,
	0, 0, 1137, 0, 0, 1131, 0, 606, 0, 0,
	0, 0, 0, 1143, 1144, 0, 0, 0, 1132, 0,
	0, 0, 0, 1139, 0, 0, 1133, 1134, 1136, 0,
	0, 0, 1135, 0, 0, 733, 0, 0, 0, 0,
	0, 1125, 0, 1457, 0, 0, 0, 0, 0, 0,
	0, 1137, 1133, 1134, 1136, 0, 0, 0, 1135, 0,
	0, 733, 1143, 1144, 731, 730, 0, 0, 0, 1457,
	0, 683, 1139, 1141, 1130, 1129, 0, 0, 0, 0,
	0, 0, 732, 0, 0, 1131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1132, 0,
	0, 1133, 1134, 1136, 1125, 0, 0, 1135, 0, 0,
	733, 0, 0, 0, 1137, 0, 0, 0, 1495, 0,
	0, 0, 0, 0, 0, 1143, 1144, 0, 0, 0,
	0, 0, 0, 0, 1137, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1143, 1144, 0, 0, 0,
	0, 0, 0, 0, 0, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 1133, 1134, 1136, 0, 0, 1142,
	1135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1111, 0, 0, 1133, 1134, 1136, 0, 0, 0,
	1135, 0, 0, 733, 0, 1142, 0, 0, 0, 0,
	0, 1457, 0, 0, 1670, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1143, 1144, 0, 0, 0,
	0, 0, 0, 0, 0, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 1142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1133, 1134, 1136, 0, 0, 0,
	1135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1142, 0, 0,
=======
	362, 0, 262, 367, 375, 325, 0, 0, 379, 322,
	321, 0, 0, 0, 0, 0, 0, 314, 259, 358,
	394, 383, 333, 372, 297, 308, 0, 304, 0, 0,
	0, 305, 306, 342, 356, 682, 0, 1138, 1128, 1127,
	381, 374, 0, 0, 0, 0, 0, 0, 0, 1129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1130, 270, 263, 301, 365, 368, 286, 352,
	275, 310, 359, 311, 334, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1875, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 268, 0, 0, 0, 0,
	0, 269, 290, 376, 0, 0, 0, 0, 1123, 258,
	0, 0, 0, 0, 0, 0, 351, 0, 1135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1140,
	1141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 289, 283, 284, 338, 339, 388,
	389, 390, 363, 280, 0, 287, 288, 0, 370, 0,
	0, 0, 341, 0, 0, 0, 395, 1131, 1132, 1134,
	0, 0, 0, 1133, 316, 264, 320, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 0, 0, 324, 319,
	346, 348, 357, 366, 377, 385, 360, 294, 330, 382,
	369, 0, 327, 384, 295, 315, 393, 317, 318, 354,
	273, 337, 0, 312, 292, 0, 0, 0, 298, 266,
	307, 267, 296, 329, 0, 293, 0, 371, 340, 0,
	0, 0, 391, 0, 345, 0, 0, 0, 0, 0,
	332, 373, 335, 364, 326, 355, 282, 344, 386, 313,
	350, 387, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 380, 309,
	279, 396, 0, 353, 265, 347, 0, 0, 271, 274,
	392, 378, 303, 302, 525, 0, 0, 0, 0, 0,
	0, 331, 336, 361, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 343,
	1139, 0, 0, 278, 272, 0, 328, 0, 0, 0,
	281, 0, 300, 362, 0, 262, 367, 375, 325, 0,
	0, 379, 322, 321, 0, 0, 0, 0, 0, 0,
	314, 259, 358, 394, 383, 333, 372, 297, 308, 0,
	304, 0, 0, 0, 305, 306, 342, 356, 682, 0,
	1138, 1128, 1127, 381, 374, 0, 0, 0, 0, 0,
	0, 0, 1129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1130, 270, 263, 301, 365,
	368, 286, 352, 275, 310, 359, 311, 334, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1663, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 376, 0, 0, 0,
	0, 1123, 258, 0, 0, 0, 0, 0, 0, 351,
	0, 1135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1140, 1141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	338, 339, 388, 389, 390, 363, 280, 0, 287, 288,
	0, 370, 0, 0, 0, 341, 0, 0, 0, 395,
	1131, 1132, 1134, 0, 0, 0, 1133, 316, 264, 320,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 0,
	0, 324, 319, 346, 348, 357, 366, 377, 385, 360,
	294, 330, 382, 369, 0, 327, 384, 295, 315, 393,
	317, 318, 354, 273, 337, 0, 312, 292, 0, 0,
	0, 298, 266, 307, 267, 296, 329, 0, 293, 0,
	371, 340, 0, 0, 0, 391, 0, 345, 0, 0,
	0, 0, 0, 332, 373, 335, 364, 326, 355, 282,
	344, 386, 313, 350, 387, 0, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 380, 309, 279, 396, 0, 353, 265, 347, 0,
	0, 271, 274, 392, 378, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 331, 336, 361, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 343, 1139, 0, 0, 278, 272, 0, 328,
	0, 0, 0, 281, 0, 300, 362, 0, 262, 367,
	375, 325, 0, 0, 379, 322, 321, 0, 0, 0,
	0, 0, 0, 314, 259, 358, 394, 383, 333, 372,
	297, 308, 0, 304, 0, 0, 0, 305, 306, 342,
	356, 682, 0, 1138, 1128, 1127, 381, 374, 0, 0,
	0, 0, 0, 0, 0, 1129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1130, 270,
	263, 301, 365, 368, 286, 352, 275, 310, 359, 311,
	334, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1569, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 268, 0, 0, 0, 0, 0, 269, 290, 376,
	0, 0, 0, 0, 1123, 258, 0, 0, 0, 0,
	0, 0, 351, 0, 1135, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1140, 1141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	289, 283, 284, 338, 339, 388, 389, 390, 363, 280,
	0, 287, 288, 0, 370, 0, 0, 0, 341, 0,
	0, 0, 395, 1131, 1132, 1134, 0, 0, 0, 1133,
	316, 264, 320, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 0, 0, 324, 319, 346, 348, 357, 366,
	377, 385, 360, 294, 330, 382, 1815, 0, 327, 384,
	295, 315, 393, 317, 318, 354, 273, 337, 0, 312,
	292, 0, 0, 0, 298, 266, 307, 267, 296, 329,
	0, 293, 0, 371, 340, 0, 0, 0, 391, 0,
	345, 0, 0, 0, 0, 0, 332, 373, 335, 364,
	326, 355, 282, 344, 386, 313, 350, 387, 424, 0,
	0, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 380, 309, 279, 396, 0, 353,
	265, 347, 0, 0, 271, 274, 392, 378, 303, 302,
	0, 0, 0, 0, 0, 0, 0, 331, 336, 361,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 0, 343, 1139, 0, 0, 278,
	272, 0, 328, 0, 0, 0, 281, 0, 300, 362,
	0, 262, 367, 375, 325, 0, 0, 379, 322, 321,
	0, 0, 0, 0, 0, 0, 314, 0, 358, 394,
	383, 333, 372, 297, 308, 0, 304, 0, 0, 0,
	305, 306, 342, 356, 682, 0, 1138, 1128, 1127, 381,
	374, 0, 0, 0, 0, 0, 0, 0, 1129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1130, 270, 263, 301, 365, 368, 286, 352, 275,
	310, 359, 311, 334, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	269, 290, 376, 0, 0, 0, 0, 1123, 0, 0,
	0, 0, 0, 0, 0, 351, 0, 1135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1140, 1141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 289, 283, 284, 338, 339, 388, 389,
	390, 363, 280, 0, 287, 288, 0, 370, 0, 0,
	0, 341, 0, 0, 0, 395, 1131, 1132, 1134, 0,
	0, 0, 1133, 316, 264, 320, 0, 0, 0, 0,
	0, 0, 0, 276, 277, 0, 0, 324, 319, 346,
	348, 357, 366, 377, 385, 360, 294, 330, 382, 369,
	0, 327, 384, 295, 315, 393, 317, 318, 354, 273,
	337, 0, 312, 292, 0, 0, 0, 298, 266, 307,
	267, 296, 329, 0, 293, 0, 371, 340, 0, 0,
	0, 391, 0, 345, 0, 0, 0, 0, 0, 332,
	373, 335, 364, 326, 355, 282, 344, 386, 313, 350,
	387, 0, 0, 0, 50, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 380, 309, 279,
	396, 0, 353, 265, 347, 0, 0, 271, 274, 392,
	378, 303, 302, 0, 0, 0, 0, 0, 0, 0,
	331, 336, 361, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 0, 343, 1139,
	0, 0, 278, 272, 0, 328, 0, 0, 0, 281,
	0, 300, 362, 0, 262, 367, 375, 325, 0, 0,
	379, 322, 321, 0, 0, 0, 0, 0, 0, 314,
	0, 358, 394, 383, 333, 372, 297, 308, 0, 304,
	0, 0, 0, 305, 306, 342, 356, 0, 0, 0,
	0, 0, 381, 374, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 263, 301, 365, 368,
	286, 352, 275, 310, 359, 311, 334, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 269, 290, 376, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 289, 283, 284, 338,
	339, 388, 389, 390, 363, 280, 0, 287, 288, 0,
	370, 0, 0, 0, 341, 0, 0, 0, 395, 0,
	0, 0, 0, 0, 0, 0, 316, 264, 320, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 0, 0,
	324, 319, 346, 348, 357, 366, 377, 385, 360, 294,
	330, 382, 369, 0, 327, 384, 295, 315, 393, 317,
	318, 354, 273, 337, 0, 312, 292, 0, 0, 0,
	298, 266, 307, 267, 296, 329, 0, 293, 0, 371,
	340, 0, 0, 0, 391, 0, 345, 0, 0, 0,
	0, 0, 332, 373, 335, 364, 326, 355, 282, 344,
	386, 313, 350, 387, 0, 0, 0, 34, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 349,
	380, 309, 279, 396, 0, 353, 265, 347, 0, 0,
	271, 274, 392, 378, 303, 302, 0, 0, 0, 0,
	0, 0, 0, 331, 336, 361, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 343, 0, 0, 0, 278, 272, 0, 328, 0,
	0, 0, 281, 0, 300, 362, 0, 262, 367, 375,
	325, 0, 0, 379, 322, 321, 0, 0, 0, 0,
	0, 0, 314, 0, 358, 394, 383, 333, 372, 297,
	308, 0, 304, 0, 0, 0, 305, 306, 342, 356,
	0, 0, 0, 0, 0, 381, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 263,
	301, 365, 368, 286, 352, 275, 310, 359, 311, 334,
	291, 0, 0, 0, 946, 947, 948, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 0, 593, 0, 0, 0, 0, 0, 0,
	0, 583, 584, 0, 0, 0, 0, 0, 0, 0,
	0, 424, 0, 0, 45, 573, 570, 571, 575, 576,
	577, 578, 0, 0, 0, 574, 579, 464, 465, 0,
	0, 0, 0, 0, 0, 562, 0, 0, 591, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 376, 0,
	0, 0, 559, 560, 0, 0, 0, 0, 608, 0,
	561, 351, 0, 557, 558, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 338, 339, 388, 389, 390, 363, 280, 0,
	287, 288, 0, 370, 0, 0, 0, 341, 0, 0,
	0, 395, 0, 0, 0, 0, 0, 0, 0, 316,
	264, 320, 569, 0, 0, 0, 0, 548, 0, 276,
	277, 0, 0, 324, 319, 346, 348, 357, 366, 377,
	385, 360, 294, 330, 547, 0, 0, 0, 0, 546,
	0, 0, 0, 0, 0, 0, 592, 0, 593, 0,
	0, 0, 0, 0, 0, 0, 583, 584, 0, 0,
	0, 0, 0, 0, 0, 0, 424, 0, 0, 45,
	573, 570, 571, 575, 576, 577, 578, 0, 0, 0,
	574, 579, 464, 465, 549, 0, 0, 0, 594, 544,
	562, 0, 0, 591, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	610, 0, 595, 596, 0, 0, 0, 559, 560, 0,
	0, 0, 0, 608, 0, 561, 0, 0, 1000, 558,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 0, 606, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1002, 0, 597, 607, 603, 604, 601,
	602, 600, 599, 598, 609, 585, 586, 587, 588, 590,
	0, 0, 468, 467, 589, 0, 0, 569, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 0, 0, 0, 0, 1011, 1017,
	1015, 0, 0, 1012, 0, 0, 1010, 0, 0, 1019,
	0, 0, 1018, 1004, 1014, 1016, 1013, 1008, 0, 1003,
	0, 1021, 1020, 1022, 1001, 1024, 0, 0, 0, 1028,
	1025, 1027, 1026, 594, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 1005, 1006, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 0, 595, 596, 0,
	0, 0, 0, 0, 1007, 1009, 0, 0, 0, 682,
	0, 1138, 1128, 1127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1129, 0, 0, 0, 0, 581, 0,
	0, 0, 0, 0, 0, 0, 1130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	597, 607, 603, 604, 601, 602, 600, 599, 598, 609,
	585, 586, 587, 588, 590, 548, 0, 468, 467, 589,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 547, 0, 0, 0, 0, 546, 0, 0,
	0, 0, 0, 0, 592, 0, 593, 0, 0, 0,
	0, 0, 0, 0, 583, 584, 605, 0, 0, 0,
	0, 0, 1711, 0, 424, 0, 0, 45, 573, 570,
	571, 575, 576, 577, 578, 0, 0, 0, 574, 579,
	464, 465, 549, 1712, 0, 0, 0, 544, 562, 0,
	0, 591, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1135, 0, 0, 0, 0, 548, 0, 0,
	0, 0, 0, 1140, 1141, 559, 560, 0, 0, 0,
	0, 608, 852, 561, 547, 0, 557, 558, 563, 546,
	0, 0, 0, 0, 0, 0, 592, 0, 593, 0,
	0, 0, 0, 0, 0, 606, 583, 584, 0, 0,
	0, 1131, 1132, 1134, 0, 0, 424, 1133, 0, 45,
	573, 570, 571, 575, 576, 577, 578, 0, 1455, 0,
	574, 579, 464, 465, 549, 0, 0, 0, 0, 544,
	562, 0, 0, 591, 0, 569, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	0, 0, 0, 0, 0, 0, 0, 559, 560, 857,
	0, 0, 0, 608, 0, 561, 547, 0, 557, 558,
	563, 546, 0, 0, 0, 0, 0, 0, 592, 0,
	593, 0, 0, 0, 0, 0, 0, 606, 583, 584,
	0, 0, 0, 0, 0, 0, 0, 0, 424, 0,
	733, 45, 573, 570, 571, 575, 576, 577, 578, 0,
	0, 594, 574, 579, 464, 465, 549, 0, 0, 0,
	0, 544, 562, 0, 0, 591, 0, 569, 0, 0,
	0, 0, 0, 610, 0, 595, 596, 0, 0, 0,
	0, 0, 0, 0, 1139, 0, 0, 0, 0, 559,
	560, 0, 0, 0, 0, 608, 0, 561, 0, 0,
	557, 558, 563, 0, 0, 0, 581, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 0, 0, 0, 0, 0, 0, 597, 607,
	603, 604, 601, 602, 600, 599, 598, 609, 585, 586,
	587, 588, 590, 594, 0, 468, 467, 589, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	0, 0, 0, 0, 0, 610, 0, 595, 596, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	597, 607, 603, 604, 601, 602, 600, 599, 598, 609,
	585, 586, 587, 588, 590, 594, 0, 468, 467, 589,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 610, 0, 595,
	596, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 682, 0, 1138, 1128, 1127, 605, 0, 0, 0,
	0, 0, 0, 0, 0, 1129, 0, 0, 0, 0,
	581, 0, 0, 0, 0, 0, 0, 0, 1130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 597, 607, 603, 604, 601, 602, 600, 599,
	598, 609, 585, 586, 587, 588, 590, 548, 0, 468,
	467, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 547, 0, 0, 0, 0, 546,
	0, 0, 0, 0, 0, 0, 592, 0, 593, 0,
	0, 0, 0, 0, 0, 0, 583, 584, 605, 0,
	0, 0, 0, 0, 0, 0, 424, 0, 0, 45,
	573, 570, 571, 575, 576, 577, 578, 0, 0, 0,
	574, 579, 464, 465, 549, 0, 0, 0, 0, 544,
	562, 0, 0, 591, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1135, 0, 682, 0, 0, 548,
	0, 0, 0, 0, 0, 1140, 1141, 559, 560, 857,
	0, 0, 0, 608, 0, 561, 547, 0, 557, 558,
	563, 546, 0, 0, 0, 0, 0, 0, 592, 0,
	593, 0, 0, 0, 0, 0, 0, 606, 583, 584,
	0, 0, 0, 1131, 1132, 1134, 0, 0, 424, 1133,
	0, 45, 573, 570, 571, 575, 576, 577, 578, 0,
	1110, 0, 574, 579, 464, 465, 549, 0, 0, 0,
	0, 544, 562, 0, 0, 591, 0, 569, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 0, 0, 0, 0, 0, 0, 0, 559,
	560, 0, 0, 0, 0, 608, 0, 561, 547, 0,
	557, 558, 563, 546, 0, 0, 0, 0, 0, 0,
	592, 0, 593, 0, 0, 0, 0, 0, 0, 606,
	583, 584, 0, 0, 0, 0, 0, 0, 0, 0,
	424, 0, 0, 45, 573, 570, 571, 575, 576, 577,
	578, 0, 0, 594, 574, 579, 464, 465, 549, 0,
	0, 0, 0, 544, 562, 0, 0, 591, 0, 569,
	0, 0, 0, 0, 0, 610, 0, 595, 596, 0,
	0, 0, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 559, 560, 0, 0, 0, 0, 608, 0, 561,
	0, 0, 557, 558, 563, 0, 0, 0, 581, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 0, 0, 0, 0, 0, 0, 0,
	597, 607, 603, 604, 601, 602, 600, 599, 598, 609,
	585, 586, 587, 588, 590, 594, 0, 468, 467, 589,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 0, 0, 0, 0, 0, 610, 0, 595,
	596, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 597, 607, 603, 604, 601, 602, 600, 599,
	598, 609, 585, 586, 587, 588, 590, 594, 0, 468,
	467, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 610,
	0, 595, 596, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 682, 0, 1138, 1128, 1127, 605, 0,
	0, 0, 0, 0, 0, 0, 0, 1129, 0, 0,
	0, 0, 581, 0, 0, 0, 0, 0, 0, 0,
	1130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 597, 607, 603, 604, 601, 602,
	600, 599, 598, 609, 585, 586, 587, 588, 590, 548,
	0, 468, 467, 589, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 547, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 0,
	593, 0, 0, 0, 0, 0, 0, 0, 583, 584,
	605, 0, 0, 0, 0, 0, 0, 0, 424, 0,
	0, 45, 573, 570, 571, 575, 576, 577, 578, 0,
	0, 0, 574, 579, 464, 465, 549, 0, 0, 0,
	0, 0, 562, 0, 0, 591, 1668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1140, 1141, 559,
	560, 0, 0, 0, 0, 608, 0, 561, 0, 0,
	557, 558, 563, 0, 0, 0, 0, 0, 0, 0,
	592, 0, 593, 0, 0, 0, 0, 0, 0, 606,
	583, 584, 0, 0, 0, 1131, 1132, 1134, 0, 0,
	424, 1133, 0, 45, 573, 570, 571, 575, 576, 577,
	578, 0, 1455, 0, 574, 579, 464, 465, 0, 0,
	0, 0, 0, 0, 562, 0, 0, 591, 0, 569,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 560, 0, 0, 0, 0, 608, 0, 561,
	0, 0, 557, 558, 563, 0, 0, 0, 0, 0,
	0, 0, 592, 0, 593, 0, 0, 0, 0, 0,
	0, 606, 583, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 875, 0, 0, 45, 573, 570, 571, 575,
	576, 577, 578, 0, 0, 594, 574, 579, 464, 465,
	0, 0, 0, 0, 0, 0, 562, 0, 0, 591,
	0, 569, 0, 0, 0, 0, 0, 610, 0, 595,
	596, 0, 0, 0, 0, 0, 0, 0, 1139, 0,
	0, 0, 0, 559, 560, 0, 0, 0, 0, 608,
	0, 561, 0, 0, 557, 558, 563, 0, 0, 0,
	581, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 0, 0, 0, 0,
	0, 0, 597, 607, 603, 604, 601, 602, 600, 599,
	598, 609, 585, 586, 587, 588, 590, 594, 0, 468,
	467, 589, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 569, 0, 0, 0, 0, 0, 610,
	0, 595, 596, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 34, 0, 0, 605, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 597, 607, 603, 604, 601, 602,
	600, 599, 598, 609, 585, 586, 587, 588, 590, 594,
	0, 468, 467, 589, 79, 0, 845, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 610, 0, 595, 596, 0, 0, 0, 0, 682,
	0, 1138, 1128, 1127, 0, 0, 0, 0, 0, 95,
	605, 0, 0, 1129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 1130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 597, 607, 603, 604,
	601, 602, 600, 599, 598, 609, 585, 586, 587, 588,
	590, 0, 0, 468, 467, 589, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 0, 122, 123, 0, 124, 125,
	126, 128, 127, 96, 97, 98, 102, 100, 99, 101,
	73, 75, 605, 71, 74, 80, 76, 77, 78, 92,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 93, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 0, 1123, 0, 0, 844, 0, 0, 0, 0,
	0, 0, 1135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1140, 1141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1131, 1132, 1134, 0, 0, 0, 1133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 1493, 0,
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
<<<<<<< HEAD
	0, 0, 0, 0, 0, 0, 0, 1142,
}

var yyPact = [...]int16{
	543, -1000, -262, -1000, -1000, 1450, 623, 412, -1000, -1000,
	-1000, 940, 499, 498, 490, 191, 446, 810, 591, 927,
	505, 393, -1000, -226, -200, -1000, -106, 485, -1000, 1273,
	-1000, 4718, 4718, 4718, -1000, 282, 810, 810, 393, 108,
	393, 1466, 454, 1462, 732, -1000, 606, -1000, 1593, 603,
	-1000, 393, 927, 723, -1000, -1000, -1000, -1000, 197, 189,
	805, 141, -153, -9, -1000, -1000, -1000, -1000, -1000, 1376,
	-1000, -1000, -1000, 1376, 54, 1447, 1376, 1447, -1000, 1376,
	1447, 35, 35, 35, 35, 35, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1441, 1439, -1000, 1376, 1376, 1376, 1376,
	1376, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1438, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1428, 82, 1428, 1383, 1383, -1000, -1000, 141,
	141, 1435, 927, 810, 1461, 1459, 927, -241, 927, 927,
	1658, -1000, -1000, -1000, 135, 927, 1577, 5867, 4718, 7019,
	927, -1000, 1576, 512, 927, 5099, -1000, 1549, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1432, 761, 810, 308, 97,
	1345, 491, 313, 430, 1077, 306, -1000, -1000, -1000, 801,
	-1000, 810, -1000, 1686, -1000, -1000, 303, -1000, 300, 719,
	969, 927, 1431, 161, 1429, 3769, 914, -1000, -267, -1000,
	-38, -1000, -1000, 822, 35, 1376, -1000, 35, 812, 35,
	35, -1000, -1000, 616, 1559, 616, 616, 616, 616, 951,
	951, -129, -129, -1000, -1000, -1000, 896, -1000, 857, 1428,
	-1000, -1000, -1000, 855, -1000, 927, 810, 1427, 1458, 927,
	927, 1592, 435, -1000, -1000, 1591, 1590, 1305, -1000, -1000,
	133, -1000, -1000, 454, 810, -1000, 587, -1000, -1000, -1000,
=======
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1139,
}

var yyPact = [...]int16{
	517, -1000, -246, -1000, -1000, 1462, 238, 379, -1000, -1000,
	-1000, 948, 494, 493, 468, 197, 433, 929, 570, 935,
	499, 389, -1000, -218, -182, -1000, -89, 455, -1000, 1295,
	-1000, 4675, 4675, 4675, -1000, 290, 929, 929, 389, 111,
	389, 1490, 502, 1486, 738, -1000, 602, -1000, 1584, 598,
	-1000, 389, 935, 737, -1000, -1000, -1000, -1000, 222, 162,
	150, 299, -145, 2, -1000, -1000, -1000, -1000, -1000, 1389,
	-1000, -1000, -1000, 1389, 65, 1461, 1389, 1461, -1000, 1389,
	1461, 54, 54, 54, 54, 54, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1460, 1459, -1000, 1389, 1389, 1389, 1389,
	1389, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1451, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1444, 87, 1444, 1407, 1407, -1000, -1000, 299,
	299, 1456, 935, 929, 1484, 1476, 935, -214, 935, 935,
	1672, -1000, -1000, -1000, 143, 935, 1565, 5821, 4675, 7353,
	935, -1000, 1561, 509, 935, 5055, -1000, 1537, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1450, 778, 929, 304, 172,
	1361, 261, 649, 258, 1070, 292, -1000, -1000, -1000, 812,
	-1000, 929, -1000, 1676, -1000, -1000, 286, -1000, 280, 682,
	923, 935, 1448, 149, 1445, 2734, 881, -1000, -271, -1000,
	-8, -1000, -1000, 842, 54, 1389, -1000, 54, 855, 54,
	54, -1000, -1000, 629, 1544, 629, 629, 629, 629, 917,
	917, -114, -114, -1000, -1000, -1000, 880, -1000, 879, 1444,
	-1000, -1000, -1000, 878, -1000, 935, 929, 1443, 1472, 935,
	935, 1577, 430, -1000, -1000, 1576, 1573, 1310, -1000, -1000,
	139, -1000, -1000, 502, 929, -1000, 575, -1000, -1000, -1000,
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
<<<<<<< HEAD
	-1000, 1319, -1000, 517, 508, 6251, 189, -1000, -1000, -1000,
	-1000, 408, -1000, 1674, 1620, 320, 4, -222, 1069, -1000,
	-1000, 1418, -1000, -1000, 8430, -1000, 1067, 1065, -1000, 1052,
	1040, 68, 810, -1000, -207, 111, -39, -1000, -1000, 1345,
	-1000, 1417, 8430, 1586, -1000, 1562, 660, -1000, 1870, -1000,
	-244, -1000, -1000, 844, -1000, -244, -1000, -1000, -1000, 1345,
	-1000, 1414, 1411, -1000, 1410, -1000, -1000, 1345, 1345, 1345,
	586, -1000, -1000, -1000, -1000, -1000, 1282, 616, 35, 616,
	1268, 1266, 616, 616, -1000, -1000, 988, 691, -1000, -1000,
	-1000, -1000, 1271, -1000, 1259, -1000, 75, 73, -1000, 1261,
	1339, -1000, 1256, 1343, 1457, 178, 927, 1407, 1404, 1341,
	393, 1341, 1617, 182, 927, 1658, 389, 1658, 454, 6635,
	810, 314, 810, -1000, -1000, 354, 4715, -1000, -1000, 1254,
	-1000, 235, 1376, 471, 471, -221, 287, 285, -222, 1345,
	1403, -1000, 408, 266, -1000, 8430, 277, 1345, 1345, 1345,
	1345, 8337, -1000, -1000, 570, -1000, -1000, -1000, 7206, 7206,
	7206, 7206, 7206, 7206, 7206, -1000, -1000, -1000, -1000, 1,
	-1000, -244, -1000, 919, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 584, 583, -1000, 1345, 1345, 1345, 1345, 1345, 1345,
	1345, 1345, 8430, 1345, 1543, 1345, 1345, 1345, 1345, 1345,
	1345, 1345, 1345, 1345, 1345, 1345, 3566, 1345, 1345, 1345,
	1345, -1000, -1000, -1000, -1000, -1000, -1000, -222, 1402, -1000,
	-1000, -1000, 719, -1000, 8430, 389, 749, 145, -1000, 1338,
	-1000, 848, 1229, 2722, 1215, -1000, 8679, -1000, -1000, -1000,
	1047, -1000, 893, -1000, 839, 1202, 7813, 8245, 8245, 6635,
	-1000, -1000, 616, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 35, 950, 35, -12, -13, -1000, 837, -1000, 826,
	178, 810, 927, 1185, 1337, -1000, 232, 1399, 389, 408,
	-1000, 1636, 1691, -1000, 1341, 927, -1000, 415, 1711, -1000,
	-1000, 1614, -1000, 1336, -1000, -1000, 1311, 1658, -1000, 1398,
	810, -1000, -1000, 289, 810, -1000, -1000, -1000, -1000, -1000,
	2372, 408, 1572, -1000, -1000, -1000, 756, -1000, -1000, 750,
	181, 743, -1000, 810, -222, 1397, 8430, 408, 1252, 187,
	8430, 8430, 867, -1000, -1000, 247, 2683, 806, 808, 7206,
	7206, 7206, 7206, 7206, 7206, 7206, 7206, 7206, 7206, 7206,
	7206, 7206, 7206, 7206, 3182, 948, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 979, -1000,
	1341, 920, 1047, 1047, 1047, 1246, 8337, 366, 961, 961,
	46, 8337, 46, 46, 46, 46, 46, 72, -1000, -264,
	-1000, -1000, 5867, 6635, 8245, 8245, 7382, 8430, 8245, 8245,
	8245, 1595, 709, 366, 920, 1608, 1047, 1047, 1047, 1047,
	-1000, 1047, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	50, -1000, -1000, -1000, -1000, -1000, -1000, 8245, 8245, 8245,
	8245, -1000, 810, 1345, 266, 1248, -158, 8430, 1390, 660,
	-1000, -1000, 1175, -244, -1000, -1000, -1000, -153, -1000, -1000,
	-1000, -1000, 1047, 8245, 1195, 1246, -1000, 735, -1000, 577,
	1195, 735, 1195, 1345, -1000, 616, -1000, 616, -1000, -1000,
	1166, 1160, 1156, 1389, 1388, -228, 822, 178, 1241, 1228,
	1624, 1634, 1341, 1588, 1514, -1000, 1047, 1583, 810, -1000,
	-1000, -1000, -1000, -1000, 158, 703, 810, 9095, 1299, -1000,
	794, 1387, 113, 369, 1453, 2759, 152, -1000, 977, 693,
	939, 692, 688, 687, 685, 679, 678, 675, 673, 667,
	661, -1000, -1000, -1000, -1000, -1000, 1684, -1000, -1000, -1000,
	1664, 1386, 1384, 408, 266, 1226, 2372, -1000, -114, 247,
	259, -1000, -1000, 774, -1000, -1000, 481, 7206, 7206, 7206,
	-1000, -1000, -1000, -1000, 806, 7206, 7206, 7206, 1959, 481,
	2388, 1317, 79, 46, 24, 24, 48, 48, 48, 48,
	48, 288, 288, -1000, -133, -1000, 1376, -1000, -1000, -1000,
	1047, 1047, -1000, -1000, -1000, -1000, 8430, -1000, 1047, -1000,
	-244, 936, -1000, -1000, 932, 1345, -1000, 1195, 1195, 759,
	1334, 8748, 1376, -1000, 1376, 1383, -1000, -1000, 91, 1376,
	90, -1000, -1000, -1000, -1000, 1383, -1000, -1000, -1000, -1000,
	-1000, 1376, 1376, -1000, -1000, 1376, 1376, -1000, 1376, 1376,
	643, 1298, 1292, 1195, 8245, -1000, 664, -1000, 8430, 1047,
	927, -1000, -1000, -1000, -1000, -1000, -1000, 1195, 1047, 1333,
	1195, 1195, 1219, -1000, 8430, 187, 1455, -1000, -1000, 746,
	-1000, 1125, 1120, -1000, -1000, 1195, 8245, -260, -1000, -1000,
	-1000, 949, -1000, -1000, 4331, -260, -260, 8245, -1000, -1000,
	-1000, -1000, -228, 178, 408, 1649, 1382, 1105, 1649, 2372,
	1567, 8430, 8430, 1636, -1000, 1341, -1000, -1000, 1595, -1000,
	-1000, 765, -1000, 1341, 1238, 156, 106, 8430, -1000, 2689,
	-1000, 9095, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1636, 8430, -1000, -1000, -1000, -1000,
	-1000, 810, 3423, 810, 810, 810, 484, 8430, 978, 8430,
	-1000, -1000, -1000, -1000, -1000, 927, 1096, 4334, 794, 794,
	4334, 794, 794, 408, 408, 1381, 1379, 260, -1000, 810,
	-1000, -145, 2759, 810, -1000, 818, -1000, -1000, 775, 802,
	775, 775, 775, 775, 775, 163, 800, 362, 471, 471,
	810, 408, 1193, 187, 2372, 1453, -1000, -1000, -1000, -1000,
	481, 481, 481, -1000, 1959, 481, 497, -1000, 7206, 7206,
	55, -1000, -1000, 366, -1000, 66, -1000, -244, -1000, -1000,
	3933, 948, 8430, -1000, 243, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3933, 7206, 7206,
	7206, 7206, -123, 1199, 699, -1000, 8430, 483, -1000, -1000,
	-1000, -1000, -1000, -1000, 356, 810, 266, -1000, 1669, -163,
	559, -1000, -1000, -1000, -1000, -1000, 1345, -1000, -1000, 567,
	-1000, -1000, 1047, 1649, 1086, 1159, 2372, 8430, 389, -228,
	2372, -1000, -1000, 1681, 644, 602, 1318, -1000, 595, 1624,
	1047, 1469, -1000, -1000, -135, 8430, 9095, 6409, 366, 6409,
	-1000, 9095, 2078, 1624, 8957, 412, 926, 901, 1316, 325,
	-1000, 3179, 813, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 810, 1662,
	1660, 1659, 1652, 9032, 8430, 8430, -1000, 1606, -1000, -1000,
	4334, -1000, -1000, -1000, -1000, -1000, 1132, 1130, 408, 408,
	1377, 1345, 1128, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 719, 719, 1124, 1119, 2372, -1000, 1453, -1000,
	-1000, 7206, 481, 481, -40, -1000, 932, -1000, 1047, 1376,
	1047, 576, -1000, -1000, 1047, 2206, 1847, 370, 1275, 1345,
	-116, -1000, 366, 8430, 927, -1000, 187, 471, 471, -1000,
	-1000, -1000, 146, 785, 660, 660, 771, 39, -1000, 1629,
	557, 5483, -1000, 2372, 1649, 2372, 1453, 366, 1103, 1649,
	1453, -1000, 1539, 8430, 8430, 8430, -1000, 1567, -1000, 8245,
	-1000, -1000, -258, 366, 2689, 2973, -1000, -1000, 1992, 6025,
	-1000, 1567, 9095, 665, -1000, 696, -1000, 6409, 923, 927,
	1070, -1000, 1208, 1496, -1000, -1000, -1000, 1579, 912, 522,
	810, 149, 4718, -1000, -1000, 1313, 3563, -45, -1000, -1000,
	-1000, 659, 560, 902, -1000, 1558, -1000, -1000, 3423, 1569,
	-1000, -1000, -1000, -1000, -1000, 6409, -1000, 1289, 1047, 703,
	153, -1000, 249, 1064, 1062, 408, 810, -1000, 2759, -1000,
	-1000, 355, 2372, 1453, -1000, 481, -1000, -1000, -1000, -1000,
	-1000, 7206, -1000, -1000, 7206, -1000, 7206, -1000, 7206, -1000,
	7206, 7206, 1047, 931, 366, 1365, -1000, -1000, -1000, 660,
	-1000, 660, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 117,
	-1000, 1628, 1047, -1000, 1453, 2372, -1000, -1000, -1000, 2372,
	-1000, 1535, 366, 366, -1000, -1000, 1165, 8430, 5641, -1000,
	-1000, -1000, -1000, 2441, 9195, 386, 2377, 201, 927, -1000,
	201, 1085, 901, 927, -1000, -1000, 920, 901, 901, 901,
	901, 901, -1000, 1509, 1504, -1000, 1487, 1480, 1508, 927,
	1058, 912, 524, 1345, -1000, 930, -1000, -1000, -1000, 1579,
	1604, -1000, 3947, 1313, -45, 1306, -1000, -59, -30, 7721,
	6635, 616, -1000, -1000, -1000, -1000, -1000, 810, 2241, -1000,
	104, 155, 96, -1000, 119, 2372, 2372, 1056, 1047, -1000,
	927, 1453, -1000, 1460, 1460, 1460, 1460, 1460, 309, -1000,
	-1000, 810, -1000, -1000, -1000, 553, 8430, -1000, -1000, -1000,
	1453, -1000, 1649, 901, 366, -1000, -1000, 2838, -1000, -1000,
	8430, -1000, 8430, 6409, -1000, 1087, 1345, -1000, 1649, 901,
	1099, -1000, 1163, -1000, 657, 1496, 1364, 1454, 1042, -1000,
	-1000, -1000, -1000, 1501, -1000, 1477, -1000, -1000, -1000, -1000,
	-139, 480, 464, 432, 810, -1000, 1341, -1000, 1306, -45,
	-58, -1000, -1000, -1000, -1000, 366, 656, -1000, 1300, -1000,
	6409, -1000, -1000, 125, -1000, 1453, 1453, -1000, -1000, 1359,
	-1000, -1000, -1000, -1000, -1000, -1000, 1047, 180, -152, 1050,
	6635, 1020, -1000, 366, -1000, 1647, 1295, 374, 9095, 9115,
	8983, 1437, 920, 1345, -1000, 1025, 810, 1636, 1099, -1000,
	1649, 920, 8430, -1000, -1000, 8430, 1358, -1000, 8430, -1000,
	-1000, -1000, -1000, 1352, 1345, 1345, 1345, 1037, -1000, -1000,
	-1000, -1000, -66, -55, -1000, 8430, 2903, -1000, -1000, -1000,
	-1000, 810, -1000, 1534, -126, -179, -1000, -1000, -1000, 1047,
	8430, 1645, 1627, -1000, 292, 665, -1000, -1000, 1566, 1278,
	1287, -1000, -1000, 7906, 1047, 1046, 530, 1037, 1624, -1000,
	1636, -1000, 366, 366, 389, 366, -117, 389, 389, 389,
	911, 810, -1000, -1000, -1000, 366, 5257, 1018, -1000, 1518,
	-1000, -1000, -1000, -1000, 8430, 8430, 4105, 214, -1000, 1345,
	-1000, -1000, 1285, 810, 810, -1000, -1000, 1624, 1014, 1011,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1009,
	1009, 1009, 524, -1000, -1000, -1000, -137, 366, 1289, 373,
	1680, -1000, 1345, -1000, 1341, 526, -1000, -1000, -1000, -1000,
	-117, -1000, -1000, -1000, -139, -176, -1000, 920, 1287, 1047,
	810, -1000, -1000, -181, 1279, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1930, 4, 63, 1929, 1926, 1923, 1922, 1921, 1920,
	1919, 1917, 1914, 1913, 1912, 29, 22, 50, 45, 47,
	1911, 1908, 1905, 1904, 1899, 141, 1895, 1893, 1891, 1890,
	87, 1888, 1887, 1886, 1885, 78, 84, 88, 94, 1299,
	31, 27, 44, 48, 1883, 15, 1882, 1881, 59, 1879,
	43, 1878, 1877, 69, 1875, 1869, 3, 13, 99, 111,
	65, 1868, 1865, 102, 1927, 1864, 1862, 93, 1861, 1860,
	82, 17, 73, 1, 23, 8, 1859, 349, 2, 1853,
	100, 81, 1852, 1850, 1848, 46, 1847, 68, 66, 16,
	60, 1846, 14, 74, 49, 24, 10, 5, 53, 42,
	1841, 20, 41, 26, 1836, 71, 1834, 118, 51, 64,
	95, 0, 28, 101, 1833, 1831, 1827, 1223, 97, 40,
	9, 57, 72, 1826, 70, 108, 67, 106, 104, 1824,
	105, 1823, 1821, 1817, 1816, 1815, 234, 854, 124, 77,
	55, 1814, 1813, 96, 321, 319, 98, 324, 1051, 83,
	1811, 1810, 1809, 1807, 115, 1806, 86, 103, 30, 395,
	1805, 1803, 1802, 1801, 1800, 1794, 1789, 107, 1785, 91,
	58, 39, 790, 54, 1783, 1771, 1768, 1763, 85, 1759,
	1752, 1751, 75, 1750, 1749, 119, 80, 121, 109, 120,
	1748, 1747, 76, 90, 1745, 112, 114, 1744, 110, 35,
	25, 341, 56, 1743, 1740, 1737, 7, 6, 1735, 1734,
	1733, 1731, 1728, 1723, 62, 1722, 92, 1718, 11, 1715,
	1712, 52, 1703, 1702, 1701, 1699, 1698, 456, 727, 1697,
	79, 123, 1669, 113,
}

var yyR1 = [...]uint8{
	0, 223, 224, 224, 1, 1, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
	21, 226, 226, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 28, 28, 7, 8, 8, 8, 229, 229,
	48, 48, 94, 94, 9, 9, 9, 9, 10, 10,
	203, 203, 202, 204, 204, 11, 11, 11, 11, 11,
	197, 197, 197, 197, 197, 12, 12, 200, 200, 200,
	15, 15, 15, 15, 16, 16, 17, 17, 17, 19,
	19, 99, 99, 103, 103, 103, 104, 104, 104, 104,
	215, 215, 123, 123, 225, 225, 230, 230, 230, 230,
	230, 230, 230, 195, 195, 195, 195, 196, 196, 196,
	196, 198, 198, 199, 199, 199, 199, 199, 199, 201,
	201, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 13, 13, 29, 29, 72, 72, 14, 109,
	109, 176, 176, 176, 177, 177, 177, 177, 177, 177,
	179, 179, 180, 180, 115, 115, 181, 181, 24, 161,
	162, 162, 162, 162, 162, 162, 162, 162, 148, 148,
	148, 126, 126, 126, 126, 126, 126, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 187, 187, 187, 187,
	187, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 189, 190, 191, 183, 183, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 138, 138, 138, 138, 138, 138, 182, 182, 178,
	178, 178, 178, 130, 130, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 129, 129, 129, 129, 129,
	129, 129, 134, 134, 131, 131, 131, 131, 131, 131,
	131, 131, 127, 127, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 135, 135, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 147, 147, 136,
	136, 145, 145, 146, 146, 146, 137, 137, 137, 144,
	144, 144, 141, 141, 142, 142, 143, 143, 143, 139,
	139, 139, 140, 140, 140, 150, 172, 172, 172, 174,
	174, 175, 175, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 160, 160, 192,
	192, 193, 193, 194, 194, 171, 171, 171, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	159, 159, 169, 169, 170, 170, 167, 167, 167, 168,
	154, 154, 154, 154, 154, 155, 155, 156, 156, 156,
	156, 151, 151, 152, 152, 153, 153, 185, 185, 185,
	219, 219, 219, 219, 219, 219, 220, 220, 186, 186,
	157, 157, 158, 158, 165, 165, 165, 165, 231, 231,
	163, 163, 163, 164, 164, 164, 232, 25, 26, 26,
	27, 27, 27, 32, 32, 32, 30, 30, 31, 31,
	37, 37, 36, 36, 38, 38, 38, 38, 114, 114,
	114, 113, 113, 216, 216, 216, 216, 216, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 206, 206, 205,
	205, 207, 207, 207, 207, 207, 207, 207, 207, 55,
	55, 92, 92, 92, 95, 95, 44, 44, 44, 44,
	45, 45, 46, 46, 47, 47, 121, 121, 120, 120,
	120, 119, 119, 49, 49, 49, 51, 50, 50, 50,
	50, 52, 52, 54, 54, 53, 53, 56, 56, 56,
	56, 57, 57, 93, 93, 39, 39, 39, 39, 39,
	39, 39, 39, 106, 106, 59, 59, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 69, 69, 69, 69, 69, 69, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	35, 35, 70, 70, 70, 77, 71, 71, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 67, 67, 67, 67,
	67, 67, 67, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 233, 233, 68, 68,
	68, 68, 33, 33, 33, 33, 33, 122, 122, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 125, 125, 125, 125, 125, 125, 125, 125, 81,
	81, 34, 34, 79, 79, 80, 108, 108, 82, 82,
	78, 78, 78, 208, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 60, 60, 83, 83, 84, 84,
	217, 217, 218, 85, 85, 86, 86, 87, 88, 88,
	88, 89, 89, 89, 89, 90, 90, 90, 62, 62,
	62, 62, 62, 62, 91, 91, 91, 91, 96, 96,
	73, 73, 75, 75, 74, 76, 97, 97, 101, 98,
	98, 102, 102, 102, 102, 102, 22, 23, 100, 100,
	100, 116, 116, 116, 107, 107, 105, 105, 111, 112,
	112, 112, 112, 117, 117, 118, 118, 209, 209, 209,
	210, 210, 210, 211, 211, 212, 213, 213, 214, 222,
	222, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 110, 110, 110, 110, 110, 110, 110, 110,
=======
	1387, -1000, 454, 507, 6204, 162, -1000, -1000, -1000, -1000,
	390, -1000, 1666, 1603, 254, 7, -196, 1068, -1000, -1000,
	1442, -1000, -1000, 9142, -1000, 1065, 1036, -1000, 1034, 1011,
	20, 929, -1000, -212, 119, -27, -1000, -1000, 1361, -1000,
	1441, 9142, 1570, -1000, 1547, 689, -1000, 2455, -1000, -236,
	-1000, -1000, 821, -1000, -236, -1000, -1000, -1000, 1361, -1000,
	1440, 1437, -1000, 1436, -1000, -1000, 1361, 1361, 1361, 574,
	-1000, -1000, -1000, -1000, -1000, 1298, 629, 54, 629, 1297,
	1296, 629, 629, -1000, -1000, 977, 674, -1000, -1000, -1000,
	-1000, 1286, -1000, 1284, -1000, 80, 77, -1000, 1278, 1359,
	-1000, 1277, 1358, 1471, 203, 935, 1435, 1433, 1356, 389,
	1356, 1598, 190, 935, 1672, 314, 1672, 502, 6587, 929,
	250, 929, -1000, -1000, 318, 4672, -1000, -1000, 1271, -1000,
	241, 1389, 501, 501, -215, 274, 257, -196, 1361, 1427,
	-1000, 390, 538, -1000, 9142, 378, 1361, 1361, 1361, 1361,
	9050, -1000, -1000, 544, -1000, -1000, -1000, 9572, 9572, 9572,
	9572, 9572, 9572, 9572, -1000, -1000, -1000, -1000, 24, -1000,
	-236, -1000, 957, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	564, 553, -1000, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
	1361, 9142, 1361, 1531, 1361, 1361, 1361, 1361, 1361, 1361,
	1361, 1361, 1361, 1361, 1361, 2682, 1361, 1361, 1361, 1361,
	-1000, -1000, -1000, -1000, -1000, -1000, -196, 1426, -1000, -1000,
	-1000, 682, -1000, 9142, 314, 701, 136, -1000, 1352, -1000,
	867, 1272, 2666, 1269, -1000, 9804, -1000, -1000, -1000, 967,
	-1000, 857, -1000, 788, 1242, 8528, 8958, 8958, 6587, -1000,
	-1000, 629, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	54, 903, 54, -11, -15, -1000, 860, -1000, 844, 203,
	929, 935, 1219, 1338, -1000, 233, 1425, 314, 390, -1000,
	1619, 1681, -1000, 1356, 935, -1000, 407, 1597, -1000, -1000,
	1595, -1000, 1337, -1000, -1000, 1281, 1672, -1000, 1423, 929,
	-1000, -1000, 239, 929, -1000, -1000, -1000, -1000, -1000, 681,
	390, 1556, -1000, -1000, -1000, 774, -1000, -1000, 749, 187,
	760, -1000, 929, -196, 1420, 9142, 390, 1263, 200, 9142,
	9142, 769, -1000, -1000, 245, 7923, 826, 739, 9572, 9572,
	9572, 9572, 9572, 9572, 9572, 9572, 9572, 9572, 9572, 9572,
	9572, 9572, 9572, 2641, 949, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 960, -1000, 1356,
	888, 967, 967, 967, 1251, 9050, 483, 1026, 1026, 50,
	9050, 50, 50, 50, 50, 50, 110, -1000, -249, -1000,
	-1000, 5821, 6587, 8958, 8958, 8098, 9142, 8958, 8958, 8958,
	1586, 727, 483, 888, 1594, 967, 967, 967, 967, -1000,
	967, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 63,
	-1000, -1000, -1000, -1000, -1000, -1000, 8958, 8958, 8958, 8958,
	-1000, 929, 1361, 538, 1253, -147, 9142, 1416, 689, -1000,
	-1000, 1187, -236, -1000, -1000, -1000, -145, -1000, -1000, -1000,
	-1000, 967, 8958, 1208, 1251, -1000, 540, -1000, 549, 1208,
	540, 1208, 1361, -1000, 629, -1000, 629, -1000, -1000, 1180,
	1158, 1142, 1415, 1414, -223, 842, 203, 1245, 1239, 1607,
	1617, 1356, 1572, 1520, -1000, 967, 1567, 929, -1000, -1000,
	-1000, -1000, -1000, 167, 725, 929, 8905, 1167, -1000, 838,
	1410, 122, 307, 1465, 2636, 154, -1000, 939, 718, 902,
	717, 716, 711, 706, 705, 699, 696, 694, 687, 680,
	-1000, -1000, -1000, -1000, -1000, 1675, -1000, -1000, -1000, 1650,
	1409, 1408, 390, 538, 1224, 681, -1000, -99, 245, 360,
	-1000, -1000, 806, -1000, -1000, 2638, 9572, 9572, 9572, -1000,
	-1000, -1000, -1000, 826, 9572, 9572, 9572, 2538, 2638, 2576,
	308, 1319, 50, 25, 25, 48, 48, 48, 48, 48,
	16, 16, -1000, -110, -1000, 1389, -1000, -1000, -1000, 967,
	967, -1000, -1000, -1000, -1000, 9142, -1000, 967, -1000, -236,
	893, -1000, -1000, 889, 1361, -1000, 1208, 1208, 671, 1336,
	9664, 1389, -1000, 1389, 1407, -1000, -1000, 96, 1389, 95,
	-1000, -1000, -1000, -1000, 1407, -1000, -1000, -1000, -1000, -1000,
	1389, 1389, -1000, -1000, 1389, 1389, -1000, 1389, 1389, 562,
	1314, 1309, 1208, 8958, -1000, 673, -1000, 9142, 967, 935,
	-1000, -1000, -1000, -1000, -1000, -1000, 1208, 967, 1335, 1208,
	1208, 1216, -1000, 9142, 200, 1467, -1000, -1000, 605, -1000,
	1111, 1104, -1000, -1000, 1208, 8958, -244, -1000, -1000, -1000,
	955, -1000, -1000, 4289, -244, -244, 8958, -1000, -1000, -1000,
	-1000, -223, 203, 390, 1630, 1402, 1081, 1630, 681, 1555,
	9142, 9142, 1619, -1000, 1356, -1000, -1000, 1586, -1000, -1000,
	755, -1000, 1356, 1230, 161, 117, 9142, -1000, 2195, -1000,
	8905, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1619, 9142, -1000, -1000, -1000, -1000, -1000, 929,
	2725, 929, 929, 929, 573, 9480, 961, -1000, -1000, -1000,
	-1000, -1000, 935, 1055, 4292, 838, 838, 4292, 838, 838,
	390, 390, 1400, 1393, 251, -1000, 929, -1000, -160, 2636,
	929, -1000, 841, -1000, -1000, 798, 825, 798, 798, 798,
	798, 798, 173, 793, 370, 501, 501, 929, 390, 1198,
	200, 681, 1465, -1000, -1000, -1000, -1000, 2638, 2638, 2638,
	-1000, 2538, 2638, 2496, -1000, 9572, 9572, 59, -1000, -1000,
	483, -1000, 61, -1000, -236, -1000, -1000, 3129, 949, 9142,
	-1000, 249, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3129, 9572, 9572, 9572, 9572, -106,
	1293, 721, -1000, 9142, 529, -1000, -1000, -1000, -1000, -1000,
	-1000, 320, 929, 538, -1000, 1658, -159, 284, -1000, -1000,
	-1000, -1000, -1000, 1361, -1000, -1000, 543, -1000, -1000, 967,
	1630, 1049, 1195, 681, 9142, 314, -223, 681, -1000, -1000,
	1674, 589, 640, 1331, -1000, 566, 1607, 967, 1370, -1000,
	-1000, -112, 9142, 8905, 7128, 483, 7128, -1000, 8905, 230,
	1607, 260, 8383, 379, 924, 868, 1329, 328, -1000, 3139,
	817, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 929, 1643, 1637, 1635,
	1633, 9943, 378, 9142, 9142, 1593, -1000, -1000, 4292, -1000,
	-1000, -1000, -1000, -1000, 1162, 1151, 390, 390, 1391, 1361,
	1149, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	682, 682, 1115, 1110, 681, -1000, 1465, -1000, -1000, 9572,
	2638, 2638, -20, -1000, 889, -1000, 967, 1389, 967, 526,
	-1000, -1000, 967, 954, 2354, 115, 863, 1361, -96, -1000,
	483, 9142, 935, -1000, 200, 501, 501, -1000, -1000, -1000,
	152, 723, 689, 689, 780, 17, -1000, 1616, 686, 5438,
	-1000, 681, 1630, 681, 1465, 483, 1062, 1630, 1465, -1000,
	1528, 9142, 9142, 9142, -1000, 1555, -1000, 8958, -1000, -1000,
	-238, 483, 2195, 2251, -1000, -1000, 199, 6745, -1000, 1555,
	8905, 675, -1000, 702, -1000, 7128, 901, 935, 1144, -1000,
	1046, 1360, -1000, -1000, -1000, 1557, 896, 661, 929, 153,
	4675, -1000, -1000, 1328, 3523, -45, -1000, -1000, -1000, 665,
	537, 887, -1000, 1542, -1000, -1000, 2725, 1551, -1000, -1000,
	-1000, -1000, -1000, 7128, -1000, 1308, 967, 725, 164, -1000,
	296, 1059, 1054, 390, 929, -1000, 2636, -1000, -1000, 313,
	681, 1465, -1000, 2638, -1000, -1000, -1000, -1000, -1000, 9572,
	-1000, -1000, 9572, -1000, 9572, -1000, 9572, -1000, 9572, 9572,
	967, 875, 483, 1388, -1000, -1000, -1000, 689, -1000, 689,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 137, -1000, 1615,
	967, -1000, 1465, 681, -1000, -1000, -1000, 681, -1000, 1526,
	483, 483, -1000, -1000, 1259, 9142, 6362, -1000, -1000, -1000,
	-1000, 2087, 9427, 367, 2150, 205, 935, -1000, 205, 1202,
	868, 935, -1000, -1000, 888, 868, 868, 868, 868, 868,
	-1000, 1516, 1515, -1000, 1505, 1503, 1509, 935, 1052, 896,
	677, 1361, -1000, 936, -1000, -1000, -1000, 1557, 1578, -1000,
	3906, 1328, -45, 1315, -1000, -37, -28, 8436, 6587, 629,
	-1000, -1000, -1000, -1000, -1000, 929, 2133, -1000, 112, 157,
	128, -1000, 133, 681, 681, 1048, 967, -1000, 935, 1465,
	-1000, 2396, 2396, 2396, 2396, 2396, 1270, -1000, -1000, 929,
	-1000, -1000, -1000, 534, 9142, -1000, -1000, -1000, 1465, -1000,
	1630, 868, 483, -1000, -1000, 5213, -1000, -1000, 9480, -1000,
	9480, 7128, -1000, 1166, 1361, -1000, 1630, 868, 1141, -1000,
	1222, -1000, 636, 1360, 1386, 1466, 1189, -1000, -1000, -1000,
	-1000, 1507, -1000, 1506, -1000, -1000, -1000, -1000, -151, 457,
	450, 447, 929, -1000, 1356, -1000, 1315, -45, -49, -1000,
	-1000, -1000, -1000, 483, 603, -1000, 1313, -1000, 7128, -1000,
	-1000, 125, -1000, 1465, 1465, -1000, -1000, 1365, -1000, -1000,
	-1000, -1000, -1000, -1000, 967, 195, -165, 1044, 6587, 1041,
	-1000, 483, -1000, 1625, 1312, 336, 8905, 3816, 8383, 1458,
	888, 1361, -1000, 6970, 929, 1619, 1141, -1000, 1630, 888,
	9142, -1000, -1000, 9142, 1364, -1000, 9142, -1000, -1000, -1000,
	-1000, 1363, 1361, 1361, 1361, 1018, -1000, -1000, -1000, -1000,
	-42, -40, -1000, 9142, 2231, -1000, -1000, -1000, -1000, 929,
	-1000, 1525, -144, -176, -1000, -1000, -1000, 967, 9142, 1622,
	1611, -1000, 1975, 675, -1000, -1000, 1549, 1079, 1302, -1000,
	-1000, 8620, 967, 1022, -1000, -1000, 524, -1000, 1018, 1607,
	-1000, 1619, -1000, 483, 483, 314, 483, 194, 314, 314,
	314, 873, 929, -1000, -1000, -1000, 483, 5979, 1016, -1000,
	1523, -1000, -1000, -1000, -1000, 9142, 9142, 5596, 225, -1000,
	1361, -1000, -1000, 1206, 7736, 929, -1000, -1000, 1607, 998,
	966, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	964, 964, 964, 677, -1000, -1000, -1000, -149, 483, 1308,
	322, 1656, -1000, 1361, -1000, 1356, -1000, -1000, -1000, -1000,
	-1000, 194, -1000, -1000, -1000, -151, -173, -1000, 888, 1302,
	967, -1000, -1000, -178, 1301, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1936, 21, 59, 1934, 1928, 1920, 1919, 1914, 1912,
	1909, 1908, 1906, 1905, 40, 31, 49, 35, 43, 1904,
	1903, 1898, 1897, 1896, 88, 1893, 1890, 1889, 1887, 100,
	1886, 1883, 1881, 1880, 80, 110, 86, 94, 1334, 42,
	39, 66, 76, 1878, 48, 1877, 1876, 58, 1874, 46,
	1873, 1872, 142, 1870, 1869, 8, 29, 41, 107, 50,
	1868, 1867, 93, 1884, 1863, 1861, 90, 1859, 1857, 101,
	15, 70, 4, 7, 9, 1854, 343, 1, 1853, 89,
	1852, 1851, 1850, 1849, 17, 1847, 63, 75, 5, 60,
	1846, 14, 10, 74, 51, 24, 13, 2, 62, 44,
	1841, 22, 45, 26, 1838, 71, 1837, 114, 52, 68,
	11, 0, 28, 87, 1836, 1835, 1834, 1123, 85, 47,
	16, 64, 79, 1832, 78, 98, 67, 106, 102, 1828,
	97, 1827, 1823, 1820, 1818, 1815, 1940, 846, 121, 104,
	54, 1814, 1812, 95, 326, 328, 91, 329, 989, 84,
	1809, 1804, 1802, 1801, 109, 1800, 73, 103, 27, 510,
	1799, 1798, 1797, 1796, 1787, 1785, 1778, 99, 1777, 83,
	55, 82, 381, 53, 1774, 1768, 1766, 1763, 96, 1762,
	1750, 1748, 72, 1747, 1745, 112, 69, 124, 108, 116,
	1744, 1743, 123, 77, 1742, 111, 115, 1737, 105, 25,
	30, 244, 56, 1736, 1730, 1727, 6, 3, 1725, 1721,
	1718, 1716, 1715, 1713, 65, 1711, 92, 1709, 23, 1705,
	1704, 57, 1702, 1699, 1697, 1696, 1694, 444, 681, 1693,
	81, 119, 1689, 113,
}

var yyR1 = [...]uint8{
	0, 223, 224, 224, 1, 1, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 20, 20, 20, 20, 20, 20,
	20, 226, 226, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 27, 27, 7, 8, 8, 8, 229, 229,
	47, 47, 94, 94, 9, 9, 9, 9, 10, 10,
	203, 203, 202, 204, 204, 11, 11, 11, 11, 11,
	197, 197, 197, 197, 197, 12, 12, 200, 200, 200,
	14, 14, 14, 14, 15, 15, 16, 16, 16, 18,
	18, 99, 99, 103, 103, 103, 104, 104, 104, 104,
	215, 215, 123, 123, 225, 225, 230, 230, 230, 230,
	230, 230, 230, 195, 195, 195, 195, 196, 196, 196,
	196, 198, 198, 199, 199, 199, 199, 199, 199, 201,
	201, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 13, 13, 28, 28, 71, 71, 109, 109, 176,
	176, 176, 177, 177, 177, 177, 177, 177, 179, 179,
	180, 180, 115, 115, 181, 181, 23, 161, 162, 162,
	162, 162, 162, 162, 162, 162, 148, 148, 148, 126,
	126, 126, 126, 126, 126, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 187, 187, 187, 187, 187, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	189, 190, 191, 183, 183, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 138,
	138, 138, 138, 138, 138, 182, 182, 178, 178, 178,
	178, 130, 130, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 129, 129, 129, 129, 129, 129, 129,
	134, 134, 131, 131, 131, 131, 131, 131, 131, 131,
	127, 127, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 135, 135, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 147, 147, 136, 136, 145,
	145, 146, 146, 146, 137, 137, 137, 144, 144, 144,
	141, 141, 142, 142, 143, 143, 143, 139, 139, 139,
	140, 140, 140, 150, 172, 172, 172, 174, 174, 175,
	175, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 160, 160, 192, 192, 193,
	193, 194, 194, 171, 171, 171, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 159, 159,
	169, 169, 170, 170, 167, 167, 167, 168, 154, 154,
	154, 154, 154, 155, 155, 156, 156, 156, 156, 151,
	151, 152, 152, 153, 153, 185, 185, 185, 219, 219,
	219, 219, 219, 219, 220, 220, 186, 186, 157, 157,
	158, 158, 165, 165, 165, 165, 231, 231, 163, 163,
	163, 164, 164, 164, 232, 24, 25, 25, 26, 26,
	26, 31, 31, 31, 29, 29, 30, 30, 36, 36,
	35, 35, 37, 37, 37, 37, 114, 114, 114, 113,
	113, 216, 216, 216, 216, 216, 39, 39, 40, 40,
	41, 41, 42, 42, 42, 206, 206, 205, 205, 207,
	207, 207, 207, 207, 207, 207, 207, 54, 54, 91,
	91, 91, 95, 95, 43, 43, 43, 43, 44, 44,
	45, 45, 46, 46, 121, 121, 120, 120, 120, 119,
	119, 48, 48, 48, 50, 49, 49, 49, 49, 51,
	51, 53, 53, 52, 52, 55, 55, 55, 55, 56,
	56, 93, 93, 38, 38, 38, 38, 38, 38, 38,
	38, 106, 106, 58, 58, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 68, 68, 68, 68, 68, 68, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 34, 34,
	69, 69, 69, 76, 70, 70, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 66, 66, 66, 66, 66, 66,
	66, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 233, 233, 67, 67, 67, 67,
	32, 32, 32, 32, 32, 122, 122, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 125,
	125, 125, 125, 125, 125, 125, 125, 80, 80, 33,
	33, 78, 78, 79, 108, 108, 81, 81, 77, 77,
	77, 208, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 59, 59, 82, 82, 83, 83, 217, 217,
	218, 84, 84, 85, 85, 86, 87, 87, 87, 88,
	88, 88, 88, 89, 89, 89, 61, 61, 61, 61,
	61, 61, 90, 90, 92, 92, 92, 96, 96, 72,
	72, 74, 74, 73, 75, 97, 97, 101, 98, 98,
	102, 102, 102, 102, 102, 21, 22, 100, 100, 100,
	116, 116, 116, 107, 107, 105, 105, 111, 112, 112,
	112, 112, 117, 117, 118, 118, 209, 209, 209, 210,
	210, 210, 211, 211, 212, 213, 213, 214, 222, 222,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 110, 110, 110, 110, 110, 110, 110, 110, 110,
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
<<<<<<< HEAD
	110, 110, 110, 110, 110, 110, 110, 110, 227, 228,
=======
	110, 110, 110, 110, 110, 110, 227, 228,
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 3, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 10, 1, 1, 5, 5, 3, 5, 3, 1,
	3, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 4, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<<<<<<< HEAD
	1, 4, 3, 4, 1, 1, 0, 1, 2, 0,
	3, 0, 2, 2, 0, 2, 2, 2, 2, 2,
	0, 2, 0, 3, 0, 1, 0, 2, 4, 4,
	0, 1, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 3, 1, 1, 1, 1, 1, 2, 2, 3,
	2, 4, 2, 4, 2, 2, 3, 2, 3, 2,
	7, 9, 3, 3, 6, 9, 9, 6, 6, 8,
	8, 5, 8, 7, 4, 0, 2, 4, 6, 2,
	4, 2, 1, 1, 2, 1, 2, 2, 1, 1,
	1, 3, 1, 2, 1, 1, 2, 0, 4, 3,
	4, 3, 3, 3, 3, 3, 3, 3, 2, 4,
	6, 2, 3, 2, 3, 1, 3, 0, 2, 0,
	2, 2, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	1, 1, 0, 1, 1, 3, 3, 2, 2, 2,
	1, 1, 1, 1, 4, 5, 4, 4, 4, 1,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 3, 0,
	3, 3, 0, 1, 0, 1, 0, 2, 1, 0,
	3, 3, 0, 1, 2, 6, 0, 1, 4, 1,
	2, 1, 3, 2, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 5, 2, 3,
	3, 2, 3, 2, 3, 3, 2, 2, 3, 4,
	1, 1, 1, 1, 1, 3, 3, 2, 2, 1,
	2, 5, 5, 8, 8, 13, 11, 1, 1, 2,
	2, 10, 8, 9, 7, 7, 5, 0, 1, 1,
	0, 1, 1, 1, 2, 2, 1, 2, 0, 3,
	0, 1, 1, 3, 0, 4, 1, 3, 2, 1,
	1, 2, 1, 1, 1, 1, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 3, 6, 4, 7, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 0, 4, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	8, 1, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 0, 4, 1, 3, 3, 2, 3,
	2, 1, 2, 0, 3, 1, 1, 3, 4, 4,
	4, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	4, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	6, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 2, 1, 4, 5, 5, 5,
	5, 6, 4, 4, 4, 6, 6, 8, 6, 6,
	6, 8, 6, 8, 6, 8, 6, 8, 9, 7,
	5, 4, 4, 3, 3, 3, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 2, 2, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 0, 2,
	1, 3, 5, 3, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 0, 3, 0, 2,
	1, 3, 1, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 5, 3, 1, 3, 1, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 2,
	0, 2, 2, 0, 1, 4, 1, 3, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
=======
	4, 3, 4, 1, 1, 0, 1, 0, 3, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 4, 4, 0, 1,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 2, 4,
	2, 4, 2, 2, 3, 2, 3, 2, 7, 9,
	3, 3, 6, 9, 9, 6, 6, 8, 8, 5,
	8, 7, 4, 0, 2, 4, 6, 2, 4, 2,
	1, 1, 2, 1, 2, 2, 1, 1, 1, 3,
	1, 2, 1, 1, 2, 0, 4, 3, 4, 3,
	3, 3, 3, 3, 3, 3, 2, 4, 6, 2,
	3, 2, 3, 1, 3, 0, 2, 0, 2, 2,
	3, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 2, 2, 2, 1, 1,
	0, 1, 1, 3, 3, 2, 2, 2, 1, 1,
	1, 1, 4, 5, 4, 4, 4, 1, 2, 2,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 3, 3, 0, 3, 3,
	0, 1, 0, 1, 0, 2, 1, 0, 3, 3,
	0, 1, 2, 6, 0, 1, 4, 1, 2, 1,
	3, 2, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 5, 2, 3, 3, 2,
	3, 2, 3, 3, 2, 2, 3, 4, 1, 1,
	1, 1, 1, 3, 3, 2, 2, 1, 2, 5,
	5, 8, 8, 13, 11, 1, 1, 2, 2, 10,
	8, 9, 7, 7, 5, 0, 1, 1, 0, 1,
	1, 1, 2, 2, 1, 2, 0, 3, 0, 1,
	1, 3, 0, 4, 1, 3, 2, 1, 1, 2,
	1, 1, 1, 1, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 3, 6, 4, 7, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 0, 4, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 8, 1,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 0, 4, 1, 3, 3, 2, 3, 2, 1,
	2, 0, 3, 1, 1, 3, 4, 4, 4, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 4, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 2, 1, 4, 5, 5, 5, 5, 6,
	4, 4, 4, 6, 6, 8, 6, 6, 6, 8,
	6, 8, 6, 8, 6, 8, 9, 7, 5, 4,
	4, 3, 3, 3, 1, 3, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 2, 2, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 0, 2, 1, 3,
	5, 3, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 0, 3, 0, 2, 1, 3,
	1, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 1, 3, 1, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 5, 3, 1, 3, 1, 2, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 2, 0,
	2, 2, 0, 1, 4, 1, 3, 2, 1, 3,
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
<<<<<<< HEAD
}

var yyChk = [...]int16{
	-1000, -223, -1, -20, -21, -24, 126, 127, -224, 392,
	-161, 58, -219, -220, 277, -181, 135, 148, 168, 169,
	362, 133, 374, 375, 150, 377, 79, -105, 138, -162,
	-148, -111, 63, 36, 61, 134, 134, 134, 136, 214,
	136, -111, -111, -78, 139, 61, -117, 63, -53, -117,
	61, 133, -107, 139, 377, 374, 375, 342, 133, 60,
	59, -149, -126, -130, -127, -132, -131, -133, -111, -128,
	-129, 250, 354, 247, 251, 248, 253, 254, 255, 120,
	252, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 256, 268, 33, 155, 240, 241, 242, 245,
	244, 246, 243, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 232, 233, 235, 236, 237, 239, 238, -149,
	-149, -111, 56, 213, -111, -111, -107, 215, -107, 56,
	-195, 19, 193, 194, 206, 56, 81, 123, 25, 123,
	-107, -53, 81, -53, 306, -165, -231, 357, 37, -148,
	-150, -154, -151, -152, -153, -166, -155, 142, 140, 150,
	390, 144, 145, 277, -159, 146, 134, 151, 73, 81,
	-187, 142, -190, 56, 285, 291, 140, 151, 150, 390,
	71, 143, 25, 364, 366, 31, 32, -143, 393, 279,
	-141, 288, -136, 58, -136, -135, 249, -137, 58, -136,
	-137, -136, -137, -139, 251, -139, -139, -139, -139, 58,
	58, -136, -136, -136, -136, -136, 58, -145, 58, -134,
	234, -145, -146, 58, -146, 56, 57, -53, -111, 56,
	56, -53, -215, 387, 388, -53, -53, -198, -196, 8,
	9, 10, 207, -53, 26, -112, -118, -111, 299, 147,
	-110, -117, 131, 194, 365, 80, 25, 27, 285, 291,
	193, 84, 120, 16, 85, 200, 374, 375, 119, 76,
	343, 126, 52, 335, 336, 333, 198, 345, 346, 334,
	292, 205, 20, 31, 387, 10, 28, 153, 24, 113,
	128, 195, 89, 88, 156, 160, 161, 26, 154, 75,
	201, 203, 19, 55, 146, 11, 364, 13, 14, 379,
	366, 139, 138, 100, 378, 134, 50, 8, 122, 29,
	388, 97, 46, 151, 204, 48, 98, 17, 337, 338,
	34, 352, 162, 115, 53, 40, 380, 81, 381, 73,
	56, 306, 199, 79, 15, 51, 163, 382, 148, 202,
	386, 99, 129, 342, 170, 49, 196, 383, 132, 197,
	6, 348, 33, 152, 47, 171, 133, 293, 384, 87,
	137, 74, 169, 5, 150, 9, 385, 54, 57, 339,
	340, 341, 38, 86, 12, 149, 356, 77, -126, -118,
	-110, -53, 26, 131, -53, -163, 59, -112, 71, -110,
	36, 58, -186, 56, 81, -157, -111, 151, -159, 61,
	134, -185, 374, 375, -227, 58, -159, -159, 61, 134,
	151, 61, 151, 73, 19, -111, 9, 151, 151, -186,
	63, -53, 58, -183, 365, 16, 58, -188, 58, -189,
	63, 64, 65, 110, 66, 73, -138, 72, -59, 280,
	-67, 333, 336, 335, 281, 74, 75, -111, 351, 350,
	-117, -191, 65, 394, -142, 289, 65, -139, -136, -139,
	65, 61, -139, -139, -140, 120, 119, 33, -140, -140,
	-140, -140, -147, 63, -147, -144, 356, 357, -144, 65,
	65, -145, 65, -53, -111, 58, 56, -53, -53, 25,
	136, 25, -176, 25, 56, 59, 207, -195, -111, 123,
	57, -115, 142, -154, 150, 131, 90, -112, -231, -170,
	-167, -111, 151, 10, 9, 19, 146, 140, 150, 390,
	-185, 61, 58, -39, -58, 81, -64, 31, 26, 9,
	76, -227, -63, -59, -78, -208, -76, -77, 120, 121,
	109, 110, 117, 82, 122, -67, -65, -66, -68, -211,
	180, 63, 64, -111, 62, 72, 65, 66, 67, 68,
	73, -117, 311, -74, 48, 49, 343, 344, 345, 346,
	352, 347, 85, 38, 40, 256, 280, 281, 333, 341,
	340, 339, 337, 338, 335, 336, 389, 139, 334, 115,
	342, 278, 61, 61, 61, 61, -185, 150, -157, -111,
	376, -187, 390, -138, -227, 58, -39, 25, 31, -60,
	65, 110, -188, 58, -189, -178, 389, 65, 66, -178,
	-227, -136, 58, -136, 58, 58, -227, -227, -227, 123,
	60, -140, -139, -140, 60, 60, -140, -140, 61, 61,
	120, 60, 59, 60, 240, 240, 60, 59, 60, 59,
	58, 57, 56, -169, -170, -67, -111, -53, 58, 58,
	-2, -3, -4, 6, -227, -107, -2, -177, 19, 177,
	178, -53, -196, -92, -111, 151, -198, -195, -112, -111,
	-226, 134, 151, -111, 142, -154, -164, -112, 63, 65,
	60, 59, -136, -168, 283, -136, -156, 173, 174, 33,
	175, -156, 376, 151, 151, -185, -227, 58, -170, -228,
	80, 79, 97, 208, 60, -39, -61, 100, 81, 98,
	99, 84, 106, 105, 116, 109, 110, 111, 112, 113,
	114, 115, 107, 108, 389, 119, 90, 91, 92, 93,
	94, 95, 96, 101, 102, 103, 104, -106, -227, -77,
	-227, -227, -227, -58, -2, -71, -227, -39, 124, 125,
	-64, -227, -64, -64, -64, -64, -64, -64, -212, 279,
	-178, 63, 123, 123, -227, -227, -227, -227, -227, -227,
	-227, -227, -81, -39, -227, 41, -227, -227, -227, -227,
	-233, -227, -233, -233, -233, -233, -233, -233, -125, 120,
	251, 155, 242, -128, -127, 257, 256, -227, -227, -227,
	-227, -185, 58, -186, -39, -92, 60, 58, 366, 59,
	65, 60, -188, 63, 60, 282, 122, -126, -228, 60,
	60, 60, -37, 24, -36, -71, -38, -39, 111, -117,
	-36, -39, -36, -112, -140, -139, 63, -139, 290, 290,
	65, 65, -169, -111, -53, 60, 58, 58, -92, -170,
	-85, 15, -27, 5, -25, -232, -2, -53, 137, 21,
	6, 8, 9, 10, 19, -109, 59, 25, -198, -225,
	58, -111, 150, -111, -172, -174, 356, -173, 57, 147,
	71, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	61, -167, -88, 27, 28, -186, 56, 73, 176, -186,
	56, -157, -185, 58, -39, -170, 60, -182, 175, -39,
	-39, -69, 73, 81, 74, 75, -64, 21, 22, 23,
	-70, -74, -77, 69, 100, 98, 99, 84, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -130, 241, -125, -128, -122, 61, 63,
	61, -78, -111, -228, -228, -228, 59, -228, -2, -63,
	63, -111, -63, -111, 393, -112, -112, -36, -36, -39,
	-124, 120, 247, 155, 242, 236, 266, 267, 287, 240,
	288, 229, 221, 226, 239, 237, 223, 238, 222, 235,
	232, 245, 244, 246, 257, 248, 253, 255, 254, 252,
	-39, -38, -38, -36, -30, 24, -79, -80, 86, -78,
	19, -228, -228, -228, -228, -228, 249, -36, -37, -36,
	-36, -36, -158, -111, -227, -228, 60, 362, 363, -39,
	58, -60, 60, -143, -228, -36, 59, -228, -228, -114,
	-113, 25, -111, 63, 123, -228, -228, -227, -140, -140,
	60, 60, 60, 58, 58, -93, 378, -169, 60, 60,
	-89, 17, 16, -5, -3, -227, 21, 24, -32, 44,
	45, -26, -228, 25, -158, 195, -108, 86, -111, -199,
	-201, 216, -18, -15, -6, -8, -7, -10, -9, -11,
	-12, -13, -14, -22, -3, 139, -16, -17, -28, 10,
	9, 20, 33, 199, 200, 205, 201, 149, -29, 170,
	-23, 8, 342, 160, 161, 56, -230, -111, 109, 90,
	63, -148, 59, 58, 58, 374, 375, 140, -171, 56,
	-173, 356, 58, 358, 61, -160, 90, 63, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 9, 10,
	58, 58, -170, -228, 60, -172, 349, 73, 74, 75,
	-64, -64, -64, -70, -64, -64, -64, -35, 156, 80,
	356, -228, -228, -39, -228, -213, -214, 63, -228, -228,
	59, 57, 59, -136, -136, -136, -146, 227, -136, 227,
	-146, -136, -136, -136, -136, -136, -136, 25, 59, 11,
	59, 11, -228, -36, -82, -80, 89, -39, -228, -117,
	-228, -228, -228, -228, 60, 59, -39, -182, 56, 60,
	-184, 60, 60, -228, -38, -216, 391, -113, 111, -118,
	-216, -216, -37, -93, -169, -170, -57, 12, 58, 60,
	-57, -172, -90, 19, 34, -39, -86, -87, -39, -85,
	-2, -30, 70, -2, -179, 57, 196, 216, -39, 392,
	-201, 216, -199, -85, -39, -25, -25, -25, -203, -111,
	-202, -25, -222, -221, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, -111, -111, -111, -197, 40,
	202, 203, 204, -39, -111, -227, -81, -53, 60, -230,
	-111, -230, -230, -230, -230, -230, -170, -170, 58, 58,
	151, -111, -175, -173, -111, 65, -192, 56, 77, 65,
	-192, -192, -192, -192, -192, -193, 191, 192, 65, -194,
	-193, 65, -156, -156, -158, -170, 60, -182, -172, -171,
	-35, 80, -64, -64, 240, 394, 59, -178, -124, 120,
	-122, -39, -139, 61, -124, -64, -64, -64, -64, 353,
	-85, 88, -39, 87, 143, -111, -228, 10, 9, 362,
	363, 60, 217, 368, 369, 162, 370, 175, 371, 372,
	-227, 123, -228, -57, 60, 60, -172, -39, -92, -93,
	-172, 9, 100, 59, 18, 59, -88, -89, -228, -31,
	47, -180, 356, -39, -199, -200, -201, -201, -199, 392,
	88, -89, 87, -19, -15, -16, -18, 216, -105, 11,
	-48, -53, -41, -42, -43, -44, -55, -77, -227, -53,
	59, -204, -121, 197, 25, -98, -123, 218, -102, 301,
	300, -112, 311, -100, 299, 251, 298, -192, 59, -111,
	11, 11, 11, 11, -201, 216, -72, -71, -72, -109,
	19, 60, 60, -170, -170, 58, -227, 60, 59, -186,
	-186, 60, 60, -172, -171, -64, 290, -214, -228, -228,
	-228, 59, -228, -228, 59, -228, 19, -228, 59, -228,
	19, -227, -34, 348, -39, -53, -182, -156, -156, 356,
	-60, 16, -60, -60, -60, 65, 369, 162, 371, 16,
	-228, 163, -85, 111, -172, -57, -172, -171, 60, -57,
	-171, 42, -39, -39, -87, -90, -36, 390, 392, -201,
	88, 88, -90, -199, 89, 89, -200, -54, 29, -53,
	-53, -48, -229, 59, 11, 57, 33, 59, -49, -51,
	-50, -52, 46, 50, 52, 47, 48, 49, 53, -121,
	-41, -227, -120, 163, -119, 25, -117, 63, -202, -111,
	198, -126, 59, -98, 218, -99, -103, 302, 304, 90,
	123, -116, -111, 63, 31, 33, -221, 29, -200, -228,
	-108, 195, -209, 209, 81, 60, 60, -170, -111, -173,
	143, -172, -171, -64, -64, -64, -64, -64, -64, -228,
	63, 58, -60, -60, 373, -117, 16, -228, -171, -172,
	-172, 43, -40, 11, -39, 88, -201, 392, -16, -19,
	139, -17, 139, 392, 88, -94, 163, -53, -94, 57,
	-41, -53, -97, -101, -78, -42, -43, -43, -42, -43,
	46, 46, 46, 51, 46, 51, 46, -50, -117, -228,
	-56, 54, 138, 55, -227, -119, 19, -102, -99, 59,
	303, 305, 306, 56, 77, -39, -112, -140, -158, 88,
	216, 196, -210, 210, 209, -172, -172, 60, -228, -53,
	-171, -228, -228, -228, -228, -228, -33, 100, 356, -158,
	123, -217, -218, -39, -171, -57, -41, 88, 89, -39,
	-39, -62, 33, 38, -2, -227, -227, -57, -41, -57,
	-40, 59, 90, -46, -45, 56, 57, -47, 56, -45,
	46, 46, -206, 356, 134, 134, 134, -95, -111, -2,
	-103, -104, 307, 304, 310, 90, -200, 212, 211, -171,
	-171, 58, -228, 354, 53, 359, 60, -112, -228, -85,
	59, -83, 13, 139, -199, -19, -19, -96, 56, -97,
	-73, -75, -74, -227, -2, -91, -111, -95, -85, -57,
	-57, -101, -39, -39, 58, -39, 58, -227, -227, -227,
	-228, 59, 304, 308, 309, -39, 392, -158, 43, 355,
	360, -228, -218, -84, 14, 16, 392, 30, -96, 59,
	-228, -228, -228, 59, 123, -228, -89, -85, -92, -205,
	-207, 379, 380, 381, 382, 383, 384, 385, 386, -92,
	-92, -92, -120, -111, 88, 60, 43, -39, -71, 88,
	151, -75, 38, -2, -227, -111, -111, -89, 60, 60,
	59, -228, -228, -228, -56, 356, 139, 9, -73, -2,
	123, -207, -206, 359, -97, -228, -111, 360,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 826, 1, 3,
	6, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 824, 431, 432, 433, 436, 0, 0, 827, 0,
	171, 215, 215, 215, 828, 0, 0, 0, 824, 0,
	824, 0, 750, 0, 0, -2, 0, 834, 0, 545,
	833, 824, 0, 0, 437, 434, 435, 167, 0, 444,
	0, 178, 346, 342, 182, 183, 184, 185, 186, 329,
	264, 292, 293, 329, 316, 336, 329, 336, 299, 329,
	336, 349, 349, 349, 349, 349, 307, 308, 309, 310,
	311, 312, 313, 0, 0, 284, 329, 329, 329, 329,
	329, 290, 291, 318, 319, 320, 321, 322, 323, 324,
	325, 0, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 331, 282, 331, 333, 333, 280, 281, 179,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 114, 115, 0, 0, 0, 0, 0, 0,
	0, 168, 0, 0, 0, 169, 446, 0, 449, 172,
	173, 174, 175, 176, 177, 0, 438, 440, 0, 427,
	0, 0, 0, 0, 0, 0, 400, 401, 188, 0,
	190, 0, 192, 0, 194, 195, 0, 197, 199, 438,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 348,
	344, 343, 263, 0, 349, 329, 317, 349, 0, 349,
	349, 300, 301, 352, 0, 352, 352, 352, 352, 0,
	0, 339, 339, 287, 288, 289, 0, 275, 0, 331,
	283, 277, 278, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 151, 0, 121, 117,
	118, 119, 116, 0, 0, 751, 0, 829, 830, 831,
	-2, 835, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 22, 546,
	836, 0, 825, 164, 0, 0, 0, 450, 452, 832,
	448, 0, 410, 0, 0, 0, 441, 388, 0, 396,
	-2, 0, 428, 429, 843, 1008, 0, 0, 391, 393,
	0, 427, 440, 189, 0, 0, 0, 196, 198, 0,
	202, 203, 843, 0, 235, 0, 0, 216, 0, 219,
	-2, 222, 223, 0, 225, 259, 228, 229, 230, 0,
	232, 329, 329, 255, 0, 565, 566, 0, 0, 0,
	0, 233, 234, 347, 181, 345, 0, 352, 349, 352,
	0, 0, 352, 352, 302, 353, 0, 0, 303, 304,
	305, 306, 0, 327, 0, 285, 0, 0, 286, 0,
	0, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	824, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 29, 165, 0, 0, 451, 447, 0,
	404, 329, 329, 0, 0, 0, 0, 0, 427, 0,
	0, 395, 0, 0, 555, 843, 561, 563, 0, 0,
	0, 843, 608, 609, 610, 611, 612, 613, 843, 843,
	843, 843, 843, 843, 843, 640, 641, 642, 643, 0,
	645, -2, 755, 750, 757, 758, 759, 760, 761, 762,
	763, 0, 0, 805, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 676, 686,
	686, 686, 686, 686, 686, 686, 0, 0, 0, 0,
	0, 844, 389, 390, 392, 394, 398, 427, 0, 441,
	214, 191, 438, 193, 843, 0, 0, 0, 236, 0,
	764, 0, 0, 0, 0, 221, 0, 224, 226, 227,
	0, 251, 0, 253, 0, 0, -2, 843, 843, 0,
	330, 294, 352, 296, 337, 338, 297, 298, 354, 350,
	351, 349, 0, 349, 0, 0, 326, 0, 334, 0,
	0, 0, 0, 0, 402, 403, 329, 0, 0, 0,
	-2, 773, 0, 456, 0, 0, -2, 0, 0, 152,
	153, 149, 122, 120, 511, 512, 0, 0, 752, 104,
	0, 31, 32, 441, 440, 30, 445, 453, 454, 455,
	356, 0, 778, 408, 409, 407, 438, 417, 418, 0,
	0, 438, 439, 440, 427, 0, 843, 0, 0, 257,
	843, 843, 0, 560, 1009, 558, 843, 0, 0, 843,
	843, 843, 843, 843, 843, 843, 843, 843, 843, 843,
	843, 843, 843, 843, 0, 0, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 562, 0, 579,
	0, 0, 0, 555, 36, 0, 843, 606, 0, 0,
	631, 843, 632, 633, 634, 635, 636, 637, 644, 0,
	754, 756, 0, 0, 843, 843, 843, 843, 843, 843,
	843, 466, 0, 740, 0, 0, 0, 0, 0, 0,
	678, 0, 679, 680, 681, 682, 683, 684, 685, 731,
	0, 733, 734, 735, 736, 737, 738, 843, -2, 843,
	843, 399, 0, 0, 0, 0, 0, 843, 211, 0,
	765, 217, 0, 259, 220, 260, 261, 346, 231, 252,
	254, 256, 0, 843, 0, 0, 472, 478, 474, 0,
	0, 478, 0, 0, 295, 352, 328, 352, 340, 341,
	0, 0, 0, 0, 0, 553, 1008, 0, 0, 0,
	781, 0, 0, 460, 463, 458, 36, 0, 0, 155,
	156, 157, 158, 159, 0, 746, 0, 0, 0, 23,
	106, 0, 0, 441, 385, 357, 0, 359, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 405, 406, 779, 780, 411, 0, 419, 420, 412,
	0, 0, 0, 0, 0, 0, 356, 426, 0, 556,
	557, 559, 583, 0, 585, 587, 567, 843, 843, 843,
	571, 602, 603, 604, 0, 843, 843, 843, 600, 575,
	0, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 628, 0, 639, 329, 629, 697, 698,
	0, 0, 750, 581, 582, 605, 843, 804, 36, 626,
	259, 0, 627, 638, 0, 751, 753, 0, 0, 0,
	0, -2, 329, 702, 329, 333, 705, 706, 707, 329,
	710, 712, 713, 714, 715, 333, 717, 718, 719, 720,
	721, 329, 329, 724, 725, 329, 329, 728, 329, 329,
	0, 0, 0, 0, 843, 467, 748, 743, 843, 0,
	0, 673, 674, 675, 677, 687, 732, 0, 0, 471,
	0, 0, 0, 442, 843, 257, 204, 207, 208, 0,
	237, 0, 0, 262, 646, 0, 843, 483, 652, 475,
	479, 0, 481, 482, 0, 483, 483, -2, 314, 315,
	332, 335, 553, 0, 0, 551, 0, 0, 551, 356,
	785, 843, 843, 773, 38, 0, 461, 462, 466, 464,
	465, 457, 37, 0, 160, 0, 0, 843, 513, 19,
	123, 0, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 773, 843, 82, 83, 456, 456,
	456, 0, 456, 0, 0, 0, 70, 843, 0, -2,
	816, 42, 43, 144, 145, 0, 0, -2, 106, 106,
	-2, 106, 106, 0, 0, 0, 0, 0, 355, 0,
	360, 0, 0, 0, 363, 0, 378, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 356, 385, 258, 584, 586, 588,
	568, 569, 570, 572, 600, 576, 0, 573, 843, 843,
	0, 564, 580, 607, -2, 0, 846, 259, 653, 654,
	0, 0, 843, 699, 349, 703, 704, 708, 709, 711,
	716, 722, 723, 726, 727, 729, 730, 0, 843, 843,
	843, 843, 0, 773, 0, 744, 843, 0, 671, 672,
	688, 689, 690, 691, 0, 0, 0, 200, 0, 0,
	0, 213, 218, 647, 473, 648, 0, 480, 476, 0,
	649, 650, 0, 551, 0, 0, 356, 843, 0, 553,
	356, 13, 33, 0, 0, 782, 774, 775, 778, 781,
	36, 468, 459, -2, 162, 843, 150, 0, 747, 0,
	126, 0, 0, 781, 0, 826, 0, 0, 58, -2,
	60, 0, 0, 849, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 65, 66, 67, 0, 0,
	0, 0, 0, 0, -2, -2, 148, 149, 105, 107,
	-2, 108, 109, 110, 111, 112, 0, 0, 0, 0,
	0, 386, 0, 361, 366, 364, 367, 379, 380, 368,
	369, 370, 371, 372, 373, 374, 381, 382, 375, 376,
	383, 384, 438, 438, 0, 0, 356, 425, 385, 424,
	574, 843, 601, 577, 0, 845, 0, 848, 0, 329,
	0, 0, 700, 701, 0, 0, 0, 0, 0, 0,
	741, 670, 749, 843, 0, 443, 257, 0, 0, 209,
	210, 212, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 651, 356, 551, 356, 385, 552, 0, 551,
	385, 786, 0, 843, 843, 843, 777, 785, 39, 843,
	469, 17, 0, 161, 18, 0, 77, 124, 0, 0,
	127, 785, 0, 88, 86, 82, 89, 0, 0, 0,
	0, 50, 0, 490, 492, 493, 494, 526, 0, 528,
	0, 0, 0, 64, 527, 54, 0, 0, 809, 102,
	103, 0, 0, 0, -2, 0, 820, 817, 0, 68,
	71, 72, 73, 74, 75, 0, 142, 147, 0, 746,
	0, 24, 837, 0, 0, 0, 0, 358, 0, 413,
	414, 0, 356, 385, 422, 578, 630, 847, 655, 659,
	656, 843, 658, 660, 843, 662, 843, 664, 843, 666,
	843, 843, 0, 0, 745, 0, 201, 205, 206, 0,
	239, 0, 241, 242, 243, 244, 245, 246, 247, 0,
	484, 0, 0, 477, 385, 356, 10, 8, 554, 356,
	12, 0, 783, 784, 776, 34, 488, 843, 0, 78,
	128, 125, 141, 0, 0, 0, 0, 52, 0, 544,
	-2, 0, 0, 0, 48, 49, 0, 0, 0, 0,
	0, 0, 533, 0, 0, 536, 0, 0, 0, 0,
	0, 0, 547, 0, 529, 0, 531, 532, 61, 526,
	0, 62, 0, 55, 0, 57, 91, 0, 0, 843,
	0, 352, 821, 822, 823, 819, 850, 0, 0, 143,
	0, 0, 840, 838, 0, 356, 356, 0, 0, 362,
	0, 385, 423, 0, 0, 0, 0, 0, 692, 669,
	742, 0, 238, 240, 249, 0, 843, 486, 7, 11,
	385, 787, 551, 0, 163, 20, 79, 0, 84, 85,
	843, 87, 843, 0, 90, 0, 0, 543, 551, 0,
	551, 51, 488, 806, 0, 491, 522, 524, 0, 519,
	534, 535, 537, 0, 539, 0, 541, 542, 495, 496,
	497, 0, 0, 0, 0, 530, 0, 810, 56, 0,
	0, 94, 95, 811, 812, 813, 0, 815, 69, 76,
	0, 150, 26, 0, 839, 385, 385, 25, 387, 0,
	421, 657, 661, 663, 665, 667, 0, 0, 0, 0,
	0, 0, 770, 772, 9, 766, 489, 0, 0, 0,
	0, 798, 0, 0, -2, 0, 0, 773, 551, 47,
	551, 0, 843, 516, 523, 843, 0, 517, 843, 518,
	538, 540, 509, 0, 0, 0, 0, 0, 514, -2,
	92, 93, 0, 0, 99, 843, 0, 841, 842, 27,
	28, 0, 668, 0, 0, 0, 416, 250, 485, 0,
	843, 768, 0, 80, 0, 0, 88, 40, 0, 798,
	788, 800, 802, 843, 36, 0, 794, 0, 781, 46,
	773, 807, 808, 520, 0, 525, 0, 0, 0, 0,
	528, 0, 96, 97, 98, 814, 0, 0, 693, 0,
	696, 487, 771, 35, 843, 843, 0, 0, 41, 0,
	803, -2, 0, 0, 0, 53, 45, 781, 0, 0,
	499, 501, 502, 503, 504, 505, 506, 507, 508, 0,
	0, 0, 547, 515, 21, 415, 694, 769, 767, 0,
	0, 801, 0, -2, 0, 796, 795, 44, 521, 498,
	0, 548, 549, 550, 497, 0, 81, 0, 791, 36,
	0, 500, 510, 0, 799, -2, 797, 695,
=======
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -223, -1, -19, -20, -23, 126, 127, -224, 391,
	-161, 58, -219, -220, 276, -181, 135, 148, 168, 169,
	361, 133, 373, 374, 150, 376, 79, -105, 138, -162,
	-148, -111, 63, 36, 61, 134, 134, 134, 136, 213,
	136, -111, -111, -77, 139, 61, -117, 63, -52, -117,
	61, 133, -107, 139, 376, 373, 374, 341, 133, 60,
	59, -149, -126, -130, -127, -132, -131, -133, -111, -128,
	-129, 249, 353, 246, 250, 247, 252, 253, 254, 120,
	251, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 255, 267, 33, 155, 239, 240, 241, 244,
	243, 245, 242, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 220, 221, 222, 223, 224, 225, 226, 227,
	228, 229, 231, 232, 234, 235, 236, 238, 237, -149,
	-149, -111, 56, 212, -111, -111, -107, 214, -107, 56,
	-195, 19, 192, 193, 205, 56, 81, 123, 25, 123,
	-107, -52, 81, -52, 305, -165, -231, 356, 37, -148,
	-150, -154, -151, -152, -153, -166, -155, 142, 140, 150,
	389, 144, 145, 276, -159, 146, 134, 151, 73, 81,
	-187, 142, -190, 56, 284, 290, 140, 151, 150, 389,
	71, 143, 25, 363, 365, 31, 32, -143, 392, 278,
	-141, 287, -136, 58, -136, -135, 248, -137, 58, -136,
	-137, -136, -137, -139, 250, -139, -139, -139, -139, 58,
	58, -136, -136, -136, -136, -136, 58, -145, 58, -134,
	233, -145, -146, 58, -146, 56, 57, -52, -111, 56,
	56, -52, -215, 386, 387, -52, -52, -198, -196, 8,
	9, 10, 206, -52, 26, -112, -118, -111, 298, 147,
	-110, -117, 131, 193, 364, 80, 25, 27, 284, 290,
	192, 84, 120, 16, 85, 199, 373, 374, 119, 76,
	342, 126, 52, 334, 335, 332, 197, 344, 345, 333,
	291, 204, 20, 31, 386, 10, 28, 153, 24, 113,
	128, 194, 89, 88, 156, 160, 161, 26, 154, 75,
	200, 202, 19, 55, 146, 11, 363, 13, 14, 378,
	365, 139, 138, 100, 377, 134, 50, 8, 122, 29,
	387, 97, 46, 151, 203, 48, 98, 17, 336, 337,
	34, 351, 162, 115, 53, 40, 379, 81, 380, 73,
	56, 305, 198, 79, 15, 51, 163, 381, 148, 201,
	385, 99, 129, 341, 49, 195, 382, 132, 196, 6,
	347, 33, 152, 47, 170, 133, 292, 383, 87, 137,
	74, 169, 5, 150, 9, 384, 54, 57, 338, 339,
	340, 38, 86, 12, 149, 355, 77, -126, -118, -110,
	-52, 26, 131, -52, -163, 59, -112, 71, -110, 36,
	58, -186, 56, 81, -157, -111, 151, -159, 61, 134,
	-185, 373, 374, -227, 58, -159, -159, 61, 134, 151,
	61, 151, 73, 19, -111, 9, 151, 151, -186, 63,
	-52, 58, -183, 364, 16, 58, -188, 58, -189, 63,
	64, 65, 110, 66, 73, -138, 72, -58, 279, -66,
	332, 335, 334, 280, 74, 75, -111, 350, 349, -117,
	-191, 65, 393, -142, 288, 65, -139, -136, -139, 65,
	61, -139, -139, -140, 120, 119, 33, -140, -140, -140,
	-140, -147, 63, -147, -144, 355, 356, -144, 65, 65,
	-145, 65, -52, -111, 58, 56, -52, -52, 25, 136,
	25, -176, 25, 56, 59, 206, -195, -111, 123, 57,
	-115, 142, -154, 150, 131, 90, -112, -231, -170, -167,
	-111, 151, 10, 9, 19, 146, 140, 150, 389, -185,
	61, 58, -38, -57, 81, -63, 31, 26, 9, 76,
	-227, -62, -58, -77, -208, -75, -76, 120, 121, 109,
	110, 117, 82, 122, -66, -64, -65, -67, -211, 179,
	63, 64, -111, 62, 72, 65, 66, 67, 68, 73,
	-117, 310, -73, 48, 49, 342, 343, 344, 345, 351,
	346, 85, 38, 40, 255, 279, 280, 332, 340, 339,
	338, 336, 337, 334, 335, 388, 139, 333, 115, 341,
	277, 61, 61, 61, 61, -185, 150, -157, -111, 375,
	-187, 389, -138, -227, 58, -38, 25, 31, -59, 65,
	110, -188, 58, -189, -178, 388, 65, 66, -178, -227,
	-136, 58, -136, 58, 58, -227, -227, -227, 123, 60,
	-140, -139, -140, 60, 60, -140, -140, 61, 61, 120,
	60, 59, 60, 239, 239, 60, 59, 60, 59, 58,
	57, 56, -169, -170, -66, -111, -52, 58, 58, -2,
	-3, -4, 6, -227, -107, -2, -177, 19, 176, 177,
	-52, -196, -91, -111, 151, -198, -195, -112, -111, -226,
	134, 151, -111, 142, -154, -164, -112, 63, 65, 60,
	59, -136, -168, 282, -136, -156, 172, 173, 33, 174,
	-156, 375, 151, 151, -185, -227, 58, -170, -228, 80,
	79, 97, 207, 60, -38, -60, 100, 81, 98, 99,
	84, 106, 105, 116, 109, 110, 111, 112, 113, 114,
	115, 107, 108, 388, 119, 90, 91, 92, 93, 94,
	95, 96, 101, 102, 103, 104, -106, -227, -76, -227,
	-227, -227, -57, -2, -70, -227, -38, 124, 125, -63,
	-227, -63, -63, -63, -63, -63, -63, -212, 278, -178,
	63, 123, 123, -227, -227, -227, -227, -227, -227, -227,
	-227, -80, -38, -227, 41, -227, -227, -227, -227, -233,
	-227, -233, -233, -233, -233, -233, -233, -125, 120, 250,
	155, 241, -128, -127, 256, 255, -227, -227, -227, -227,
	-185, 58, -186, -38, -91, 60, 58, 365, 59, 65,
	60, -188, 63, 60, 281, 122, -126, -228, 60, 60,
	60, -36, 24, -35, -70, -37, -38, 111, -117, -35,
	-38, -35, -112, -140, -139, 63, -139, 289, 289, 65,
	65, -169, -111, -52, 60, 58, 58, -91, -170, -84,
	15, -26, 5, -24, -232, -2, -52, 137, 21, 6,
	8, 9, 10, 19, -109, 59, 25, -198, -225, 58,
	-111, 150, -111, -172, -174, 355, -173, 57, 147, 71,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 61,
	-167, -87, 27, 28, -186, 56, 73, 175, -186, 56,
	-157, -185, 58, -38, -170, 60, -182, 174, -38, -38,
	-68, 73, 81, 74, 75, -63, 21, 22, 23, -69,
	-73, -76, 69, 100, 98, 99, 84, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -63, -63, -63, -63,
	-63, -63, -130, 240, -125, -128, -122, 61, 63, 61,
	-77, -111, -228, -228, -228, 59, -228, -2, -62, 63,
	-111, -62, -111, 392, -112, -112, -35, -35, -38, -124,
	120, 246, 155, 241, 235, 265, 266, 286, 239, 287,
	228, 220, 225, 238, 236, 222, 237, 221, 234, 231,
	244, 243, 245, 256, 247, 252, 254, 253, 251, -38,
	-37, -37, -35, -29, 24, -78, -79, 86, -77, 19,
	-228, -228, -228, -228, -228, 248, -35, -36, -35, -35,
	-35, -158, -111, -227, -228, 60, 361, 362, -38, 58,
	-59, 60, -143, -228, -35, 59, -228, -228, -114, -113,
	25, -111, 63, 123, -228, -228, -227, -140, -140, 60,
	60, 60, 58, 58, -93, 377, -169, 60, 60, -88,
	17, 16, -5, -3, -227, 21, 24, -31, 44, 45,
	-25, -228, 25, -158, 194, -108, 86, -111, -199, -201,
	215, -17, -14, -6, -8, -7, -10, -9, -11, -12,
	-13, -21, -3, 139, -15, -16, -27, 10, 9, 20,
	33, 198, 199, 204, 200, 149, -28, -22, 8, 341,
	160, 161, 56, -230, -111, 109, 90, 63, -148, 59,
	58, 58, 373, 374, 140, -171, 56, -173, 355, 58,
	357, 61, -160, 90, 63, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 9, 10, 58, 58, -170,
	-228, 60, -172, 348, 73, 74, 75, -63, -63, -63,
	-69, -63, -63, -63, -34, 156, 80, 355, -228, -228,
	-38, -228, -213, -214, 63, -228, -228, 59, 57, 59,
	-136, -136, -136, -146, 226, -136, 226, -146, -136, -136,
	-136, -136, -136, -136, 25, 59, 11, 59, 11, -228,
	-35, -81, -79, 89, -38, -228, -117, -228, -228, -228,
	-228, 60, 59, -38, -182, 56, 60, -184, 60, 60,
	-228, -37, -216, 390, -113, 111, -118, -216, -216, -36,
	-93, -169, -170, -56, 12, 58, 60, -56, -172, -89,
	19, 34, -38, -85, -86, -38, -84, -2, -29, 70,
	-2, -179, 57, 195, 215, -38, 391, -201, 215, -199,
	-84, -38, -57, -24, -24, -24, -203, -111, -202, -24,
	-222, -221, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	329, 330, 331, -111, -111, -111, -197, 40, 201, 202,
	203, -57, -63, -111, -227, -52, 60, -230, -111, -230,
	-230, -230, -230, -230, -170, -170, 58, 58, 151, -111,
	-175, -173, -111, 65, -192, 56, 77, 65, -192, -192,
	-192, -192, -192, -193, 190, 191, 65, -194, -193, 65,
	-156, -156, -158, -170, 60, -182, -172, -171, -34, 80,
	-63, -63, 239, 393, 59, -178, -124, 120, -122, -38,
	-139, 61, -124, -63, -63, -63, -63, 352, -84, 88,
	-38, 87, 143, -111, -228, 10, 9, 361, 362, 60,
	216, 367, 368, 162, 369, 174, 370, 371, -227, 123,
	-228, -56, 60, 60, -172, -38, -91, -93, -172, 9,
	100, 59, 18, 59, -87, -88, -228, -30, 47, -180,
	355, -38, -199, -200, -201, -201, -199, 391, 88, -88,
	87, -18, -14, -15, -17, 215, -105, 11, -47, -52,
	-40, -41, -42, -43, -54, -76, -227, -52, 59, -204,
	-121, 196, 25, -98, -123, 217, -102, 300, 299, -112,
	310, -100, 298, 250, 297, -192, 59, -111, 11, 11,
	11, 11, -201, 215, -71, -70, -71, -109, 19, 60,
	60, -170, -170, 58, -227, 60, 59, -186, -186, 60,
	60, -172, -171, -63, 289, -214, -228, -228, -228, 59,
	-228, -228, 59, -228, 19, -228, 59, -228, 19, -227,
	-33, 347, -38, -52, -182, -156, -156, 355, -59, 16,
	-59, -59, -59, 65, 368, 162, 370, 16, -228, 163,
	-84, 111, -172, -56, -172, -171, 60, -56, -171, 42,
	-38, -38, -86, -89, -35, 389, 391, -201, 88, 88,
	-89, -199, 89, 89, -200, -53, 29, -52, -52, -47,
	-229, 59, 11, 57, 33, 59, -48, -50, -49, -51,
	46, 50, 52, 47, 48, 49, 53, -121, -40, -227,
	-120, 163, -119, 25, -117, 63, -202, -111, 197, -126,
	59, -98, 217, -99, -103, 301, 303, 90, 123, -116,
	-111, 63, 31, 33, -221, 29, -200, -228, -108, 194,
	-209, 208, 81, 60, 60, -170, -111, -173, 143, -172,
	-171, -63, -63, -63, -63, -63, -63, -228, 63, 58,
	-59, -59, 372, -117, 16, -228, -171, -172, -172, 43,
	-39, 11, -38, 88, -201, 391, -15, -18, 139, -16,
	139, 391, 88, -94, 163, -52, -94, 57, -40, -52,
	-97, -101, -77, -41, -42, -42, -41, -42, 46, 46,
	46, 51, 46, 51, 46, -49, -117, -228, -55, 54,
	138, 55, -227, -119, 19, -102, -99, 59, 302, 304,
	305, 56, 77, -38, -112, -140, -158, 88, 215, 195,
	-210, 209, 208, -172, -172, 60, -228, -52, -171, -228,
	-228, -228, -228, -228, -32, 100, 355, -158, 123, -217,
	-218, -38, -171, -56, -40, 88, 89, -57, -57, -61,
	33, 38, -2, -227, -227, -56, -40, -56, -39, 59,
	90, -45, -44, 56, 57, -46, 56, -44, 46, 46,
	-206, 355, 134, 134, 134, -95, -111, -2, -103, -104,
	306, 303, 309, 90, -200, 211, 210, -171, -171, 58,
	-228, 353, 53, 358, 60, -112, -228, -84, 59, -82,
	13, 139, -199, -18, -18, -96, 56, -97, -72, -74,
	-73, -227, -2, -90, -92, 6, -111, -110, -95, -84,
	-56, -56, -101, -38, -38, 58, -38, 58, -227, -227,
	-227, -228, 59, 303, 307, 308, -38, 391, -158, 43,
	354, 359, -228, -218, -83, 14, 16, 391, 30, -96,
	59, -228, -228, -228, 59, 123, -228, -88, -84, -91,
	-205, -207, 378, 379, 380, 381, 382, 383, 384, 385,
	-91, -91, -91, -120, -111, 88, 60, 43, -38, -70,
	88, 151, -74, 38, -2, -227, -92, -111, -88, 60,
	60, 59, -228, -228, -228, -55, 355, 139, 9, -72,
	-2, -207, -206, 358, -97, -228, 359,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 825, 1, 3,
	6, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 823, 429, 430, 431, 434, 0, 0, 826, 0,
	169, 213, 213, 213, 827, 0, 0, 0, 823, 0,
	823, 0, 748, 0, 0, -2, 0, 833, 0, 543,
	832, 823, 0, 0, 435, 432, 433, 165, 0, 442,
	0, 176, 344, 340, 180, 181, 182, 183, 184, 327,
	262, 290, 291, 327, 314, 334, 327, 334, 297, 327,
	334, 347, 347, 347, 347, 347, 305, 306, 307, 308,
	309, 310, 311, 0, 0, 282, 327, 327, 327, 327,
	327, 288, 289, 316, 317, 318, 319, 320, 321, 322,
	323, 0, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 329, 280, 329, 331, 331, 278, 279, 177,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 114, 115, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 167, 444, 0, 447, 170,
	171, 172, 173, 174, 175, 0, 436, 438, 0, 425,
	0, 0, 0, 0, 0, 0, 398, 399, 186, 0,
	188, 0, 190, 0, 192, 193, 0, 195, 197, 436,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 346,
	342, 341, 261, 0, 347, 327, 315, 347, 0, 347,
	347, 298, 299, 350, 0, 350, 350, 350, 350, 0,
	0, 337, 337, 285, 286, 287, 0, 273, 0, 329,
	281, 275, 276, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 149, 0, 121, 117,
	118, 119, 116, 0, 0, 749, 0, 828, 829, 830,
	-2, 834, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 22, 544, 835,
	0, 824, 162, 0, 0, 0, 448, 450, 831, 446,
	0, 408, 0, 0, 0, 439, 386, 0, 394, -2,
	0, 426, 427, 842, 1006, 0, 0, 389, 391, 0,
	425, 438, 187, 0, 0, 0, 194, 196, 0, 200,
	201, 842, 0, 233, 0, 0, 214, 0, 217, -2,
	220, 221, 0, 223, 257, 226, 227, 228, 0, 230,
	327, 327, 253, 0, 563, 564, 0, 0, 0, 0,
	231, 232, 345, 179, 343, 0, 350, 347, 350, 0,
	0, 350, 350, 300, 351, 0, 0, 301, 302, 303,
	304, 0, 325, 0, 283, 0, 0, 284, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 823,
	0, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 438, 29, 163, 0, 0, 449, 445, 0, 402,
	327, 327, 0, 0, 0, 0, 0, 425, 0, 0,
	393, 0, 0, 553, 842, 559, 561, 0, 0, 0,
	842, 606, 607, 608, 609, 610, 611, 842, 842, 842,
	842, 842, 842, 842, 638, 639, 640, 641, 0, 643,
	-2, 753, 748, 755, 756, 757, 758, 759, 760, 761,
	0, 0, 804, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 674, 684, 684,
	684, 684, 684, 684, 684, 0, 0, 0, 0, 0,
	843, 387, 388, 390, 392, 396, 425, 0, 439, 212,
	189, 436, 191, 842, 0, 0, 0, 234, 0, 762,
	0, 0, 0, 0, 219, 0, 222, 224, 225, 0,
	249, 0, 251, 0, 0, -2, 842, 842, 0, 328,
	292, 350, 294, 335, 336, 295, 296, 352, 348, 349,
	347, 0, 347, 0, 0, 324, 0, 332, 0, 0,
	0, 0, 0, 400, 401, 327, 0, 0, 0, -2,
	771, 0, 454, 0, 0, -2, 0, 0, 150, 151,
	147, 122, 120, 509, 510, 0, 0, 750, 104, 0,
	31, 32, 439, 438, 30, 443, 451, 452, 453, 354,
	0, 776, 406, 407, 405, 436, 415, 416, 0, 0,
	436, 437, 438, 425, 0, 842, 0, 0, 255, 842,
	842, 0, 558, 1007, 556, 842, 0, 0, 842, 842,
	842, 842, 842, 842, 842, 842, 842, 842, 842, 842,
	842, 842, 842, 0, 0, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 560, 0, 577, 0,
	0, 0, 553, 36, 0, 842, 604, 0, 0, 629,
	842, 630, 631, 632, 633, 634, 635, 642, 0, 752,
	754, 0, 0, 842, 842, 842, 842, 842, 842, 842,
	464, 0, 738, 0, 0, 0, 0, 0, 0, 676,
	0, 677, 678, 679, 680, 681, 682, 683, 729, 0,
	731, 732, 733, 734, 735, 736, 842, -2, 842, 842,
	397, 0, 0, 0, 0, 0, 842, 209, 0, 763,
	215, 0, 257, 218, 258, 259, 344, 229, 250, 252,
	254, 0, 842, 0, 0, 470, 476, 472, 0, 0,
	476, 0, 0, 293, 350, 326, 350, 338, 339, 0,
	0, 0, 0, 0, 551, 1006, 0, 0, 0, 779,
	0, 0, 458, 461, 456, 36, 0, 0, 153, 154,
	155, 156, 157, 0, 744, 0, 0, 0, 23, 106,
	0, 0, 439, 383, 355, 0, 357, 0, 375, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	403, 404, 777, 778, 409, 0, 417, 418, 410, 0,
	0, 0, 0, 0, 0, 354, 424, 0, 554, 555,
	557, 581, 0, 583, 585, 565, 842, 842, 842, 569,
	600, 601, 602, 0, 842, 842, 842, 598, 573, 0,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 626, 0, 637, 327, 627, 695, 696, 0,
	0, 748, 579, 580, 603, 842, 803, 36, 624, 257,
	0, 625, 636, 0, 749, 751, 0, 0, 0, 0,
	-2, 327, 700, 327, 331, 703, 704, 705, 327, 708,
	710, 711, 712, 713, 331, 715, 716, 717, 718, 719,
	327, 327, 722, 723, 327, 327, 726, 327, 327, 0,
	0, 0, 0, 842, 465, 746, 741, 842, 0, 0,
	671, 672, 673, 675, 685, 730, 0, 0, 469, 0,
	0, 0, 440, 842, 255, 202, 205, 206, 0, 235,
	0, 0, 260, 644, 0, 842, 481, 650, 473, 477,
	0, 479, 480, 0, 481, 481, -2, 312, 313, 330,
	333, 551, 0, 0, 549, 0, 0, 549, 354, 783,
	842, 842, 771, 38, 0, 459, 460, 464, 462, 463,
	455, 37, 0, 158, 0, 0, 842, 511, 19, 123,
	0, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 771, 842, 82, 83, 454, 454, 454, 0,
	454, 0, 0, 0, 70, 842, 0, 815, 42, 43,
	143, 144, 0, 0, -2, 106, 106, -2, 106, 106,
	0, 0, 0, 0, 0, 353, 0, 358, 0, 0,
	0, 361, 0, 376, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 354, 383, 256, 582, 584, 586, 566, 567, 568,
	570, 598, 574, 0, 571, 842, 842, 0, 562, 578,
	605, -2, 0, 845, 257, 651, 652, 0, 0, 842,
	697, 347, 701, 702, 706, 707, 709, 714, 720, 721,
	724, 725, 727, 728, 0, 842, 842, 842, 842, 0,
	771, 0, 742, 842, 0, 669, 670, 686, 687, 688,
	689, 0, 0, 0, 198, 0, 0, 0, 211, 216,
	645, 471, 646, 0, 478, 474, 0, 647, 648, 0,
	549, 0, 0, 354, 842, 0, 551, 354, 13, 33,
	0, 0, 780, 772, 773, 776, 779, 36, 466, 457,
	-2, 160, 842, 148, 0, 745, 0, 126, 0, 0,
	779, 0, 553, 825, 0, 0, 58, -2, 60, 0,
	0, 848, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 65, 66, 67, 0, 0, 0, 0,
	0, 0, 0, -2, -2, 147, 105, 107, -2, 108,
	109, 110, 111, 112, 0, 0, 0, 0, 0, 384,
	0, 359, 364, 362, 365, 377, 378, 366, 367, 368,
	369, 370, 371, 372, 379, 380, 373, 374, 381, 382,
	436, 436, 0, 0, 354, 423, 383, 422, 572, 842,
	599, 575, 0, 844, 0, 847, 0, 327, 0, 0,
	698, 699, 0, 0, 0, 0, 0, 0, 739, 668,
	747, 842, 0, 441, 255, 0, 0, 207, 208, 210,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	649, 354, 549, 354, 383, 550, 0, 549, 383, 784,
	0, 842, 842, 842, 775, 783, 39, 842, 467, 17,
	0, 159, 18, 0, 77, 124, 0, 0, 127, 783,
	0, 88, 86, 82, 89, 0, 0, 0, 0, 50,
	0, 488, 490, 491, 492, 524, 0, 526, 0, 0,
	0, 64, 525, 54, 0, 0, 808, 102, 103, 0,
	0, 0, -2, 0, 819, 816, 0, 68, 71, 72,
	73, 74, 75, 0, 141, 146, 0, 744, 0, 24,
	836, 0, 0, 0, 0, 356, 0, 411, 412, 0,
	354, 383, 420, 576, 628, 846, 653, 657, 654, 842,
	656, 658, 842, 660, 842, 662, 842, 664, 842, 842,
	0, 0, 743, 0, 199, 203, 204, 0, 237, 0,
	239, 240, 241, 242, 243, 244, 245, 0, 482, 0,
	0, 475, 383, 354, 10, 8, 552, 354, 12, 0,
	781, 782, 774, 34, 486, 842, 0, 78, 128, 125,
	140, 0, 0, 0, 0, 52, 0, 542, -2, 0,
	0, 0, 48, 49, 0, 0, 0, 0, 0, 0,
	531, 0, 0, 534, 0, 0, 0, 0, 0, 0,
	545, 0, 527, 0, 529, 530, 61, 524, 0, 62,
	0, 55, 0, 57, 91, 0, 0, 842, 0, 350,
	820, 821, 822, 818, 849, 0, 0, 142, 0, 0,
	839, 837, 0, 354, 354, 0, 0, 360, 0, 383,
	421, 0, 0, 0, 0, 0, 690, 667, 740, 0,
	236, 238, 247, 0, 842, 484, 7, 11, 383, 785,
	549, 0, 161, 20, 79, 0, 84, 85, 842, 87,
	842, 0, 90, 0, 0, 541, 549, 0, 549, 51,
	486, 805, 0, 489, 520, 522, 0, 517, 532, 533,
	535, 0, 537, 0, 539, 540, 493, 494, 495, 0,
	0, 0, 0, 528, 0, 809, 56, 0, 0, 94,
	95, 810, 811, 812, 0, 814, 69, 76, 0, 148,
	26, 0, 838, 383, 383, 25, 385, 0, 419, 655,
	659, 661, 663, 665, 0, 0, 0, 0, 0, 0,
	768, 770, 9, 764, 487, 0, 0, 0, 0, 797,
	0, 0, -2, 0, 0, 771, 549, 47, 549, 0,
	842, 514, 521, 842, 0, 515, 842, 516, 536, 538,
	507, 0, 0, 0, 0, 0, 512, -2, 92, 93,
	0, 0, 99, 842, 0, 840, 841, 27, 28, 0,
	666, 0, 0, 0, 414, 248, 483, 0, 842, 766,
	0, 80, 0, 0, 88, 40, 0, 797, 786, 799,
	801, 842, 36, 0, 792, -2, 794, 796, 0, 779,
	46, 771, 806, 807, 518, 0, 523, 0, 0, 0,
	0, 526, 0, 96, 97, 98, 813, 0, 0, 691,
	0, 694, 485, 769, 35, 842, 842, 0, 0, 41,
	0, 802, -2, 0, 0, 0, 53, 45, 779, 0,
	0, 497, 499, 500, 501, 502, 503, 504, 505, 506,
	0, 0, 0, 545, 513, 21, 413, 692, 767, 765,
	0, 0, 800, 0, -2, 0, 793, 795, 44, 519,
	496, 0, 546, 547, 548, 495, 0, 81, 0, 789,
	36, 498, 508, 0, 798, -2, 693,
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 392,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 393, 3, 394, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:422
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:427
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:428
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:436
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:441
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:461
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:481
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:502
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:518
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:535
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:555
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 14:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:570
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:581
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:593
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:604
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:620
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:634
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:648
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:661
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:675
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:686
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:692
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:706
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:720
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:740
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:758
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:776
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:785
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:800
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:808
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:815
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:821
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:825
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:831
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:835
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:842
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:854
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:866
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:870
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:876
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:882
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:886
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:890
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:895
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:896
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:900
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:904
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:909
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:913
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:919
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:923
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:927
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:931
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:937
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:941
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:954
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:958
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:964
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:969
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:973
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:979
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:986
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:993
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1000
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1008
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1018
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1022
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1026
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1030
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1034
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1040
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1047
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1061
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1065
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1069
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1076
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1084
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1094
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1098
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1105
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1115
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1126
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1131
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1136
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1143
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1147
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1158
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1162
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1168
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1172
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1176
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1182
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1186
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1190
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1194
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1200
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1210
		{
			yyVAL.str = SessionStr
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1214
		{
			yyVAL.str = GlobalStr
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1219
		{
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1220
		{
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1224
		{
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1225
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1226
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1227
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1228
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1229
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1230
		{
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1234
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1238
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1242
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1246
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1252
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1256
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1260
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1265
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1271
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1275
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1281
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1285
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1290
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1299
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1303
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1328
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1340
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1350
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1355
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
<<<<<<< HEAD
=======
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1361
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1362
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1362
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1365
		{
			yyVAL.exprs = nil
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1366
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
<<<<<<< HEAD
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1370
=======
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1369
		{
			yyVAL.empty = struct{}{}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1371
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1375
=======
//line parser/parser.y:1374
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.empty = struct{}{}
		}
	case 150:
<<<<<<< HEAD
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1377
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1378
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.empty = struct{}{}
		}
	case 151:
<<<<<<< HEAD
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1380
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1382
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1387
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.bytes = nil
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1384
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1388
=======
//line parser/parser.y:1391
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 154:
<<<<<<< HEAD
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1393
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1395
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.bytes = nil
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1397
=======
//line parser/parser.y:1399
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1401
=======
//line parser/parser.y:1403
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1405
=======
//line parser/parser.y:1407
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 158:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1409
=======
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1412
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1413
=======
//line parser/parser.y:1416
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1418
=======
//line parser/parser.y:1421
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = nil
		}
	case 161:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1422
=======
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1425
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1427
=======
//line parser/parser.y:1430
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = nil
		}
	case 163:
<<<<<<< HEAD
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1431
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1434
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1436
=======
//line parser/parser.y:1439
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1440
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1445
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1443
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.bytes = nil
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1449
		{
			yyVAL.bytes = nil
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1455
=======
//line parser/parser.y:1449
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1462
=======
//line parser/parser.y:1456
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1468
=======
//line parser/parser.y:1462
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1472
=======
//line parser/parser.y:1466
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1477
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1481
=======
//line parser/parser.y:1471
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1475
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1479
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1483
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1485
=======
//line parser/parser.y:1487
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1489
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1493
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1497
=======
//line parser/parser.y:1491
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1503
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
=======
//line parser/parser.y:1497
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1502
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1507
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1508
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1513
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1519
=======
//line parser/parser.y:1513
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1530
=======
//line parser/parser.y:1524
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1536
=======
//line parser/parser.y:1530
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1549
=======
//line parser/parser.y:1543
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1554
=======
//line parser/parser.y:1548
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1559
=======
//line parser/parser.y:1553
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1564
=======
//line parser/parser.y:1558
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1570
=======
//line parser/parser.y:1564
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1575
=======
//line parser/parser.y:1569
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
<<<<<<< HEAD
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1580
=======
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1574
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1579
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1584
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1585
=======
//line parser/parser.y:1589
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1590
=======
//line parser/parser.y:1594
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1595
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1600
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1605
=======
//line parser/parser.y:1599
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1610
=======
//line parser/parser.y:1604
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-9 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1619
=======
//line parser/parser.y:1613
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1629
=======
//line parser/parser.y:1623
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1634
=======
//line parser/parser.y:1628
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1639
=======
//line parser/parser.y:1633
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-9 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1646
=======
//line parser/parser.y:1640
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-9 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1653
=======
//line parser/parser.y:1647
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1661
=======
//line parser/parser.y:1655
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1666
=======
//line parser/parser.y:1660
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 209:
		yyDollar = yyS[yypt-8 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1671
=======
//line parser/parser.y:1665
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-8 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1676
=======
//line parser/parser.y:1670
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1682
=======
//line parser/parser.y:1676
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 212:
		yyDollar = yyS[yypt-8 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1688
=======
//line parser/parser.y:1682
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1695
=======
//line parser/parser.y:1689
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1702
=======
//line parser/parser.y:1696
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1708
=======
//line parser/parser.y:1702
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1714
=======
//line parser/parser.y:1708
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1718
=======
//line parser/parser.y:1712
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 218:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1722
=======
//line parser/parser.y:1716
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1726
=======
//line parser/parser.y:1720
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1730
=======
//line parser/parser.y:1724
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1736
=======
//line parser/parser.y:1730
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1740
=======
//line parser/parser.y:1734
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1744
=======
//line parser/parser.y:1738
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1748
=======
//line parser/parser.y:1742
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1752
=======
//line parser/parser.y:1746
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1756
=======
//line parser/parser.y:1750
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1760
=======
//line parser/parser.y:1754
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1764
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1768
=======
//line parser/parser.y:1758
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1762
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1766
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1770
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1772
=======
//line parser/parser.y:1776
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 231:
<<<<<<< HEAD
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1776
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1782
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1782
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1788
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1794
=======
//line parser/parser.y:1788
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1800
=======
//line parser/parser.y:1794
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1804
=======
//line parser/parser.y:1798
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1809
=======
//line parser/parser.y:1803
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.sequence = &Sequence{}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1813
=======
//line parser/parser.y:1807
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1818
=======
//line parser/parser.y:1812
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1823
=======
//line parser/parser.y:1817
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1828
=======
//line parser/parser.y:1822
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1833
=======
//line parser/parser.y:1827
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1838
=======
//line parser/parser.y:1832
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1843
=======
//line parser/parser.y:1837
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1848
=======
//line parser/parser.y:1842
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1853
=======
//line parser/parser.y:1847
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1858
=======
//line parser/parser.y:1852
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1863
=======
//line parser/parser.y:1857
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1868
=======
//line parser/parser.y:1862
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1873
=======
//line parser/parser.y:1867
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
<<<<<<< HEAD
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1880
=======
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1874
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1878
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1882
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1884
=======
//line parser/parser.y:1886
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 253:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1888
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1890
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1892
=======
//line parser/parser.y:1894
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 255:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1896
=======
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1899
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 256:
<<<<<<< HEAD
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1900
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1903
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1905
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1909
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1914
=======
//line parser/parser.y:1908
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.bytes = nil
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1923
=======
//line parser/parser.y:1917
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1928
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1934
=======
//line parser/parser.y:1922
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1936
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1938
=======
//line parser/parser.y:1940
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1942
=======
//line parser/parser.y:1944
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1946
=======
//line parser/parser.y:1948
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1950
=======
//line parser/parser.y:1952
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1954
=======
//line parser/parser.y:1956
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1958
=======
//line parser/parser.y:1960
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1962
=======
//line parser/parser.y:1964
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1966
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1970
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1970
=======
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1976
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1976
=======
//line parser/parser.y:1982
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 276:
<<<<<<< HEAD
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1982
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1988
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:1988
=======
//line parser/parser.y:1994
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 278:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1994
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2000
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 279:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2000
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2004
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 280:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2006
=======
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2009
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2010
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2015
=======
//line parser/parser.y:2013
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2023
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = ""
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2019
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2033
=======
//line parser/parser.y:2027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2035
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2037
=======
//line parser/parser.y:2039
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 288:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2041
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2043
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 289:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2045
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2047
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2049
=======
//line parser/parser.y:2053
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2053
=======
//line parser/parser.y:2057
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2059
=======
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2063
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2063
=======
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2067
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2069
=======
//line parser/parser.y:2071
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 295:
<<<<<<< HEAD
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2073
=======
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2075
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2077
=======
//line parser/parser.y:2079
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2081
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2085
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2089
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2093
=======
//line parser/parser.y:2083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2095
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 301:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2097
=======
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2099
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2101
=======
//line parser/parser.y:2103
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2105
=======
//line parser/parser.y:2107
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2109
=======
//line parser/parser.y:2111
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 305:
<<<<<<< HEAD
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2113
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2115
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 306:
<<<<<<< HEAD
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2117
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2119
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2121
=======
//line parser/parser.y:2123
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2125
=======
//line parser/parser.y:2127
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2129
=======
//line parser/parser.y:2131
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2133
=======
//line parser/parser.y:2135
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2137
=======
//line parser/parser.y:2139
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2141
=======
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2143
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2145
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2149
=======
//line parser/parser.y:2148
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 315:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2159
=======
//line parser/parser.y:2153
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2163
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2169
=======
//line parser/parser.y:2157
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2163
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2167
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2171
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2173
=======
//line parser/parser.y:2175
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2177
=======
//line parser/parser.y:2179
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2181
=======
//line parser/parser.y:2183
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2185
=======
//line parser/parser.y:2187
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2189
=======
//line parser/parser.y:2191
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 324:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2193
=======
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2195
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2197
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2201
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2207
=======
//line parser/parser.y:2201
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2212
=======
//line parser/parser.y:2206
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2217
=======
//line parser/parser.y:2211
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = nil
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2221
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2226
=======
//line parser/parser.y:2215
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2220
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2224
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2232
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 332:
<<<<<<< HEAD
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2230
=======
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2236
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2242
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2238
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2242
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2248
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2256
=======
//line parser/parser.y:2250
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = nil
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2260
=======
//line parser/parser.y:2254
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2264
=======
//line parser/parser.y:2258
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
<<<<<<< HEAD
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2273
=======
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2267
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2271
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2275
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 340:
<<<<<<< HEAD
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2277
=======
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2280
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2284
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2281
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2286
=======
//line parser/parser.y:2289
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2290
=======
//line parser/parser.y:2293
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2295
=======
//line parser/parser.y:2298
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 345:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2299
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2302
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 346:
<<<<<<< HEAD
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2304
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2308
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2312
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2306
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2311
		{
			yyVAL.str = ""
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2315
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 349:
<<<<<<< HEAD
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2317
=======
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2319
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2324
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2321
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2325
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2330
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2334
=======
//line parser/parser.y:2328
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2338
=======
//line parser/parser.y:2332
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2344
=======
//line parser/parser.y:2338
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2349
=======
//line parser/parser.y:2343
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2353
=======
//line parser/parser.y:2347
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2357
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2363
=======
//line parser/parser.y:2351
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2357
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2361
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2367
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 360:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2367
=======
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2371
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 361:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2373
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2377
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2377
=======
//line parser/parser.y:2381
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2383
=======
//line parser/parser.y:2386
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2387
=======
//line parser/parser.y:2390
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 365:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2392
=======
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2394
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2396
=======
//line parser/parser.y:2398
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2400
=======
//line parser/parser.y:2402
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2404
=======
//line parser/parser.y:2406
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2408
=======
//line parser/parser.y:2410
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2412
=======
//line parser/parser.y:2414
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2416
=======
//line parser/parser.y:2418
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2420
=======
//line parser/parser.y:2422
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2424
=======
//line parser/parser.y:2426
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2428
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2432
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2436
=======
//line parser/parser.y:2430
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2447
=======
//line parser/parser.y:2441
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = ""
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2451
=======
//line parser/parser.y:2445
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2457
=======
//line parser/parser.y:2451
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2461
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2467
=======
//line parser/parser.y:2455
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2461
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2465
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2471
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2471
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2477
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2481
=======
//line parser/parser.y:2475
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2487
=======
//line parser/parser.y:2481
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexPartition = nil
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2491
=======
//line parser/parser.y:2485
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2495
=======
//line parser/parser.y:2489
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2501
=======
//line parser/parser.y:2495
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2505
=======
//line parser/parser.y:2499
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2509
=======
//line parser/parser.y:2503
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2513
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2517
=======
//line parser/parser.y:2507
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2511
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2515
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2519
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2521
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2525
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2529
=======
//line parser/parser.y:2523
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2533
=======
//line parser/parser.y:2527
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2537
=======
//line parser/parser.y:2531
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2541
=======
//line parser/parser.y:2535
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2545
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2551
=======
//line parser/parser.y:2539
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2549
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2555
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2555
=======
//line parser/parser.y:2560
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2561
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2566
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2572
=======
//line parser/parser.y:2566
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2576
=======
//line parser/parser.y:2570
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2582
=======
//line parser/parser.y:2576
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2587
=======
//line parser/parser.y:2581
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2591
=======
//line parser/parser.y:2585
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2601
=======
//line parser/parser.y:2595
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2606
=======
//line parser/parser.y:2600
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2613
=======
//line parser/parser.y:2607
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 413:
		yyDollar = yyS[yypt-8 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2620
=======
//line parser/parser.y:2614
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 414:
		yyDollar = yyS[yypt-8 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2627
=======
//line parser/parser.y:2621
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 415:
		yyDollar = yyS[yypt-13 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2636
=======
//line parser/parser.y:2630
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 416:
		yyDollar = yyS[yypt-11 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2647
=======
//line parser/parser.y:2641
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2658
=======
//line parser/parser.y:2652
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2662
=======
//line parser/parser.y:2656
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2666
=======
//line parser/parser.y:2660
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2670
=======
//line parser/parser.y:2664
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 421:
		yyDollar = yyS[yypt-10 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2676
=======
//line parser/parser.y:2670
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 422:
		yyDollar = yyS[yypt-8 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2686
=======
//line parser/parser.y:2680
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 423:
		yyDollar = yyS[yypt-9 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2697
=======
//line parser/parser.y:2691
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 424:
		yyDollar = yyS[yypt-7 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2708
=======
//line parser/parser.y:2702
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 425:
		yyDollar = yyS[yypt-7 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2719
=======
//line parser/parser.y:2713
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2728
=======
//line parser/parser.y:2722
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
<<<<<<< HEAD
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2737
=======
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2731
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2735
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2739
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 428:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2741
=======
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2745
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2745
=======
//line parser/parser.y:2749
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 430:
<<<<<<< HEAD
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2751
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2753
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2755
=======
//line parser/parser.y:2757
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 432:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2759
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2761
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 433:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2763
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2765
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 434:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2767
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2771
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2772
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 436:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2777
=======
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2776
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
		}
	case 437:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2778
=======
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2780
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2782
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2786
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2791
=======
//line parser/parser.y:2785
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2798
=======
//line parser/parser.y:2792
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2802
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2809
=======
//line parser/parser.y:2796
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2803
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2807
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2813
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2813
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2819
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2823
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2828
=======
//line parser/parser.y:2817
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2822
		{
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2823
		{
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2827
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
		}
	case 449:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2829
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2831
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2833
=======
//line parser/parser.y:2835
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2841
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2837
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2841
=======
//line parser/parser.y:2845
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2849
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2847
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2851
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2855
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2860
=======
//line parser/parser.y:2854
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			setAllowComments(yylex, true)
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2864
=======
//line parser/parser.y:2858
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2870
=======
//line parser/parser.y:2864
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.bytes2 = nil
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2874
=======
//line parser/parser.y:2868
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2880
=======
//line parser/parser.y:2874
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = UnionStr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2884
=======
//line parser/parser.y:2878
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = UnionAllStr
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2888
=======
//line parser/parser.y:2882
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = UnionDistinctStr
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2893
=======
//line parser/parser.y:2887
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = ""
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2897
=======
//line parser/parser.y:2891
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2901
		{
			yyVAL.str = SQLCacheStr
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2906
=======
//line parser/parser.y:2895
		{
			yyVAL.str = SQLCacheStr
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2900
		{
			yyVAL.str = ""
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2904
		{
			yyVAL.str = DistinctStr
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2909
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = ""
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2910
=======
//line parser/parser.y:2913
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = DistinctStr
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2915
=======
//line parser/parser.y:2918
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = ""
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2919
		{
			yyVAL.str = StraightJoinHint
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2924
		{
			yyVAL.selectExprs = nil
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2928
=======
//line parser/parser.y:2922
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2934
=======
//line parser/parser.y:2928
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2938
=======
//line parser/parser.y:2932
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2944
=======
//line parser/parser.y:2938
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2948
=======
//line parser/parser.y:2942
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2952
=======
//line parser/parser.y:2946
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2956
=======
//line parser/parser.y:2950
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2961
=======
//line parser/parser.y:2955
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2965
=======
//line parser/parser.y:2959
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2969
=======
//line parser/parser.y:2963
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2976
=======
//line parser/parser.y:2970
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2981
=======
//line parser/parser.y:2975
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.overExpr = nil
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2985
=======
//line parser/parser.y:2979
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2989
=======
//line parser/parser.y:2983
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2993
=======
//line parser/parser.y:2987
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 487:
		yyDollar = yyS[yypt-7 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:2997
=======
//line parser/parser.y:2991
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3002
=======
//line parser/parser.y:2996
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3006
=======
//line parser/parser.y:3000
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3012
=======
//line parser/parser.y:3006
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3016
=======
//line parser/parser.y:3010
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3026
=======
//line parser/parser.y:3020
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3030
=======
//line parser/parser.y:3024
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3034
=======
//line parser/parser.y:3028
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3039
=======
//line parser/parser.y:3033
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.strs = []string{}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3043
=======
//line parser/parser.y:3037
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3049
=======
//line parser/parser.y:3043
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3053
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3059
=======
//line parser/parser.y:3047
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3053
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3057
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3061
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3063
=======
//line parser/parser.y:3065
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3067
=======
//line parser/parser.y:3069
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3071
=======
//line parser/parser.y:3073
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3075
=======
//line parser/parser.y:3077
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3079
=======
//line parser/parser.y:3081
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3083
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3087
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3093
=======
//line parser/parser.y:3087
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3097
=======
//line parser/parser.y:3091
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3103
=======
//line parser/parser.y:3097
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3108
=======
//line parser/parser.y:3102
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3112
=======
//line parser/parser.y:3106
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3118
=======
//line parser/parser.y:3112
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3122
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3135
=======
//line parser/parser.y:3116
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3129
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3133
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3137
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3139
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3143
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3147
=======
//line parser/parser.y:3141
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3153
=======
//line parser/parser.y:3147
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3155
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
=======
//line parser/parser.y:3149
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3153
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3159
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 523:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
=======
		yyDollar = yyS[yypt-2 : yypt+1]
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
//line parser/parser.y:3161
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3165
=======
//line parser/parser.y:3164
		{
			yyVAL.empty = struct{}{}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3166
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3167
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3170
=======
//line parser/parser.y:3169
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.empty = struct{}{}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3173
		{
			yyVAL.empty = struct{}{}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3175
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3179
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3183
=======
//line parser/parser.y:3177
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3190
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3196
=======
//line parser/parser.y:3184
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3190
		{
			yyVAL.str = JoinStr
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3194
		{
			yyVAL.str = JoinStr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3198
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = JoinStr
		}
	case 534:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3200
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3204
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = JoinStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3204
=======
//line parser/parser.y:3210
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = JoinStr
		}
	case 536:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3210
=======
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3214
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = StraightJoinStr
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3216
=======
//line parser/parser.y:3218
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = LeftJoinStr
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3220
=======
//line parser/parser.y:3222
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = LeftJoinStr
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3224
		{
			yyVAL.str = RightJoinStr
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3228
		{
			yyVAL.str = RightJoinStr
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3234
=======
//line parser/parser.y:3228
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = NaturalJoinStr
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3238
=======
//line parser/parser.y:3232
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3248
=======
//line parser/parser.y:3242
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3252
=======
//line parser/parser.y:3246
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3258
=======
//line parser/parser.y:3252
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3262
=======
//line parser/parser.y:3256
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3267
=======
//line parser/parser.y:3261
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexHints = nil
		}
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3271
=======
//line parser/parser.y:3265
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3275
=======
//line parser/parser.y:3269
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3279
=======
//line parser/parser.y:3273
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3284
=======
//line parser/parser.y:3278
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3288
=======
//line parser/parser.y:3282
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3293
=======
//line parser/parser.y:3287
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columns = nil
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3297
=======
//line parser/parser.y:3291
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3303
=======
//line parser/parser.y:3297
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3307
=======
//line parser/parser.y:3301
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3311
=======
//line parser/parser.y:3305
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3315
=======
//line parser/parser.y:3309
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3319
=======
//line parser/parser.y:3313
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3323
=======
//line parser/parser.y:3317
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3327
=======
//line parser/parser.y:3321
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3331
=======
//line parser/parser.y:3325
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3337
=======
//line parser/parser.y:3331
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = ""
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3341
=======
//line parser/parser.y:3335
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3347
=======
//line parser/parser.y:3341
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3351
=======
//line parser/parser.y:3345
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3357
=======
//line parser/parser.y:3351
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3361
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3365
=======
//line parser/parser.y:3355
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3359
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3363
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3367
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3369
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3373
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3377
=======
//line parser/parser.y:3371
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3381
=======
//line parser/parser.y:3375
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3385
=======
//line parser/parser.y:3379
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3389
=======
//line parser/parser.y:3383
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3393
=======
//line parser/parser.y:3387
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3397
=======
//line parser/parser.y:3391
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 578:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3401
=======
//line parser/parser.y:3395
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3405
=======
//line parser/parser.y:3399
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3410
=======
//line parser/parser.y:3404
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3414
=======
//line parser/parser.y:3408
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3418
=======
//line parser/parser.y:3412
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3424
=======
//line parser/parser.y:3418
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = IsNullStr
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3428
=======
//line parser/parser.y:3422
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = IsNotNullStr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3432
=======
//line parser/parser.y:3426
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = IsTrueStr
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3436
=======
//line parser/parser.y:3430
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = IsNotTrueStr
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3440
=======
//line parser/parser.y:3434
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = IsFalseStr
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3444
=======
//line parser/parser.y:3438
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = IsNotFalseStr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3450
=======
//line parser/parser.y:3444
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = EqualStr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3454
=======
//line parser/parser.y:3448
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = LessThanStr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3458
=======
//line parser/parser.y:3452
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = GreaterThanStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3462
=======
//line parser/parser.y:3456
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = LessEqualStr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3466
=======
//line parser/parser.y:3460
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = GreaterEqualStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3470
=======
//line parser/parser.y:3464
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = NotEqualStr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3474
=======
//line parser/parser.y:3468
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3478
=======
//line parser/parser.y:3472
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = PosixRegexStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3482
=======
//line parser/parser.y:3476
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3486
=======
//line parser/parser.y:3480
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3490
=======
//line parser/parser.y:3484
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3495
=======
//line parser/parser.y:3489
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = nil
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3499
=======
//line parser/parser.y:3493
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3505
=======
//line parser/parser.y:3499
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3509
=======
//line parser/parser.y:3503
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3513
=======
//line parser/parser.y:3507
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3519
=======
//line parser/parser.y:3513
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3525
=======
//line parser/parser.y:3519
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3529
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3535
=======
//line parser/parser.y:3523
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3529
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3533
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3537
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3539
=======
//line parser/parser.y:3541
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3543
=======
//line parser/parser.y:3545
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3547
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3551
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3555
=======
//line parser/parser.y:3549
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3559
=======
//line parser/parser.y:3553
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3563
=======
//line parser/parser.y:3557
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3567
=======
//line parser/parser.y:3561
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3571
=======
//line parser/parser.y:3565
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3575
=======
//line parser/parser.y:3569
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3579
=======
//line parser/parser.y:3573
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3583
=======
//line parser/parser.y:3577
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3587
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3591
=======
//line parser/parser.y:3581
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3585
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3589
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3593
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3595
=======
//line parser/parser.y:3597
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3599
=======
//line parser/parser.y:3601
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3603
=======
//line parser/parser.y:3605
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3607
=======
//line parser/parser.y:3609
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3611
=======
//line parser/parser.y:3613
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 628:
<<<<<<< HEAD
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3615
=======
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3617
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 629:
<<<<<<< HEAD
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3619
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3621
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 630:
<<<<<<< HEAD
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3623
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3625
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3627
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3631
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3635
=======
//line parser/parser.y:3629
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3643
=======
//line parser/parser.y:3637
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3657
=======
//line parser/parser.y:3651
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3661
=======
//line parser/parser.y:3655
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3665
=======
//line parser/parser.y:3659
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3673
=======
//line parser/parser.y:3667
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3681
=======
//line parser/parser.y:3675
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3689
=======
//line parser/parser.y:3683
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3693
=======
//line parser/parser.y:3687
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3703
=======
//line parser/parser.y:3697
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 647:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3707
=======
//line parser/parser.y:3701
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3711
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
=======
//line parser/parser.y:3705
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 647:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3709
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3713
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3715
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3719
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 651:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3723
=======
//line parser/parser.y:3717
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3727
=======
//line parser/parser.y:3721
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3737
=======
//line parser/parser.y:3731
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3741
=======
//line parser/parser.y:3735
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 655:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3745
=======
//line parser/parser.y:3739
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 656:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3750
=======
//line parser/parser.y:3744
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 657:
		yyDollar = yyS[yypt-8 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3754
=======
//line parser/parser.y:3748
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 658:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3758
=======
//line parser/parser.y:3752
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 659:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3762
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 660:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3766
=======
//line parser/parser.y:3756
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 658:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3760
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 659:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3764
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 660:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3768
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 661:
		yyDollar = yyS[yypt-8 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3770
=======
//line parser/parser.y:3772
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 662:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3774
=======
//line parser/parser.y:3776
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 663:
		yyDollar = yyS[yypt-8 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3778
=======
//line parser/parser.y:3780
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 664:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3782
=======
//line parser/parser.y:3784
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 665:
		yyDollar = yyS[yypt-8 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3786
=======
//line parser/parser.y:3788
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 666:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3790
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 667:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3794
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 668:
		yyDollar = yyS[yypt-9 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3798
=======
//line parser/parser.y:3792
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 669:
		yyDollar = yyS[yypt-7 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3802
=======
//line parser/parser.y:3796
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 670:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3806
=======
//line parser/parser.y:3800
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3810
=======
//line parser/parser.y:3804
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3815
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3819
=======
//line parser/parser.y:3809
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3813
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3817
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3821
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 674:
<<<<<<< HEAD
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3823
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3832
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3827
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3838
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3842
=======
//line parser/parser.y:3836
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3846
=======
//line parser/parser.y:3840
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3850
=======
//line parser/parser.y:3844
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3854
=======
//line parser/parser.y:3848
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3859
=======
//line parser/parser.y:3853
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3864
=======
//line parser/parser.y:3858
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3869
=======
//line parser/parser.y:3863
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3874
=======
//line parser/parser.y:3868
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3878
=======
//line parser/parser.y:3872
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3892
=======
//line parser/parser.y:3886
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 689:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3896
=======
//line parser/parser.y:3890
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3900
=======
//line parser/parser.y:3894
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3904
=======
//line parser/parser.y:3898
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3910
=======
//line parser/parser.y:3904
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = ""
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3914
=======
//line parser/parser.y:3908
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = BooleanModeStr
		}
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3918
=======
//line parser/parser.y:3912
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 695:
		yyDollar = yyS[yypt-7 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3922
=======
//line parser/parser.y:3916
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3926
		{
			yyVAL.str = QueryExpansionStr
		}
=======
//line parser/parser.y:3920
		{
			yyVAL.str = QueryExpansionStr
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3926
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3930
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3932
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3936
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3942
=======
//line parser/parser.y:3936
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3946
=======
//line parser/parser.y:3940
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3950
=======
//line parser/parser.y:3944
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3954
=======
//line parser/parser.y:3948
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3958
=======
//line parser/parser.y:3952
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3962
=======
//line parser/parser.y:3956
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
<<<<<<< HEAD
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3968
=======
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3970
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 706:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3972
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3974
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 707:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3976
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3978
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 708:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3980
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3982
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3984
=======
//line parser/parser.y:3986
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3988
=======
//line parser/parser.y:3990
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 711:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3992
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3994
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:3996
=======
//line parser/parser.y:3998
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4000
=======
//line parser/parser.y:4002
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4004
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4006
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4008
=======
//line parser/parser.y:4010
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 716:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4012
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4014
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4016
=======
//line parser/parser.y:4018
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4020
=======
//line parser/parser.y:4022
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4024
=======
//line parser/parser.y:4026
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 720:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4028
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4030
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 721:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4032
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4034
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 722:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4036
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4038
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 723:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4040
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4042
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 724:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4044
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4046
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4050
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4054
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4048
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4052
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4056
=======
//line parser/parser.y:4058
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 728:
<<<<<<< HEAD
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4060
=======
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4062
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4068
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4064
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4068
=======
//line parser/parser.y:4072
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4074
=======
//line parser/parser.y:4076
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 732:
<<<<<<< HEAD
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4078
=======
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4080
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4082
=======
//line parser/parser.y:4084
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4086
=======
//line parser/parser.y:4088
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4090
=======
//line parser/parser.y:4092
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4094
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4098
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4102
=======
//line parser/parser.y:4096
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4101
		{
			yyVAL.expr = nil
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4105
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4107
		{
			yyVAL.expr = nil
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4111
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4116
=======
//line parser/parser.y:4110
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = string("")
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4120
=======
//line parser/parser.y:4114
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4126
=======
//line parser/parser.y:4120
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4130
=======
//line parser/parser.y:4124
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4136
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4141
=======
//line parser/parser.y:4130
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4137
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4140
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4144
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4146
		{
			yyVAL.expr = nil
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4150
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4156
=======
//line parser/parser.y:4150
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4160
=======
//line parser/parser.y:4154
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4164
=======
//line parser/parser.y:4158
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4170
=======
//line parser/parser.y:4164
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4176
=======
//line parser/parser.y:4170
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4180
=======
//line parser/parser.y:4174
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4185
=======
//line parser/parser.y:4179
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4190
=======
//line parser/parser.y:4184
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4194
=======
//line parser/parser.y:4188
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4198
=======
//line parser/parser.y:4192
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4202
=======
//line parser/parser.y:4196
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4206
=======
//line parser/parser.y:4200
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4210
=======
//line parser/parser.y:4204
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4214
=======
//line parser/parser.y:4208
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = &NullVal{}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4220
=======
//line parser/parser.y:4214
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4224
=======
//line parser/parser.y:4218
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4229
=======
//line parser/parser.y:4223
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.exprs = nil
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4233
=======
//line parser/parser.y:4227
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4238
=======
//line parser/parser.y:4232
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = nil
		}
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4242
=======
//line parser/parser.y:4236
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4248
=======
//line parser/parser.y:4242
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4252
=======
//line parser/parser.y:4246
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4258
=======
//line parser/parser.y:4252
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4263
=======
//line parser/parser.y:4257
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.orderBy = nil
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4267
=======
//line parser/parser.y:4261
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4273
=======
//line parser/parser.y:4267
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4277
=======
//line parser/parser.y:4271
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4283
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
=======
//line parser/parser.y:4277
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4282
		{
			yyVAL.str = AscScr
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4286
		{
			yyVAL.str = AscScr
		}
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4288
		{
			yyVAL.str = AscScr
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4292
		{
			yyVAL.str = AscScr
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4296
=======
//line parser/parser.y:4290
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = DescScr
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4301
=======
//line parser/parser.y:4295
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.limit = nil
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4305
=======
//line parser/parser.y:4299
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4309
=======
//line parser/parser.y:4303
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 784:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4313
=======
//line parser/parser.y:4307
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4318
=======
//line parser/parser.y:4312
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = ""
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4322
=======
//line parser/parser.y:4316
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = ForUpdateStr
		}
	case 787:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4326
=======
//line parser/parser.y:4320
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.str = ShareModeStr
		}
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4339
=======
//line parser/parser.y:4333
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4343
=======
//line parser/parser.y:4337
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4347
=======
//line parser/parser.y:4341
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 791:
		yyDollar = yyS[yypt-5 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4352
=======
//line parser/parser.y:4346
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 792:
		yyDollar = yyS[yypt-4 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4356
=======
//line parser/parser.y:4350
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 793:
		yyDollar = yyS[yypt-6 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4360
=======
//line parser/parser.y:4354
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4367
=======
//line parser/parser.y:4361
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4371
=======
//line parser/parser.y:4365
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
<<<<<<< HEAD
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4375
=======
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4371
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
<<<<<<< HEAD
	case 797:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4379
=======
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4375
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
<<<<<<< HEAD
	case 798:
=======
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4379
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 797:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4384
		{
			yyVAL.updateExprs = nil
		}
<<<<<<< HEAD
	case 799:
=======
	case 798:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4388
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
<<<<<<< HEAD
	case 800:
=======
	case 799:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4394
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
<<<<<<< HEAD
	case 801:
=======
	case 800:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4398
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
<<<<<<< HEAD
	case 802:
=======
	case 801:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4404
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
<<<<<<< HEAD
	case 803:
=======
	case 802:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4408
		{
			yyVAL.valTuple = ValTuple{}
		}
<<<<<<< HEAD
	case 804:
=======
	case 803:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4414
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
<<<<<<< HEAD
	case 805:
=======
	case 804:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4420
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
<<<<<<< HEAD
	case 806:
=======
	case 805:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4430
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
<<<<<<< HEAD
	case 807:
=======
	case 806:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4434
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
<<<<<<< HEAD
	case 808:
=======
	case 807:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4440
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
<<<<<<< HEAD
	case 809:
=======
	case 808:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4446
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
<<<<<<< HEAD
	case 810:
=======
	case 809:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4450
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
<<<<<<< HEAD
	case 811:
=======
	case 810:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4456
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
<<<<<<< HEAD
	case 812:
=======
	case 811:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4460
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
<<<<<<< HEAD
	case 813:
=======
	case 812:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4464
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
<<<<<<< HEAD
	case 814:
=======
	case 813:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4469
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
<<<<<<< HEAD
	case 815:
=======
	case 814:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4473
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
<<<<<<< HEAD
	case 816:
=======
	case 815:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4479
		{
			yyVAL.statement = yyDollar[1].statement
		}
<<<<<<< HEAD
	case 817:
=======
	case 816:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4485
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
<<<<<<< HEAD
	case 819:
=======
	case 818:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.bytes = []byte("charset")
		}
<<<<<<< HEAD
	case 821:
=======
	case 820:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4499
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
<<<<<<< HEAD
	case 822:
=======
	case 821:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4503
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
<<<<<<< HEAD
	case 823:
=======
	case 822:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4507
		{
			yyVAL.expr = &Default{}
		}
<<<<<<< HEAD
=======
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4512
		{
			yyVAL.empty = struct{}{}
		}
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4514
		{
			yyVAL.empty = struct{}{}
		}
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4512
		{
			yyVAL.empty = struct{}{}
		}
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4514
		{
			yyVAL.empty = struct{}{}
		}
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
=======
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
//line parser/parser.y:4517
		{
			yyVAL.str = ""
		}
<<<<<<< HEAD
	case 827:
=======
	case 826:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4519
		{
			yyVAL.str = IgnoreStr
		}
<<<<<<< HEAD
	case 828:
=======
	case 827:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4523
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
<<<<<<< HEAD
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4530
=======
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4530
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4534
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4534
=======
//line parser/parser.y:4538
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4538
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
=======
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
//line parser/parser.y:4544
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4549
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
<<<<<<< HEAD
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4556
=======
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4556
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4562
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4566
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
<<<<<<< HEAD
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4562
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4566
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 839:
=======
	case 838:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4570
		{
			yyVAL.boolVal = BoolVal(false)
		}
<<<<<<< HEAD
	case 840:
=======
	case 839:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4576
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4580
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4580
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4584
=======
//line parser/parser.y:4584
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4590
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4594
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 844:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4601
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4590
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
<<<<<<< HEAD
//line parser/parser.y:4594
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 845:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4601
=======
//line parser/parser.y:4608
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4608
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
<<<<<<< HEAD
	case 847:
=======
	case 846:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4612
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
<<<<<<< HEAD
	case 848:
=======
	case 847:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4619
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
<<<<<<< HEAD
	case 849:
=======
	case 848:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4625
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
<<<<<<< HEAD
	case 850:
=======
	case 849:
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4629
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
<<<<<<< HEAD
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4803
=======
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4802
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
<<<<<<< HEAD
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4812
=======
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4811
>>>>>>> 073930e (allow use reserved_keyword in ins_column_list)
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
