// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex any, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex any, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex any, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex any) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex any) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex any) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const SCHEMA = 57457
const TABLE = 57458
const INDEX = 57459
const MATERIALIZED = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const PRIMARY = 57465
const COLUMN = 57466
const CONSTRAINT = 57467
const REFERENCES = 57468
const SPATIAL = 57469
const FULLTEXT = 57470
const FOREIGN = 57471
const KEY_BLOCK_SIZE = 57472
const POLICY = 57473
const WHILE = 57474
const UNIQUE = 57475
const KEY = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const EXEC = 57485
const EXECUTE = 57486
const MAXVALUE = 57487
const PARTITION = 57488
const REORGANIZE = 57489
const LESS = 57490
const THAN = 57491
const PROCEDURE = 57492
const TRIGGER = 57493
const TYPE = 57494
const RETURN = 57495
const STATUS = 57496
const VARIABLES = 57497
const RESTRICT = 57498
const CASCADE = 57499
const NO = 57500
const ACTION = 57501
const PERMISSIVE = 57502
const RESTRICTIVE = 57503
const PUBLIC = 57504
const CURRENT_USER = 57505
const SESSION_USER = 57506
const PAD_INDEX = 57507
const FILLFACTOR = 57508
const IGNORE_DUP_KEY = 57509
const STATISTICS_NORECOMPUTE = 57510
const STATISTICS_INCREMENTAL = 57511
const ALLOW_ROW_LOCKS = 57512
const ALLOW_PAGE_LOCKS = 57513
const DISTANCE = 57514
const M = 57515
const EUCLIDEAN = 57516
const COSINE = 57517
const BEFORE = 57518
const AFTER = 57519
const EACH = 57520
const ROW = 57521
const SCROLL = 57522
const CURSOR = 57523
const OPEN = 57524
const CLOSE = 57525
const FETCH = 57526
const PRIOR = 57527
const FIRST = 57528
const LAST = 57529
const DEALLOCATE = 57530
const INSTEAD = 57531
const OF = 57532
const OUTPUT = 57533
const DEFERRABLE = 57534
const INITIALLY = 57535
const IMMEDIATE = 57536
const DEFERRED = 57537
const CONCURRENTLY = 57538
const SQL = 57539
const SECURITY = 57540
const BEGIN = 57541
const START = 57542
const TRANSACTION = 57543
const COMMIT = 57544
const ROLLBACK = 57545
const BIT = 57546
const TINYINT = 57547
const SMALLINT = 57548
const SMALLSERIAL = 57549
const MEDIUMINT = 57550
const INT = 57551
const INTEGER = 57552
const SERIAL = 57553
const BIGINT = 57554
const BIGSERIAL = 57555
const INTNUM = 57556
const REAL = 57557
const DOUBLE = 57558
const PRECISION = 57559
const FLOAT_TYPE = 57560
const DECIMAL = 57561
const NUMERIC = 57562
const SMALLMONEY = 57563
const MONEY = 57564
const TIME = 57565
const TIMESTAMP = 57566
const DATETIME = 57567
const YEAR = 57568
const DATETIMEOFFSET = 57569
const DATETIME2 = 57570
const SMALLDATETIME = 57571
const CHAR = 57572
const VARCHAR = 57573
const VARYING = 57574
const BOOL = 57575
const CHARACTER = 57576
const VARBINARY = 57577
const NCHAR = 57578
const NVARCHAR = 57579
const NTEXT = 57580
const UUID = 57581
const TEXT = 57582
const TINYTEXT = 57583
const MEDIUMTEXT = 57584
const LONGTEXT = 57585
const CITEXT = 57586
const BLOB = 57587
const TINYBLOB = 57588
const MEDIUMBLOB = 57589
const LONGBLOB = 57590
const JSON = 57591
const JSONB = 57592
const ENUM = 57593
const GEOMETRY = 57594
const POINT = 57595
const LINESTRING = 57596
const POLYGON = 57597
const GEOMETRYCOLLECTION = 57598
const MULTIPOINT = 57599
const MULTILINESTRING = 57600
const MULTIPOLYGON = 57601
const VECTOR = 57602
const VARIADIC = 57603
const ARRAY = 57604
const NOW = 57605
const GETDATE = 57606
const BPCHAR = 57607
const TEXT_PATTERN_OPS = 57608
const NULLX = 57609
const AUTO_INCREMENT = 57610
const APPROXNUM = 57611
const SIGNED = 57612
const UNSIGNED = 57613
const ZEROFILL = 57614
const ZONE = 57615
const AUTOINCREMENT = 57616
const DATABASES = 57617
const TABLES = 57618
const VSCHEMA_TABLES = 57619
const EXTENDED = 57620
const FULL = 57621
const PROCESSLIST = 57622
const NAMES = 57623
const CHARSET = 57624
const GLOBAL = 57625
const SESSION = 57626
const ISOLATION = 57627
const LEVEL = 57628
const READ = 57629
const WRITE = 57630
const ONLY = 57631
const REPEATABLE = 57632
const COMMITTED = 57633
const UNCOMMITTED = 57634
const SERIALIZABLE = 57635
const NEW = 57636
const CONCAT_NULL_YIELDS_NULL = 57637
const CURSOR_CLOSE_ON_COMMIT = 57638
const QUOTED_IDENTIFIER = 57639
const ARITHABORT = 57640
const FMTONLY = 57641
const NOCOUNT = 57642
const NOEXEC = 57643
const NUMERIC_ROUNDABORT = 57644
const ANSI_DEFAULTS = 57645
const ANSI_NULL_DFLT_OFF = 57646
const ANSI_NULL_DFLT_ON = 57647
const ANSI_NULLS = 57648
const ANSI_PADDING = 57649
const ANSI_WARNINGS = 57650
const FORCEPLAN = 57651
const SHOWPLAN_ALL = 57652
const SHOWPLAN_TEXT = 57653
const SHOWPLAN_XML = 57654
const IMPLICIT_TRANSACTIONS = 57655
const REMOTE_PROC_TRANSACTIONS = 57656
const XACT_ABORT = 57657
const CURRENT_TIMESTAMP = 57658
const DATABASE = 57659
const CURRENT_DATE = 57660
const CURRENT_TIME = 57661
const LOCALTIME = 57662
const LOCALTIMESTAMP = 57663
const UTC_DATE = 57664
const UTC_TIME = 57665
const UTC_TIMESTAMP = 57666
const REPLACE = 57667
const CONVERT = 57668
const CAST = 57669
const SUBSTR = 57670
const SUBSTRING = 57671
const GROUP_CONCAT = 57672
const SEPARATOR = 57673
const INHERIT = 57674
const LEAD = 57675
const LAG = 57676
const MATCH = 57677
const AGAINST = 57678
const BOOLEAN = 57679
const LANGUAGE = 57680
const WITH = 57681
const WITHOUT = 57682
const PARSER = 57683
const QUERY = 57684
const EXPANSION = 57685
const UNUSED = 57686
const VIRTUAL = 57687
const STORED = 57688
const GENERATED = 57689
const ALWAYS = 57690
const IDENTITY = 57691
const SEQUENCE = 57692
const INCREMENT = 57693
const MINVALUE = 57694
const CACHE = 57695
const CYCLE = 57696
const OWNED = 57697
const NONE = 57698
const CLUSTERED = 57699
const NONCLUSTERED = 57700
const REPLICATION = 57701
const COLUMNSTORE = 57702
const INCLUDE = 57703
const HOLDLOCK = 57704
const NOLOCK = 57705
const NOWAIT = 57706
const PAGLOCK = 57707
const ROWLOCK = 57708
const TABLOCK = 57709
const UPDLOCK = 57710
const READUNCOMMITTED = 57711
const DEFINER = 57712
const INVOKER = 57713
const TYPECAST = 57714
const CHECK = 57715
const OVER = 57716

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	134, 439,
	-2, 166,
	-1, 52,
	123, 839,
	-2, 833,
	-1, 53,
	123, 840,
	-2, 753,
	-1, 275,
	123, 843,
	-2, 837,
	-1, 276,
	123, 840,
	-2, 838,
	-1, 432,
	61, 408,
	-2, 405,
	-1, 462,
	123, 841,
	-2, 260,
	-1, 584,
	123, 841,
	-2, 260,
	-1, 605,
	279, 850,
	-2, 741,
	-1, 659,
	279, 850,
	-2, 479,
	-1, 693,
	5, 36,
	-2, 14,
	-1, 699,
	5, 36,
	-2, 16,
	-1, 842,
	279, 850,
	-2, 479,
	-1, 1014,
	279, 850,
	-2, 342,
	-1, 1084,
	279, 850,
	-2, 479,
	-1, 1146,
	279, 850,
	-2, 741,
	-1, 1154,
	60, 106,
	-2, 216,
	-1, 1157,
	60, 106,
	-2, 216,
	-1, 1212,
	5, 37,
	-2, 614,
	-1, 1293,
	5, 36,
	-2, 15,
	-1, 1309,
	198, 63,
	-2, 535,
	-1, 1344,
	279, 850,
	-2, 146,
	-1, 1345,
	279, 850,
	-2, 146,
	-1, 1350,
	60, 106,
	-2, 187,
	-1, 1495,
	90, 835,
	-2, 823,
	-1, 1591,
	57, 50,
	59, 50,
	-2, 52,
	-1, 1765,
	5, 36,
	-2, 792,
	-1, 1790,
	5, 36,
	-2, 59,
	-1, 1828,
	59, 984,
	60, 984,
	-2, 465,
	-1, 1866,
	5, 37,
	-2, 793,
	-1, 1898,
	5, 36,
	-2, 795,
	-1, 1919,
	5, 37,
	-2, 796,
}

const yyPrivate = 57344

const yyLast = 11098

var yyAct = [...]int16{
	586, 567, 1693, 1875, 788, 1821, 1711, 1097, 1822, 706,
	1783, 1788, 31, 596, 420, 1818, 1613, 1827, 48, 49,
	50, 789, 1753, 1694, 1627, 1133, 1775, 1120, 496, 1276,
	1059, 894, 77, 77, 77, 77, 1119, 1456, 1673, 1611,
	1626, 1492, 1131, 148, 151, 152, 1474, 1489, 1601, 1464,
	1615, 1686, 921, 1134, 1113, 1116, 1313, 71, 1310, 1475,
	1486, 1282, 1471, 1483, 1287, 1214, 730, 424, 1507, 27,
	31, 952, 128, 909, 936, 1480, 642, 127, 988, 1366,
	124, 1013, 244, 725, 1205, 1092, 648, 1349, 125, 1375,
	1165, 229, 70, 816, 578, 56, 898, 866, 271, 1077,
	686, 965, 246, 1265, 1044, 214, 433, 248, 565, 1041,
	1056, 73, 832, 557, 427, 542, 459, 262, 870, 178,
	566, 157, 61, 263, 461, 145, 146, 147, 197, 824,
	468, 173, 216, 485, 1007, 9, 1266, 168, 1578, 212,
	768, 649, 1396, 170, 761, 762, 763, 764, 765, 758,
	35, 253, 768, 757, 756, 766, 767, 759, 760, 761,
	762, 763, 764, 765, 758, 272, 77, 768, 153, 219,
	155, 1093, 225, 272, 63, 227, 431, 758, 1161, 275,
	768, 411, 630, 167, 736, 428, 231, 232, 233, 234,
	258, 259, 237, 238, 239, 240, 241, 550, 633, 447,
	687, 434, 435, 851, 1206, 1920, 270, 551, 243, 64,
	65, 457, 1558, 479, 418, 1876, 1877, 1878, 1879, 1880,
	1881, 1882, 1883, 409, 1917, 252, 1420, 1421, 1855, 256,
	1169, 260, 261, 1064, 1065, 1806, 643, 1170, 268, 508,
	509, 175, 1784, 412, 1910, 1453, 215, 415, 1208, 432,
	1854, 1805, 516, 1410, 1194, 1544, 66, 1628, 476, 1629,
	500, 501, 502, 503, 1847, 410, 194, 1848, 1849, 1794,
	530, 1721, 1793, 1527, 451, 1795, 1722, 1723, 883, 882,
	487, 644, 218, 803, 453, 230, 1541, 696, 890, 1148,
	1137, 1136, 759, 760, 761, 762, 763, 764, 765, 758,
	220, 1138, 768, 1053, 222, 490, 1403, 472, 1394, 678,
	473, 488, 475, 474, 1139, 491, 677, 494, 495, 247,
	1229, 1227, 1731, 507, 1734, 1297, 515, 748, 504, 513,
	519, 520, 752, 470, 570, 755, 154, 45, 1799, 1798,
	1735, 770, 771, 772, 773, 774, 775, 776, 528, 753,
	754, 751, 777, 778, 779, 780, 757, 756, 766, 767,
	759, 760, 761, 762, 763, 764, 765, 758, 267, 1581,
	768, 34, 757, 756, 766, 767, 759, 760, 761, 762,
	763, 764, 765, 758, 149, 1621, 768, 1732, 1645, 35,
	529, 943, 1296, 953, 1159, 1642, 35, 646, 1157, 1485,
	52, 746, 462, 463, 464, 466, 434, 435, 745, 744,
	769, 469, 467, 477, 478, 46, 1219, 272, 1218, 1557,
	1132, 1559, 769, 158, 543, 1156, 746, 1112, 1376, 1377,
	1144, 702, 703, 1687, 1895, 744, 1360, 769, 745, 744,
	714, 1150, 1151, 738, 1155, 632, 564, 552, 696, 465,
	769, 1146, 746, 1339, 191, 1616, 746, 715, 539, 737,
	1748, 479, 450, 449, 444, 757, 756, 766, 767, 759,
	760, 761, 762, 763, 764, 765, 758, 1395, 769, 768,
	1140, 1141, 1143, 38, 35, 429, 1142, 38, 1117, 434,
	435, 58, 916, 1618, 1162, 1163, 230, 1301, 635, 549,
	437, 745, 744, 58, 39, 55, 40, 1651, 39, 1414,
	40, 852, 747, 727, 440, 1616, 1644, 663, 689, 746,
	666, 1415, 1164, 669, 670, 727, 693, 1550, 699, 707,
	1170, 441, 272, 712, 535, 716, 553, 747, 1381, 272,
	1911, 150, 717, 28, 545, 1814, 192, 35, 442, 540,
	629, 58, 1804, 1618, 652, 472, 543, 654, 656, 631,
	456, 174, 510, 747, 694, 506, 694, 747, 1532, 748,
	733, 1484, 769, 711, 708, 1683, 634, 645, 38, 636,
	720, 470, 665, 937, 938, 647, 895, 193, 745, 744,
	38, 193, 534, 1614, 690, 62, 192, 159, 160, 39,
	536, 40, 704, 902, 194, 522, 746, 694, 194, 1787,
	161, 39, 688, 40, 735, 1340, 1341, 1342, 47, 471,
	476, 1786, 1785, 1149, 541, 41, 1422, 44, 728, 41,
	747, 748, 43, 1237, 436, 745, 744, 544, 38, 707,
	769, 430, 42, 438, 439, 698, 67, 709, 849, 748,
	77, 705, 710, 746, 60, 537, 769, 718, 739, 39,
	414, 40, 1869, 272, 1376, 1377, 1712, 1714, 745, 744,
	1751, 804, 473, 1299, 475, 474, 6, 7, 787, 792,
	793, 869, 1631, 1432, 689, 887, 746, 745, 744, 481,
	480, 1081, 707, 543, 878, 918, 807, 1078, 806, 662,
	837, 892, 900, 847, 877, 746, 531, 861, 166, 164,
	731, 732, 734, 1443, 915, 643, 1749, 747, 917, 1796,
	41, 1773, 36, 37, 1630, 543, 36, 37, 1426, 498,
	497, 838, 41, 35, 1562, 1080, 1184, 845, 632, 1259,
	694, 1428, 543, 826, 827, 828, 829, 830, 831, 769,
	1713, 745, 744, 672, 1183, 1182, 742, 1552, 745, 744,
	644, 888, 1585, 856, 747, 966, 879, 470, 881, 746,
	868, 874, 876, 1181, 901, 972, 746, 1180, 688, 1045,
	41, 426, 1246, 1423, 886, 1179, 995, 994, 1178, 970,
	971, 969, 1177, 1004, 1004, 1001, 223, 747, 940, 1176,
	1175, 1173, 1006, 944, 1586, 939, 643, 272, 272, 1412,
	1539, 748, 673, 1114, 1045, 169, 747, 36, 37, 995,
	1046, 275, 942, 163, 745, 744, 1292, 694, 912, 36,
	37, 650, 651, 694, 850, 957, 959, 960, 694, 1661,
	935, 864, 746, 958, 1445, 947, 489, 1060, 1008, 1009,
	837, 644, 946, 745, 744, 1556, 757, 756, 766, 767,
	759, 760, 761, 762, 763, 764, 765, 758, 446, 945,
	768, 746, 1079, 1378, 1367, 941, 1079, 36, 37, 437,
	747, 838, 992, 1020, 425, 1444, 226, 747, 1018, 228,
	968, 1027, 689, 893, 426, 1368, 783, 1369, 637, 1019,
	426, 1002, 1005, 1060, 787, 745, 744, 1365, 1085, 426,
	1086, 1115, 1195, 1196, 1197, 1154, 863, 1158, 653, 1010,
	1011, 489, 445, 746, 489, 1040, 659, 660, 661, 30,
	1068, 1038, 1039, 1111, 1424, 1425, 1427, 1429, 1430, 1101,
	1055, 493, 950, 885, 884, 492, 854, 1635, 514, 543,
	512, 511, 1054, 747, 1057, 1058, 756, 766, 767, 759,
	760, 761, 762, 763, 764, 765, 758, 1070, 697, 768,
	697, 484, 1167, 1367, 1215, 805, 1499, 35, 1072, 1634,
	437, 1174, 747, 966, 880, 805, 688, 176, 989, 35,
	990, 1080, 1094, 505, 1368, 452, 895, 437, 35, 740,
	35, 1171, 1153, 910, 748, 1905, 1904, 782, 784, 785,
	786, 790, 910, 1903, 1185, 993, 594, 671, 795, 795,
	795, 795, 795, 795, 795, 1255, 1890, 1846, 748, 1868,
	748, 1255, 1807, 659, 747, 54, 57, 724, 1738, 1595,
	1811, 748, 1598, 748, 808, 809, 810, 811, 812, 813,
	814, 815, 628, 818, 627, 820, 821, 822, 823, 825,
	825, 825, 825, 825, 825, 825, 626, 841, 842, 843,
	844, 1201, 724, 1647, 724, 1646, 696, 625, 57, 1079,
	910, 1569, 272, 554, 57, 1596, 967, 1594, 724, 1523,
	804, 689, 543, 1255, 1522, 748, 275, 443, 1221, 1222,
	1277, 1223, 1225, 1763, 1519, 1518, 1674, 1290, 1764, 1228,
	1435, 1230, 1231, 1232, 1348, 1293, 1233, 1234, 1279, 1235,
	1236, 724, 1513, 1008, 1226, 1280, 1224, 1262, 437, 743,
	724, 1512, 1289, 1690, 1257, 1594, 659, 724, 1436, 1309,
	769, 1335, 1336, 1337, 697, 694, 1344, 1598, 1245, 1190,
	724, 1386, 1243, 694, 1772, 1350, 1154, 1154, 1350, 1154,
	1154, 543, 543, 1303, 1073, 748, 57, 1361, 1255, 1254,
	57, 1364, 57, 57, 1302, 1273, 724, 1192, 1267, 57,
	1269, 277, 1272, 277, 57, 688, 1270, 1271, 57, 1060,
	543, 1274, 1264, 724, 1096, 910, 1095, 795, 795, 1261,
	795, 795, 795, 795, 795, 795, 795, 795, 795, 795,
	795, 795, 795, 795, 795, 1291, 999, 748, 1674, 1384,
	910, 1063, 1363, 724, 951, 57, 724, 723, 1347, 482,
	696, 697, 1305, 1306, 1307, 1819, 1311, 790, 1772, 769,
	1346, 895, 790, 1351, 1352, 1353, 1354, 1355, 682, 681,
	146, 675, 676, 1382, 1383, 1597, 1416, 1370, 1371, 1372,
	1373, 1374, 1897, 1387, 675, 674, 1073, 57, 69, 68,
	1089, 57, 57, 1241, 1380, 1411, 1295, 1239, 1255, 707,
	1088, 1598, 437, 1152, 1389, 1073, 527, 1390, 1439, 1087,
	1069, 1020, 1275, 911, 1061, 889, 1018, 1448, 1400, 1027,
	1398, 865, 1397, 1434, 967, 858, 855, 1019, 679, 1404,
	1020, 1462, 272, 668, 1402, 1018, 667, 664, 1027, 1405,
	526, 1240, 1772, 527, 1084, 1238, 1019, 527, 1864, 696,
	1466, 999, 1465, 1598, 1255, 1720, 1623, 1481, 1446, 1500,
	1073, 1467, 1220, 1102, 910, 532, 724, 1473, 1537, 853,
	680, 1350, 1455, 684, 683, 437, 1841, 1459, 53, 543,
	543, 1356, 1357, 1447, 1839, 1440, 1508, 1508, 1802, 1662,
	32, 1776, 1777, 1819, 220, 1469, 1516, 245, 59, 1359,
	1358, 437, 1472, 1278, 249, 1189, 1188, 1166, 1160, 748,
	1385, 1091, 1498, 766, 767, 759, 760, 761, 762, 763,
	764, 765, 758, 1090, 1067, 768, 948, 914, 891, 795,
	795, 795, 846, 741, 1509, 692, 795, 795, 795, 795,
	59, 1510, 691, 658, 657, 655, 59, 638, 32, 555,
	517, 458, 454, 272, 757, 756, 766, 767, 759, 760,
	761, 762, 763, 764, 765, 758, 423, 242, 768, 236,
	1520, 1521, 250, 251, 1451, 1084, 235, 224, 11, 1779,
	1258, 795, 1528, 1563, 685, 1566, 518, 255, 254, 162,
	1570, 156, 1782, 1705, 711, 1703, 1781, 482, 1706, 1525,
	1704, 1702, 1620, 1221, 77, 1548, 1549, 1701, 272, 1547,
	1707, 1546, 1607, 1608, 1891, 1633, 1106, 1107, 1853, 1672,
	1551, 1553, 1554, 1555, 1572, 819, 1587, 422, 59, 1636,
	1576, 1575, 59, 499, 59, 59, 641, 543, 1649, 1584,
	1862, 59, 694, 276, 1583, 59, 59, 1638, 1568, 413,
	59, 421, 1571, 1592, 482, 57, 1283, 937, 938, 269,
	1619, 1622, 1610, 57, 1639, 1590, 1591, 1485, 1624, 697,
	1110, 1284, 1103, 640, 1391, 1104, 1637, 697, 525, 1514,
	1515, 1577, 523, 521, 165, 1641, 1042, 59, 1717, 1511,
	1047, 59, 1650, 908, 701, 548, 1098, 1860, 1667, 757,
	756, 766, 767, 759, 760, 761, 762, 763, 764, 765,
	758, 895, 1345, 768, 1560, 1099, 1859, 1813, 995, 1695,
	1277, 264, 265, 266, 1589, 1300, 1504, 1503, 1502, 59,
	1501, 1679, 1187, 59, 59, 1653, 904, 1001, 905, 906,
	907, 1912, 1467, 1442, 272, 1419, 1418, 1663, 1186, 1664,
	448, 903, 272, 1691, 897, 1680, 58, 899, 55, 1060,
	1682, 1593, 1478, 1689, 713, 1696, 913, 1193, 1699, 8,
	875, 547, 546, 795, 795, 694, 1669, 1, 1708, 1697,
	1698, 1728, 1700, 1060, 1312, 1688, 1719, 1716, 13, 1729,
	1692, 1718, 12, 1727, 1752, 769, 873, 873, 873, 257,
	1213, 802, 582, 1733, 1643, 795, 795, 795, 795, 568,
	1874, 1765, 1482, 1750, 1308, 1338, 1379, 483, 199, 1260,
	482, 455, 57, 1756, 1603, 1606, 1607, 1608, 1604, 15,
	1605, 1609, 1452, 1431, 1757, 57, 1789, 1648, 769, 1768,
	1294, 1770, 1790, 38, 700, 524, 1780, 1740, 1362, 694,
	1769, 919, 1771, 726, 182, 172, 719, 416, 29, 10,
	1172, 183, 181, 1741, 39, 1791, 40, 857, 463, 464,
	466, 180, 272, 179, 1479, 177, 469, 467, 477, 478,
	694, 486, 1755, 217, 995, 1695, 1820, 1829, 1789, 1797,
	221, 1825, 80, 995, 1695, 421, 82, 81, 1823, 1832,
	79, 1830, 78, 862, 1810, 76, 1457, 1466, 1458, 1465,
	74, 1300, 1281, 1808, 465, 75, 1836, 1467, 1467, 1834,
	1833, 1835, 54, 1060, 72, 1487, 1632, 533, 1517, 694,
	1816, 1817, 1076, 781, 1478, 1815, 1792, 1494, 1826, 59,
	1286, 1858, 1812, 277, 1244, 873, 873, 1800, 1801, 873,
	873, 873, 1505, 1852, 1857, 54, 1863, 1043, 795, 569,
	707, 1871, 956, 707, 707, 707, 581, 1888, 580, 1873,
	579, 1762, 1884, 1885, 1886, 750, 1477, 1542, 873, 873,
	873, 873, 1887, 769, 1588, 41, 1602, 1872, 1600, 1829,
	1901, 1470, 1898, 1896, 1599, 1778, 59, 59, 1823, 1774,
	1902, 1476, 1893, 1830, 873, 59, 1900, 1543, 1388, 1747,
	421, 1105, 1450, 1145, 1909, 1135, 896, 421, 1108, 5,
	1147, 1130, 4, 1913, 1914, 3, 1129, 1128, 482, 1915,
	694, 1823, 1127, 995, 1695, 1918, 996, 997, 998, 1000,
	1916, 58, 1126, 55, 1124, 1125, 1612, 1122, 1478, 1123,
	1121, 1100, 695, 1478, 1478, 1478, 1478, 1478, 2, 0,
	0, 0, 694, 0, 1300, 1580, 0, 1478, 1300, 1458,
	1048, 1049, 1050, 1051, 0, 1052, 0, 1457, 0, 0,
	0, 0, 36, 37, 471, 476, 0, 0, 0, 0,
	0, 0, 1437, 0, 0, 0, 1441, 0, 1062, 795,
	0, 0, 795, 0, 795, 34, 795, 0, 795, 795,
	0, 0, 0, 0, 0, 1457, 1071, 0, 1074, 1075,
	0, 58, 0, 55, 1082, 0, 1083, 0, 38, 1478,
	35, 0, 33, 0, 0, 0, 0, 473, 0, 475,
	474, 421, 0, 0, 0, 1478, 0, 0, 0, 39,
	1109, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	1479, 0, 59, 0, 59, 1479, 1479, 1479, 1479, 1479,
	0, 0, 0, 0, 0, 0, 0, 59, 873, 1612,
	0, 1715, 0, 0, 1249, 0, 0, 0, 1677, 437,
	0, 0, 58, 1300, 55, 0, 1580, 0, 0, 1191,
	0, 0, 1524, 193, 0, 0, 0, 556, 38, 185,
	873, 184, 0, 188, 189, 192, 0, 38, 277, 186,
	194, 873, 0, 0, 58, 639, 55, 482, 0, 39,
	0, 40, 0, 0, 0, 0, 0, 0, 39, 0,
	40, 1479, 0, 1209, 1210, 0, 0, 0, 1580, 0,
	1565, 1212, 1567, 1766, 1767, 0, 0, 1479, 0, 0,
	1216, 1217, 0, 0, 559, 0, 460, 0, 0, 52,
	41, 462, 463, 464, 466, 0, 0, 0, 0, 38,
	469, 467, 477, 478, 697, 276, 421, 1458, 0, 57,
	1242, 0, 0, 1677, 0, 0, 1248, 0, 0, 0,
	39, 0, 40, 0, 1250, 1251, 0, 1252, 1253, 0,
	0, 38, 0, 0, 0, 0, 729, 0, 465, 0,
	0, 0, 1263, 0, 0, 0, 0, 0, 0, 749,
	0, 1824, 39, 697, 40, 791, 0, 0, 0, 1652,
	1457, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	41, 0, 1842, 1843, 1844, 0, 38, 0, 0, 41,
	0, 0, 0, 1535, 748, 0, 0, 36, 37, 696,
	59, 1148, 1137, 1136, 0, 0, 817, 39, 0, 40,
	0, 0, 1670, 1138, 0, 0, 1671, 0, 1603, 1606,
	1607, 1608, 1604, 32, 1605, 1609, 1139, 0, 1776, 1777,
	0, 0, 0, 0, 0, 0, 1580, 0, 848, 757,
	756, 766, 767, 759, 760, 761, 762, 763, 764, 765,
	758, 41, 0, 768, 1300, 0, 0, 748, 0, 0,
	871, 1824, 0, 1665, 1899, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 57, 0, 0, 36, 37, 0,
	0, 1461, 0, 41, 0, 0, 36, 37, 0, 187,
	1677, 0, 1736, 1737, 1824, 0, 697, 0, 0, 171,
	1458, 0, 757, 756, 766, 767, 759, 760, 761, 762,
	763, 764, 765, 758, 0, 0, 768, 0, 471, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 0, 1132, 0, 0, 0, 1417, 0, 0, 0,
	0, 949, 1144, 0, 0, 954, 955, 0, 36, 37,
	0, 0, 1433, 1150, 1151, 0, 59, 0, 696, 0,
	1148, 1137, 1136, 1146, 0, 0, 52, 0, 55, 0,
	1449, 473, 1138, 475, 474, 0, 0, 0, 0, 0,
	36, 37, 57, 0, 0, 1139, 0, 0, 481, 480,
	276, 791, 1140, 1141, 1143, 0, 791, 34, 1142, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1301,
	0, 1012, 1037, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 35, 0, 33, 36, 37, 35, 587, 1003,
	585, 589, 590, 591, 592, 0, 57, 57, 588, 593,
	1730, 0, 0, 0, 51, 0, 57, 1617, 0, 0,
	0, 0, 1066, 38, 0, 696, 0, 1148, 1137, 1136,
	0, 59, 0, 32, 32, 32, 32, 32, 32, 1138,
	0, 0, 0, 0, 39, 0, 40, 0, 1529, 0,
	1530, 1531, 1139, 0, 0, 1533, 1534, 1536, 1538, 1540,
	0, 1132, 0, 0, 545, 0, 0, 52, 0, 55,
	0, 1144, 0, 0, 0, 0, 0, 0, 0, 38,
	0, 1561, 1150, 1151, 0, 0, 0, 52, 0, 55,
	0, 0, 1146, 769, 0, 0, 0, 1666, 0, 0,
	39, 0, 40, 0, 0, 1149, 757, 756, 766, 767,
	759, 760, 761, 762, 763, 764, 765, 758, 0, 0,
	768, 1140, 1141, 1143, 0, 0, 57, 1142, 0, 0,
	57, 57, 0, 0, 54, 57, 57, 57, 57, 57,
	0, 0, 0, 0, 0, 0, 0, 1709, 0, 57,
	0, 0, 0, 1617, 38, 1460, 769, 544, 1132, 1640,
	0, 0, 0, 0, 0, 41, 0, 0, 1144, 696,
	1211, 1148, 1137, 1136, 38, 39, 0, 40, 0, 1150,
	1151, 0, 0, 1138, 0, 59, 59, 0, 57, 1146,
	421, 0, 0, 1660, 0, 39, 1139, 40, 0, 0,
	0, 0, 0, 26, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 1668, 0, 0, 1247, 0, 1140, 1141,
	1143, 41, 0, 0, 1142, 0, 0, 57, 0, 32,
	0, 0, 1256, 0, 0, 1301, 794, 796, 797, 798,
	799, 800, 801, 0, 0, 0, 0, 0, 0, 0,
	0, 1685, 696, 0, 1148, 1137, 1136, 21, 0, 16,
	0, 1710, 36, 37, 1149, 0, 1138, 0, 0, 1285,
	1288, 0, 17, 0, 24, 0, 0, 0, 58, 1139,
	55, 0, 0, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 18, 19, 59, 0, 41, 0, 0, 1739,
	54, 0, 1132, 1304, 1742, 1743, 1744, 1745, 1746, 54,
	0, 421, 1144, 0, 1684, 1343, 41, 817, 36, 37,
	0, 0, 0, 1150, 1151, 0, 0, 0, 0, 0,
	0, 0, 0, 1146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1207, 0, 0, 0, 59, 59,
	0, 0, 0, 0, 0, 0, 481, 480, 59, 59,
	0, 1149, 1140, 1141, 1143, 38, 421, 0, 1142, 757,
	756, 766, 767, 759, 760, 761, 762, 763, 764, 765,
	758, 0, 1617, 768, 0, 1132, 39, 0, 40, 0,
	769, 1401, 0, 36, 37, 1144, 58, 1803, 1618, 0,
	0, 14, 1809, 0, 0, 0, 1150, 1151, 0, 0,
	0, 1861, 0, 36, 37, 961, 1146, 1413, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 0, 0, 0, 0, 0, 1845, 59,
	0, 0, 0, 0, 0, 1140, 1141, 1143, 1438, 54,
	0, 1142, 0, 0, 0, 0, 0, 0, 0, 0,
	1856, 0, 1301, 0, 0, 0, 1454, 0, 59, 0,
	0, 0, 59, 59, 1865, 1866, 1867, 59, 59, 59,
	59, 59, 1870, 38, 0, 0, 20, 0, 0, 59,
	0, 59, 0, 0, 0, 59, 0, 0, 22, 23,
	0, 25, 421, 0, 39, 1149, 40, 41, 0, 0,
	421, 0, 0, 0, 0, 791, 791, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	59, 212, 213, 0, 1906, 1907, 1908, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 1684, 200, 0, 0, 0,
	0, 0, 0, 0, 1919, 0, 0, 0, 0, 59,
	0, 207, 0, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 1545, 0, 0, 1149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 37, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1573, 1574, 1288, 0, 0,
	0, 0, 0, 0, 0, 41, 0, 1198, 1199, 1200,
	421, 0, 0, 0, 0, 1202, 1203, 1204, 1678, 0,
	203, 0, 198, 208, 0, 1831, 0, 0, 0, 0,
	205, 204, 0, 769, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
	1330, 1331, 1332, 1333, 1334, 0, 0, 0, 0, 794,
	0, 0, 0, 0, 0, 394, 383, 0, 342, 396,
	310, 330, 405, 332, 333, 368, 289, 351, 0, 327,
	308, 0, 0, 0, 313, 282, 322, 283, 311, 344,
	0, 309, 0, 385, 354, 0, 0, 0, 403, 0,
	359, 0, 36, 37, 59, 0, 346, 387, 349, 378,
	341, 369, 298, 358, 398, 328, 364, 399, 0, 0,
	0, 35, 0, 0, 0, 0, 0, 1831, 0, 1675,
	0, 0, 0, 363, 393, 324, 295, 408, 0, 367,
	281, 361, 0, 0, 287, 290, 404, 391, 318, 317,
	0, 0, 0, 0, 0, 0, 0, 345, 350, 374,
	338, 0, 0, 0, 0, 201, 0, 0, 0, 0,
	0, 202, 0, 314, 0, 357, 0, 0, 0, 294,
	288, 1726, 343, 0, 0, 0, 297, 0, 315, 375,
	0, 278, 381, 388, 340, 0, 0, 392, 337, 336,
	0, 0, 0, 0, 0, 0, 329, 274, 38, 406,
	395, 347, 386, 312, 323, 0, 319, 0, 1754, 0,
	320, 321, 356, 370, 0, 0, 0, 0, 0, 39,
	377, 40, 1760, 833, 1761, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 211, 0, 0, 0,
	0, 1392, 1393, 286, 279, 316, 379, 382, 302, 366,
	291, 325, 372, 326, 348, 307, 0, 0, 835, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 0, 0, 1406, 1407, 1408, 1409, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1837, 0, 0, 1838, 0, 0,
	1840, 0, 0, 0, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 0, 284, 0, 1850, 0, 0,
	41, 285, 306, 389, 991, 836, 0, 0, 1497, 1495,
	1491, 1490, 1754, 83, 834, 0, 365, 0, 0, 840,
	839, 1493, 0, 0, 0, 791, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 305, 299, 300, 352, 353, 400,
	401, 402, 376, 296, 0, 303, 304, 0, 384, 0,
	1892, 791, 355, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 331, 280, 335, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 1526, 0, 339, 334,
	360, 362, 371, 380, 390, 397, 373, 36, 37, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 394, 383, 0, 342, 396,
	310, 330, 405, 332, 333, 368, 289, 351, 0, 327,
	308, 0, 0, 0, 313, 282, 322, 283, 311, 344,
	0, 309, 0, 385, 354, 0, 0, 0, 403, 0,
	359, 0, 0, 0, 0, 0, 346, 387, 349, 378,
	341, 369, 298, 358, 398, 328, 364, 399, 0, 0,
	0, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 393, 324, 295, 408, 0, 367,
	281, 361, 0, 0, 287, 290, 404, 391, 318, 317,
	0, 0, 0, 0, 0, 0, 0, 345, 350, 374,
	338, 0, 0, 0, 0, 0, 0, 1654, 0, 0,
	1655, 0, 1656, 314, 1657, 357, 1658, 1659, 0, 294,
	288, 0, 343, 0, 0, 0, 297, 0, 315, 375,
	0, 278, 381, 388, 340, 0, 0, 392, 337, 336,
	0, 0, 0, 0, 0, 0, 329, 274, 38, 406,
	395, 347, 386, 312, 323, 0, 319, 0, 0, 0,
	320, 321, 356, 370, 696, 0, 1148, 1137, 1136, 39,
	377, 40, 833, 0, 0, 0, 0, 0, 1138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1139, 0, 286, 279, 316, 379, 382, 302, 366,
	291, 325, 372, 326, 348, 307, 0, 835, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1625, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 0, 0, 284, 0, 0, 0, 0,
	41, 285, 306, 389, 836, 0, 0, 1132, 1497, 1495,
	0, 0, 83, 834, 0, 0, 365, 1144, 840, 839,
	0, 1493, 0, 0, 0, 0, 0, 0, 1150, 1151,
	0, 0, 0, 0, 0, 0, 0, 0, 1146, 0,
	0, 0, 0, 301, 305, 299, 300, 352, 353, 400,
	401, 402, 376, 296, 0, 303, 304, 0, 384, 0,
	0, 0, 355, 0, 0, 0, 407, 1140, 1141, 1143,
	0, 0, 0, 1142, 331, 280, 335, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 0, 0, 339, 334,
	360, 362, 371, 380, 390, 397, 373, 36, 37, 394,
	383, 0, 342, 396, 310, 330, 405, 332, 333, 368,
	289, 351, 0, 327, 308, 0, 84, 0, 313, 282,
	322, 283, 311, 344, 0, 309, 0, 385, 354, 0,
	0, 0, 403, 0, 359, 0, 0, 0, 0, 0,
	346, 387, 349, 378, 341, 369, 298, 358, 398, 328,
	364, 399, 0, 0, 0, 35, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 393, 324,
	295, 408, 0, 367, 281, 361, 0, 0, 287, 290,
	404, 391, 318, 317, 0, 0, 922, 0, 0, 0,
	934, 345, 350, 374, 338, 0, 0, 0, 0, 0,
	924, 0, 0, 0, 0, 0, 0, 314, 0, 357,
	1149, 0, 0, 294, 288, 0, 343, 0, 0, 0,
	297, 0, 315, 375, 0, 278, 381, 388, 340, 0,
	0, 392, 337, 336, 1399, 0, 0, 0, 0, 0,
	329, 274, 38, 406, 395, 347, 386, 312, 323, 0,
	319, 0, 0, 0, 320, 321, 356, 370, 0, 0,
	1851, 0, 0, 39, 377, 40, 0, 0, 0, 1016,
	0, 0, 0, 0, 0, 0, 923, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 279, 316,
	379, 382, 302, 366, 291, 325, 372, 326, 348, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 1496, 139, 1021, 0, 140,
	141, 142, 144, 143, 1025, 0, 1017, 0, 1029, 1028,
	1030, 1015, 1032, 0, 0, 0, 1036, 1033, 1035, 1034,
	0, 1031, 0, 0, 0, 0, 0, 0, 0, 284,
	1022, 1023, 0, 0, 41, 285, 306, 389, 0, 0,
	0, 0, 1497, 1495, 0, 0, 0, 0, 0, 0,
	365, 1024, 1026, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 305, 299,
	300, 352, 353, 400, 401, 402, 376, 296, 0, 303,
	304, 0, 384, 0, 0, 0, 355, 0, 0, 0,
	407, 0, 0, 0, 0, 0, 0, 0, 331, 280,
	335, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	0, 0, 339, 334, 360, 362, 371, 380, 390, 397,
	373, 36, 37, 394, 383, 920, 342, 396, 310, 330,
	405, 332, 333, 368, 289, 351, 0, 327, 308, 0,
	0, 0, 313, 282, 322, 283, 311, 344, 0, 309,
	0, 385, 354, 0, 106, 0, 403, 0, 359, 0,
	0, 0, 0, 0, 346, 387, 349, 378, 341, 369,
	298, 358, 398, 328, 364, 399, 0, 0, 0, 52,
	0, 55, 35, 0, 0, 0, 0, 0, 0, 0,
	0, 363, 393, 324, 295, 408, 0, 367, 281, 361,
	0, 0, 287, 290, 404, 391, 318, 317, 0, 0,
	0, 0, 0, 0, 0, 345, 350, 374, 338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1268,
	0, 314, 0, 357, 0, 0, 0, 294, 288, 0,
	343, 91, 0, 0, 297, 0, 315, 375, 0, 278,
	381, 388, 340, 0, 0, 392, 337, 336, 0, 0,
	0, 0, 0, 0, 329, 274, 38, 406, 395, 347,
	386, 312, 323, 0, 319, 0, 107, 0, 320, 321,
	356, 370, 0, 0, 0, 0, 0, 39, 377, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 279, 316, 379, 382, 302, 366, 291, 325,
	372, 326, 348, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 0, 139, 126, 0, 140, 141, 142, 144,
	143, 108, 109, 110, 114, 112, 111, 113, 85, 87,
	0, 83, 86, 92, 88, 89, 90, 104, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 105,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 0,
	0, 0, 0, 284, 0, 0, 0, 0, 41, 285,
	306, 389, 0, 0, 0, 0, 0, 273, 0, 0,
	0, 0, 0, 0, 365, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 305, 299, 300, 352, 353, 400, 401, 402,
	376, 296, 0, 303, 304, 0, 384, 0, 0, 0,
	355, 0, 0, 0, 407, 84, 0, 0, 0, 0,
	0, 922, 331, 280, 335, 934, 0, 0, 0, 0,
	0, 0, 292, 293, 0, 924, 339, 334, 360, 362,
	371, 380, 390, 397, 373, 36, 37, 394, 383, 0,
	342, 396, 310, 330, 405, 332, 333, 368, 289, 351,
	0, 327, 308, 0, 0, 0, 313, 282, 322, 283,
	311, 344, 0, 309, 0, 385, 354, 0, 0, 0,
	403, 0, 359, 0, 0, 0, 0, 0, 346, 387,
	349, 378, 341, 369, 298, 358, 398, 328, 364, 399,
	0, 0, 0, 35, 0, 721, 0, 722, 0, 0,
	0, 923, 0, 0, 0, 363, 393, 324, 295, 408,
	0, 367, 281, 361, 0, 0, 287, 290, 404, 391,
	318, 317, 0, 0, 0, 0, 0, 0, 0, 345,
	350, 374, 338, 0, 0, 0, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 314, 0, 357, 0, 0,
	0, 294, 288, 0, 343, 0, 0, 0, 297, 0,
	315, 375, 0, 278, 381, 388, 340, 0, 0, 392,
	337, 336, 0, 0, 0, 0, 0, 0, 329, 274,
	38, 406, 395, 347, 386, 312, 323, 0, 319, 0,
	0, 0, 320, 321, 356, 370, 696, 0, 1148, 1137,
	1136, 39, 377, 40, 0, 0, 0, 0, 0, 0,
	1138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1139, 0, 286, 279, 316, 379, 382,
	302, 366, 291, 325, 372, 326, 348, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1168, 0, 0, 0, 0, 0, 0, 284, 0, 0,
	0, 0, 41, 285, 306, 389, 0, 0, 0, 1132,
	0, 273, 0, 0, 0, 0, 0, 0, 365, 1144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1150, 1151, 0, 0, 0, 0, 0, 0, 0, 0,
	1146, 0, 0, 0, 0, 301, 305, 299, 300, 352,
	353, 400, 401, 402, 376, 296, 0, 303, 304, 0,
	384, 0, 0, 0, 355, 0, 0, 0, 407, 1140,
	1141, 1143, 0, 0, 0, 1142, 331, 280, 335, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 0, 0,
	339, 334, 360, 362, 371, 380, 390, 397, 373, 36,
	37, 394, 383, 0, 342, 396, 310, 330, 405, 332,
	333, 368, 289, 351, 0, 327, 308, 0, 0, 0,
	313, 282, 322, 283, 311, 344, 0, 309, 0, 385,
	354, 0, 0, 0, 403, 0, 359, 0, 0, 0,
	0, 0, 346, 387, 349, 378, 341, 369, 298, 358,
	398, 328, 364, 399, 0, 417, 0, 35, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 419, 0, 363,
	393, 324, 295, 408, 0, 367, 281, 361, 0, 0,
	287, 290, 404, 391, 318, 317, 0, 0, 0, 0,
	0, 0, 0, 345, 350, 374, 338, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 357, 1149, 0, 0, 294, 288, 0, 343, 0,
	0, 0, 297, 0, 315, 375, 0, 278, 381, 388,
	340, 0, 0, 392, 337, 336, 0, 0, 0, 0,
	0, 0, 329, 274, 38, 406, 395, 347, 386, 312,
	323, 0, 319, 0, 0, 0, 320, 321, 356, 370,
	0, 0, 1579, 0, 0, 39, 377, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	279, 316, 379, 382, 302, 366, 291, 325, 372, 326,
	348, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 284, 0, 0, 0, 0, 41, 285, 306, 389,
	0, 0, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 365, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	305, 299, 300, 352, 353, 400, 401, 402, 376, 296,
	0, 303, 304, 0, 384, 0, 0, 0, 355, 0,
	0, 0, 407, 0, 0, 0, 0, 0, 0, 0,
	331, 280, 335, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 0, 0, 339, 334, 360, 362, 371, 380,
	390, 397, 373, 36, 37, 394, 383, 0, 342, 396,
	310, 330, 405, 332, 333, 368, 289, 351, 0, 327,
	308, 0, 0, 0, 313, 282, 322, 283, 311, 344,
	0, 309, 0, 385, 354, 0, 0, 0, 403, 0,
	359, 0, 0, 0, 0, 0, 346, 387, 349, 378,
	341, 369, 298, 358, 398, 328, 364, 399, 0, 0,
	0, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 393, 324, 295, 408, 0, 367,
	281, 361, 0, 0, 287, 290, 404, 391, 318, 317,
	0, 0, 0, 0, 0, 0, 0, 345, 350, 374,
	338, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1564, 0, 314, 0, 357, 0, 0, 0, 294,
	288, 0, 343, 0, 0, 0, 297, 0, 315, 375,
	0, 278, 381, 388, 340, 0, 0, 392, 337, 336,
	0, 0, 0, 0, 0, 0, 329, 274, 38, 406,
	395, 347, 386, 312, 323, 0, 319, 0, 0, 0,
	320, 321, 356, 370, 696, 0, 1148, 1137, 1136, 39,
	377, 40, 0, 0, 0, 0, 0, 0, 1138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1139, 0, 286, 279, 316, 379, 382, 302, 366,
	291, 325, 372, 326, 348, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1758, 1759, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 0, 0, 0,
	41, 285, 306, 389, 0, 0, 0, 1132, 0, 273,
	0, 0, 0, 0, 0, 0, 365, 1144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1150, 1151,
	0, 0, 0, 0, 0, 0, 0, 0, 1146, 0,
	0, 0, 0, 301, 305, 299, 300, 352, 353, 400,
	401, 402, 376, 296, 0, 303, 304, 0, 384, 0,
	0, 0, 355, 0, 0, 0, 407, 1140, 1141, 1143,
	0, 0, 0, 1142, 331, 280, 335, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 0, 0, 339, 334,
	360, 362, 371, 380, 390, 397, 373, 36, 37, 394,
	383, 0, 342, 396, 310, 330, 405, 332, 333, 368,
	289, 351, 0, 327, 308, 0, 0, 0, 313, 282,
	322, 283, 311, 344, 0, 309, 0, 385, 354, 0,
	0, 0, 403, 0, 359, 0, 0, 0, 0, 0,
	346, 387, 349, 378, 341, 369, 298, 358, 398, 328,
	364, 399, 0, 0, 0, 52, 0, 55, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 393, 324,
	295, 408, 0, 367, 281, 361, 0, 0, 287, 290,
	404, 391, 318, 317, 0, 0, 0, 0, 0, 0,
	0, 345, 350, 374, 338, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 357,
	1149, 0, 0, 294, 288, 0, 343, 0, 0, 0,
	297, 0, 315, 375, 0, 278, 381, 388, 340, 0,
	0, 392, 337, 336, 0, 0, 0, 0, 0, 0,
	329, 274, 38, 406, 395, 347, 386, 312, 323, 0,
	319, 0, 0, 0, 320, 321, 356, 370, 696, 0,
	1148, 1137, 1136, 39, 377, 40, 0, 0, 0, 0,
	0, 0, 1138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1139, 0, 286, 279, 316,
	379, 382, 302, 366, 291, 325, 372, 326, 348, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 41, 285, 306, 389, 0, 0,
	0, 1132, 0, 273, 0, 0, 0, 0, 0, 0,
	365, 1144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1150, 1151, 0, 0, 0, 0, 0, 0,
	0, 0, 1146, 0, 0, 0, 0, 301, 305, 299,
	300, 352, 353, 400, 401, 402, 376, 296, 0, 303,
	304, 0, 384, 0, 0, 0, 355, 0, 0, 0,
	407, 1140, 1141, 1143, 0, 0, 0, 1142, 331, 280,
	335, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	0, 0, 339, 334, 360, 362, 371, 380, 390, 397,
	373, 36, 37, 394, 383, 0, 342, 396, 310, 330,
	405, 332, 333, 368, 289, 351, 0, 327, 308, 0,
	0, 0, 313, 282, 322, 283, 311, 344, 0, 309,
	0, 385, 354, 0, 0, 0, 403, 0, 359, 0,
	0, 0, 0, 0, 346, 387, 349, 378, 341, 369,
	298, 358, 398, 328, 364, 399, 0, 0, 0, 35,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 363, 393, 324, 295, 408, 0, 367, 281, 361,
	0, 0, 287, 290, 404, 391, 318, 317, 538, 0,
	0, 0, 0, 0, 0, 345, 350, 374, 338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 357, 1149, 0, 0, 294, 288, 0,
	343, 0, 0, 0, 297, 0, 315, 375, 0, 278,
	381, 388, 340, 0, 0, 392, 337, 336, 0, 0,
	0, 0, 0, 0, 329, 274, 38, 406, 395, 347,
	386, 312, 323, 0, 319, 0, 0, 0, 320, 321,
	356, 370, 696, 0, 1148, 1137, 1136, 39, 377, 40,
	0, 0, 0, 0, 0, 0, 1138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1139,
	0, 286, 279, 316, 379, 382, 302, 366, 291, 325,
	372, 326, 348, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1889, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 284, 0, 0, 0, 0, 41, 285,
	306, 389, 0, 0, 0, 1132, 0, 273, 0, 0,
	0, 0, 0, 0, 365, 1144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1150, 1151, 0, 0,
	0, 0, 0, 0, 0, 0, 1146, 0, 0, 0,
	0, 301, 305, 299, 300, 352, 353, 400, 401, 402,
	376, 296, 0, 303, 304, 0, 384, 0, 0, 0,
	355, 0, 0, 0, 407, 1140, 1141, 1143, 0, 0,
	0, 1142, 331, 280, 335, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 0, 0, 339, 334, 360, 362,
	371, 380, 390, 397, 373, 36, 37, 394, 383, 0,
	342, 396, 310, 330, 405, 332, 333, 368, 289, 351,
	0, 327, 308, 0, 0, 0, 313, 282, 322, 283,
	311, 344, 0, 309, 0, 385, 354, 0, 0, 0,
	403, 0, 359, 0, 0, 0, 0, 0, 346, 387,
	349, 378, 341, 369, 298, 358, 398, 328, 364, 399,
	0, 0, 0, 35, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 393, 324, 295, 408,
	0, 367, 281, 361, 0, 0, 287, 290, 404, 391,
	318, 317, 0, 0, 0, 0, 0, 0, 0, 345,
	350, 374, 338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 357, 1149, 0,
	0, 294, 288, 0, 343, 0, 0, 0, 297, 0,
	315, 375, 0, 278, 381, 388, 340, 0, 0, 392,
	337, 336, 0, 0, 0, 0, 0, 0, 329, 274,
	38, 406, 395, 347, 386, 312, 323, 0, 319, 0,
	0, 0, 320, 321, 356, 370, 696, 0, 1148, 1137,
	1136, 39, 377, 40, 0, 0, 0, 0, 0, 0,
	1138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1139, 0, 286, 279, 316, 379, 382,
	302, 366, 291, 325, 372, 326, 348, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1676, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 284, 0, 0,
	0, 0, 41, 285, 306, 389, 0, 0, 0, 1132,
	0, 273, 0, 0, 0, 0, 0, 0, 365, 1144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1150, 1151, 0, 0, 0, 0, 0, 0, 0, 0,
	1146, 0, 0, 0, 0, 301, 305, 299, 300, 352,
	353, 400, 401, 402, 376, 296, 0, 303, 304, 0,
	384, 0, 0, 0, 355, 0, 0, 0, 407, 1140,
	1141, 1143, 0, 0, 0, 1142, 331, 280, 335, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 0, 0,
	339, 334, 360, 362, 371, 380, 390, 397, 373, 36,
	37, 394, 1828, 0, 342, 396, 310, 330, 405, 332,
	333, 368, 289, 351, 0, 327, 308, 0, 0, 0,
	313, 282, 322, 283, 311, 344, 0, 309, 0, 385,
	354, 0, 0, 0, 403, 0, 359, 0, 0, 0,
	0, 0, 346, 387, 349, 378, 341, 369, 298, 358,
	398, 328, 364, 399, 437, 0, 0, 35, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	393, 324, 295, 408, 0, 367, 281, 361, 0, 0,
	287, 290, 404, 391, 318, 317, 0, 0, 0, 0,
	0, 0, 0, 345, 350, 374, 338, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 357, 1149, 0, 0, 294, 288, 0, 343, 0,
	0, 0, 297, 0, 315, 375, 0, 278, 381, 388,
	340, 0, 0, 392, 337, 336, 0, 0, 0, 0,
	0, 0, 329, 0, 38, 406, 395, 347, 386, 312,
	323, 0, 319, 0, 0, 0, 320, 321, 356, 370,
	696, 0, 1148, 1137, 1136, 39, 377, 40, 0, 0,
	0, 0, 0, 0, 1138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1139, 0, 286,
	279, 316, 379, 382, 302, 366, 291, 325, 372, 326,
	348, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1582, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 284, 0, 0, 0, 0, 41, 285, 306, 389,
	0, 0, 0, 1132, 0, 0, 0, 0, 0, 0,
	0, 0, 365, 1144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1150, 1151, 0, 0, 0, 0,
	0, 0, 0, 0, 1146, 0, 0, 0, 0, 301,
	305, 299, 300, 352, 353, 400, 401, 402, 376, 296,
	0, 303, 304, 0, 384, 0, 0, 0, 355, 0,
	0, 0, 407, 1140, 1141, 1143, 0, 0, 0, 1142,
	331, 280, 335, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 0, 0, 339, 334, 360, 362, 371, 380,
	390, 397, 373, 36, 37, 394, 383, 0, 342, 396,
	310, 330, 405, 332, 333, 368, 289, 351, 0, 327,
	308, 0, 0, 0, 313, 282, 322, 283, 311, 344,
	0, 309, 0, 385, 354, 0, 0, 0, 403, 0,
	359, 0, 0, 0, 0, 0, 346, 387, 349, 378,
	341, 369, 298, 358, 398, 328, 364, 399, 0, 0,
	0, 58, 0, 55, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 393, 324, 295, 408, 0, 367,
	281, 361, 0, 0, 287, 290, 404, 391, 318, 317,
	0, 0, 0, 0, 0, 0, 0, 345, 350, 374,
	338, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 357, 1149, 0, 0, 294,
	288, 0, 343, 0, 0, 0, 297, 0, 315, 375,
	0, 278, 381, 388, 340, 0, 0, 392, 337, 336,
	0, 0, 0, 0, 0, 0, 329, 0, 38, 406,
	395, 347, 386, 312, 323, 0, 319, 0, 0, 0,
	320, 321, 356, 370, 696, 0, 1148, 1137, 1136, 39,
	377, 40, 0, 0, 0, 0, 0, 0, 1138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1139, 0, 286, 279, 316, 379, 382, 302, 366,
	291, 325, 372, 326, 348, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 0, 0, 0,
	41, 285, 306, 389, 0, 0, 0, 1132, 0, 0,
	0, 0, 0, 0, 0, 0, 365, 1144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1150, 1151,
	0, 0, 0, 0, 0, 0, 0, 0, 1146, 0,
	0, 0, 0, 301, 305, 299, 300, 352, 353, 400,
	401, 402, 376, 296, 0, 303, 304, 0, 384, 0,
	0, 0, 355, 0, 0, 0, 407, 1140, 1141, 1143,
	0, 0, 0, 1142, 331, 280, 335, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 0, 0, 339, 334,
	360, 362, 371, 380, 390, 397, 373, 36, 37, 394,
	383, 0, 342, 396, 310, 330, 405, 332, 333, 368,
	289, 351, 0, 327, 308, 0, 0, 0, 313, 282,
	322, 283, 311, 344, 0, 309, 0, 385, 354, 0,
	0, 0, 403, 0, 359, 0, 0, 0, 0, 0,
	346, 387, 349, 378, 341, 369, 298, 358, 398, 328,
	364, 399, 0, 0, 0, 35, 0, 0, 0, 0,
	0, 0, 696, 0, 1148, 1137, 1136, 363, 393, 324,
	295, 408, 0, 367, 281, 361, 1138, 0, 287, 290,
	404, 391, 318, 317, 0, 0, 0, 0, 0, 1139,
	0, 345, 350, 374, 338, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 357,
	1149, 0, 0, 294, 288, 0, 343, 0, 0, 0,
	297, 0, 315, 375, 0, 278, 381, 388, 340, 0,
	0, 392, 337, 336, 0, 745, 744, 0, 0, 0,
	329, 0, 38, 406, 395, 347, 386, 312, 323, 0,
	319, 0, 0, 746, 320, 321, 356, 370, 0, 0,
	0, 0, 0, 39, 377, 40, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 279, 316,
	379, 382, 302, 366, 291, 325, 372, 326, 348, 307,
	0, 0, 0, 0, 0, 1144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1150, 1151, 0, 0,
	0, 0, 0, 0, 0, 0, 1146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1140, 1141, 1143, 0, 0,
	0, 1142, 0, 0, 747, 0, 0, 0, 0, 0,
	0, 0, 1468, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 41, 285, 306, 389, 0, 0,
	0, 0, 0, 696, 0, 1148, 1137, 1136, 0, 0,
	365, 0, 0, 0, 0, 0, 0, 1138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 301, 305, 299,
	300, 352, 353, 400, 401, 402, 376, 296, 0, 303,
	304, 0, 384, 0, 0, 0, 355, 0, 0, 0,
	407, 0, 0, 0, 0, 0, 0, 0, 331, 280,
	335, 0, 0, 0, 0, 0, 562, 0, 292, 293,
	0, 0, 339, 334, 360, 362, 371, 380, 390, 397,
	373, 36, 37, 561, 0, 0, 0, 0, 560, 0,
	0, 0, 0, 0, 0, 606, 0, 607, 1149, 0,
	0, 0, 0, 0, 0, 597, 598, 0, 0, 0,
	0, 0, 0, 0, 0, 437, 0, 0, 52, 587,
	584, 585, 589, 590, 591, 592, 1132, 0, 0, 588,
	593, 477, 478, 563, 0, 0, 1144, 0, 558, 576,
	0, 0, 605, 0, 0, 0, 0, 1150, 1151, 0,
	0, 0, 0, 0, 0, 0, 0, 1146, 0, 0,
	0, 0, 0, 0, 0, 0, 573, 574, 0, 0,
	0, 0, 622, 0, 575, 0, 0, 1014, 572, 577,
	0, 0, 0, 0, 0, 0, 1140, 1141, 1143, 0,
	0, 0, 1142, 0, 0, 0, 620, 0, 0, 0,
	0, 0, 0, 1301, 0, 38, 0, 0, 0, 0,
	0, 0, 1016, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 40, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 0, 139,
	1021, 0, 140, 141, 142, 144, 143, 1025, 0, 1017,
	0, 1029, 1028, 1030, 1015, 1032, 0, 0, 0, 1036,
	1033, 1035, 1034, 608, 1031, 0, 0, 0, 0, 0,
	0, 0, 0, 1022, 1023, 0, 0, 0, 0, 1149,
	0, 0, 0, 0, 0, 624, 0, 609, 610, 0,
	0, 0, 0, 0, 1024, 1026, 0, 41, 106, 0,
	0, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 0, 0, 0, 1159, 0, 35, 0, 1157, 1299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	611, 621, 617, 618, 615, 616, 614, 613, 612, 623,
	599, 600, 601, 602, 604, 1156, 0, 481, 480, 603,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 37, 619, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 39, 696, 40, 1148, 1137, 1136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 0, 139, 126, 0,
	140, 141, 142, 144, 143, 108, 109, 110, 114, 112,
	111, 113, 85, 87, 0, 83, 86, 92, 88, 89,
	90, 104, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 105, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 0, 0, 0, 0, 0, 562, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 561, 0, 0, 1132, 0,
	560, 0, 0, 0, 0, 0, 0, 606, 1144, 607,
	0, 0, 0, 0, 0, 0, 0, 597, 598, 1150,
	1151, 0, 0, 0, 0, 1724, 0, 437, 0, 1146,
	52, 587, 584, 585, 589, 590, 591, 592, 0, 0,
	0, 588, 593, 477, 478, 563, 1725, 0, 0, 84,
	558, 576, 0, 0, 605, 0, 0, 0, 1140, 1141,
	1143, 0, 0, 0, 1142, 0, 0, 0, 0, 0,
	562, 0, 0, 0, 0, 1118, 0, 0, 573, 574,
	0, 0, 36, 37, 622, 867, 575, 561, 0, 571,
	572, 577, 560, 0, 0, 0, 0, 0, 0, 606,
	0, 607, 0, 0, 0, 0, 0, 0, 620, 597,
	598, 0, 0, 0, 0, 0, 0, 38, 0, 437,
	0, 0, 52, 587, 584, 585, 589, 590, 591, 592,
	0, 0, 0, 588, 593, 477, 478, 563, 39, 0,
	40, 0, 558, 576, 0, 0, 605, 0, 0, 583,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	573, 574, 872, 0, 0, 0, 622, 0, 575, 0,
	0, 571, 572, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 1149, 0, 0, 0, 0, 0, 0, 0, 38,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 0, 0,
	39, 0, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 0, 0, 0, 0, 0, 624, 0, 609,
	610, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 611, 621, 617, 618, 615, 616, 614, 613,
	612, 623, 599, 600, 601, 602, 604, 608, 0, 481,
	480, 603, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 609, 610, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 36, 37, 619, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 611, 621, 617, 618, 615, 616,
	614, 613, 612, 623, 599, 600, 601, 602, 604, 0,
	0, 481, 480, 603, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 561, 0, 0, 0, 0, 560, 0, 0, 0,
	0, 0, 0, 606, 0, 607, 0, 0, 36, 37,
	619, 0, 0, 597, 598, 0, 0, 0, 0, 0,
	0, 0, 0, 437, 0, 748, 52, 587, 584, 585,
	589, 590, 591, 592, 0, 0, 0, 588, 593, 477,
	478, 563, 0, 0, 0, 0, 558, 576, 0, 0,
	605, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 0, 0, 0,
	0, 0, 0, 0, 573, 574, 0, 0, 0, 0,
	622, 0, 575, 561, 0, 571, 572, 577, 560, 0,
	0, 0, 0, 0, 0, 606, 0, 607, 0, 0,
	0, 0, 0, 0, 620, 597, 598, 0, 0, 0,
	0, 0, 0, 38, 0, 437, 0, 0, 52, 587,
	584, 585, 589, 590, 591, 592, 0, 0, 0, 588,
	593, 477, 478, 563, 39, 0, 40, 0, 558, 576,
	0, 0, 605, 0, 0, 583, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 573, 574, 872, 0,
	0, 0, 622, 0, 575, 0, 0, 571, 572, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 0, 0, 0, 0, 39, 0, 40, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 0, 0,
	0, 0, 0, 624, 0, 609, 610, 0, 0, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 611, 621,
	617, 618, 615, 616, 614, 613, 612, 623, 599, 600,
	601, 602, 604, 608, 0, 481, 480, 603, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 624, 0, 609, 610, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 0,
	0, 0, 36, 37, 619, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	611, 621, 617, 618, 615, 616, 614, 613, 612, 623,
	599, 600, 601, 602, 604, 0, 0, 481, 480, 603,
	0, 0, 0, 0, 0, 696, 0, 0, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 561, 0, 0, 0, 0,
	560, 0, 0, 0, 36, 37, 619, 606, 0, 607,
	0, 696, 0, 1148, 1137, 1136, 0, 597, 598, 0,
	0, 0, 0, 0, 0, 1138, 0, 437, 0, 0,
	52, 587, 584, 585, 589, 590, 591, 592, 1139, 0,
	0, 588, 593, 477, 478, 563, 0, 0, 0, 0,
	558, 576, 0, 0, 605, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 0, 0, 0, 0, 0, 0, 0, 573, 574,
	0, 0, 0, 0, 622, 0, 575, 561, 0, 571,
	572, 577, 560, 0, 0, 0, 0, 0, 0, 606,
	0, 607, 0, 0, 0, 0, 0, 0, 620, 597,
	598, 0, 0, 0, 0, 0, 0, 38, 0, 437,
	0, 0, 52, 587, 584, 585, 589, 590, 591, 592,
	0, 0, 0, 588, 593, 477, 478, 563, 39, 0,
	40, 0, 558, 576, 1681, 0, 605, 0, 0, 583,
	0, 0, 0, 0, 1144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1150, 1151, 0, 0, 0,
	573, 574, 0, 0, 0, 1146, 622, 0, 575, 0,
	0, 571, 572, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 0, 0, 0, 1140, 1141, 1143, 0, 0, 38,
	1142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 0, 608, 0, 0, 0, 0,
	39, 0, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 0, 0, 0, 0, 0, 624, 0, 609,
	610, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 611, 621, 617, 618, 615, 616, 614, 613,
	612, 623, 599, 600, 601, 602, 604, 608, 0, 481,
	480, 603, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 609, 610, 0, 0, 0, 0, 1149, 0, 0,
	0, 41, 0, 0, 0, 0, 36, 37, 619, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 611, 621, 617, 618, 615, 616,
	614, 613, 612, 623, 599, 600, 601, 602, 604, 0,
	0, 481, 480, 603, 962, 963, 964, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 607, 0, 0, 0, 0, 0, 0,
	0, 597, 598, 0, 0, 0, 0, 0, 36, 37,
	619, 437, 0, 0, 52, 587, 584, 585, 589, 590,
	591, 592, 0, 0, 0, 588, 593, 477, 478, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 605, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 573, 574, 0, 0, 0, 0, 622, 0,
	575, 0, 0, 571, 572, 577, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 607, 0, 0, 0, 0,
	0, 0, 620, 597, 598, 0, 0, 0, 0, 0,
	0, 38, 0, 437, 0, 0, 52, 587, 584, 585,
	589, 590, 591, 592, 0, 0, 0, 588, 593, 477,
	478, 0, 39, 0, 40, 0, 0, 576, 0, 0,
	605, 0, 0, 583, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 573, 574, 0, 0, 0, 0,
	622, 0, 575, 0, 0, 571, 572, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 608,
	0, 0, 0, 0, 39, 0, 40, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 0, 0, 0, 0,
	0, 624, 0, 609, 610, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 611, 621, 617, 618,
	615, 616, 614, 613, 612, 623, 599, 600, 601, 602,
	604, 608, 0, 481, 480, 603, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 624, 0, 609, 610, 0, 0, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	36, 37, 619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 611, 621,
	617, 618, 615, 616, 614, 613, 612, 623, 599, 600,
	601, 602, 604, 35, 0, 481, 480, 603, 0, 0,
	0, 606, 0, 607, 0, 0, 0, 0, 0, 0,
	0, 597, 598, 0, 0, 0, 0, 0, 0, 0,
	0, 890, 0, 0, 52, 587, 584, 585, 589, 590,
	591, 592, 36, 37, 619, 588, 593, 477, 478, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 605, 0,
	0, 0, 91, 0, 860, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 573, 574, 0, 0, 0, 0, 622, 0,
	575, 0, 0, 571, 572, 577, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 0, 0, 0, 0, 0, 0, 0,
	0, 38, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 39, 0, 40, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 0, 139, 126, 0, 140, 141, 142,
	144, 143, 108, 109, 110, 114, 112, 111, 113, 85,
	87, 0, 83, 86, 92, 88, 89, 90, 104, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	105, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	0, 0, 0, 0, 859, 0, 0, 0, 0, 608,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 624, 0, 609, 610, 696, 0, 1148, 1137, 1136,
	0, 0, 0, 41, 0, 0, 0, 0, 0, 1138,
	0, 0, 0, 0, 696, 0, 1148, 1137, 1136, 0,
	0, 0, 1139, 0, 595, 0, 0, 0, 1138, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 1139, 0, 0, 0, 0, 611, 621, 617, 618,
	615, 616, 614, 613, 612, 623, 599, 600, 601, 602,
	604, 0, 0, 481, 480, 603, 0, 0, 745, 744,
	0, 696, 0, 1148, 1137, 1136, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 1138, 746, 745, 744, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1139, 0,
	36, 37, 619, 0, 0, 746, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1144, 0,
	0, 0, 0, 0, 745, 744, 0, 1132, 0, 1150,
	1151, 0, 0, 0, 0, 0, 0, 1144, 0, 1146,
	0, 0, 746, 0, 0, 0, 0, 0, 1150, 1151,
	0, 0, 0, 0, 0, 0, 0, 0, 1146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1140, 1141,
	1143, 0, 0, 0, 1142, 0, 0, 747, 0, 0,
	0, 0, 0, 0, 1132, 1468, 0, 1140, 1141, 1143,
	0, 0, 0, 1142, 1144, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 1468, 1150, 1151, 0, 0, 0,
	0, 0, 0, 0, 0, 1146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1140, 1141, 1143, 0, 0, 0,
	1142, 0, 0, 747, 0, 0, 0, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1149,
}

var yyPact = [...]int16{
	550, -1000, -257, -1000, -1000, 1400, 2604, 405, -1000, -1000,
	-1000, 2411, 508, 498, 493, 201, 482, 937, 2355, 2697,
	521, 456, -1000, -203, -165, -1000, -86, 513, -1000, 1209,
	-1000, 4341, 4341, 4341, 4341, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 328, 937, 937, 456, 121, 456, 1415, 404,
	1413, 742, -1000, -1000, 586, -1000, 1539, 585, -1000, -1000,
	456, 2697, 734, -1000, -1000, -1000, -1000, 2043, 204, 1949,
	2980, -147, -6, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1316, 55, 1399, 1316, 1399,
	-1000, 1316, 1399, 34, 34, 34, 34, 34, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1398, 1391, -1000, 1316, 1316,
	1316, 1316, 1316, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1389, 1316, 1319, 85, 1326, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2980, 2980, 2980, 1396, 2697,
	937, 1412, 1411, 2697, -197, 2697, 2697, 1593, -1000, -1000,
	-1000, 161, 2697, 1513, 5874, 4341, 7410, 2697, -1000, 1503,
	529, 2697, 5106, -1000, 1471, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1388, 828, 937, 334, 115, 1297, 457, 453,
	397, 1036, 313, -1000, -1000, -1000, 849, -1000, 937, -1000,
	1621, -1000, -1000, 312, -1000, 311, 700, 932, 2697, 1374,
	195, 1373, 2088, 906, -1000, -261, -1000, -9, -1000, 34,
	859, 1316, -1000, 34, 880, 34, 34, -1000, -1000, 610,
	1480, 610, 610, 610, 610, 930, 930, -117, -117, -1000,
	-1000, -1000, 886, -1000, -1000, 885, 1319, -1000, -1000, 883,
	2697, 937, 1372, 1410, 2697, 2697, 1538, 469, -1000, -1000,
	1537, 1533, 1264, -1000, -1000, 141, -1000, -1000, 404, 937,
	-1000, 583, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1288, -1000, 450, 524, 6258, 204, -1000, -1000,
	-1000, -1000, -1000, 486, -1000, 1642, 1556, 353, 57, -173,
	1022, -1000, -1000, 1371, -1000, -1000, 9661, -1000, 1016, 1005,
	-1000, 993, 991, 32, 937, -1000, -178, 108, -23, -1000,
	-1000, 1297, -1000, 1369, 9661, 1528, -1000, 1485, 650, -1000,
	339, -1000, -248, -1000, -1000, 766, -1000, -248, -1000, -1000,
	-1000, 1297, -1000, 1367, 1366, -1000, 1365, -1000, -1000, 1297,
	1297, 1297, 576, -1000, -1000, -1000, -1000, -1000, 610, 1257,
	34, 610, 1256, 1253, 610, 610, -1000, -1000, 956, 692,
	-1000, -1000, -1000, -1000, 1205, -1000, 1192, -1000, 76, 69,
	-1000, 1248, 1291, -1000, 1189, 1296, 1408, 2486, 2697, 1364,
	1357, 1323, 456, 1323, 1555, 254, 2697, 1593, 423, 1593,
	404, 6642, 937, 306, 937, -1000, -1000, 400, 4722, -1000,
	-1000, 1167, -1000, 242, 1316, 9661, 537, 537, -192, 308,
	292, -173, 1297, 1355, -1000, 486, 589, -1000, 9661, 251,
	1297, 1297, 1297, 1297, 9569, -1000, -1000, 555, -1000, -1000,
	-1000, 10085, 10085, 10085, 10085, 10085, 10085, 10085, -1000, -1000,
	-1000, -1000, 4, -1000, -248, -1000, 922, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 575, 573, -1000, 1297, 1297, 1297,
	1297, 1297, 1297, 1297, 1297, 9661, 1297, 1464, 1297, 1297,
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 3622,
	1297, 1297, 1297, 1297, -1000, -1000, -1000, -1000, -1000, -1000,
	-173, 1354, -1000, -1000, -1000, 700, -1000, 9661, 423, 774,
	145, -1000, 1290, -1000, 881, 1246, 1684, 1245, -1000, 10372,
	-1000, -1000, -1000, 1035, -1000, 856, -1000, 781, 1241, 8781,
	9217, 9217, 6642, -1000, -1000, 610, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 34, 921, 34, -11, -12, -1000,
	879, -1000, 878, 2486, 937, 2697, 1235, 1287, -1000, 230,
	1350, 423, 486, -1000, 1576, 1629, -1000, 1323, 2697, -1000,
	466, 1610, -1000, -1000, 1554, -1000, 1285, -1000, -1000, 1268,
	1593, -1000, 1349, 937, -1000, -1000, 342, 937, -1000, -1000,
	-1000, -1000, -1000, 3989, 486, 1510, -1000, -1000, -1000, 745,
	819, -1000, -1000, 749, 215, 813, -1000, 937, -173, 1348,
	9661, 486, 1164, 218, 9661, 9661, 762, -1000, -1000, 304,
	9993, 821, 691, 10085, 10085, 10085, 10085, 10085, 10085, 10085,
	10085, 10085, 10085, 10085, 10085, 10085, 10085, 10085, 927, 3213,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 954, -1000, 1323, 2506, 1035, 1035, 1035, 1157,
	9569, 329, 2416, 2416, 21, 9569, 21, 21, 21, 21,
	21, 89, -1000, -259, -1000, -1000, 5874, 6642, 9217, 9217,
	8157, 9661, 9217, 9217, 9217, 1542, 728, 329, 2506, 1551,
	1035, 1035, 1035, 1035, -1000, 1035, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 54, -1000, -1000, -1000, -1000, -1000,
	-1000, 9217, 9217, 9217, 9217, -1000, 937, 1297, 589, 1161,
	-129, 9661, 1346, 650, -1000, -1000, 1230, -248, -1000, -1000,
	-1000, -147, -1000, -1000, -1000, -1000, 1035, 9217, 1105, 1157,
	-1000, 672, -1000, 568, 1105, 672, 1105, 1297, -1000, 610,
	-1000, 610, -1000, -1000, 1229, 1220, 1210, 1345, 1333, -207,
	859, 2486, 1136, 1134, 1559, 1579, 1323, 1531, 1452, -1000,
	1035, 1525, 937, -1000, -1000, -1000, -1000, -1000, 232, 727,
	937, 8579, 1227, -1000, 335, 1330, 120, 382, 1331, 4644,
	172, -1000, 940, 711, 918, 710, 709, 702, 698, 695,
	687, 683, 665, 664, 646, -1000, -1000, -1000, -1000, 1510,
	-1000, 1619, -1000, -1000, -1000, 1602, 1328, 1327, 486, 589,
	1117, 3989, -1000, -95, 304, 355, -1000, -1000, 839, -1000,
	-1000, 2481, 10085, 10085, 10085, -1000, -1000, -1000, -1000, 821,
	10085, 10085, 10085, 48, 2481, 2744, 1286, 850, 21, 33,
	33, 61, 61, 61, 61, 61, 183, 183, -1000, -1000,
	-1000, -108, -1000, 1035, 1035, -1000, -1000, -1000, -1000, 9661,
	-1000, 1035, -1000, -248, 912, -1000, -1000, 911, 1297, -1000,
	1105, 1105, 359, 1283, 10403, 1316, -1000, 1316, 1326, 1319,
	-1000, 85, -1000, -1000, 94, 1316, 93, 1316, 1316, 1316,
	-1000, -1000, 1316, 1316, -1000, 1316, 1316, 608, 1266, 1262,
	1105, 9217, -1000, 693, -1000, 9661, 1035, 2697, -1000, -1000,
	-1000, -1000, -1000, -1000, 1105, 1035, 1281, 1105, 1105, 1109,
	-1000, 9661, 218, 1404, -1000, -1000, 679, -1000, 1139, 1067,
	-1000, -1000, 1105, 9217, -255, -1000, -1000, -1000, 928, -1000,
	-1000, 4338, -255, -255, 9217, -1000, -1000, -1000, -1000, -207,
	2486, 486, 1588, 1325, 1058, 1588, 3989, 1517, 9661, 9661,
	1576, -1000, 1323, -1000, -1000, 1542, -1000, -1000, 756, -1000,
	1323, 1219, 196, 109, 9661, -1000, 8087, -1000, 8579, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1576, 9661, -1000, -1000, -1000, -1000, -1000, 937, 2822,
	937, 937, 937, 413, 9661, 939, 9661, -1000, -1000, -1000,
	-1000, -1000, 2697, 1054, 8415, 335, 335, 8415, 335, 335,
	486, 486, 1322, 1321, 285, -1000, 937, -1000, -121, 4644,
	937, -1000, 842, -1000, -1000, 818, 832, 818, 818, 818,
	818, 818, 237, 808, 473, -1000, 537, 537, 937, 486,
	1091, 218, 3989, 1331, -1000, -1000, -1000, -1000, 2481, 2481,
	2481, -1000, 48, 2481, 1474, -1000, 10085, 10085, 68, -1000,
	-1000, 329, -1000, 83, -1000, -248, -1000, -1000, 3974, 927,
	9661, -1000, 245, -1000, -1000, -1000, 1319, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3974, 10085, 10085,
	10085, 10085, -100, 1226, 721, -1000, 9661, 422, -1000, -1000,
	-1000, -1000, -1000, -1000, 378, 937, 589, -1000, 1616, -136,
	566, -1000, -1000, -1000, -1000, -1000, 1297, -1000, -1000, 560,
	-1000, -1000, 1035, 1588, 1050, 1078, 3989, 9661, 423, -207,
	3989, -1000, -1000, 1614, 613, 826, 1279, -1000, 556, 1559,
	1035, 1407, -1000, -1000, -111, 9661, 8579, 7568, 329, 7568,
	-1000, 8579, 2243, 1559, 10679, 405, 1860, 2011, 1278, 374,
	-1000, 3160, 917, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 937, 1599,
	1597, 1596, 1595, 10755, 9661, 9661, -1000, 1550, -1000, -1000,
	8415, -1000, -1000, -1000, -1000, -1000, 1071, 1062, 486, 486,
	1318, 1297, 1045, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 700, 700, 1034, 1029, 3989, -1000, 1331, -1000,
	-1000, 10085, 2481, 2481, -17, -1000, 911, -1000, 1035, 1316,
	1035, 509, -1000, -1000, -1000, 1035, 2184, 1329, 751, 267,
	1297, -93, -1000, 329, 9661, 2697, -1000, 218, 537, 537,
	-1000, -1000, -1000, 171, 741, 650, 650, 790, 50, -1000,
	1578, 571, 5490, -1000, 3989, 1588, 3989, 1331, 329, 1021,
	1588, 1331, -1000, 1462, 9661, 9661, 9661, -1000, 1517, -1000,
	9217, -1000, -1000, -252, 329, 8087, 4880, -1000, -1000, 281,
	7184, -1000, 1517, 8579, 673, -1000, 715, -1000, 7568, 1575,
	2697, 1028, -1000, 1222, 1658, -1000, -1000, -1000, 1522, 442,
	430, 937, 187, 4341, -1000, -1000, 1277, 3570, -45, -1000,
	-1000, -1000, 634, 559, 916, -1000, 1476, -1000, -1000, 2822,
	1498, -1000, -1000, -1000, -1000, -1000, 7568, -1000, 1272, 1035,
	727, 200, -1000, 307, 1015, 1013, 486, 937, -1000, 4644,
	-1000, -1000, 364, 3989, 1331, -1000, 2481, -1000, -1000, -1000,
	-1000, -1000, 10085, -1000, -1000, 10085, -1000, 10085, -1000, 10085,
	-1000, 10085, 10085, 1035, 776, 329, 1311, -1000, -1000, -1000,
	650, -1000, 650, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1940, -1000, 1562, 1035, -1000, 1331, 3989, -1000, -1000, -1000,
	3989, -1000, 1456, 329, 329, -1000, -1000, 1207, 9661, 6800,
	-1000, -1000, -1000, -1000, 2726, 9605, 436, 2643, 270, 2697,
	-1000, 270, 1076, 2011, 2697, -1000, -1000, 2506, 2011, 2011,
	2011, 2011, 2011, -1000, 1441, 1435, -1000, 1429, 1427, 1444,
	2697, 983, 442, 612, 1297, -1000, 2815, -1000, -1000, -1000,
	1522, 1549, -1000, 3954, 1277, -45, 1276, -1000, -32, -29,
	8689, 6642, 610, -1000, -1000, -1000, -1000, -1000, 937, 2402,
	-1000, 106, 191, 114, -1000, 131, 3989, 3989, 978, 1035,
	-1000, 2697, 1331, -1000, 2247, 2247, 2247, 2247, 2247, 360,
	-1000, -1000, 937, -1000, -1000, -1000, 547, 9661, -1000, -1000,
	-1000, 1331, -1000, 1588, 2011, 329, -1000, -1000, 5648, -1000,
	-1000, 9661, -1000, 9661, 7568, -1000, 1070, 1297, -1000, 1588,
	2011, 1088, -1000, 1095, -1000, 631, 1658, 1315, 1403, 2222,
	-1000, -1000, -1000, -1000, 1430, -1000, 1426, -1000, -1000, -1000,
	-1000, -114, 488, 487, 475, 937, -1000, 1323, -1000, 1276,
	-45, -35, -1000, -1000, -1000, -1000, 329, 629, -1000, 1275,
	-1000, 7568, -1000, -1000, 127, -1000, 1331, 1331, -1000, -1000,
	1310, -1000, -1000, -1000, -1000, -1000, -1000, 1035, 198, -124,
	972, 6642, 981, -1000, 329, -1000, 1584, 1274, 406, 8579,
	7856, 10698, 1317, 2506, 1297, -1000, 7026, 937, 1576, 1088,
	-1000, 1588, 2506, 9661, -1000, -1000, 9661, 1306, -1000, 9661,
	-1000, -1000, -1000, -1000, 1298, 1297, 1297, 1297, 968, -1000,
	-1000, -1000, -1000, -40, -41, -1000, 9661, 3728, -1000, -1000,
	-1000, -1000, 937, -1000, 1455, -105, -132, -1000, -1000, -1000,
	1035, 9661, 1582, 1561, -1000, 2499, 673, -1000, -1000, 1490,
	1179, 1269, -1000, -1000, 9125, 1035, 970, -1000, -1000, 539,
	-1000, -1000, 968, 1559, -1000, 1576, -1000, 329, 329, 423,
	329, -164, 423, 423, 423, 490, 937, -1000, -1000, -1000,
	329, 6416, 966, -1000, 1451, -1000, -1000, -1000, -1000, 9661,
	9661, 6032, 283, -1000, 1297, -1000, -1000, 1224, 7794, 937,
	-1000, -1000, 1559, 953, 946, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 944, 944, 944, 612, -1000, -1000,
	-1000, -112, 329, 1272, 401, 1612, -1000, 1297, -1000, 1323,
	-1000, -1000, -1000, -1000, -1000, -164, -1000, -1000, -1000, -114,
	-135, -1000, 2506, 1269, 1035, -1000, -1000, -155, 1263, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 1938, 4, 42, 1932, 1931, 1930, 1929, 1927, 1925,
	1924, 1922, 1912, 1907, 1906, 27, 25, 53, 36, 49,
	1905, 1902, 1901, 1900, 1899, 96, 1898, 1896, 1895, 1893,
	109, 1892, 1891, 1889, 1887, 84, 110, 97, 118, 1650,
	38, 39, 46, 59, 1881, 26, 1879, 1875, 62, 1874,
	48, 1868, 1866, 75, 1864, 1856, 6, 29, 113, 120,
	76, 1855, 1851, 108, 2144, 1850, 1848, 94, 1846, 1842,
	101, 21, 68, 5, 13, 8, 1839, 334, 1, 1837,
	104, 93, 1824, 1822, 1821, 31, 1820, 64, 74, 7,
	61, 1818, 9, 17, 85, 51, 11, 15, 2, 60,
	40, 1817, 23, 47, 24, 1816, 69, 1813, 122, 54,
	73, 14, 1358, 0, 41, 99, 1812, 1807, 1806, 1016,
	98, 50, 16, 63, 78, 1805, 81, 112, 57, 111,
	1804, 1795, 1790, 1785, 80, 88, 77, 72, 1782, 1780,
	1777, 1776, 1772, 102, 1770, 83, 796, 130, 91, 28,
	1763, 1761, 105, 323, 82, 107, 328, 917, 92, 1755,
	1753, 1751, 1742, 119, 1741, 66, 114, 30, 454, 1740,
	1739, 1738, 1737, 1736, 1735, 1734, 115, 1733, 100, 200,
	90, 695, 52, 1731, 1728, 1725, 1724, 86, 1720, 1712,
	1709, 71, 1701, 1699, 106, 67, 128, 116, 124, 1698,
	1697, 79, 89, 1696, 121, 123, 1695, 117, 55, 37,
	488, 58, 1694, 1692, 1690, 10, 3, 1689, 1684, 1683,
	1682, 1681, 1680, 65, 1679, 103, 1674, 22, 1672, 1668,
	56, 1664, 1657, 1649, 1646, 1644, 446, 1129, 1641, 87,
	131, 1637, 129,
}

var yyR1 = [...]uint8{
	0, 232, 233, 233, 1, 1, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
	21, 235, 235, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 28, 28, 7, 8, 8, 8, 238, 238,
	48, 48, 95, 95, 9, 9, 9, 9, 10, 10,
	212, 212, 211, 213, 213, 11, 11, 11, 11, 11,
	206, 206, 206, 206, 206, 12, 12, 209, 209, 209,
	15, 15, 15, 15, 16, 16, 17, 17, 17, 19,
	19, 100, 100, 104, 104, 104, 105, 105, 105, 105,
	224, 224, 125, 125, 234, 234, 239, 239, 239, 239,
	239, 239, 239, 204, 204, 204, 204, 205, 205, 205,
	205, 207, 207, 208, 208, 208, 208, 208, 208, 210,
	210, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 13, 13, 29, 29, 72, 72, 14, 110,
	110, 185, 185, 185, 186, 186, 186, 186, 186, 186,
	188, 188, 189, 189, 117, 117, 190, 190, 24, 170,
	171, 171, 171, 171, 171, 171, 171, 171, 157, 157,
	157, 157, 128, 128, 128, 128, 128, 128, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 196, 196, 196,
	196, 196, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 198, 199, 200, 192, 192, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 147, 147, 147, 147, 147, 147, 191, 191,
	187, 187, 187, 187, 130, 130, 130, 130, 130, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 138,
	135, 135, 139, 136, 136, 140, 142, 143, 143, 154,
	154, 155, 155, 155, 137, 137, 141, 131, 131, 131,
	131, 131, 131, 131, 131, 129, 129, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 144,
	144, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	156, 156, 145, 145, 146, 146, 146, 153, 153, 153,
	150, 150, 151, 151, 152, 152, 152, 148, 148, 148,
	149, 149, 149, 159, 181, 181, 181, 183, 183, 184,
	184, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 169, 169, 201, 201, 202,
	202, 203, 203, 180, 180, 180, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 168, 168,
	178, 178, 179, 179, 176, 176, 176, 176, 177, 163,
	163, 163, 163, 163, 164, 164, 165, 165, 165, 165,
	160, 160, 161, 161, 162, 162, 194, 194, 194, 228,
	228, 228, 228, 228, 228, 229, 229, 195, 195, 166,
	166, 167, 167, 174, 174, 174, 174, 240, 240, 172,
	172, 172, 173, 173, 173, 241, 25, 26, 26, 27,
	27, 27, 32, 32, 32, 30, 30, 31, 31, 37,
	37, 36, 36, 38, 38, 38, 38, 116, 116, 116,
	115, 115, 225, 225, 225, 225, 225, 40, 40, 41,
	41, 42, 42, 43, 43, 43, 215, 215, 214, 214,
	216, 216, 216, 216, 216, 216, 216, 216, 55, 55,
	92, 92, 92, 96, 96, 44, 44, 44, 44, 45,
	45, 46, 46, 47, 47, 123, 123, 122, 122, 122,
	121, 121, 49, 49, 49, 51, 50, 50, 50, 50,
	52, 52, 54, 54, 53, 53, 56, 56, 56, 56,
	57, 57, 94, 94, 39, 39, 39, 39, 39, 39,
	39, 39, 107, 107, 59, 59, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 69, 69, 69, 69, 69, 69, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 35,
	35, 70, 70, 70, 77, 71, 71, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 67, 67, 67, 67, 67, 67,
	67, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 242, 242, 68, 68, 68, 68,
	33, 33, 33, 33, 33, 124, 124, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 127, 127, 127, 127, 127, 127, 127,
	127, 81, 81, 34, 34, 79, 79, 80, 109, 109,
	82, 82, 78, 78, 78, 78, 217, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 60, 60, 83,
	83, 84, 84, 226, 226, 227, 85, 85, 86, 86,
	87, 88, 88, 88, 89, 89, 89, 89, 90, 90,
	90, 62, 62, 62, 62, 62, 62, 91, 91, 93,
	93, 93, 93, 97, 97, 73, 73, 75, 75, 74,
	76, 98, 98, 102, 99, 99, 103, 103, 103, 103,
	103, 22, 23, 101, 101, 101, 118, 118, 118, 108,
	108, 106, 106, 113, 114, 114, 114, 114, 114, 119,
	119, 119, 120, 120, 218, 218, 218, 219, 219, 219,
	220, 220, 221, 222, 222, 223, 231, 231, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	112, 112, 112, 112, 112, 112, 236, 237,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 3, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 10, 1, 1, 5, 5, 3, 5, 3, 1,
	3, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 4, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 4, 1, 1, 0, 1, 2, 0,
	3, 0, 2, 2, 0, 2, 2, 2, 2, 2,
	0, 2, 0, 3, 0, 1, 0, 2, 4, 4,
	0, 1, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 1, 2, 2,
	3, 2, 4, 2, 4, 2, 2, 3, 2, 3,
	2, 7, 9, 3, 3, 6, 9, 9, 6, 6,
	8, 8, 5, 8, 7, 4, 0, 2, 4, 6,
	2, 4, 2, 1, 1, 2, 1, 2, 2, 1,
	1, 1, 3, 1, 2, 1, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 2, 3, 1, 3, 0, 2,
	0, 2, 2, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 3, 0, 1, 0,
	5, 0, 3, 5, 1, 1, 1, 1, 3, 3,
	2, 2, 2, 1, 1, 1, 1, 4, 5, 4,
	4, 4, 1, 2, 2, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 3, 0, 3, 0, 3, 3, 0, 3, 3,
	0, 1, 0, 1, 0, 2, 1, 0, 3, 3,
	0, 1, 2, 6, 0, 1, 4, 1, 2, 1,
	3, 2, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 5, 2, 3, 3, 2,
	3, 2, 3, 3, 2, 2, 3, 4, 1, 1,
	1, 1, 1, 3, 3, 2, 2, 4, 1, 2,
	5, 5, 8, 8, 13, 11, 1, 1, 2, 2,
	10, 8, 9, 7, 7, 5, 0, 1, 1, 0,
	1, 1, 1, 2, 2, 1, 2, 0, 3, 0,
	1, 1, 3, 0, 4, 1, 3, 2, 1, 1,
	2, 1, 1, 1, 1, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 3, 6, 4, 7, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 0, 4, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 8,
	1, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 0, 4, 1, 3, 3, 2, 3, 2,
	1, 2, 0, 3, 1, 1, 3, 4, 4, 4,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 4,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 2, 1, 4, 5, 5, 5, 5, 6,
	4, 4, 4, 6, 6, 8, 6, 6, 6, 8,
	6, 8, 6, 8, 6, 8, 9, 7, 5, 4,
	4, 3, 3, 3, 1, 3, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 2, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 2, 2, 2, 1, 1, 2, 2,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	0, 2, 1, 1, 3, 5, 3, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 0,
	3, 0, 2, 1, 3, 1, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 1,
	3, 1, 1, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 5,
	3, 1, 3, 1, 2, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 2, 0, 2, 2,
	0, 1, 4, 1, 3, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -232, -1, -20, -21, -24, 126, 127, -233, 392,
	-170, 58, -228, -229, 277, -190, 135, 148, 168, 169,
	362, 133, 374, 375, 150, 377, 79, -106, 138, -171,
	-157, -113, -112, 63, 36, 61, 387, 388, 148, 169,
	171, 290, 134, 134, 134, 136, 214, 136, -113, -113,
	-78, 139, 61, -112, -119, 63, -53, -119, 61, -112,
	133, -108, 139, 377, 374, 375, 342, 133, 60, 59,
	-158, -128, -130, -129, -132, -131, -133, -113, -138, -139,
	-142, -140, -141, 250, 354, 247, 251, 248, 253, 254,
	255, 120, 252, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 256, 268, 33, 155, 240, 241,
	242, 245, 244, 246, 243, 269, 270, 271, 272, 273,
	274, 275, 276, 277, -134, -135, 233, -136, -137, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 232,
	235, 236, 237, 239, 238, -158, -158, -158, -113, 56,
	213, -113, -113, -108, 215, -108, 56, -204, 19, 193,
	194, 206, 56, 81, 123, 25, 123, -108, -53, 81,
	-53, 306, -174, -240, 357, 37, -157, -159, -163, -160,
	-161, -162, -175, -164, 142, 140, 150, 390, 144, 145,
	277, -168, 146, 134, 151, 73, 81, -196, 142, -199,
	56, 285, 291, 140, 151, 150, 390, 71, 143, 25,
	364, 366, 31, 32, -152, 393, 279, -150, 288, -145,
	58, -144, 249, -146, 58, -145, -146, -145, -146, -148,
	251, -148, -148, -148, -148, 58, 58, -145, -145, -145,
	-145, -145, 58, -145, -154, 58, -143, 234, -155, 58,
	56, 57, -53, -113, 56, 56, -53, -224, 387, 388,
	-53, -53, -207, -205, 8, 9, 10, 207, -53, 26,
	-114, -120, -113, 299, 147, -111, -112, -119, 131, 194,
	365, 80, 25, 27, 285, 291, 193, 84, 120, 16,
	85, 200, 374, 375, 119, 76, 343, 126, 52, 335,
	336, 333, 198, 345, 346, 334, 292, 205, 20, 31,
	10, 28, 153, 24, 113, 128, 195, 89, 88, 156,
	160, 161, 26, 154, 75, 201, 203, 19, 55, 146,
	11, 364, 13, 14, 379, 366, 139, 138, 100, 378,
	134, 50, 8, 122, 29, 97, 46, 151, 204, 48,
	98, 17, 337, 338, 34, 352, 162, 115, 53, 40,
	380, 81, 381, 73, 56, 306, 199, 79, 15, 51,
	163, 382, 202, 386, 99, 129, 342, 170, 49, 196,
	383, 132, 197, 6, 348, 33, 152, 47, 133, 293,
	384, 87, 137, 74, 5, 150, 9, 385, 54, 57,
	339, 340, 341, 38, 86, 12, 149, 356, 77, -128,
	-120, -111, -53, 26, 131, -53, -172, 59, -114, 71,
	-111, -112, 36, 58, -195, 56, 81, -166, -113, 151,
	-168, 61, 134, -194, 374, 375, -236, 58, -168, -168,
	61, 134, 151, 61, 151, 73, 19, -113, 9, 151,
	151, -195, 63, -53, 58, -192, 365, 16, 58, -197,
	58, -198, 63, 64, 65, 110, 66, 73, -147, 72,
	-59, 280, -67, 333, 336, 335, 281, 74, 75, -113,
	351, 350, -119, -200, 65, 394, -151, 289, -148, 65,
	-145, -148, 65, 61, -148, -148, -149, 120, 119, 33,
	-149, -149, -149, -149, -156, 63, -156, -153, 356, 357,
	-153, 65, 65, -154, 65, -53, -113, 58, 56, -53,
	-53, 25, 136, 25, -185, 25, 56, 59, 207, -204,
	-113, 123, 57, -117, 142, -163, 150, 131, 90, -114,
	-240, -179, -176, -113, 151, 58, 10, 9, 19, 146,
	140, 150, 390, -194, 61, 58, -39, -58, 81, -64,
	31, 26, 9, 76, -236, -63, -59, -78, -217, -76,
	-77, 120, 121, 109, 110, 117, 82, 122, -67, -65,
	-66, -68, -220, 180, 63, 64, -113, 62, 72, 65,
	66, 67, 68, 73, -119, 311, -74, 48, 49, 343,
	344, 345, 346, 352, 347, 85, 38, 40, 256, 280,
	281, 333, 341, 340, 339, 337, 338, 335, 336, 389,
	139, 334, 115, 342, 278, 61, 61, 61, 61, -194,
	150, -166, -113, 376, -196, 390, -147, -236, 58, -39,
	25, 31, -60, 65, 110, -197, 58, -198, -187, 389,
	65, 66, -187, -236, -145, 58, -145, 58, 58, -236,
	-236, -236, 123, -149, 60, -148, -149, 60, 60, -149,
	-149, 61, 61, 120, 60, 59, 60, 240, 240, 60,
	59, 60, 59, 58, 57, 56, -178, -179, -67, -113,
	-53, 58, 58, -2, -3, -4, 6, -236, -108, -2,
	-186, 19, 177, 178, -53, -205, -92, -113, 151, -207,
	-204, -114, -113, -235, 134, 151, -113, 142, -163, -173,
	-114, 63, 65, 60, 59, -145, -177, 283, -145, -39,
	-165, 173, 174, 33, 175, -165, 376, 151, 151, -194,
	-236, 58, -179, -237, 80, 79, 97, 208, 60, -39,
	-61, 100, 81, 98, 99, 84, 106, 105, 116, 109,
	110, 111, 112, 113, 114, 115, 107, 108, 119, 389,
	90, 91, 92, 93, 94, 95, 96, 101, 102, 103,
	104, -107, -236, -77, -236, -236, -236, -58, -2, -71,
	-236, -39, 124, 125, -64, -236, -64, -64, -64, -64,
	-64, -64, -221, 279, -187, 63, 123, 123, -236, -236,
	-236, -236, -236, -236, -236, -236, -81, -39, -236, 41,
	-236, -236, -236, -236, -242, -236, -242, -242, -242, -242,
	-242, -242, -127, 120, 251, 155, 242, -134, -129, 257,
	256, -236, -236, -236, -236, -194, 58, -195, -39, -92,
	60, 58, 366, 59, 65, 60, -197, 63, 60, 282,
	122, -128, -237, 60, 60, 60, -37, 24, -36, -71,
	-38, -39, 111, -119, -36, -39, -36, -114, -149, -148,
	63, -148, 290, 290, 65, 65, -178, -113, -53, 60,
	58, 58, -92, -179, -85, 15, -27, 5, -25, -241,
	-2, -53, 137, 21, 6, 8, 9, 10, 19, -110,
	59, 25, -207, -234, 58, -113, 150, -113, -181, -183,
	356, -182, 57, 147, 71, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 61, -176, -88, 27, 28, 60,
	-195, 56, 73, 176, -195, 56, -166, -194, 58, -39,
	-179, 60, -191, 175, -39, -39, -69, 73, 81, 74,
	75, -64, 21, 22, 23, -70, -74, -77, 69, 100,
	98, 99, 84, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -124, 61,
	63, 241, -127, 61, -78, -113, -237, -237, -237, 59,
	-237, -2, -63, 63, -113, -63, -113, 393, -114, -114,
	-36, -36, -39, -126, 120, 247, 155, 242, -136, -135,
	-137, 233, 266, 267, 287, 240, 288, -134, 245, 244,
	246, 257, 248, 253, 255, 254, 252, -39, -38, -38,
	-36, -30, 24, -79, -80, 86, -78, 19, -237, -237,
	-237, -237, -237, 249, -36, -37, -36, -36, -36, -167,
	-113, -236, -237, 60, 362, 363, -39, 58, -60, 60,
	-152, -237, -36, 59, -237, -237, -116, -115, 25, -113,
	63, 123, -237, -237, -236, -149, -149, 60, 60, 60,
	58, 58, -94, 378, -178, 60, 60, -89, 17, 16,
	-5, -3, -236, 21, 24, -32, 44, 45, -26, -237,
	25, -167, 195, -109, 86, -113, -208, -210, 216, -18,
	-15, -6, -8, -7, -10, -9, -11, -12, -13, -14,
	-22, -3, 139, -16, -17, -28, 10, 9, 20, 33,
	199, 200, 205, 201, 149, -29, 170, -23, 8, 342,
	160, 161, 56, -239, -113, 109, 90, 63, -157, 59,
	58, 58, 374, 375, 140, -180, 56, -182, 356, 58,
	358, 61, -169, 90, 63, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, -88, 9, 10, 58, 58,
	-179, -237, 60, -181, 349, 73, 74, 75, -64, -64,
	-64, -70, -64, -64, -64, -35, 156, 80, 356, -237,
	-237, -39, -237, -222, -223, 63, -237, -237, 59, 57,
	59, -145, -145, -145, -155, -154, -143, 227, -145, 227,
	-145, -145, -145, -145, -145, -145, -145, 25, 59, 11,
	59, 11, -237, -36, -82, -80, 89, -39, -237, -119,
	-237, -237, -237, -237, 60, 59, -39, -191, 56, 60,
	-193, 60, 60, -237, -38, -225, 391, -115, 111, -120,
	-225, -225, -37, -94, -178, -179, -57, 12, 58, 60,
	-57, -181, -90, 19, 34, -39, -86, -87, -39, -85,
	-2, -30, 70, -2, -188, 57, 196, 216, -39, 392,
	-210, 216, -208, -85, -39, -25, -25, -25, -212, -113,
	-211, -25, -231, -230, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, -113, -113, -113, -206, 40,
	202, 203, 204, -39, -113, -236, -81, -53, 60, -239,
	-113, -239, -239, -239, -239, -239, -179, -179, 58, 58,
	151, -113, -184, -182, -113, 65, -201, 56, 77, 65,
	-201, -201, -201, -201, -201, -202, 191, 192, 65, -203,
	-202, 65, -165, -165, -167, -179, 60, -191, -181, -180,
	-35, 80, -64, -64, 240, 394, 59, -187, -126, 120,
	-124, -39, -148, 61, -154, -126, -64, -64, -64, -64,
	353, -85, 88, -39, 87, 143, -113, -237, 10, 9,
	362, 363, 60, 217, 368, 369, 162, 370, 175, 371,
	372, -236, 123, -237, -57, 60, 60, -181, -39, -92,
	-94, -181, 9, 100, 59, 18, 59, -88, -89, -237,
	-31, 47, -189, 356, -39, -208, -209, -210, -210, -208,
	392, 88, -89, 87, -19, -15, -16, -18, 216, -106,
	11, -48, -53, -41, -42, -43, -44, -55, -77, -236,
	-53, 59, -213, -123, 197, 25, -99, -125, 218, -103,
	301, 300, -114, 311, -101, 299, 251, 298, -201, 59,
	-113, 11, 11, 11, 11, -210, 216, -72, -71, -72,
	-110, 19, 60, 60, -179, -179, 58, -236, 60, 59,
	-195, -195, 60, 60, -181, -180, -64, 290, -223, -237,
	-237, -237, 59, -237, -237, 59, -237, 19, -237, 59,
	-237, 19, -236, -34, 348, -39, -53, -191, -165, -165,
	356, -60, 16, -60, -60, -60, 65, 369, 162, 371,
	16, -237, 163, -85, 111, -181, -57, -181, -180, 60,
	-57, -180, 42, -39, -39, -87, -90, -36, 390, 392,
	-210, 88, 88, -90, -208, 89, 89, -209, -54, 29,
	-53, -53, -48, -238, 59, 11, 57, 33, 59, -49,
	-51, -50, -52, 46, 50, 52, 47, 48, 49, 53,
	-123, -41, -236, -122, 163, -121, 25, -119, 63, -211,
	-113, 198, -128, 59, -99, 218, -100, -104, 302, 304,
	90, 123, -118, -113, 63, 31, 33, -230, 29, -209,
	-237, -109, 195, -218, 209, 81, 60, 60, -179, -113,
	-182, 143, -181, -180, -64, -64, -64, -64, -64, -64,
	-237, 63, 58, -60, -60, 373, -119, 16, -237, -180,
	-181, -181, 43, -40, 11, -39, 88, -210, 392, -16,
	-19, 139, -17, 139, 392, 88, -95, 163, -53, -95,
	57, -41, -53, -98, -102, -78, -42, -43, -43, -42,
	-43, 46, 46, 46, 51, 46, 51, 46, -50, -119,
	-237, -56, 54, 138, 55, -236, -121, 19, -103, -100,
	59, 303, 305, 306, 56, 77, -39, -114, -149, -167,
	88, 216, 196, -219, 210, 209, -181, -181, 60, -237,
	-53, -180, -237, -237, -237, -237, -237, -33, 100, 356,
	-167, 123, -226, -227, -39, -180, -57, -41, 88, 89,
	-39, -39, -62, 33, 38, -2, -236, -236, -57, -41,
	-57, -40, 59, 90, -46, -45, 56, 57, -47, 56,
	-45, 46, 46, -215, 356, 134, 134, 134, -96, -113,
	-2, -104, -105, 307, 304, 310, 90, -209, 212, 211,
	-180, -180, 58, -237, 354, 53, 359, 60, -114, -237,
	-85, 59, -83, 13, 139, -208, -19, -19, -97, 56,
	-98, -73, -75, -74, -236, -2, -91, -93, 6, -113,
	-111, -112, -96, -85, -57, -57, -102, -39, -39, 58,
	-39, 58, -236, -236, -236, -237, 59, 304, 308, 309,
	-39, 392, -167, 43, 355, 360, -237, -227, -84, 14,
	16, 392, 30, -97, 59, -237, -237, -237, 59, 123,
	-237, -89, -85, -92, -214, -216, 379, 380, 381, 382,
	383, 384, 385, 386, -92, -92, -92, -122, -113, 88,
	60, 43, -39, -71, 88, 151, -75, 38, -2, -236,
	-93, -113, -89, 60, 60, 59, -237, -237, -237, -56,
	356, 139, 9, -73, -2, -216, -215, 359, -98, -237,
	360,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 831, 1, 3,
	6, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 829, 440, 441, 442, 445, 0, 0, 832, 0,
	171, 216, 216, 216, 216, 833, 1010, 1011, 1012, 1013,
	1014, 1015, 0, 0, 0, 829, 0, 829, 0, 752,
	0, 0, -2, -2, 0, 841, 0, 554, 839, 840,
	829, 0, 0, 446, 443, 444, 167, 0, 453, 0,
	178, 354, 350, 183, 184, 185, 186, 187, 264, 265,
	266, 267, 268, 305, 306, 342, 329, 344, 342, 344,
	312, 342, 344, 357, 357, 357, 357, 357, 320, 321,
	322, 323, 324, 325, 326, 0, 0, 297, 342, 342,
	342, 342, 342, 303, 304, 331, 332, 333, 334, 335,
	336, 337, 338, 0, 342, 289, 287, 291, 296, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 280,
	281, 283, 284, 294, 295, 179, 180, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 114,
	115, 0, 0, 0, 0, 0, 0, 0, 168, 0,
	0, 0, 169, 455, 0, 458, 172, 173, 174, 175,
	176, 177, 0, 447, 449, 0, 436, 0, 0, 0,
	0, 0, 0, 408, 409, 189, 0, 191, 0, 193,
	0, 195, 196, 0, 198, 200, 447, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 356, 352, 351, 357,
	0, 342, 330, 357, 0, 357, 357, 313, 314, 360,
	0, 360, 360, 360, 360, 0, 0, 347, 347, 300,
	301, 302, 0, 279, 282, 0, 289, 288, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 101,
	0, 151, 0, 121, 117, 118, 119, 116, 0, 0,
	754, 0, 834, 835, 836, -2, -2, 842, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 22,
	555, 843, 0, 830, 164, 0, 0, 0, 459, 461,
	837, 838, 457, 0, 419, 0, 0, 0, 450, 396,
	0, 404, -2, 0, 437, 438, 850, 1016, 0, 0,
	399, 401, 0, 436, 449, 190, 0, 0, 0, 197,
	199, 0, 203, 204, 850, 0, 236, 0, 0, 217,
	0, 220, -2, 223, 224, 0, 226, 260, 229, 230,
	231, 0, 233, 342, 342, 256, 0, 574, 575, 0,
	0, 0, 0, 234, 235, 355, 182, 353, 360, 0,
	357, 360, 0, 0, 360, 360, 315, 361, 0, 0,
	316, 317, 318, 319, 0, 340, 0, 298, 0, 0,
	299, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 829, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 449, 29, 165, 0, 0, 460,
	456, 0, 412, 342, 342, 850, 0, 0, 0, 0,
	0, 436, 0, 0, 403, 0, 0, 564, 850, 570,
	572, 0, 0, 0, 850, 617, 618, 619, 620, 621,
	622, 850, 850, 850, 850, 850, 850, 850, 648, 649,
	650, 651, 0, 653, -2, 758, 752, 760, 761, 762,
	763, 764, 765, 766, 0, 0, 810, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 684, 694, 694, 694, 694, 694, 694, 694, 0,
	0, 0, 0, 0, 851, 397, 398, 400, 402, 406,
	436, 0, 450, 215, 192, 447, 194, 850, 0, 0,
	0, 237, 0, 767, 0, 0, 0, 0, 222, 0,
	225, 227, 228, 0, 252, 0, 254, 0, 0, -2,
	850, 850, 0, 307, 343, 360, 309, 345, 346, 310,
	311, 362, 358, 359, 357, 0, 357, 0, 0, 339,
	0, 292, 0, 0, 0, 0, 0, 410, 411, 342,
	0, 0, 0, -2, 776, 0, 465, 0, 0, -2,
	0, 0, 152, 153, 149, 122, 120, 520, 521, 0,
	0, 755, 104, 0, 31, 32, 450, 449, 30, 454,
	462, 463, 464, 364, 0, 781, 416, 418, 415, 0,
	447, 426, 427, 0, 0, 447, 448, 449, 436, 0,
	850, 0, 0, 258, 850, 850, 0, 569, 1017, 567,
	850, 0, 0, 850, 850, 850, 850, 850, 850, 850,
	850, 850, 850, 850, 850, 850, 850, 850, 0, 0,
	598, 599, 600, 601, 602, 603, 604, 605, 606, 607,
	608, 571, 0, 588, 0, 0, 0, 564, 36, 0,
	850, 615, 0, 0, 639, 850, 640, 641, 642, 643,
	644, 645, 652, 0, 757, 759, 0, 0, 850, 850,
	850, 850, 850, 850, 850, 475, 0, 742, 0, 0,
	0, 0, 0, 0, 686, 0, 687, 688, 689, 690,
	691, 692, 693, 733, 0, 735, 736, 737, 738, 739,
	740, 850, -2, 850, 850, 407, 0, 0, 0, 0,
	0, 850, 212, 0, 768, 218, 0, 260, 221, 261,
	262, 354, 232, 253, 255, 257, 0, 850, 0, 0,
	481, 487, 483, 0, 0, 487, 0, 0, 308, 360,
	341, 360, 348, 349, 0, 0, 0, 0, 0, 562,
	1016, 0, 0, 0, 784, 0, 0, 469, 472, 467,
	36, 0, 0, 155, 156, 157, 158, 159, 0, 748,
	0, 0, 0, 23, 106, 0, 0, 450, 393, 365,
	0, 367, 0, 385, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 414, 782, 783, 781,
	420, 0, 428, 429, 421, 0, 0, 0, 0, 0,
	0, 364, 435, 0, 565, 566, 568, 592, 0, 594,
	596, 576, 850, 850, 850, 580, 611, 612, 613, 0,
	850, 850, 850, 609, 584, 0, 623, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 637, 705,
	706, 0, 647, 0, 0, 752, 590, 591, 614, 850,
	809, 36, 635, 260, 0, 636, 646, 0, 754, 756,
	0, 0, 0, 0, -2, 342, 710, 342, 291, 289,
	714, 287, 716, 717, 718, 342, 721, 342, 342, 342,
	726, 727, 342, 342, 730, 342, 342, 0, 0, 0,
	0, 850, 476, 750, 745, 850, 0, 0, 681, 682,
	683, 685, 695, 734, 0, 0, 480, 0, 0, 0,
	451, 850, 258, 205, 208, 209, 0, 238, 0, 0,
	263, 654, 0, 850, 492, 660, 484, 488, 0, 490,
	491, 0, 492, 492, -2, 327, 328, 290, 293, 562,
	0, 0, 560, 0, 0, 560, 364, 788, 850, 850,
	776, 38, 0, 470, 471, 475, 473, 474, 466, 37,
	0, 160, 0, 0, 850, 522, 19, 123, 0, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 776, 850, 82, 83, 465, 465, 465, 0, 465,
	0, 0, 0, 70, 850, 0, -2, 821, 42, 43,
	144, 145, 0, 0, -2, 106, 106, -2, 106, 106,
	0, 0, 0, 0, 0, 363, 0, 368, 0, 0,
	0, 371, 0, 386, 373, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	0, 258, 364, 393, 259, 593, 595, 597, 577, 578,
	579, 581, 609, 585, 0, 582, 850, 850, 0, 573,
	589, 616, -2, 0, 853, 260, 661, 662, 0, 0,
	850, 707, 357, 711, 712, 713, 289, 719, 720, 722,
	723, 724, 725, 728, 729, 731, 732, 0, 850, 850,
	850, 850, 0, 776, 0, 746, 850, 0, 679, 680,
	696, 697, 698, 699, 0, 0, 0, 201, 0, 0,
	0, 214, 219, 655, 482, 656, 0, 489, 485, 0,
	657, 658, 0, 560, 0, 0, 364, 850, 0, 562,
	364, 13, 33, 0, 0, 785, 777, 778, 781, 784,
	36, 477, 468, -2, 162, 850, 150, 0, 749, 0,
	126, 0, 0, 784, 0, 831, 0, 0, 58, -2,
	60, 0, 0, 856, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 65, 66, 67, 0, 0,
	0, 0, 0, 0, -2, -2, 148, 149, 105, 107,
	-2, 108, 109, 110, 111, 112, 0, 0, 0, 0,
	0, 394, 0, 369, 374, 372, 375, 387, 388, 376,
	377, 378, 379, 380, 381, 382, 389, 390, 383, 384,
	391, 392, 447, 447, 0, 0, 364, 434, 393, 433,
	583, 850, 610, 586, 0, 852, 0, 855, 0, 342,
	0, 0, 708, 709, 715, 0, 0, 0, 0, 0,
	0, 743, 678, 751, 850, 0, 452, 258, 0, 0,
	210, 211, 213, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 659, 364, 560, 364, 393, 561, 0,
	560, 393, 789, 0, 850, 850, 850, 780, 788, 39,
	850, 478, 17, 0, 161, 18, 0, 77, 124, 0,
	0, 127, 788, 0, 88, 86, 82, 89, 0, 0,
	0, 0, 50, 0, 499, 501, 502, 503, 535, 0,
	537, 0, 0, 0, 64, 536, 54, 0, 0, 814,
	102, 103, 0, 0, 0, -2, 0, 825, 822, 0,
	68, 71, 72, 73, 74, 75, 0, 142, 147, 0,
	748, 0, 24, 844, 0, 0, 0, 0, 366, 0,
	422, 423, 0, 364, 393, 431, 587, 638, 854, 663,
	667, 664, 850, 666, 668, 850, 670, 850, 672, 850,
	674, 850, 850, 0, 0, 747, 0, 202, 206, 207,
	0, 240, 0, 242, 243, 244, 245, 246, 247, 248,
	0, 493, 0, 0, 486, 393, 364, 10, 8, 563,
	364, 12, 0, 786, 787, 779, 34, 497, 850, 0,
	78, 128, 125, 141, 0, 0, 0, 0, 52, 0,
	553, -2, 0, 0, 0, 48, 49, 0, 0, 0,
	0, 0, 0, 542, 0, 0, 545, 0, 0, 0,
	0, 0, 0, 556, 0, 538, 0, 540, 541, 61,
	535, 0, 62, 0, 55, 0, 57, 91, 0, 0,
	850, 0, 360, 826, 827, 828, 824, 857, 0, 0,
	143, 0, 0, 847, 845, 0, 364, 364, 0, 0,
	370, 0, 393, 432, 0, 0, 0, 0, 0, 700,
	677, 744, 0, 239, 241, 250, 0, 850, 495, 7,
	11, 393, 790, 560, 0, 163, 20, 79, 0, 84,
	85, 850, 87, 850, 0, 90, 0, 0, 552, 560,
	0, 560, 51, 497, 811, 0, 500, 531, 533, 0,
	528, 543, 544, 546, 0, 548, 0, 550, 551, 504,
	505, 506, 0, 0, 0, 0, 539, 0, 815, 56,
	0, 0, 94, 95, 816, 817, 818, 0, 820, 69,
	76, 0, 150, 26, 0, 846, 393, 393, 25, 395,
	0, 430, 665, 669, 671, 673, 675, 0, 0, 0,
	0, 0, 0, 773, 775, 9, 769, 498, 0, 0,
	0, 0, 803, 0, 0, -2, 0, 0, 776, 560,
	47, 560, 0, 850, 525, 532, 850, 0, 526, 850,
	527, 547, 549, 518, 0, 0, 0, 0, 0, 523,
	-2, 92, 93, 0, 0, 99, 850, 0, 848, 849,
	27, 28, 0, 676, 0, 0, 0, 425, 251, 494,
	0, 850, 771, 0, 80, 0, 0, 88, 40, 0,
	803, 791, 805, 807, 850, 36, 0, 797, -2, 799,
	801, 802, 0, 784, 46, 776, 812, 813, 529, 0,
	534, 0, 0, 0, 0, 537, 0, 96, 97, 98,
	819, 0, 0, 701, 0, 704, 496, 774, 35, 850,
	850, 0, 0, 41, 0, 808, -2, 0, 0, 0,
	53, 45, 784, 0, 0, 508, 510, 511, 512, 513,
	514, 515, 516, 517, 0, 0, 0, 556, 524, 21,
	424, 702, 772, 770, 0, 0, 806, 0, -2, 0,
	798, 800, 44, 530, 507, 0, 557, 558, 559, 506,
	0, 81, 0, 794, 36, 509, 519, 0, 804, -2,
	703,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 392,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 393, 3, 394, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:424
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:429
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:430
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:438
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:443
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:463
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:483
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:504
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:520
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:537
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:557
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 14:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:572
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:583
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:595
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:606
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:622
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:636
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:650
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:663
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:677
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:688
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:694
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:708
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:722
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:742
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:760
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:778
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:787
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:802
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:810
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:817
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:823
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:827
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:833
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:837
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:844
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:856
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:868
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:872
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:878
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:884
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:888
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:892
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:897
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:898
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:902
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:906
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:911
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:915
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:921
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:925
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:929
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:933
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:939
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:943
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:956
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:960
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:966
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:971
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:975
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:981
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:988
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:995
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1002
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1010
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1020
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1024
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1028
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1032
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1036
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1042
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1049
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1063
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1067
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1071
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1078
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1086
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1100
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1107
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1117
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1128
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1133
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1138
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1145
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1149
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1160
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1164
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1170
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1174
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1178
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1184
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1192
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1196
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1206
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1212
		{
			yyVAL.str = SessionStr
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1216
		{
			yyVAL.str = GlobalStr
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1221
		{
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1222
		{
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1226
		{
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1227
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1228
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1229
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1230
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1231
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1232
		{
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1236
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1244
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1248
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1254
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1258
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1262
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1267
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1273
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1277
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1283
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1292
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1301
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1305
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1314
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1330
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1343
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1353
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1358
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1364
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1365
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1368
		{
			yyVAL.exprs = nil
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1369
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1373
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1378
		{
			yyVAL.empty = struct{}{}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1380
		{
			yyVAL.empty = struct{}{}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1383
		{
			yyVAL.bytes = nil
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1387
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1391
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1396
		{
			yyVAL.bytes = nil
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1400
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1404
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1408
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1412
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1416
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1421
		{
			yyVAL.expr = nil
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1425
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1430
		{
			yyVAL.expr = nil
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1434
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1439
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1443
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1448
		{
			yyVAL.bytes = nil
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1452
		{
			yyVAL.bytes = nil
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1458
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1465
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1471
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1475
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1480
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1484
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1488
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1492
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1496
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1500
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1506
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1510
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1515
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1520
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1526
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1537
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1543
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1556
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1561
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1566
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1571
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1577
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1582
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1587
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1592
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1597
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1602
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1607
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1612
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1617
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1626
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1636
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1641
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1646
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1653
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1660
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1668
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1673
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1678
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 211:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1683
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1689
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 213:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1695
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1702
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1709
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1721
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1725
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1729
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1733
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1737
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1743
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1747
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1751
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1755
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1763
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1767
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1775
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1779
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1783
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1789
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1795
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1801
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1807
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1811
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1816
		{
			yyVAL.sequence = &Sequence{}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1820
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1825
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1830
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1835
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1840
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1845
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1850
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1855
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1860
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1865
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1870
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1875
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1880
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1887
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1895
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1899
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1903
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1907
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1912
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1916
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1921
		{
			yyVAL.bytes = nil
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), DisplayWidth: yyDollar[2].optVal}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1986
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1990
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1995
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1999
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2007
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2011
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2017
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2030
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2036
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2040
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2044
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2048
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2056
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2060
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2064
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2070
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2074
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2080
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2084
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2088
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2092
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2096
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2100
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2104
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2108
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2112
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2116
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2120
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2124
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2128
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2132
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2136
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2140
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2144
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2148
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2152
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2156
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2160
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 328:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2165
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2170
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2174
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2180
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2184
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2188
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2192
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2196
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2200
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2204
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2208
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2212
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2218
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2223
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2228
		{
			yyVAL.optVal = nil
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2232
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2237
		{
			yyVAL.optVal = nil
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2241
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2245
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2254
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2258
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2262
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2267
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2271
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2276
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2280
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2285
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2289
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2293
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2298
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2302
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2306
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2311
		{
			yyVAL.str = ""
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2315
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2319
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2325
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2330
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2334
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2338
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2344
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2348
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2354
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2358
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2364
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2368
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2373
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2377
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2381
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2385
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2389
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2393
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2397
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2401
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2405
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2409
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2413
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2417
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2428
		{
			yyVAL.str = ""
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2432
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2438
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2442
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2448
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2452
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2458
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2462
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2468
		{
			yyVAL.indexPartition = nil
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2472
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2476
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2482
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2486
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2490
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2494
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2498
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2502
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2506
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2510
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2514
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2518
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2522
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2526
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2532
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2536
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2542
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2547
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2553
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2557
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2563
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2568
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2572
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2576
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2586
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2591
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2598
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 422:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2605
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 423:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2612
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 424:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2621
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 425:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2632
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2643
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2647
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2651
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2655
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 430:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2661
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 431:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2671
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 432:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2682
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 433:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2693
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 434:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2704
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2713
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2722
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2726
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2730
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2736
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2740
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2744
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2748
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2752
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2756
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2762
		{
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2763
		{
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2767
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2771
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2776
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2783
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2787
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2794
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2798
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2804
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2808
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2813
		{
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2814
		{
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2818
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2822
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2826
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2832
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2836
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2840
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2845
		{
			setAllowComments(yylex, true)
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2849
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2855
		{
			yyVAL.bytes2 = nil
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2859
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2865
		{
			yyVAL.str = UnionStr
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2869
		{
			yyVAL.str = UnionAllStr
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2873
		{
			yyVAL.str = UnionDistinctStr
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2878
		{
			yyVAL.str = ""
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2882
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2886
		{
			yyVAL.str = SQLCacheStr
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2891
		{
			yyVAL.str = ""
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2895
		{
			yyVAL.str = DistinctStr
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2900
		{
			yyVAL.str = ""
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2904
		{
			yyVAL.str = StraightJoinHint
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2909
		{
			yyVAL.selectExprs = nil
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2913
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2919
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2923
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2929
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2933
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2937
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2941
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2946
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2950
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2954
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2966
		{
			yyVAL.overExpr = nil
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2970
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 494:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2974
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2978
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 496:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2982
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2987
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2991
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2997
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3001
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3011
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3015
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3019
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3024
		{
			yyVAL.strs = []string{}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3028
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3034
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3038
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3044
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3048
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3052
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3056
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3060
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3064
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3072
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3078
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 519:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3082
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3088
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3093
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3097
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3103
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3107
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3120
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3124
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3128
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3132
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3138
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3140
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3144
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3146
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3150
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3152
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.empty = struct{}{}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3157
		{
			yyVAL.empty = struct{}{}
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3160
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3164
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3168
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3175
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3181
		{
			yyVAL.str = JoinStr
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3185
		{
			yyVAL.str = JoinStr
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3189
		{
			yyVAL.str = JoinStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3195
		{
			yyVAL.str = StraightJoinStr
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3201
		{
			yyVAL.str = LeftJoinStr
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3205
		{
			yyVAL.str = LeftJoinStr
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.str = RightJoinStr
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.str = RightJoinStr
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3219
		{
			yyVAL.str = NaturalJoinStr
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3223
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3233
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3237
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3243
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3247
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3252
		{
			yyVAL.indexHints = nil
		}
	case 557:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3256
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 558:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3260
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 559:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3264
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3269
		{
			yyVAL.expr = nil
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3273
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3278
		{
			yyVAL.columns = nil
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3282
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3288
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3292
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3296
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3300
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3304
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3312
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3316
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3322
		{
			yyVAL.str = ""
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3326
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3332
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3336
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3342
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3346
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3350
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3354
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3358
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3362
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3366
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3370
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3374
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3378
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3382
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 587:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3386
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3390
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3395
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3399
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3403
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3409
		{
			yyVAL.str = IsNullStr
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3413
		{
			yyVAL.str = IsNotNullStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3417
		{
			yyVAL.str = IsTrueStr
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3421
		{
			yyVAL.str = IsNotTrueStr
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3425
		{
			yyVAL.str = IsFalseStr
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3429
		{
			yyVAL.str = IsNotFalseStr
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3435
		{
			yyVAL.str = EqualStr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3439
		{
			yyVAL.str = LessThanStr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3443
		{
			yyVAL.str = GreaterThanStr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3447
		{
			yyVAL.str = LessEqualStr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3451
		{
			yyVAL.str = GreaterEqualStr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3455
		{
			yyVAL.str = NotEqualStr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3459
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.str = PosixRegexStr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3475
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3480
		{
			yyVAL.expr = nil
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3484
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3490
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3494
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3498
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3504
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3510
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3514
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3520
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3524
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3528
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3532
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3536
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3540
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3544
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3548
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3552
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3556
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3560
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3564
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3568
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3572
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3576
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3580
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3584
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3588
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3592
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3596
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3600
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 638:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3604
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3608
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3612
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3616
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3624
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3638
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3642
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3646
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3654
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3662
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3670
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3674
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3684
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 655:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3688
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3692
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3696
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 658:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3700
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 659:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3708
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 663:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3726
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 664:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3731
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 665:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3735
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 666:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3739
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 667:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3743
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 668:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3747
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 669:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3751
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 670:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3755
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 671:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3759
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 672:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3763
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 673:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 674:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 675:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3775
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 676:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3779
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 677:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3783
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 678:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3791
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3796
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3800
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3804
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3808
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3819
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3823
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3827
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3831
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3835
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3840
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3845
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3850
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3855
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3859
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 696:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3873
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3877
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3881
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3885
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3891
		{
			yyVAL.str = ""
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3895
		{
			yyVAL.str = BooleanModeStr
		}
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3899
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 703:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3903
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3907
		{
			yyVAL.str = QueryExpansionStr
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3913
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3917
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3927
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3931
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3935
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3939
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3943
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3949
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3955
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.convertType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3965
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3969
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3973
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3977
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3981
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3989
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3993
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3997
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4001
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4005
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4009
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4013
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4017
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4021
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4025
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4029
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4035
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4039
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4043
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4047
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4051
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4055
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4059
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4063
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4068
		{
			yyVAL.expr = nil
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4072
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4077
		{
			yyVAL.str = string("")
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4081
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4087
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4091
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4097
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4102
		{
			yyVAL.empty = struct{}{}
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.empty = struct{}{}
		}
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4107
		{
			yyVAL.expr = nil
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4111
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4117
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4121
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4125
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 755:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4129
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4141
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4145
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4150
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4155
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4159
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4167
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4171
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4175
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4179
		{
			yyVAL.expr = &NullVal{}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4194
		{
			yyVAL.exprs = nil
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4198
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4203
		{
			yyVAL.expr = nil
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4207
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4213
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4217
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4223
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4228
		{
			yyVAL.orderBy = nil
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4232
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4238
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4242
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4248
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4253
		{
			yyVAL.str = AscScr
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4257
		{
			yyVAL.str = AscScr
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4261
		{
			yyVAL.str = DescScr
		}
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4266
		{
			yyVAL.limit = nil
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4270
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 786:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4274
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 787:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4278
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4283
		{
			yyVAL.str = ""
		}
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4287
		{
			yyVAL.str = ForUpdateStr
		}
	case 790:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4291
		{
			yyVAL.str = ShareModeStr
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4304
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4308
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4312
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 794:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4317
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 795:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4321
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 796:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4325
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4332
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4336
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4342
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4346
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4350
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4354
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 803:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4359
		{
			yyVAL.updateExprs = nil
		}
	case 804:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4363
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4369
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4373
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4379
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4383
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4389
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4395
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4405
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4409
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4415
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4421
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4425
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4431
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4435
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4439
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 819:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4444
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4448
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4454
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4460
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4467
		{
			yyVAL.bytes = []byte("charset")
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4474
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4478
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4482
		{
			yyVAL.expr = &Default{}
		}
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4487
		{
			yyVAL.empty = struct{}{}
		}
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4489
		{
			yyVAL.empty = struct{}{}
		}
	case 831:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.str = ""
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4494
		{
			yyVAL.str = IgnoreStr
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4498
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4505
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4509
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4513
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4517
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4523
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4527
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4532
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4539
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4545
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4549
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4553
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4559
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4563
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4567
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4573
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4577
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 852:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4584
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4591
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4595
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4602
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4608
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4612
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4789
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4798
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
