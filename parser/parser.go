// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const SCHEMA = 57457
const TABLE = 57458
const INDEX = 57459
const MATERIALIZED = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const PRIMARY = 57465
const COLUMN = 57466
const CONSTRAINT = 57467
const REFERENCES = 57468
const SPATIAL = 57469
const FULLTEXT = 57470
const FOREIGN = 57471
const KEY_BLOCK_SIZE = 57472
const POLICY = 57473
const WHILE = 57474
const UNIQUE = 57475
const KEY = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const EXEC = 57485
const EXECUTE = 57486
const CONNECT = 57487
const USAGE = 57488
const MAXVALUE = 57489
const PARTITION = 57490
const REORGANIZE = 57491
const LESS = 57492
const THAN = 57493
const PROCEDURE = 57494
const TRIGGER = 57495
const TYPE = 57496
const RETURN = 57497
const STATUS = 57498
const VARIABLES = 57499
const RESTRICT = 57500
const CASCADE = 57501
const NO = 57502
const ACTION = 57503
const PERMISSIVE = 57504
const RESTRICTIVE = 57505
const PUBLIC = 57506
const CURRENT_USER = 57507
const SESSION_USER = 57508
const PAD_INDEX = 57509
const FILLFACTOR = 57510
const IGNORE_DUP_KEY = 57511
const STATISTICS_NORECOMPUTE = 57512
const STATISTICS_INCREMENTAL = 57513
const ALLOW_ROW_LOCKS = 57514
const ALLOW_PAGE_LOCKS = 57515
const DISTANCE = 57516
const M = 57517
const EUCLIDEAN = 57518
const COSINE = 57519
const BEFORE = 57520
const AFTER = 57521
const EACH = 57522
const ROW = 57523
const SCROLL = 57524
const CURSOR = 57525
const OPEN = 57526
const CLOSE = 57527
const FETCH = 57528
const PRIOR = 57529
const FIRST = 57530
const LAST = 57531
const DEALLOCATE = 57532
const INSTEAD = 57533
const OF = 57534
const OUTPUT = 57535
const DEFERRABLE = 57536
const INITIALLY = 57537
const IMMEDIATE = 57538
const DEFERRED = 57539
const CONCURRENTLY = 57540
const SQL = 57541
const SECURITY = 57542
const EXTENSION = 57543
const GRANT = 57544
const REVOKE = 57545
const PRIVILEGES = 57546
const EXCLUDE = 57547
const GIST = 57548
const OPTION = 57549
const BEGIN = 57550
const START = 57551
const TRANSACTION = 57552
const COMMIT = 57553
const ROLLBACK = 57554
const BIT = 57555
const TINYINT = 57556
const SMALLINT = 57557
const SMALLSERIAL = 57558
const MEDIUMINT = 57559
const INT = 57560
const INTEGER = 57561
const SERIAL = 57562
const BIGINT = 57563
const BIGSERIAL = 57564
const INTNUM = 57565
const REAL = 57566
const DOUBLE = 57567
const PRECISION = 57568
const FLOAT_TYPE = 57569
const DECIMAL = 57570
const NUMERIC = 57571
const SMALLMONEY = 57572
const MONEY = 57573
const TIME = 57574
const TIMESTAMP = 57575
const TIMESTAMPTZ = 57576
const TIMETZ = 57577
const DATETIME = 57578
const YEAR = 57579
const DATETIMEOFFSET = 57580
const DATETIME2 = 57581
const SMALLDATETIME = 57582
const CHAR = 57583
const VARCHAR = 57584
const VARYING = 57585
const BOOL = 57586
const CHARACTER = 57587
const VARBINARY = 57588
const NCHAR = 57589
const NVARCHAR = 57590
const NTEXT = 57591
const UUID = 57592
const TEXT = 57593
const TINYTEXT = 57594
const MEDIUMTEXT = 57595
const LONGTEXT = 57596
const CITEXT = 57597
const BLOB = 57598
const TINYBLOB = 57599
const MEDIUMBLOB = 57600
const LONGBLOB = 57601
const JSON = 57602
const JSONB = 57603
const ENUM = 57604
const GEOMETRY = 57605
const POINT = 57606
const LINESTRING = 57607
const POLYGON = 57608
const GEOMETRYCOLLECTION = 57609
const MULTIPOINT = 57610
const MULTILINESTRING = 57611
const MULTIPOLYGON = 57612
const VECTOR = 57613
const VARIADIC = 57614
const ARRAY = 57615
const NOW = 57616
const GETDATE = 57617
const BPCHAR = 57618
const TEXT_PATTERN_OPS = 57619
const NULLX = 57620
const AUTO_INCREMENT = 57621
const APPROXNUM = 57622
const SIGNED = 57623
const UNSIGNED = 57624
const ZEROFILL = 57625
const ZONE = 57626
const AUTOINCREMENT = 57627
const DATABASES = 57628
const TABLES = 57629
const VSCHEMA_TABLES = 57630
const EXTENDED = 57631
const FULL = 57632
const PROCESSLIST = 57633
const NAMES = 57634
const CHARSET = 57635
const GLOBAL = 57636
const SESSION = 57637
const ISOLATION = 57638
const LEVEL = 57639
const READ = 57640
const WRITE = 57641
const ONLY = 57642
const REPEATABLE = 57643
const COMMITTED = 57644
const UNCOMMITTED = 57645
const SERIALIZABLE = 57646
const NEW = 57647
const CONCAT_NULL_YIELDS_NULL = 57648
const CURSOR_CLOSE_ON_COMMIT = 57649
const QUOTED_IDENTIFIER = 57650
const ARITHABORT = 57651
const FMTONLY = 57652
const NOCOUNT = 57653
const NOEXEC = 57654
const NUMERIC_ROUNDABORT = 57655
const ANSI_DEFAULTS = 57656
const ANSI_NULL_DFLT_OFF = 57657
const ANSI_NULL_DFLT_ON = 57658
const ANSI_NULLS = 57659
const ANSI_PADDING = 57660
const ANSI_WARNINGS = 57661
const FORCEPLAN = 57662
const SHOWPLAN_ALL = 57663
const SHOWPLAN_TEXT = 57664
const SHOWPLAN_XML = 57665
const IMPLICIT_TRANSACTIONS = 57666
const REMOTE_PROC_TRANSACTIONS = 57667
const XACT_ABORT = 57668
const CURRENT_TIMESTAMP = 57669
const DATABASE = 57670
const CURRENT_DATE = 57671
const CURRENT_TIME = 57672
const LOCALTIME = 57673
const LOCALTIMESTAMP = 57674
const UTC_DATE = 57675
const UTC_TIME = 57676
const UTC_TIMESTAMP = 57677
const REPLACE = 57678
const CONVERT = 57679
const CAST = 57680
const SUBSTR = 57681
const SUBSTRING = 57682
const GROUP_CONCAT = 57683
const SEPARATOR = 57684
const INHERIT = 57685
const LEAD = 57686
const LAG = 57687
const MATCH = 57688
const AGAINST = 57689
const BOOLEAN = 57690
const LANGUAGE = 57691
const WITH = 57692
const WITHOUT = 57693
const PARSER = 57694
const QUERY = 57695
const EXPANSION = 57696
const UNUSED = 57697
const VIRTUAL = 57698
const STORED = 57699
const GENERATED = 57700
const ALWAYS = 57701
const IDENTITY = 57702
const SEQUENCE = 57703
const INCREMENT = 57704
const MINVALUE = 57705
const CACHE = 57706
const CYCLE = 57707
const OWNED = 57708
const NONE = 57709
const CLUSTERED = 57710
const NONCLUSTERED = 57711
const REPLICATION = 57712
const COLUMNSTORE = 57713
const INCLUDE = 57714
const HOLDLOCK = 57715
const NOLOCK = 57716
const NOWAIT = 57717
const PAGLOCK = 57718
const ROWLOCK = 57719
const TABLOCK = 57720
const UPDLOCK = 57721
const READUNCOMMITTED = 57722
const DEFINER = 57723
const INVOKER = 57724
const TYPECAST = 57725
const CHECK = 57726
const OVER = 57727

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"CONNECT",
	"USAGE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"EXTENSION",
	"GRANT",
	"REVOKE",
	"PRIVILEGES",
	"EXCLUDE",
	"GIST",
	"OPTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TIMETZ",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 8,
	134, 497,
	-2, 208,
	-1, 80,
	123, 921,
	-2, 915,
	-1, 81,
	123, 922,
	-2, 827,
	-1, 336,
	123, 925,
	-2, 919,
	-1, 337,
	123, 922,
	-2, 920,
	-1, 505,
	61, 449,
	-2, 446,
	-1, 537,
	123, 923,
	-2, 305,
	-1, 538,
	79, 833,
	80, 833,
	84, 833,
	91, 833,
	92, 833,
	93, 833,
	94, 833,
	95, 833,
	96, 833,
	97, 833,
	98, 833,
	99, 833,
	100, 833,
	101, 833,
	102, 833,
	103, 833,
	104, 833,
	105, 833,
	106, 833,
	107, 833,
	108, 833,
	110, 833,
	111, 833,
	112, 833,
	113, 833,
	114, 833,
	115, 833,
	116, 833,
	119, 833,
	210, 833,
	400, 833,
	-2, 268,
	-1, 539,
	79, 837,
	80, 837,
	84, 837,
	91, 837,
	92, 837,
	93, 837,
	94, 837,
	95, 837,
	96, 837,
	97, 837,
	98, 837,
	99, 837,
	100, 837,
	101, 837,
	102, 837,
	103, 837,
	104, 837,
	105, 837,
	106, 837,
	107, 837,
	108, 837,
	110, 837,
	111, 837,
	112, 837,
	113, 837,
	114, 837,
	115, 837,
	116, 837,
	119, 837,
	210, 837,
	400, 837,
	-2, 269,
	-1, 541,
	79, 838,
	80, 838,
	84, 838,
	91, 838,
	92, 838,
	93, 838,
	94, 838,
	95, 838,
	96, 838,
	97, 838,
	98, 838,
	99, 838,
	100, 838,
	101, 838,
	102, 838,
	103, 838,
	104, 838,
	105, 838,
	106, 838,
	107, 838,
	108, 838,
	110, 838,
	111, 838,
	112, 838,
	113, 838,
	114, 838,
	115, 838,
	116, 838,
	119, 838,
	210, 838,
	400, 838,
	-2, 271,
	-1, 542,
	79, 841,
	80, 841,
	84, 841,
	91, 841,
	92, 841,
	93, 841,
	94, 841,
	95, 841,
	96, 841,
	97, 841,
	98, 841,
	99, 841,
	100, 841,
	101, 841,
	102, 841,
	103, 841,
	104, 841,
	105, 841,
	106, 841,
	107, 841,
	108, 841,
	110, 841,
	111, 841,
	112, 841,
	113, 841,
	114, 841,
	115, 841,
	116, 841,
	119, 841,
	210, 841,
	-2, 305,
	-1, 544,
	79, 836,
	80, 836,
	84, 836,
	91, 836,
	92, 836,
	93, 836,
	94, 836,
	95, 836,
	96, 836,
	97, 836,
	98, 836,
	99, 836,
	100, 836,
	101, 836,
	102, 836,
	103, 836,
	104, 836,
	105, 836,
	106, 836,
	107, 836,
	108, 836,
	110, 836,
	111, 836,
	112, 836,
	113, 836,
	114, 836,
	115, 836,
	116, 836,
	119, 836,
	210, 836,
	400, 836,
	-2, 275,
	-1, 545,
	79, 676,
	80, 676,
	84, 676,
	91, 676,
	92, 676,
	93, 676,
	94, 676,
	95, 676,
	96, 676,
	97, 676,
	98, 676,
	99, 676,
	100, 676,
	101, 676,
	102, 676,
	103, 676,
	104, 676,
	105, 676,
	106, 676,
	107, 676,
	108, 676,
	110, 676,
	111, 676,
	112, 676,
	113, 676,
	114, 676,
	115, 676,
	116, 676,
	119, 676,
	210, 676,
	400, 676,
	-2, 276,
	-1, 548,
	79, 750,
	80, 750,
	84, 750,
	91, 750,
	92, 750,
	93, 750,
	94, 750,
	95, 750,
	96, 750,
	97, 750,
	98, 750,
	99, 750,
	100, 750,
	101, 750,
	102, 750,
	103, 750,
	104, 750,
	105, 750,
	106, 750,
	107, 750,
	108, 750,
	110, 750,
	111, 750,
	112, 750,
	113, 750,
	114, 750,
	115, 750,
	116, 750,
	119, 750,
	210, 750,
	400, 750,
	-2, 378,
	-1, 549,
	79, 760,
	80, 760,
	84, 760,
	91, 760,
	92, 760,
	93, 760,
	94, 760,
	95, 760,
	96, 760,
	97, 760,
	98, 760,
	99, 760,
	100, 760,
	101, 760,
	102, 760,
	103, 760,
	104, 760,
	105, 760,
	106, 760,
	107, 760,
	108, 760,
	110, 760,
	111, 760,
	112, 760,
	113, 760,
	114, 760,
	115, 760,
	116, 760,
	119, 760,
	210, 760,
	400, 760,
	-2, 378,
	-1, 550,
	79, 760,
	80, 760,
	84, 760,
	91, 760,
	92, 760,
	93, 760,
	94, 760,
	95, 760,
	96, 760,
	97, 760,
	98, 760,
	99, 760,
	100, 760,
	101, 760,
	102, 760,
	103, 760,
	104, 760,
	105, 760,
	106, 760,
	107, 760,
	108, 760,
	110, 760,
	111, 760,
	112, 760,
	113, 760,
	114, 760,
	115, 760,
	116, 760,
	119, 760,
	210, 760,
	400, 760,
	-2, 301,
	-1, 695,
	59, 378,
	60, 378,
	-2, 1033,
	-1, 712,
	123, 923,
	-2, 305,
	-1, 755,
	79, 832,
	80, 832,
	84, 832,
	91, 832,
	92, 832,
	93, 832,
	94, 832,
	95, 832,
	96, 832,
	97, 832,
	98, 832,
	99, 832,
	100, 832,
	101, 832,
	102, 832,
	103, 832,
	104, 832,
	105, 832,
	106, 832,
	107, 832,
	108, 832,
	110, 832,
	111, 832,
	112, 832,
	113, 832,
	114, 832,
	115, 832,
	116, 832,
	119, 832,
	210, 832,
	400, 832,
	-2, 267,
	-1, 757,
	79, 837,
	80, 837,
	84, 837,
	91, 837,
	92, 837,
	93, 837,
	94, 837,
	95, 837,
	96, 837,
	97, 837,
	98, 837,
	99, 837,
	100, 837,
	101, 837,
	102, 837,
	103, 837,
	104, 837,
	105, 837,
	106, 837,
	107, 837,
	108, 837,
	110, 837,
	111, 837,
	112, 837,
	113, 837,
	114, 837,
	115, 837,
	116, 837,
	119, 837,
	210, 837,
	400, 837,
	-2, 270,
	-1, 758,
	79, 838,
	80, 838,
	84, 838,
	91, 838,
	92, 838,
	93, 838,
	94, 838,
	95, 838,
	96, 838,
	97, 838,
	98, 838,
	99, 838,
	100, 838,
	101, 838,
	102, 838,
	103, 838,
	104, 838,
	105, 838,
	106, 838,
	107, 838,
	108, 838,
	110, 838,
	111, 838,
	112, 838,
	113, 838,
	114, 838,
	115, 838,
	116, 838,
	119, 838,
	210, 838,
	400, 838,
	-2, 272,
	-1, 905,
	5, 78,
	-2, 16,
	-1, 908,
	5, 78,
	-2, 18,
	-1, 1006,
	290, 340,
	404, 340,
	-2, 307,
	-1, 1008,
	79, 748,
	80, 748,
	84, 748,
	91, 748,
	92, 748,
	93, 748,
	94, 748,
	95, 748,
	96, 748,
	97, 748,
	98, 748,
	99, 748,
	100, 748,
	101, 748,
	102, 748,
	103, 748,
	104, 748,
	105, 748,
	106, 748,
	107, 748,
	108, 748,
	110, 748,
	111, 748,
	112, 748,
	113, 748,
	114, 748,
	115, 748,
	116, 748,
	119, 748,
	210, 748,
	400, 748,
	-2, 277,
	-1, 1292,
	5, 79,
	-2, 672,
	-1, 1419,
	60, 148,
	-2, 261,
	-1, 1422,
	60, 148,
	-2, 261,
	-1, 1535,
	5, 78,
	-2, 17,
	-1, 1551,
	200, 105,
	-2, 593,
	-1, 1592,
	60, 148,
	-2, 231,
	-1, 1737,
	90, 917,
	-2, 898,
	-1, 1822,
	57, 92,
	59, 92,
	-2, 94,
	-1, 1991,
	5, 78,
	-2, 867,
	-1, 2016,
	5, 78,
	-2, 101,
	-1, 2053,
	59, 1069,
	60, 1069,
	-2, 523,
	-1, 2089,
	5, 79,
	-2, 868,
	-1, 2121,
	5, 78,
	-2, 870,
	-1, 2142,
	5, 79,
	-2, 871,
}

const yyPrivate = 57344

const yyLast = 14731

var yyAct = [...]int16{
	583, 563, 1923, 2098, 2046, 1941, 2009, 1293, 2052, 2047,
	589, 50, 50, 915, 1843, 2043, 1380, 57, 1395, 1977,
	818, 816, 493, 76, 77, 78, 2014, 1258, 93, 1383,
	1384, 1924, 1857, 1699, 2001, 1856, 1731, 1891, 1398, 1831,
	1845, 1841, 1917, 1397, 1207, 694, 749, 1075, 1716, 1377,
	1555, 1728, 115, 1552, 480, 1725, 1707, 1487, 121, 121,
	121, 121, 121, 956, 1749, 1610, 1492, 34, 630, 497,
	1619, 189, 192, 193, 1241, 1181, 1591, 851, 898, 1367,
	114, 1500, 577, 1062, 1222, 1717, 724, 1106, 332, 1140,
	1722, 209, 1435, 1098, 1284, 932, 1311, 1143, 1197, 1086,
	897, 308, 270, 500, 1248, 50, 287, 1090, 1079, 761,
	693, 1026, 323, 506, 57, 85, 725, 562, 931, 554,
	710, 122, 117, 118, 119, 116, 534, 232, 198, 324,
	861, 772, 570, 1423, 536, 96, 543, 227, 253, 185,
	186, 187, 188, 236, 1192, 780, 1318, 1355, 783, 1354,
	56, 288, 277, 272, 798, 799, 800, 801, 802, 803,
	804, 618, 781, 782, 779, 805, 806, 807, 808, 785,
	784, 794, 795, 787, 788, 789, 790, 791, 792, 793,
	786, 1150, 1149, 797, 840, 14, 823, 213, 1412, 1401,
	1400, 1501, 314, 215, 1381, 702, 786, 268, 1809, 797,
	1402, 224, 797, 756, 1368, 703, 333, 121, 1153, 194,
	265, 196, 51, 1403, 319, 320, 268, 269, 789, 790,
	791, 792, 793, 786, 733, 208, 797, 333, 336, 98,
	473, 1426, 507, 508, 532, 962, 736, 2140, 1245, 1781,
	501, 256, 289, 290, 291, 292, 989, 230, 2038, 99,
	100, 331, 1642, 1643, 2133, 522, 263, 1439, 251, 470,
	1263, 1264, 1982, 1440, 229, 277, 252, 271, 1812, 510,
	750, 2010, 491, 2116, 837, 1696, 621, 705, 642, 643,
	1193, 313, 2037, 1522, 310, 317, 1981, 321, 322, 1466,
	1686, 101, 2020, 1150, 329, 2019, 472, 2072, 2021, 474,
	2073, 2074, 1952, 1953, 1858, 303, 1859, 479, 481, 1951,
	1657, 483, 484, 650, 486, 751, 764, 763, 1161, 1396,
	1160, 620, 274, 743, 641, 259, 590, 254, 264, 1408,
	638, 664, 526, 277, 765, 261, 260, 1516, 288, 1288,
	1414, 1415, 794, 795, 787, 788, 789, 790, 791, 792,
	793, 786, 1410, 1148, 797, 528, 280, 1901, 634, 635,
	636, 637, 785, 784, 794, 795, 787, 788, 789, 790,
	791, 792, 793, 786, 1486, 740, 797, 742, 741, 972,
	889, 1404, 1405, 1407, 888, 623, 306, 1406, 625, 545,
	628, 629, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106,
	780, 1333, 649, 783, 1644, 1543, 653, 654, 247, 798,
	799, 800, 801, 802, 803, 804, 1961, 781, 782, 779,
	805, 806, 807, 808, 785, 784, 794, 795, 787, 788,
	789, 790, 791, 792, 793, 786, 504, 1331, 797, 787,
	788, 789, 790, 791, 792, 793, 786, 766, 823, 797,
	1412, 1401, 1400, 566, 1539, 1780, 704, 1782, 663, 507,
	508, 12, 1402, 1603, 796, 1190, 109, 51, 106, 668,
	1431, 195, 2025, 2024, 1964, 1403, 1965, 669, 1875, 57,
	796, 257, 662, 796, 73, 763, 307, 258, 765, 687,
	333, 328, 1317, 51, 1851, 92, 190, 333, 1149, 1727,
	1962, 51, 765, 1538, 1872, 764, 763, 796, 1648, 505,
	1376, 473, 333, 726, 1620, 1621, 8, 9, 911, 912,
	735, 1650, 1193, 765, 199, 1230, 250, 1242, 1918, 2118,
	1704, 1602, 964, 1413, 963, 690, 1625, 705, 288, 561,
	784, 794, 795, 787, 788, 789, 790, 791, 792, 793,
	786, 796, 823, 797, 1412, 1401, 1400, 723, 1427, 1428,
	266, 51, 267, 701, 74, 990, 1402, 738, 1440, 952,
	1645, 95, 1773, 681, 1287, 692, 684, 688, 978, 1403,
	820, 1396, 525, 1541, 524, 51, 262, 934, 1194, 1223,
	1224, 1408, 519, 1881, 531, 228, 926, 502, 1980, 1674,
	972, 766, 1414, 1415, 979, 1429, 675, 1637, 1874, 10,
	11, 647, 672, 927, 1410, 766, 706, 2134, 2039, 764,
	763, 644, 676, 734, 1902, 640, 959, 1914, 691, 97,
	91, 108, 732, 105, 1960, 796, 766, 765, 1199, 1198,
	110, 764, 763, 1404, 1405, 1407, 1076, 755, 111, 1406,
	503, 917, 900, 513, 514, 191, 545, 796, 35, 765,
	739, 737, 752, 916, 1620, 1621, 333, 1543, 923, 1174,
	754, 516, 57, 1726, 820, 928, 820, 905, 670, 908,
	933, 815, 774, 933, 933, 1396, 933, 937, 517, 929,
	333, 972, 875, 248, 877, 1408, 682, 880, 881, 249,
	200, 201, 764, 763, 94, 935, 1414, 1415, 515, 333,
	1526, 920, 656, 202, 835, 75, 250, 1581, 1410, 796,
	765, 2013, 680, 1646, 1647, 1649, 1651, 1652, 2012, 2011,
	796, 876, 866, 867, 899, 945, 972, 856, 857, 858,
	859, 860, 72, 902, 281, 71, 916, 1404, 1405, 1407,
	766, 913, 70, 1406, 485, 764, 763, 121, 482, 987,
	507, 508, 223, 961, 1942, 1944, 1474, 221, 957, 958,
	960, 936, 766, 765, 1341, 220, 918, 217, 102, 820,
	678, 249, 509, 89, 478, 764, 763, 970, 824, 825,
	1027, 914, 907, 919, 2092, 1413, 1791, 1973, 250, 1204,
	679, 938, 939, 765, 941, 924, 930, 1861, 982, 1007,
	1669, 1315, 587, 1168, 1067, 1066, 943, 965, 839, 838,
	665, 488, 973, 1226, 275, 1083, 1083, 207, 764, 763,
	205, 820, 883, 766, 796, 1085, 83, 86, 820, 333,
	333, 1074, 764, 763, 750, 1703, 765, 980, 1943, 632,
	631, 1659, 1775, 774, 1067, 1145, 38, 1089, 1434, 942,
	765, 336, 785, 784, 794, 795, 787, 788, 789, 790,
	791, 792, 793, 786, 1002, 284, 797, 487, 286, 2022,
	994, 1582, 1583, 1584, 1094, 1095, 766, 1999, 1860, 751,
	1454, 884, 1034, 1453, 1452, 900, 1165, 1451, 1816, 1413,
	1450, 750, 1449, 1448, 916, 333, 1032, 1033, 1031, 86,
	1447, 1446, 1324, 1285, 1323, 86, 766, 1170, 1055, 867,
	1051, 1052, 1050, 86, 225, 820, 1189, 1054, 1172, 1445,
	1191, 1443, 1817, 1524, 764, 763, 1312, 1144, 933, 815,
	1350, 933, 1081, 1084, 1203, 1156, 751, 1378, 1144, 1915,
	333, 499, 765, 214, 212, 1137, 1138, 211, 204, 766,
	1232, 218, 1229, 1228, 735, 1611, 1497, 1779, 333, 726,
	333, 1152, 51, 766, 1314, 498, 726, 899, 726, 1256,
	1256, 1611, 1259, 1171, 1741, 499, 1612, 1166, 499, 1622,
	764, 763, 1157, 521, 1159, 1164, 1018, 1613, 1173, 1609,
	499, 622, 1612, 86, 1274, 1275, 1276, 86, 765, 86,
	86, 510, 811, 1237, 1270, 1271, 86, 622, 338, 1163,
	338, 86, 1029, 1016, 988, 1162, 1227, 992, 622, 86,
	86, 1231, 1184, 86, 86, 648, 86, 627, 1267, 1225,
	1201, 626, 1027, 764, 763, 1088, 1661, 520, 1239, 820,
	1100, 1102, 1103, 1104, 646, 1238, 1195, 645, 1139, 1200,
	1221, 765, 1244, 1865, 617, 766, 744, 1233, 1012, 1014,
	1015, 1063, 51, 1064, 1314, 1801, 1013, 86, 1234, 1151,
	760, 1154, 1155, 1196, 1257, 1604, 762, 1660, 769, 773,
	773, 776, 1313, 51, 1247, 1864, 1297, 810, 812, 813,
	814, 819, 1313, 1444, 971, 1269, 1417, 764, 763, 826,
	1273, 760, 760, 760, 760, 760, 760, 277, 51, 837,
	210, 766, 827, 836, 86, 765, 1202, 1158, 86, 86,
	922, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 828, 853, 1280, 855, 773, 773, 773, 773, 773,
	510, 870, 871, 872, 873, 837, 827, 796, 686, 639,
	51, 584, 1082, 713, 715, 716, 585, 586, 527, 333,
	900, 714, 717, 1076, 766, 1259, 510, 51, 51, 51,
	1182, 972, 972, 1379, 2128, 2127, 1683, 1182, 2126, 1419,
	1470, 2113, 973, 823, 933, 906, 1253, 906, 2071, 972,
	2091, 972, 1375, 1470, 2029, 1689, 1249, 1251, 1252, 1254,
	1255, 1250, 1441, 1330, 1369, 949, 1968, 2035, 972, 1590,
	1989, 1828, 972, 1334, 1065, 1990, 1360, 972, 1361, 949,
	1877, 949, 1876, 1028, 1182, 1806, 333, 882, 766, 1825,
	1349, 977, 1767, 1532, 966, 510, 731, 949, 1765, 1477,
	1437, 760, 899, 1470, 1764, 1761, 1760, 1476, 974, 776,
	769, 773, 773, 949, 1755, 1418, 836, 949, 1754, 1364,
	1370, 730, 785, 784, 794, 795, 787, 788, 789, 790,
	791, 792, 793, 786, 729, 1826, 797, 680, 728, 1430,
	949, 1690, 949, 1630, 1363, 86, 1306, 707, 86, 1433,
	819, 338, 1307, 972, 1470, 1469, 977, 1467, 949, 1464,
	1362, 1455, 518, 1313, 1460, 1268, 333, 820, 760, 1030,
	1495, 760, 760, 760, 760, 760, 760, 760, 760, 760,
	760, 760, 760, 760, 760, 760, 1472, 1921, 336, 680,
	1432, 977, 1463, 1246, 1494, 949, 1372, 1182, 1371, 1347,
	1072, 972, 906, 1182, 1262, 949, 1240, 1186, 1185, 819,
	1020, 1094, 977, 976, 949, 948, 900, 333, 1833, 1836,
	1837, 1838, 1834, 1076, 1835, 1839, 1482, 1167, 2002, 2003,
	760, 823, 893, 892, 886, 887, 886, 885, 113, 112,
	1828, 1496, 1827, 820, 2044, 1523, 1535, 1998, 1537, 1544,
	1470, 1507, 1508, 1551, 1504, 1577, 1578, 1579, 1513, 1502,
	1586, 1509, 1506, 2120, 1892, 1499, 1505, 1307, 1828, 1892,
	1592, 1419, 1419, 1592, 1419, 1419, 333, 333, 1416, 1517,
	1004, 661, 1345, 510, 1846, 1515, 993, 1605, 890, 1343,
	836, 1608, 879, 1545, 1527, 1529, 906, 1183, 899, 878,
	874, 660, 107, 103, 661, 104, 104, 1998, 2087, 1259,
	333, 1072, 1998, 726, 901, 86, 1528, 1307, 667, 1828,
	87, 1638, 1848, 86, 39, 823, 40, 41, 42, 1470,
	1344, 661, 1950, 1853, 1607, 1028, 1628, 1342, 1588, 53,
	1723, 1662, 1307, 86, 1325, 1182, 949, 1593, 1594, 1595,
	1596, 1597, 1664, 187, 1598, 1599, 991, 1589, 1547, 1548,
	1549, 891, 1553, 1614, 1615, 1616, 1617, 1618, 967, 968,
	1626, 1627, 1260, 895, 894, 1624, 2008, 510, 510, 51,
	511, 512, 916, 2066, 2064, 2028, 1631, 1885, 1629, 2002,
	2003, 2044, 1758, 1272, 277, 1692, 1601, 1600, 1531, 1632,
	1462, 1459, 1458, 1705, 333, 1698, 1425, 64, 1635, 1366,
	1702, 1365, 309, 1277, 1278, 1279, 1266, 796, 1235, 1188,
	819, 1030, 760, 760, 760, 1542, 1710, 1708, 1663, 1169,
	65, 1742, 66, 67, 985, 984, 983, 981, 975, 969,
	1709, 1715, 904, 1592, 46, 903, 775, 771, 768, 1734,
	745, 333, 333, 1714, 708, 666, 1530, 1750, 1750, 651,
	1533, 44, 1693, 304, 533, 1712, 529, 1298, 496, 302,
	1740, 311, 312, 1667, 294, 293, 83, 43, 282, 48,
	47, 49, 69, 39, 1316, 40, 41, 42, 45, 481,
	16, 1436, 2005, 1473, 896, 652, 316, 760, 37, 1093,
	315, 338, 1751, 222, 1093, 1093, 1093, 1093, 219, 203,
	1093, 1093, 1093, 197, 54, 1752, 83, 2007, 1932, 1931,
	333, 1833, 1836, 1837, 1838, 1834, 1935, 1835, 1839, 1756,
	1757, 1936, 1933, 1093, 1093, 1093, 1093, 1934, 51, 1302,
	1303, 2083, 1774, 1776, 1777, 1778, 1762, 1763, 1937, 2036,
	1837, 1838, 1633, 1890, 1771, 1772, 1636, 901, 1784, 86,
	68, 854, 495, 1866, 1770, 920, 1792, 1488, 633, 748,
	86, 2085, 1788, 1815, 1850, 1868, 121, 1768, 1769, 1787,
	333, 477, 1489, 476, 1700, 475, 1701, 1863, 330, 1542,
	820, 1223, 1224, 1727, 1374, 1818, 1299, 747, 659, 1300,
	1947, 657, 1176, 46, 1177, 1178, 1179, 655, 206, 333,
	1879, 1141, 1753, 1814, 1180, 1294, 1688, 1175, 1823, 1146,
	44, 910, 700, 2080, 1893, 1734, 1840, 1849, 1852, 1783,
	1747, 1854, 1869, 1295, 1805, 1076, 43, 1808, 48, 47,
	49, 2079, 1867, 2032, 1246, 1746, 1745, 45, 325, 326,
	327, 36, 1871, 1821, 1822, 1744, 1880, 62, 63, 1743,
	1641, 1640, 1457, 52, 940, 699, 698, 760, 760, 760,
	1886, 685, 1887, 683, 2135, 760, 760, 1658, 1067, 1925,
	81, 1456, 523, 1078, 1080, 1824, 925, 1878, 906, 1187,
	13, 1, 1554, 18, 17, 1976, 1710, 58, 318, 1096,
	581, 1963, 1873, 564, 333, 88, 1913, 2097, 760, 1883,
	1910, 820, 333, 1724, 1074, 1920, 1922, 1008, 1550, 1259,
	1580, 1623, 616, 1911, 1017, 1789, 255, 1926, 1019, 1938,
	1929, 1021, 760, 760, 760, 760, 1259, 1946, 1475, 530,
	1948, 1949, 20, 1542, 1811, 1903, 1959, 1542, 1701, 1734,
	1093, 1695, 1536, 909, 658, 1606, 1700, 1957, 1205, 1316,
	951, 1919, 237, 1972, 906, 1927, 1928, 226, 1930, 1068,
	1069, 1070, 1071, 1073, 944, 489, 55, 88, 1803, 15,
	1442, 1958, 1807, 88, 1975, 238, 820, 235, 234, 1991,
	233, 88, 88, 1700, 58, 231, 2015, 619, 273, 1587,
	279, 305, 120, 1093, 123, 1729, 1862, 90, 673, 1353,
	1147, 1997, 1310, 1995, 2006, 809, 820, 2018, 1736, 2016,
	2051, 1491, 1970, 2078, 333, 1971, 2031, 1348, 1142, 565,
	1011, 580, 901, 2017, 579, 1101, 578, 1988, 778, 1719,
	1067, 1925, 2045, 2054, 2015, 2023, 1819, 1832, 1983, 1067,
	1925, 2048, 2040, 1720, 1830, 1908, 1884, 1829, 2004, 2000,
	1542, 820, 1718, 1811, 2050, 2055, 1710, 1710, 1708, 2030,
	2057, 88, 921, 760, 2034, 88, 1685, 88, 88, 1259,
	2061, 1709, 1900, 1301, 88, 1666, 337, 1409, 88, 88,
	1465, 1668, 2058, 2041, 2042, 1399, 1077, 88, 88, 1304,
	7, 88, 88, 1411, 88, 2082, 2077, 494, 1394, 2026,
	2027, 2086, 1684, 6, 1811, 916, 2094, 5, 916, 916,
	916, 4, 2111, 3, 1393, 87, 1392, 84, 2096, 1243,
	1391, 2107, 2108, 2109, 1390, 2110, 80, 1388, 84, 1721,
	1389, 1261, 2054, 2124, 1386, 88, 1387, 2119, 2048, 1385,
	2123, 2115, 1296, 2125, 1701, 821, 2, 0, 2095, 820,
	1908, 0, 2121, 0, 2055, 0, 2132, 0, 0, 0,
	1093, 0, 0, 0, 0, 2136, 0, 0, 338, 1093,
	1974, 2048, 2138, 0, 0, 0, 1067, 1925, 2141, 2139,
	0, 820, 88, 0, 2137, 1759, 88, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 1700, 0, 0, 1994,
	0, 1996, 64, 0, 79, 0, 0, 0, 0, 0,
	1289, 1290, 1534, 64, 0, 1720, 0, 0, 901, 1292,
	0, 0, 0, 0, 0, 65, 0, 66, 67, 0,
	823, 1305, 0, 1308, 1309, 0, 65, 0, 66, 67,
	0, 0, 0, 0, 0, 1319, 0, 1320, 1321, 1322,
	0, 0, 0, 0, 760, 0, 61, 760, 1811, 760,
	0, 760, 0, 760, 760, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 2059, 1542, 2060, 69, 0, 1424,
	0, 51, 510, 1422, 1346, 87, 0, 84, 69, 0,
	1352, 0, 556, 0, 547, 0, 1356, 1357, 0, 1358,
	1359, 1842, 0, 39, 1634, 40, 41, 42, 0, 0,
	1421, 1908, 1483, 0, 0, 0, 0, 1373, 1720, 1701,
	0, 0, 1720, 1720, 1720, 1720, 1720, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 1720, 785, 784, 794,
	795, 787, 788, 789, 790, 791, 792, 793, 786, 58,
	0, 797, 0, 88, 0, 68, 88, 0, 51, 88,
	494, 0, 0, 0, 0, 0, 68, 494, 64, 0,
	1691, 216, 64, 1694, 0, 0, 0, 0, 0, 82,
	0, 1461, 494, 0, 0, 0, 1720, 0, 0, 0,
	0, 65, 0, 66, 67, 65, 0, 66, 67, 0,
	0, 86, 86, 0, 1721, 0, 0, 0, 1721, 1721,
	1721, 1721, 1721, 0, 0, 1720, 1679, 1478, 0, 0,
	0, 0, 1842, 46, 1945, 0, 0, 1681, 972, 0,
	0, 0, 0, 0, 823, 0, 1412, 1401, 1400, 0,
	44, 0, 0, 69, 0, 0, 0, 69, 1402, 0,
	0, 1498, 62, 63, 0, 0, 43, 972, 48, 47,
	49, 1403, 0, 62, 63, 0, 0, 45, 0, 0,
	1766, 0, 1721, 785, 784, 794, 795, 787, 788, 789,
	790, 791, 792, 793, 786, 0, 0, 797, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 1992, 1993, 0,
	0, 1721, 785, 784, 794, 795, 787, 788, 789, 790,
	791, 792, 793, 786, 0, 0, 797, 0, 0, 1093,
	0, 68, 337, 88, 0, 68, 0, 906, 1802, 0,
	1804, 88, 0, 0, 59, 709, 494, 0, 727, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 746, 0, 0, 0, 0,
	494, 547, 0, 0, 0, 86, 86, 1396, 0, 0,
	2049, 0, 906, 1846, 86, 1847, 0, 1408, 0, 494,
	0, 777, 0, 0, 0, 0, 0, 822, 1414, 1415,
	0, 2067, 2068, 2069, 0, 0, 0, 0, 0, 0,
	1410, 0, 0, 0, 0, 1882, 0, 0, 0, 87,
	0, 1848, 0, 0, 0, 0, 1639, 0, 62, 63,
	0, 0, 62, 63, 1653, 1654, 1655, 852, 0, 1404,
	1405, 1407, 796, 0, 0, 1406, 1889, 0, 0, 0,
	1665, 0, 0, 1904, 0, 0, 0, 1905, 0, 0,
	1670, 0, 0, 1543, 1671, 0, 0, 0, 1672, 1673,
	0, 0, 1675, 1676, 1678, 1680, 1682, 2049, 0, 0,
	2122, 276, 0, 86, 0, 0, 0, 86, 0, 0,
	83, 86, 86, 86, 86, 86, 0, 0, 0, 0,
	0, 0, 0, 1939, 0, 86, 64, 0, 0, 1847,
	2049, 972, 906, 0, 823, 0, 1412, 1401, 1400, 337,
	494, 0, 0, 1844, 0, 0, 1966, 1967, 1402, 65,
	0, 66, 67, 955, 0, 0, 0, 0, 0, 0,
	0, 1403, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 785, 784, 794, 795,
	787, 788, 789, 790, 791, 792, 793, 786, 0, 0,
	797, 0, 0, 0, 0, 337, 0, 88, 796, 0,
	986, 69, 0, 0, 86, 494, 0, 0, 88, 0,
	0, 1413, 0, 61, 0, 0, 822, 0, 0, 1009,
	1010, 0, 0, 0, 0, 0, 0, 796, 278, 0,
	510, 283, 0, 87, 285, 84, 0, 0, 51, 0,
	60, 0, 0, 1790, 0, 0, 0, 0, 0, 0,
	494, 295, 296, 297, 298, 299, 300, 301, 0, 0,
	1800, 2084, 0, 759, 0, 0, 0, 1396, 494, 0,
	494, 0, 83, 0, 0, 822, 0, 1408, 0, 68,
	0, 83, 0, 0, 817, 0, 0, 0, 1414, 1415,
	0, 0, 1091, 0, 829, 830, 831, 832, 833, 834,
	1410, 1105, 1136, 0, 0, 0, 0, 0, 1677, 972,
	0, 249, 0, 0, 0, 0, 0, 240, 0, 239,
	64, 244, 245, 248, 0, 64, 1870, 241, 250, 1404,
	1405, 1407, 0, 0, 0, 1406, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 66, 67, 0, 65, 0,
	66, 67, 0, 1847, 785, 784, 794, 795, 787, 788,
	789, 790, 791, 792, 793, 786, 0, 1894, 797, 1895,
	1896, 1897, 1898, 1899, 0, 0, 62, 63, 0, 0,
	0, 624, 0, 0, 0, 0, 0, 0, 0, 0,
	823, 0, 1412, 1401, 1400, 69, 0, 0, 0, 243,
	69, 0, 0, 0, 1402, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1940, 1403, 83, 0,
	0, 0, 1236, 0, 727, 0, 823, 0, 1412, 1401,
	1400, 727, 0, 727, 759, 0, 0, 0, 0, 0,
	1402, 0, 0, 0, 0, 1265, 0, 88, 0, 0,
	0, 0, 0, 1403, 1969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 494,
	337, 796, 1916, 68, 0, 1979, 0, 0, 68, 0,
	0, 1413, 0, 817, 0, 0, 822, 0, 0, 58,
	0, 59, 0, 0, 0, 87, 0, 84, 0, 0,
	0, 1022, 0, 0, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 0,
	0, 0, 0, 1396, 0, 0, 0, 0, 1291, 0,
	80, 2076, 84, 1408, 0, 823, 494, 1412, 1401, 1400,
	0, 0, 817, 0, 1414, 1415, 0, 0, 0, 1402,
	0, 2033, 0, 0, 0, 0, 1410, 0, 0, 1396,
	0, 0, 1403, 1099, 0, 0, 0, 0, 0, 1408,
	62, 63, 0, 0, 0, 62, 63, 0, 242, 0,
	1414, 1415, 64, 0, 0, 1404, 1405, 1407, 0, 2070,
	0, 1406, 1410, 0, 0, 0, 0, 0, 0, 0,
	1351, 0, 0, 0, 0, 65, 0, 66, 67, 2081,
	0, 0, 0, 0, 0, 0, 337, 64, 0, 0,
	0, 1404, 1405, 1407, 2088, 2089, 2090, 1406, 0, 61,
	0, 0, 2093, 0, 61, 0, 0, 0, 0, 0,
	65, 0, 66, 67, 0, 1543, 0, 0, 0, 796,
	767, 770, 0, 0, 51, 0, 60, 69, 0, 51,
	823, 60, 1412, 1401, 1400, 1820, 337, 494, 1396, 0,
	0, 0, 0, 0, 1402, 0, 0, 0, 1408, 0,
	0, 0, 2129, 2130, 2131, 0, 0, 1403, 0, 1414,
	1415, 0, 69, 0, 0, 0, 0, 87, 0, 84,
	0, 1410, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2142, 0, 0, 0, 1471, 88, 0, 0,
	58, 58, 58, 58, 58, 58, 494, 494, 0, 0,
	1404, 1405, 1407, 0, 0, 68, 1406, 1413, 0, 671,
	674, 64, 0, 0, 248, 0, 64, 0, 677, 0,
	1490, 1493, 0, 0, 1543, 1281, 1282, 1283, 0, 0,
	494, 0, 0, 0, 65, 0, 66, 67, 0, 65,
	68, 66, 67, 1413, 0, 0, 0, 0, 0, 0,
	0, 1514, 0, 82, 64, 0, 0, 1915, 0, 0,
	0, 0, 0, 1396, 0, 0, 950, 953, 954, 0,
	0, 0, 0, 1408, 0, 0, 1525, 65, 0, 66,
	67, 0, 0, 1713, 1414, 1415, 69, 0, 1888, 0,
	243, 69, 0, 1909, 0, 0, 1410, 0, 0, 0,
	829, 0, 62, 63, 1540, 0, 0, 0, 0, 0,
	0, 0, 767, 770, 1286, 0, 0, 0, 0, 88,
	88, 0, 1546, 0, 494, 1404, 1405, 1407, 0, 69,
	0, 1406, 0, 87, 1585, 84, 852, 62, 63, 785,
	784, 794, 795, 787, 788, 789, 790, 791, 792, 793,
	786, 0, 1413, 797, 0, 0, 0, 0, 0, 33,
	0, 0, 0, 58, 68, 0, 0, 0, 0, 68,
	0, 494, 494, 0, 0, 0, 0, 59, 87, 0,
	84, 0, 59, 0, 0, 0, 0, 0, 727, 785,
	784, 794, 795, 787, 788, 789, 790, 791, 792, 793,
	786, 0, 1541, 797, 0, 0, 0, 68, 88, 87,
	0, 1848, 26, 28, 0, 21, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 22, 0,
	31, 0, 0, 862, 0, 0, 0, 0, 0, 0,
	494, 0, 0, 65, 0, 66, 67, 0, 0, 0,
	23, 24, 1687, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 63, 1697, 0, 64, 62, 63, 864, 0,
	1479, 1480, 1481, 0, 0, 0, 0, 1413, 1484, 1485,
	0, 0, 0, 88, 88, 0, 0, 0, 65, 0,
	66, 67, 88, 88, 0, 69, 64, 0, 27, 0,
	494, 0, 0, 0, 62, 63, 0, 0, 0, 0,
	0, 1099, 822, 822, 995, 996, 997, 999, 0, 65,
	0, 66, 67, 1001, 1000, 552, 553, 1810, 0, 494,
	0, 0, 0, 0, 0, 1518, 1519, 1520, 1521, 0,
	69, 0, 0, 168, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 0, 88, 0, 0, 0, 0, 0,
	0, 998, 0, 0, 0, 0, 865, 0, 19, 0,
	0, 69, 0, 68, 124, 863, 0, 0, 0, 0,
	869, 868, 0, 0, 0, 0, 1785, 1786, 1493, 0,
	0, 88, 0, 1208, 0, 88, 0, 1220, 0, 88,
	88, 88, 88, 88, 0, 0, 0, 1210, 0, 0,
	0, 88, 0, 88, 0, 0, 0, 88, 68, 0,
	0, 0, 1208, 0, 494, 296, 1220, 0, 0, 285,
	0, 0, 494, 299, 796, 0, 1210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 88, 25, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 29, 30, 0, 32, 0,
	62, 63, 0, 0, 0, 0, 1656, 0, 125, 1326,
	1328, 0, 1329, 1209, 796, 0, 0, 1332, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 1335,
	1336, 0, 0, 1337, 1338, 0, 1339, 1340, 0, 0,
	0, 0, 1209, 0, 0, 62, 63, 0, 0, 0,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 0,
	0, 0, 0, 0, 0, 1906, 0, 0, 0, 0,
	0, 0, 1003, 743, 494, 0, 62, 63, 0, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 823, 0,
	1412, 1401, 1400, 2056, 0, 0, 0, 0, 0, 0,
	0, 0, 1402, 0, 0, 823, 0, 1412, 1401, 1400,
	0, 0, 0, 0, 0, 1403, 1956, 0, 0, 1402,
	823, 0, 1412, 1401, 1400, 740, 0, 742, 741, 0,
	0, 0, 1403, 0, 1402, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1403, 0, 1978,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 764, 763, 0, 0, 0, 0, 0, 1986, 1706,
	1987, 88, 0, 0, 0, 0, 0, 0, 0, 765,
	0, 0, 0, 0, 0, 0, 0, 1984, 1985, 0,
	0, 0, 2056, 764, 763, 0, 0, 1794, 0, 0,
	1795, 0, 1796, 0, 1797, 0, 1798, 1799, 0, 0,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1396, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1408, 0, 1206, 0, 0, 0, 0, 1396, 0,
	0, 0, 1414, 1415, 0, 0, 0, 0, 1408, 0,
	0, 0, 0, 1396, 1410, 2062, 0, 0, 2063, 1414,
	1415, 2065, 1438, 1408, 0, 0, 0, 0, 0, 0,
	0, 1410, 0, 0, 1414, 1415, 0, 0, 2075, 0,
	0, 0, 0, 1404, 1405, 1407, 1410, 0, 0, 1406,
	0, 1978, 766, 0, 0, 0, 0, 0, 0, 0,
	1404, 1405, 1407, 0, 0, 822, 1406, 1711, 0, 0,
	0, 0, 0, 0, 0, 1404, 1405, 1407, 0, 0,
	0, 1406, 0, 0, 766, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2114, 822, 0, 0, 1711,
	0, 0, 0, 0, 0, 0, 0, 455, 444, 0,
	403, 457, 371, 391, 466, 393, 394, 429, 350, 412,
	0, 388, 369, 0, 0, 0, 374, 343, 383, 344,
	372, 405, 0, 370, 0, 446, 415, 0, 0, 0,
	464, 0, 420, 0, 0, 0, 0, 0, 407, 448,
	410, 439, 402, 430, 359, 419, 459, 389, 425, 460,
	0, 0, 0, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 1326, 0, 1332, 424, 454, 385, 356, 469,
	0, 428, 342, 422, 0, 0, 348, 351, 465, 452,
	379, 378, 0, 0, 0, 1413, 0, 0, 0, 406,
	411, 435, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1413, 0, 0, 375, 0, 418, 0, 0,
	0, 355, 349, 0, 404, 0, 0, 1413, 358, 0,
	376, 436, 0, 339, 442, 449, 401, 0, 0, 453,
	398, 397, 1510, 0, 0, 0, 0, 0, 390, 335,
	64, 467, 456, 408, 447, 373, 384, 0, 380, 0,
	0, 0, 381, 382, 0, 0, 417, 431, 0, 0,
	0, 0, 0, 65, 438, 66, 67, 1511, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 340, 377,
	440, 443, 363, 427, 352, 386, 433, 387, 409, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 1730,
	1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565,
	1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 0, 1118, 1124, 1122, 0, 0, 1119, 0, 0,
	1117, 0, 0, 1126, 1738, 0, 1125, 1111, 1121, 1123,
	1120, 1512, 0, 0, 0, 1110, 0, 1128, 1127, 1129,
	1108, 1131, 0, 0, 0, 1135, 1132, 1134, 1133, 0,
	1130, 0, 0, 0, 0, 0, 0, 0, 345, 1112,
	1113, 0, 0, 68, 346, 367, 450, 0, 0, 0,
	0, 1739, 1737, 1733, 1732, 0, 0, 0, 0, 426,
	1114, 1116, 0, 0, 1735, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 362, 366, 360, 361,
	413, 414, 461, 462, 463, 437, 357, 0, 364, 365,
	0, 445, 0, 0, 0, 416, 0, 0, 0, 468,
	0, 0, 0, 0, 0, 0, 0, 392, 341, 396,
	0, 0, 0, 0, 0, 0, 0, 353, 354, 0,
	0, 400, 395, 421, 423, 432, 441, 451, 458, 434,
	62, 63, 455, 444, 0, 403, 457, 371, 391, 466,
	393, 394, 429, 350, 412, 0, 388, 369, 0, 0,
	0, 374, 343, 383, 344, 372, 405, 0, 370, 0,
	446, 415, 0, 147, 0, 464, 0, 420, 0, 0,
	0, 0, 0, 407, 448, 410, 439, 402, 430, 359,
	419, 459, 389, 425, 460, 697, 0, 0, 80, 0,
	84, 51, 0, 0, 0, 0, 0, 0, 0, 0,
	424, 454, 385, 356, 469, 0, 428, 342, 422, 0,
	0, 348, 351, 465, 452, 379, 378, 0, 0, 0,
	0, 0, 0, 0, 406, 411, 435, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	375, 0, 418, 0, 0, 0, 355, 349, 0, 404,
	132, 0, 158, 358, 0, 376, 436, 0, 339, 442,
	449, 401, 0, 0, 453, 398, 397, 0, 0, 0,
	0, 0, 0, 390, 335, 64, 467, 456, 695, 447,
	373, 384, 0, 380, 0, 148, 0, 381, 382, 0,
	0, 417, 431, 0, 0, 0, 0, 0, 65, 438,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 340, 377, 440, 443, 363, 427, 352,
	386, 433, 387, 409, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	0, 178, 179, 0, 180, 181, 182, 184, 183, 149,
	150, 151, 152, 153, 157, 155, 154, 156, 126, 128,
	0, 124, 127, 133, 129, 130, 131, 145, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 143, 144, 146,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 68, 346,
	367, 450, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 696, 0, 0, 426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 362, 366, 360, 361, 413, 414, 461, 462, 463,
	437, 357, 0, 364, 365, 0, 445, 0, 592, 591,
	416, 0, 0, 0, 468, 125, 0, 0, 0, 0,
	0, 0, 392, 341, 396, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 0, 0, 400, 395, 421, 423,
	432, 441, 451, 458, 434, 62, 63, 455, 444, 0,
	403, 457, 371, 391, 466, 393, 394, 429, 350, 412,
	0, 388, 369, 0, 0, 0, 374, 343, 383, 344,
	372, 405, 0, 370, 0, 446, 415, 0, 0, 0,
	464, 0, 420, 0, 0, 0, 0, 0, 407, 448,
	410, 439, 402, 430, 359, 419, 459, 389, 425, 460,
	0, 0, 0, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 424, 454, 385, 356, 469,
	0, 428, 342, 422, 0, 0, 348, 351, 465, 452,
	379, 378, 0, 823, 0, 1412, 1401, 1400, 0, 406,
	411, 435, 399, 0, 0, 0, 0, 1402, 0, 0,
	0, 0, 0, 0, 0, 375, 0, 418, 0, 0,
	1403, 355, 349, 0, 404, 0, 0, 0, 358, 0,
	376, 436, 0, 339, 442, 449, 401, 0, 0, 453,
	398, 397, 0, 0, 0, 0, 0, 0, 390, 335,
	64, 467, 456, 408, 447, 373, 384, 0, 380, 0,
	0, 0, 381, 382, 0, 0, 417, 431, 0, 0,
	0, 0, 0, 65, 438, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 340, 377,
	440, 443, 363, 427, 352, 386, 433, 387, 409, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 1396, 0, 0, 1855,
	0, 0, 0, 0, 0, 0, 1408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1414, 1415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1410,
	0, 0, 0, 0, 1738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1404, 1405,
	1407, 0, 0, 0, 1406, 0, 0, 0, 345, 0,
	0, 0, 0, 68, 346, 367, 450, 0, 0, 0,
	0, 1739, 1737, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 1735, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 362, 366, 360, 361,
	413, 414, 461, 462, 463, 437, 357, 0, 364, 365,
	0, 445, 0, 0, 0, 416, 0, 0, 0, 468,
	0, 0, 0, 0, 0, 0, 0, 392, 341, 396,
	0, 0, 0, 0, 0, 0, 0, 353, 354, 0,
	0, 400, 395, 421, 423, 432, 441, 451, 458, 434,
	62, 63, 455, 444, 0, 403, 457, 371, 391, 466,
	393, 394, 429, 350, 412, 0, 388, 369, 0, 0,
	0, 374, 343, 383, 344, 372, 405, 0, 370, 0,
	446, 415, 0, 0, 0, 464, 0, 420, 0, 0,
	1413, 0, 0, 407, 448, 410, 439, 402, 430, 359,
	419, 459, 389, 425, 460, 0, 0, 0, 51, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	424, 454, 385, 356, 469, 0, 428, 342, 422, 0,
	0, 348, 351, 465, 452, 379, 378, 0, 0, 0,
	0, 0, 0, 0, 406, 411, 435, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	375, 0, 418, 0, 0, 0, 355, 349, 0, 404,
	0, 0, 0, 358, 0, 376, 436, 0, 339, 442,
	449, 401, 0, 0, 453, 398, 397, 0, 0, 0,
	0, 0, 0, 390, 335, 64, 467, 456, 408, 447,
	373, 384, 0, 380, 0, 0, 0, 381, 382, 0,
	0, 417, 431, 0, 0, 0, 0, 0, 65, 438,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 340, 377, 440, 443, 363, 427, 352,
	386, 433, 387, 409, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1738,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 68, 346,
	367, 450, 0, 0, 0, 0, 1739, 1737, 0, 0,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 1735,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 362, 366, 360, 361, 413, 414, 461, 462, 463,
	437, 357, 0, 364, 365, 0, 445, 0, 0, 0,
	416, 0, 0, 0, 468, 0, 0, 0, 0, 0,
	0, 0, 392, 341, 396, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 0, 0, 400, 395, 421, 423,
	432, 441, 451, 458, 434, 62, 63, 455, 444, 0,
	403, 457, 371, 391, 466, 393, 394, 429, 350, 412,
	0, 388, 369, 0, 0, 0, 374, 343, 383, 344,
	372, 405, 0, 370, 0, 446, 415, 0, 147, 0,
	464, 0, 420, 0, 0, 0, 0, 0, 407, 448,
	410, 439, 402, 430, 359, 419, 459, 389, 425, 460,
	697, 0, 0, 51, 0, 0, 51, 0, 0, 0,
	0, 0, 0, 0, 0, 424, 454, 385, 356, 469,
	0, 428, 342, 422, 0, 0, 348, 351, 465, 452,
	379, 378, 0, 0, 0, 0, 0, 0, 0, 406,
	411, 435, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 375, 0, 418, 0, 0,
	0, 355, 349, 0, 404, 132, 0, 158, 358, 0,
	376, 436, 0, 339, 442, 449, 401, 0, 0, 453,
	398, 397, 0, 0, 0, 0, 0, 0, 390, 335,
	64, 467, 456, 695, 447, 373, 384, 0, 380, 0,
	148, 0, 381, 382, 0, 0, 417, 431, 0, 0,
	0, 0, 0, 65, 438, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 340, 377,
	440, 443, 363, 427, 352, 386, 433, 387, 409, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 0, 178, 179, 0, 180,
	181, 182, 184, 183, 149, 150, 151, 152, 153, 157,
	155, 154, 156, 126, 128, 0, 124, 127, 133, 129,
	130, 131, 145, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 471, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 68, 346, 367, 450, 0, 0, 0,
	0, 0, 334, 0, 0, 0, 696, 0, 0, 426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 362, 366, 360, 361,
	413, 414, 461, 462, 463, 437, 357, 0, 364, 365,
	0, 445, 0, 0, 0, 416, 0, 0, 0, 468,
	125, 0, 0, 0, 0, 0, 0, 392, 341, 396,
	0, 0, 0, 0, 0, 0, 0, 353, 354, 0,
	0, 400, 395, 421, 423, 432, 441, 451, 458, 434,
	62, 63, 455, 444, 0, 403, 457, 371, 391, 466,
	393, 394, 429, 350, 412, 0, 388, 369, 0, 0,
	0, 374, 343, 383, 344, 372, 405, 0, 370, 0,
	446, 415, 0, 147, 0, 464, 0, 420, 0, 0,
	0, 0, 0, 407, 448, 410, 439, 402, 430, 359,
	419, 459, 389, 425, 460, 0, 0, 0, 80, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	424, 454, 385, 356, 469, 0, 428, 342, 422, 0,
	0, 348, 351, 465, 452, 379, 378, 0, 0, 0,
	0, 0, 0, 0, 406, 411, 435, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	375, 0, 418, 0, 0, 0, 355, 349, 0, 404,
	1057, 0, 158, 358, 0, 376, 436, 0, 339, 442,
	449, 401, 0, 0, 453, 398, 397, 0, 0, 0,
	0, 0, 0, 390, 335, 64, 467, 456, 408, 447,
	373, 384, 0, 380, 0, 1060, 0, 381, 382, 0,
	0, 417, 431, 0, 0, 0, 0, 0, 65, 438,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 340, 377, 440, 443, 363, 427, 352,
	386, 433, 387, 409, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	0, 178, 179, 0, 180, 181, 182, 184, 183, 149,
	1053, 151, 152, 1061, 157, 155, 154, 156, 126, 128,
	0, 124, 1056, 133, 129, 130, 131, 1059, 1058, 135,
	136, 137, 138, 139, 140, 141, 142, 143, 144, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 68, 346,
	367, 450, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 362, 366, 360, 361, 413, 414, 461, 462, 463,
	437, 357, 0, 364, 365, 0, 445, 0, 0, 0,
	416, 0, 0, 0, 468, 125, 0, 0, 0, 0,
	0, 0, 392, 341, 396, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 0, 0, 400, 395, 421, 423,
	432, 441, 451, 458, 434, 62, 63, 455, 444, 0,
	403, 457, 371, 391, 466, 393, 394, 429, 350, 412,
	0, 388, 369, 0, 0, 0, 374, 343, 383, 344,
	372, 405, 0, 370, 0, 446, 415, 0, 0, 0,
	464, 0, 420, 0, 0, 0, 0, 0, 407, 448,
	410, 439, 402, 430, 359, 419, 459, 389, 425, 460,
	0, 0, 0, 51, 0, 946, 0, 947, 0, 0,
	0, 0, 0, 0, 0, 424, 454, 385, 356, 469,
	0, 428, 342, 422, 0, 0, 348, 351, 465, 452,
	379, 378, 0, 0, 0, 0, 0, 0, 0, 406,
	411, 435, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 375, 0, 418, 0, 0,
	0, 355, 349, 0, 404, 0, 0, 0, 358, 0,
	376, 436, 0, 339, 442, 449, 401, 0, 0, 453,
	398, 397, 0, 0, 0, 0, 0, 0, 390, 335,
	64, 467, 456, 408, 447, 373, 384, 0, 380, 0,
	0, 0, 381, 382, 0, 0, 417, 431, 0, 0,
	0, 0, 0, 65, 438, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 340, 377,
	440, 443, 363, 427, 352, 386, 433, 387, 409, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 68, 346, 367, 450, 0, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 362, 366, 360, 361,
	413, 414, 461, 462, 463, 437, 357, 0, 364, 365,
	0, 445, 0, 0, 0, 416, 0, 0, 0, 468,
	0, 0, 0, 0, 0, 0, 0, 392, 341, 396,
	0, 0, 0, 0, 0, 0, 0, 353, 354, 0,
	0, 400, 395, 421, 423, 432, 441, 451, 458, 434,
	62, 63, 455, 444, 0, 403, 457, 371, 391, 466,
	393, 394, 429, 350, 412, 0, 388, 369, 0, 0,
	0, 374, 343, 383, 344, 372, 405, 0, 370, 0,
	446, 415, 0, 0, 0, 464, 0, 420, 0, 0,
	0, 0, 0, 407, 448, 410, 439, 402, 430, 359,
	419, 459, 389, 425, 460, 0, 490, 0, 51, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 492, 0,
	424, 454, 385, 356, 469, 0, 428, 342, 422, 0,
	0, 348, 351, 465, 452, 379, 378, 0, 0, 0,
	0, 0, 0, 0, 406, 411, 435, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	375, 0, 418, 0, 0, 0, 355, 349, 0, 404,
	0, 0, 0, 358, 0, 376, 436, 0, 339, 442,
	449, 401, 0, 0, 453, 398, 397, 0, 0, 0,
	0, 0, 0, 390, 335, 64, 467, 456, 408, 447,
	373, 384, 0, 380, 0, 0, 0, 381, 382, 0,
	0, 417, 431, 0, 0, 0, 0, 0, 65, 438,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 340, 377, 440, 443, 363, 427, 352,
	386, 433, 387, 409, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 68, 346,
	367, 450, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 362, 366, 360, 361, 413, 414, 461, 462, 463,
	437, 357, 0, 364, 365, 0, 445, 0, 0, 0,
	416, 0, 0, 0, 468, 0, 0, 0, 0, 0,
	0, 0, 392, 341, 396, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 0, 0, 400, 395, 421, 423,
	432, 441, 451, 458, 434, 62, 63, 455, 444, 0,
	403, 457, 371, 391, 466, 393, 394, 429, 350, 412,
	0, 388, 369, 0, 0, 0, 374, 343, 383, 344,
	372, 405, 0, 370, 0, 446, 415, 0, 0, 0,
	464, 0, 420, 0, 0, 0, 0, 0, 407, 448,
	410, 439, 402, 430, 359, 419, 459, 389, 425, 460,
	0, 0, 0, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 424, 454, 385, 356, 469,
	0, 428, 342, 422, 0, 0, 348, 351, 465, 452,
	379, 378, 0, 0, 0, 0, 0, 0, 0, 406,
	411, 435, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1793, 0, 375, 0, 418, 0, 0,
	0, 355, 349, 0, 404, 0, 0, 0, 358, 0,
	376, 436, 0, 339, 442, 449, 401, 0, 0, 453,
	398, 397, 0, 0, 0, 0, 0, 0, 390, 335,
	64, 467, 456, 408, 447, 373, 384, 0, 380, 0,
	0, 0, 381, 382, 0, 0, 417, 431, 0, 0,
	0, 0, 0, 65, 438, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 340, 377,
	440, 443, 363, 427, 352, 386, 433, 387, 409, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 68, 346, 367, 450, 0, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 362, 366, 360, 361,
	413, 414, 461, 462, 463, 437, 357, 0, 364, 365,
	0, 445, 0, 0, 0, 416, 0, 0, 0, 468,
	0, 0, 0, 0, 0, 0, 0, 392, 341, 396,
	0, 0, 0, 0, 0, 0, 0, 353, 354, 0,
	0, 400, 395, 421, 423, 432, 441, 451, 458, 434,
	62, 63, 455, 444, 0, 403, 457, 371, 391, 466,
	393, 394, 429, 350, 412, 0, 388, 369, 0, 0,
	0, 374, 343, 383, 344, 372, 405, 0, 370, 0,
	446, 415, 0, 0, 0, 464, 0, 420, 0, 0,
	0, 0, 0, 407, 448, 410, 439, 402, 430, 359,
	419, 459, 389, 425, 460, 0, 0, 0, 80, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	424, 454, 385, 356, 469, 0, 428, 342, 422, 0,
	0, 348, 351, 465, 452, 379, 378, 0, 0, 0,
	0, 0, 0, 0, 406, 411, 435, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	375, 0, 418, 0, 0, 0, 355, 349, 0, 404,
	0, 0, 0, 358, 0, 376, 436, 0, 339, 442,
	449, 401, 0, 0, 453, 398, 397, 0, 0, 0,
	0, 0, 0, 390, 335, 64, 467, 456, 408, 447,
	373, 384, 0, 380, 0, 0, 0, 381, 382, 0,
	0, 417, 431, 0, 0, 0, 0, 0, 65, 438,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 340, 377, 440, 443, 363, 427, 352,
	386, 433, 387, 409, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 68, 346,
	367, 450, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 362, 366, 360, 361, 413, 414, 461, 462, 463,
	437, 357, 0, 364, 365, 0, 445, 0, 0, 0,
	416, 0, 0, 0, 468, 0, 0, 0, 0, 0,
	0, 0, 392, 341, 396, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 0, 0, 400, 395, 421, 423,
	432, 441, 451, 458, 434, 62, 63, 455, 444, 0,
	403, 457, 371, 391, 466, 393, 394, 429, 350, 412,
	0, 388, 369, 0, 0, 0, 374, 343, 383, 344,
	372, 405, 0, 370, 0, 446, 415, 0, 0, 0,
	464, 0, 420, 0, 0, 0, 0, 0, 407, 448,
	410, 439, 402, 430, 359, 419, 459, 389, 425, 460,
	0, 0, 0, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 424, 454, 385, 356, 469,
	0, 428, 342, 422, 0, 0, 348, 351, 465, 452,
	379, 378, 689, 0, 0, 0, 0, 0, 0, 406,
	411, 435, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 375, 0, 418, 0, 0,
	0, 355, 349, 0, 404, 0, 0, 0, 358, 0,
	376, 436, 0, 339, 442, 449, 401, 0, 0, 453,
	398, 397, 0, 0, 0, 0, 0, 0, 390, 335,
	64, 467, 456, 408, 447, 373, 384, 0, 380, 0,
	0, 0, 381, 382, 0, 0, 417, 431, 0, 0,
	0, 0, 0, 65, 438, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 340, 377,
	440, 443, 363, 427, 352, 386, 433, 387, 409, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 68, 346, 367, 450, 0, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 362, 366, 360, 361,
	413, 414, 461, 462, 463, 437, 357, 0, 364, 365,
	0, 445, 0, 0, 0, 416, 0, 0, 0, 468,
	0, 0, 0, 0, 0, 0, 0, 392, 341, 396,
	0, 0, 0, 0, 0, 0, 0, 353, 354, 0,
	0, 400, 395, 421, 423, 432, 441, 451, 458, 434,
	62, 63, 455, 444, 0, 403, 457, 371, 391, 466,
	393, 394, 429, 350, 412, 0, 388, 369, 0, 0,
	0, 374, 343, 383, 344, 372, 405, 0, 370, 0,
	446, 415, 0, 0, 0, 464, 0, 420, 0, 0,
	0, 0, 0, 407, 448, 410, 439, 402, 430, 359,
	419, 459, 389, 425, 460, 0, 0, 0, 51, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	424, 454, 385, 356, 469, 0, 428, 342, 422, 0,
	0, 348, 351, 465, 452, 379, 378, 0, 0, 0,
	0, 0, 0, 0, 406, 411, 435, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	375, 0, 418, 0, 0, 0, 355, 349, 0, 404,
	0, 0, 0, 358, 0, 376, 436, 0, 339, 442,
	449, 401, 0, 0, 453, 398, 397, 0, 0, 0,
	0, 0, 0, 390, 335, 64, 467, 456, 408, 447,
	373, 384, 0, 380, 0, 0, 0, 381, 382, 0,
	0, 417, 431, 0, 0, 0, 0, 0, 65, 438,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 340, 377, 440, 443, 363, 427, 352,
	386, 433, 387, 409, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 68, 346,
	367, 450, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 362, 366, 360, 361, 413, 414, 461, 462, 463,
	437, 357, 0, 364, 365, 0, 445, 0, 0, 0,
	416, 0, 0, 0, 468, 0, 0, 0, 0, 0,
	0, 0, 392, 341, 396, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 0, 0, 400, 395, 421, 423,
	432, 441, 451, 458, 434, 62, 63, 455, 2053, 0,
	403, 457, 371, 391, 466, 393, 394, 429, 350, 412,
	0, 388, 369, 0, 0, 0, 374, 343, 383, 344,
	372, 405, 0, 370, 0, 446, 415, 0, 0, 0,
	464, 0, 420, 0, 0, 0, 0, 0, 407, 448,
	410, 439, 402, 430, 359, 419, 459, 389, 425, 460,
	510, 0, 0, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 424, 454, 385, 356, 469,
	0, 428, 342, 422, 0, 0, 348, 351, 465, 452,
	379, 378, 0, 823, 0, 1412, 1401, 1400, 0, 406,
	411, 435, 399, 0, 0, 0, 0, 1402, 0, 0,
	0, 0, 0, 0, 0, 375, 0, 418, 0, 0,
	1403, 355, 349, 0, 404, 0, 0, 0, 358, 0,
	376, 436, 0, 339, 442, 449, 401, 0, 0, 453,
	398, 397, 0, 0, 0, 0, 0, 0, 390, 0,
	64, 467, 456, 408, 447, 373, 384, 0, 380, 0,
	0, 0, 381, 382, 0, 0, 417, 431, 0, 0,
	0, 0, 0, 65, 438, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 340, 377,
	440, 443, 363, 427, 352, 386, 433, 387, 409, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 1396, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1414, 1415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1410,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1404, 1405,
	1407, 0, 0, 0, 1406, 0, 0, 0, 345, 0,
	0, 0, 0, 68, 346, 367, 450, 0, 0, 0,
	0, 0, 1382, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 362, 366, 360, 361,
	413, 414, 461, 462, 463, 437, 357, 0, 364, 365,
	0, 445, 0, 0, 0, 416, 0, 0, 0, 468,
	0, 0, 0, 0, 0, 0, 0, 392, 341, 396,
	0, 0, 0, 0, 0, 0, 0, 353, 354, 0,
	0, 400, 395, 421, 423, 432, 441, 451, 458, 434,
	62, 63, 455, 444, 0, 403, 457, 371, 391, 466,
	393, 394, 429, 350, 412, 0, 388, 369, 0, 0,
	0, 374, 343, 383, 344, 372, 405, 0, 370, 0,
	446, 415, 0, 0, 0, 464, 0, 420, 0, 0,
	1413, 0, 0, 407, 448, 410, 439, 402, 430, 359,
	419, 459, 389, 425, 460, 0, 0, 0, 80, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	424, 454, 385, 356, 469, 0, 428, 342, 422, 0,
	0, 348, 351, 465, 452, 379, 378, 0, 823, 0,
	1412, 1401, 1400, 0, 406, 411, 435, 399, 0, 0,
	0, 0, 1402, 0, 0, 0, 0, 0, 0, 0,
	375, 0, 418, 0, 0, 1403, 355, 349, 0, 404,
	0, 0, 0, 358, 0, 376, 436, 0, 339, 442,
	449, 401, 0, 0, 453, 398, 397, 0, 0, 0,
	0, 0, 0, 390, 0, 64, 467, 456, 408, 447,
	373, 384, 0, 380, 0, 0, 0, 381, 382, 0,
	0, 417, 431, 0, 0, 0, 0, 0, 65, 438,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 340, 377, 440, 443, 363, 427, 352,
	386, 433, 387, 409, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 1912, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1408, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1414, 1415, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1410, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1404, 1405, 1407, 0, 0, 0, 1406,
	0, 0, 0, 345, 0, 0, 0, 0, 68, 346,
	367, 450, 0, 0, 0, 0, 0, 1711, 0, 0,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 362, 366, 360, 361, 413, 414, 461, 462, 463,
	437, 357, 0, 364, 365, 0, 445, 0, 0, 0,
	416, 0, 0, 0, 468, 0, 0, 0, 0, 0,
	0, 0, 392, 341, 396, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 0, 0, 400, 395, 421, 423,
	432, 441, 451, 458, 434, 62, 63, 455, 444, 0,
	403, 457, 371, 391, 466, 393, 394, 429, 350, 412,
	0, 388, 369, 0, 0, 0, 374, 343, 383, 344,
	372, 405, 0, 370, 0, 446, 415, 0, 0, 0,
	464, 0, 420, 0, 0, 1413, 0, 0, 407, 448,
	410, 439, 402, 430, 359, 419, 459, 389, 425, 460,
	0, 0, 0, 87, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 424, 454, 385, 356, 469,
	0, 428, 342, 422, 0, 0, 348, 351, 465, 452,
	379, 378, 0, 0, 0, 0, 0, 0, 0, 406,
	411, 435, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 375, 0, 418, 0, 0,
	0, 355, 349, 0, 404, 0, 0, 0, 358, 0,
	376, 436, 0, 339, 442, 449, 401, 0, 0, 453,
	398, 397, 0, 0, 0, 0, 0, 0, 390, 0,
	64, 467, 456, 408, 447, 373, 384, 0, 380, 0,
	0, 0, 381, 382, 0, 0, 417, 431, 0, 0,
	0, 0, 0, 65, 438, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 340, 377,
	440, 443, 363, 427, 352, 386, 433, 387, 409, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 68, 346, 367, 450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 362, 366, 360, 361,
	413, 414, 461, 462, 463, 437, 357, 0, 364, 365,
	0, 445, 0, 0, 0, 416, 0, 0, 0, 468,
	0, 0, 0, 0, 0, 0, 0, 392, 341, 396,
	0, 0, 0, 0, 0, 0, 0, 353, 354, 0,
	0, 400, 395, 421, 423, 432, 441, 451, 458, 434,
	62, 63, 455, 444, 0, 403, 457, 371, 391, 466,
	393, 394, 429, 350, 412, 0, 388, 369, 0, 0,
	0, 374, 343, 383, 344, 372, 405, 0, 370, 0,
	446, 415, 0, 0, 0, 464, 0, 420, 0, 0,
	0, 0, 0, 407, 448, 410, 439, 402, 430, 359,
	419, 459, 389, 425, 460, 0, 0, 0, 51, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	424, 454, 385, 356, 469, 0, 428, 342, 422, 0,
	0, 348, 351, 465, 452, 379, 378, 0, 0, 0,
	0, 0, 0, 0, 406, 411, 435, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	375, 0, 418, 0, 0, 0, 355, 349, 0, 404,
	0, 0, 0, 358, 0, 376, 436, 0, 339, 442,
	449, 401, 0, 0, 453, 398, 397, 0, 0, 0,
	0, 0, 0, 390, 0, 64, 467, 456, 408, 447,
	373, 384, 0, 380, 0, 0, 0, 381, 382, 0,
	0, 417, 431, 0, 0, 0, 0, 0, 65, 438,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 340, 377, 440, 443, 363, 427, 352,
	386, 433, 387, 409, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 68, 346,
	367, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 362, 366, 360, 361, 413, 414, 461, 462, 463,
	437, 357, 0, 364, 365, 0, 445, 0, 0, 0,
	416, 0, 0, 0, 468, 0, 0, 0, 0, 0,
	0, 0, 392, 341, 396, 0, 0, 0, 0, 0,
	559, 0, 353, 354, 0, 0, 400, 395, 421, 423,
	432, 441, 451, 458, 434, 62, 63, 558, 0, 0,
	0, 0, 557, 823, 0, 1412, 1401, 1400, 0, 602,
	0, 603, 0, 0, 0, 0, 0, 1402, 0, 593,
	594, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	1403, 0, 80, 584, 712, 713, 715, 716, 585, 586,
	0, 0, 0, 714, 717, 552, 553, 560, 0, 0,
	0, 0, 555, 575, 0, 0, 601, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 764, 763, 0, 0,
	573, 711, 0, 0, 0, 0, 613, 0, 574, 0,
	0, 1107, 572, 576, 765, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	611, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1396, 0, 0, 0,
	0, 0, 65, 0, 66, 67, 1408, 0, 0, 0,
	0, 0, 0, 582, 0, 0, 0, 1414, 1415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1410,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 1404, 1405,
	1407, 1118, 1124, 1122, 1406, 0, 1119, 766, 0, 1117,
	0, 0, 1126, 0, 0, 1125, 1111, 1121, 1123, 1120,
	1115, 569, 1748, 0, 1110, 0, 1128, 1127, 1129, 1108,
	1131, 0, 0, 0, 1135, 1132, 1134, 1133, 604, 1130,
	0, 0, 0, 0, 0, 0, 0, 0, 1112, 1113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	615, 590, 718, 719, 823, 0, 1412, 1401, 1400, 1114,
	1116, 0, 68, 147, 0, 0, 61, 0, 1402, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 1403, 0, 588, 0, 0, 0, 0, 0, 1424,
	0, 51, 0, 1422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 720, 612, 721, 722, 608,
	609, 607, 606, 605, 614, 595, 596, 597, 598, 600,
	1421, 0, 592, 591, 599, 0, 0, 764, 763, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	1413, 0, 0, 0, 0, 765, 0, 0, 0, 0,
	132, 0, 158, 275, 0, 0, 0, 0, 0, 62,
	63, 610, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1408, 0, 0,
	0, 65, 0, 66, 67, 0, 0, 0, 1414, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1404,
	1405, 1407, 0, 69, 0, 1406, 0, 0, 766, 0,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	0, 178, 179, 1711, 180, 181, 182, 184, 183, 149,
	150, 151, 152, 153, 157, 155, 154, 156, 126, 128,
	0, 124, 127, 133, 129, 130, 131, 145, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 143, 144, 146,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 0,
	147, 0, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 1424, 0, 51, 0,
	1422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 1420, 0, 0, 0,
	0, 1413, 0, 0, 0, 0, 0, 132, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 63,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 0, 178, 179,
	0, 180, 181, 182, 184, 183, 149, 150, 151, 152,
	153, 157, 155, 154, 156, 126, 128, 0, 124, 127,
	133, 129, 130, 131, 145, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 146, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 0, 0, 0, 0,
	0, 559, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 558, 0,
	0, 59, 0, 557, 0, 0, 0, 0, 0, 0,
	602, 0, 603, 0, 0, 0, 0, 0, 0, 0,
	593, 594, 0, 0, 0, 0, 0, 0, 1954, 0,
	510, 0, 0, 80, 584, 712, 713, 715, 716, 585,
	586, 0, 0, 0, 714, 717, 552, 553, 560, 1955,
	0, 0, 125, 555, 575, 0, 0, 601, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 711, 0, 0, 62, 63, 613, 0, 574,
	0, 0, 571, 572, 576, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 611, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 567, 0, 0,
	0, 0, 0, 0, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 66, 67, 0, 0, 0,
	1087, 0, 558, 0, 582, 0, 0, 557, 0, 0,
	0, 0, 0, 0, 602, 0, 603, 0, 0, 0,
	0, 0, 0, 0, 593, 594, 0, 0, 0, 0,
	0, 0, 0, 0, 510, 0, 0, 80, 584, 712,
	713, 715, 716, 585, 586, 69, 0, 0, 714, 717,
	552, 553, 560, 0, 0, 0, 0, 555, 575, 0,
	0, 601, 0, 823, 0, 1412, 1401, 1400, 0, 0,
	0, 568, 569, 0, 0, 0, 0, 1402, 0, 0,
	0, 0, 0, 0, 0, 573, 711, 1092, 0, 604,
	1403, 613, 0, 574, 0, 0, 571, 572, 576, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 615, 590, 718, 719, 611, 0, 0, 0, 0,
	0, 0, 0, 68, 64, 0, 0, 0, 0, 0,
	0, 567, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 588, 2117, 0, 65, 0, 66,
	67, 0, 0, 0, 0, 0, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 720, 612, 721, 722,
	608, 609, 607, 606, 605, 614, 595, 596, 597, 598,
	600, 0, 0, 592, 591, 599, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1396, 0, 0, 69,
	0, 0, 0, 0, 0, 0, 1408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1414, 1415, 0,
	62, 63, 610, 0, 0, 568, 569, 0, 0, 1410,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1404, 1405,
	1407, 0, 0, 0, 1406, 615, 590, 718, 719, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 823, 0, 1412, 1401, 1400, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 1402, 0, 0, 588, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1403, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	720, 612, 721, 722, 608, 609, 607, 606, 605, 614,
	595, 596, 597, 598, 600, 0, 0, 592, 591, 599,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 558, 0, 0,
	0, 0, 557, 2112, 0, 0, 0, 0, 0, 602,
	0, 603, 0, 0, 62, 63, 610, 0, 0, 593,
	594, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	0, 972, 80, 584, 712, 713, 715, 716, 585, 586,
	0, 0, 0, 714, 717, 552, 553, 560, 0, 0,
	1413, 0, 555, 575, 1396, 0, 601, 0, 0, 0,
	0, 0, 0, 0, 1408, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1414, 1415, 0, 0, 0,
	573, 711, 0, 0, 0, 0, 613, 1410, 574, 0,
	0, 571, 572, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	611, 0, 0, 0, 0, 0, 1404, 1405, 1407, 64,
	0, 0, 1406, 0, 0, 0, 567, 0, 0, 0,
	0, 0, 0, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 65, 0, 66, 67, 0, 0, 0, 0,
	0, 558, 0, 582, 0, 0, 557, 0, 0, 0,
	0, 0, 0, 602, 0, 603, 0, 0, 0, 0,
	0, 0, 0, 593, 594, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 0, 0, 80, 584, 712, 713,
	715, 716, 585, 586, 69, 0, 0, 714, 717, 552,
	553, 560, 0, 0, 0, 0, 555, 575, 0, 0,
	601, 0, 823, 0, 1412, 1401, 1400, 0, 0, 0,
	568, 569, 0, 0, 0, 0, 1402, 0, 0, 0,
	0, 0, 0, 0, 573, 711, 1092, 0, 604, 1403,
	613, 0, 574, 0, 0, 571, 572, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	615, 590, 718, 719, 611, 0, 0, 0, 1413, 0,
	0, 0, 68, 64, 0, 0, 0, 0, 0, 0,
	567, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 588, 1907, 0, 65, 0, 66, 67,
	0, 0, 0, 0, 0, 0, 0, 582, 0, 0,
	0, 0, 0, 0, 0, 720, 612, 721, 722, 608,
	609, 607, 606, 605, 614, 595, 596, 597, 598, 600,
	0, 0, 592, 591, 599, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1396, 0, 0, 69, 0,
	0, 0, 0, 0, 0, 1408, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1414, 1415, 0, 62,
	63, 610, 0, 0, 568, 569, 0, 0, 1410, 823,
	0, 1412, 1401, 1400, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 1402, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1403, 1404, 1405, 1407,
	0, 0, 0, 1406, 615, 590, 718, 719, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 588, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1813, 0, 0, 0, 0, 0, 0, 0, 720,
	612, 721, 722, 608, 609, 607, 606, 605, 614, 595,
	596, 597, 598, 600, 0, 0, 592, 591, 599, 0,
	0, 0, 0, 0, 823, 0, 0, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1396, 0, 558, 0, 0, 0, 0, 557,
	0, 0, 1408, 62, 63, 610, 602, 0, 603, 0,
	0, 0, 0, 1414, 1415, 0, 593, 594, 0, 0,
	0, 0, 0, 0, 0, 1410, 510, 0, 0, 80,
	584, 712, 713, 715, 716, 585, 586, 0, 0, 1413,
	714, 717, 552, 553, 560, 0, 0, 0, 0, 555,
	575, 0, 0, 601, 1404, 1405, 1407, 0, 0, 0,
	1406, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 711, 0,
	0, 0, 0, 613, 0, 574, 0, 0, 571, 572,
	576, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 567, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	0, 66, 67, 0, 0, 0, 0, 0, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 0, 603, 0, 0, 0, 0, 0, 0, 0,
	593, 594, 0, 0, 0, 0, 0, 0, 0, 0,
	510, 0, 0, 80, 584, 712, 713, 715, 716, 585,
	586, 69, 0, 0, 714, 717, 552, 553, 0, 0,
	0, 0, 0, 0, 575, 0, 1413, 601, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 569, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 711, 0, 0, 604, 0, 613, 0, 574,
	0, 0, 571, 572, 576, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 615, 590, 718,
	719, 611, 0, 0, 0, 0, 0, 0, 0, 68,
	64, 0, 0, 0, 0, 0, 0, 567, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	588, 0, 0, 65, 0, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 582, 0, 0, 0, 0, 0,
	0, 0, 720, 612, 721, 722, 608, 609, 607, 606,
	605, 614, 595, 596, 597, 598, 600, 0, 0, 592,
	591, 599, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 62, 63, 610, 0,
	0, 568, 569, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 615, 590, 718, 719, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 588, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 720, 612, 721, 722,
	608, 609, 607, 606, 605, 614, 595, 596, 597, 598,
	600, 0, 0, 592, 591, 599, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 558, 0, 0, 0, 0, 557, 0,
	0, 0, 0, 0, 0, 602, 0, 603, 0, 0,
	62, 63, 610, 0, 0, 593, 594, 1097, 0, 0,
	0, 0, 0, 0, 0, 510, 0, 0, 80, 584,
	712, 713, 715, 716, 585, 586, 0, 0, 0, 714,
	717, 552, 553, 560, 0, 0, 0, 0, 555, 575,
	0, 0, 601, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 573, 711, 0, 0,
	0, 0, 613, 0, 574, 0, 0, 571, 572, 576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 611, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 567, 0, 0, 0, 0, 0, 0, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	66, 67, 0, 0, 0, 0, 0, 558, 0, 582,
	0, 0, 557, 0, 0, 0, 0, 0, 0, 602,
	0, 603, 0, 0, 0, 0, 0, 0, 0, 593,
	594, 0, 0, 0, 0, 0, 0, 0, 0, 753,
	0, 0, 80, 584, 537, 538, 539, 541, 585, 586,
	69, 0, 0, 544, 542, 552, 553, 560, 0, 0,
	0, 0, 555, 575, 0, 0, 601, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 569, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	573, 540, 0, 0, 604, 0, 613, 0, 574, 0,
	0, 571, 572, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 615, 590, 718, 719,
	611, 0, 0, 0, 0, 0, 0, 0, 68, 64,
	0, 0, 0, 0, 0, 0, 567, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 588,
	0, 0, 65, 0, 66, 67, 0, 0, 0, 0,
	0, 0, 0, 582, 0, 0, 0, 0, 0, 0,
	0, 720, 612, 721, 722, 608, 609, 607, 606, 605,
	614, 595, 596, 597, 598, 600, 0, 0, 592, 591,
	599, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 63, 610, 0, 0,
	568, 569, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	615, 590, 546, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 588, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 612, 550, 549, 608,
	609, 607, 606, 605, 614, 595, 596, 597, 598, 600,
	0, 0, 592, 591, 599, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 558, 0, 0, 0, 0, 557, 0, 0,
	0, 0, 0, 0, 602, 0, 603, 0, 0, 62,
	63, 610, 0, 0, 593, 594, 0, 0, 0, 0,
	0, 0, 0, 0, 535, 0, 0, 80, 584, 537,
	538, 539, 541, 585, 586, 0, 0, 0, 544, 542,
	552, 553, 560, 0, 0, 0, 0, 555, 575, 0,
	0, 601, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 540, 0, 0, 0,
	0, 613, 0, 574, 0, 0, 571, 572, 576, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 611, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 567, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 66,
	67, 1023, 1024, 1025, 0, 0, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	603, 0, 0, 0, 0, 0, 0, 0, 593, 594,
	0, 0, 0, 0, 0, 0, 0, 0, 510, 0,
	0, 80, 584, 712, 713, 715, 716, 585, 586, 69,
	0, 0, 714, 717, 552, 553, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 601, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 569, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	711, 0, 0, 604, 0, 613, 0, 574, 0, 0,
	571, 572, 576, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 615, 590, 546, 551, 611,
	0, 0, 0, 0, 0, 0, 0, 68, 64, 0,
	0, 0, 0, 0, 0, 567, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 588, 0,
	0, 65, 0, 66, 67, 0, 0, 0, 0, 0,
	0, 0, 582, 0, 0, 0, 0, 0, 0, 0,
	548, 612, 550, 549, 608, 609, 607, 606, 605, 614,
	595, 596, 597, 598, 600, 0, 0, 592, 591, 599,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 63, 610, 0, 0, 568,
	569, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 615,
	590, 718, 719, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 588, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 720, 612, 721, 722, 608, 609,
	607, 606, 605, 614, 595, 596, 597, 598, 600, 0,
	0, 592, 591, 599, 0, 0, 0, 602, 0, 603,
	0, 0, 0, 0, 0, 0, 0, 593, 594, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 0, 0,
	80, 584, 712, 713, 715, 716, 585, 586, 62, 63,
	610, 714, 717, 552, 553, 0, 0, 0, 0, 0,
	0, 575, 0, 0, 601, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 573, 711,
	0, 0, 0, 0, 613, 0, 574, 0, 0, 571,
	572, 576, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 611, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 0, 66, 67, 0, 0, 0, 0, 0, 0,
	0, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 0, 603, 0, 0, 0, 0, 0, 0,
	0, 593, 594, 0, 0, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 80, 584, 712, 713, 715, 716,
	585, 586, 69, 0, 0, 714, 717, 552, 553, 0,
	0, 0, 0, 0, 0, 575, 0, 0, 601, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 569,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 573, 711, 0, 0, 604, 0, 613, 0,
	574, 0, 0, 571, 572, 576, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 615, 590,
	718, 719, 611, 0, 0, 0, 0, 0, 0, 0,
	68, 64, 0, 0, 0, 0, 0, 0, 567, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 588, 0, 0, 65, 0, 66, 67, 0, 0,
	0, 0, 0, 0, 0, 582, 0, 0, 0, 0,
	0, 0, 0, 720, 612, 721, 722, 608, 609, 607,
	606, 605, 614, 595, 596, 597, 598, 600, 0, 0,
	592, 591, 599, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 63, 610,
	0, 0, 568, 569, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 615, 590, 718, 719, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 588, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 720, 612, 721,
	722, 608, 609, 607, 606, 605, 614, 595, 596, 597,
	598, 600, 0, 0, 592, 591, 599, 0, 0, 0,
	602, 0, 603, 0, 0, 0, 0, 0, 0, 0,
	593, 594, 0, 0, 0, 0, 0, 0, 0, 0,
	510, 0, 0, 80, 584, 712, 713, 757, 758, 585,
	586, 62, 63, 610, 714, 717, 552, 553, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 601, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 711, 0, 0, 0, 0, 613, 0, 574,
	0, 0, 571, 572, 576, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 611, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 567, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 582, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 569, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 615, 590, 718, 719, 132, 0, 1006, 0, 0,
	0, 0, 0, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 588, 0, 0, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 720, 612, 721, 722,
	608, 609, 607, 606, 605, 614, 595, 596, 597, 598,
	600, 0, 0, 592, 591, 599, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 63, 610, 0, 0, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 0, 178, 179, 0, 180,
	181, 182, 184, 183, 149, 150, 151, 152, 153, 157,
	155, 154, 156, 126, 128, 0, 124, 127, 133, 129,
	130, 131, 145, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 146, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 0, 0, 0, 0, 1005, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125,
}

var yyPact = [...]int16{
	390, -1000, -218, -1000, -1000, -1000, -1000, 1582, 3340, 520,
	1627, 1468, 1608, -1000, -1000, -1000, 3123, 618, 611, 608,
	348, 579, 1117, 2025, 3377, 650, 491, 432, 490, -1000,
	-159, -136, -1000, -62, 645, -1000, 1397, 412, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1396, 410, 507, 1329, -1000, 4470, 4470, 4470,
	4470, 4470, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	440, 1117, 1117, 490, 254, 490, 1607, 505, 1603, 877,
	-1000, -1000, -1000, 707, -1000, 1733, 704, -1000, -1000, 490,
	1057, 876, -1000, -1000, -1000, 873, 3377, 872, -1000, -1000,
	-1000, -1000, 2014, 644, 2257, 1602, 642, 634, 1597, 629,
	3377, 3377, 227, 2707, 185, -137, 23, -1000, -1000, -1000,
	-1000, 701, 1486, -1000, -1000, -1000, 1486, 96, 1570, 1486,
	1570, -1000, 1486, 1570, 76, 76, 76, 76, 76, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1567, 1566, -1000, 1486,
	1486, 1486, 1486, 1486, 1486, 1486, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1561, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1555, 143,
	1555, 1504, 1504, -1000, -1000, 185, 185, 185, 185, 1565,
	3377, 1117, 1594, 1590, 3377, -184, 3377, 3377, 1790, -1000,
	-1000, -1000, 282, 3377, 1712, 7627, 5655, 9602, 3377, -1000,
	-1000, 1709, 1707, -1000, 1705, 653, 3377, 3377, -1000, 625,
	3377, 3377, 621, 3377, 780, 698, 6837, -1000, 1676, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1560, 919, 1117,
	446, 375, 1470, 1473, 565, 647, 537, 1251, 441, -1000,
	-1000, -1000, 974, -1000, 1117, -1000, 1823, -1000, -1000, 433,
	-1000, 431, 870, 1105, 3377, 1558, 218, 1556, 13226, 999,
	-1000, -244, -1000, 21, -1000, 1117, -1000, 952, 76, 1486,
	-1000, 76, 976, 76, 76, -1000, -1000, 730, 1685, 730,
	730, 730, 730, 1096, 1096, -89, -89, -1000, -1000, -1000,
	-1000, -1000, 992, -1000, 989, 1555, -1000, -1000, -1000, 970,
	-1000, 3377, 1117, 1551, 1589, 3377, 3377, 1732, 576, -1000,
	-1000, 1726, 1723, 1395, -1000, -1000, 273, -1000, -1000, 505,
	1117, -1000, 697, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1547, -1000, -1000, 1411, -1000, 406, -1000, 3128, 649,
	663, -1000, 3377, 559, 1812, 3377, 1810, 1095, 9207, 8022,
	227, -1000, -1000, -1000, -1000, -1000, 5652, -1000, 1806, 1753,
	417, 55, -153, 1236, -1000, -1000, 1546, -1000, -1000, 12717,
	-1000, 8417, 12717, 1227, 1223, -1000, 1210, 1185, 74, 1117,
	-1000, -151, 166, 31, -1000, -1000, 1470, -1000, 1542, 12717,
	1722, -1000, 1688, 779, -1000, 12871, -1000, -197, -1000, -1000,
	14192, -1000, -197, -1000, -1000, -1000, 1470, 426, 1540, 1539,
	1470, 1538, -1000, -1000, -1000, 12717, 64, 1470, 1470, 1470,
	1470, 12208, -1000, 664, -1000, -1000, -1000, 1046, 1093, 1078,
	-1000, 13709, 13709, 13709, 13709, 13709, 13709, -1000, -1000, -1000,
	-1000, 36, -1000, 1092, -1000, -1000, -1000, 696, 695, -1000,
	-220, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
	1470, 12717, 1470, 1670, 1470, 1470, 1470, 1470, 1470, 1470,
	3373, 1470, 1470, 1470, 1470, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1390, 730, 76, 730, 1389, 1382, 730, 730,
	-1000, -1000, 1176, 771, -1000, -1000, -1000, -1000, 1327, -1000,
	1325, -1000, 135, 131, -1000, 1378, 1452, -1000, 1323, 1466,
	1588, 4467, 3377, 1537, 1534, 1469, 490, 1469, 1752, 339,
	3377, 1790, 500, 1790, 505, 8417, 1067, 1117, -1000, -1000,
	-1000, 3123, -1000, 462, 1117, -1000, -1000, -1000, 547, 524,
	3377, 550, 524, 524, 1803, 524, -1000, 762, 693, 6442,
	-1000, -1000, 1305, -1000, 275, 1486, 1486, 12717, 593, 593,
	-152, 383, 381, -153, 1470, 1461, 1531, -1000, 5652, 676,
	-1000, 13709, -197, -1000, -1000, -1000, -1000, -1000, 1470, 1470,
	1470, 1470, 1470, 1530, 1303, -1000, 211, 237, -1000, -1000,
	-1000, -1000, -1000, -153, 1529, -1000, -1000, -1000, 870, -1000,
	1528, 1527, -1000, 1526, 12717, 500, 964, 188, -1000, 1447,
	-1000, 962, 1376, 3511, 1370, -1000, 14365, -1000, -1000, 83,
	12208, -1000, 1122, 12717, 12717, 995, -1000, -1000, 963, 1122,
	-1000, 936, -1000, 1122, -1000, 1300, 1122, 391, 13380, 953,
	808, 13709, 13709, 13709, 13709, 13709, 13709, 13709, 13709, 13709,
	13709, 13709, 13709, 13709, 13709, 13709, 6050, 1010, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1163, -1000, 1469, 2999, 1122, 1122, 1122, 319, 1291, 12208,
	1770, 1828, 426, -1000, 1099, 1099, -1000, -1000, -1000, 83,
	83, 83, 83, 83, 151, -1000, 11336, -1000, 7627, 8417,
	12362, 11845, 11845, 11845, 11845, 10371, 12717, 11845, 11845, 11845,
	1737, 862, 426, 2999, 1750, 1122, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 93, -1000, -1000, -222, -1000, -223, -1000,
	11845, 11845, 11845, 11845, -1000, -1000, 730, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 76, 1064, 76, 19, 17,
	-1000, 960, -1000, 954, 4467, 1117, 3377, 1317, 1437, -1000,
	1470, 690, 1521, 500, 5652, -1000, 1469, 3377, -1000, 532,
	1746, -1000, -1000, 1745, -1000, 1436, -1000, -1000, 1422, 1790,
	-1000, 1298, -1000, 1511, -1000, 1117, -1000, -1000, 315, 1117,
	-1000, 221, -1000, -1000, -1000, -1000, -1000, 524, 221, 463,
	524, 463, 1063, 1117, -1000, -1000, -1000, -1000, 3596, 5652,
	1714, -1000, -1000, -1000, 1714, 763, 907, -1000, -1000, 889,
	347, 904, -1000, 1117, -153, 1510, 12717, 8417, 12717, 5652,
	1296, 350, -1000, -1000, 1122, 12717, 1782, 12717, 1116, 1116,
	-1000, 1117, 1470, 963, 936, 1300, 676, 1294, -113, 12717,
	1508, 779, -1000, -1000, 1255, -197, -1000, -1000, 949, -1000,
	-197, -1000, -1000, 1470, -1000, -1000, -1000, -137, -1000, 391,
	405, -1000, -1000, 931, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3344, 1470, 1470, 1470, -1000, -1000, -1000, -1000,
	12208, 953, 13709, 13709, 13709, 757, 3344, 3294, 235, 434,
	83, 107, 107, 80, 80, 80, 80, 80, 330, 330,
	-1000, -1000, -1000, 207, -1000, 94, 79, 1486, -111, -1000,
	-1000, 1486, -1000, -1000, -1000, 1122, 1122, -1000, -1000, -1000,
	-1000, -1000, 12717, -1000, 1122, 1748, 1767, 1469, 1725, 1645,
	-1000, -1000, -197, 1056, -1000, -1000, 1122, 11845, 1243, 1291,
	-1000, 911, -1000, 688, 1470, -1000, 87, -1000, -1000, 3344,
	1243, 911, 1243, 1243, 1243, 855, 1435, 13863, 1486, 1046,
	1486, 1504, -1000, -1000, 201, 1059, 165, -1000, -1000, -1000,
	-1000, 1504, -1000, -1000, -1000, -1000, -1000, 1486, 1486, -1000,
	-1000, 1486, 1486, -1000, 1486, 1486, 749, 1428, 1421, 1243,
	11845, -1000, 851, -1000, 12717, 1122, 3377, -1000, -1000, -256,
	-258, 1243, 1122, 1433, 1243, 1243, -1000, 730, -1000, 730,
	-1000, -1000, 1250, 1234, 1209, 1503, 1501, -185, 8417, 4467,
	1288, 1286, 1122, 1719, 1117, -1000, -1000, -1000, -1000, -1000,
	313, 861, 1117, 8897, 1372, -1000, 1043, -1000, 2180, 1498,
	173, 465, -1000, 524, 251, 221, -1000, -1000, -1000, -1000,
	463, -1000, -1000, 761, 1585, 3625, 199, -1000, 1151, 841,
	1040, 839, 821, 820, 813, 812, 810, 807, 804, 803,
	800, -1000, -1000, -1000, -1000, -1000, 1714, -1000, 1822, -1000,
	-1000, -1000, 1802, 1494, 1493, 5652, 676, 1492, 1282, 1249,
	3596, -1000, -71, -1000, 1247, -1000, 12717, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1245, -1000,
	12717, 350, 1587, -1000, -1000, 706, -1000, 1197, 1189, -1000,
	-1000, -1000, 1122, -1000, -1000, -1000, -1000, 13709, 13709, 13709,
	-1000, 757, 3344, 2192, -1000, 13709, 13709, 125, -1000, -1000,
	-1000, 426, -1000, 1698, 12717, 12717, 1770, -1000, 1469, -1000,
	-1000, 1737, -1000, -1000, 896, -1000, 1243, 11845, -211, -1000,
	-1000, -1000, 1011, -1000, -1000, 6047, 11845, -1000, 13709, -211,
	-211, -1000, -1000, 4092, 1010, 12717, -1000, 952, 276, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4092, 13709, 13709, 13709, 13709, -81, 1358, 845, -1000,
	12717, 623, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -185, 4467, 5652, 1782, 1490, 1470,
	1183, 1782, 3596, -1000, 1469, 1341, 305, 229, 12717, -1000,
	3059, -1000, 8897, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1770, 12717, -1000, -1000, -1000,
	-1000, -1000, 1117, 3977, 1117, 1117, 1117, 677, 12717, 1118,
	12717, -1000, -1000, -1000, -1000, -1000, 3377, -1000, 1159, 10897,
	2180, 2180, 10897, 2180, 2180, 5652, 5652, 1489, 1488, 380,
	-1000, 239, -1000, -1000, 1022, -1000, 1117, -1000, -106, 3625,
	1117, -1000, 934, -1000, -1000, 909, 932, 909, 909, 909,
	909, 909, 321, 924, 471, -1000, 593, 593, 1117, 5652,
	1233, 350, 12717, 1782, 3596, 1585, -1000, 1782, 426, 464,
	1117, 676, -1000, 1801, -121, 344, -1000, -1000, -1000, 2601,
	2601, 2601, -1000, 13709, 3344, 3344, 9, -1000, 1818, 751,
	1028, 1432, -1000, 562, 1748, 1122, 1576, -1000, -1000, -1000,
	-1000, 1470, -1000, -1000, 687, 1122, -1000, -1000, -1000, 1122,
	1486, -1000, 1486, 1122, 540, -1000, -1000, 1122, 2779, 2357,
	2328, 1167, 1470, -69, -1000, 426, 12717, 1782, 1145, 1231,
	3596, 500, -185, 3596, -1000, -1000, -92, 12717, 8897, 4947,
	426, 4947, -1000, 8897, 442, 1748, 3812, 520, 3332, 2702,
	1431, 474, -1000, 4072, 925, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1117, 1798, 1794, 1785, 1784, 10397, 12717, 12717, -1000, 1743,
	-1000, -1000, 10640, -1000, -1000, -1000, -1000, -1000, 1208, 1204,
	5652, 5652, 1484, -1000, -1000, 1470, 1196, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 870, 870, 1194, 1188,
	3596, -1000, 1182, -1000, 1585, -1000, -1000, 3377, -1000, 350,
	593, 593, -1000, -1000, -1000, 205, 836, 779, 779, 902,
	75, -1000, 1763, -1000, -1000, -1000, 3344, -1000, -1000, 1666,
	12717, 12717, 12717, -1000, 1698, -1000, 11845, -1000, 631, 7232,
	-1000, -1000, -1000, -1000, 13709, -1000, -1000, 13709, -1000, 13709,
	-1000, 13709, -1000, 13709, 13709, 1122, 1012, 426, 3596, 1782,
	3596, 1585, 1175, 1782, 1585, -1000, -203, 426, 3059, 3184,
	-1000, -1000, 180, 12093, -1000, 1698, 8897, 809, -1000, 843,
	-1000, 4947, 3166, 3377, 1228, 1359, 1625, -1000, -1000, -1000,
	1718, 2184, 2508, 1117, 294, 4470, -1000, -1000, 1424, 4862,
	-9, -1000, -1000, -1000, 798, 684, 1032, -1000, 1680, -1000,
	-1000, 3977, 1696, -1000, -1000, -1000, -1000, -1000, 4947, -1000,
	1402, 1122, 861, 307, -1000, 397, 1172, 1170, 5652, 1117,
	-1000, 3625, -1000, -1000, 450, 3596, 1585, 1782, -1000, 1479,
	-1000, -1000, -1000, 779, -1000, 779, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2964, 1660, 426, 426, -1000, -1000, 1408,
	-1000, 1758, 1122, -1000, 2601, 2601, 2601, 2601, 2601, 257,
	-1000, -1000, 1585, 3596, -1000, -1000, -1000, 3596, -1000, 12717,
	11926, -1000, -1000, -1000, -1000, 2950, 9292, 488, 2914, 363,
	3377, -1000, 363, 1280, 2702, -1000, -1000, 2999, 2702, 2702,
	2702, 2702, 2702, -1000, 1623, 1622, -1000, 1636, 1630, 1652,
	3377, 1162, 2184, 710, 1470, -1000, 3408, -1000, -1000, -1000,
	1718, 1731, -1000, 5257, 1424, -9, 1423, -1000, -5, -14,
	11182, 8417, 730, -1000, -1000, -1000, -1000, -1000, 1117, 546,
	-1000, 191, 302, 262, -1000, 265, 3596, 3596, 1156, 1122,
	-1000, 3377, 1585, -1000, -1000, 1117, -1000, -1000, -1000, 674,
	-1000, 1782, 2702, 12717, -1000, -1000, -1000, -1000, -1000, -1000,
	1122, 233, -108, -1000, -1000, 1585, 426, -1000, -1000, 3829,
	-1000, -1000, 12717, -1000, 12717, 4947, -1000, 1187, 1470, -1000,
	1782, 2702, 1331, 1403, -1000, 797, 1625, 1483, 1586, 1322,
	-1000, -1000, -1000, -1000, 1621, -1000, 1480, -1000, -1000, -1000,
	-1000, -96, 595, 594, 587, 1117, -1000, 1469, -1000, 1423,
	-9, -23, -1000, -1000, -1000, -1000, 426, 789, -1000, 1420,
	-1000, 4947, -1000, -1000, 259, -1000, 1585, 1585, -1000, -1000,
	1477, -1000, 1144, 8417, 1780, 1410, 1158, -1000, 426, -1000,
	1656, -84, -123, -1000, 479, 8897, 10658, 3844, 1485, 2999,
	1470, -1000, 8812, 1117, 1770, 1331, -1000, 1782, 2999, 12717,
	-1000, -1000, 12717, 1476, -1000, 12717, -1000, -1000, -1000, -1000,
	1475, 1470, 1470, 1470, 1139, -1000, -1000, -1000, -1000, -18,
	-19, -1000, 12717, 2658, -1000, -1000, -1000, -1000, 1117, -1000,
	-1000, 1777, 1757, -1000, 1122, 12717, -1000, 1648, -1000, -1000,
	2388, 809, -1000, -1000, 1691, 1338, 1399, -1000, -1000, 11691,
	1122, 1141, -1000, -1000, 671, -1000, -1000, 1139, 1748, -1000,
	1770, -1000, 426, 426, 500, 426, 2, 500, 500, 500,
	1409, 1117, -1000, -1000, -1000, 426, 11635, 1131, -1000, 12717,
	12717, -1000, -1000, -94, 11417, 378, -1000, 1470, -1000, -1000,
	1375, 9997, 1117, -1000, -1000, 1748, 1128, 1125, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1121, 1121, 1121,
	710, -1000, -1000, -1000, 426, 1402, -116, 478, 1815, -1000,
	1470, -1000, 1469, -1000, -1000, -1000, -1000, -1000, 2, -1000,
	-1000, -1000, -96, -134, -1000, 2999, 1399, 1122, -1000, -1000,
	-1000, 1398, -1000,
}

var yyPgo = [...]int16{
	0, 2106, 21, 18, 2105, 2102, 2099, 2096, 2094, 2090,
	2087, 2084, 2080, 2076, 2074, 30, 43, 38, 29, 56,
	2073, 2071, 2067, 2063, 2058, 2053, 2050, 108, 2049, 2046,
	2045, 2037, 856, 104, 89, 2035, 2033, 2032, 2026, 2022,
	94, 208, 99, 107, 1985, 37, 41, 48, 85, 2012,
	34, 2009, 2008, 54, 2007, 39, 2004, 1997, 90, 1996,
	1989, 5, 238, 119, 120, 46, 1988, 1987, 117, 2252,
	1986, 1984, 82, 1981, 1980, 111, 20, 64, 4, 10,
	9, 1979, 453, 1, 1978, 97, 77, 1977, 1976, 1973,
	47, 1971, 66, 84, 7, 57, 1970, 13, 8, 79,
	42, 26, 15, 2, 51, 35, 1968, 31, 36, 32,
	1967, 67, 1965, 98, 135, 49, 75, 22, 1830, 0,
	45, 96, 1962, 1958, 1957, 144, 1956, 812, 88, 40,
	14, 55, 83, 1955, 87, 130, 52, 122, 121, 1954,
	125, 124, 123, 1952, 1951, 1950, 2631, 744, 136, 106,
	68, 1948, 1947, 102, 324, 305, 101, 330, 133, 80,
	1945, 1940, 1938, 1937, 143, 116, 86, 127, 1935, 63,
	103, 27, 408, 1930, 1929, 1926, 1925, 1924, 1917, 1912,
	110, 1910, 100, 78, 92, 799, 44, 1908, 1905, 1904,
	1903, 109, 1902, 1901, 1892, 74, 1889, 1888, 113, 69,
	138, 126, 134, 1876, 1872, 65, 70, 1871, 128, 129,
	1870, 112, 1801, 118, 95, 16, 33, 194, 53, 1868,
	1863, 1857, 6, 3, 1853, 1852, 1851, 1850, 132, 1849,
	93, 1848, 81, 1845, 19, 1844, 1843, 50, 1842, 1841,
	1840, 1839, 1836, 539, 1104, 1835, 76, 137, 1834, 131,
}

var yyR1 = [...]uint8{
	0, 239, 240, 240, 1, 1, 1, 1, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 22, 22, 22, 22, 22,
	22, 212, 212, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 213, 213, 214, 214, 214,
	23, 23, 23, 242, 242, 2, 2, 3, 4, 4,
	5, 5, 6, 6, 30, 30, 7, 8, 8, 8,
	245, 245, 53, 53, 100, 100, 9, 9, 9, 9,
	10, 10, 219, 219, 218, 220, 220, 11, 11, 11,
	11, 11, 210, 210, 210, 210, 210, 12, 12, 216,
	216, 216, 15, 15, 15, 15, 16, 16, 17, 17,
	17, 19, 19, 105, 105, 109, 109, 109, 110, 110,
	110, 110, 231, 231, 133, 133, 241, 241, 246, 246,
	246, 246, 246, 246, 246, 208, 208, 208, 208, 209,
	209, 209, 209, 211, 211, 215, 215, 215, 215, 215,
	215, 217, 217, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 13, 13, 31, 31, 77, 77,
	14, 116, 116, 189, 189, 189, 190, 190, 190, 190,
	190, 190, 192, 192, 193, 193, 123, 123, 194, 194,
	26, 174, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 158, 158, 158, 158, 158, 136, 136, 136, 136,
	136, 136, 136, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 200, 200, 200, 200, 200, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 202, 203,
	204, 196, 196, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 148, 148, 148,
	148, 148, 148, 195, 195, 191, 191, 191, 191, 140,
	140, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 139, 139, 139, 139, 139, 139, 139, 144, 144,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 137, 137, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 145, 145, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 157, 157, 146, 146,
	155, 155, 156, 156, 156, 147, 147, 147, 154, 154,
	154, 151, 151, 152, 152, 153, 153, 153, 149, 149,
	149, 150, 150, 150, 160, 185, 185, 185, 187, 187,
	188, 188, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 173, 173, 205, 205,
	206, 206, 207, 207, 184, 184, 184, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 172,
	172, 182, 182, 183, 183, 180, 180, 180, 180, 180,
	181, 167, 167, 167, 167, 167, 168, 168, 169, 169,
	169, 169, 161, 161, 162, 162, 163, 163, 164, 164,
	164, 164, 166, 166, 165, 165, 33, 33, 33, 33,
	33, 33, 33, 33, 198, 198, 198, 235, 235, 235,
	235, 235, 235, 236, 236, 199, 199, 170, 170, 171,
	171, 178, 178, 178, 178, 247, 247, 176, 176, 176,
	177, 177, 177, 248, 27, 28, 28, 29, 29, 29,
	36, 36, 36, 34, 34, 35, 35, 42, 42, 41,
	41, 43, 43, 43, 43, 122, 122, 122, 121, 121,
	232, 232, 232, 232, 232, 45, 45, 46, 46, 47,
	47, 48, 48, 48, 222, 222, 221, 221, 223, 223,
	223, 223, 223, 223, 223, 223, 60, 60, 97, 97,
	97, 101, 101, 49, 49, 49, 49, 50, 50, 51,
	51, 52, 52, 131, 131, 130, 130, 130, 129, 129,
	54, 54, 54, 56, 55, 55, 55, 55, 57, 57,
	59, 59, 58, 58, 61, 61, 61, 61, 62, 62,
	99, 99, 44, 44, 44, 44, 44, 44, 44, 44,
	112, 112, 64, 64, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	74, 74, 74, 74, 74, 74, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 40, 40, 75,
	75, 75, 82, 76, 76, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	72, 72, 72, 72, 72, 72, 72, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	249, 249, 73, 73, 73, 73, 37, 37, 37, 37,
	37, 132, 132, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 86, 86, 38, 38, 84,
	84, 85, 115, 115, 87, 87, 83, 83, 83, 83,
	83, 224, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 65, 65, 88, 88, 89, 89, 233, 233,
	234, 90, 90, 91, 91, 92, 93, 93, 93, 94,
	94, 94, 94, 95, 95, 95, 67, 67, 67, 67,
	67, 67, 96, 96, 98, 98, 98, 98, 102, 102,
	78, 78, 80, 80, 79, 81, 103, 103, 107, 104,
	104, 108, 108, 108, 108, 108, 24, 25, 106, 106,
	106, 126, 126, 126, 114, 114, 124, 124, 111, 111,
	113, 113, 113, 125, 125, 119, 120, 120, 120, 120,
	120, 127, 127, 127, 128, 128, 225, 225, 225, 226,
	226, 226, 227, 227, 228, 228, 229, 229, 230, 39,
	39, 238, 238, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 118, 118, 118, 118, 118,
	118, 118, 118, 243, 244,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 2, 13,
	12, 14, 12, 13, 12, 10, 7, 10, 7, 11,
	11, 9, 13, 16, 5, 8, 8, 4, 4, 3,
	3, 3, 6, 6, 6, 7, 6, 11, 13, 13,
	14, 14, 6, 7, 6, 8, 9, 8, 8, 9,
	8, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	6, 8, 10, 1, 1, 4, 6, 10, 1, 3,
	1, 3, 7, 8, 1, 1, 9, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	2, 6, 1, 3, 3, 0, 1, 2, 2, 2,
	3, 5, 0, 2, 2, 2, 2, 3, 5, 1,
	2, 3, 7, 10, 1, 1, 5, 5, 3, 5,
	3, 1, 3, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 0, 3, 0, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 4, 2, 3,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 4, 1, 1, 0, 1,
	2, 0, 3, 0, 2, 2, 0, 2, 2, 2,
	2, 2, 0, 2, 0, 3, 0, 1, 0, 2,
	4, 4, 0, 1, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 1, 3, 2, 2, 3, 2, 4, 2, 4,
	2, 2, 3, 2, 3, 2, 7, 9, 3, 3,
	6, 9, 9, 6, 6, 8, 8, 5, 8, 7,
	4, 0, 2, 4, 6, 2, 4, 2, 1, 1,
	2, 1, 2, 2, 1, 1, 1, 3, 1, 2,
	1, 1, 2, 0, 4, 3, 4, 3, 3, 3,
	3, 3, 3, 3, 2, 4, 6, 2, 3, 2,
	3, 1, 3, 0, 2, 0, 2, 2, 3, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 2, 2, 2, 1, 1, 0, 1,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 4, 5, 4, 4, 4, 1, 2,
	2, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 3, 3, 0, 3,
	3, 0, 1, 0, 1, 0, 2, 1, 0, 3,
	3, 0, 1, 2, 6, 0, 1, 4, 1, 2,
	1, 3, 2, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 5, 2, 3, 3,
	2, 3, 2, 3, 3, 2, 2, 3, 4, 1,
	1, 1, 1, 1, 3, 3, 2, 3, 2, 4,
	1, 2, 5, 5, 8, 8, 13, 11, 1, 1,
	2, 2, 10, 8, 9, 7, 7, 5, 9, 7,
	7, 5, 1, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 0, 1, 1,
	1, 2, 2, 1, 2, 0, 3, 0, 1, 1,
	3, 0, 4, 1, 3, 2, 1, 1, 2, 1,
	1, 1, 1, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 3, 6, 4, 7, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 0, 4, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 8, 1, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	0, 4, 1, 3, 3, 2, 3, 2, 1, 2,
	0, 3, 1, 1, 3, 6, 6, 6, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 4, 3, 3,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 6, 2, 2, 2, 2, 2, 2,
	2, 3, 3, 3, 1, 1, 1, 1, 2, 1,
	4, 5, 5, 5, 5, 6, 4, 4, 4, 6,
	6, 8, 6, 6, 6, 8, 6, 8, 6, 8,
	6, 8, 9, 7, 5, 4, 4, 3, 3, 3,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	2, 2, 1, 2, 2, 1, 2, 1, 1, 1,
	3, 1, 1, 3, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 0, 2, 1, 1, 1, 3,
	5, 3, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 0, 3, 0, 2, 1, 3,
	1, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 1, 3, 1, 1, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 5, 3, 1, 3, 1, 2,
	1, 1, 1, 1, 0, 3, 0, 3, 0, 1,
	0, 1, 1, 0, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 2, 0,
	2, 2, 0, 1, 4, 3, 1, 3, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -239, -1, -20, -21, -22, -23, -26, 126, 127,
	219, 220, 71, -240, 403, -174, 58, -235, -236, 288,
	-194, 135, 148, 170, 171, 373, 132, 218, 133, 385,
	386, 150, 388, 79, -111, 138, -212, 21, -32, 6,
	8, 9, 10, 159, 143, 170, 126, 162, 161, 163,
	-119, 61, -212, 21, 56, -175, -158, -119, -118, 314,
	63, 36, 398, 399, 148, 171, 173, 174, 301, 223,
	134, 134, 134, 136, 216, 136, -119, -119, -83, 139,
	61, -118, 314, -127, 63, -58, -127, 61, -118, 133,
	-124, 139, 63, -119, 272, 139, -114, 139, 388, 385,
	386, 353, 133, 56, 59, 221, 56, 56, 221, 56,
	133, 141, 60, 59, -159, -136, -140, -137, -142, -141,
	-143, -119, -138, -139, 261, 365, 258, 262, 259, 264,
	265, 266, 120, 263, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 267, 279, 33, 155, 249,
	250, 251, 252, 253, 256, 255, 257, 254, 122, 280,
	281, 282, 283, 284, 285, 286, 287, 288, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 241, 242,
	244, 245, 246, 248, 247, -159, -159, -159, -159, -119,
	56, 215, -119, -119, -114, 217, -114, 56, -208, 19,
	195, 196, 208, 56, 81, 123, 25, 123, -114, -119,
	63, 81, 81, -58, 81, -58, 317, 133, -32, 56,
	133, 133, 56, 133, -58, -127, -178, -247, 368, 37,
	-158, -160, -167, -161, -162, -163, -164, -179, -168, 142,
	140, 150, 401, 222, 144, 145, 288, -172, 146, 134,
	151, 73, 81, -200, 142, -203, 56, 296, 302, 140,
	151, 150, 401, 71, 143, 25, 375, 377, 31, 32,
	-153, 404, 290, -151, 299, 123, -146, 58, -146, -145,
	260, -147, 58, -146, -147, -146, -147, -149, 262, -149,
	-149, -149, -149, 58, 58, -146, -146, -146, -146, -146,
	-146, -146, 58, -155, 58, -144, 243, -155, -156, 58,
	-156, 56, 57, -58, -119, 56, 56, -58, -231, 398,
	399, -58, -58, -211, -209, 8, 9, 10, 209, -58,
	26, -120, -128, -119, 310, 147, -117, -118, -127, 131,
	196, 376, 80, 25, 27, 296, 302, 195, 84, 120,
	16, 85, 202, 385, 386, 119, 76, 354, 126, 52,
	346, 347, 344, 200, 356, 357, 345, 303, 207, 20,
	31, 10, 28, 153, 24, 113, 128, 197, 89, 88,
	156, 160, 161, 26, 154, 75, 203, 205, 19, 55,
	146, 11, 375, 13, 14, 390, 377, 139, 138, 100,
	389, 134, 50, 8, 122, 29, 97, 46, 151, 206,
	48, 98, 17, 348, 349, 34, 363, 164, 115, 53,
	40, 391, 81, 392, 73, 56, 317, 201, 79, 15,
	51, 165, 393, 204, 397, 99, 129, 353, 172, 49,
	198, 394, 132, 199, 6, 359, 33, 152, 47, 133,
	304, 395, 87, 137, 74, 5, 150, 9, 396, 54,
	57, 350, 351, 352, 38, 86, 12, 149, 367, 77,
	-136, 279, -128, -117, -58, 26, 26, 26, 131, -58,
	-53, -58, 133, -58, -58, 133, -58, 97, 123, -176,
	59, -120, 71, -117, -118, 36, 58, -199, 56, 81,
	-170, -119, 151, -172, 61, 134, -198, 385, 386, -243,
	58, 57, 58, -172, -172, 61, 134, 151, 61, 151,
	73, 19, -119, 9, 151, 151, -199, 63, -58, 58,
	-196, 376, 16, 58, -201, 58, -202, 63, 64, 65,
	110, 66, 73, -148, 72, -64, 291, -44, 344, 347,
	346, 292, 74, 75, -63, 81, -69, 31, 26, 9,
	76, -243, -68, -83, -224, -81, -82, 155, 249, 250,
	-228, 120, 121, 109, 117, 82, 122, -72, -70, -71,
	-73, -227, 182, -119, 62, 67, 68, -127, 322, -79,
	290, 362, 361, 48, 49, 354, 355, 356, 357, 363,
	358, 85, 38, 40, 267, 352, 351, 350, 348, 349,
	400, 139, 345, 115, 353, 289, -204, 65, 405, -152,
	300, -119, 65, -149, -146, -149, 65, 61, -149, -149,
	-150, 120, 119, 33, -150, -150, -150, -150, -157, 63,
	-157, -154, 367, 368, -154, 65, 65, -155, 65, -58,
	-119, 58, 56, -58, -58, 25, 136, 25, -189, 25,
	56, 59, 209, -208, -119, 123, 58, 57, 63, -119,
	272, 141, -158, -123, 142, -167, -164, 150, 131, 137,
	59, -58, 137, 11, -58, 11, 63, -119, -128, 90,
	-120, -247, -183, -180, -120, 151, 314, 58, 10, 9,
	19, 146, 140, 150, 401, 222, -198, 61, 58, -44,
	-64, 110, 63, 64, 72, 65, 66, 73, 291, 292,
	344, 346, 347, -120, -166, -165, -119, -44, 61, 61,
	61, 61, -198, 150, -170, -119, 387, -200, 401, -148,
	344, 347, 346, 292, -243, 58, -44, 25, 31, -65,
	65, 110, -201, 58, -202, -191, 400, 65, 66, -69,
	-243, -191, -243, 80, 79, 97, 210, -146, 58, -243,
	-146, 58, -249, -243, -249, 58, -243, -44, -66, 100,
	81, 98, 99, 84, 106, 105, 116, 109, 110, 111,
	112, 113, 114, 115, 107, 108, 400, 119, 90, 91,
	92, 93, 94, 95, 96, 101, 102, 103, 104, -112,
	-243, -82, -243, -243, -243, -63, -2, -69, -76, -243,
	-3, -4, -44, 6, 124, 125, 63, 63, 63, -69,
	-69, -69, -69, -69, -69, -228, -243, 63, 123, 123,
	404, -243, -243, -243, -243, -243, -243, -243, -243, -243,
	-243, -86, -44, -243, 41, -243, -249, -249, -249, -249,
	-249, -135, 120, 262, 155, 253, -138, -137, 268, 267,
	-243, -243, -243, -243, 60, -150, -149, -150, 60, 60,
	-150, -150, 61, 61, 120, 60, 59, 60, 249, 249,
	60, 59, 60, 59, 58, 57, 56, -182, -183, -72,
	-119, -127, -58, 58, 58, -2, -243, -114, -2, -190,
	19, 179, 180, -58, -209, -97, -119, 151, -211, -208,
	-120, -39, 63, -119, -158, -242, 134, 151, -119, 142,
	-167, -213, -214, -119, 63, 181, -58, 137, -213, -213,
	11, -213, 97, 123, -177, -120, 63, 65, 60, 59,
	-146, -181, 294, -146, -146, -44, -169, 175, 176, 33,
	177, -169, 387, 151, 151, -198, -243, 57, 58, 58,
	-183, -244, 60, -191, -243, 58, 60, 59, 367, 367,
	-198, 58, -199, 58, 58, 58, -44, -97, 60, 58,
	377, 59, 65, 60, -201, 63, 64, 65, 110, 66,
	73, 72, -64, 291, 60, 293, 122, -136, -244, -44,
	-44, -74, 73, 81, 74, 75, 60, -244, 60, -244,
	60, -244, -69, 21, 22, 23, -75, -79, -82, 69,
	-243, 100, 98, 99, 84, -69, -69, -69, -69, -69,
	-69, -69, -69, -69, -69, -69, -69, -69, -69, -69,
	-140, -142, -141, 250, -135, -138, 262, 120, 268, 267,
	155, 253, -132, 61, 63, 61, -83, -119, -244, -244,
	-244, -244, 59, -244, -2, -90, 15, -29, 5, -27,
	-248, -68, 63, -119, -68, -119, -42, 24, -41, -76,
	-43, -44, 111, -127, -120, -120, -229, 405, -230, -69,
	-41, -44, -41, -41, -41, -44, -134, 120, 258, 155,
	253, 245, 277, 278, 298, 249, 299, 238, 230, 235,
	248, 246, 232, 247, 231, 244, 241, 256, 255, 257,
	268, 259, 264, 266, 265, 263, -44, -43, -43, -41,
	-34, 24, -84, -85, 86, -83, 19, -244, 260, 404,
	404, -41, -42, -41, -41, -41, -150, -149, 63, -149,
	301, 301, 65, 65, -182, -119, -58, 60, 123, 58,
	-97, -183, -2, -58, 137, 21, 6, 8, 9, 10,
	19, -116, 59, 25, -211, 60, 59, -241, 58, -119,
	150, -119, -125, 59, 367, -213, -125, -113, 176, 175,
	-213, -113, 63, -119, -185, -187, 367, -186, 57, 147,
	71, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	61, -180, -93, 27, 28, -93, 60, -199, 56, 73,
	178, -199, 56, -170, -198, 58, -44, -120, -166, -183,
	60, -195, 177, -244, -166, -62, 12, -165, -33, 90,
	95, 91, 92, 80, 93, 94, -119, -33, -171, -119,
	-243, -244, 60, 373, 374, -44, 58, -65, 60, -191,
	65, 66, -243, -153, 73, 74, 75, -243, -243, -243,
	-75, -69, -69, -69, -40, 156, 80, 367, 260, -244,
	-244, -44, -244, -94, 17, 16, -5, -3, -243, 21,
	24, -36, 44, 45, -28, -244, -41, 59, -244, -244,
	-122, -121, 25, -119, 63, 123, -243, 405, 59, -244,
	-244, -244, -244, 59, 57, 59, -146, 58, -146, -146,
	-156, 236, -146, 236, -156, -146, -146, -146, -146, -146,
	-146, 25, 59, 11, 59, 11, -244, -41, -87, -85,
	89, -44, -244, -127, 405, 405, -244, -244, -244, -244,
	-150, -150, 60, 60, 60, 58, 58, -99, 389, -120,
	-182, 60, 60, -244, 25, -171, 197, -115, 86, -119,
	-215, -217, 225, -18, -15, -6, -8, -7, -10, -9,
	-11, -12, -13, -14, -24, -3, 139, -16, -17, -30,
	10, 9, 20, 33, 201, 202, 207, 203, 149, -31,
	172, -25, 8, 353, 160, 161, 56, 63, -246, -119,
	109, 90, 63, -158, 59, 58, 58, 385, 386, 140,
	-214, 219, -125, -113, 97, -184, 56, -186, 367, 58,
	369, 61, -173, 90, 63, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, -93, 9, 10, 58, 58,
	-183, -244, 58, 60, 60, -185, 360, 60, -44, 60,
	59, -44, -195, 56, 60, -197, 60, 60, -244, -69,
	-69, -69, -40, 80, -69, -69, 249, -95, 19, 34,
	-44, -91, -92, -44, -90, -2, -34, 70, -244, -43,
	-232, 402, -121, 111, -128, -42, -230, -232, -232, -134,
	120, 155, 249, -132, -44, -149, 61, -134, -69, -69,
	-69, -69, 364, -90, 88, -44, 87, -99, -182, -183,
	-62, 58, 60, -62, -185, -2, -192, 57, 198, 225,
	-44, 403, -217, 225, -215, -90, -44, -27, -27, -27,
	-219, -119, -218, -27, -238, -237, 323, 324, 325, 326,
	327, 328, 329, 330, 331, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 342, 343, -119, -119, -119,
	-210, 40, 204, 205, 206, -44, -119, -243, -86, -58,
	60, -246, -119, -246, -246, -246, -246, -246, -183, -183,
	58, 58, 151, 224, 63, -119, -188, -186, -119, 65,
	-205, 56, 77, 65, -205, -205, -205, -205, -205, -206,
	193, 194, 65, -207, -206, 65, -169, -169, -171, -183,
	60, -195, -166, -62, -185, -184, -62, 143, -119, -244,
	10, 9, 373, 374, 60, 226, 379, 380, 164, 381,
	177, 382, 383, -244, -244, -244, -69, 301, 9, 100,
	59, 18, 59, -93, -94, -244, -35, 47, -243, 123,
	-244, -244, -244, -244, 59, -244, -244, 59, -244, 19,
	-244, 59, -244, 19, -243, -38, 359, -44, -62, 60,
	60, -185, -97, -99, -185, -193, 367, -44, -215, -216,
	-217, -217, -215, 403, 88, -94, 87, -19, -15, -16,
	-18, 225, -111, 11, -53, -46, -47, -48, -49, -60,
	-82, -243, -58, 59, -220, -131, 199, 25, -104, -133,
	227, -108, 312, 311, -120, 322, -106, 310, 262, 309,
	-205, 59, -119, 11, 11, 11, 11, -217, 225, -77,
	-76, -77, -116, 19, 60, 60, -183, -183, 58, -243,
	60, 59, -199, -199, 60, 60, -185, 60, -184, -58,
	-195, -169, -169, 367, -65, 16, -65, -65, -65, 65,
	380, 164, 382, 16, 42, -44, -44, -92, -95, -41,
	-244, 165, -90, 111, -69, -69, -69, -69, -69, -69,
	-244, 63, -185, -62, -185, -184, 60, -62, -184, 401,
	403, -217, 88, 88, -95, -215, 89, 89, -216, -59,
	29, -58, -58, -53, -245, 11, 57, 33, 59, -54,
	-56, -55, -57, 46, 50, 52, 47, 48, 49, 53,
	-131, -46, -243, -130, 165, -129, 25, -127, 63, -218,
	-119, 200, -136, 59, -104, 227, -105, -109, 313, 315,
	90, 123, -126, -119, 63, 31, 33, -237, 29, -216,
	-244, -115, 197, -225, 211, 81, 60, 60, -183, -119,
	-186, 143, -185, -184, -62, 58, -65, -65, 384, -127,
	43, -45, 11, 16, -244, -244, -244, -244, -244, -244,
	-37, 100, 367, -184, -185, -185, -44, 88, -217, 403,
	-16, -19, 139, -17, 139, 403, 88, -100, 165, -58,
	-100, 57, -46, -103, -107, -83, -47, -48, -48, -47,
	-48, 46, 46, 46, 51, 46, 51, 46, -55, -127,
	-244, -61, 54, 138, 55, -243, -129, 19, -108, -105,
	59, 314, 316, 317, 56, 77, -44, -120, -150, -171,
	88, 225, 198, -226, 212, 211, -185, -185, 60, -244,
	-58, -184, -171, 123, -62, -46, -233, -234, -44, -244,
	365, 53, 370, -184, 88, 89, -44, -44, -67, 33,
	38, -2, -243, -243, -62, -46, -62, -45, 59, 90,
	-51, -50, 56, 57, -52, 56, -50, 46, 46, -222,
	367, 134, 134, 134, -101, -119, -2, -109, -110, 318,
	315, 321, 90, -216, 214, 213, -184, -184, 58, 60,
	-120, -88, 13, -244, -90, 59, 43, 366, 371, 139,
	-215, -19, -19, -102, 56, -103, -78, -80, -79, -243,
	-2, -96, -98, 6, -119, -117, -118, -101, -90, -62,
	-62, -107, -44, -44, 58, -44, 58, -243, -243, -243,
	-244, 59, 315, 319, 320, -44, 403, -171, -89, 14,
	16, -244, -234, 43, 403, 30, -102, 59, -244, -244,
	-244, 59, 123, -244, -94, -90, -97, -221, -223, 390,
	391, 392, 393, 394, 395, 396, 397, -97, -97, -97,
	-130, -119, 88, 60, -44, -76, 367, 88, 151, -80,
	38, -2, -243, -98, -119, -94, 60, 60, 59, -244,
	-244, -244, -61, 370, 139, 9, -78, -2, -223, -222,
	371, -103, -244,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 7, 0, -2, 908,
	0, 0, 0, 1, 3, 8, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 906, 0, 904, 498,
	499, 500, 503, 0, 0, 909, 0, 0, 51, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 915, 0, 0, 0, 0, 213, 261, 261, 261,
	261, 261, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	0, 0, 0, 904, 0, 904, 0, 826, 0, 0,
	-2, -2, 828, 0, 923, 0, 612, 921, 922, 904,
	0, 0, 29, 30, 31, 0, 0, 0, 504, 501,
	502, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 0, 221, 395, 391, 227, 228, 229,
	230, 231, 378, 310, 341, 342, 378, 365, 385, 378,
	385, 348, 378, 385, 398, 398, 398, 398, 398, 356,
	357, 358, 359, 360, 361, 362, 0, 0, 330, 378,
	378, 378, 378, 378, 378, 378, 338, 339, 340, 367,
	368, 369, 370, 371, 372, 373, 374, 0, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 380, 328,
	380, 382, 382, 326, 327, 222, 223, 224, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	156, 157, 0, 0, 0, 0, 0, 0, 0, 27,
	28, 0, 0, 210, 0, 0, 0, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 211, 513, 0, 516,
	214, 215, 216, 217, 218, 219, 220, 0, 505, 507,
	0, 494, 0, 0, 0, 0, 0, 0, 0, 449,
	450, 234, 0, 236, 0, 238, 0, 240, 241, 0,
	243, 245, 505, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 397, 393, 392, 0, 309, 0, 398, 378,
	366, 398, 0, 398, 398, 349, 350, 401, 0, 401,
	401, 401, 401, 0, 0, 388, 388, 333, 334, 335,
	336, 337, 0, 321, 0, 380, 329, 323, 324, 0,
	325, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	143, 0, 193, 0, 163, 159, 160, 161, 158, 0,
	0, 829, 0, 916, 917, 918, -2, -2, 924, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	24, 0, 613, 925, 0, 907, 0, 905, 206, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 517, 519, 919, 920, 515, 0, 461, 0, 0,
	0, 508, 437, 0, 445, -2, 0, 495, 496, 0,
	1103, 0, 0, 0, 0, 440, 442, 0, 494, 507,
	235, 0, 0, 0, 242, 244, 0, 248, 249, 0,
	0, 281, 0, 0, 262, 1103, 265, -2, -2, -2,
	0, -2, -2, 274, -2, -2, 0, 278, -2, -2,
	-2, 0, 632, 633, 622, 0, 628, 630, 0, 0,
	0, 0, 675, 677, 678, 679, 680, 0, 0, 0,
	684, 0, 0, 0, 0, 0, 0, 714, 715, 716,
	717, 0, 719, 826, 835, 839, 840, 0, 0, 885,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 815, 0, 0, 0, 760, 760, 760, 760, 760,
	0, 0, 0, 0, 0, 933, 279, 280, 396, 226,
	394, 232, 0, 401, 398, 401, 0, 0, 401, 401,
	351, 402, 0, 0, 352, 353, 354, 355, 0, 376,
	0, 331, 0, 0, 332, 0, 0, 322, 0, 0,
	0, 0, 0, 0, 0, 0, 904, 0, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 32, 33,
	34, 0, 36, 0, 507, 42, 44, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 0, 0, 0,
	518, 514, 0, 453, 378, -2, 378, 0, 0, 0,
	0, 0, 0, 494, 0, 0, 0, 444, 0, 0,
	676, 0, -2, 833, 836, 837, 838, 841, 0, 0,
	750, 760, 760, 0, 0, 482, 826, 0, 438, 439,
	441, 443, 447, 494, 0, 508, 260, 237, 505, 239,
	378, 378, 301, 0, 0, 0, 0, 0, 282, 0,
	842, 0, 0, 1103, 0, -2, 0, -2, -2, 707,
	0, 273, 0, 0, 0, 0, 627, 297, 0, 0,
	299, 0, 758, 0, 757, 0, 0, 625, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 656, 657,
	658, 659, 660, 661, 662, 663, 664, 665, 666, 629,
	0, 646, 0, 0, 0, 622, 78, 628, 0, 0,
	851, 0, 673, 523, 0, 0, 681, 682, 683, 704,
	705, 706, 708, 709, 710, 718, 537, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	533, 0, 816, 0, 0, 0, 752, 753, 754, 755,
	756, 759, 805, 0, 807, 808, 809, 811, 812, 814,
	0, 537, 0, 0, 379, 343, 401, 345, 386, 387,
	346, 347, 403, 399, 400, 398, 0, 398, 0, 0,
	375, 0, 383, 0, 0, 0, 0, 0, 451, 452,
	916, 0, 0, 0, 0, -2, 0, 0, -2, 0,
	0, 194, 195, 191, 164, 162, 578, 579, 0, 0,
	830, 0, 376, 146, 35, 0, 73, 74, 508, 507,
	43, 913, 65, 67, 68, 69, 93, 0, 913, 910,
	0, 910, 0, 0, 512, 520, 521, 522, 405, 0,
	856, 458, 460, 456, 856, 0, 505, 468, 469, 0,
	0, 505, 506, 507, 494, 0, 0, 0, 0, 0,
	0, 303, 1104, 832, 0, 0, 618, 0, 0, 0,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 0, 843, 263, 0, 305, 268, 269, 0, 271,
	305, 275, 276, 0, 266, 306, -2, 395, -2, 623,
	624, 626, 650, 0, 652, 654, 298, 751, 300, 761,
	302, 749, 634, 0, 0, 0, 638, 669, 670, 671,
	0, 0, 0, 0, 0, 667, 642, 0, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	699, 700, 701, 378, 712, 378, 365, 378, 398, 362,
	330, 378, 702, 771, 772, 0, 0, 826, 648, 649,
	672, 713, 0, 884, 78, 859, 0, 0, 527, 530,
	525, 697, 305, 0, 698, 711, 0, 0, 0, 0,
	539, 545, 541, 0, 829, 831, 0, 935, 936, 938,
	0, 545, 0, 0, 0, 0, 0, 378, 378, 776,
	378, 382, 779, 780, 781, 378, 784, 786, 787, 788,
	789, 382, 791, 792, 793, 794, 795, 378, 378, 798,
	799, 378, 378, 802, 378, 378, 0, 0, 0, 0,
	0, 534, 824, 819, 0, 0, 0, 747, 806, 0,
	0, 0, 0, 538, 0, 0, 344, 401, 377, 401,
	389, 390, 0, 0, 0, 0, 0, 620, 0, 0,
	0, 0, 78, 0, 0, 197, 198, 199, 200, 201,
	0, 822, 0, 0, 0, 25, 0, 26, 148, 0,
	0, 508, 45, 0, 0, 913, 47, 48, 911, 912,
	910, 50, 71, 0, 434, 406, 0, 408, 0, 426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 454, 455, 857, 858, 457, 856, 462, 0, 470,
	471, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	405, 477, 0, 748, 0, 481, 0, 483, 484, 486,
	487, 488, 489, 490, 491, 492, 493, 485, 0, 509,
	0, 303, 250, 253, 254, 0, 283, 0, 0, 267,
	270, 272, 0, 308, 651, 653, 655, 0, 0, 0,
	639, 667, 643, 0, 640, 0, 0, 0, 366, 631,
	647, 674, -2, 863, 0, 0, 851, 80, 0, 528,
	529, 533, 531, 532, 524, 720, 0, 0, 550, 726,
	542, 546, 0, 548, 549, 0, 537, 934, 0, 550,
	550, 727, 728, 0, 0, 0, 773, 1103, 398, 777,
	778, 782, 783, 785, 790, 796, 797, 800, 801, 803,
	804, 0, 0, 0, 0, 0, 0, 851, 0, 820,
	0, 0, 745, 746, 810, 813, 762, 763, 764, 765,
	363, 364, 381, 384, 620, 0, 0, 618, 0, 0,
	0, 618, 405, 79, 0, 202, 0, 0, 0, 580,
	21, 165, 0, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 851, 0, 124, 125, 523,
	523, 523, 0, 523, 0, 0, 0, 112, 0, 0,
	815, 896, 84, 85, 186, 187, 0, 940, 0, -2,
	148, 148, -2, 148, 148, 0, 0, 0, 0, 0,
	66, 0, 46, 49, 0, 404, 0, 409, 0, 0,
	0, 412, 0, 427, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	0, 303, 0, 618, 405, 434, 304, 618, 619, 0,
	0, 0, 246, 0, 0, 0, 259, 264, 277, 0,
	0, 0, 641, 0, 668, 644, 0, 75, 0, 0,
	860, 852, 853, 856, 859, 78, 535, 526, 721, 540,
	722, 0, 547, 543, 0, 0, 937, 723, 724, 0,
	378, 776, 378, 0, 0, 774, 775, 0, 0, 0,
	0, 0, 0, 817, 744, 825, 0, 618, 0, 0,
	405, 0, 620, 405, 15, -2, 204, 0, 192, 0,
	823, 0, 168, 0, 0, 859, 0, 908, 0, 0,
	100, -2, 102, 0, 0, 941, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 107, 108, 109,
	0, 0, 0, 0, 0, 0, 188, 188, 190, 191,
	147, 149, -2, 150, 151, 152, 153, 154, 0, 0,
	0, 0, 0, 914, 72, 435, 0, 410, 415, 413,
	416, 428, 429, 417, 418, 419, 420, 421, 422, 423,
	430, 431, 424, 425, 432, 433, 505, 505, 0, 0,
	405, 476, 0, 479, 434, 475, 480, 0, 510, 303,
	0, 0, 255, 256, 258, 0, 0, 0, 0, 0,
	0, 294, 0, 635, 636, 637, 645, 703, 864, 0,
	0, 0, 0, 855, 863, 81, 0, 536, 0, 0,
	725, 729, 733, 730, 0, 732, 734, 0, 736, 0,
	738, 0, 740, 0, 0, 0, 0, 821, 405, 618,
	405, 434, 0, 618, 434, 19, 0, 203, 20, 0,
	119, 166, 0, 0, 169, 863, 0, 130, 128, 124,
	131, 0, 0, 0, 0, 0, 557, 559, 560, 561,
	593, 0, 595, 0, 0, 0, 106, 594, 96, 0,
	0, 889, 144, 145, 0, 0, 0, -2, 0, 900,
	897, 0, 110, 113, 114, 115, 116, 117, 0, 184,
	189, 0, 822, 0, 37, 926, 0, 0, 0, 0,
	407, 0, 464, 465, 0, 405, 434, 618, 473, 0,
	247, 251, 252, 0, 285, 0, 287, 288, 289, 290,
	291, 292, 293, 0, 0, 861, 862, 854, 76, 555,
	551, 0, 0, 544, 0, 0, 0, 0, 0, 766,
	743, 818, 434, 405, 12, 10, 621, 405, 14, 0,
	0, 120, 170, 167, 183, 0, 0, 0, 0, 94,
	0, 611, -2, 0, 0, 90, 91, 0, 0, 0,
	0, 0, 0, 600, 0, 0, 603, 0, 0, 0,
	0, 0, 0, 614, 0, 596, 0, 598, 599, 103,
	593, 0, 104, 0, 97, 0, 99, 133, 0, 0,
	0, 0, 401, 901, 902, 903, 899, 942, 0, 0,
	185, 0, 0, 929, 927, 0, 405, 405, 0, 0,
	411, 0, 434, 474, 478, 0, 284, 286, 295, 0,
	865, 618, 0, 0, 553, 731, 735, 737, 739, 741,
	0, 0, 0, 9, 13, 434, 205, 22, 121, 0,
	126, 127, 0, 129, 0, 0, 132, 0, 0, 610,
	618, 0, 618, 555, 886, 0, 558, 589, 591, 0,
	586, 601, 602, 604, 0, 606, 0, 608, 609, 562,
	563, 564, 0, 0, 0, 0, 597, 0, 890, 98,
	0, 0, 136, 137, 891, 892, 893, 0, 895, 111,
	118, 0, 192, 39, 0, 928, 434, 434, 38, 436,
	0, 472, 0, 0, 844, 556, 0, 848, 850, 742,
	0, 0, 0, 11, 0, 0, 0, 0, 878, 0,
	0, -2, 0, 0, 851, 618, 89, 618, 0, 0,
	583, 590, 0, 0, 584, 0, 585, 605, 607, 576,
	0, 0, 0, 0, 0, 581, -2, 134, 135, 0,
	0, 141, 0, 0, 930, 931, 40, 41, 0, 467,
	296, 846, 0, 552, 0, 0, 767, 0, 770, 122,
	0, 0, 130, 82, 0, 878, 866, 880, 882, 0,
	78, 0, 872, -2, 874, 876, 877, 0, 859, 88,
	851, 887, 888, 587, 0, 592, 0, 0, 0, 0,
	595, 0, 138, 139, 140, 894, 0, 0, 77, 0,
	0, 554, 849, 768, 0, 0, 83, 0, 883, -2,
	0, 0, 0, 95, 87, 859, 0, 0, 566, 568,
	569, 570, 571, 572, 573, 574, 575, 0, 0, 0,
	614, 582, 23, 466, 847, 845, 0, 0, 0, 881,
	0, -2, 0, 873, 875, 86, 588, 565, 0, 615,
	616, 617, 564, 0, 123, 0, 869, 78, 567, 577,
	769, 879, -2,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 403,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 404, 3, 405, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:432
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:437
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:438
		{
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:448
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 9:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:453
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:473
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 11:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:493
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:514
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 13:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:530
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 14:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:547
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:567
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:582
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:593
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:605
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:616
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:632
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:646
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:673
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:687
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:697
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name:       yyDollar[3].tableName,
					IsEnum:     true,
					EnumValues: yyDollar[7].strs,
				},
			}
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:709
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:714
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name:        yyDollar[4].colIdent.String(),
					IfNotExists: bool(yyDollar[3].boolVal),
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:724
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name:        string(yyDollar[4].bytes),
					IfNotExists: bool(yyDollar[3].boolVal),
				},
			}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:735
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:744
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:753
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: "citext",
				},
			}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:762
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[6].bytes),
				},
			}
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:771
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:780
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: "citext",
				},
			}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:791
		{
			yyVAL.statement = &DDL{
				Action:    AddColumn,
				Table:     yyDollar[4].tableName,
				NewName:   yyDollar[4].tableName,
				ColumnDef: yyDollar[7].columnDefinition,
			}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:800
		{
			yyVAL.statement = &DDL{
				Action:    AddColumn,
				Table:     yyDollar[4].tableName,
				NewName:   yyDollar[4].tableName,
				ColumnDef: yyDollar[6].columnDefinition,
			}
		}
	case 37:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:809
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 38:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:823
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 39:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:837
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 40:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:857
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 41:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:875
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:893
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:902
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:911
		{
			yyVAL.statement = &DDL{
				Action:    AddExclusion,
				Table:     yyDollar[4].tableName,
				NewName:   yyDollar[4].tableName,
				Exclusion: yyDollar[6].exclusionDefinition,
			}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:923
		{
			if yyDollar[8].byt != 0 {
				yylex.Error("WITH GRANT OPTION is not supported yet")
				return 1
			}
			// For now, only support single table
			if len(yyDollar[5].tableNames) > 1 {
				yylex.Error("Multiple tables in GRANT are not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[5].tableNames[0],
				Grant: &Grant{
					IsGrant:    true,
					Privileges: yyDollar[2].strs,
					TableName:  yyDollar[5].tableNames[0],
					Grantees:   yyDollar[7].strs,
				},
			}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:945
		{
			if yyDollar[9].byt != 0 {
				yylex.Error("WITH GRANT OPTION is not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[6].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[6].tableName,
					Grantees:   yyDollar[8].strs,
				},
			}
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:962
		{
			if yyDollar[8].byt != 0 {
				yylex.Error("WITH GRANT OPTION is not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[5].tableName,
					Grantees:   yyDollar[7].strs,
				},
			}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:979
		{
			if yyDollar[8].str == "CASCADE" {
				yylex.Error("CASCADE/RESTRICT options are not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: yyDollar[2].strs,
					TableName:  yyDollar[5].tableName,
					Grantees:   yyDollar[7].strs,
				},
			}
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:996
		{
			if yyDollar[9].str == "CASCADE" {
				yylex.Error("CASCADE/RESTRICT options are not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[6].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[6].tableName,
					Grantees:   yyDollar[8].strs,
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1013
		{
			if yyDollar[8].str == "CASCADE" {
				yylex.Error("CASCADE/RESTRICT options are not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[5].tableName,
					Grantees:   yyDollar[7].strs,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1032
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1036
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1042
		{
			yyVAL.str = "SELECT"
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1046
		{
			yyVAL.str = "INSERT"
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1050
		{
			yyVAL.str = "UPDATE"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1054
		{
			yyVAL.str = "DELETE"
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1058
		{
			yyVAL.str = "TRUNCATE"
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1062
		{
			yyVAL.str = "REFERENCES"
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1066
		{
			yyVAL.str = "TRIGGER"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1070
		{
			yyVAL.str = "CREATE"
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1074
		{
			yyVAL.str = "CONNECT"
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1078
		{
			yyVAL.str = "EXECUTE"
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1082
		{
			yyVAL.str = "USAGE"
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1086
		{
			yyVAL.str = strings.ToUpper(yyDollar[1].colIdent.String())
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1092
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1102
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1106
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1110
		{
			yyVAL.str = "PUBLIC"
		}
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1117
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     String(yyDollar[4].tableName),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 71:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1128
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     String(TableName{Name: yyDollar[4].tableIdent}) + "." + yyDollar[6].colIdent.String(),
					Comment:    string(yyDollar[8].bytes),
				},
			}
		}
	case 72:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1139
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     String(TableName{Schema: yyDollar[4].tableIdent, Name: yyDollar[6].tableIdent}) + "." + yyDollar[8].colIdent.String(),
					Comment:    string(yyDollar[10].bytes),
				},
			}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1156
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1164
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 77:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1171
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1177
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1181
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1187
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1191
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 82:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1198
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1210
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1222
		{
			yyVAL.str = InsertStr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1226
		{
			yyVAL.str = ReplaceStr
		}
	case 86:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1232
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 87:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1238
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 88:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1242
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 89:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1246
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1251
		{
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1252
		{
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1256
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1260
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1265
		{
			yyVAL.partitions = nil
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1269
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1275
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1283
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1293
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1310
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1314
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1320
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1325
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1329
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1335
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1342
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1349
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1356
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1364
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1374
		{
			yyVAL.str = ""
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1378
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1382
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1386
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1390
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1396
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1403
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1417
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1421
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1425
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 122:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1432
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1440
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1450
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1454
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1461
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1471
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1482
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1487
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1492
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1499
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1503
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1514
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1518
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1524
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1528
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1532
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1538
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1542
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1546
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1550
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1556
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1560
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1566
		{
			yyVAL.str = SessionStr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1570
		{
			yyVAL.str = GlobalStr
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1575
		{
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1576
		{
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1580
		{
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1581
		{
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1582
		{
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1583
		{
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1584
		{
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1585
		{
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1586
		{
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1590
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1594
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1598
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1602
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1608
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1612
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1616
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1621
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1627
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1631
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1637
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1641
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1646
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1655
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1659
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1668
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1684
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1697
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1707
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1712
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1718
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1719
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1722
		{
			yyVAL.exprs = nil
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1723
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1727
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1732
		{
			yyVAL.empty = struct{}{}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1734
		{
			yyVAL.empty = struct{}{}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1737
		{
			yyVAL.bytes = nil
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1741
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1745
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1750
		{
			yyVAL.bytes = nil
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1754
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1758
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1762
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1766
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1770
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1775
		{
			yyVAL.expr = nil
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1779
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1784
		{
			yyVAL.expr = nil
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1788
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1793
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1797
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1802
		{
			yyVAL.bytes = nil
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1806
		{
			yyVAL.bytes = nil
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1812
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1819
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1825
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1829
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1834
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1838
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1842
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1846
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1850
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1854
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1858
		{
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1864
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1868
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1872
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1877
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1882
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1888
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1899
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1903
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val + "." + yyDollar[3].colIdent.val}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1909
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1922
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1927
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1932
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1937
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1943
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1948
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1953
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1958
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1963
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1968
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1973
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1978
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1983
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1992
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2002
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2007
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2012
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 251:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2019
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 252:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2026
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2034
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 254:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2039
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 255:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2044
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 256:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2049
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2055
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 258:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2061
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 259:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2068
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2075
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2081
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2087
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2091
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 264:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2095
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2099
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2103
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2109
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2113
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2117
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2121
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2125
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2129
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2133
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2137
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2141
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2145
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2149
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2155
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2161
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2167
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2173
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2177
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2182
		{
			yyVAL.sequence = &Sequence{}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2186
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2191
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2196
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2201
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2206
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2211
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2216
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2221
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2226
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2231
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2236
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2241
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 296:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2246
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2253
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2257
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2261
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2265
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2269
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2273
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2278
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2282
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2287
		{
			yyVAL.bytes = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2296
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2301
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2307
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2311
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2315
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2319
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2323
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2327
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2331
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2339
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2343
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2349
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2355
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2361
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2367
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2373
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2379
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2383
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2388
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2392
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2398
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2402
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2406
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2410
		{
			yyVAL.columnType = ColumnType{Type: "timestamp", Length: yyDollar[2].optVal, Timezone: BoolVal(true)}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2414
		{
			yyVAL.columnType = ColumnType{Type: "time", Length: yyDollar[2].optVal, Timezone: BoolVal(true)}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2418
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2422
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2426
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2430
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2434
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2438
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2444
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2448
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2458
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2462
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2474
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2514
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 364:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2544
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2548
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2592
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2597
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2602
		{
			yyVAL.optVal = nil
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2606
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2611
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2615
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2623
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2627
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2633
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2641
		{
			yyVAL.optVal = nil
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2645
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2649
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2658
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2662
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2666
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2671
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2675
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2680
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2684
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2689
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2693
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2697
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2702
		{
			yyVAL.str = ""
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2706
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2710
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2715
		{
			yyVAL.str = ""
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2719
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2723
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2729
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2734
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2738
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2742
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2748
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2752
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2758
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2762
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2768
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2772
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2777
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2781
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2789
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2793
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2797
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2801
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2805
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2809
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2813
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2817
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2821
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2832
		{
			yyVAL.str = ""
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2836
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2842
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2846
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2856
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2862
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2866
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2872
		{
			yyVAL.indexPartition = nil
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2876
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2880
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2886
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2890
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2894
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2906
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2910
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2914
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2918
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2922
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2926
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2930
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2936
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2940
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2946
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2951
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2967
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2972
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2976
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent("level"), Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2980
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2984
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2994
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2999
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3006
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 464:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3013
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 465:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3020
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 466:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3029
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 467:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3040
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3051
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3055
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3059
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3063
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 472:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3069
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 473:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3079
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 474:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3090
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 475:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3101
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 476:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3112
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3121
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 478:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3131
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 479:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3140
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "",
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 480:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3149
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				IndexType:  yyDollar[3].colIdent.String(),
				Exclusions: yyDollar[5].exclusionPairs,
				Where:      NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 481:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3157
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				IndexType:  "",
				Exclusions: yyDollar[3].exclusionPairs,
				Where:      NewWhere(WhereStr, yyDollar[5].expr),
			}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3167
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3171
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3177
		{
			yyVAL.exclusionPair = ExclusionPair{
				Column:   yyDollar[1].colIdent,
				Operator: yyDollar[3].str,
			}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3184
		{
			yyVAL.exclusionPair = ExclusionPair{
				Column:   NewColIdent(String(yyDollar[1].expr)),
				Operator: yyDollar[3].str,
			}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.str = "="
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3197
		{
			yyVAL.str = "<>"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3201
		{
			yyVAL.str = "<"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3205
		{
			yyVAL.str = ">"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.str = "&&"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.str = "<="
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3217
		{
			yyVAL.str = ">="
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3221
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3227
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3231
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3235
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3241
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3245
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3249
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3253
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3257
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3261
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3267
		{
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3268
		{
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3272
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3276
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3281
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3288
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3292
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3299
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3303
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3309
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3313
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3318
		{
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3319
		{
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3323
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3327
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3331
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3337
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3341
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3345
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3350
		{
			setAllowComments(yylex, true)
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3354
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3360
		{
			yyVAL.bytes2 = nil
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3364
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3370
		{
			yyVAL.str = UnionStr
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3374
		{
			yyVAL.str = UnionAllStr
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3378
		{
			yyVAL.str = UnionDistinctStr
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3383
		{
			yyVAL.str = ""
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3387
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3391
		{
			yyVAL.str = SQLCacheStr
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3396
		{
			yyVAL.str = ""
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3400
		{
			yyVAL.str = DistinctStr
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3405
		{
			yyVAL.str = ""
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3409
		{
			yyVAL.str = StraightJoinHint
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3414
		{
			yyVAL.selectExprs = nil
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3418
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3424
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3428
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3434
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3438
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3442
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3446
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3451
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3455
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3459
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3466
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.overExpr = nil
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3475
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 552:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3479
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3483
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 554:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3487
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3492
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3496
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3502
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3506
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3516
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3520
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3524
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3529
		{
			yyVAL.strs = []string{}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3533
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3539
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3543
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3549
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3553
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3557
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3561
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3565
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3569
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3573
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3577
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3583
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 577:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3587
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3593
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3598
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3602
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3608
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3612
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3625
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3629
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3633
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3637
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3643
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3645
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3649
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3651
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3655
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3657
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3660
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3662
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3665
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3669
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3673
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3680
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3686
		{
			yyVAL.str = JoinStr
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3690
		{
			yyVAL.str = JoinStr
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3694
		{
			yyVAL.str = JoinStr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3700
		{
			yyVAL.str = StraightJoinStr
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3706
		{
			yyVAL.str = LeftJoinStr
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3710
		{
			yyVAL.str = LeftJoinStr
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3714
		{
			yyVAL.str = RightJoinStr
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.str = RightJoinStr
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3724
		{
			yyVAL.str = NaturalJoinStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3728
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3738
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3742
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3748
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3752
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3757
		{
			yyVAL.indexHints = nil
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3761
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3765
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3769
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3774
		{
			yyVAL.expr = nil
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3778
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3783
		{
			yyVAL.columns = nil
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3793
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3797
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3801
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3805
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3809
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3813
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3817
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3821
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3827
		{
			yyVAL.str = ""
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3831
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3837
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3841
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3847
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3851
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, All: true}
		}
	case 636:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3855
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 637:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3859
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3863
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3867
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3871
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3875
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3879
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3883
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 644:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3887
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 645:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3891
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3895
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3900
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3904
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3908
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3914
		{
			yyVAL.str = IsNullStr
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3918
		{
			yyVAL.str = IsNotNullStr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3922
		{
			yyVAL.str = IsTrueStr
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3926
		{
			yyVAL.str = IsNotTrueStr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3930
		{
			yyVAL.str = IsFalseStr
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3934
		{
			yyVAL.str = IsNotFalseStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3940
		{
			yyVAL.str = EqualStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3944
		{
			yyVAL.str = LessThanStr
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3948
		{
			yyVAL.str = GreaterThanStr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3952
		{
			yyVAL.str = LessEqualStr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3956
		{
			yyVAL.str = GreaterEqualStr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3960
		{
			yyVAL.str = NotEqualStr
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3964
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3968
		{
			yyVAL.str = PosixRegexStr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3972
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3976
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3980
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.expr = nil
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3989
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4003
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4009
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4015
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4019
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4025
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4029
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4033
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4037
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4045
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4049
		{
			yyVAL.expr = &CastExpr{Expr: NewStrVal(yyDollar[2].bytes), Type: &ConvertType{Type: "date"}}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4053
		{
			yyVAL.expr = &CastExpr{Expr: NewStrVal(yyDollar[2].bytes), Type: &ConvertType{Type: "time"}}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.expr = &CastExpr{Expr: NewStrVal(yyDollar[2].bytes), Type: &ConvertType{Type: "timestamp"}}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.expr = yyDollar[1].arrayConstructor
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4069
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4073
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4077
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4081
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4085
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4089
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4093
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4097
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4101
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4105
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4109
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4113
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4117
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4121
		{
			yyVAL.expr = &CastExpr{
				Expr: yyDollar[1].expr,
				Type: &ConvertType{
					Type:   yyDollar[3].columnType.Type,
					Length: yyDollar[3].columnType.Length,
					Scale:  yyDollar[3].columnType.Scale,
				},
			}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4132
		{
			yyVAL.expr = &CastExpr{
				Expr: yyDollar[1].expr,
				Type: &ConvertType{
					Type:   yyDollar[3].columnType.Type,
					Length: yyDollar[3].columnType.Length,
				},
			}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.expr = &CastExpr{
				Expr: yyDollar[1].expr,
				Type: &ConvertType{
					Type: yyDollar[3].columnType.Type,
				},
			}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4151
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 703:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4155
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: &ConvertType{Type: string(yyDollar[3].bytes) + " WITH TIME ZONE"}}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4159
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4167
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4175
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4197
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4205
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4213
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4217
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4225
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4229
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4239
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 721:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4243
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4247
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4251
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4255
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 725:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4259
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4263
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4273
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4277
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 729:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4281
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 730:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4286
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 731:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4290
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 732:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4294
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 733:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4298
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 734:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4302
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 735:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4306
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 736:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4310
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 737:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4314
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 738:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4318
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 739:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4322
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 740:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4326
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 741:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4330
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 742:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4334
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 743:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4338
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4342
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4346
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4351
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4355
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4359
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4363
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4374
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4378
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4382
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4386
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4390
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4395
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4400
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4405
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4410
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4414
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4428
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4432
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4436
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4440
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4446
		{
			yyVAL.str = ""
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4450
		{
			yyVAL.str = BooleanModeStr
		}
	case 768:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4454
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 769:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4458
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4462
		{
			yyVAL.str = QueryExpansionStr
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4468
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4472
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4478
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4482
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4486
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4490
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4494
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4498
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4504
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4508
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4512
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4516
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4520
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4524
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4528
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4532
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4536
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4540
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4544
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4548
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4552
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4556
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4560
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4564
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4568
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4572
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4576
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4580
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4584
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4588
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4592
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4596
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4600
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4604
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4610
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4614
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4618
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4622
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4626
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4630
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type, Array: true}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4634
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4638
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4642
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Array: true}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4646
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4651
		{
			yyVAL.expr = nil
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4655
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4660
		{
			yyVAL.str = string("")
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4664
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4670
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4674
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 821:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4680
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4685
		{
			yyVAL.empty = struct{}{}
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4687
		{
			yyVAL.empty = struct{}{}
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4690
		{
			yyVAL.expr = nil
		}
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4694
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4700
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4704
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4708
		{
			yyVAL.colName = &ColName{Name: NewColIdent("level")}
		}
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4712
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 830:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4716
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4722
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4728
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4732
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4737
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4742
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4746
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4750
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4754
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4758
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4762
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4766
		{
			yyVAL.expr = &NullVal{}
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4772
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4776
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4781
		{
			yyVAL.exprs = nil
		}
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4785
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4790
		{
			yyVAL.expr = nil
		}
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4794
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4800
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4804
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4810
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4815
		{
			yyVAL.orderBy = nil
		}
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4819
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4825
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4829
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4835
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4840
		{
			yyVAL.str = AscScr
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4844
		{
			yyVAL.str = AscScr
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4848
		{
			yyVAL.str = DescScr
		}
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4853
		{
			yyVAL.limit = nil
		}
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4857
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 861:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4861
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 862:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4865
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4870
		{
			yyVAL.str = ""
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4874
		{
			yyVAL.str = ForUpdateStr
		}
	case 865:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4878
		{
			yyVAL.str = ShareModeStr
		}
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4891
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4895
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4899
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 869:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4904
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4908
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 871:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4912
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4919
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 873:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4923
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4929
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4933
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4937
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4941
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4946
		{
			yyVAL.updateExprs = nil
		}
	case 879:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4950
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4956
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 881:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4960
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4966
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4970
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 884:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4976
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4982
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4992
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4996
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 888:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5002
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5008
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5012
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 891:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5018
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5022
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5026
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 894:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5031
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5035
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5041
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5047
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5054
		{
			yyVAL.bytes = []byte("charset")
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5061
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5065
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5069
		{
			yyVAL.expr = &Default{}
		}
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5074
		{
			yyVAL.empty = struct{}{}
		}
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5076
		{
			yyVAL.empty = struct{}{}
		}
	case 906:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5079
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5081
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5084
		{
			yyVAL.str = ""
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5086
		{
			yyVAL.str = IgnoreStr
		}
	case 910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5089
		{
			yyVAL.str = ""
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5091
		{
			yyVAL.str = "CASCADE"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5093
		{
			yyVAL.str = "RESTRICT"
		}
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5096
		{
			yyVAL.byt = 0
		}
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5098
		{
			yyVAL.byt = 1
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5102
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5109
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5113
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5117
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5121
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5127
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5131
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5136
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5143
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5149
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5153
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5157
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 929:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5163
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5167
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5171
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 932:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5177
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5181
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 934:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5188
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5192
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: nil}
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5199
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5203
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5210
		{
			// Most expressions should implement ArrayElement now
			// We use a type assertion here since value_expression returns Expr
			yyVAL.arrayElement = yyDollar[1].expr.(ArrayElement)
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5218
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 940:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5222
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5228
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5232
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5411
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5420
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
