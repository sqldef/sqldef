// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const POSIX_REGEX = 57427
const POSIX_REGEX_CI = 57428
const POSIX_NOT_REGEX = 57429
const POSIX_NOT_REGEX_CI = 57430
const SHIFT_LEFT = 57431
const SHIFT_RIGHT = 57432
const DIV = 57433
const MOD = 57434
const UNARY = 57435
const COLLATE = 57436
const BINARY = 57437
const UNDERSCORE_BINARY = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const SCHEMA = 57448
const TABLE = 57449
const INDEX = 57450
const MATERIALIZED = 57451
const VIEW = 57452
const TO = 57453
const IGNORE = 57454
const IF = 57455
const PRIMARY = 57456
const COLUMN = 57457
const CONSTRAINT = 57458
const REFERENCES = 57459
const SPATIAL = 57460
const FULLTEXT = 57461
const FOREIGN = 57462
const KEY_BLOCK_SIZE = 57463
const POLICY = 57464
const WHILE = 57465
const UNIQUE = 57466
const KEY = 57467
const SHOW = 57468
const DESCRIBE = 57469
const EXPLAIN = 57470
const DATE = 57471
const ESCAPE = 57472
const REPAIR = 57473
const OPTIMIZE = 57474
const TRUNCATE = 57475
const MAXVALUE = 57476
const PARTITION = 57477
const REORGANIZE = 57478
const LESS = 57479
const THAN = 57480
const PROCEDURE = 57481
const TRIGGER = 57482
const TYPE = 57483
const VINDEX = 57484
const VINDEXES = 57485
const STATUS = 57486
const VARIABLES = 57487
const RESTRICT = 57488
const CASCADE = 57489
const NO = 57490
const ACTION = 57491
const PERMISSIVE = 57492
const RESTRICTIVE = 57493
const PUBLIC = 57494
const CURRENT_USER = 57495
const SESSION_USER = 57496
const PAD_INDEX = 57497
const FILLFACTOR = 57498
const IGNORE_DUP_KEY = 57499
const STATISTICS_NORECOMPUTE = 57500
const STATISTICS_INCREMENTAL = 57501
const ALLOW_ROW_LOCKS = 57502
const ALLOW_PAGE_LOCKS = 57503
const BEFORE = 57504
const AFTER = 57505
const EACH = 57506
const ROW = 57507
const SCROLL = 57508
const CURSOR = 57509
const OPEN = 57510
const CLOSE = 57511
const FETCH = 57512
const PRIOR = 57513
const FIRST = 57514
const LAST = 57515
const DEALLOCATE = 57516
const DEFERRABLE = 57517
const INITIALLY = 57518
const IMMEDIATE = 57519
const DEFERRED = 57520
const CONCURRENTLY = 57521
const BEGIN = 57522
const START = 57523
const TRANSACTION = 57524
const COMMIT = 57525
const ROLLBACK = 57526
const BIT = 57527
const TINYINT = 57528
const SMALLINT = 57529
const SMALLSERIAL = 57530
const MEDIUMINT = 57531
const INT = 57532
const INTEGER = 57533
const SERIAL = 57534
const BIGINT = 57535
const BIGSERIAL = 57536
const INTNUM = 57537
const REAL = 57538
const DOUBLE = 57539
const PRECISION = 57540
const FLOAT_TYPE = 57541
const DECIMAL = 57542
const NUMERIC = 57543
const SMALLMONEY = 57544
const MONEY = 57545
const TIME = 57546
const TIMESTAMP = 57547
const DATETIME = 57548
const YEAR = 57549
const DATETIMEOFFSET = 57550
const DATETIME2 = 57551
const SMALLDATETIME = 57552
const CHAR = 57553
const VARCHAR = 57554
const VARYING = 57555
const BOOL = 57556
const CHARACTER = 57557
const VARBINARY = 57558
const NCHAR = 57559
const NVARCHAR = 57560
const NTEXT = 57561
const UUID = 57562
const TEXT = 57563
const TINYTEXT = 57564
const MEDIUMTEXT = 57565
const LONGTEXT = 57566
const CITEXT = 57567
const BLOB = 57568
const TINYBLOB = 57569
const MEDIUMBLOB = 57570
const LONGBLOB = 57571
const JSON = 57572
const JSONB = 57573
const ENUM = 57574
const GEOMETRY = 57575
const POINT = 57576
const LINESTRING = 57577
const POLYGON = 57578
const GEOMETRYCOLLECTION = 57579
const MULTIPOINT = 57580
const MULTILINESTRING = 57581
const MULTIPOLYGON = 57582
const VARIADIC = 57583
const ARRAY = 57584
const NOW = 57585
const GETDATE = 57586
const BPCHAR = 57587
const TEXT_PATTERN_OPS = 57588
const NULLX = 57589
const AUTO_INCREMENT = 57590
const APPROXNUM = 57591
const SIGNED = 57592
const UNSIGNED = 57593
const ZEROFILL = 57594
const ZONE = 57595
const AUTOINCREMENT = 57596
const DATABASES = 57597
const TABLES = 57598
const VITESS_KEYSPACES = 57599
const VITESS_SHARDS = 57600
const VITESS_TABLETS = 57601
const VSCHEMA_TABLES = 57602
const EXTENDED = 57603
const FULL = 57604
const PROCESSLIST = 57605
const NAMES = 57606
const CHARSET = 57607
const GLOBAL = 57608
const SESSION = 57609
const ISOLATION = 57610
const LEVEL = 57611
const READ = 57612
const WRITE = 57613
const ONLY = 57614
const REPEATABLE = 57615
const COMMITTED = 57616
const UNCOMMITTED = 57617
const SERIALIZABLE = 57618
const NEW = 57619
const CURRENT_TIMESTAMP = 57620
const DATABASE = 57621
const CURRENT_DATE = 57622
const CURRENT_TIME = 57623
const LOCALTIME = 57624
const LOCALTIMESTAMP = 57625
const UTC_DATE = 57626
const UTC_TIME = 57627
const UTC_TIMESTAMP = 57628
const REPLACE = 57629
const CONVERT = 57630
const CAST = 57631
const SUBSTR = 57632
const SUBSTRING = 57633
const GROUP_CONCAT = 57634
const SEPARATOR = 57635
const INHERIT = 57636
const MATCH = 57637
const AGAINST = 57638
const BOOLEAN = 57639
const LANGUAGE = 57640
const WITH = 57641
const WITHOUT = 57642
const PARSER = 57643
const QUERY = 57644
const EXPANSION = 57645
const UNUSED = 57646
const VIRTUAL = 57647
const STORED = 57648
const GENERATED = 57649
const ALWAYS = 57650
const IDENTITY = 57651
const SEQUENCE = 57652
const INCREMENT = 57653
const MINVALUE = 57654
const CACHE = 57655
const CYCLE = 57656
const OWNED = 57657
const NONE = 57658
const CLUSTERED = 57659
const NONCLUSTERED = 57660
const REPLICATION = 57661
const INCLUDE = 57662
const HOLDLOCK = 57663
const NOLOCK = 57664
const NOWAIT = 57665
const PAGLOCK = 57666
const ROWLOCK = 57667
const TABLELOCK = 57668
const TYPECAST = 57669
const CHECK = 57670

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	127, 153,
	-2, 143,
	-1, 36,
	161, 484,
	162, 484,
	-2, 474,
	-1, 276,
	114, 842,
	-2, 838,
	-1, 277,
	114, 843,
	-2, 839,
	-1, 278,
	114, 844,
	-2, 235,
	-1, 319,
	259, 853,
	-2, 736,
	-1, 351,
	81, 1068,
	-2, 82,
	-1, 352,
	81, 1018,
	-2, 83,
	-1, 358,
	81, 997,
	-2, 809,
	-1, 360,
	81, 1042,
	-2, 811,
	-1, 616,
	259, 853,
	-2, 512,
	-1, 665,
	259, 853,
	-2, 512,
	-1, 694,
	52, 41,
	54, 41,
	-2, 43,
	-1, 726,
	111, 992,
	242, 992,
	248, 992,
	-2, 271,
	-1, 727,
	111, 993,
	242, 993,
	248, 993,
	-2, 272,
	-1, 728,
	242, 995,
	248, 995,
	-2, 306,
	-1, 729,
	242, 996,
	248, 996,
	-2, 306,
	-1, 730,
	242, 1095,
	248, 1095,
	-2, 306,
	-1, 731,
	242, 1043,
	248, 1043,
	-2, 306,
	-1, 732,
	242, 1048,
	248, 1048,
	-2, 306,
	-1, 733,
	111, 1046,
	242, 1046,
	248, 1046,
	-2, 278,
	-1, 735,
	111, 1094,
	242, 1094,
	248, 1094,
	-2, 306,
	-1, 736,
	242, 1080,
	248, 1080,
	-2, 323,
	-1, 737,
	242, 1086,
	248, 1086,
	-2, 323,
	-1, 738,
	242, 1036,
	248, 1036,
	-2, 323,
	-1, 739,
	242, 1032,
	248, 1032,
	-2, 323,
	-1, 741,
	111, 991,
	242, 991,
	248, 991,
	-2, 287,
	-1, 742,
	111, 1084,
	242, 1084,
	248, 1084,
	-2, 288,
	-1, 743,
	111, 1034,
	242, 1034,
	248, 1034,
	-2, 289,
	-1, 744,
	111, 1031,
	242, 1031,
	248, 1031,
	-2, 290,
	-1, 745,
	111, 1023,
	242, 1023,
	248, 1023,
	-2, 291,
	-1, 747,
	111, 1093,
	242, 1093,
	248, 1093,
	-2, 293,
	-1, 750,
	111, 1004,
	242, 1004,
	248, 1004,
	-2, 263,
	-1, 751,
	111, 1082,
	242, 1082,
	248, 1082,
	-2, 306,
	-1, 752,
	111, 1083,
	242, 1083,
	248, 1083,
	-2, 306,
	-1, 753,
	111, 1005,
	242, 1005,
	248, 1005,
	-2, 306,
	-1, 754,
	111, 1006,
	242, 1006,
	248, 1006,
	-2, 267,
	-1, 755,
	111, 1007,
	242, 1007,
	248, 1007,
	-2, 306,
	-1, 756,
	111, 1073,
	242, 1073,
	248, 1073,
	-2, 269,
	-1, 757,
	111, 1107,
	242, 1107,
	248, 1107,
	-2, 270,
	-1, 758,
	111, 1015,
	242, 1015,
	248, 1015,
	-2, 296,
	-1, 759,
	111, 1052,
	242, 1052,
	248, 1052,
	-2, 297,
	-1, 760,
	111, 1030,
	242, 1030,
	248, 1030,
	-2, 298,
	-1, 761,
	111, 1053,
	242, 1053,
	248, 1053,
	-2, 299,
	-1, 762,
	111, 1016,
	242, 1016,
	248, 1016,
	-2, 300,
	-1, 763,
	111, 1040,
	242, 1040,
	248, 1040,
	-2, 301,
	-1, 764,
	111, 1039,
	242, 1039,
	248, 1039,
	-2, 302,
	-1, 765,
	111, 1041,
	242, 1041,
	248, 1041,
	-2, 303,
	-1, 766,
	111, 990,
	242, 990,
	248, 990,
	-2, 245,
	-1, 767,
	111, 1085,
	242, 1085,
	248, 1085,
	-2, 246,
	-1, 768,
	111, 1074,
	242, 1074,
	248, 1074,
	-2, 247,
	-1, 769,
	111, 1076,
	242, 1076,
	248, 1076,
	-2, 248,
	-1, 770,
	111, 1035,
	242, 1035,
	248, 1035,
	-2, 249,
	-1, 771,
	111, 1020,
	242, 1020,
	248, 1020,
	-2, 250,
	-1, 772,
	111, 1021,
	242, 1021,
	248, 1021,
	-2, 251,
	-1, 773,
	111, 1069,
	242, 1069,
	248, 1069,
	-2, 252,
	-1, 774,
	111, 988,
	242, 988,
	248, 988,
	-2, 253,
	-1, 775,
	111, 989,
	242, 989,
	248, 989,
	-2, 254,
	-1, 776,
	111, 1060,
	242, 1060,
	248, 1060,
	-2, 308,
	-1, 777,
	111, 1009,
	242, 1009,
	248, 1009,
	-2, 308,
	-1, 778,
	111, 1013,
	242, 1013,
	248, 1013,
	-2, 308,
	-1, 779,
	111, 1008,
	242, 1008,
	248, 1008,
	-2, 310,
	-1, 780,
	111, 1047,
	242, 1047,
	248, 1047,
	-2, 310,
	-1, 781,
	111, 1038,
	242, 1038,
	248, 1038,
	-2, 261,
	-1, 782,
	111, 1075,
	242, 1075,
	248, 1075,
	-2, 262,
	-1, 858,
	114, 846,
	-2, 841,
	-1, 995,
	137, 391,
	-2, 1002,
	-1, 1114,
	259, 853,
	-2, 512,
	-1, 1136,
	5, 28,
	-2, 633,
	-1, 1162,
	5, 27,
	-2, 782,
	-1, 1209,
	56, 364,
	-2, 361,
	-1, 1226,
	114, 844,
	-2, 235,
	-1, 1452,
	5, 27,
	-2, 90,
	-1, 1453,
	5, 27,
	-2, 91,
	-1, 1512,
	5, 28,
	-2, 783,
	-1, 1619,
	5, 27,
	-2, 785,
	-1, 1696,
	55, 102,
	-2, 172,
	-1, 1699,
	55, 102,
	-2, 172,
	-1, 1767,
	184, 54,
	-2, 172,
	-1, 1783,
	55, 102,
	-2, 171,
	-1, 1803,
	5, 28,
	-2, 786,
	-1, 1958,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 20514

var yyAct = [...]int16{
	362, 1584, 1910, 1674, 1059, 1634, 1793, 1677, 1768, 1724,
	717, 1757, 542, 1518, 255, 1631, 620, 946, 1545, 272,
	716, 1522, 787, 1911, 1165, 1747, 1178, 1198, 834, 1201,
	1367, 964, 492, 1368, 1535, 92, 1397, 53, 92, 1782,
	309, 529, 293, 1583, 1272, 281, 1051, 688, 1224, 1364,
	984, 1067, 1129, 249, 990, 686, 1005, 1068, 1230, 1183,
	277, 282, 92, 92, 21, 601, 947, 1339, 1119, 883,
	916, 274, 66, 911, 1125, 92, 1046, 793, 1257, 1000,
	704, 92, 1170, 92, 934, 1024, 860, 703, 548, 92,
	1700, 285, 724, 350, 675, 914, 1810, 250, 251, 252,
	253, 943, 357, 280, 554, 353, 338, 562, 719, 690,
	264, 619, 3, 718, 643, 1335, 498, 336, 1241, 261,
	259, 48, 26, 27, 1101, 1021, 347, 910, 1937, 1018,
	268, 337, 1404, 1688, 1523, 1524, 1525, 1526, 1527, 1528,
	52, 345, 1903, 28, 602, 1424, 1758, 1410, 493, 494,
	1971, 1551, 570, 341, 573, 586, 489, 1411, 1875, 254,
	588, 589, 590, 591, 592, 593, 594, 1222, 571, 572,
	569, 595, 596, 597, 598, 575, 574, 584, 585, 577,
	578, 579, 580, 581, 582, 583, 576, 1559, 500, 586,
	1715, 576, 1964, 505, 586, 575, 574, 584, 585, 577,
	578, 579, 580, 581, 582, 583, 576, 1328, 1801, 586,
	1828, 1829, 1729, 1020, 1949, 1728, 1060, 1502, 541, 579,
	580, 581, 582, 583, 576, 1830, 1894, 586, 92, 1126,
	1127, 575, 574, 584, 585, 577, 578, 579, 580, 581,
	582, 583, 576, 1694, 1846, 586, 1887, 1179, 1122, 1874,
	527, 1800, 1359, 1693, 1825, 1506, 506, 277, 277, 575,
	574, 584, 585, 577, 578, 579, 580, 581, 582, 583,
	576, 1415, 1390, 586, 277, 1391, 1392, 87, 83, 84,
	1191, 85, 541, 1190, 978, 979, 1192, 277, 277, 277,
	277, 277, 277, 277, 977, 825, 550, 1503, 1689, 1690,
	1692, 705, 826, 706, 1691, 1235, 537, 1237, 1236, 1485,
	1484, 277, 577, 578, 579, 580, 581, 582, 583, 576,
	277, 1834, 586, 575, 574, 584, 585, 577, 578, 579,
	580, 581, 582, 583, 576, 1836, 92, 586, 1483, 1243,
	493, 494, 1023, 92, 92, 92, 1405, 615, 522, 1500,
	1608, 1035, 1672, 1025, 1025, 1124, 938, 1333, 607, 608,
	609, 610, 611, 612, 613, 1332, 1331, 298, 1831, 1495,
	1047, 603, 551, 1493, 575, 574, 584, 585, 577, 578,
	579, 580, 581, 582, 583, 576, 1499, 248, 586, 587,
	353, 575, 574, 584, 585, 577, 578, 579, 580, 581,
	582, 583, 576, 634, 1893, 586, 1895, 1969, 1865, 1334,
	1962, 1961, 1945, 1946, 1916, 1716, 524, 49, 1908, 526,
	1763, 1676, 648, 587, 1458, 1459, 1650, 1748, 587, 533,
	534, 356, 795, 490, 341, 1963, 1773, 497, 649, 1947,
	501, 502, 1794, 587, 1403, 1413, 795, 1795, 523, 525,
	86, 1616, 1553, 343, 1311, 944, 1552, 1216, 1215, 1942,
	1560, 587, 1548, 575, 574, 584, 585, 577, 578, 579,
	580, 581, 582, 583, 576, 701, 1221, 586, 794, 587,
	1729, 1203, 1475, 530, 531, 532, 695, 535, 89, 1601,
	1924, 1706, 1968, 1465, 539, 57, 499, 1590, 1832, 1833,
	1835, 1837, 1838, 1886, 511, 81, 92, 587, 92, 804,
	1466, 92, 783, 1308, 92, 496, 346, 1799, 92, 495,
	59, 60, 61, 62, 63, 80, 1035, 81, 503, 965,
	967, 1028, 1048, 1915, 508, 1182, 509, 1181, 507, 92,
	1180, 784, 516, 575, 574, 584, 585, 577, 578, 579,
	580, 581, 582, 583, 576, 504, 587, 586, 92, 227,
	277, 277, 1543, 1543, 82, 837, 1312, 277, 1953, 277,
	1001, 587, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 1002, 521, 1774,
	1775, 1776, 796, 797, 1120, 1546, 1547, 1549, 1720, 356,
	356, 356, 356, 1515, 356, 1432, 796, 797, 857, 966,
	861, 356, 785, 786, 1208, 1309, 1320, 277, 1307, 1147,
	813, 799, 587, 277, 277, 277, 277, 277, 277, 277,
	277, 1113, 1310, 913, 277, 1206, 1143, 1034, 564, 587,
	859, 832, 811, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 605, 606,
	917, 862, 708, 839, 618, 277, 277, 277, 277, 858,
	92, 854, 277, 92, 92, 92, 92, 92, 566, 1142,
	889, 518, 517, 1209, 829, 92, 986, 985, 92, 926,
	928, 856, 92, 1440, 561, 936, 649, 92, 92, 927,
	1002, 886, 888, 1740, 1001, 560, 559, 1739, 277, 905,
	908, 587, 1096, 1738, 1737, 1959, 356, 1736, 1957, 922,
	923, 1002, 561, 710, 1735, 931, 636, 637, 638, 639,
	640, 641, 642, 948, 921, 932, 1734, 901, 510, 940,
	605, 606, 353, 1732, 560, 559, 1316, 1455, 1441, 1193,
	983, 1864, 972, 559, 935, 1168, 707, 552, 1361, 803,
	939, 561, 941, 942, 341, 341, 341, 341, 341, 561,
	814, 815, 816, 817, 818, 819, 820, 821, 961, 341,
	950, 951, 1960, 953, 822, 823, 92, 92, 341, 670,
	975, 587, 1097, 92, 974, 92, 970, 867, 694, 921,
	92, 969, 1200, 92, 949, 92, 988, 952, 92, 1073,
	790, 865, 866, 864, 1026, 1027, 1029, 1030, 1031, 1649,
	1032, 1033, 1635, 1315, 513, 514, 515, 1053, 1140, 78,
	1139, 277, 277, 277, 277, 1637, 556, 1042, 1043, 1044,
	935, 1045, 1152, 1340, 1927, 277, 899, 560, 559, 1926,
	1103, 1652, 1212, 270, 1049, 1050, 898, 79, 723, 723,
	835, 836, 902, 541, 561, 50, 277, 277, 277, 1892,
	1891, 903, 904, 1200, 857, 863, 356, 1890, 1342, 560,
	559, 71, 76, 1813, 68, 1811, 900, 356, 356, 356,
	356, 356, 356, 356, 356, 1750, 561, 72, 1809, 77,
	1211, 356, 356, 1244, 1812, 861, 560, 559, 1636, 1662,
	1648, 560, 559, 277, 1888, 73, 74, 69, 335, 1579,
	277, 841, 1102, 561, 850, 852, 853, 1578, 561, 1420,
	851, 564, 1200, 277, 356, 858, 277, 1116, 1117, 1118,
	1109, 1053, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1344,
	1264, 1115, 831, 1349, 1199, 1343, 862, 1889, 1733, 800,
	1341, 801, 1730, 1262, 805, 1141, 1347, 808, 1049, 1050,
	560, 559, 92, 907, 907, 1615, 1200, 1363, 1576, 1345,
	1346, 909, 1110, 1111, 1112, 1571, 356, 561, 830, 1244,
	1570, 1130, 827, 50, 1244, 1185, 929, 1187, 617, 1348,
	1350, 929, 884, 1477, 885, 560, 559, 1258, 1132, 1218,
	617, 846, 1408, 560, 559, 1407, 92, 1406, 1151, 277,
	1761, 1976, 561, 1540, 1948, 1623, 1934, 1186, 1149, 1196,
	561, 1540, 1899, 1540, 1882, 1175, 1761, 1881, 541, 929,
	1063, 1217, 1065, 1878, 1877, 1870, 541, 1540, 1867, 1540,
	1866, 1623, 1791, 1898, 70, 1162, 92, 1188, 1210, 1094,
	1194, 1234, 1062, 341, 1232, 1623, 1659, 1844, 356, 897,
	540, 1623, 541, 1626, 1625, 1781, 356, 1204, 1205, 1207,
	75, 1623, 1624, 490, 810, 1251, 1633, 1253, 1254, 1255,
	1256, 1540, 1539, 1387, 541, 1514, 541, 92, 92, 1447,
	1446, 1754, 1273, 1443, 1444, 92, 1443, 1442, 1134, 541,
	545, 549, 919, 541, 1247, 277, 809, 1260, 1261, 791,
	1259, 277, 277, 945, 789, 1263, 519, 567, 512, 1280,
	677, 680, 681, 682, 678, 277, 679, 683, 672, 541,
	1171, 1172, 1753, 277, 277, 277, 277, 277, 277, 1281,
	1278, 973, 1054, 277, 698, 1325, 1762, 356, 1761, 356,
	1752, 277, 715, 714, 621, 1671, 723, 277, 277, 277,
	1667, 1666, 277, 632, 23, 277, 356, 1663, 1366, 1572,
	1562, 1597, 1433, 1365, 671, 1327, 1166, 1360, 1326, 1358,
	1167, 1166, 1329, 1330, 277, 699, 1336, 697, 1160, 1396,
	356, 1161, 1369, 1375, 1323, 1338, 54, 23, 672, 1352,
	1351, 1389, 1277, 23, 1353, 1354, 1355, 1356, 1357, 919,
	1167, 50, 948, 1388, 1374, 1853, 277, 261, 948, 48,
	26, 27, 672, 1376, 1618, 1276, 1146, 1395, 1277, 1057,
	1058, 1688, 971, 1409, 697, 1134, 1066, 1134, 1072, 1510,
	858, 28, 1540, 1074, 50, 261, 1091, 672, 1092, 1561,
	50, 1093, 1166, 1581, 1580, 50, 92, 1454, 1234, 1445,
	1412, 1232, 976, 1414, 1421, 1371, 1134, 92, 700, 1145,
	833, 1965, 1872, 564, 1843, 1756, 310, 47, 1755, 1744,
	1743, 1703, 1423, 1702, 1673, 1425, 1434, 1435, 1661, 1437,
	1438, 1439, 50, 1602, 1599, 1431, 92, 584, 585, 577,
	578, 579, 580, 581, 582, 583, 576, 277, 1025, 586,
	1052, 1427, 1429, 1450, 92, 1430, 1428, 1417, 1382, 277,
	1462, 1380, 1265, 1266, 47, 1461, 1184, 1468, 1047, 1223,
	1197, 1041, 260, 1040, 1313, 65, 1470, 1479, 342, 1171,
	1172, 1694, 788, 1279, 1725, 356, 1749, 1582, 1451, 1365,
	1473, 1693, 1325, 1202, 277, 1174, 807, 1476, 792, 538,
	960, 277, 681, 682, 1213, 1036, 1037, 1038, 1039, 1480,
	958, 1452, 1453, 845, 956, 959, 1239, 92, 1486, 957,
	1517, 1491, 1177, 1176, 955, 954, 1921, 1529, 1530, 1531,
	1482, 265, 266, 1534, 1873, 1319, 1689, 1690, 1692, 1098,
	1919, 1108, 1691, 847, 848, 341, 1509, 277, 1863, 555,
	1550, 1107, 1252, 277, 1268, 543, 1488, 1489, 356, 1490,
	713, 1558, 553, 1492, 1532, 1494, 1536, 544, 520, 1419,
	1909, 1556, 1508, 1555, 835, 836, 1064, 1603, 806, 1418,
	1275, 277, 92, 677, 680, 681, 682, 678, 1270, 679,
	683, 356, 1269, 798, 685, 1234, 262, 263, 1232, 1219,
	915, 1563, 555, 1938, 1573, 1106, 621, 1596, 1457, 924,
	925, 356, 1402, 1105, 1541, 1544, 256, 1574, 1896, 1709,
	1589, 257, 54, 1585, 1708, 1606, 1273, 1536, 1167, 1588,
	277, 277, 1861, 277, 277, 277, 1069, 1070, 1071, 1267,
	1860, 1859, 1858, 1827, 1826, 356, 1401, 1400, 528, 528,
	528, 528, 557, 528, 1742, 49, 1741, 1717, 929, 1214,
	528, 1373, 1184, 1592, 929, 1593, 1594, 1595, 828, 56,
	1683, 8, 1680, 7, 1617, 1681, 6, 47, 1591, 1679,
	5, 1369, 58, 587, 1283, 277, 1464, 1598, 1321, 696,
	277, 982, 600, 356, 1630, 1398, 604, 51, 1, 1128,
	1646, 1609, 1610, 1647, 1611, 1612, 1613, 1645, 1651, 614,
	297, 277, 1653, 92, 1944, 616, 1655, 1914, 283, 1521,
	1854, 1766, 1849, 1239, 1772, 1751, 1220, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 67, 633, 635, 635,
	635, 635, 635, 635, 635, 635, 1704, 664, 665, 666,
	667, 1678, 838, 1585, 1668, 1619, 1664, 1845, 1665, 687,
	1760, 1456, 1274, 1292, 1449, 1061, 1271, 1079, 1726, 1695,
	1792, 1806, 1632, 1542, 993, 987, 1195, 1463, 1722, 1718,
	1467, 488, 1469, 64, 1731, 994, 992, 1723, 277, 1369,
	991, 1471, 1687, 989, 1245, 1246, 1019, 1248, 1249, 1250,
	1242, 1022, 1541, 722, 277, 720, 721, 725, 235, 1474,
	348, 684, 709, 558, 1099, 1100, 1306, 549, 356, 1305,
	918, 920, 1075, 1314, 277, 277, 824, 1095, 536, 237,
	599, 1764, 1104, 1189, 1789, 1790, 937, 355, 1372, 277,
	277, 547, 1707, 1777, 1780, 1605, 1585, 1759, 277, 1448,
	783, 1150, 631, 933, 284, 1765, 1797, 849, 296, 295,
	1460, 294, 1719, 840, 1807, 1802, 1159, 1784, 1785, 1786,
	1787, 1788, 1687, 568, 340, 668, 1822, 1821, 1519, 676,
	674, 1519, 1519, 1519, 673, 1533, 277, 963, 1841, 1472,
	1819, 1820, 356, 277, 1173, 1778, 1839, 1169, 339, 1322,
	1505, 1823, 1714, 1135, 844, 25, 55, 267, 1855, 948,
	1852, 19, 1842, 18, 17, 1519, 20, 1850, 16, 1153,
	1239, 15, 1564, 14, 29, 528, 13, 12, 1585, 1840,
	356, 1862, 11, 10, 9, 1686, 528, 528, 528, 528,
	528, 528, 528, 528, 1868, 1685, 1684, 1682, 1586, 4,
	528, 528, 356, 356, 258, 22, 2, 0, 1687, 0,
	0, 0, 1600, 1814, 1815, 1816, 1817, 1818, 0, 0,
	0, 0, 1687, 1604, 0, 1884, 1885, 1879, 1880, 0,
	1883, 0, 0, 0, 0, 0, 1902, 1901, 1900, 0,
	0, 0, 1906, 0, 1897, 1905, 0, 0, 1913, 0,
	0, 0, 1912, 1917, 1920, 1904, 0, 1918, 0, 0,
	0, 0, 1621, 1622, 1923, 1436, 0, 0, 1678, 0,
	0, 47, 0, 0, 1635, 0, 0, 92, 1925, 0,
	0, 0, 0, 0, 277, 1587, 0, 1637, 1398, 622,
	1933, 0, 0, 1930, 0, 1932, 1687, 0, 1855, 0,
	1654, 0, 0, 1931, 0, 92, 0, 1935, 1687, 1687,
	1687, 0, 0, 0, 1941, 1952, 1764, 1941, 0, 0,
	1954, 0, 0, 0, 0, 0, 0, 1955, 1586, 1669,
	0, 1956, 0, 0, 0, 0, 0, 0, 1675, 342,
	342, 342, 342, 342, 0, 0, 1967, 1696, 1123, 1972,
	1519, 277, 1973, 0, 687, 1687, 968, 1687, 1687, 0,
	1636, 0, 1131, 342, 1133, 0, 0, 0, 0, 0,
	0, 1721, 1136, 1137, 1138, 1966, 0, 1941, 0, 0,
	0, 1018, 1148, 0, 0, 0, 1362, 1154, 0, 0,
	1155, 1156, 1157, 1158, 1638, 1639, 1640, 1641, 1642, 1643,
	1644, 1377, 1378, 1007, 0, 1379, 0, 0, 1381, 0,
	0, 0, 0, 0, 1687, 0, 1670, 1014, 1687, 1003,
	0, 1586, 1974, 0, 0, 1004, 0, 1393, 0, 0,
	1958, 0, 0, 0, 0, 0, 1767, 1769, 1770, 1771,
	0, 0, 0, 0, 1783, 1696, 1696, 1783, 1696, 1696,
	1398, 1398, 0, 0, 0, 0, 528, 0, 528, 0,
	1575, 0, 1577, 0, 0, 929, 0, 0, 1804, 0,
	0, 0, 0, 1805, 0, 528, 0, 1808, 0, 0,
	0, 0, 0, 1010, 0, 1006, 1015, 0, 0, 0,
	0, 1675, 1398, 1012, 1011, 0, 0, 0, 0, 0,
	0, 0, 0, 1586, 1398, 0, 0, 1607, 0, 1847,
	0, 0, 0, 0, 0, 723, 1144, 546, 0, 0,
	1857, 0, 0, 0, 1114, 0, 0, 0, 0, 0,
	0, 1783, 0, 0, 0, 0, 0, 0, 1727, 0,
	0, 0, 1871, 0, 0, 0, 0, 0, 0, 0,
	1478, 0, 90, 0, 0, 247, 0, 0, 575, 574,
	584, 585, 577, 578, 579, 580, 581, 582, 583, 576,
	0, 0, 586, 0, 0, 0, 0, 271, 0, 90,
	90, 0, 0, 1337, 0, 261, 0, 48, 26, 27,
	0, 1519, 90, 0, 0, 0, 0, 1507, 90, 1688,
	90, 1907, 0, 0, 621, 0, 90, 0, 0, 28,
	1163, 1164, 0, 0, 0, 0, 0, 1008, 0, 0,
	1398, 0, 0, 1009, 1922, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1386, 1121, 0, 0, 342, 574,
	584, 585, 577, 578, 579, 580, 581, 582, 583, 576,
	1557, 0, 586, 0, 0, 723, 0, 1939, 0, 575,
	574, 584, 585, 577, 578, 579, 580, 581, 582, 583,
	576, 0, 0, 586, 0, 0, 1016, 0, 1017, 575,
	574, 584, 585, 577, 578, 579, 580, 581, 582, 583,
	576, 0, 0, 586, 1085, 0, 0, 1013, 0, 0,
	261, 356, 48, 26, 27, 0, 0, 0, 1084, 1694,
	0, 0, 0, 1675, 1688, 0, 0, 644, 261, 1693,
	48, 26, 27, 0, 28, 0, 0, 0, 0, 0,
	0, 0, 1688, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 28, 0, 1083, 90, 0, 0, 0, 0,
	0, 0, 646, 0, 0, 0, 0, 0, 1951, 0,
	528, 0, 0, 0, 1689, 1690, 1692, 0, 0, 0,
	1691, 0, 0, 0, 1977, 0, 1851, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1656, 0,
	1487, 0, 1943, 1660, 0, 0, 0, 1080, 1077, 1078,
	0, 1076, 1496, 1497, 1498, 0, 587, 1501, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 0, 0,
	0, 1511, 1512, 1513, 1694, 1516, 0, 0, 1370, 647,
	47, 1087, 1090, 0, 1693, 0, 0, 662, 645, 0,
	0, 0, 1694, 651, 650, 0, 0, 1383, 1384, 1385,
	0, 0, 1693, 90, 0, 0, 0, 0, 0, 0,
	90, 692, 90, 0, 0, 0, 644, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1569, 0, 1689,
	1690, 1692, 0, 49, 1416, 1691, 587, 0, 0, 0,
	0, 1746, 0, 0, 0, 0, 0, 1689, 1690, 1692,
	1426, 646, 0, 1691, 0, 0, 616, 587, 0, 0,
	0, 1082, 0, 0, 0, 261, 0, 48, 26, 27,
	663, 0, 0, 0, 0, 0, 1298, 587, 1779, 1688,
	0, 261, 0, 48, 26, 27, 47, 47, 0, 28,
	0, 0, 1796, 621, 1081, 1688, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 28, 1614, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 0, 890, 891,
	0, 892, 893, 894, 896, 895, 0, 887, 647, 0,
	1627, 1628, 1629, 0, 1086, 0, 662, 645, 0, 1940,
	342, 0, 651, 650, 0, 1299, 1848, 0, 49, 0,
	1088, 1301, 1294, 1295, 0, 1302, 1297, 1296, 1658, 0,
	0, 1304, 1300, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 1303, 90, 0, 90, 1504, 0, 90, 1293,
	0, 90, 0, 0, 0, 812, 0, 0, 0, 1694,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1693,
	0, 0, 0, 0, 0, 1694, 90, 0, 0, 0,
	1710, 1711, 1712, 1713, 0, 1693, 0, 0, 0, 663,
	0, 0, 1554, 0, 0, 90, 0, 0, 1288, 0,
	0, 0, 0, 0, 812, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1689, 1690, 1692, 0, 0, 0,
	1691, 0, 0, 0, 0, 0, 0, 1745, 0, 0,
	1689, 1690, 1692, 0, 0, 0, 1691, 0, 0, 0,
	0, 0, 0, 0, 23, 24, 48, 26, 27, 0,
	0, 0, 233, 0, 271, 0, 0, 1936, 0, 0,
	0, 271, 271, 0, 42, 0, 930, 271, 28, 0,
	0, 930, 0, 1289, 1285, 1282, 243, 1290, 1287, 1286,
	0, 0, 0, 77, 0, 1798, 0, 37, 0, 0,
	1803, 50, 0, 0, 1291, 0, 0, 1370, 0, 0,
	1620, 1284, 271, 271, 271, 271, 0, 90, 0, 930,
	90, 90, 90, 90, 90, 0, 0, 1824, 0, 0,
	0, 0, 962, 0, 0, 90, 0, 0, 0, 692,
	0, 228, 0, 49, 90, 90, 0, 230, 0, 0,
	0, 0, 0, 1657, 236, 232, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 30, 31, 33, 32, 35,
	1114, 0, 0, 1869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 616, 0, 0, 234, 0, 0, 0,
	238, 36, 43, 44, 0, 0, 45, 46, 34, 0,
	1705, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1370, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 90, 0, 0, 0, 0, 0,
	90, 0, 90, 0, 0, 38, 39, 90, 40, 41,
	90, 0, 90, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	812, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 1950, 239, 240, 241, 242, 246, 0,
	0, 0, 0, 245, 244, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 1978, 1979, 0, 0, 0,
	271, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1876, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 1240, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	1970, 0, 271, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 812, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 930, 0,
	0, 0, 0, 0, 930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 159, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 120, 0, 0, 0, 134,
	0, 137, 0, 0, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 276, 0, 1226, 1227, 1228, 0, 0,
	0, 0, 109, 1231, 1229, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1240, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 1240, 90,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 1233, 1238, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 1240, 0,
	90, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 1235, 0, 1237, 1236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 474, 463, 0, 424,
	476, 394, 412, 484, 414, 415, 450, 374, 433, 159,
	409, 392, 96, 397, 367, 404, 368, 395, 426, 120,
	393, 465, 436, 134, 482, 137, 441, 0, 181, 147,
	0, 0, 428, 467, 431, 458, 423, 451, 382, 440,
	477, 410, 446, 478, 0, 0, 0, 361, 0, 1537,
	1538, 0, 0, 0, 0, 0, 109, 0, 445, 472,
	406, 487, 449, 366, 443, 0, 372, 375, 483, 470,
	401, 402, 0, 0, 0, 0, 0, 0, 0, 427,
	432, 455, 420, 0, 1929, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 398, 0, 439, 0, 0,
	0, 379, 373, 0, 425, 0, 0, 0, 381, 0,
	399, 456, 90, 363, 461, 468, 422, 143, 208, 471,
	419, 418, 166, 0, 112, 0, 187, 124, 411, 135,
	453, 485, 475, 429, 466, 396, 405, 114, 403, 173,
	160, 199, 438, 161, 171, 138, 191, 167, 198, 473,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	371, 364, 400, 459, 462, 386, 448, 376, 407, 454,
	408, 430, 391, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 369, 0, 182, 201,
	218, 219, 370, 390, 469, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	447, 174, 111, 200, 180, 0, 385, 389, 383, 384,
	434, 435, 479, 480, 481, 457, 380, 0, 387, 388,
	0, 464, 129, 437, 95, 103, 136, 486, 215, 0,
	168, 122, 202, 0, 0, 413, 365, 417, 0, 0,
	0, 0, 0, 0, 0, 377, 378, 175, 421, 416,
	442, 444, 452, 460, 474, 463, 108, 424, 476, 394,
	412, 484, 414, 415, 450, 374, 433, 159, 409, 392,
	96, 397, 367, 404, 368, 395, 426, 120, 393, 465,
	436, 134, 482, 137, 441, 0, 181, 147, 0, 0,
	428, 467, 431, 458, 423, 451, 382, 440, 477, 410,
	446, 478, 0, 0, 0, 276, 0, 93, 0, 0,
	0, 0, 0, 0, 109, 0, 445, 472, 406, 487,
	449, 366, 443, 0, 372, 375, 483, 470, 401, 402,
	0, 0, 0, 0, 0, 0, 0, 427, 432, 455,
	420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 855, 0, 398, 0, 439, 0, 0, 0, 379,
	373, 0, 425, 0, 0, 0, 381, 0, 399, 456,
	0, 363, 461, 468, 422, 143, 208, 471, 419, 418,
	166, 0, 112, 0, 187, 124, 411, 135, 453, 485,
	475, 429, 466, 396, 405, 114, 403, 173, 160, 199,
	438, 161, 171, 138, 191, 167, 198, 473, 209, 210,
	189, 207, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 220, 221, 222, 223, 224, 225, 226, 371, 364,
	400, 459, 462, 386, 448, 376, 407, 454, 408, 430,
	391, 0, 0, 0, 0, 0, 97, 188, 197, 110,
	177, 100, 195, 184, 186, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 185, 148,
	192, 193, 115, 217, 117, 116, 183, 105, 205, 206,
	102, 106, 204, 153, 158, 156, 203, 190, 196, 146,
	142, 0, 101, 194, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 0, 0, 155,
	127, 0, 0, 0, 369, 0, 182, 201, 218, 219,
	370, 390, 469, 211, 212, 213, 214, 0, 0, 0,
	152, 107, 128, 178, 132, 139, 169, 216, 447, 174,
	111, 200, 180, 0, 385, 389, 383, 384, 434, 435,
	479, 480, 481, 457, 380, 0, 387, 388, 0, 464,
	129, 437, 95, 103, 136, 486, 215, 0, 168, 122,
	202, 0, 0, 413, 365, 417, 0, 0, 0, 0,
	0, 0, 0, 377, 378, 175, 421, 416, 442, 444,
	452, 460, 474, 463, 108, 424, 476, 394, 412, 484,
	414, 415, 450, 374, 433, 159, 409, 392, 96, 397,
	367, 404, 368, 395, 426, 120, 393, 465, 436, 134,
	482, 137, 441, 0, 181, 147, 0, 0, 428, 467,
	431, 458, 423, 451, 382, 440, 477, 410, 446, 478,
	0, 0, 0, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 445, 472, 406, 487, 449, 366,
	443, 0, 372, 375, 483, 470, 401, 402, 1394, 0,
	0, 0, 0, 0, 0, 427, 432, 455, 420, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 398, 0, 439, 0, 0, 0, 379, 373, 0,
	425, 0, 0, 0, 381, 0, 399, 456, 0, 363,
	461, 468, 422, 143, 208, 471, 419, 418, 166, 0,
	112, 0, 187, 124, 411, 135, 453, 485, 475, 429,
	466, 396, 405, 114, 403, 173, 160, 199, 438, 161,
	171, 138, 191, 167, 198, 473, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 371, 364, 400, 459,
	462, 386, 448, 376, 407, 454, 408, 430, 391, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 369, 0, 182, 201, 218, 219, 370, 390,
	469, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 447, 174, 111, 200,
	180, 0, 385, 389, 383, 384, 434, 435, 479, 480,
	481, 457, 380, 0, 387, 388, 0, 464, 129, 437,
	95, 103, 136, 486, 215, 0, 168, 122, 202, 0,
	0, 413, 365, 417, 0, 0, 0, 0, 0, 0,
	0, 377, 378, 175, 421, 416, 442, 444, 452, 460,
	474, 463, 108, 424, 476, 394, 412, 484, 414, 415,
	450, 374, 433, 159, 409, 392, 96, 397, 367, 404,
	368, 395, 426, 120, 393, 465, 436, 134, 482, 137,
	441, 0, 181, 147, 0, 0, 428, 467, 431, 458,
	423, 451, 382, 440, 477, 410, 446, 478, 0, 0,
	0, 276, 0, 93, 0, 0, 0, 0, 0, 0,
	109, 0, 445, 472, 406, 487, 449, 366, 443, 0,
	372, 375, 483, 470, 401, 402, 0, 0, 0, 0,
	0, 0, 0, 427, 432, 455, 420, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 398,
	0, 439, 0, 0, 0, 379, 373, 0, 425, 0,
	0, 0, 381, 0, 399, 456, 0, 363, 461, 468,
	422, 143, 208, 471, 419, 418, 166, 0, 112, 0,
	187, 124, 411, 135, 453, 485, 475, 429, 466, 396,
	405, 114, 403, 173, 160, 199, 438, 161, 171, 138,
	191, 167, 198, 473, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 371, 364, 400, 459, 462, 386,
	448, 376, 407, 454, 408, 430, 391, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	369, 0, 182, 201, 218, 219, 370, 390, 469, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 447, 174, 111, 200, 180, 0,
	385, 389, 383, 384, 434, 435, 479, 480, 481, 457,
	380, 0, 387, 388, 0, 464, 129, 437, 95, 103,
	136, 486, 215, 0, 168, 122, 202, 0, 0, 413,
	365, 417, 0, 0, 0, 0, 0, 0, 0, 377,
	378, 175, 421, 416, 442, 444, 452, 460, 474, 463,
	108, 424, 476, 394, 412, 484, 414, 415, 450, 374,
	433, 159, 409, 392, 96, 397, 367, 404, 368, 395,
	426, 120, 393, 465, 436, 134, 482, 137, 441, 0,
	181, 147, 0, 0, 428, 467, 431, 458, 423, 451,
	382, 440, 477, 410, 446, 478, 0, 0, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	445, 472, 406, 487, 449, 366, 443, 0, 372, 375,
	483, 470, 401, 402, 0, 0, 0, 0, 0, 0,
	0, 427, 432, 455, 420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 398, 0, 439,
	0, 0, 0, 379, 373, 0, 425, 0, 0, 0,
	381, 0, 399, 456, 0, 363, 461, 468, 422, 143,
	208, 471, 419, 418, 166, 0, 112, 0, 187, 124,
	411, 135, 453, 485, 475, 429, 466, 396, 405, 114,
	403, 173, 160, 199, 438, 161, 171, 138, 191, 167,
	198, 473, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 371, 364, 400, 459, 462, 386, 448, 376,
	407, 454, 408, 430, 391, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 369, 0,
	182, 201, 218, 219, 370, 390, 469, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 447, 174, 111, 200, 180, 0, 385, 389,
	383, 384, 434, 435, 479, 480, 481, 457, 380, 0,
	387, 388, 0, 464, 129, 437, 95, 103, 136, 486,
	215, 0, 168, 122, 202, 0, 0, 413, 365, 417,
	0, 0, 0, 0, 0, 0, 0, 377, 378, 175,
	421, 416, 442, 444, 452, 460, 474, 463, 108, 424,
	476, 394, 412, 484, 414, 415, 450, 374, 433, 159,
	409, 392, 96, 397, 367, 404, 368, 395, 426, 120,
	393, 465, 436, 134, 482, 137, 441, 0, 181, 147,
	0, 0, 428, 467, 431, 458, 423, 451, 382, 440,
	477, 410, 446, 478, 50, 0, 0, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 445, 472,
	406, 487, 449, 366, 443, 0, 372, 375, 483, 470,
	401, 402, 0, 0, 0, 0, 0, 0, 0, 427,
	432, 455, 420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 398, 0, 439, 0, 0,
	0, 379, 373, 0, 425, 0, 0, 0, 381, 0,
	399, 456, 0, 363, 461, 468, 422, 143, 208, 471,
	419, 418, 166, 0, 112, 0, 187, 124, 411, 135,
	453, 485, 475, 429, 466, 396, 405, 114, 403, 173,
	160, 199, 438, 161, 171, 138, 191, 167, 198, 473,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	371, 364, 400, 459, 462, 386, 448, 376, 407, 454,
	408, 430, 391, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 369, 0, 182, 201,
	218, 219, 370, 390, 469, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	447, 174, 111, 200, 180, 0, 385, 389, 383, 384,
	434, 435, 479, 480, 481, 457, 380, 0, 387, 388,
	0, 464, 129, 437, 95, 103, 136, 486, 215, 0,
	168, 122, 202, 0, 0, 413, 365, 417, 0, 0,
	0, 0, 0, 0, 0, 377, 378, 175, 421, 416,
	442, 444, 452, 460, 474, 463, 108, 424, 476, 394,
	412, 484, 414, 415, 450, 374, 433, 159, 409, 392,
	96, 397, 367, 404, 368, 395, 426, 120, 393, 465,
	436, 134, 482, 137, 441, 0, 181, 147, 0, 0,
	428, 467, 431, 458, 423, 451, 382, 440, 477, 410,
	446, 478, 0, 0, 0, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 445, 472, 406, 487,
	449, 366, 443, 0, 372, 375, 483, 470, 401, 402,
	0, 0, 0, 0, 0, 0, 0, 427, 432, 455,
	420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 398, 0, 439, 0, 0, 0, 379,
	373, 0, 425, 0, 0, 0, 381, 0, 399, 456,
	0, 363, 461, 468, 422, 143, 208, 471, 419, 418,
	166, 0, 112, 0, 187, 124, 411, 135, 453, 485,
	475, 429, 466, 396, 405, 114, 403, 173, 160, 199,
	438, 161, 171, 138, 191, 167, 198, 473, 209, 210,
	189, 207, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 220, 221, 222, 223, 224, 225, 226, 371, 364,
	400, 459, 462, 386, 448, 376, 407, 454, 408, 430,
	391, 0, 0, 0, 0, 0, 97, 188, 197, 110,
	177, 100, 195, 184, 186, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 185, 148,
	192, 193, 115, 217, 117, 116, 183, 105, 205, 206,
	102, 359, 204, 153, 158, 156, 203, 190, 196, 146,
	142, 0, 101, 194, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 0, 0, 155,
	127, 0, 0, 0, 369, 0, 182, 201, 218, 219,
	370, 390, 469, 211, 212, 213, 214, 0, 0, 0,
	360, 358, 128, 178, 132, 139, 169, 216, 447, 174,
	111, 200, 180, 354, 385, 389, 383, 384, 434, 435,
	479, 480, 481, 457, 380, 0, 387, 388, 0, 464,
	129, 437, 95, 103, 136, 486, 215, 0, 168, 122,
	202, 0, 0, 413, 365, 417, 0, 0, 0, 0,
	0, 0, 0, 377, 378, 175, 421, 416, 442, 444,
	452, 460, 474, 463, 108, 424, 476, 394, 412, 484,
	414, 415, 450, 374, 433, 159, 409, 392, 96, 397,
	367, 404, 368, 395, 426, 120, 393, 465, 436, 134,
	482, 137, 441, 0, 181, 147, 0, 0, 428, 467,
	431, 458, 423, 451, 382, 440, 477, 410, 446, 478,
	0, 0, 0, 91, 0, 93, 0, 0, 0, 0,
	0, 0, 109, 0, 445, 472, 406, 487, 449, 366,
	443, 0, 372, 375, 483, 470, 401, 402, 0, 0,
	0, 0, 0, 0, 0, 427, 432, 455, 420, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 398, 0, 439, 0, 0, 0, 379, 373, 0,
	425, 0, 0, 0, 381, 0, 399, 456, 0, 363,
	461, 468, 422, 143, 208, 471, 419, 418, 166, 0,
	112, 0, 187, 124, 411, 135, 453, 485, 475, 429,
	466, 396, 405, 114, 403, 173, 160, 199, 438, 161,
	171, 138, 191, 167, 198, 473, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 371, 364, 400, 459,
	462, 386, 448, 376, 407, 454, 408, 430, 391, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 369, 0, 182, 201, 218, 219, 370, 390,
	469, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 447, 174, 111, 200,
	180, 0, 385, 389, 383, 384, 434, 435, 479, 480,
	481, 457, 380, 0, 387, 388, 0, 464, 129, 437,
	95, 103, 136, 486, 215, 0, 168, 122, 202, 0,
	0, 413, 365, 417, 0, 0, 0, 0, 0, 0,
	0, 377, 378, 175, 421, 416, 442, 444, 452, 460,
	474, 463, 108, 424, 476, 394, 412, 484, 414, 415,
	450, 374, 433, 159, 409, 392, 96, 397, 367, 404,
	368, 395, 426, 120, 393, 465, 436, 134, 482, 137,
	441, 0, 181, 147, 0, 0, 428, 467, 431, 458,
	423, 451, 382, 440, 477, 410, 446, 478, 0, 0,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 445, 472, 406, 487, 449, 366, 443, 0,
	372, 375, 483, 470, 401, 402, 0, 0, 0, 0,
	0, 0, 0, 427, 432, 455, 420, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 398,
	0, 439, 0, 0, 0, 379, 373, 0, 425, 0,
	0, 0, 381, 0, 399, 456, 0, 363, 461, 468,
	422, 143, 208, 471, 419, 418, 166, 0, 112, 0,
	187, 124, 411, 135, 453, 485, 475, 429, 466, 396,
	405, 114, 403, 173, 160, 199, 438, 161, 171, 138,
	191, 167, 198, 473, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 371, 364, 400, 459, 462, 386,
	448, 376, 407, 454, 408, 430, 391, 0, 0, 0,
	0, 0, 97, 188, 702, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 359, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	369, 0, 182, 201, 218, 219, 370, 390, 469, 211,
	212, 213, 214, 0, 0, 0, 360, 358, 128, 178,
	132, 139, 169, 216, 447, 174, 111, 200, 180, 354,
	385, 389, 383, 384, 434, 435, 479, 480, 481, 457,
	380, 0, 387, 388, 0, 464, 129, 437, 95, 103,
	136, 486, 215, 0, 168, 122, 202, 0, 0, 413,
	365, 417, 0, 0, 0, 0, 0, 0, 0, 377,
	378, 175, 421, 416, 442, 444, 452, 460, 474, 463,
	108, 424, 476, 394, 412, 484, 414, 415, 450, 374,
	433, 159, 409, 392, 96, 397, 367, 404, 368, 395,
	426, 120, 393, 465, 436, 134, 482, 137, 441, 0,
	181, 147, 0, 0, 428, 467, 431, 458, 423, 451,
	382, 440, 477, 410, 446, 478, 0, 0, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	445, 472, 406, 487, 449, 366, 443, 0, 372, 375,
	483, 470, 401, 402, 0, 0, 0, 0, 0, 0,
	0, 427, 432, 455, 420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 398, 0, 439,
	0, 0, 0, 379, 373, 0, 425, 0, 0, 0,
	381, 0, 399, 456, 0, 363, 461, 468, 422, 143,
	208, 471, 419, 418, 166, 0, 112, 0, 187, 124,
	411, 135, 453, 485, 475, 429, 466, 396, 405, 114,
	403, 173, 160, 199, 438, 161, 171, 138, 191, 167,
	198, 473, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 371, 364, 400, 459, 462, 386, 448, 376,
	407, 454, 408, 430, 391, 0, 0, 0, 0, 0,
	97, 188, 349, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 359, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 369, 0,
	182, 201, 218, 219, 370, 390, 469, 211, 212, 213,
	214, 0, 0, 0, 360, 358, 352, 351, 132, 139,
	169, 216, 447, 174, 111, 200, 180, 354, 385, 389,
	383, 384, 434, 435, 479, 480, 481, 457, 380, 0,
	387, 388, 0, 464, 129, 437, 95, 103, 136, 486,
	215, 0, 168, 122, 202, 0, 0, 413, 365, 417,
	0, 0, 0, 0, 0, 0, 0, 377, 378, 175,
	421, 416, 442, 444, 452, 460, 474, 463, 108, 424,
	476, 394, 412, 484, 414, 415, 450, 374, 433, 159,
	409, 392, 96, 397, 367, 404, 368, 395, 426, 120,
	393, 465, 436, 134, 482, 137, 441, 0, 181, 147,
	0, 0, 428, 467, 431, 458, 423, 451, 382, 440,
	477, 410, 446, 478, 0, 0, 0, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 445, 472,
	406, 487, 449, 366, 443, 0, 372, 375, 483, 470,
	401, 402, 0, 0, 0, 0, 0, 0, 0, 427,
	432, 455, 420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 398, 0, 439, 0, 0,
	0, 379, 373, 0, 425, 0, 0, 0, 381, 0,
	399, 456, 0, 363, 461, 468, 422, 143, 208, 471,
	419, 418, 166, 0, 112, 0, 187, 124, 411, 135,
	453, 485, 475, 429, 466, 396, 405, 114, 403, 173,
	160, 199, 438, 161, 171, 138, 191, 167, 198, 473,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	371, 364, 400, 459, 462, 386, 448, 376, 407, 454,
	408, 430, 391, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 369, 0, 182, 201,
	218, 219, 370, 390, 469, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	447, 174, 111, 200, 180, 0, 385, 389, 383, 384,
	434, 435, 479, 480, 481, 457, 380, 0, 387, 388,
	0, 464, 129, 437, 95, 103, 136, 486, 215, 0,
	168, 122, 202, 0, 0, 413, 365, 417, 0, 0,
	0, 0, 0, 0, 0, 377, 378, 175, 421, 416,
	442, 444, 452, 460, 159, 0, 108, 96, 0, 0,
	279, 0, 0, 0, 120, 275, 0, 0, 134, 320,
	137, 0, 0, 181, 147, 0, 0, 0, 0, 311,
	312, 0, 0, 0, 0, 0, 0, 980, 0, 50,
	0, 0, 276, 299, 278, 301, 302, 303, 304, 0,
	0, 109, 300, 305, 306, 307, 981, 0, 0, 273,
	291, 0, 319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 0, 0,
	0, 0, 332, 0, 290, 0, 0, 286, 287, 292,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 330, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 334, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	308, 321, 331, 327, 328, 325, 326, 324, 323, 322,
	333, 313, 314, 315, 316, 318, 0, 129, 317, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 0, 159,
	0, 0, 96, 912, 0, 279, 0, 0, 0, 120,
	275, 0, 175, 134, 320, 137, 0, 0, 181, 147,
	329, 108, 0, 0, 311, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 276, 299, 278,
	301, 302, 303, 304, 0, 0, 109, 300, 305, 306,
	307, 0, 0, 0, 273, 291, 0, 319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 289, 269, 0, 0, 0, 332, 0, 290,
	0, 0, 286, 287, 292, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 330, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 334,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 308, 321, 331, 327, 328,
	325, 326, 324, 323, 322, 333, 313, 314, 315, 316,
	318, 0, 129, 317, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 0, 159, 0, 0, 96, 0, 0,
	279, 0, 0, 0, 120, 275, 0, 175, 134, 320,
	137, 0, 0, 181, 147, 329, 108, 0, 0, 311,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 541, 276, 299, 278, 301, 302, 303, 304, 0,
	0, 109, 300, 305, 306, 307, 0, 0, 0, 273,
	291, 0, 319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 0, 0,
	0, 0, 332, 0, 290, 0, 0, 286, 287, 292,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 330, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 334, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	308, 321, 331, 327, 328, 325, 326, 324, 323, 322,
	333, 313, 314, 315, 316, 318, 0, 129, 317, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 0, 159,
	0, 0, 96, 0, 0, 279, 0, 0, 0, 120,
	275, 0, 175, 134, 320, 137, 0, 0, 181, 147,
	329, 108, 0, 0, 311, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 276, 299, 278,
	301, 302, 303, 304, 0, 0, 109, 300, 305, 306,
	307, 0, 0, 0, 273, 291, 0, 319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 289, 269, 0, 0, 0, 332, 0, 290,
	0, 0, 286, 287, 292, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 330, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 334,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 308, 321, 331, 327, 328,
	325, 326, 324, 323, 322, 333, 313, 314, 315, 316,
	318, 0, 129, 317, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 0, 0, 0, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 159, 0,
	0, 96, 0, 0, 279, 329, 108, 0, 120, 275,
	0, 0, 134, 320, 137, 0, 0, 181, 147, 0,
	0, 0, 0, 311, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 276, 299, 278, 301,
	302, 303, 304, 0, 0, 109, 300, 305, 306, 307,
	0, 0, 0, 273, 291, 0, 319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 332, 0, 290, 0,
	0, 286, 287, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	330, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 334, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 308, 321, 331, 327, 328, 325,
	326, 324, 323, 322, 333, 313, 314, 315, 316, 318,
	0, 129, 317, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 0, 159, 0, 0, 96, 0, 0, 279,
	0, 0, 0, 120, 275, 0, 175, 134, 320, 137,
	0, 0, 181, 147, 329, 108, 0, 0, 311, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 276, 299, 278, 301, 302, 303, 304, 0, 0,
	109, 300, 305, 306, 307, 0, 0, 0, 273, 291,
	0, 319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 289, 0, 0, 0,
	0, 332, 0, 290, 0, 0, 286, 287, 292, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 330, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 334, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 308,
	321, 331, 327, 328, 325, 326, 324, 323, 322, 333,
	313, 314, 315, 316, 318, 0, 129, 317, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 0, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 175, 134, 320, 137, 0, 0, 181, 147, 329,
	108, 0, 0, 311, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 276, 299, 278, 301,
	302, 303, 304, 0, 0, 109, 300, 305, 306, 307,
	0, 0, 0, 0, 291, 0, 319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 332, 0, 290, 0,
	0, 286, 287, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	330, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 1975, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 334, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 308, 321, 331, 327, 328, 325,
	326, 324, 323, 322, 333, 313, 314, 315, 316, 318,
	0, 129, 317, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 0, 159, 0, 0, 96, 0, 0, 279,
	0, 0, 0, 120, 0, 0, 175, 134, 320, 137,
	0, 0, 181, 147, 329, 108, 0, 0, 311, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 276, 299, 278, 301, 302, 303, 304, 0, 0,
	109, 300, 305, 306, 307, 0, 0, 0, 0, 291,
	0, 319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 289, 0, 0, 0,
	0, 332, 0, 290, 0, 0, 286, 287, 292, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 330, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 334, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 308,
	321, 331, 327, 328, 325, 326, 324, 323, 322, 333,
	313, 314, 315, 316, 318, 0, 129, 317, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 0, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 175, 134, 320, 137, 0, 0, 181, 147, 329,
	108, 0, 0, 311, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 276, 299, 278, 301,
	302, 303, 304, 0, 0, 109, 300, 305, 306, 307,
	0, 0, 0, 0, 291, 0, 319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 332, 0, 290, 0,
	0, 286, 287, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	330, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 334, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 308, 321, 331, 327, 328, 325,
	326, 324, 323, 322, 333, 313, 314, 315, 316, 318,
	0, 129, 317, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 0, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 175, 134, 0, 137,
	0, 0, 181, 147, 329, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1225, 0,
	0, 276, 0, 1226, 1227, 1228, 0, 0, 0, 0,
	109, 1231, 1229, 306, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 1233, 1238, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	1235, 0, 1237, 1236, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 0, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 276, 0, 1226, 1227,
	1228, 0, 0, 0, 0, 109, 1231, 1229, 306, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	1233, 1238, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 1235, 0, 1237, 1236, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 0, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 749, 175, 134, 0, 137,
	0, 0, 181, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1701,
	0, 361, 0, 1699, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1698, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1697, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 750, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 0, 776, 777,
	164, 778, 779, 780, 782, 781, 751, 752, 753, 757,
	755, 754, 756, 728, 730, 206, 726, 729, 735, 731,
	732, 733, 747, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 748, 758, 759, 760, 761, 762,
	763, 764, 765, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 727,
	136, 0, 215, 0, 168, 122, 202, 0, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 299, 906, 301,
	302, 303, 304, 0, 0, 109, 300, 305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 0, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 749, 175, 134, 0, 137,
	0, 0, 181, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 750, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 1856, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 0, 776, 777,
	164, 778, 779, 780, 782, 781, 751, 752, 753, 757,
	755, 754, 756, 728, 730, 206, 726, 729, 735, 731,
	732, 733, 747, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 748, 758, 759, 760, 761, 762,
	763, 764, 765, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 727,
	136, 0, 215, 0, 168, 122, 202, 0, 159, 0,
	0, 96, 0, 563, 0, 0, 0, 0, 120, 0,
	0, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 565, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 561, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 0, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 749, 175, 134, 0, 137,
	0, 0, 181, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 750, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 0, 776, 777,
	164, 778, 779, 780, 782, 781, 751, 752, 753, 757,
	755, 754, 756, 728, 730, 206, 726, 729, 735, 731,
	732, 733, 747, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 748, 758, 759, 760, 761, 762,
	763, 764, 765, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 727,
	136, 0, 215, 0, 168, 122, 202, 0, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1701, 0, 361, 0, 1699, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1698, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1697, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 0, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 175, 134, 0, 137,
	0, 0, 181, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 361, 0, 491, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1001, 143, 208, 0, 0, 0, 996, 0, 995, 0,
	997, 998, 0, 135, 0, 0, 999, 1002, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 0, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 1566, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 1565, 204, 153, 158, 156, 203, 1567, 196,
	146, 142, 0, 101, 194, 144, 141, 1568, 904, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 900, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 23, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 0, 0, 159, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 120, 0, 175, 0, 134, 0,
	137, 0, 0, 181, 147, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 91, 0, 93, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 0, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 0, 159,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 120,
	0, 0, 175, 134, 0, 137, 0, 0, 181, 147,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 0, 93,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 0, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 0, 0, 159, 0, 0, 96, 0,
	0, 0, 0, 0, 1928, 120, 0, 175, 0, 134,
	0, 137, 0, 0, 181, 147, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 93, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 1399,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	159, 0, 0, 96, 0, 691, 0, 0, 0, 0,
	120, 0, 0, 175, 134, 0, 137, 0, 0, 181,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	693, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 208,
	0, 0, 0, 166, 0, 112, 0, 187, 124, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 114, 0,
	173, 160, 199, 0, 161, 171, 138, 191, 167, 198,
	0, 209, 210, 189, 207, 176, 104, 154, 94, 165,
	172, 0, 113, 0, 220, 221, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	188, 197, 110, 177, 100, 195, 184, 186, 145, 130,
	131, 179, 98, 99, 0, 170, 119, 164, 123, 118,
	157, 185, 148, 192, 193, 115, 217, 117, 116, 183,
	105, 205, 206, 102, 106, 204, 153, 158, 156, 203,
	190, 196, 146, 142, 0, 101, 194, 144, 141, 133,
	0, 121, 125, 162, 140, 163, 126, 150, 149, 151,
	0, 0, 155, 127, 0, 0, 0, 0, 0, 182,
	201, 218, 219, 0, 0, 0, 211, 212, 213, 214,
	0, 0, 0, 152, 107, 128, 178, 132, 139, 169,
	216, 0, 174, 111, 200, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 95, 103, 136, 0, 215,
	0, 168, 122, 202, 0, 159, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 120, 0, 0, 175, 134,
	0, 137, 0, 0, 181, 147, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 91, 0, 93, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 23,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 134, 0, 137, 0, 0,
	181, 147, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 175,
	134, 0, 137, 0, 0, 181, 147, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1055,
	0, 0, 0, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1056, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 175, 134, 0, 137, 0, 0,
	181, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 361,
	0, 0, 842, 0, 0, 843, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 175,
	134, 0, 137, 0, 0, 181, 147, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 93, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 802, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 712, 0, 175, 134, 0, 137, 0, 0,
	181, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 361,
	0, 711, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 159, 0, 0, 96,
	0, 691, 0, 0, 0, 0, 120, 0, 0, 175,
	134, 0, 137, 0, 0, 181, 147, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 693, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	689, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	669, 120, 0, 0, 175, 134, 0, 137, 0, 0,
	181, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 93, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 95, 103, 136, 344,
	215, 0, 168, 122, 202, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 175,
	134, 0, 137, 0, 0, 181, 147, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 93, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 175, 134, 0, 137, 0, 0,
	181, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 93, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 175,
	134, 0, 137, 0, 0, 181, 147, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 93, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 175, 134, 0, 137, 0, 0,
	181, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 1399, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 175,
	134, 0, 137, 0, 0, 181, 147, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	1520, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 175, 134, 0, 137, 0, 0,
	181, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 93, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 175,
	134, 0, 137, 0, 0, 181, 147, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 693, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 175, 134, 0, 137, 0, 0,
	181, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 175,
	134, 0, 137, 0, 0, 181, 147, 587, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 361, 0, 565, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 175, 134, 0, 137, 0, 0,
	181, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 361,
	0, 491, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 175,
	134, 0, 137, 0, 0, 181, 147, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 108,
}

var yyPact = [...]int16{
	2738, -1000, -206, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1477, 1534, -1000, -1000, -1000, -1000, -1000, -1000, 1292,
	758, 398, 440, 154, 17423, 435, 2720, 17728, -1000, 188,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1207, -1000, -1000,
	-1000, -1000, -1000, 1469, 1475, 1249, 1445, 1362, -1000, 8561,
	376, 14677, 17118, 6983, -1000, 19863, -186, 392, 388, 20168,
	366, 366, 20168, 20168, 17728, 431, 366, -1000, -48, 414,
	17728, -1000, 17728, 374, 1072, 374, 374, 374, 17728, -1000,
	568, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 17728, 1070, 1408,
	292, 5631, 5631, 5631, 5631, 268, 5631, 27, 1318, -1000,
	-1000, -1000, -1000, 5631, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 983, 1406, 9185, 9185, 1477, -1000,
	1207, -1000, -1000, -1000, 1397, -1000, -1000, 772, 1511, -1000,
	11930, 564, -1000, 9185, 79, 1212, -1000, -1000, -200, 1212,
	-1000, -1000, 543, -1000, -1000, -1000, 10100, 10100, 10100, 10100,
	10100, 10100, 10100, -1000, -1000, -1000, -1000, 88, 940, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 550, -1000,
	8880, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 9185,
	1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 2226,
	1212, 1212, 1212, 1212, -1000, 16813, 1154, 1412, -1000, -1000,
	-1000, 1441, 13456, 16508, 17728, 1143, -1000, 1224, 6645, 16,
	-1000, -1000, -1000, 675, 548, 16203, -1000, -1000, -1000, 1400,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1108, -1000,
	12235, 12235, 416, -1000, -1000, 366, 366, 1300, 1068, 737,
	1063, 1317, 427, 1440, 366, 17728, -1000, 15898, 5631, 381,
	17728, 1424, 1315, 17728, 1060, 1028, -1000, 6307, -1000, 5631,
	5631, 5631, 5631, 5631, 5631, 5631, 5631, -1000, -1000, -1000,
	-1000, -1000, -1000, 5631, 5631, -1000, 22, -1000, 17728, -1000,
	-1000, -1000, -1000, 1529, 593, 934, 527, 1226, -1000, 835,
	1469, 983, 1362, 15593, 1341, -1000, -1000, 17728, -1000, 9185,
	9185, 857, -1000, 19558, -1000, -1000, 4279, 606, 10100, 812,
	722, 10100, 10100, 10100, 10100, 10100, 10100, 10100, 10100, 10100,
	10100, 10100, 10100, 10100, 10100, 10100, 946, 2375, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1013, -1000, 624, -1000, 1207, 11320, 11320, 45, 45, 45,
	45, 45, 45, 19253, -1000, -220, 7951, -1000, 7321, 983,
	1058, 634, 8880, 8561, 8561, 9185, 9185, 10100, 18643, 8561,
	1450, 677, 634, 18643, -1000, 983, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 126, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 8561, 8561, 8561, 8561, 303, 17728,
	-1000, 18643, 14677, 14677, 14677, 14677, 14677, -1000, 1354, 1353,
	-1000, 1343, 1339, 1329, 17728, -1000, 1084, 13456, 480, 1212,
	-1000, 18948, -1000, -1000, 303, 1190, 14677, 17728, -1000, -1000,
	5969, 1224, 16, 1218, -1000, 8, -4, 7646, 7321, 576,
	-1000, -1000, -1000, -1000, -1000, 12845, 1972, -134, 74, -1000,
	-1000, -1000, -1000, -1000, 1265, -1000, -1000, -1000, 1265, 301,
	1265, 1265, 1265, -1000, 1265, 1265, 119, 119, 119, 119,
	119, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1290, 1288,
	-1000, 1265, 1265, 1265, -1000, 1265, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1285, 317, 1285, 1267,
	1267, -1000, -1000, 1972, 15288, 17728, 17728, -100, 1006, 5631,
	1422, 5631, 17728, 1498, 17728, -1000, -1000, -1000, 12235, 17728,
	-1000, 2299, 17728, -1000, 17728, -1000, -1000, 17728, 5631, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 701, -1000, -1000, -1000, -1000, 1372,
	9185, 9185, 4955, 9185, -1000, -1000, -1000, 1406, -1000, 1450,
	1464, -1000, 1388, 1378, 8561, -1000, -1000, 606, 681, -1000,
	-1000, 915, -1000, -1000, -1000, -1000, 517, 1212, -1000, 2203,
	-1000, -1000, -1000, -1000, 812, 10100, 10100, 10100, 447, 2203,
	2183, 1209, 2162, 45, 117, 117, 84, 84, 84, 84,
	84, 212, 212, -1000, -1000, -1000, -1000, -68, -1000, 1265,
	1285, 317, 1285, 1267, 1267, -1000, -1000, 983, 125, -87,
	-1000, -1000, -1000, -1000, -1000, -1000, -200, 952, -1000, -1000,
	933, 983, 8561, 1058, 1222, 11930, -1000, -1000, -1000, 9185,
	-1000, 983, 1054, 1054, 776, 942, 625, 2082, 1225, -1000,
	505, 1054, 8561, 763, -1000, 9185, 983, -1000, -1000, 1054,
	983, 1054, 1054, 1168, 1212, -1000, 1208, -1000, 674, 1412,
	1298, 1314, 1089, -1000, -1000, -1000, -1000, 1352, -1000, 1351,
	-1000, -1000, -1000, -1000, -69, 415, 412, 410, 20168, -1000,
	1486, 14677, 1178, -1000, -1000, 1218, 16, -7, -1000, -1000,
	-1000, -1000, 634, 668, -1000, -1000, 1004, 7321, -1000, -1000,
	-1000, -1000, -1000, 1287, 903, 20168, 339, 445, 579, 558,
	1002, -1000, -1000, -1000, 833, -1000, 20168, 1520, -1000, -1000,
	316, -1000, 315, 729, 951, 17728, 151, 1286, 10405, -1000,
	-230, -1000, 70, -1000, -1000, 844, 119, 119, 1265, 119,
	119, 119, -1000, -1000, 576, 1392, 576, 576, 576, 576,
	949, 949, -87, -87, -1000, -1000, -1000, 904, 1285, -1000,
	-1000, -1000, 891, -1000, 1281, 17728, 20168, 1439, 1435, -1000,
	7321, -1000, -1000, -1000, -1000, -1000, 1427, 1184, -1000, -1000,
	-1000, -1000, 413, -1000, 1301, -1000, 2642, 2490, 490, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	302, 444, -1000, 5631, -1000, 734, 17728, 17728, 1367, 634,
	634, 502, -1000, -1000, 17728, -1000, -1000, -1000, -1000, 1193,
	-1000, -1000, -1000, 5293, 8561, -1000, 447, 2203, 135, -1000,
	10100, 10100, 145, -1000, -1000, -1000, 144, 136, 61, -1000,
	-200, -1000, 1054, -1000, 8561, 634, -1000, -1000, -1000, 732,
	946, 732, 10100, 10100, 10100, 10100, 10100, 4955, -61, 1191,
	678, -1000, 9185, 899, -1000, -1000, -1000, -1000, -1000, 1308,
	18643, 1212, -1000, 14983, 20168, 1477, 18643, 9185, 9185, -1000,
	-1000, 9185, 1278, -1000, 9185, -1000, -1000, -1000, -1000, 1275,
	1212, 1212, 1212, 1039, -1000, 1477, 1178, -1000, -1000, -1000,
	-15, -16, -1000, 9185, -1000, 4617, -1000, 18033, -1000, 1507,
	1463, 307, 1, -1000, 961, 959, -1000, 956, -1000, -1000,
	6, -1000, -179, 100, 10, -1000, -1000, 1212, -1000, 1274,
	1426, -1000, 1410, 870, -1000, 3447, -199, -1000, -1000, -200,
	-1000, -1000, -1000, 1212, -1000, 1273, 1272, -1000, 1252, 1212,
	491, -1000, -1000, -1000, 1127, 576, 576, 119, 576, 576,
	576, -1000, 637, -1000, -1000, -1000, -1000, 1052, -1000, 1049,
	-1000, -1000, 1215, -1000, 1045, 17728, 20168, 1270, 1307, 1207,
	1207, 1213, -1000, 666, 1459, 257, 17728, 1498, 1498, 20168,
	-1000, 368, 20168, -1000, 20168, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 20168, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 17728, -1000, -1000, -1000, -1000,
	-1000, 20168, 349, -1000, -1000, 945, 9185, -1000, -1000, -1000,
	7321, -1000, 1486, 14677, -1000, -1000, 983, -1000, 10100, 2203,
	2203, 68, 40, 39, -1000, 933, -1000, -1000, -1000, 983,
	1265, 1265, -1000, 1265, 1267, -1000, -1000, 1265, 165, 1265,
	161, 983, 983, 227, 367, 295, 163, 278, -1000, 1212,
	-55, -1000, 634, 9185, -1000, 1414, 1132, 1195, -1000, -1000,
	8256, 983, 1041, 489, 1039, 1469, -1000, 634, 634, 634,
	18338, 634, -204, 18338, 18338, 18338, 14372, 20168, 1469, -1000,
	-1000, -1000, -1000, 634, 3941, -1000, 1037, -1000, 300, 1265,
	432, 432, -185, 314, 310, 1212, -1000, -1000, -1000, -1000,
	-186, -1000, -1000, 729, -1000, 1252, 9185, 18338, 134, -1000,
	1205, 1125, 10710, -1000, 13150, -1000, 983, -1000, 935, -1000,
	930, 1124, 7321, -1000, -1000, -1000, 576, -1000, -1000, -1000,
	-1000, -1000, 119, 920, 119, 868, -1000, 860, 1211, 1306,
	14067, 17728, -1000, -1000, 7321, 3941, 369, 1527, -1000, -1000,
	1458, -1000, 1158, 1251, 20168, -1000, -1000, 348, -1000, 1250,
	-1000, -1000, -1000, -1000, 1420, 20168, -1000, -1000, 634, 1482,
	1203, -1000, 2203, -1000, -1000, -1000, -1000, -1000, -1000, 294,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10100,
	10100, -1000, 10100, 10100, 10100, 983, 917, 634, 309, -1000,
	1212, -1000, -1000, 1201, 20168, 20168, -1000, -1000, 1027, -1000,
	-1000, 1019, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1017,
	1017, 1017, 480, -1000, -1000, -1000, -1000, -1000, -1000, 770,
	18033, 1419, -1000, -1000, -1000, 859, -1000, -1000, 752, 260,
	800, -1000, 20168, -186, 9185, -1000, 1212, 808, 1011, 9185,
	1245, 850, -1000, 1122, -1000, 125, -87, -1000, -1000, -1000,
	-1000, -1000, -1000, 1212, -1000, 576, -1000, 576, 1116, 1115,
	14067, 20168, 17728, 1110, 1198, -1000, 299, 1241, -1000, -1000,
	20168, -1000, -1000, -1000, -1000, -1000, 240, 2545, -1000, 12540,
	1240, 1238, 18338, 1212, 360, 1480, 1473, -1000, -1000, 227,
	227, 227, 227, 99, -1000, -1000, 1518, -1000, 1212, -1000,
	1207, 484, -1000, 20168, -1000, -1000, -204, -1000, -1000, -1000,
	-69, 1303, 1842, 162, -1000, 906, 662, 900, 655, 643,
	636, 633, 632, 626, 622, -1000, -1000, -1000, 1517, -1000,
	-1000, -1000, 1514, 1237, -1000, 1236, 808, 9185, 262, 1305,
	840, -1000, 1105, 1087, -1000, -1000, -1000, -1000, 1046, 1235,
	1232, -191, 844, 14067, 1104, -1000, 238, 2545, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1477, 20168, 20168,
	20168, 20168, 401, 9795, 9185, 1020, 11015, 12540, 12540, 11015,
	12540, 12540, 18033, 18033, 997, 290, 305, -1000, 9185, 9185,
	-1000, -1000, -1000, -1000, 983, 203, -111, 18643, 1195, 983,
	20168, -1000, -1000, -1000, -1000, 20168, -1000, -106, 1842, 20168,
	-1000, 839, -1000, -1000, 834, 824, 834, 834, 834, 834,
	834, 432, 432, 20168, 18033, 262, 808, -1000, -57, 1504,
	-112, 170, -1000, -1000, -191, 14067, 18033, 1486, 1231, 1012,
	-72, 20168, 9185, 2199, -1000, 1469, 1171, 11625, -1000, -1000,
	-1000, -1000, 20168, 1501, 1500, 1499, 1491, 1221, 79, 673,
	211, -1000, -1000, 11015, -1000, -1000, -1000, -1000, -1000, 995,
	993, 1300, 991, -1000, 20168, 1229, 634, 1165, -1000, 1366,
	-66, -162, 1137, -1000, -1000, 1212, 989, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 729,
	729, 982, 979, -1000, 262, -1000, 432, 432, -1000, -1000,
	-1000, 187, 898, 818, 811, 810, 75, -1000, 1472, 1486,
	998, 977, 770, 18338, -191, -1000, -203, -1000, 634, -1000,
	-1000, 2545, 1406, 20168, 234, -1000, -1000, 1413, -1000, -1000,
	-1000, -1000, -1000, 2545, 2545, 2545, -1000, 341, -100, -1000,
	290, 1377, 18033, -1000, 1358, -1000, 20168, -1000, 1842, -1000,
	-1000, 356, 770, -1000, -1000, -1000, 790, -1000, 785, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13761, 770, 1486, 770,
	1303, 971, 1486, 9185, -218, -1000, -1000, 12235, 1454, 20168,
	2529, -1000, 113, 2332, 219, -1000, 221, -1000, -1000, 285,
	969, -102, 983, -1000, 17728, 1303, -1000, -1000, -1000, 454,
	1303, 770, -1000, -1000, -1000, 770, 634, 638, 1207, -1000,
	-1000, -1000, 635, 703, -1000, 216, -1000, 280, -1000, -127,
	-1000, 1228, -1000, 7321, -1000, -1000, 1303, -1000, -1000, 362,
	210, -1000, -1000, 1212, -170, 20168, -1000, -1000, -1000, 2545,
	9490, -1000, 966, 2314, 227, 983, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1826, 111, 64, 1825, 1824, 1819, 1549, 1545, 1542,
	1540, 1817, 1816, 1815, 1805, 1804, 1803, 1802, 1797, 1796,
	1794, 1793, 1791, 1788, 1786, 1784, 1783, 1781, 495, 1777,
	1776, 1775, 104, 1774, 110, 1772, 1770, 68, 95, 73,
	70, 853, 1769, 55, 131, 106, 1768, 82, 1767, 1764,
	141, 1754, 94, 1750, 1749, 453, 1745, 1744, 31, 24,
	19, 45, 1743, 1736, 103, 71, 1733, 1731, 1729, 42,
	1728, 1727, 86, 16, 30, 40, 33, 1724, 91, 61,
	1723, 84, 1722, 1721, 1715, 1712, 37, 1711, 88, 28,
	14, 12, 1708, 13, 11, 101, 59, 49, 17, 126,
	87, 1707, 66, 93, 80, 1703, 1702, 857, 1700, 1699,
	1698, 1697, 1696, 1693, 738, 116, 1692, 1689, 1686, 102,
	0, 367, 41, 107, 1683, 72, 1682, 2137, 124, 109,
	47, 1681, 53, 250, 69, 1680, 1678, 67, 114, 10,
	108, 92, 1677, 113, 1676, 1675, 1673, 85, 58, 637,
	50, 1671, 1670, 1666, 74, 76, 46, 78, 90, 20,
	1663, 1660, 1656, 54, 1655, 18, 29, 3, 79, 1654,
	1653, 1651, 1646, 34, 1645, 1644, 36, 1643, 43, 1,
	9, 15, 5, 1642, 1641, 1640, 6, 1637, 44, 1636,
	4, 1635, 22, 1633, 1632, 1631, 65, 1630, 1627, 1606,
	25, 1596, 1595, 32, 27, 56, 48, 96, 77, 57,
	1594, 51, 7, 2, 23, 1592, 8, 1591, 1590, 1589,
	26, 21, 1588, 1587, 1584, 1580, 1579, 1569, 52, 1568,
	1567, 1286, 1070, 1559, 1557, 39, 1556, 1554, 1552, 403,
}

var yyR1 = [...]uint8{
	0, 229, 230, 230, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 233,
	233, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 217, 217, 216, 218, 218, 12, 12, 12, 12,
	12, 210, 210, 210, 210, 210, 13, 13, 213, 213,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 135, 135, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	234, 234, 235, 235, 235, 235, 235, 235, 235, 208,
	208, 208, 209, 209, 209, 211, 211, 212, 212, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 215, 215,
	194, 194, 194, 195, 195, 195, 195, 195, 195, 197,
	197, 198, 198, 125, 125, 192, 192, 191, 190, 190,
	189, 189, 188, 199, 199, 20, 170, 171, 171, 171,
	171, 171, 171, 171, 158, 158, 139, 139, 139, 139,
	139, 139, 139, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 205, 205,
	205, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 201, 201, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 148, 148, 148,
	148, 148, 148, 200, 200, 196, 196, 196, 196, 196,
	196, 196, 196, 143, 143, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 142, 142, 142, 142, 142,
	142, 142, 142, 144, 144, 144, 144, 144, 144, 144,
	144, 140, 140, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 146, 146, 146, 146,
	146, 146, 146, 146, 157, 157, 147, 147, 155, 155,
	156, 156, 156, 154, 154, 154, 151, 151, 152, 152,
	153, 153, 153, 149, 149, 149, 150, 150, 150, 160,
	181, 181, 181, 183, 183, 184, 184, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 169, 169,
	207, 207, 180, 180, 180, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 168, 168, 178, 178, 179, 179,
	176, 176, 176, 177, 163, 163, 163, 163, 163, 164,
	165, 165, 165, 165, 161, 162, 203, 203, 203, 204,
	204, 166, 166, 167, 167, 174, 174, 172, 172, 173,
	173, 173, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 236, 236, 237, 237,
	237, 237, 237, 237, 237, 187, 185, 185, 186, 186,
	17, 18, 18, 18, 18, 18, 19, 19, 21, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 112, 112, 109, 109, 110, 110, 111, 111,
	111, 113, 113, 113, 136, 136, 136, 23, 23, 25,
	25, 26, 27, 24, 24, 24, 24, 24, 238, 28,
	29, 29, 30, 30, 30, 34, 34, 34, 32, 32,
	33, 33, 39, 39, 38, 38, 40, 40, 40, 40,
	124, 124, 124, 123, 123, 42, 42, 43, 43, 44,
	44, 45, 45, 45, 220, 220, 219, 219, 221, 221,
	221, 221, 221, 221, 57, 57, 93, 93, 93, 96,
	96, 46, 46, 46, 46, 47, 47, 48, 48, 49,
	49, 131, 131, 130, 130, 130, 129, 129, 51, 51,
	51, 53, 52, 52, 52, 52, 54, 54, 56, 56,
	55, 55, 58, 58, 58, 58, 59, 59, 94, 94,
	41, 41, 41, 41, 41, 41, 41, 108, 108, 61,
	61, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 71, 71, 71, 71, 71, 71, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 37, 37,
	72, 72, 72, 78, 73, 73, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 69, 69, 69, 69, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 239, 239, 70, 70, 70, 70, 35, 35, 35,
	35, 35, 134, 134, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 138, 138,
	138, 138, 138, 138, 138, 138, 82, 82, 36, 36,
	80, 80, 81, 83, 83, 79, 79, 79, 222, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 66,
	66, 66, 84, 84, 85, 85, 86, 86, 87, 87,
	88, 89, 89, 89, 90, 90, 90, 90, 91, 91,
	91, 63, 63, 63, 63, 63, 63, 92, 92, 92,
	92, 97, 97, 74, 74, 76, 76, 75, 77, 98,
	98, 102, 99, 99, 103, 103, 103, 103, 103, 101,
	101, 101, 126, 126, 126, 106, 106, 114, 114, 115,
	115, 107, 107, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 117, 117, 117, 118, 118, 121, 121,
	122, 122, 127, 127, 127, 128, 128, 223, 223, 223,
	224, 224, 224, 225, 225, 226, 227, 227, 228, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 231, 232, 132,
	133, 133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 14, 13, 15, 13, 14,
	7, 7, 5, 5, 5, 11, 11, 9, 5, 8,
	0, 3, 0, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 1, 4,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 0, 3, 0, 1, 0, 2, 1, 0, 2,
	1, 3, 3, 0, 2, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 2, 2, 3, 1, 1, 1,
	1, 1, 0, 2, 2, 3, 2, 4, 4, 2,
	2, 3, 2, 3, 2, 7, 9, 3, 3, 6,
	9, 9, 8, 8, 5, 8, 7, 4, 2, 4,
	6, 2, 1, 1, 2, 1, 1, 1, 3, 3,
	1, 1, 2, 0, 4, 3, 4, 3, 3, 3,
	3, 3, 3, 3, 2, 4, 6, 2, 3, 2,
	3, 1, 3, 0, 2, 0, 3, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	2, 1, 1, 1, 3, 3, 2, 1, 2, 1,
	1, 1, 1, 4, 4, 4, 4, 4, 1, 5,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 3, 3, 0, 1, 0, 1,
	0, 2, 1, 0, 3, 3, 0, 1, 2, 6,
	0, 1, 4, 1, 2, 1, 3, 2, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	1, 1, 0, 2, 5, 2, 3, 3, 2, 3,
	2, 2, 3, 4, 1, 1, 1, 1, 1, 3,
	3, 2, 2, 1, 2, 5, 5, 8, 8, 13,
	1, 1, 2, 2, 10, 7, 0, 1, 1, 0,
	3, 0, 1, 1, 3, 0, 4, 1, 2, 1,
	1, 1, 6, 11, 13, 13, 7, 7, 7, 12,
	7, 7, 7, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 6, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 0, 4, 1, 3, 1, 1,
	1, 1, 1, 1, 4, 8, 1, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 0, 4,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 2, 4, 5, 6, 4, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 3, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 5, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 2,
	0, 2, 2, 0, 1, 4, 1, 3, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -229, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	117, 118, 120, 119, 150, 121, 143, 49, 197, 198,
	200, 201, 26, 144, 145, 148, 149, -231, 8, 304,
	53, -230, 346, -86, 15, -30, 5, -28, -238, -28,
	-28, -28, -28, -28, -170, 53, -125, -199, 126, 159,
	296, 123, 139, 157, 158, 322, 124, 141, 71, -107,
	127, 129, 124, 124, 125, 127, 296, 123, 124, -55,
	-127, 56, -120, 58, 166, 313, 21, 197, 210, 211,
	202, 243, 231, 314, 164, 228, 232, 282, 345, 65,
	200, 291, 133, 170, 146, 223, 226, 225, 217, 214,
	28, 249, 320, 216, 136, 250, 254, 261, 283, 311,
	207, 208, 285, 247, 32, 138, 315, 34, 154, 286,
	252, 246, 241, 126, 245, 206, 240, 38, 220, 256,
	255, 257, 281, 234, 165, 260, 236, 218, 235, 18,
	149, 152, 251, 253, 215, 167, 131, 156, 319, 287,
	213, 153, 168, 148, 290, 336, 163, 201, 284, 209,
	293, 37, 267, 227, 204, 219, 205, 135, 198, 161,
	238, 155, 221, 222, 244, 203, 239, 199, 157, 150,
	292, 268, 321, 237, 233, 229, 230, 162, 127, 159,
	160, 274, 275, 276, 277, 317, 288, 224, 269, 270,
	172, 173, 174, 175, 176, 177, 178, 124, 111, 232,
	117, 272, 125, 32, 156, -136, 124, -109, 160, 274,
	275, 276, 277, 56, 284, 283, 278, -127, 199, -132,
	-132, -132, -132, -132, -2, -90, 17, 16, -5, -3,
	-231, 6, 21, 22, -34, 39, 40, -29, -40, 102,
	-41, -127, -60, 73, -65, 29, 56, -120, 58, 24,
	-64, -61, -79, -222, -77, -78, 111, 112, 100, 101,
	108, 74, 113, -69, -67, -68, -70, -225, -121, 57,
	66, 59, 60, 61, 62, 67, 68, 69, 294, -75,
	-231, 43, 44, 305, 306, 307, 308, 312, 309, 76,
	33, 295, 303, 302, 301, 299, 300, 297, 298, 344,
	130, 296, 106, 304, 258, -107, -43, -44, -45, -46,
	-57, -78, -231, -55, 11, -50, -55, -99, -135, 199,
	-103, 284, 283, -122, 294, -101, -121, -119, 282, 232,
	281, 56, -120, 122, 180, 325, 72, 23, 25, 265,
	271, 179, 75, 111, 16, 76, 186, 334, 335, 110,
	305, 117, 47, 297, 298, 295, 184, 307, 308, 296,
	272, 191, 20, 29, 10, 26, 144, 22, 104, 119,
	181, 79, 80, 147, 24, 145, 69, 187, 189, 19,
	50, 137, 11, 324, 13, 14, 338, 326, 130, 129,
	91, 337, 125, 45, 8, 113, 27, 88, 41, 142,
	190, 43, 89, 17, 299, 300, 31, 312, 151, 106,
	48, 35, 339, 73, 340, 67, 51, 289, 185, 71,
	15, 46, 341, 139, 188, 90, 120, 304, 44, 182,
	342, 123, 183, 6, 310, 30, 143, 42, 124, 273,
	78, 128, 68, 158, 5, 141, 9, 49, 52, 301,
	302, 303, 33, 77, 12, 140, 316, 70, -171, -158,
	-121, 58, -203, 334, 335, 127, 127, -121, -115, 130,
	-115, -121, -121, -55, 124, -115, 304, 124, -55, -55,
	-114, 130, 56, -114, -114, -114, -55, 114, -55, 56,
	30, 296, 56, 156, 124, 157, 127, -133, -231, -122,
	-133, -133, -133, 161, 162, -133, -110, 279, 51, -133,
	-232, 55, -91, 19, 31, -41, -127, -87, -88, -41,
	-86, -2, -28, 35, -32, 22, 64, 11, -124, 72,
	71, 88, -123, 23, -121, 58, 114, -41, -62, 91,
	73, 89, 90, 75, 97, 96, 107, 100, 101, 102,
	103, 104, 105, 106, 98, 99, 110, 344, 81, 82,
	83, 84, 85, 86, 87, 92, 93, 94, 95, -108,
	-231, -196, 344, -78, -231, 115, 116, -65, -65, -65,
	-65, -65, -65, -65, -226, 259, -231, 58, 114, -2,
	-73, -41, -231, -231, -231, -231, -231, -231, -231, -231,
	-231, -82, -41, -231, -239, -231, -239, -239, -239, -239,
	-239, -239, -239, -138, 111, 232, 146, 223, -141, -140,
	238, 237, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 231, 314, -231, -231, -231, -231, -56, 27,
	-55, 30, 54, -51, -53, -52, -54, 41, 45, 47,
	42, 43, 44, 48, -131, 23, -43, -231, -130, 152,
	-129, 23, -127, 58, -55, -50, -233, 54, 11, 52,
	54, -99, 199, -100, -104, 285, 287, 81, 114, -126,
	-121, 58, 29, 30, 55, 54, -159, -139, -143, -140,
	-145, -144, -146, -121, -141, -142, 231, 314, 228, 232,
	229, 234, 235, 236, 111, 233, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 237, 249, 30,
	146, 221, 222, 223, 226, 225, 227, 224, 250, 251,
	252, 253, 254, 255, 256, 257, 202, 203, 204, 205,
	206, 207, 208, 209, 210, 211, 213, 214, 216, 217,
	218, 220, 219, -159, 125, -115, -115, -192, 52, 56,
	73, 56, 51, -208, 51, 19, 179, 180, 23, -115,
	-55, -55, 289, -133, 128, -55, 24, 51, -55, 56,
	56, -128, -127, -119, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -112, 273, 280, -55, 9, 91,
	54, 18, 114, 54, -89, 25, 26, -90, -232, -34,
	-66, -121, 59, 62, -33, 42, -55, -41, -41, -71,
	67, 73, 68, 69, -123, 102, -128, -122, -119, -65,
	-72, -75, -78, 63, 91, 89, 90, 75, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -134, 56, 58, -143, 222, -138, -141,
	213, 214, 216, 217, 218, 220, 219, 56, 232, 222,
	262, 113, 238, 247, 248, -64, 58, -121, -64, -121,
	347, -39, 22, -73, -38, -41, -40, -122, -232, 54,
	-232, -2, -38, -38, -41, -41, -79, -65, -79, -121,
	-127, -38, -32, -80, -81, 77, -79, -232, 230, -38,
	-39, -38, -38, -95, 152, -55, -98, -102, -79, -44,
	-45, -45, -44, -45, 41, 41, 41, 46, 41, 46,
	41, -52, -127, -232, -58, 49, 129, 50, -231, -129,
	-95, 52, -43, -55, -103, -100, 54, 286, 288, 289,
	51, 70, -41, -122, -150, 111, 110, -174, -158, -160,
	-163, -161, -162, -175, -164, 133, 131, 135, 136, 141,
	-168, 125, 142, 67, 73, -205, 133, 51, 265, 271,
	131, 142, 141, 345, 65, 134, 324, 326, 29, -153,
	347, 259, -151, 268, -147, 53, -147, -147, 230, -147,
	-147, -147, -147, -147, -149, 232, -149, -149, -149, -149,
	53, 53, -147, -147, -147, -147, -155, 53, 215, -155,
	-155, -156, 53, -156, -121, 51, 196, -55, -55, -190,
	316, -191, 56, -133, 24, -133, -55, -211, -209, 8,
	9, 10, -55, -139, -55, -116, 122, 119, 120, -187,
	118, 265, 232, 65, 29, 15, 305, 152, 321, 56,
	153, -55, -55, -55, -133, -111, 11, 91, 37, -41,
	-41, -128, -88, -91, -106, 19, 11, 33, 33, -38,
	67, 68, 69, 114, -231, -72, -65, -65, -65, -37,
	147, 72, 316, -232, 230, -154, 316, 317, -227, -228,
	58, -232, -38, -232, 54, -41, -232, -232, -232, 54,
	52, 23, 54, 11, 54, 54, 11, 114, -232, -38,
	-83, -81, 79, -41, -232, -232, -232, -232, -232, -63,
	30, 33, -2, -231, -231, -59, 54, 12, 81, -48,
	-47, 51, 52, -49, 51, -47, 41, 41, -220, 316,
	125, 125, 125, -96, -121, -59, -43, -59, -104, -105,
	290, 287, 293, 81, 56, -172, -122, 53, -204, 51,
	73, -166, -121, 142, -168, -168, 56, -168, 56, 125,
	56, 67, 19, -121, 9, 142, 142, -204, 58, -55,
	-201, 325, 16, 53, -206, 53, 58, 59, 60, 67,
	-148, 66, -61, 260, -69, 295, 298, 297, 261, -121,
	-127, 348, -152, 269, 59, -149, -149, -147, -149, -149,
	-149, -150, 30, -150, -150, -150, -150, -157, 58, -157,
	-154, -154, 59, -155, 59, 51, 52, -55, -121, 23,
	23, -189, -188, -122, -194, 23, 51, 54, -208, 52,
	-132, -125, 133, -237, 159, 132, 137, 136, 56, 131,
	135, 152, -193, 159, 132, 133, 137, 136, 56, 125,
	142, 131, 135, 152, 141, -117, -118, 128, 23, 125,
	142, 152, 122, -133, -113, 89, 12, -127, -127, 38,
	114, -55, -42, 11, 102, -122, -39, -37, 72, -65,
	-65, 221, 221, 221, 348, 54, -196, -232, -40, -137,
	111, 228, 146, 223, 217, 247, 248, 234, 267, 221,
	268, -134, -137, -65, -65, -65, -65, -65, -122, 313,
	-86, 80, -41, 78, -97, 51, -98, -74, -76, -75,
	-231, -2, -92, -121, -96, -86, -102, -41, -41, -41,
	53, -41, 53, -231, -231, -231, -232, 54, -86, -59,
	287, 291, 292, -41, 81, -122, -179, -176, -121, 142,
	10, 9, 19, 137, 131, 345, 56, 56, 56, -203,
	141, 336, -205, 345, -148, 261, -231, 53, 23, 29,
	59, -206, 53, -196, 344, -196, -231, -147, 53, -147,
	53, 53, 114, 55, -150, -150, -149, -150, -150, -150,
	56, 111, 55, 54, 55, 54, 55, 54, -55, -121,
	53, 51, -2, -2, 54, 81, -195, 19, 167, 168,
	-55, -209, -211, -121, -236, 125, 142, -121, -132, -121,
	-132, -121, -55, -132, -121, 133, -163, 58, -41, -59,
	-43, -232, -65, 270, 270, 270, -228, -232, -147, -147,
	-147, -156, -147, 208, -147, 208, -232, -232, -232, 19,
	54, -232, 54, 19, -231, -36, 310, -41, 28, -97,
	54, -232, -232, -232, 54, 114, -232, -90, -93, -121,
	142, -219, -221, 338, 339, 340, 341, 342, 343, -93,
	-93, -93, -130, -121, -90, -173, -122, 58, 59, 55,
	54, -147, -177, 263, -147, -165, 163, 164, 30, 165,
	-165, 336, 142, 142, -231, -203, -204, -41, -93, 53,
	326, 54, 55, -206, -121, 232, 222, 238, 247, -232,
	55, 55, 55, -122, -150, -149, 58, -149, 59, 59,
	53, 52, 51, -178, -179, -69, -121, -55, -188, -173,
	128, 21, 6, 8, 9, 10, 19, 23, -234, 53,
	-121, 141, 53, 27, -121, -84, 13, -149, 56, -65,
	-65, -65, -65, -65, -232, 58, 142, -76, 33, -2,
	-231, -121, -121, 54, 55, 55, 54, -232, -232, -232,
	-58, -181, -183, 316, -182, 52, 138, 65, 172, 173,
	174, 175, 176, 177, 178, -176, -89, -204, 51, 67,
	166, -204, 51, -166, -121, -203, -41, -231, -232, 55,
	-41, 53, 59, 55, -150, -150, 55, 55, -178, -121,
	-55, 55, 53, 53, -167, -121, 181, -212, -214, -7,
	-9, -8, -11, -10, -12, -13, -14, -3, 20, 185,
	186, 191, 187, 140, 130, -235, -121, 100, 81, 58,
	-158, 54, 53, 53, -93, -231, 131, -85, 14, 16,
	-232, -232, -232, -232, -35, 91, 316, 9, -74, -2,
	114, -121, -221, -220, -180, 51, -182, 316, 53, 318,
	56, -169, 81, 58, 81, 81, 81, 81, 81, 81,
	81, 9, 10, 53, 53, -232, -41, -200, 165, 51,
	55, -202, 55, 55, 55, 53, 53, -94, 337, -178,
	-197, 54, 52, 182, -214, -86, -217, -121, -216, -121,
	-121, -121, -210, 35, 188, 189, 190, -60, -65, -41,
	-60, 55, -235, -121, -235, -235, -235, -235, -235, -179,
	-179, 55, -185, -186, 152, 142, -41, -73, -232, 314,
	48, 319, -98, -232, -121, -121, -184, -182, -121, 59,
	-207, 51, 70, 59, -207, -207, -207, -207, -207, -165,
	-165, -167, -179, -200, -232, 311, 10, 9, 322, 323,
	55, 198, 328, 329, 151, 330, 165, 331, 332, -94,
	-178, -179, -59, 53, 55, -198, 316, -121, -41, -215,
	-214, 197, -90, 54, -218, -139, 183, -121, 11, 11,
	11, 11, -214, 197, 78, 197, 55, 55, -192, -232,
	54, -121, 53, 38, 315, 320, -231, 55, 54, -204,
	-204, 55, 55, -200, -165, -165, 316, 59, 16, 59,
	59, 59, 59, 329, 151, 331, 16, -59, 55, 55,
	-181, -93, -94, 345, -214, -91, -216, -121, 184, 27,
	-213, -214, -212, -213, -223, 192, 73, -190, -186, 33,
	-179, 38, -121, -182, 134, -181, 59, 59, 333, -127,
	-181, -59, -181, -180, 55, -59, -41, 346, 19, -121,
	80, -214, 346, 80, -224, 193, 192, 154, 55, 316,
	-232, -55, -180, 114, -180, -181, -181, 80, -2, 80,
	79, 195, 194, 155, 319, 53, -122, -180, 130, 197,
	-231, 320, -167, -213, -65, 151, 55, 80, -232, -232,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 766, 0, 498, 498, 498, 498, 498, 498, 0,
	-2, 821, 0, 0, 0, 0, -2, 488, 489, 0,
	491, 492, 1119, 1119, 1119, 1119, 1119, 0, 33, 34,
	1117, 1, 3, 774, 0, 0, 502, 505, 500, 853,
	821, 0, 0, 0, 84, 157, 386, 0, 0, 0,
	819, 819, 0, 0, 0, 0, 819, 144, 0, 0,
	0, 822, 0, 817, 0, 817, 817, 817, 0, 447,
	580, 842, 843, 844, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 0, 0, 0,
	0, 1120, 1120, 1120, 1120, 0, 1120, 476, 465, 467,
	468, 469, 470, 1120, 485, 486, 475, 487, 490, 493,
	494, 495, 496, 497, 27, 778, 853, 853, 766, 29,
	0, 498, 503, 504, 508, 506, 507, 499, 0, 516,
	520, 0, 590, 853, 595, 597, -2, -2, -2, 0,
	636, 637, 638, 639, 640, 641, 853, 853, 853, 853,
	853, 853, 853, 668, 669, 670, 671, 0, 745, 752,
	753, 754, 755, 756, 757, 758, 599, 600, 0, 798,
	853, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 701, 701, 701, 701, 701, 701, 701, 701, 0,
	0, 0, 0, 0, 854, 0, 0, 527, 529, 530,
	531, 561, 0, 563, 0, 0, 41, 45, 0, 1087,
	802, -2, -2, 0, 0, 0, 840, 841, -2, 996,
	-2, 838, 839, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 0, 158,
	172, 172, 0, 387, 388, 819, 819, 145, 0, 0,
	0, 0, 0, 0, 819, 0, 154, 0, 1120, 0,
	0, 0, 0, 0, 0, 0, 446, 0, 448, 1120,
	1120, 1120, 1120, 1120, 1120, 1120, 1120, 457, 1121, 1122,
	458, 459, 460, 1120, 1120, 462, 0, 477, 0, 471,
	28, 1118, 22, 0, 0, 775, 0, 767, 768, 771,
	774, 27, 505, 0, 510, 509, 501, 0, 517, 853,
	853, 0, 521, 0, 523, 524, 0, 593, 853, 0,
	0, 853, 853, 853, 853, 853, 853, 853, 853, 853,
	853, 853, 853, 853, 853, 853, 0, 0, 617, 618,
	619, 620, 621, 622, 623, 624, 625, 626, 627, 596,
	0, 750, 0, 610, 0, 0, 0, 659, 660, 661,
	662, 663, 664, 665, 672, 0, -2, 751, 0, 27,
	0, 634, 853, 853, 853, 853, 853, 853, 0, 853,
	508, 0, 737, 0, 692, 0, 693, 694, 695, 696,
	697, 698, 699, 700, 728, 0, 730, 731, 732, 733,
	734, 735, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 271, 272, 853, -2, 853, 853, 43, 0,
	579, 0, 0, 0, 0, 0, 0, 568, 0, 0,
	571, 0, 0, 0, 0, 562, 0, 0, 582, 1051,
	564, 0, 566, 567, -2, 0, 0, 0, 39, 40,
	0, 46, 1087, 48, 73, 0, 0, 853, 0, 326,
	812, 813, 814, 810, 395, 0, 164, 320, 316, 167,
	168, 169, 170, 171, 306, 244, -2, -2, -2, -2,
	-2, -2, -2, -2, 306, -2, -2, -2, -2, -2,
	323, -2, -2, -2, -2, -2, 292, -2, 1011, 0,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 165, 0, 0, 0, 148, 0, 1120,
	0, 1120, 0, 0, 0, 109, 110, 111, 172, 0,
	155, 0, 0, 413, 0, 441, 818, 0, 1120, 444,
	445, 581, 845, 846, 449, 450, 451, 452, 453, 454,
	455, 456, 461, 464, 478, 472, 473, 466, 779, 0,
	853, 853, 0, 853, 770, 772, 773, 778, 30, 508,
	0, 759, 0, 0, 853, 511, 25, 591, 592, 594,
	611, 0, 613, 615, 522, 518, 0, 746, -2, 601,
	602, 630, 631, 632, 0, 853, 853, 853, 628, 606,
	0, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 656, 712, 713, 657, 0, 667, 306,
	308, 308, 308, 310, 310, 261, 262, 0, 0, 313,
	238, 239, 240, 241, 242, 654, 235, 0, 655, 666,
	0, 0, 853, 0, 513, 520, 514, 748, 633, 853,
	797, 27, 0, 0, 0, 0, 638, 0, 0, 745,
	0, 0, 853, 743, 740, 853, 0, 702, 729, 0,
	0, 0, 0, 0, 0, 578, 586, 799, 0, 528,
	557, 559, 0, 554, 569, 570, 572, 0, 574, 0,
	576, 577, 532, 533, 534, 0, 0, 0, 0, 565,
	586, 0, 586, 42, 803, 47, 0, 0, 76, 77,
	804, 805, 806, 0, 808, 327, 0, 156, 159, 160,
	161, 162, 163, 0, 389, -2, 1056, 1077, 1014, 0,
	0, 364, 365, 174, 0, 176, 0, 0, 179, 180,
	0, 182, 184, 389, 0, 0, 0, 0, 0, 173,
	0, 322, 318, 317, 243, 0, 323, 323, 306, 323,
	323, 323, 280, 281, 326, 0, 326, 326, 326, 326,
	0, 0, 313, 313, 266, 268, 255, 0, 308, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 0, 92,
	0, 146, 147, 93, 820, 94, 130, 0, 115, 112,
	113, 114, 0, 98, 0, 1119, 143, 0, 833, 414,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	0, 0, 440, 1120, 443, 481, 0, 0, 0, 776,
	777, 0, 769, 23, 0, 815, 816, 760, 761, 525,
	612, 614, 616, 0, -2, 603, 628, 607, 0, 604,
	853, 853, 0, 598, 236, 237, 0, 0, 0, 856,
	235, 673, 0, 676, 853, 635, -2, 677, 678, 0,
	0, 0, 853, 853, 853, 853, 853, 0, 0, 766,
	0, 741, 853, 0, 691, 703, 704, 705, 706, 791,
	0, 0, -2, 0, 0, 766, 0, 853, 853, 551,
	558, 853, 0, 552, 853, 553, 573, 575, 544, 0,
	0, 0, 0, 0, 549, 766, 586, 38, 74, 75,
	0, 0, 81, 853, 328, 0, 397, 0, 374, 0,
	0, 0, 392, 355, 0, 0, 358, 0, 360, -2,
	386, 175, 0, 0, 0, 181, 183, 0, 187, 188,
	0, 211, 0, 0, 198, 0, -2, 202, 203, 235,
	205, 206, 207, 1045, 210, 306, 306, 231, 1017, 0,
	0, 321, 166, 319, 0, 326, 326, 323, 326, 326,
	326, 282, 0, 283, 284, 285, 286, 0, 304, 0,
	264, 265, 0, 256, 0, 0, 0, 0, 0, 0,
	0, 149, 150, 0, 133, 0, 0, 0, 0, 0,
	402, 0, 0, 1119, 0, 428, 429, 430, 431, 432,
	433, 434, 1119, 0, 415, 416, 417, 418, 419, 420,
	421, 422, 423, 424, 425, 0, 1119, 834, 835, 836,
	837, 0, 0, 442, 463, 0, 853, 479, 480, 780,
	0, 24, 586, 0, 519, 747, 0, 605, 853, 629,
	608, 0, 0, 0, 855, 0, 858, 674, 515, 0,
	306, 306, 717, 306, 310, 720, 721, 306, 723, 306,
	726, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	738, 690, 744, 853, 31, 0, 791, 781, 793, 795,
	853, 27, 0, 787, 0, 774, 800, 587, 801, 555,
	0, 560, 0, 0, 0, 0, 563, 0, 774, 37,
	78, 79, 80, 807, 0, 398, 0, 368, 306, 306,
	0, 0, 0, 0, 0, 0, 356, 357, 359, 362,
	386, 197, 177, 389, 178, 0, 853, 0, 0, 212,
	0, 0, 0, 201, 0, 204, 0, 227, 0, 229,
	0, 0, 0, 307, 273, 274, 326, 275, 276, 277,
	324, 325, 323, 0, 323, 0, 311, 0, 0, 0,
	0, 0, -2, -2, 0, 0, 0, 0, 131, 132,
	0, 116, 0, 100, 0, 426, 427, 0, 407, 0,
	408, 410, 411, 412, 0, 391, 406, 482, 483, 762,
	526, 675, 609, 658, 314, 315, 857, 679, 714, 323,
	718, 719, 722, 724, 725, 727, 681, 680, 682, 853,
	853, 685, 853, 853, 853, 0, 0, 742, 0, 32,
	0, 796, -2, 0, 0, 0, 44, 35, 0, 546,
	547, 0, 536, 538, 539, 540, 541, 542, 543, 0,
	0, 0, 582, 550, 36, 396, 399, 400, 401, 330,
	0, 771, 372, 373, 371, 389, 380, 381, 0, 0,
	389, 390, 391, 386, 853, 363, 0, 0, 0, 853,
	194, 0, 199, 0, 209, 996, 313, 240, 241, 208,
	228, 230, 232, 0, 279, 326, 305, 326, 0, 0,
	0, 0, 0, 0, 366, 367, 306, 0, 151, 152,
	0, 134, 135, 136, 137, 138, 0, 0, 99, 102,
	0, 0, 0, 0, 392, 764, 0, 715, 716, 0,
	0, 0, 0, 707, 689, 739, 0, 794, 0, -2,
	0, 789, 788, 0, 556, 535, 0, 583, 584, 585,
	534, 352, 331, 0, 333, 0, 348, 0, 0, 0,
	0, 0, 0, 0, 0, 369, 370, 375, 0, 382,
	383, 376, 0, 0, 392, 0, 0, 853, 233, 189,
	0, 213, 0, 0, 294, 295, 309, 312, 0, 0,
	0, 588, 1117, 0, 139, 393, 0, 97, 117, 119,
	120, 121, 122, 123, 124, 125, 126, 766, 0, 0,
	0, 0, 61, 853, 853, 0, -2, 102, 102, -2,
	102, 102, 0, 0, 0, 0, 0, 26, 853, 853,
	684, 683, 686, 687, 0, 0, 0, 0, 784, 27,
	0, 548, 537, 545, 329, 0, 334, 0, 0, 0,
	337, 0, 349, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 185, 0, 0,
	0, 0, 196, 200, 588, 0, 0, 586, 0, 0,
	141, 0, 853, 0, 118, 774, 49, -2, 51, 56,
	57, 58, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 101, 103, -2, 104, 105, 106, 107, 108, 0,
	0, 145, 0, 436, 0, 0, 765, 763, 688, 0,
	0, 0, 792, -2, 790, 353, 0, 335, 340, 338,
	341, 350, 351, 342, 343, 344, 345, 346, 347, 389,
	389, 0, 0, 385, 233, 234, 0, 0, 192, 193,
	195, 0, 0, 0, 0, 0, 0, 224, 0, 586,
	0, 0, 330, 0, 588, 95, 0, 394, 140, 96,
	128, 0, 778, 0, 0, 53, 55, 59, 62, 63,
	64, 65, 66, 0, 0, 0, 403, 847, 148, 435,
	0, 0, 0, 708, 0, 711, 0, 332, 0, 377,
	378, 0, 330, 186, 190, 191, 0, 215, 0, 217,
	218, 219, 220, 221, 222, 223, 0, 330, 586, 330,
	352, 0, 586, 853, 0, 127, 52, 172, 0, 0,
	0, 68, 0, 0, 850, 848, 0, 409, 437, 0,
	0, 709, 0, 336, 0, 352, 214, 216, 225, 0,
	352, 330, 88, 86, 589, 330, 142, 0, 0, 60,
	67, 69, 0, 71, 405, 0, 849, 0, 404, 0,
	354, 0, 384, 0, 85, 89, 352, 129, -2, 0,
	0, 851, 852, 0, 0, 0, 226, 87, 70, 0,
	853, 710, 0, 0, 0, 0, 379, 72, 438, 439,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 105, 97, 3,
	53, 55, 102, 100, 54, 101, 114, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 346,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 347, 3, 348, 107, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 96, 3, 108,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 98, 99, 104,
	106, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:385
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:390
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:391
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:395
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:418
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:426
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:430
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:436
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:443
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:449
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:453
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:459
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:463
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:470
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:482
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:494
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:498
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:504
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:510
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:514
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:518
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:523
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:524
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:528
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:532
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:537
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:541
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:547
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:551
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:555
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:559
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:565
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:569
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:582
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:586
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:592
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:597
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:601
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:607
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:614
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:621
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:628
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:636
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:646
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:650
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:654
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:658
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:662
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:668
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:675
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:685
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:689
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:696
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:705
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:713
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:724
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:728
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:734
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:738
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:742
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:748
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:752
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:756
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:760
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:766
		{
			yyVAL.str = SessionStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:770
		{
			yyVAL.str = GlobalStr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:776
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 85:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:781
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 86:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:801
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 87:
		yyDollar = yyS[yypt-15 : yypt+1]
//line parser.y:821
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[6].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[12].columns,
					Where:     NewWhere(WhereStr, yyDollar[13].expr),
					Options:   yyDollar[14].indexOptions,
					Partition: yyDollar[15].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:842
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 89:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:858
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[11].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:874
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:882
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:890
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:898
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:902
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:906
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 96:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:918
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 97:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:929
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:940
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:951
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:956
		{
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:957
		{
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:961
		{
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:962
		{
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:963
		{
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:964
		{
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:965
		{
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:966
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:967
		{
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:971
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:975
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:979
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:985
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:989
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:993
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:999
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1003
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1009
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1013
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1019
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1030
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1042
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1049
		{
			yyVAL.bytes = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1053
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1057
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1062
		{
			yyVAL.bytes = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1066
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1070
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1074
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1078
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1082
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1087
		{
			yyVAL.expr = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1091
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1096
		{
			yyVAL.expr = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1100
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1105
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1109
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1114
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1118
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1124
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1129
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1134
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1140
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1145
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1151
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1156
		{
			yyVAL.bytes = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1160
		{
			yyVAL.bytes = nil
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1166
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1173
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1179
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1183
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1188
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1192
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1196
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1200
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1204
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1210
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1215
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1221
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1232
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1237
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1243
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1255
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1260
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1265
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1270
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1275
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1280
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1285
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1290
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1295
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1300
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1305
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1310
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1319
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1329
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1334
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1339
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1346
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1353
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1361
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1366
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1372
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1378
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1384
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1390
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1397
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1401
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 200:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1405
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1411
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1415
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1419
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1423
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1427
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1431
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1435
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1439
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1443
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1447
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1453
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1457
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1462
		{
			yyVAL.sequence = &Sequence{}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1466
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1471
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1476
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1481
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1486
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1491
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1496
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1501
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1506
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1511
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1516
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1521
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1526
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1533
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1537
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1541
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1545
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1549
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1553
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1558
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1562
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1567
		{
			yyVAL.bytes = nil
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1580
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1585
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1651
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1669
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1699
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1707
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1723
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 295:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1852
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1857
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1862
		{
			yyVAL.optVal = nil
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1866
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1871
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1875
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1883
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1887
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1893
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1901
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1905
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1909
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1914
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1918
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1923
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1927
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1932
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1936
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1940
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1945
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1949
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1953
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1958
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1962
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1966
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1972
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1977
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1981
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1985
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1991
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1995
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2001
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2005
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2011
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2015
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2020
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2024
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2028
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2032
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2036
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2040
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2044
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2048
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2052
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2058
		{
			yyVAL.str = ""
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2062
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2068
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2072
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2078
		{
			yyVAL.indexPartition = nil
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2082
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2086
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2092
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2096
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2100
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2104
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2108
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2112
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2116
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2120
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2124
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2130
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2134
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2140
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2145
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2151
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2155
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2161
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2166
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2170
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2180
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2185
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2192
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 377:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2199
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 378:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2206
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 379:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2215
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(String(yyDollar[10].tableName)),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2227
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2231
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2235
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2239
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 384:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2245
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2256
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2266
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2270
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2274
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2280
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2284
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2289
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2296
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2300
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2307
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2311
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2318
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2322
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2328
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2332
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2336
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2342
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 403:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2346
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 404:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2360
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 405:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2374
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 406:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2393
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 407:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2402
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 408:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2406
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 409:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2410
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 410:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2423
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 411:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2433
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 412:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2438
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2443
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2447
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 435:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2479
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2485
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2489
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 438:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2495
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 439:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2499
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2505
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2511
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2519
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2524
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2532
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2536
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2542
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2546
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2551
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2557
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2561
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2565
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2574
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2578
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2582
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2586
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2590
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2594
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2598
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2602
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2606
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2610
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 463:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2614
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2624
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2628
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2632
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2636
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2640
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2644
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2648
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2658
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2664
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2668
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2674
		{
			yyVAL.str = ""
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2678
		{
			yyVAL.str = "extended "
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2684
		{
			yyVAL.str = ""
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2688
		{
			yyVAL.str = "full "
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2694
		{
			yyVAL.str = ""
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2698
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2702
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2708
		{
			yyVAL.showFilter = nil
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2712
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2716
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2722
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2726
		{
			yyVAL.str = SessionStr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2730
		{
			yyVAL.str = GlobalStr
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2736
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2740
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2746
		{
			yyVAL.statement = &Begin{}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2750
		{
			yyVAL.statement = &Begin{}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2756
		{
			yyVAL.statement = &Commit{}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2762
		{
			yyVAL.statement = &Rollback{}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2768
		{
			yyVAL.statement = &OtherRead{}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2772
		{
			yyVAL.statement = &OtherRead{}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2776
		{
			yyVAL.statement = &OtherRead{}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2780
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2784
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2789
		{
			setAllowComments(yylex, true)
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2793
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2799
		{
			yyVAL.bytes2 = nil
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2803
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2809
		{
			yyVAL.str = UnionStr
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2813
		{
			yyVAL.str = UnionAllStr
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2817
		{
			yyVAL.str = UnionDistinctStr
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2822
		{
			yyVAL.str = ""
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2826
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2830
		{
			yyVAL.str = SQLCacheStr
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2835
		{
			yyVAL.str = ""
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2839
		{
			yyVAL.str = DistinctStr
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2844
		{
			yyVAL.str = ""
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2848
		{
			yyVAL.str = StraightJoinHint
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2853
		{
			yyVAL.selectExprs = nil
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2857
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2863
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2867
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2873
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2877
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2881
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 519:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2885
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2890
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2894
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2898
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2905
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2910
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2914
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2920
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2924
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2934
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2938
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2942
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2947
		{
			yyVAL.strs = []string{}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2951
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2957
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2961
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2967
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2971
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2975
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2979
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2983
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2987
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2993
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 545:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2997
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3003
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3008
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3012
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3018
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3022
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3035
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3039
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3043
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3047
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3053
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3055
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3059
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3061
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3065
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3067
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3070
		{
			yyVAL.empty = struct{}{}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3072
		{
			yyVAL.empty = struct{}{}
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3075
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3079
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3083
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3090
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3096
		{
			yyVAL.str = JoinStr
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3100
		{
			yyVAL.str = JoinStr
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3104
		{
			yyVAL.str = JoinStr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3110
		{
			yyVAL.str = StraightJoinStr
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3116
		{
			yyVAL.str = LeftJoinStr
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3120
		{
			yyVAL.str = LeftJoinStr
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3124
		{
			yyVAL.str = RightJoinStr
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3128
		{
			yyVAL.str = RightJoinStr
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3134
		{
			yyVAL.str = NaturalJoinStr
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3138
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3148
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3152
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3158
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3162
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3167
		{
			yyVAL.indexHints = nil
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3171
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3175
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3179
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3184
		{
			yyVAL.expr = nil
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3188
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3193
		{
			yyVAL.columns = nil
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3197
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3203
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3207
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3211
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3215
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3219
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3223
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3227
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3233
		{
			yyVAL.str = ""
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3237
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3243
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3247
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3253
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3257
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3261
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3265
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3269
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3273
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3277
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3281
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 609:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3285
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3289
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3295
		{
			yyVAL.str = IsNullStr
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3299
		{
			yyVAL.str = IsNotNullStr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3303
		{
			yyVAL.str = IsTrueStr
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3307
		{
			yyVAL.str = IsNotTrueStr
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3311
		{
			yyVAL.str = IsFalseStr
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3315
		{
			yyVAL.str = IsNotFalseStr
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3321
		{
			yyVAL.str = EqualStr
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3325
		{
			yyVAL.str = LessThanStr
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3329
		{
			yyVAL.str = GreaterThanStr
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3333
		{
			yyVAL.str = LessEqualStr
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3337
		{
			yyVAL.str = GreaterEqualStr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3341
		{
			yyVAL.str = NotEqualStr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3345
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3349
		{
			yyVAL.str = PosixRegexStr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3353
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3357
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3361
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3366
		{
			yyVAL.expr = nil
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3370
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3376
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3380
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3384
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3390
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3396
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3400
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3406
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3410
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3414
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3418
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3422
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3426
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3430
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3434
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3438
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3442
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3446
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3450
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3454
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3458
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3462
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3466
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3470
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3474
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3478
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3482
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3486
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3490
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 658:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3494
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3498
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3502
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3506
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3514
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3528
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3532
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3536
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3544
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3552
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3560
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3570
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 674:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3574
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 675:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3578
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3582
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3592
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3596
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 679:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3600
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 680:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3604
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 681:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3608
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 682:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3612
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 683:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3616
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 684:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3620
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 685:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3624
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 686:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3628
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 687:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3632
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 688:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3636
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 689:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3640
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3644
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3648
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3658
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3662
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3666
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3670
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3675
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3680
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3685
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3690
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3694
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3708
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3712
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3716
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3720
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3726
		{
			yyVAL.str = ""
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3730
		{
			yyVAL.str = BooleanModeStr
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3734
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 710:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3738
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3742
		{
			yyVAL.str = QueryExpansionStr
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3748
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3752
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3758
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3766
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3770
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3774
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3778
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3784
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3788
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3792
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3796
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3800
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3804
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3808
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3812
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3818
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3822
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3826
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3830
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3834
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3838
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3842
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3846
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3851
		{
			yyVAL.expr = nil
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3855
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3860
		{
			yyVAL.str = string("")
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3864
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3870
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3874
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 742:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3880
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3885
		{
			yyVAL.expr = nil
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3889
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3895
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3899
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 747:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3903
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3909
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3915
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3919
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3924
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3929
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3933
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3937
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3941
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3945
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3949
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3953
		{
			yyVAL.expr = &NullVal{}
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3959
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3968
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3972
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3977
		{
			yyVAL.exprs = nil
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3981
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3986
		{
			yyVAL.expr = nil
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3990
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3995
		{
			yyVAL.orderBy = nil
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3999
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4005
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4009
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4015
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4020
		{
			yyVAL.str = AscScr
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4024
		{
			yyVAL.str = AscScr
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4028
		{
			yyVAL.str = DescScr
		}
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4033
		{
			yyVAL.limit = nil
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4037
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4041
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 777:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4045
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4050
		{
			yyVAL.str = ""
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4054
		{
			yyVAL.str = ForUpdateStr
		}
	case 780:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4058
		{
			yyVAL.str = ShareModeStr
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4071
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4075
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4079
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 784:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4084
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4088
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 786:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4092
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4099
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4103
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4107
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 790:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4111
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4116
		{
			yyVAL.updateExprs = nil
		}
	case 792:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4120
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4126
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4130
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4136
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4140
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4146
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4152
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4162
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4166
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4172
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4178
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4182
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4188
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4192
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4196
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 807:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4201
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4205
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4212
		{
			yyVAL.bytes = []byte("charset")
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4219
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4223
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4227
		{
			yyVAL.expr = &Default{}
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4236
		{
			yyVAL.byt = 0
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4238
		{
			yyVAL.byt = 1
		}
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4241
		{
			yyVAL.empty = struct{}{}
		}
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4243
		{
			yyVAL.empty = struct{}{}
		}
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4246
		{
			yyVAL.str = ""
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4248
		{
			yyVAL.str = IgnoreStr
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4252
		{
			yyVAL.empty = struct{}{}
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4254
		{
			yyVAL.empty = struct{}{}
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4256
		{
			yyVAL.empty = struct{}{}
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4258
		{
			yyVAL.empty = struct{}{}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4260
		{
			yyVAL.empty = struct{}{}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4262
		{
			yyVAL.empty = struct{}{}
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4264
		{
			yyVAL.empty = struct{}{}
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4266
		{
			yyVAL.empty = struct{}{}
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4268
		{
			yyVAL.empty = struct{}{}
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4270
		{
			yyVAL.empty = struct{}{}
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4273
		{
			yyVAL.empty = struct{}{}
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4275
		{
			yyVAL.empty = struct{}{}
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4277
		{
			yyVAL.empty = struct{}{}
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4281
		{
			yyVAL.empty = struct{}{}
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4283
		{
			yyVAL.empty = struct{}{}
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4287
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4291
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4298
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4304
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4308
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4313
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4320
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4326
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4330
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4334
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4340
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4344
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4348
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4354
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4358
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 855:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4365
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4372
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4376
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4383
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4667
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4676
		{
			decNesting(yylex)
		}
	case 1119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4681
		{
			forceEOF(yylex)
		}
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4686
		{
			forceEOF(yylex)
		}
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4690
		{
			forceEOF(yylex)
		}
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4694
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
