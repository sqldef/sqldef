// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
	constraintOptions        *ConstraintOptions
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const GRANT = 57457
const REVOKE = 57458
const OPTION = 57459
const PRIVILEGES = 57460
const SCHEMA = 57461
const TABLE = 57462
const INDEX = 57463
const MATERIALIZED = 57464
const VIEW = 57465
const TO = 57466
const IGNORE = 57467
const IF = 57468
const PRIMARY = 57469
const COLUMN = 57470
const CONSTRAINT = 57471
const REFERENCES = 57472
const SPATIAL = 57473
const FULLTEXT = 57474
const FOREIGN = 57475
const KEY_BLOCK_SIZE = 57476
const POLICY = 57477
const WHILE = 57478
const EXCLUDE = 57479
const GIST = 57480
const UNIQUE = 57481
const KEY = 57482
const SHOW = 57483
const DESCRIBE = 57484
const EXPLAIN = 57485
const DATE = 57486
const ESCAPE = 57487
const REPAIR = 57488
const OPTIMIZE = 57489
const TRUNCATE = 57490
const EXEC = 57491
const EXECUTE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const TYPE = 57500
const RETURN = 57501
const EXTENSION = 57502
const DATA = 57503
const STATUS = 57504
const VARIABLES = 57505
const RESTRICT = 57506
const CASCADE = 57507
const NO = 57508
const ACTION = 57509
const PERMISSIVE = 57510
const RESTRICTIVE = 57511
const PUBLIC = 57512
const CURRENT_USER = 57513
const SESSION_USER = 57514
const PAD_INDEX = 57515
const FILLFACTOR = 57516
const IGNORE_DUP_KEY = 57517
const STATISTICS_NORECOMPUTE = 57518
const STATISTICS_INCREMENTAL = 57519
const ALLOW_ROW_LOCKS = 57520
const ALLOW_PAGE_LOCKS = 57521
const DISTANCE = 57522
const M = 57523
const EUCLIDEAN = 57524
const COSINE = 57525
const BEFORE = 57526
const AFTER = 57527
const EACH = 57528
const ROW = 57529
const SCROLL = 57530
const CURSOR = 57531
const OPEN = 57532
const CLOSE = 57533
const FETCH = 57534
const PRIOR = 57535
const FIRST = 57536
const LAST = 57537
const DEALLOCATE = 57538
const INSTEAD = 57539
const OF = 57540
const OUTPUT = 57541
const DEFERRABLE = 57542
const INITIALLY = 57543
const IMMEDIATE = 57544
const DEFERRED = 57545
const CONCURRENTLY = 57546
const SQL = 57547
const SECURITY = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const BIT = 57554
const TINYINT = 57555
const SMALLINT = 57556
const SMALLSERIAL = 57557
const MEDIUMINT = 57558
const INT = 57559
const INTEGER = 57560
const SERIAL = 57561
const BIGINT = 57562
const BIGSERIAL = 57563
const INTNUM = 57564
const REAL = 57565
const DOUBLE = 57566
const PRECISION = 57567
const FLOAT_TYPE = 57568
const DECIMAL = 57569
const NUMERIC = 57570
const SMALLMONEY = 57571
const MONEY = 57572
const TIME = 57573
const TIMESTAMP = 57574
const DATETIME = 57575
const YEAR = 57576
const DATETIMEOFFSET = 57577
const DATETIME2 = 57578
const SMALLDATETIME = 57579
const CHAR = 57580
const VARCHAR = 57581
const VARYING = 57582
const BOOL = 57583
const CHARACTER = 57584
const VARBINARY = 57585
const NCHAR = 57586
const NVARCHAR = 57587
const NTEXT = 57588
const UUID = 57589
const TEXT = 57590
const TINYTEXT = 57591
const MEDIUMTEXT = 57592
const LONGTEXT = 57593
const CITEXT = 57594
const BLOB = 57595
const TINYBLOB = 57596
const MEDIUMBLOB = 57597
const LONGBLOB = 57598
const JSON = 57599
const JSONB = 57600
const ENUM = 57601
const GEOMETRY = 57602
const POINT = 57603
const LINESTRING = 57604
const POLYGON = 57605
const GEOMETRYCOLLECTION = 57606
const MULTIPOINT = 57607
const MULTILINESTRING = 57608
const MULTIPOLYGON = 57609
const VECTOR = 57610
const VARIADIC = 57611
const ARRAY = 57612
const NOW = 57613
const GETDATE = 57614
const BPCHAR = 57615
const TEXT_PATTERN_OPS = 57616
const NULLX = 57617
const AUTO_INCREMENT = 57618
const APPROXNUM = 57619
const SIGNED = 57620
const UNSIGNED = 57621
const ZEROFILL = 57622
const ZONE = 57623
const AUTOINCREMENT = 57624
const DATABASES = 57625
const TABLES = 57626
const VSCHEMA_TABLES = 57627
const EXTENDED = 57628
const FULL = 57629
const PROCESSLIST = 57630
const NAMES = 57631
const CHARSET = 57632
const GLOBAL = 57633
const SESSION = 57634
const ISOLATION = 57635
const LEVEL = 57636
const READ = 57637
const WRITE = 57638
const ONLY = 57639
const REPEATABLE = 57640
const COMMITTED = 57641
const UNCOMMITTED = 57642
const SERIALIZABLE = 57643
const NEW = 57644
const CONCAT_NULL_YIELDS_NULL = 57645
const CURSOR_CLOSE_ON_COMMIT = 57646
const QUOTED_IDENTIFIER = 57647
const ARITHABORT = 57648
const FMTONLY = 57649
const NOCOUNT = 57650
const NOEXEC = 57651
const NUMERIC_ROUNDABORT = 57652
const ANSI_DEFAULTS = 57653
const ANSI_NULL_DFLT_OFF = 57654
const ANSI_NULL_DFLT_ON = 57655
const ANSI_NULLS = 57656
const ANSI_PADDING = 57657
const ANSI_WARNINGS = 57658
const FORCEPLAN = 57659
const SHOWPLAN_ALL = 57660
const SHOWPLAN_TEXT = 57661
const SHOWPLAN_XML = 57662
const IMPLICIT_TRANSACTIONS = 57663
const REMOTE_PROC_TRANSACTIONS = 57664
const XACT_ABORT = 57665
const CURRENT_TIMESTAMP = 57666
const DATABASE = 57667
const CURRENT_DATE = 57668
const CURRENT_TIME = 57669
const LOCALTIME = 57670
const LOCALTIMESTAMP = 57671
const UTC_DATE = 57672
const UTC_TIME = 57673
const UTC_TIMESTAMP = 57674
const REPLACE = 57675
const CONVERT = 57676
const CAST = 57677
const COALESCE = 57678
const SUBSTR = 57679
const SUBSTRING = 57680
const GROUP_CONCAT = 57681
const SEPARATOR = 57682
const INHERIT = 57683
const LEAD = 57684
const LAG = 57685
const MATCH = 57686
const AGAINST = 57687
const BOOLEAN = 57688
const LANGUAGE = 57689
const WITH = 57690
const WITHOUT = 57691
const PARSER = 57692
const QUERY = 57693
const EXPANSION = 57694
const UNUSED = 57695
const VIRTUAL = 57696
const STORED = 57697
const GENERATED = 57698
const ALWAYS = 57699
const IDENTITY = 57700
const SEQUENCE = 57701
const INCREMENT = 57702
const MINVALUE = 57703
const CACHE = 57704
const CYCLE = 57705
const OWNED = 57706
const NONE = 57707
const CLUSTERED = 57708
const NONCLUSTERED = 57709
const REPLICATION = 57710
const COLUMNSTORE = 57711
const INCLUDE = 57712
const HOLDLOCK = 57713
const NOLOCK = 57714
const NOWAIT = 57715
const PAGLOCK = 57716
const ROWLOCK = 57717
const TABLOCK = 57718
const UPDLOCK = 57719
const READUNCOMMITTED = 57720
const DEFINER = 57721
const INVOKER = 57722
const TYPECAST = 57723
const CHECK = 57724
const OVER = 57725

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"GRANT",
	"REVOKE",
	"OPTION",
	"PRIVILEGES",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"EXCLUDE",
	"GIST",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"EXTENSION",
	"DATA",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"COALESCE",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 7,
	138, 500,
	-2, 222,
	-1, 213,
	123, 932,
	-2, 925,
	-1, 214,
	123, 933,
	-2, 845,
	-1, 367,
	58, 497,
	-2, 1113,
	-1, 374,
	61, 446,
	-2, 1058,
	-1, 375,
	61, 447,
	-2, 1065,
	-1, 456,
	123, 936,
	-2, 930,
	-1, 457,
	123, 933,
	-2, 931,
	-1, 503,
	61, 446,
	-2, 443,
	-1, 555,
	123, 934,
	-2, 849,
	-1, 674,
	138, 221,
	157, 221,
	-2, 1113,
	-1, 692,
	123, 933,
	-2, 375,
	-1, 857,
	60, 449,
	-2, 873,
	-1, 858,
	60, 450,
	-2, 873,
	-1, 859,
	60, 451,
	-2, 873,
	-1, 860,
	60, 452,
	-2, 873,
	-1, 864,
	5, 92,
	-2, 15,
	-1, 867,
	5, 92,
	-2, 17,
	-1, 1009,
	403, 818,
	-2, 375,
	-1, 1042,
	59, 950,
	123, 934,
	403, 950,
	-2, 849,
	-1, 1043,
	59, 951,
	403, 951,
	-2, 854,
	-1, 1044,
	59, 952,
	403, 952,
	-2, 855,
	-1, 1045,
	59, 953,
	403, 953,
	-2, 856,
	-1, 1046,
	59, 954,
	403, 954,
	-2, 857,
	-1, 1047,
	59, 955,
	403, 955,
	-2, 858,
	-1, 1048,
	59, 956,
	403, 956,
	-2, 635,
	-1, 1049,
	59, 957,
	403, 957,
	-2, 636,
	-1, 1145,
	119, 395,
	120, 395,
	-2, 24,
	-1, 1280,
	5, 93,
	-2, 683,
	-1, 1404,
	60, 162,
	-2, 927,
	-1, 1407,
	60, 162,
	-2, 279,
	-1, 1531,
	59, 958,
	403, 958,
	-2, 719,
	-1, 1562,
	5, 92,
	-2, 16,
	-1, 1578,
	206, 119,
	-2, 596,
	-1, 1623,
	32, 243,
	60, 162,
	71, 243,
	144, 243,
	146, 243,
	147, 243,
	287, 243,
	399, 243,
	402, 243,
	-2, 927,
	-1, 1624,
	161, 1006,
	229, 1006,
	230, 1006,
	231, 1006,
	232, 1006,
	233, 1006,
	234, 1006,
	235, 1006,
	236, 1006,
	237, 1006,
	238, 1006,
	240, 1006,
	241, 1006,
	243, 1006,
	244, 1006,
	245, 1006,
	246, 1006,
	247, 1006,
	248, 1006,
	249, 1006,
	250, 1006,
	251, 1006,
	252, 1006,
	253, 1006,
	254, 1006,
	255, 1006,
	256, 1006,
	258, 1006,
	259, 1006,
	260, 1006,
	261, 1006,
	262, 1006,
	263, 1006,
	264, 1006,
	265, 1006,
	266, 1006,
	267, 1006,
	268, 1006,
	270, 1006,
	271, 1006,
	272, 1006,
	273, 1006,
	274, 1006,
	275, 1006,
	276, 1006,
	277, 1006,
	278, 1006,
	279, 1006,
	280, 1006,
	281, 1006,
	282, 1006,
	283, 1006,
	284, 1006,
	285, 1006,
	363, 1006,
	-2, 375,
	-1, 1625,
	161, 1135,
	229, 1135,
	230, 1135,
	231, 1135,
	232, 1135,
	233, 1135,
	234, 1135,
	235, 1135,
	236, 1135,
	237, 1135,
	238, 1135,
	240, 1135,
	241, 1135,
	243, 1135,
	244, 1135,
	245, 1135,
	246, 1135,
	247, 1135,
	248, 1135,
	249, 1135,
	250, 1135,
	251, 1135,
	252, 1135,
	253, 1135,
	254, 1135,
	255, 1135,
	256, 1135,
	258, 1135,
	260, 1135,
	261, 1135,
	262, 1135,
	263, 1135,
	264, 1135,
	265, 1135,
	266, 1135,
	267, 1135,
	268, 1135,
	270, 1135,
	271, 1135,
	272, 1135,
	273, 1135,
	274, 1135,
	275, 1135,
	276, 1135,
	277, 1135,
	278, 1135,
	279, 1135,
	280, 1135,
	281, 1135,
	282, 1135,
	283, 1135,
	284, 1135,
	285, 1135,
	363, 1135,
	-2, 395,
	-1, 1627,
	161, 1061,
	229, 1061,
	230, 1061,
	231, 1061,
	232, 1061,
	233, 1061,
	234, 1061,
	235, 1061,
	236, 1061,
	237, 1061,
	238, 1061,
	240, 1061,
	241, 1061,
	243, 1061,
	244, 1061,
	245, 1061,
	246, 1061,
	247, 1061,
	248, 1061,
	249, 1061,
	250, 1061,
	251, 1061,
	252, 1061,
	253, 1061,
	254, 1061,
	255, 1061,
	256, 1061,
	258, 1061,
	259, 1061,
	260, 1061,
	261, 1061,
	262, 1061,
	263, 1061,
	264, 1061,
	265, 1061,
	266, 1061,
	267, 1061,
	268, 1061,
	270, 1061,
	271, 1061,
	272, 1061,
	273, 1061,
	274, 1061,
	275, 1061,
	276, 1061,
	277, 1061,
	278, 1061,
	279, 1061,
	280, 1061,
	281, 1061,
	282, 1061,
	283, 1061,
	284, 1061,
	285, 1061,
	363, 1061,
	-2, 337,
	-1, 1718,
	403, 829,
	-2, 710,
	-1, 1799,
	90, 928,
	-2, 915,
	-1, 1844,
	105, 726,
	106, 726,
	107, 726,
	108, 726,
	109, 726,
	110, 726,
	111, 726,
	112, 726,
	113, 726,
	114, 726,
	115, 726,
	116, 726,
	119, 726,
	398, 726,
	-2, 639,
	-1, 1845,
	105, 726,
	106, 726,
	107, 726,
	108, 726,
	109, 726,
	110, 726,
	111, 726,
	112, 726,
	113, 726,
	114, 726,
	115, 726,
	116, 726,
	119, 726,
	398, 726,
	-2, 641,
	-1, 1846,
	105, 726,
	106, 726,
	107, 726,
	108, 726,
	109, 726,
	110, 726,
	111, 726,
	112, 726,
	113, 726,
	114, 726,
	115, 726,
	116, 726,
	119, 726,
	398, 726,
	-2, 643,
	-1, 1901,
	57, 106,
	59, 106,
	-2, 108,
	-1, 2085,
	5, 92,
	-2, 884,
	-1, 2110,
	5, 92,
	-2, 115,
	-1, 2147,
	59, 1101,
	60, 1101,
	-2, 526,
	-1, 2184,
	5, 93,
	-2, 885,
	-1, 2215,
	5, 92,
	-2, 887,
	-1, 2236,
	5, 93,
	-2, 888,
}

const yyPrivate = 57344

const yyLast = 16211

var yyAct = [...]int16{
	557, 536, 2013, 2193, 773, 2140, 2103, 2031, 2141, 43,
	43, 2146, 569, 2137, 61, 1272, 58, 1922, 2071, 1022,
	699, 775, 209, 210, 211, 1256, 2014, 2108, 1368, 1936,
	874, 1981, 1382, 1365, 2095, 1920, 1369, 55, 1793, 1935,
	1924, 1769, 1910, 2007, 1582, 1383, 1181, 1779, 615, 1761,
	1790, 1579, 1787, 1114, 1380, 1811, 250, 250, 250, 745,
	1516, 244, 495, 48, 1494, 1366, 1362, 465, 797, 1778,
	1353, 1222, 1511, 1214, 1027, 1057, 1010, 251, 855, 455,
	1291, 1668, 1524, 1215, 1033, 1092, 246, 245, 1029, 813,
	1619, 1141, 1659, 1235, 932, 540, 1095, 1041, 498, 689,
	431, 504, 715, 533, 657, 623, 882, 358, 1408, 446,
	805, 921, 447, 212, 539, 378, 353, 469, 323, 1338,
	1337, 603, 397, 426, 54, 1108, 626, 753, 754, 755,
	756, 757, 750, 1107, 952, 761, 785, 856, 222, 1298,
	224, 225, 13, 751, 752, 753, 754, 755, 756, 757,
	750, 1525, 402, 761, 44, 956, 958, 1169, 964, 750,
	393, 1888, 761, 417, 965, 966, 967, 968, 969, 970,
	971, 1354, 957, 959, 955, 960, 961, 962, 963, 749,
	748, 758, 759, 751, 752, 753, 754, 755, 756, 757,
	750, 761, 728, 761, 2194, 2195, 2196, 2197, 2198, 2199,
	2200, 2201, 888, 226, 314, 317, 318, 442, 443, 1428,
	938, 1152, 890, 329, 887, 780, 731, 1397, 1386, 1385,
	506, 507, 2234, 58, 530, 336, 227, 228, 990, 1387,
	1860, 2227, 43, 1707, 1708, 372, 780, 396, 1397, 1386,
	1385, 2132, 1388, 58, 707, 1265, 1266, 2076, 1445, 1444,
	1387, 1270, 1110, 502, 710, 1149, 708, 509, 355, 1991,
	334, 401, 782, 1388, 749, 748, 758, 759, 751, 752,
	753, 754, 755, 756, 757, 750, 956, 958, 761, 964,
	1109, 1110, 2104, 746, 2210, 965, 966, 967, 968, 969,
	970, 971, 1556, 957, 959, 955, 960, 961, 962, 963,
	749, 748, 758, 759, 751, 752, 753, 754, 755, 756,
	757, 750, 627, 628, 761, 1758, 2131, 437, 1891, 1546,
	319, 2058, 321, 1953, 2075, 949, 948, 1480, 747, 1747,
	503, 58, 229, 250, 738, 2114, 44, 335, 2113, 2042,
	2043, 2115, 1937, 950, 1938, 456, 2167, 2168, 463, 505,
	2166, 356, 1381, 58, 44, 1689, 1294, 2041, 44, 1718,
	605, 1944, 1393, 44, 509, 1687, 499, 44, 454, 1552,
	413, 1440, 570, 1381, 1551, 1399, 1400, 1686, 399, 1122,
	520, 1121, 915, 1393, 1106, 1395, 735, 1684, 737, 736,
	491, 44, 44, 1943, 460, 405, 1399, 1400, 1510, 44,
	1170, 606, 1340, 1540, 45, 1339, 1395, 429, 467, 406,
	433, 847, 846, 462, 760, 1314, 1389, 1390, 1392, 506,
	507, 1312, 1391, 34, 1814, 44, 1566, 412, 414, 415,
	416, 430, 760, 1570, 320, 1203, 635, 1389, 1390, 1392,
	1859, 760, 1861, 1391, 206, 1462, 1463, 928, 453, 471,
	524, 1202, 1201, 647, 1570, 931, 930, 889, 929, 876,
	451, 1930, 951, 619, 620, 621, 622, 1815, 1565, 58,
	760, 660, 760, 950, 1207, 1617, 662, 663, 664, 665,
	666, 1361, 58, 1297, 1960, 1789, 679, 315, 1223, 683,
	58, 760, 44, 1419, 1820, 690, 1107, 1669, 1670, 709,
	870, 871, 1649, 463, 758, 759, 751, 752, 753, 754,
	755, 756, 757, 750, 948, 1149, 761, 403, 730, 1218,
	408, 1424, 2008, 410, 1992, 625, 207, 686, 733, 1975,
	658, 950, 514, 1744, 1429, 1430, 1153, 1154, 2212, 780,
	420, 421, 422, 423, 424, 991, 511, 741, 629, 659,
	1651, 515, 632, 1426, 701, 1608, 1709, 760, 1445, 1398,
	1155, 1148, 940, 649, 1474, 505, 939, 608, 684, 517,
	610, 648, 613, 614, 952, 506, 507, 656, 661, 701,
	1398, 523, 529, 1852, 522, 324, 45, 354, 668, 673,
	671, 509, 951, 760, 220, 500, 217, 827, 1171, 669,
	680, 413, 711, 501, 45, 510, 512, 687, 45, 776,
	2179, 1475, 706, 45, 1973, 917, 729, 45, 727, 749,
	748, 758, 759, 751, 752, 753, 754, 755, 756, 757,
	750, 1568, 688, 761, 2074, 1966, 732, 690, 1150, 701,
	935, 45, 45, 1438, 1702, 864, 1432, 867, 875, 45,
	951, 58, 316, 881, 883, 339, 883, 833, 886, 835,
	1735, 952, 838, 839, 1713, 1788, 609, 772, 896, 409,
	1674, 58, 411, 899, 818, 45, 900, 901, 902, 1715,
	949, 948, 675, 819, 475, 197, 58, 1167, 879, 2228,
	700, 702, 892, 1172, 1505, 776, 1433, 776, 950, 922,
	923, 807, 808, 809, 810, 811, 812, 1305, 198, 1304,
	1160, 194, 199, 200, 690, 700, 702, 513, 1023, 701,
	903, 1710, 2133, 909, 474, 1609, 1610, 1611, 2004, 949,
	948, 1178, 44, 558, 1014, 556, 560, 561, 562, 563,
	1173, 875, 45, 559, 564, 667, 216, 950, 239, 474,
	1722, 949, 948, 676, 677, 866, 240, 880, 877, 873,
	1161, 827, 885, 952, 1015, 1015, 478, 325, 326, 950,
	479, 988, 1017, 834, 897, 700, 702, 776, 654, 898,
	327, 476, 477, 1026, 58, 58, 904, 893, 933, 934,
	936, 1721, 1134, 1434, 511, 760, 981, 51, 456, 937,
	1098, 1097, 202, 1032, 1669, 1670, 895, 924, 925, 926,
	941, 949, 948, 505, 740, 974, 485, 951, 949, 948,
	641, 1037, 1038, 208, 2107, 978, 1550, 949, 948, 950,
	979, 201, 2106, 776, 894, 1031, 950, 701, 1009, 2105,
	1051, 1053, 1054, 1055, 205, 950, 1088, 819, 1006, 1091,
	1008, 946, 204, 690, 1126, 700, 702, 1162, 203, 340,
	653, 338, 236, 875, 690, 223, 951, 1013, 1016, 232,
	1132, 1292, 1870, 1711, 1712, 1714, 1716, 1717, 1089, 1090,
	1630, 978, 1112, 1117, 1115, 1116, 1410, 35, 951, 36,
	37, 38, 690, 1130, 678, 250, 1166, 780, 1168, 1397,
	1386, 1385, 42, 480, 1174, 2032, 2034, 44, 1177, 1294,
	349, 1387, 760, 1829, 690, 342, 343, 344, 1113, 341,
	776, 348, 47, 49, 1388, 949, 948, 51, 58, 195,
	196, 1125, 949, 948, 763, 764, 2187, 722, 952, 1784,
	730, 2067, 44, 950, 1216, 1219, 690, 1636, 951, 1322,
	950, 1940, 914, 918, 919, 951, 1165, 949, 948, 1730,
	50, 1295, 1111, 218, 951, 1200, 949, 948, 1236, 1439,
	924, 925, 926, 700, 702, 950, 1854, 1098, 1253, 1766,
	927, 58, 45, 907, 950, 784, 1507, 234, 783, 237,
	238, 650, 488, 2033, 400, 1204, 333, 982, 984, 330,
	1208, 1131, 841, 949, 948, 949, 948, 1118, 1720, 1120,
	482, 483, 1245, 1195, 481, 617, 616, 906, 1257, 746,
	213, 950, 217, 950, 487, 746, 1196, 2116, 40, 1159,
	776, 1198, 2093, 1939, 1381, 1293, 1459, 1458, 1210, 1457,
	1456, 1455, 1211, 1454, 1393, 1453, 39, 1452, 472, 468,
	470, 1237, 1269, 1293, 474, 41, 1199, 1399, 1400, 1451,
	473, 842, 951, 1450, 747, 1448, 1243, 1395, 989, 951,
	747, 1096, 1742, 952, 1332, 949, 948, 1895, 1896, 1276,
	1241, 1242, 1240, 1220, 1286, 1548, 1363, 949, 948, 1096,
	497, 1435, 1209, 950, 951, 1925, 331, 1163, 1389, 1390,
	1392, 519, 216, 951, 1391, 950, 1227, 1229, 1230, 1521,
	1740, 197, 1341, 1650, 1228, 1570, 1648, 497, 749, 748,
	758, 759, 751, 752, 753, 754, 755, 756, 757, 750,
	690, 220, 761, 1927, 198, 58, 1205, 194, 199, 200,
	951, 1436, 951, 1364, 1652, 496, 1329, 1164, 1404, 1425,
	1411, 952, 690, 690, 1653, 518, 1660, 45, 1216, 1420,
	1360, 497, 1858, 1311, 1671, 337, 1423, 1346, 1175, 1347,
	497, 1206, 1257, 1315, 250, 345, 346, 1661, 1176, 350,
	748, 758, 759, 751, 752, 753, 754, 755, 756, 757,
	750, 1331, 45, 761, 1662, 1658, 749, 748, 758, 759,
	751, 752, 753, 754, 755, 756, 757, 750, 1355, 509,
	761, 11, 951, 690, 607, 1197, 1660, 681, 1261, 1803,
	1238, 1124, 197, 607, 951, 1464, 1442, 682, 202, 1466,
	1123, 1418, 1481, 1482, 1483, 1437, 1401, 1661, 1403, 1923,
	612, 1398, 1259, 993, 611, 198, 952, 1260, 194, 199,
	200, 1104, 633, 1236, 631, 436, 630, 201, 602, 440,
	1880, 444, 445, 1011, 509, 1012, 7, 10, 452, 782,
	45, 1449, 8, 9, 762, 464, 782, 1119, 466, 905,
	466, 624, 1519, 525, 1446, 1506, 1252, 484, 840, 1412,
	1413, 726, 1765, 1293, 776, 1518, 58, 725, 1023, 724,
	827, 1142, 952, 2222, 2221, 952, 508, 1142, 2220, 1118,
	456, 1461, 1501, 2207, 2165, 952, 2186, 952, 1501, 2121,
	1307, 1309, 723, 1310, 913, 2059, 1907, 952, 1313, 526,
	712, 554, 776, 1037, 1490, 1504, 1237, 913, 1959, 202,
	1316, 1317, 2129, 952, 1318, 1319, 516, 1320, 1321, 1547,
	1470, 1904, 690, 690, 1750, 195, 196, 913, 1958, 1912,
	1915, 1916, 1917, 1913, 1562, 1914, 1918, 1520, 201, 2096,
	2097, 1618, 1523, 1526, 634, 1528, 1559, 1009, 638, 639,
	1534, 1509, 1537, 1532, 1533, 1529, 819, 1006, 1578, 1531,
	1604, 1605, 1606, 913, 1956, 1613, 1530, 1905, 1541, 654,
	1572, 1571, 1473, 1955, 1503, 1404, 1404, 1404, 1623, 1404,
	1404, 760, 1460, 780, 776, 690, 690, 690, 1473, 1954,
	1350, 1553, 1142, 1885, 1557, 250, 1473, 952, 690, 690,
	1554, 1569, 913, 1838, 1501, 1837, 1834, 1833, 913, 1826,
	2083, 1349, 1654, 913, 1825, 2084, 1657, 913, 1819, 913,
	1818, 913, 1817, 913, 1751, 913, 1680, 1473, 1637, 1574,
	1575, 1576, 739, 1580, 1615, 509, 195, 196, 1616, 58,
	690, 1907, 760, 1539, 1216, 1685, 1688, 1216, 1216, 554,
	554, 554, 554, 554, 554, 554, 1640, 913, 1632, 760,
	1555, 1656, 778, 1348, 1678, 781, 1620, 1621, 1622, 1628,
	1629, 1262, 58, 913, 1631, 1128, 1257, 1287, 952, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	2011, 799, 654, 801, 802, 803, 804, 806, 806, 806,
	806, 806, 806, 806, 1725, 828, 829, 830, 831, 1703,
	776, 1673, 776, 1681, 776, 1663, 1664, 1665, 1666, 1667,
	1690, 1691, 1633, 1634, 1635, 947, 1697, 1683, 1906, 875,
	1676, 1700, 1677, 1501, 1500, 1642, 1643, 913, 1478, 913,
	1421, 780, 1675, 913, 1357, 1142, 1356, 861, 865, 1982,
	865, 58, 1020, 952, 1907, 872, 1142, 1264, 1767, 1754,
	913, 1221, 844, 1145, 884, 913, 912, 851, 850, 1760,
	844, 845, 1772, 2214, 1764, 848, 1771, 1679, 1804, 1564,
	1770, 1501, 1777, 844, 843, 242, 241, 2138, 1796, 1982,
	2092, 1023, 837, 509, 1404, 1327, 836, 2092, 781, 1724,
	1755, 1325, 1762, 832, 1763, 1812, 1812, 1569, 1774, 1216,
	1216, 1143, 690, 1776, 2092, 690, 690, 942, 943, 1560,
	250, 878, 655, 1816, 646, 2182, 973, 975, 976, 977,
	778, 645, 1020, 233, 646, 1287, 231, 1287, 230, 780,
	1813, 231, 1782, 1326, 1802, 646, 1907, 1501, 1809, 1324,
	2040, 1932, 1785, 1723, 1287, 1306, 554, 554, 554, 554,
	554, 554, 554, 554, 554, 554, 554, 554, 1142, 913,
	654, 1912, 1915, 1916, 1917, 1913, 992, 1914, 1918, 849,
	567, 1830, 1822, 1823, 1843, 509, 778, 1158, 1157, 944,
	509, 509, 312, 554, 853, 852, 2160, 2158, 2120, 2096,
	2097, 58, 1971, 215, 219, 1831, 419, 402, 1645, 1835,
	1836, 1644, 1641, 1639, 1638, 1558, 1469, 1468, 1431, 1871,
	1427, 1416, 1415, 1414, 1352, 1351, 432, 1268, 219, 1212,
	219, 219, 1156, 1151, 1147, 1682, 1129, 986, 879, 985,
	1853, 1855, 1856, 1857, 983, 980, 1849, 945, 243, 1824,
	313, 1868, 1827, 1828, 1866, 891, 1929, 863, 250, 862,
	713, 651, 58, 636, 1127, 427, 531, 1307, 1867, 1942,
	1850, 1851, 1894, 865, 527, 494, 1133, 434, 435, 1728,
	425, 418, 407, 15, 652, 2138, 1441, 2099, 1144, 854,
	637, 439, 438, 1897, 328, 322, 1569, 1890, 52, 1796,
	1569, 1763, 690, 1962, 2102, 1919, 2025, 1928, 776, 1762,
	1893, 2026, 1933, 1902, 2101, 2023, 1749, 1957, 1946, 1931,
	2024, 1693, 2027, 2022, 1916, 1917, 1964, 1965, 2021, 2178,
	1948, 1282, 1283, 2130, 1950, 1980, 1863, 800, 486, 493,
	1512, 1972, 1974, 1945, 618, 744, 1762, 2180, 1947, 1782,
	1762, 1963, 922, 923, 459, 1513, 410, 1789, 1359, 743,
	644, 1278, 554, 1239, 1279, 554, 642, 554, 554, 554,
	554, 554, 554, 640, 332, 1093, 2037, 1098, 2015, 1402,
	1140, 1099, 1976, 865, 1977, 869, 705, 1273, 2175, 1258,
	1983, 1862, 1274, 1023, 1772, 2174, 1026, 2126, 2000, 1557,
	1821, 1808, 1807, 58, 1806, 1805, 219, 2001, 2066, 2012,
	1467, 58, 2003, 1706, 1705, 2010, 219, 219, 58, 2229,
	219, 351, 2065, 1479, 1719, 1998, 2017, 2018, 33, 2020,
	1569, 2028, 1277, 1890, 704, 703, 2036, 1465, 46, 1961,
	1796, 2038, 58, 2049, 2039, 1296, 776, 2016, 2047, 1136,
	2019, 1137, 1138, 1139, 521, 1257, 448, 449, 450, 2063,
	2048, 1025, 1028, 1903, 1135, 1146, 554, 2064, 12, 1782,
	1, 1581, 17, 1782, 1782, 1782, 1782, 1782, 16, 1257,
	2070, 441, 2085, 1039, 1890, 537, 1890, 1782, 2069, 2192,
	1786, 1577, 1607, 1672, 601, 380, 219, 1508, 528, 19,
	219, 1757, 219, 219, 1563, 868, 2109, 643, 1655, 219,
	1179, 458, 2110, 1882, 458, 2091, 219, 2089, 1886, 219,
	916, 219, 363, 352, 2100, 908, 489, 53, 219, 14,
	1447, 364, 776, 362, 1842, 1763, 361, 360, 58, 359,
	2111, 1998, 357, 395, 604, 398, 734, 404, 1782, 428,
	249, 247, 248, 252, 1098, 2015, 2139, 2148, 2109, 1561,
	2128, 2144, 776, 1098, 2015, 1791, 1941, 2142, 554, 1290,
	219, 2149, 972, 2112, 1798, 2124, 2145, 1782, 2152, 1772,
	1772, 1052, 1515, 2134, 1771, 2151, 2173, 1998, 1770, 2155,
	2125, 58, 2135, 2136, 1884, 1330, 1094, 538, 1887, 1226,
	2082, 954, 534, 1969, 1970, 1781, 1898, 1911, 1296, 1909,
	1908, 776, 2098, 2171, 2172, 219, 2170, 2094, 2177, 219,
	219, 1780, 1746, 2181, 781, 1990, 1476, 1477, 1257, 875,
	2122, 2123, 875, 875, 875, 1281, 2206, 551, 2189, 1727,
	1485, 1487, 1489, 1394, 2190, 548, 1384, 778, 1239, 554,
	554, 554, 2205, 554, 1024, 1284, 6, 2148, 2218, 2191,
	2215, 2213, 2202, 2203, 2204, 2142, 1396, 2209, 2217, 458,
	1569, 2149, 1379, 5, 4, 698, 2219, 3, 1378, 1377,
	1692, 1968, 1376, 2226, 1375, 865, 1373, 1374, 1371, 1372,
	2230, 2231, 1370, 220, 1275, 217, 2232, 2142, 777, 2,
	1098, 2015, 2235, 2233, 0, 0, 554, 0, 0, 0,
	776, 0, 0, 0, 0, 1763, 0, 2054, 2055, 0,
	1698, 0, 0, 1993, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 554, 554, 554, 0, 0, 0, 0,
	0, 776, 0, 0, 2068, 749, 748, 758, 759, 751,
	752, 753, 754, 755, 756, 757, 750, 0, 1752, 761,
	0, 0, 1756, 0, 0, 0, 0, 865, 0, 0,
	0, 0, 0, 2088, 0, 2090, 780, 0, 1397, 1386,
	1385, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	1387, 0, 0, 2052, 2053, 0, 550, 0, 0, 1018,
	1019, 1021, 1614, 1388, 0, 0, 0, 198, 0, 2062,
	194, 199, 200, 0, 0, 1738, 952, 698, 219, 0,
	0, 0, 0, 0, 0, 0, 219, 1100, 1101, 1102,
	1103, 0, 1105, 0, 0, 219, 0, 2077, 0, 0,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2153, 0, 2154, 0, 0, 0, 2050, 0,
	0, 749, 748, 758, 759, 751, 752, 753, 754, 755,
	756, 757, 750, 0, 0, 761, 0, 0, 0, 0,
	0, 0, 1839, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 778, 698, 778, 0, 778, 2118, 2119,
	0, 202, 0, 554, 0, 554, 0, 0, 0, 0,
	0, 0, 0, 1381, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1393, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 1729, 0, 0, 1399, 1400, 0, 0,
	0, 0, 0, 952, 0, 0, 1395, 0, 0, 0,
	0, 1881, 0, 1883, 1745, 0, 0, 0, 0, 0,
	0, 0, 1036, 0, 458, 0, 0, 1036, 1036, 1036,
	1036, 0, 0, 1036, 1036, 1036, 1036, 1389, 1390, 1392,
	215, 0, 0, 1391, 1783, 466, 0, 0, 749, 748,
	758, 759, 751, 752, 753, 754, 755, 756, 757, 750,
	0, 0, 761, 1254, 1255, 0, 0, 0, 0, 1036,
	1036, 1036, 1036, 1263, 1978, 0, 0, 0, 0, 1951,
	1952, 0, 780, 0, 1397, 1386, 1385, 0, 195, 196,
	0, 0, 0, 698, 0, 219, 1387, 0, 760, 0,
	1967, 0, 0, 0, 698, 0, 0, 219, 0, 1388,
	0, 0, 1280, 0, 0, 1285, 0, 1288, 1289, 219,
	0, 0, 1832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 0, 0, 0, 0, 1300, 0, 1301,
	1302, 1303, 0, 780, 1994, 1397, 1386, 1385, 1995, 0,
	714, 0, 0, 0, 698, 0, 0, 1387, 0, 0,
	0, 0, 0, 0, 2006, 0, 554, 0, 0, 742,
	1388, 0, 1848, 0, 1323, 0, 0, 1328, 0, 0,
	1398, 0, 0, 1334, 0, 0, 698, 0, 0, 0,
	1336, 0, 697, 0, 0, 0, 779, 0, 1342, 1343,
	694, 1344, 1345, 554, 0, 0, 554, 0, 554, 0,
	554, 0, 554, 554, 760, 0, 0, 215, 1358, 1381,
	2056, 2057, 0, 0, 798, 0, 0, 0, 0, 1393,
	0, 2005, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1399, 1400, 1900, 1901, 0, 0, 0, 0,
	0, 1921, 1395, 749, 748, 758, 759, 751, 752, 753,
	754, 755, 756, 757, 750, 0, 0, 761, 0, 0,
	0, 1036, 0, 0, 0, 0, 0, 0, 0, 0,
	1381, 0, 0, 1389, 1390, 1392, 0, 0, 0, 1391,
	1393, 0, 0, 0, 780, 0, 1397, 1386, 1385, 1471,
	1472, 0, 0, 1399, 1400, 0, 0, 0, 1387, 0,
	1495, 0, 0, 1395, 0, 0, 0, 0, 0, 0,
	0, 1388, 780, 0, 1397, 1386, 1385, 0, 0, 0,
	0, 0, 0, 1036, 860, 920, 1387, 0, 1498, 1499,
	1335, 760, 857, 0, 1389, 1390, 1392, 0, 0, 1388,
	1391, 696, 0, 0, 0, 0, 0, 0, 953, 0,
	0, 1570, 0, 0, 779, 0, 0, 0, 0, 2009,
	698, 1783, 1522, 1497, 0, 1783, 1783, 1783, 1783, 1783,
	0, 987, 0, 0, 0, 0, 0, 0, 0, 1921,
	0, 2035, 698, 698, 549, 0, 0, 0, 749, 748,
	758, 759, 751, 752, 753, 754, 755, 756, 757, 750,
	0, 697, 761, 0, 0, 0, 0, 0, 0, 694,
	779, 0, 0, 1034, 0, 0, 1398, 0, 0, 0,
	0, 1381, 1056, 1087, 0, 0, 2061, 0, 0, 0,
	0, 1393, 0, 0, 0, 0, 0, 0, 0, 0,
	1783, 0, 0, 698, 1399, 1400, 0, 0, 0, 1381,
	0, 0, 0, 0, 1395, 0, 0, 0, 0, 1393,
	0, 0, 0, 0, 0, 2086, 2087, 2005, 0, 1783,
	0, 0, 1399, 1400, 0, 0, 0, 1398, 0, 0,
	0, 0, 1395, 859, 0, 1389, 1390, 1392, 0, 0,
	780, 1391, 1397, 1386, 1385, 865, 0, 0, 0, 0,
	0, 0, 1570, 0, 1387, 0, 0, 0, 0, 0,
	0, 0, 0, 1389, 1390, 1392, 0, 1388, 1036, 1391,
	0, 214, 0, 0, 0, 0, 458, 1036, 1999, 0,
	0, 0, 0, 0, 0, 0, 760, 62, 0, 0,
	860, 0, 2143, 0, 865, 221, 390, 0, 857, 0,
	0, 697, 393, 394, 0, 0, 0, 0, 0, 694,
	696, 0, 0, 2161, 2162, 2163, 213, 0, 217, 221,
	0, 221, 221, 0, 1213, 1217, 0, 381, 1704, 697,
	1224, 1225, 698, 698, 0, 0, 0, 694, 0, 0,
	0, 0, 388, 0, 376, 1726, 0, 0, 0, 0,
	0, 697, 377, 0, 0, 1731, 0, 0, 0, 694,
	1732, 0, 0, 1733, 1734, 0, 0, 1736, 1737, 1739,
	1741, 1743, 1267, 0, 0, 0, 0, 1381, 1398, 0,
	0, 0, 0, 697, 0, 0, 0, 1393, 0, 0,
	2143, 694, 0, 2216, 0, 698, 698, 698, 0, 0,
	1399, 1400, 1271, 0, 0, 0, 1398, 197, 698, 698,
	1395, 0, 0, 0, 0, 384, 0, 379, 389, 0,
	0, 0, 2143, 0, 865, 0, 0, 386, 385, 1568,
	198, 760, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 1389, 1390, 1392, 0, 0, 0, 1391, 0, 859,
	698, 0, 0, 0, 0, 0, 0, 2051, 0, 0,
	696, 749, 748, 758, 759, 751, 752, 753, 754, 755,
	756, 757, 750, 0, 0, 761, 0, 0, 1333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 696, 0,
	0, 0, 0, 0, 62, 0, 0, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 221, 0,
	696, 221, 221, 0, 62, 0, 1840, 1841, 0, 0,
	1844, 1845, 1846, 0, 202, 0, 749, 748, 758, 759,
	751, 752, 753, 754, 755, 756, 757, 750, 1417, 1217,
	761, 1925, 696, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 1869, 219, 219, 0, 0,
	0, 0, 0, 0, 382, 0, 45, 860, 0, 0,
	383, 0, 1879, 0, 717, 857, 0, 220, 0, 1927,
	0, 0, 0, 0, 1398, 0, 0, 221, 0, 697,
	697, 221, 0, 221, 221, 0, 0, 694, 694, 0,
	221, 0, 457, 0, 0, 221, 0, 221, 0, 0,
	221, 0, 221, 0, 0, 0, 0, 0, 0, 221,
	0, 779, 698, 0, 62, 698, 698, 0, 0, 695,
	0, 0, 0, 0, 0, 1889, 0, 0, 0, 1949,
	1502, 0, 0, 0, 391, 0, 392, 0, 0, 0,
	697, 195, 196, 0, 0, 1514, 1517, 0, 694, 0,
	0, 221, 0, 0, 0, 0, 0, 0, 197, 0,
	387, 0, 0, 0, 0, 0, 0, 1775, 0, 0,
	0, 0, 0, 219, 509, 0, 0, 220, 1538, 217,
	0, 198, 0, 0, 194, 199, 200, 1984, 0, 1985,
	1986, 1987, 1988, 1989, 0, 0, 221, 0, 1036, 0,
	221, 221, 0, 0, 1549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 220, 0, 217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 1567, 2030, 0, 696, 696,
	0, 0, 0, 62, 760, 219, 219, 0, 0, 0,
	221, 62, 0, 1573, 219, 1926, 692, 0, 0, 0,
	0, 858, 0, 0, 0, 1612, 0, 798, 197, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 2060, 860,
	697, 0, 0, 0, 0, 0, 0, 857, 694, 0,
	0, 198, 0, 0, 194, 199, 200, 0, 0, 696,
	0, 0, 698, 1646, 201, 0, 2073, 0, 197, 1299,
	1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592,
	1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
	1603, 198, 0, 1979, 194, 199, 200, 0, 695, 0,
	0, 0, 697, 697, 697, 1217, 0, 0, 1217, 1217,
	694, 694, 694, 0, 0, 697, 697, 779, 0, 779,
	0, 779, 0, 694, 694, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 219, 0, 0, 215, 219, 219,
	219, 219, 219, 0, 0, 202, 2127, 0, 0, 0,
	2029, 0, 219, 0, 0, 0, 1926, 697, 692, 221,
	0, 0, 195, 196, 0, 694, 0, 221, 0, 0,
	0, 1899, 62, 0, 201, 0, 221, 0, 0, 0,
	0, 0, 1748, 0, 2164, 202, 0, 0, 0, 1753,
	0, 0, 62, 0, 0, 0, 1759, 219, 859, 696,
	0, 0, 0, 220, 2176, 217, 0, 62, 0, 0,
	0, 0, 0, 219, 201, 0, 0, 0, 532, 2183,
	2184, 2185, 0, 0, 0, 0, 0, 2188, 220, 0,
	217, 0, 0, 0, 0, 692, 0, 858, 0, 0,
	0, 0, 219, 0, 0, 779, 779, 0, 695, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 696, 696, 696, 0, 0, 0, 0, 0, 0,
	1217, 1217, 195, 196, 696, 696, 695, 0, 2223, 2224,
	2225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 217, 197, 0, 0, 0, 695, 0,
	0, 0, 0, 0, 0, 457, 62, 2236, 220, 0,
	217, 0, 195, 196, 215, 0, 696, 198, 0, 197,
	194, 199, 200, 215, 220, 0, 1927, 0, 0, 697,
	695, 0, 697, 697, 0, 0, 0, 694, 0, 0,
	694, 694, 198, 0, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 1864, 1865, 1517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 765, 766, 767, 768,
	769, 770, 771, 0, 692, 0, 221, 0, 0, 774,
	0, 583, 197, 584, 0, 692, 0, 0, 221, 0,
	0, 573, 574, 0, 0, 1926, 0, 0, 0, 197,
	221, 693, 0, 0, 213, 198, 217, 0, 194, 199,
	200, 202, 0, 692, 0, 197, 0, 32, 0, 0,
	0, 0, 198, 0, 0, 194, 199, 200, 582, 0,
	0, 0, 0, 0, 0, 692, 202, 0, 198, 0,
	201, 194, 199, 200, 0, 0, 0, 0, 0, 62,
	0, 0, 1182, 0, 0, 0, 1194, 0, 599, 0,
	215, 0, 0, 0, 0, 201, 1184, 692, 0, 0,
	0, 0, 0, 0, 26, 27, 0, 20, 0, 0,
	0, 347, 0, 0, 0, 0, 597, 0, 696, 0,
	21, 696, 696, 0, 30, 197, 0, 0, 0, 202,
	691, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 22, 23, 858, 24, 202, 0, 198, 697,
	1996, 194, 199, 200, 0, 0, 0, 694, 201, 0,
	0, 0, 202, 0, 0, 0, 695, 695, 195, 196,
	0, 0, 0, 0, 235, 201, 1183, 774, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 195, 196, 0, 0, 0, 0, 0,
	0, 2046, 0, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1185, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 1193, 0, 0, 0, 695, 0, 0,
	0, 0, 0, 774, 0, 0, 0, 585, 0, 0,
	1050, 0, 202, 0, 0, 2072, 0, 0, 0, 0,
	0, 221, 0, 18, 0, 0, 195, 196, 0, 0,
	0, 586, 587, 1182, 2080, 0, 2081, 1194, 0, 0,
	0, 201, 0, 195, 196, 0, 0, 1184, 0, 0,
	0, 692, 44, 0, 45, 0, 62, 0, 0, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 692, 692, 0, 0, 0, 696, 0,
	0, 0, 0, 0, 588, 598, 594, 595, 592, 593,
	591, 590, 589, 600, 575, 576, 577, 578, 579, 581,
	0, 0, 572, 571, 580, 0, 0, 0, 0, 25,
	0, 814, 0, 822, 0, 0, 780, 0, 1397, 1386,
	1385, 28, 29, 0, 31, 2156, 0, 1183, 2157, 0,
	1387, 2159, 0, 0, 692, 0, 858, 695, 0, 195,
	196, 596, 0, 1388, 0, 0, 0, 0, 2169, 0,
	0, 0, 816, 0, 0, 0, 0, 0, 0, 0,
	1180, 2072, 0, 0, 0, 0, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 779, 0, 0, 0, 1231,
	0, 0, 1244, 0, 1246, 1247, 1248, 1249, 1250, 1251,
	0, 0, 0, 0, 0, 0, 0, 0, 2211, 695,
	695, 695, 0, 0, 0, 0, 2208, 779, 0, 0,
	0, 0, 695, 695, 0, 0, 0, 457, 0, 0,
	295, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	0, 305, 306, 0, 307, 308, 309, 311, 310, 0,
	1007, 817, 0, 0, 0, 0, 0, 0, 0, 253,
	815, 0, 0, 1381, 695, 821, 820, 0, 0, 0,
	0, 0, 0, 1393, 0, 824, 825, 0, 0, 0,
	0, 0, 0, 692, 692, 0, 1399, 1400, 0, 0,
	0, 823, 0, 765, 0, 0, 1395, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1389, 1390, 1392,
	0, 0, 0, 1391, 0, 0, 62, 62, 62, 62,
	62, 62, 0, 0, 0, 0, 692, 692, 692, 0,
	720, 1443, 0, 0, 0, 0, 0, 0, 0, 692,
	692, 0, 0, 0, 254, 0, 0, 719, 0, 0,
	0, 0, 718, 0, 0, 0, 0, 0, 0, 583,
	0, 584, 0, 0, 0, 0, 0, 0, 0, 573,
	574, 0, 0, 0, 0, 1422, 0, 0, 0, 509,
	62, 692, 213, 558, 555, 556, 560, 561, 562, 563,
	0, 0, 0, 559, 564, 565, 566, 721, 0, 0,
	0, 0, 716, 546, 0, 0, 582, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 695, 0, 0, 695,
	695, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 0, 0, 0, 0, 599, 0, 545, 0,
	0, 1058, 542, 547, 0, 0, 0, 1484, 1486, 1488,
	1398, 780, 0, 1397, 1386, 1385, 1491, 1492, 1493, 0,
	1496, 0, 0, 0, 597, 1387, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 1388, 0,
	0, 0, 1060, 0, 0, 0, 0, 221, 221, 0,
	0, 0, 62, 0, 0, 0, 198, 0, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 553,
	0, 0, 0, 1050, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2078, 2079, 62, 0, 0, 0, 1542,
	1543, 1544, 1545, 0, 0, 0, 0, 0, 0, 0,
	1069, 1075, 1073, 692, 0, 1070, 692, 692, 1068, 44,
	0, 1077, 0, 0, 1076, 1062, 1072, 1074, 1071, 1066,
	0, 1061, 0, 1079, 1078, 1080, 1059, 1082, 0, 0,
	0, 1086, 1083, 1085, 1084, 585, 1081, 0, 1381, 0,
	202, 0, 0, 0, 0, 1063, 1064, 0, 1393, 0,
	0, 0, 0, 0, 0, 0, 695, 552, 570, 586,
	587, 1399, 1400, 0, 221, 0, 1065, 1067, 814, 201,
	822, 1395, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 0, 0, 0, 0,
	568, 0, 62, 0, 0, 0, 0, 1647, 0, 0,
	0, 0, 1389, 1390, 1392, 0, 0, 0, 1391, 816,
	0, 0, 588, 598, 594, 595, 592, 593, 591, 590,
	589, 600, 575, 576, 577, 578, 579, 581, 0, 0,
	572, 571, 580, 0, 0, 0, 221, 221, 0, 0,
	0, 0, 0, 0, 0, 221, 221, 0, 0, 0,
	1694, 0, 1695, 62, 1696, 0, 0, 0, 0, 0,
	1699, 0, 1701, 0, 0, 0, 0, 195, 196, 596,
	0, 0, 0, 0, 0, 0, 0, 295, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 0, 0, 0,
	0, 0, 0, 692, 0, 0, 0, 826, 817, 0,
	0, 0, 0, 0, 0, 0, 253, 815, 0, 0,
	0, 0, 821, 820, 0, 780, 0, 1397, 1386, 1385,
	0, 0, 824, 825, 221, 0, 0, 0, 0, 1387,
	0, 0, 0, 0, 0, 0, 0, 0, 823, 0,
	0, 0, 1388, 0, 0, 1398, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 45,
	0, 221, 0, 0, 0, 221, 0, 0, 0, 221,
	221, 221, 221, 221, 0, 0, 780, 0, 1397, 1386,
	1385, 221, 0, 221, 0, 0, 0, 221, 949, 948,
	1387, 0, 0, 0, 62, 0, 1768, 0, 0, 0,
	0, 0, 62, 1388, 0, 0, 950, 0, 0, 62,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 0, 0, 0,
	0, 0, 1381, 0, 0, 0, 0, 0, 2117, 0,
	0, 0, 1393, 1847, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 1399, 1400, 0, 0, 0,
	0, 0, 0, 0, 0, 1395, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1873, 0, 0, 1874, 0, 1875, 0, 1876, 0, 1877,
	1878, 0, 0, 1381, 0, 0, 1389, 1390, 1392, 0,
	0, 0, 1391, 1393, 0, 951, 0, 0, 0, 62,
	0, 0, 0, 1773, 0, 0, 1399, 1400, 0, 0,
	0, 0, 0, 0, 0, 0, 1395, 0, 2150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1389, 1390, 1392,
	0, 0, 62, 1391, 0, 0, 179, 168, 0, 127,
	181, 95, 115, 190, 117, 118, 153, 74, 136, 0,
	112, 93, 0, 0, 0, 98, 67, 107, 68, 96,
	129, 0, 94, 0, 1626, 139, 0, 57, 0, 188,
	0, 144, 0, 0, 0, 0, 221, 131, 172, 134,
	163, 126, 154, 83, 143, 183, 113, 149, 184, 0,
	1409, 0, 44, 0, 1407, 0, 0, 0, 2150, 0,
	0, 0, 0, 0, 148, 178, 109, 80, 193, 1398,
	152, 66, 146, 0, 0, 72, 75, 189, 176, 103,
	102, 1406, 0, 0, 0, 0, 0, 0, 130, 135,
	159, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	1405, 0, 0, 0, 99, 0, 142, 0, 0, 0,
	79, 1624, 0, 1627, 0, 0, 0, 82, 0, 100,
	160, 0, 63, 0, 0, 0, 0, 166, 173, 125,
	1398, 0, 177, 122, 121, 0, 0, 0, 0, 0,
	0, 114, 60, 197, 191, 0, 0, 180, 132, 171,
	97, 108, 277, 104, 0, 0, 0, 105, 106, 141,
	155, 0, 0, 0, 0, 0, 198, 162, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 64, 101, 164, 167, 87, 151, 76,
	110, 157, 111, 133, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	0, 305, 306, 0, 307, 308, 309, 311, 310, 278,
	279, 280, 284, 282, 281, 283, 255, 257, 0, 253,
	256, 262, 258, 259, 260, 274, 263, 264, 265, 266,
	1625, 268, 269, 270, 271, 272, 273, 275, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 201,
	70, 91, 174, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 45, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 90, 84, 85, 137, 138, 185, 186,
	187, 161, 81, 0, 0, 88, 89, 0, 169, 0,
	0, 0, 140, 0, 254, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 116, 65, 120, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 0, 124, 119,
	145, 147, 156, 165, 175, 182, 158, 195, 196, 179,
	168, 0, 127, 181, 95, 115, 190, 117, 118, 153,
	74, 136, 0, 112, 93, 0, 0, 0, 98, 67,
	107, 68, 96, 129, 0, 94, 0, 170, 139, 0,
	57, 0, 188, 0, 144, 0, 0, 0, 0, 0,
	131, 172, 134, 163, 126, 154, 83, 143, 183, 113,
	149, 184, 0, 0, 0, 44, 0, 56, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 178, 109,
	80, 193, 0, 152, 66, 146, 0, 0, 72, 75,
	189, 176, 103, 102, 0, 0, 0, 0, 0, 0,
	0, 130, 135, 159, 123, 0, 0, 0, 0, 0,
	1535, 0, 0, 0, 0, 0, 0, 99, 0, 142,
	0, 0, 0, 79, 73, 0, 128, 0, 0, 0,
	82, 0, 100, 160, 0, 63, 0, 0, 0, 0,
	166, 173, 374, 0, 0, 177, 122, 121, 366, 0,
	365, 1536, 369, 370, 373, 60, 197, 191, 0, 0,
	367, 375, 171, 97, 108, 0, 104, 0, 0, 0,
	105, 106, 141, 155, 0, 0, 0, 0, 0, 198,
	162, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 64, 101, 164, 167,
	87, 151, 76, 110, 157, 111, 133, 92, 0, 1069,
	1075, 1073, 0, 0, 1070, 0, 0, 1068, 0, 0,
	1077, 0, 0, 1076, 1062, 1072, 1074, 1071, 1066, 0,
	1061, 0, 1079, 1078, 1080, 1059, 1082, 0, 0, 0,
	1086, 1083, 1085, 1084, 0, 1081, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 1064, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 1067, 0, 0, 371,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 201, 70, 91, 174, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 45, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 90, 84, 85, 137,
	138, 185, 186, 187, 161, 81, 0, 0, 88, 89,
	0, 169, 0, 0, 0, 140, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 116, 65, 120,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 124, 119, 145, 147, 156, 165, 175, 182, 158,
	195, 196, 0, 368, 179, 168, 0, 127, 181, 95,
	115, 190, 117, 118, 153, 74, 136, 0, 112, 93,
	0, 0, 0, 98, 67, 107, 68, 96, 129, 0,
	94, 0, 170, 139, 0, 57, 0, 188, 0, 144,
	0, 0, 0, 0, 0, 131, 172, 134, 163, 126,
	154, 83, 143, 183, 113, 149, 184, 0, 1409, 0,
	44, 0, 1407, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 178, 109, 80, 193, 0, 152, 66,
	146, 0, 0, 72, 75, 189, 176, 103, 102, 1406,
	0, 0, 0, 0, 0, 0, 130, 135, 159, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 1405, 0,
	0, 0, 99, 0, 142, 0, 0, 0, 79, 73,
	0, 128, 400, 0, 0, 82, 0, 100, 160, 0,
	63, 0, 0, 0, 0, 166, 173, 125, 0, 0,
	177, 122, 121, 0, 0, 0, 0, 0, 0, 114,
	60, 197, 191, 0, 0, 180, 132, 171, 97, 108,
	0, 104, 0, 0, 0, 105, 106, 141, 155, 0,
	0, 0, 0, 0, 198, 162, 0, 194, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 64, 101, 164, 167, 87, 151, 76, 110, 157,
	111, 133, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 201, 70, 91,
	174, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	45, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 90, 84, 85, 137, 138, 185, 186, 187, 161,
	81, 0, 0, 88, 89, 0, 169, 0, 0, 0,
	140, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 116, 65, 120, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 0, 124, 119, 145, 147,
	156, 165, 175, 182, 158, 195, 196, 179, 168, 0,
	127, 181, 95, 115, 190, 117, 118, 153, 74, 136,
	0, 112, 93, 0, 0, 0, 98, 67, 107, 68,
	96, 129, 0, 94, 0, 170, 139, 0, 0, 0,
	188, 0, 144, 0, 0, 0, 0, 0, 131, 172,
	134, 163, 126, 154, 83, 143, 183, 113, 149, 184,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 178, 109, 80, 193,
	0, 152, 66, 146, 0, 0, 72, 75, 189, 176,
	103, 102, 0, 0, 0, 0, 0, 0, 0, 130,
	135, 159, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 142, 0, 0,
	0, 79, 73, 780, 128, 1397, 1386, 1385, 82, 0,
	100, 160, 0, 63, 0, 0, 0, 1387, 166, 173,
	125, 0, 0, 177, 122, 121, 0, 0, 0, 0,
	1388, 0, 114, 60, 197, 191, 0, 0, 180, 132,
	171, 97, 108, 0, 104, 0, 0, 0, 105, 106,
	141, 155, 0, 0, 0, 0, 0, 198, 162, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 64, 101, 164, 167, 87, 151,
	76, 110, 157, 111, 133, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1792, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1381, 1800, 0, 0, 0, 0, 0, 0, 0, 0,
	1393, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1399, 1400, 0, 0, 0, 0, 0,
	0, 0, 0, 1395, 0, 69, 0, 0, 0, 0,
	201, 70, 91, 174, 0, 0, 0, 0, 1801, 1799,
	1795, 1794, 0, 45, 0, 0, 150, 0, 0, 0,
	0, 1797, 0, 0, 1389, 1390, 1392, 0, 0, 0,
	1391, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1367, 0, 86, 90, 84, 85, 137, 138, 185,
	186, 187, 161, 81, 0, 0, 88, 89, 0, 169,
	0, 0, 0, 140, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 116, 65, 120, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 0, 124,
	119, 145, 147, 156, 165, 175, 182, 158, 195, 196,
	179, 168, 0, 127, 181, 95, 115, 190, 117, 118,
	153, 74, 136, 0, 112, 93, 0, 0, 0, 98,
	67, 107, 68, 96, 129, 0, 94, 0, 170, 139,
	0, 57, 0, 188, 0, 144, 0, 0, 0, 0,
	0, 131, 172, 134, 163, 126, 154, 83, 143, 183,
	113, 149, 184, 0, 1409, 0, 44, 0, 1407, 0,
	0, 0, 0, 0, 0, 0, 0, 1398, 148, 178,
	109, 80, 193, 0, 152, 66, 146, 0, 0, 72,
	75, 189, 176, 103, 102, 1406, 0, 0, 0, 0,
	0, 0, 130, 135, 159, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 1405, 0, 0, 0, 99, 0,
	142, 0, 0, 0, 79, 73, 780, 128, 1397, 1386,
	1385, 82, 0, 100, 160, 0, 63, 0, 0, 0,
	1387, 166, 173, 125, 0, 0, 177, 122, 121, 0,
	0, 0, 0, 1388, 0, 114, 60, 197, 191, 0,
	0, 180, 132, 171, 97, 108, 0, 104, 0, 0,
	0, 105, 106, 141, 155, 0, 0, 0, 0, 0,
	198, 162, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 64, 101, 164,
	167, 87, 151, 76, 110, 157, 111, 133, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2002, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1393, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1399, 1400, 0, 0,
	0, 0, 0, 0, 0, 0, 1395, 0, 69, 0,
	0, 0, 0, 201, 70, 91, 174, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 45, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 1389, 1390, 1392,
	0, 0, 0, 1391, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1773, 0, 86, 90, 84, 85,
	137, 138, 185, 186, 187, 161, 81, 0, 0, 88,
	89, 0, 169, 0, 0, 0, 140, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 116, 65,
	120, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 0, 124, 119, 145, 147, 156, 165, 175, 182,
	158, 195, 196, 179, 168, 0, 127, 181, 95, 115,
	190, 117, 118, 153, 74, 136, 0, 112, 93, 0,
	0, 0, 98, 67, 107, 68, 96, 129, 0, 94,
	0, 170, 139, 0, 0, 0, 188, 0, 144, 0,
	0, 0, 0, 0, 131, 172, 134, 163, 126, 154,
	83, 143, 183, 113, 149, 184, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1398, 148, 178, 109, 80, 193, 0, 152, 66, 146,
	0, 0, 72, 75, 189, 176, 103, 102, 0, 0,
	0, 0, 0, 0, 0, 130, 135, 159, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 142, 0, 0, 0, 79, 73, 780,
	128, 1397, 1386, 1385, 82, 0, 100, 160, 0, 63,
	0, 0, 0, 1387, 166, 173, 125, 0, 0, 177,
	122, 121, 0, 0, 0, 0, 1388, 0, 114, 60,
	197, 191, 0, 0, 180, 132, 171, 97, 108, 0,
	104, 0, 0, 0, 105, 106, 141, 155, 0, 0,
	0, 0, 0, 198, 162, 0, 194, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	64, 101, 164, 167, 87, 151, 76, 110, 157, 111,
	133, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1934, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1381, 1800, 0, 0,
	0, 0, 0, 0, 0, 0, 1393, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1399,
	1400, 0, 0, 0, 0, 0, 0, 0, 0, 1395,
	0, 69, 0, 0, 0, 0, 201, 70, 91, 174,
	0, 0, 0, 0, 1801, 1799, 0, 0, 0, 45,
	0, 0, 150, 0, 0, 0, 0, 1797, 0, 0,
	1389, 1390, 1392, 0, 0, 0, 1391, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	90, 84, 85, 137, 138, 185, 186, 187, 161, 81,
	0, 0, 88, 89, 0, 169, 0, 0, 0, 140,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 116, 65, 120, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 0, 124, 119, 145, 147, 156,
	165, 175, 182, 158, 195, 196, 179, 168, 0, 127,
	181, 95, 115, 190, 117, 118, 153, 74, 136, 0,
	112, 93, 0, 0, 0, 98, 67, 107, 68, 96,
	129, 0, 94, 0, 170, 139, 0, 57, 0, 188,
	0, 144, 0, 0, 0, 0, 0, 131, 172, 134,
	163, 126, 154, 83, 143, 183, 113, 149, 184, 0,
	0, 0, 44, 0, 56, 0, 0, 0, 0, 0,
	0, 0, 0, 1398, 148, 178, 109, 80, 193, 0,
	152, 66, 146, 0, 0, 72, 75, 189, 176, 103,
	102, 0, 0, 0, 0, 0, 0, 0, 130, 135,
	159, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 142, 0, 0, 0,
	79, 73, 0, 128, 0, 0, 0, 82, 0, 100,
	160, 0, 63, 0, 0, 0, 0, 166, 173, 125,
	0, 0, 177, 122, 121, 0, 670, 672, 0, 0,
	0, 373, 60, 197, 191, 0, 0, 674, 132, 171,
	97, 108, 0, 104, 0, 0, 0, 105, 106, 141,
	155, 0, 0, 0, 0, 0, 198, 162, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 64, 101, 164, 167, 87, 151, 76,
	110, 157, 111, 133, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 201,
	70, 91, 174, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 45, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 90, 84, 85, 137, 138, 185, 186,
	187, 161, 81, 0, 0, 88, 89, 0, 169, 0,
	0, 0, 140, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 116, 65, 120, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 0, 124, 119,
	145, 147, 156, 165, 175, 182, 158, 195, 196, 179,
	168, 0, 127, 181, 95, 115, 190, 117, 118, 153,
	74, 136, 0, 112, 93, 0, 0, 0, 98, 67,
	107, 68, 96, 129, 0, 94, 0, 170, 139, 0,
	0, 0, 188, 0, 144, 0, 0, 0, 0, 0,
	131, 172, 134, 163, 126, 154, 83, 143, 183, 113,
	149, 184, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 178, 109,
	80, 193, 0, 152, 66, 146, 0, 0, 72, 75,
	189, 176, 103, 102, 0, 0, 0, 0, 0, 0,
	0, 130, 135, 159, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 142,
	0, 0, 0, 79, 73, 0, 128, 0, 0, 0,
	82, 0, 100, 160, 0, 63, 0, 0, 0, 0,
	166, 173, 125, 0, 0, 177, 122, 121, 0, 0,
	0, 0, 0, 0, 114, 60, 197, 191, 0, 0,
	180, 132, 171, 97, 108, 0, 104, 0, 0, 0,
	105, 106, 141, 155, 0, 0, 0, 0, 0, 198,
	162, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 64, 101, 164, 167,
	87, 151, 76, 110, 157, 111, 133, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1800, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 201, 70, 91, 174, 0, 0, 0, 0,
	1801, 1799, 0, 0, 0, 45, 0, 0, 150, 0,
	0, 0, 0, 1797, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 90, 84, 85, 137,
	138, 185, 186, 187, 161, 81, 0, 0, 88, 89,
	0, 169, 0, 0, 0, 140, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 116, 65, 120,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 124, 119, 145, 147, 156, 165, 175, 182, 158,
	195, 196, 179, 168, 0, 127, 181, 95, 115, 190,
	117, 118, 153, 74, 136, 0, 112, 93, 0, 0,
	0, 98, 67, 107, 68, 96, 129, 0, 94, 0,
	170, 139, 0, 0, 0, 188, 0, 144, 0, 0,
	0, 0, 0, 131, 172, 134, 163, 126, 154, 83,
	143, 183, 113, 149, 184, 0, 0, 0, 213, 0,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 178, 109, 80, 193, 0, 152, 66, 146, 0,
	0, 72, 75, 189, 176, 103, 102, 0, 0, 0,
	0, 0, 0, 0, 130, 135, 159, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1527, 0,
	99, 0, 142, 0, 0, 0, 79, 73, 0, 128,
	0, 0, 0, 82, 0, 100, 160, 0, 63, 0,
	0, 0, 0, 166, 173, 125, 0, 0, 177, 122,
	121, 0, 0, 0, 0, 0, 0, 114, 60, 197,
	191, 0, 0, 180, 132, 171, 97, 108, 0, 104,
	0, 0, 0, 105, 106, 141, 155, 0, 0, 0,
	0, 0, 198, 162, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 64,
	101, 164, 167, 87, 151, 76, 110, 157, 111, 133,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 201, 70, 91, 174, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 45, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 90,
	84, 85, 137, 138, 185, 186, 187, 161, 81, 0,
	0, 88, 89, 0, 169, 0, 0, 0, 140, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	116, 65, 120, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 0, 124, 119, 145, 147, 156, 165,
	175, 182, 158, 195, 196, 179, 168, 0, 127, 181,
	95, 115, 190, 117, 118, 153, 74, 136, 0, 112,
	93, 0, 0, 0, 98, 67, 107, 68, 96, 129,
	0, 94, 0, 170, 139, 0, 0, 0, 188, 0,
	144, 0, 0, 0, 0, 0, 131, 172, 134, 163,
	126, 154, 83, 143, 183, 113, 149, 184, 0, 0,
	0, 44, 0, 910, 0, 911, 0, 0, 0, 0,
	0, 0, 0, 148, 178, 109, 80, 193, 0, 152,
	66, 146, 0, 0, 72, 75, 189, 176, 103, 102,
	0, 0, 0, 0, 0, 0, 0, 130, 135, 159,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 142, 0, 0, 0, 79,
	73, 0, 128, 0, 0, 0, 82, 0, 100, 160,
	0, 63, 0, 0, 0, 0, 166, 173, 125, 0,
	0, 177, 122, 121, 0, 0, 0, 0, 0, 0,
	114, 60, 197, 191, 0, 0, 180, 132, 171, 97,
	108, 0, 104, 0, 0, 0, 105, 106, 141, 155,
	0, 0, 0, 0, 0, 198, 162, 0, 194, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 64, 101, 164, 167, 87, 151, 76, 110,
	157, 111, 133, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 201, 70,
	91, 174, 0, 0, 0, 0, 0, 59, 0, 0,
	0, 45, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 90, 84, 85, 137, 138, 185, 186, 187,
	161, 81, 0, 0, 88, 89, 0, 169, 0, 0,
	0, 140, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 116, 65, 120, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 0, 124, 119, 145,
	147, 156, 165, 175, 182, 158, 195, 196, 179, 168,
	0, 127, 181, 95, 115, 190, 117, 118, 153, 74,
	136, 0, 112, 93, 0, 0, 0, 98, 67, 107,
	68, 96, 129, 0, 94, 0, 170, 139, 0, 57,
	0, 188, 0, 144, 0, 0, 0, 0, 0, 131,
	172, 134, 163, 126, 154, 83, 143, 183, 113, 149,
	184, 0, 0, 0, 44, 0, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 178, 109, 80,
	193, 0, 152, 66, 146, 0, 0, 72, 75, 189,
	176, 103, 102, 0, 0, 0, 0, 0, 0, 0,
	130, 135, 159, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 142, 0,
	0, 0, 79, 73, 0, 128, 0, 0, 0, 82,
	0, 100, 160, 0, 63, 0, 0, 0, 0, 166,
	173, 125, 0, 0, 177, 122, 121, 0, 0, 0,
	0, 0, 0, 114, 60, 197, 191, 0, 0, 180,
	132, 171, 97, 108, 0, 104, 0, 0, 0, 105,
	106, 141, 155, 0, 0, 0, 0, 0, 198, 162,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 64, 101, 164, 167, 87,
	151, 76, 110, 157, 111, 133, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 201, 70, 91, 174, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 45, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 90, 84, 85, 137, 138,
	185, 186, 187, 161, 81, 0, 0, 88, 89, 0,
	169, 0, 0, 0, 140, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 116, 65, 120, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 0,
	124, 119, 145, 147, 156, 165, 175, 182, 158, 195,
	196, 179, 168, 0, 127, 181, 95, 115, 190, 117,
	118, 153, 74, 136, 0, 112, 93, 0, 0, 0,
	98, 67, 107, 68, 96, 129, 0, 94, 0, 170,
	139, 0, 0, 0, 188, 0, 144, 0, 0, 0,
	0, 0, 131, 172, 134, 163, 126, 154, 83, 143,
	183, 113, 149, 184, 0, 490, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 148,
	178, 109, 80, 193, 0, 152, 66, 146, 0, 0,
	72, 75, 189, 176, 103, 102, 0, 0, 0, 0,
	0, 0, 0, 130, 135, 159, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 142, 0, 0, 0, 79, 73, 0, 128, 0,
	0, 0, 82, 0, 100, 160, 0, 63, 0, 0,
	0, 0, 166, 173, 125, 0, 0, 177, 122, 121,
	0, 0, 0, 0, 0, 0, 114, 60, 197, 191,
	0, 0, 180, 132, 171, 97, 108, 0, 104, 0,
	0, 0, 105, 106, 141, 155, 0, 0, 0, 0,
	0, 198, 162, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 64, 101,
	164, 167, 87, 151, 76, 110, 157, 111, 133, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 201, 70, 91, 174, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 45, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 90, 84,
	85, 137, 138, 185, 186, 187, 161, 81, 0, 0,
	88, 89, 0, 169, 0, 0, 0, 140, 0, 0,
	0, 192, 0, 0, 0, 0, 0, 0, 0, 116,
	65, 120, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 0, 124, 119, 145, 147, 156, 165, 175,
	182, 158, 195, 196, 179, 168, 0, 127, 181, 95,
	115, 190, 117, 118, 153, 74, 136, 0, 112, 93,
	0, 0, 0, 98, 67, 107, 68, 96, 129, 0,
	94, 0, 170, 139, 0, 0, 0, 188, 0, 144,
	0, 0, 0, 0, 0, 131, 172, 134, 163, 126,
	154, 83, 143, 183, 113, 149, 184, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 178, 109, 80, 193, 0, 152, 66,
	146, 0, 0, 72, 75, 189, 176, 103, 102, 0,
	0, 0, 0, 0, 0, 0, 130, 135, 159, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1872, 0, 99, 0, 142, 0, 0, 0, 79, 73,
	0, 128, 0, 0, 0, 82, 0, 100, 160, 0,
	63, 0, 0, 0, 0, 166, 173, 125, 0, 0,
	177, 122, 121, 0, 0, 0, 0, 0, 0, 114,
	60, 197, 191, 0, 0, 180, 132, 171, 97, 108,
	0, 104, 0, 0, 0, 105, 106, 141, 155, 0,
	0, 0, 0, 0, 198, 162, 0, 194, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 64, 101, 164, 167, 87, 151, 76, 110, 157,
	111, 133, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 201, 70, 91,
	174, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	45, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 90, 84, 85, 137, 138, 185, 186, 187, 161,
	81, 0, 0, 88, 89, 0, 169, 0, 0, 0,
	140, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 116, 65, 120, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 0, 124, 119, 145, 147,
	156, 165, 175, 182, 158, 195, 196, 179, 168, 0,
	127, 181, 95, 115, 190, 117, 118, 153, 74, 136,
	0, 112, 93, 0, 0, 0, 98, 67, 107, 68,
	96, 129, 0, 94, 0, 170, 139, 0, 0, 0,
	188, 0, 144, 0, 0, 0, 0, 0, 131, 172,
	134, 163, 126, 154, 83, 143, 183, 113, 149, 184,
	0, 0, 0, 213, 0, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 178, 109, 80, 193,
	0, 152, 66, 146, 0, 0, 72, 75, 189, 176,
	103, 102, 0, 0, 0, 0, 0, 0, 0, 130,
	135, 159, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 142, 0, 0,
	0, 79, 73, 0, 128, 0, 0, 0, 82, 0,
	100, 160, 0, 63, 0, 0, 0, 0, 166, 173,
	125, 0, 0, 177, 122, 121, 0, 0, 0, 0,
	0, 0, 114, 60, 197, 191, 0, 0, 180, 132,
	171, 97, 108, 0, 104, 0, 0, 0, 105, 106,
	141, 155, 0, 0, 0, 0, 0, 198, 162, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 64, 101, 164, 167, 87, 151,
	76, 110, 157, 111, 133, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	201, 70, 91, 174, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 45, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 90, 84, 85, 137, 138, 185,
	186, 187, 161, 81, 0, 0, 88, 89, 0, 169,
	0, 0, 0, 140, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 116, 65, 120, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 0, 124,
	119, 145, 147, 156, 165, 175, 182, 158, 195, 196,
	179, 168, 0, 127, 181, 95, 115, 190, 117, 118,
	153, 74, 136, 0, 112, 93, 0, 0, 0, 98,
	67, 107, 68, 96, 129, 0, 94, 0, 170, 139,
	0, 0, 0, 188, 0, 144, 0, 0, 0, 0,
	0, 131, 172, 134, 163, 126, 154, 83, 143, 183,
	113, 149, 184, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 178,
	109, 80, 193, 0, 152, 66, 146, 0, 0, 72,
	75, 189, 176, 103, 102, 685, 0, 0, 0, 0,
	0, 0, 130, 135, 159, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	142, 0, 0, 0, 79, 73, 0, 128, 0, 0,
	0, 82, 0, 100, 160, 0, 63, 0, 0, 0,
	0, 166, 173, 125, 0, 0, 177, 122, 121, 0,
	0, 0, 0, 0, 0, 114, 60, 197, 191, 0,
	0, 180, 132, 171, 97, 108, 0, 104, 0, 0,
	0, 105, 106, 141, 155, 0, 0, 0, 0, 0,
	198, 162, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 64, 101, 164,
	167, 87, 151, 76, 110, 157, 111, 133, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 201, 70, 91, 174, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 45, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 90, 84, 85,
	137, 138, 185, 186, 187, 161, 81, 0, 0, 88,
	89, 0, 169, 0, 0, 0, 140, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 116, 65,
	120, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 0, 124, 119, 145, 147, 156, 165, 175, 182,
	158, 195, 196, 179, 168, 0, 127, 181, 95, 115,
	190, 117, 118, 153, 74, 136, 0, 112, 93, 0,
	0, 0, 98, 67, 107, 68, 96, 129, 0, 94,
	0, 170, 139, 0, 0, 0, 188, 0, 144, 0,
	0, 0, 0, 0, 131, 172, 134, 163, 126, 154,
	83, 143, 183, 113, 149, 184, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 178, 109, 80, 193, 0, 152, 66, 146,
	0, 0, 72, 75, 189, 176, 103, 102, 0, 0,
	0, 0, 0, 0, 0, 130, 135, 159, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 142, 0, 0, 0, 79, 73, 0,
	128, 0, 0, 0, 82, 0, 100, 160, 0, 63,
	0, 0, 0, 0, 166, 173, 125, 0, 0, 177,
	122, 121, 0, 0, 0, 0, 0, 0, 114, 60,
	197, 191, 0, 0, 180, 132, 171, 97, 108, 0,
	104, 0, 0, 0, 105, 106, 141, 155, 0, 0,
	0, 0, 0, 198, 162, 0, 194, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	64, 101, 164, 167, 87, 151, 76, 110, 157, 111,
	133, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 201, 70, 91, 174,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 45,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	90, 84, 85, 137, 138, 185, 186, 187, 161, 81,
	0, 0, 88, 89, 0, 169, 0, 0, 0, 140,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 116, 65, 120, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 0, 124, 119, 145, 147, 156,
	165, 175, 182, 158, 195, 196, 179, 2147, 0, 127,
	181, 95, 115, 190, 117, 118, 153, 74, 136, 0,
	112, 93, 0, 0, 0, 98, 67, 107, 68, 96,
	129, 0, 94, 0, 170, 139, 0, 0, 0, 188,
	0, 144, 0, 0, 0, 0, 0, 131, 172, 134,
	163, 126, 154, 83, 143, 183, 113, 149, 184, 509,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 178, 109, 80, 193, 0,
	152, 66, 146, 0, 0, 72, 75, 189, 176, 103,
	102, 0, 0, 0, 0, 0, 0, 0, 130, 135,
	159, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 142, 0, 0, 0,
	79, 73, 0, 128, 0, 0, 0, 82, 0, 100,
	160, 0, 63, 0, 0, 0, 0, 166, 173, 125,
	0, 0, 177, 122, 121, 0, 0, 0, 0, 0,
	0, 114, 0, 197, 191, 0, 0, 180, 132, 171,
	97, 108, 0, 104, 0, 0, 0, 105, 106, 141,
	155, 0, 0, 0, 0, 0, 198, 162, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 64, 101, 164, 167, 87, 151, 76,
	110, 157, 111, 133, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 201,
	70, 91, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 90, 84, 85, 137, 138, 185, 186,
	187, 161, 81, 0, 0, 88, 89, 0, 169, 0,
	0, 0, 140, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 116, 65, 120, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 0, 124, 119,
	145, 147, 156, 165, 175, 182, 158, 195, 196, 179,
	168, 0, 127, 181, 95, 115, 190, 117, 118, 153,
	74, 136, 0, 112, 93, 0, 0, 0, 98, 67,
	107, 68, 96, 129, 0, 94, 0, 170, 139, 0,
	0, 0, 188, 0, 144, 0, 0, 0, 0, 0,
	131, 172, 134, 163, 126, 154, 83, 143, 183, 113,
	149, 184, 0, 0, 0, 213, 0, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 178, 109,
	80, 193, 0, 152, 66, 146, 0, 0, 72, 75,
	189, 176, 103, 102, 0, 0, 0, 0, 0, 0,
	0, 130, 135, 159, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 142,
	0, 0, 0, 79, 73, 0, 128, 0, 0, 0,
	82, 0, 100, 160, 0, 63, 0, 0, 0, 0,
	166, 173, 125, 0, 0, 177, 122, 121, 0, 0,
	0, 0, 0, 0, 114, 0, 197, 191, 0, 0,
	180, 132, 171, 97, 108, 0, 104, 0, 0, 0,
	105, 106, 141, 155, 0, 0, 0, 0, 0, 198,
	162, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 64, 101, 164, 167,
	87, 151, 76, 110, 157, 111, 133, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 201, 70, 91, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 90, 84, 85, 137,
	138, 185, 186, 187, 161, 81, 0, 0, 88, 89,
	0, 169, 0, 0, 0, 140, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 116, 65, 120,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 124, 119, 145, 147, 156, 165, 175, 182, 158,
	195, 196, 179, 168, 0, 127, 181, 95, 115, 190,
	117, 118, 153, 74, 136, 0, 112, 93, 0, 0,
	0, 98, 67, 107, 68, 96, 129, 0, 94, 0,
	170, 139, 0, 0, 0, 188, 0, 144, 0, 0,
	0, 0, 0, 131, 172, 134, 163, 126, 154, 83,
	143, 183, 113, 149, 184, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 178, 109, 80, 193, 0, 152, 66, 146, 0,
	0, 72, 75, 189, 176, 103, 102, 0, 0, 0,
	0, 0, 0, 0, 130, 135, 159, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 142, 0, 0, 0, 79, 73, 0, 128,
	0, 0, 0, 82, 0, 100, 160, 0, 63, 0,
	0, 0, 0, 166, 173, 125, 0, 0, 177, 122,
	121, 0, 0, 0, 0, 0, 0, 114, 0, 197,
	191, 0, 0, 180, 132, 171, 97, 108, 0, 104,
	0, 0, 0, 105, 106, 141, 155, 0, 0, 0,
	0, 0, 198, 162, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 64,
	101, 164, 167, 87, 151, 76, 110, 157, 111, 133,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 201, 70, 91, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 90,
	84, 85, 137, 138, 185, 186, 187, 161, 81, 0,
	0, 88, 89, 0, 169, 0, 0, 0, 140, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	116, 65, 120, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 0, 124, 119, 145, 147, 156, 165,
	175, 182, 158, 195, 196, 179, 168, 0, 127, 181,
	95, 115, 190, 117, 118, 153, 74, 136, 0, 112,
	93, 0, 0, 0, 98, 67, 107, 68, 96, 129,
	0, 94, 0, 170, 139, 0, 0, 0, 188, 0,
	144, 0, 0, 0, 0, 0, 131, 172, 134, 163,
	126, 154, 83, 143, 183, 113, 149, 184, 0, 0,
	0, 220, 0, 217, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 178, 109, 80, 193, 0, 152,
	66, 146, 0, 0, 72, 75, 189, 176, 103, 102,
	0, 0, 0, 0, 0, 0, 0, 130, 135, 159,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 142, 0, 0, 0, 79,
	73, 0, 128, 0, 0, 0, 82, 0, 100, 160,
	0, 63, 0, 0, 0, 0, 166, 173, 125, 0,
	0, 177, 122, 121, 0, 0, 0, 0, 0, 0,
	114, 0, 197, 191, 0, 0, 180, 132, 171, 97,
	108, 0, 104, 0, 0, 0, 105, 106, 141, 155,
	0, 0, 0, 0, 0, 198, 162, 0, 194, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 64, 101, 164, 167, 87, 151, 76, 110,
	157, 111, 133, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 201, 70,
	91, 174, 0, 0, 780, 0, 1397, 1386, 1385, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 1387, 0,
	0, 0, 0, 0, 0, 780, 0, 1397, 1386, 1385,
	0, 1388, 0, 0, 0, 0, 0, 0, 0, 1387,
	0, 86, 90, 84, 85, 137, 138, 185, 186, 187,
	161, 81, 1388, 0, 88, 89, 0, 169, 0, 0,
	0, 140, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 276, 0, 116, 65, 120, 0, 0, 0, 0,
	0, 720, 0, 77, 78, 0, 1997, 124, 119, 145,
	147, 156, 165, 175, 182, 158, 195, 196, 719, 44,
	0, 0, 0, 718, 0, 0, 0, 1892, 0, 0,
	583, 0, 584, 0, 0, 0, 0, 0, 0, 0,
	573, 574, 0, 0, 0, 0, 0, 0, 2044, 0,
	509, 0, 0, 213, 558, 555, 556, 560, 561, 562,
	563, 1381, 0, 0, 559, 564, 565, 566, 721, 2045,
	0, 1393, 0, 716, 546, 0, 0, 582, 261, 0,
	285, 0, 1381, 0, 1399, 1400, 0, 0, 0, 0,
	0, 0, 1393, 0, 1395, 0, 0, 0, 0, 0,
	0, 543, 544, 0, 0, 1399, 1400, 599, 0, 545,
	0, 0, 541, 542, 547, 1395, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 1389, 1390, 1392, 0, 0,
	0, 1391, 0, 0, 0, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 1389, 1390, 1392, 0,
	0, 0, 1391, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	553, 0, 0, 0, 0, 0, 0, 295, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 0, 305, 306,
	0, 307, 308, 309, 311, 310, 278, 279, 280, 284,
	282, 281, 283, 255, 257, 0, 253, 256, 262, 258,
	259, 260, 274, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 275, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 585, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 1398, 45,
	0, 0, 0, 0, 0, 0, 0, 0, 552, 570,
	586, 587, 0, 0, 0, 0, 0, 0, 0, 1398,
	201, 780, 0, 1397, 1386, 1385, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 1387, 0, 0, 0, 0,
	0, 568, 0, 0, 0, 0, 0, 0, 1388, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 588, 598, 594, 595, 592, 593, 591,
	590, 589, 600, 575, 576, 577, 578, 579, 581, 0,
	0, 572, 571, 580, 720, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 949, 948, 0, 0, 0, 1030,
	0, 719, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 0, 950, 583, 0, 584, 0, 0, 195, 196,
	596, 0, 0, 573, 574, 0, 0, 0, 0, 0,
	0, 0, 0, 509, 0, 0, 213, 558, 555, 556,
	560, 561, 562, 563, 0, 0, 0, 559, 564, 565,
	566, 721, 0, 0, 0, 0, 716, 546, 1381, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 1393, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1399, 1400, 0, 543, 544, 1035, 0, 0, 0,
	599, 1395, 545, 0, 0, 541, 542, 547, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 597, 0,
	0, 0, 1389, 1390, 1392, 0, 0, 197, 1391, 0,
	0, 951, 0, 0, 0, 720, 535, 0, 0, 1773,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	198, 0, 719, 194, 199, 200, 0, 718, 0, 0,
	0, 0, 0, 553, 583, 0, 584, 0, 0, 0,
	0, 0, 0, 0, 573, 574, 0, 0, 0, 0,
	0, 0, 0, 0, 509, 0, 952, 213, 558, 555,
	556, 560, 561, 562, 563, 0, 0, 0, 559, 564,
	565, 566, 721, 0, 0, 0, 0, 716, 546, 0,
	0, 582, 0, 0, 0, 0, 0, 0, 780, 0,
	1397, 1386, 1385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1387, 0, 0, 543, 544, 0, 0, 585,
	0, 599, 0, 545, 202, 1388, 541, 542, 547, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 552, 570, 586, 587, 1398, 0, 0, 0, 597,
	0, 0, 0, 201, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 0, 0, 0, 45, 535, 0, 0,
	0, 949, 948, 0, 568, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 194, 199, 200, 0, 0, 950,
	0, 0, 0, 0, 553, 0, 588, 598, 594, 595,
	592, 593, 591, 590, 589, 600, 575, 576, 577, 578,
	579, 581, 0, 0, 572, 571, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1393, 0, 0, 0, 0,
	0, 195, 196, 596, 0, 0, 0, 0, 1399, 1400,
	0, 0, 0, 0, 0, 0, 0, 0, 1395, 0,
	585, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 552, 570, 586, 587, 0, 0, 0, 1389,
	1390, 1392, 0, 0, 201, 1391, 0, 0, 951, 0,
	0, 0, 0, 0, 0, 0, 1810, 45, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 588, 598, 594,
	595, 592, 593, 591, 590, 589, 600, 575, 576, 577,
	578, 579, 581, 0, 0, 572, 571, 580, 720, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 719, 0, 0, 0, 0,
	718, 0, 0, 0, 0, 0, 0, 583, 0, 584,
	0, 0, 195, 196, 596, 0, 0, 573, 574, 0,
	0, 0, 0, 0, 0, 0, 0, 509, 0, 0,
	213, 558, 555, 556, 560, 561, 562, 563, 0, 0,
	0, 559, 564, 565, 566, 721, 0, 0, 0, 0,
	716, 546, 1398, 0, 582, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	1035, 0, 0, 0, 599, 0, 545, 0, 0, 541,
	542, 547, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 597, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 0, 0, 0, 0, 780, 0, 0, 720,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 198, 0, 719, 194, 199, 200,
	0, 718, 0, 0, 0, 0, 0, 553, 583, 0,
	584, 0, 0, 0, 0, 0, 0, 0, 573, 574,
	0, 0, 0, 0, 0, 0, 0, 0, 509, 0,
	0, 213, 558, 555, 556, 560, 561, 562, 563, 0,
	0, 0, 559, 564, 565, 566, 721, 0, 0, 0,
	0, 716, 546, 0, 0, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 543,
	544, 0, 0, 585, 0, 599, 0, 545, 202, 0,
	541, 542, 547, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 552, 570, 586, 587, 0,
	0, 0, 0, 597, 0, 0, 0, 201, 0, 0,
	0, 0, 197, 0, 0, 0, 0, 0, 0, 0,
	45, 535, 0, 0, 0, 0, 0, 0, 568, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 194, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 553, 0,
	588, 598, 594, 595, 592, 593, 591, 590, 589, 600,
	575, 576, 577, 578, 579, 581, 0, 0, 572, 571,
	580, 0, 0, 0, 0, 0, 0, 780, 0, 1397,
	1386, 1385, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1387, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1388, 195, 196, 596, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 585, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 552, 570, 586, 587,
	949, 948, 0, 0, 0, 0, 0, 0, 201, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 0,
	0, 45, 0, 0, 0, 0, 0, 0, 0, 568,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 588, 598, 594, 595, 592, 593, 591, 590, 589,
	600, 575, 576, 577, 578, 579, 581, 0, 0, 572,
	571, 580, 0, 0, 1393, 583, 0, 584, 0, 0,
	0, 0, 0, 0, 0, 573, 574, 1399, 1400, 0,
	0, 0, 0, 0, 0, 509, 0, 1395, 213, 558,
	1042, 556, 1043, 1044, 1045, 1046, 195, 196, 596, 559,
	1047, 1048, 1049, 0, 0, 0, 0, 0, 0, 546,
	0, 0, 582, 0, 0, 0, 0, 0, 1389, 1390,
	1392, 0, 0, 0, 1391, 0, 0, 951, 0, 0,
	0, 0, 0, 0, 0, 1773, 543, 544, 0, 0,
	0, 0, 599, 0, 545, 0, 0, 541, 542, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	597, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 0, 720, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 719, 194, 199, 200, 0, 718,
	0, 0, 0, 0, 0, 553, 583, 0, 584, 0,
	0, 0, 0, 0, 0, 0, 573, 574, 0, 0,
	0, 0, 0, 0, 0, 0, 509, 0, 0, 213,
	558, 555, 556, 560, 561, 562, 563, 0, 0, 0,
	559, 564, 565, 566, 721, 0, 0, 0, 0, 716,
	546, 1398, 0, 582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 544, 0,
	0, 585, 0, 599, 0, 545, 202, 0, 541, 542,
	547, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 552, 570, 586, 587, 0, 0, 0,
	0, 597, 0, 0, 0, 201, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 0, 45, 535,
	0, 0, 0, 0, 0, 0, 568, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 194, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 553, 0, 588, 598,
	594, 595, 592, 593, 591, 590, 589, 600, 575, 576,
	577, 578, 579, 581, 0, 0, 572, 571, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 596, 0, 0, 0, 0,
	1040, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 585, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 552, 570, 586, 587, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 0, 0, 568, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 588,
	598, 594, 595, 592, 593, 591, 590, 589, 600, 575,
	576, 577, 578, 579, 581, 0, 0, 572, 571, 580,
	1232, 1233, 1234, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 0, 584,
	0, 0, 0, 0, 0, 0, 0, 573, 574, 0,
	0, 0, 0, 0, 195, 196, 596, 509, 0, 0,
	213, 558, 555, 556, 560, 561, 562, 563, 0, 0,
	0, 559, 564, 565, 566, 0, 0, 0, 0, 0,
	0, 546, 0, 0, 582, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 544,
	0, 0, 0, 0, 599, 0, 545, 0, 0, 541,
	542, 547, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 597, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 194, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 553, 583, 0,
	584, 0, 0, 0, 0, 0, 0, 0, 573, 574,
	0, 0, 0, 0, 0, 0, 0, 0, 509, 0,
	0, 213, 558, 555, 556, 560, 561, 562, 563, 0,
	0, 0, 559, 564, 565, 566, 0, 0, 0, 0,
	0, 0, 546, 0, 0, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 543,
	544, 0, 0, 585, 0, 599, 0, 545, 202, 0,
	541, 542, 547, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 552, 570, 586, 587, 0,
	0, 0, 0, 597, 0, 0, 0, 201, 0, 0,
	0, 0, 197, 0, 0, 0, 0, 0, 0, 0,
	45, 535, 0, 0, 0, 0, 0, 0, 568, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 194, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 553, 0,
	588, 598, 594, 595, 592, 593, 591, 590, 589, 600,
	575, 576, 577, 578, 579, 581, 0, 0, 572, 571,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 596, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 585, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 552, 570, 586, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 0, 0, 0, 0, 0, 0, 0, 568,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 588, 598, 594, 595, 592, 593, 591, 590, 589,
	600, 575, 576, 577, 578, 579, 581, 0, 0, 572,
	571, 580, 0, 0, 0, 583, 0, 584, 0, 0,
	0, 0, 0, 0, 0, 573, 574, 0, 0, 0,
	0, 0, 0, 0, 0, 509, 0, 0, 213, 558,
	1042, 556, 1043, 1044, 1045, 1046, 195, 196, 596, 559,
	1047, 1048, 1049, 0, 0, 0, 0, 0, 0, 546,
	0, 0, 582, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 0, 0,
	0, 0, 599, 0, 545, 0, 0, 541, 542, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	597, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 553, 583, 0, 584, 0,
	0, 0, 0, 0, 0, 0, 573, 574, 0, 0,
	0, 0, 0, 0, 0, 0, 1308, 0, 0, 213,
	558, 555, 556, 560, 561, 562, 563, 0, 0, 0,
	559, 564, 565, 566, 0, 0, 0, 0, 0, 0,
	546, 0, 0, 582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 544, 0,
	0, 585, 0, 599, 0, 545, 202, 0, 541, 542,
	547, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 552, 570, 586, 587, 0, 0, 0,
	0, 597, 0, 0, 0, 201, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 0, 45, 535,
	0, 0, 0, 0, 0, 0, 568, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 194, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 553, 0, 588, 598,
	594, 595, 592, 593, 591, 590, 589, 600, 575, 576,
	577, 578, 579, 581, 0, 0, 572, 571, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 596, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 585, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 552, 570, 586, 587, 0, 0,
	0, 0, 0, 0, 0, 583, 201, 584, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 509, 0, 568, 213, 558,
	555, 556, 560, 561, 562, 563, 0, 0, 0, 559,
	564, 565, 566, 0, 0, 0, 0, 0, 0, 588,
	598, 594, 595, 592, 593, 591, 590, 589, 600, 575,
	576, 577, 578, 579, 581, 0, 0, 572, 571, 580,
	0, 0, 0, 0, 0, 0, 543, 544, 0, 0,
	0, 0, 599, 0, 545, 0, 0, 541, 542, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 195, 196, 596, 0, 0, 0,
	597, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 553, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 552, 570, 586, 587, 261, 0, 285,
	0, 0, 0, 0, 0, 201, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 0,
	0, 0, 0, 0, 0, 0, 568, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 588, 598,
	594, 595, 592, 593, 591, 590, 589, 600, 575, 576,
	577, 578, 579, 581, 0, 0, 572, 571, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 596, 295, 296, 297, 298,
	299, 300, 301, 302, 303, 304, 0, 305, 306, 0,
	307, 308, 309, 311, 310, 278, 279, 280, 284, 282,
	281, 283, 255, 257, 0, 253, 256, 262, 258, 259,
	260, 274, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 461, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254,
}

var yyPact = [...]int16{
	1140, -1000, -259, -1000, -1000, -1000, 1755, 3818, 881, 881,
	785, 1772, -1000, -1000, -1000, 9053, 720, 714, 706, 304,
	683, 331, 959, 3727, 603, 728, 603, 603, -1000, -183,
	-157, -1000, -18, 1612, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 734, -1000, -1000, -1000, 1607, 3710, 725, 3727,
	3727, -1000, 611, 1556, -1000, 12928, 12928, 12928, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 431, 331, 331, 603, 211, 603, 1769,
	566, 1768, 331, -1000, -1000, 876, 1015, -1000, 1879, 873,
	-1000, -1000, 11018, 603, 331, 3727, -1000, -1000, -1000, -1000,
	724, 881, -1000, 722, 788, 3727, 3647, 792, 779, 3727,
	3727, 221, 5514, 3001, -165, 82, -1000, -1000, -1000, -1000,
	871, 1679, -1000, -1000, -1000, 1679, 138, 1754, 1679, 1754,
	-1000, 1679, 1754, 111, 111, 111, 111, 111, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1753, 1678, -1000, 1679, 1679,
	1679, 1679, 1679, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1752, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1737, 165, 1737, 1698, 1698,
	-1000, -1000, 3001, 3001, 1751, 3727, 331, 1766, 1765, 3727,
	-189, 3727, 3727, 1978, -1000, -1000, -1000, 245, 3727, 566,
	10232, 1858, 15847, 12590, -1000, 3727, -1000, -1000, 3727, -1000,
	3727, 904, 539, 636, 625, 772, 883, 3727, 675, 1827,
	927, 869, 9446, -1000, 1833, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1747, 1089, 331, 438, 192, 1657, 408,
	656, 394, 1285, 412, -1000, -1000, -1000, 1082, -1000, 331,
	-1000, 1975, -1000, -1000, 427, -1000, 424, 1009, 1220, 3727,
	1746, 208, 1738, 14940, 1193, -1000, -282, -1000, 63, -1000,
	331, -1000, 1149, 111, 1679, -1000, 111, 1179, 111, 111,
	-1000, -1000, 896, 1841, 896, 896, 896, 896, 1218, 1218,
	-53, -53, -1000, -1000, -1000, 1191, -1000, 1189, 1737, -1000,
	-1000, -1000, 1187, -1000, 3727, 331, 1735, 1764, 3727, 3727,
	1878, 680, -1000, -1000, 1871, 1865, 1605, -1000, -1000, 238,
	-1000, -1000, 566, 1978, -1000, 868, -1000, -1000, -1000, -1000,
	-1000, 1733, -1000, -1000, 1757, 719, -1000, 1641, 9053, 392,
	331, -1000, 421, -1000, 412, 331, 331, 331, 331, 331,
	599, 7481, 537, 608, 763, 331, 603, 1154, 11804, 10625,
	221, -1000, -1000, -1000, 3823, 498, 1955, 1897, 462, 100,
	-163, 1269, -1000, -1000, 1732, -1000, -1000, -1000, 14448, -1000,
	1261, -1000, 1238, -1000, 1236, 1230, 36, 331, -1000, -169,
	129, 45, -1000, -1000, 1657, -1000, 756, 14448, 1864, -1000,
	1844, 954, 3086, -1000, -1000, 1211, 810, -1000, -1000, -1000,
	-1000, 14940, 14940, 14940, 14940, 14940, 14940, 14940, -1000, -1000,
	-1000, -1000, 85, -1000, 13970, -1000, -1000, 1206, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 865, 862, -1000,
	-266, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
	1657, 1657, 14448, 1657, 1826, 1657, 1657, 1657, 1657, 1657,
	1657, 1657, 1657, 1657, 1657, 1657, 4588, 1657, 1657, 1657,
	1657, -1000, -1000, -1000, -1000, -1000, -1000, 1573, 896, 111,
	896, 1566, 1562, 896, 896, -1000, -1000, 1227, 941, -1000,
	-1000, -1000, -1000, 1554, -1000, 1541, -1000, 164, 163, -1000,
	1545, 1650, -1000, 1538, 1667, 1763, 3823, 3727, 1731, 1729,
	1663, 603, 1663, 1896, 315, 3727, 1978, 302, 1978, 1595,
	11018, 1218, 331, 331, 3727, 331, -1000, 331, -1000, -1000,
	58, 1727, 659, -1000, -1000, -1000, 665, 331, -1000, 392,
	9053, -1000, 331, -1000, -1000, 331, 331, 331, 574, -1000,
	1216, -1000, -1000, 920, 860, 8660, -1000, -1000, 1536, -1000,
	324, 1679, 1679, 14448, 1855, 1855, 1855, 1855, 857, -1000,
	229, 241, 236, 607, 607, -175, 409, 405, -163, 1657,
	1662, 1719, -1000, 3823, 878, -1000, 14448, 195, 1657, 1657,
	1657, 1657, 13970, -1000, -1000, -1000, -1000, -1000, -163, 1717,
	-1000, -1000, -1000, 1009, -1000, 1716, 1711, -1000, 1709, 14448,
	302, -1000, 1008, 170, -1000, 1647, -1000, 1178, 14940, 14940,
	14940, 14940, 14940, 14940, 14940, 14940, 14940, 14940, 14940, 14940,
	4071, 1202, -1000, 671, 671, 72, 72, 72, 72, 72,
	72, 93, -1000, 1245, 74, 1523, 1908, 1986, 13970, 748,
	-1000, 13315, -1000, 10232, 11018, 14297, 13819, 13819, 13819, 13819,
	4411, 14448, 13819, 13819, 13819, 13819, 1881, 1003, 748, 2985,
	1892, 1245, 1245, 1245, 1186, -1000, 1245, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 127, -1000, -1000, -269, -1000,
	-277, -1000, -1000, -1000, -1000, -1000, -85, 839, 13819, 13819,
	13819, 13819, -1000, -1000, 896, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 111, 1214, 111, 83, 81, -1000, 1165,
	-1000, 1156, 3823, 331, 3727, 1445, 1640, 1855, 1855, 1855,
	1855, 1708, 302, 3823, -1000, 1663, 3727, -1000, 651, 1973,
	-1000, -1000, 1891, -1000, 1639, -1000, -1000, 1616, 3727, -1000,
	1533, 1706, 196, -1000, -1000, 456, 1705, 153, 403, 1704,
	1660, 3823, 679, 1066, 12928, 331, 543, 331, -1000, 1,
	565, -1000, -1000, 331, -1000, -1000, 1105, 331, -1000, -1000,
	-1000, -1000, 3875, 3823, 1855, 1150, -1000, -1000, -1000, 1855,
	996, -1000, -1000, -1000, -1000, -1000, -1000, 11018, 232, 217,
	-1000, -1000, 1080, -1000, -1000, 1098, 290, 1036, -1000, 331,
	-163, 1701, 14448, 14448, 364, 3823, 1531, 305, 14448, 14448,
	1033, -1000, -1000, 376, 14789, 1151, 982, 14940, 914, 14940,
	15677, 15677, 15677, 15677, 14940, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1225, -1000, 1663, 2985, 1245, 1245, -1000,
	11018, 1657, -1000, 1182, -1000, 1158, 1441, 878, 1527, -126,
	14448, 1699, 954, -1000, 397, 1074, 72, 16, 16, 43,
	43, 43, 43, 43, 34, 34, -1000, -114, -1000, 94,
	-1000, -1000, -1000, -1000, -1000, 1213, -1000, -1000, -1000, -1000,
	14448, -1000, 1900, 1906, 1663, 1870, 1245, 1817, -1000, 1245,
	13819, 1448, 1523, -1000, 846, -1000, 838, 1657, -1000, 80,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3151, 1448, 846, 1448, 1448, 1448, 650, 1626, 15418, 1679,
	1211, 1679, 1698, -1000, -1000, 186, 1679, 180, -1000, -1000,
	-1000, -1000, 1698, -1000, -1000, -1000, -1000, -1000, 1679, 1679,
	-1000, -1000, 1679, 1679, -1000, 1679, 1679, 924, 1448, 1620,
	1614, 1448, 13819, -1000, 985, -1000, 14448, 1245, -1000, 3727,
	-1000, -1000, -1000, -1000, 1245, -1000, -1000, -283, -284, 157,
	154, 331, 1448, 1245, 1625, 1448, 1448, -1000, 896, -1000,
	896, -1000, -1000, 1433, 1381, 1360, 1697, 1696, -216, 3823,
	1516, 1514, 1245, 1863, 11018, -1000, -1000, -1000, -1000, -1000,
	278, 1000, 331, 6417, 1890, 111, -1000, 6695, 754, 331,
	-1000, 3823, 3823, 1695, 1694, 1693, 14448, 14448, 338, 1510,
	14940, 1093, 346, -1000, 1076, -1000, -1000, 396, 1692, 151,
	1690, 615, 1060, 12928, 499, -1000, -1000, 872, 1760, 4056,
	191, -1000, 1223, 975, 1208, 973, 969, 957, 955, 953,
	951, 950, 949, 947, 946, -1000, -1000, 1352, -1000, 1855,
	1657, -1000, -1000, 226, 498, 1958, -1000, -1000, 498, 1930,
	1689, 1688, 3823, 878, 1367, -1000, 199, 246, 1657, 1657,
	1508, 3875, -1000, -31, 376, 434, -1000, -1000, 1159, -1000,
	-1000, 3086, 14940, 14940, 14940, -1000, -1000, -1000, -1000, 13970,
	1151, 14940, 14940, 14940, 2618, 14940, 3086, 3086, 3086, 3086,
	3086, 2763, 1245, 1245, -1000, -1000, 1504, -1000, 14448, -1000,
	1344, -1000, -1000, 305, 638, -1000, -1000, 926, -1000, 1321,
	150, 748, 1851, 14448, 14448, 1908, -1000, 1663, -1000, -1000,
	-1000, 1881, -1000, -1000, 1039, -1000, 1448, 13819, -249, -1000,
	-1000, -1000, 293, -1000, -1000, 8267, 13819, -1000, 15267, 4071,
	-249, -249, -1000, -1000, 5500, 1202, 14448, -1000, 1149, 342,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5500, -1000, 14940, 14940, 14940, 14940, -43, 1606,
	997, -1000, 14448, 739, -1000, -1000, -1000, -1000, -1000, 76,
	71, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-216, 3823, 3823, 1917, 1687, 1316, 1917, 3875, -1000, 1663,
	1552, 264, 202, 14448, -1000, 2758, -1000, 6417, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1908, 14448, -1000, -1000, -1000, -1000, -1000, 331, 3230, 331,
	331, 331, 515, 14448, 306, 14448, -1000, -1000, -1000, -1000,
	-1000, 1000, 272, 1311, 6695, 6695, 6695, 5121, 6695, 6695,
	746, -1000, 1444, 1428, 3823, 3823, 3823, 887, 1398, 1686,
	1685, -1000, 3086, -1000, 12928, -1000, 1684, 3823, 3823, 1683,
	1680, 14448, 14940, 1043, 327, -1000, 1040, -1000, 393, 1081,
	-1000, 331, -1000, -119, 4056, 331, -1000, 1130, -1000, -1000,
	1100, 1129, 1100, 1100, 1100, 1100, 1100, 298, 1099, 605,
	1855, -1000, -1000, -1000, -1000, 607, -1000, 607, 11018, 3823,
	1396, 305, 1917, 14448, 297, 275, 14448, 14448, 3875, 1760,
	-1000, -1000, -1000, -1000, 3086, 13970, 3086, 13970, 3086, 13970,
	-1000, 2618, 3086, 2170, -1000, 14940, 2618, 14940, -1000, -1000,
	497, 11018, 878, -1000, -1000, 1934, -1000, -138, 496, -1000,
	61, -1000, 1945, 908, 732, 1624, -1000, 672, 1900, 1245,
	1762, -1000, -1000, -1000, -1000, 1657, -1000, -1000, 836, 1245,
	-1000, -1000, -1000, -1000, 1245, 1679, -1000, 1245, 601, -1000,
	-1000, 1245, 2286, 1091, 1013, 514, 1657, -28, -1000, 748,
	14448, -1000, -1000, 1917, 1294, 1394, 3875, 14448, 302, -216,
	3875, -1000, -1000, -50, 14448, 6417, 7203, 748, 7203, -1000,
	6417, 891, 1900, 4849, 655, 3396, 3356, 1623, 460, -1000,
	6302, 1160, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 331, 1924, 1923,
	1921, 1920, 13552, 14448, 14448, -1000, 200, 263, -1000, -1000,
	-1000, -1000, -1000, 5909, 1679, 111, 1678, -1000, -1000, -1000,
	-1000, -1000, 498, 1392, 1390, 1388, 311, 1917, 14448, 14448,
	-1000, 3823, 1384, 1379, 3823, 3823, 853, 3086, -1000, 12928,
	-1000, 1677, -1000, -1000, 1657, 1377, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1009, 1009, 1375, 1373,
	3875, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1367, 1367, 1760, 498, 74, 74, 74, -1000, 14940, 3086,
	-1000, 3086, 3727, -1000, 305, 607, 607, -1000, -1000, -1000,
	218, 960, 954, 954, 1097, 62, -1000, 1905, -1000, -1000,
	1824, 14448, 14448, 14448, -1000, 1851, -1000, 13819, -1000, 703,
	9839, -1000, -1000, -1000, -1000, 14940, -1000, -1000, 14940, -1000,
	14940, -1000, 14940, -1000, 14940, 14940, 1245, 1197, 748, 3875,
	1917, 3875, 1760, 748, 1363, 1917, 1760, -1000, -238, 748,
	2758, 2964, -1000, -1000, 230, 12909, -1000, 1851, 6417, 988,
	-1000, 989, -1000, 7203, 3622, 3727, 1340, 1525, 1655, -1000,
	-1000, -1000, 1862, 533, 1070, 331, 255, 12928, -1000, -1000,
	1622, 7088, 32, -1000, -1000, -1000, 943, 828, 330, -1000,
	1840, -1000, -1000, 3230, 1849, -1000, -1000, -1000, -1000, -1000,
	7203, -1000, 1603, 1245, 7203, -1000, -1000, 3875, 3875, -1000,
	-35, -1000, 1359, 1343, 1334, -1000, 498, 1298, 1278, 301,
	-1000, 3823, 331, -1000, 4056, 498, 498, 488, 3875, 1760,
	1917, 1917, -1000, -1000, -1000, -1000, -1000, 3086, 1674, -1000,
	558, 473, 954, -1000, 954, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2162, 1822, 748, 748, -1000, -1000, 1608, -1000,
	1904, 1245, -1000, 2413, 2413, 2413, 2413, 2413, 159, -1000,
	-1000, 1760, 3875, -1000, -1000, -1000, 3875, -1000, 14448, 12888,
	-1000, -1000, -1000, -1000, 2607, 6810, 585, 2546, 353, 3727,
	-1000, 353, 1463, 3356, -1000, -1000, 2985, 3356, 3356, 3356,
	3356, 3356, -1000, 1812, 1807, -1000, 1799, 1790, 1806, 3727,
	1267, 533, 851, 1657, -1000, 3743, -1000, -1000, -1000, 1862,
	1887, -1000, 7874, 1622, 32, 1621, -1000, 46, 26, 12962,
	11018, 896, -1000, -1000, -1000, -1000, -1000, 11018, 2300, -1000,
	2786, 1760, 1760, -1000, 1917, 1917, -1000, -1000, 3875, 3875,
	-37, 1265, 1245, -1000, -1000, -1000, 3727, 1760, 498, -1000,
	-1000, 11018, -1000, 1943, -1000, 1928, -1000, -1000, -1000, 818,
	-1000, 1917, 3356, 14448, -1000, -1000, -1000, -1000, -1000, -1000,
	1245, 271, -121, -1000, -1000, 1760, 748, -1000, -1000, 4535,
	-1000, -1000, 14448, -1000, 14448, 7203, -1000, 1407, 1657, -1000,
	1917, 3356, 1412, 1568, -1000, 942, 1655, 1673, 1761, 1313,
	-1000, -1000, -1000, -1000, 1798, -1000, 1788, -1000, -1000, -1000,
	-1000, -83, 701, 694, 686, 331, -1000, 1663, -1000, 1621,
	32, 23, -1000, -1000, -1000, -1000, 748, 937, -1000, 1618,
	-1000, 4910, -1000, -1000, -1000, -1000, 1760, 1760, -1000, -1000,
	-1000, 1670, -1000, -1000, 1259, 607, 607, 11018, 1914, 1617,
	1283, -1000, 748, -1000, 1820, -48, -128, -1000, 579, 6417,
	14181, 13255, 1759, 2985, 1657, -1000, 11411, 331, 1908, 1412,
	-1000, 1917, 2985, 14448, -1000, -1000, 14448, 1669, -1000, 14448,
	-1000, -1000, -1000, -1000, 1668, 1657, 1657, 1657, 1255, -1000,
	-1000, -1000, -1000, 38, 30, -1000, 14448, -1000, -1000, -1000,
	11018, -1000, 498, 498, -1000, 1911, 1902, -1000, 1245, 14448,
	-1000, 1816, -1000, -1000, 209, 988, -1000, -1000, 1847, 1561,
	1596, -1000, -1000, 13466, 1245, 1257, -1000, -1000, 813, -1000,
	-1000, 1255, 1900, -1000, 1908, -1000, 748, 748, 302, 748,
	-194, 302, 302, 302, 3246, 331, -1000, -1000, -1000, 748,
	1253, -1000, -1000, -1000, 14448, 14448, -1000, -1000, -81, 4190,
	381, -1000, 1657, -1000, -1000, 1565, 12197, 331, -1000, -1000,
	1900, 1248, 1244, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1242, 1242, 1242, 851, -1000, -1000, 748, 1603,
	-137, 546, 1940, -1000, 1657, -1000, 1663, -1000, -1000, -1000,
	-1000, -1000, -194, -1000, -1000, -1000, -83, -147, -1000, 2985,
	1596, 1245, -1000, -1000, -1000, 1585, -1000,
}

var yyPgo = [...]int16{
	0, 2229, 4, 54, 2228, 2224, 2222, 2219, 2218, 2217,
	2216, 2214, 2212, 2209, 2208, 36, 32, 45, 28, 41,
	2207, 2204, 2203, 2202, 2196, 2186, 74, 2185, 2184, 2176,
	2173, 85, 2169, 2165, 2155, 2152, 64, 53, 88, 84,
	2111, 31, 35, 69, 47, 2151, 34, 2147, 2142, 67,
	2140, 42, 2139, 2137, 939, 2136, 2135, 7, 292, 102,
	2132, 59, 2131, 2130, 103, 3304, 2864, 2326, 2175, 2167,
	2129, 93, 21, 55, 5, 12, 8, 2127, 95, 1,
	2126, 96, 68, 2125, 2120, 2116, 19, 2112, 60, 111,
	15, 72, 2106, 30, 11, 70, 43, 27, 13, 2,
	50, 39, 2104, 26, 38, 29, 2103, 63, 2102, 113,
	66, 91, 14, 3001, 0, 37, 80, 2099, 117, 2096,
	1710, 79, 40, 17, 52, 76, 2095, 75, 89, 61,
	86, 77, 2083, 87, 2082, 2081, 2080, 2079, 2077, 261,
	409, 2076, 163, 48, 2075, 2074, 2073, 126, 123, 100,
	105, 108, 1722, 2072, 2069, 2067, 2066, 2063, 83, 73,
	107, 2061, 94, 98, 25, 235, 2060, 2059, 2057, 2056,
	2055, 2053, 2052, 99, 2050, 78, 137, 371, 731, 46,
	2040, 2038, 2037, 2035, 2034, 2031, 2029, 71, 2028, 2027,
	101, 62, 115, 2025, 2024, 92, 81, 2023, 118, 112,
	2022, 109, 33, 49, 65, 51, 2021, 2020, 2019, 6,
	3, 2015, 20, 114, 2013, 97, 2011, 82, 2010, 18,
	2008, 2002, 44, 2001, 423, 1958, 106, 2000, 1998, 1995,
	104, 937, 1555, 1993, 90, 116, 1992, 110,
}

var yyR1 = [...]uint8{
	0, 227, 228, 228, 1, 1, 1, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 22, 22, 22, 22, 22, 22, 230, 230, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 29, 29,
	7, 8, 8, 8, 233, 233, 49, 49, 96, 96,
	9, 9, 9, 9, 10, 10, 206, 206, 205, 207,
	207, 11, 11, 11, 11, 11, 200, 200, 200, 200,
	200, 12, 12, 203, 203, 203, 15, 15, 15, 15,
	16, 16, 17, 17, 17, 19, 19, 101, 101, 105,
	105, 105, 106, 106, 106, 106, 216, 216, 126, 126,
	229, 229, 234, 234, 234, 234, 234, 234, 234, 198,
	198, 198, 198, 199, 199, 199, 199, 201, 201, 202,
	202, 202, 202, 202, 202, 204, 204, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 13, 13,
	30, 30, 73, 73, 14, 111, 111, 182, 182, 182,
	183, 183, 183, 183, 183, 183, 184, 184, 185, 185,
	118, 118, 186, 186, 25, 167, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 151, 151, 151, 129, 129,
	129, 129, 129, 129, 129, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	192, 193, 194, 188, 188, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 141,
	141, 141, 141, 141, 141, 141, 187, 187, 133, 133,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	132, 132, 132, 132, 132, 132, 132, 137, 137, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 130, 130,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 138, 138, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 150, 150, 139, 139, 148, 148, 149,
	149, 149, 140, 140, 140, 147, 147, 147, 144, 144,
	145, 145, 146, 146, 146, 142, 142, 142, 143, 143,
	143, 153, 178, 178, 178, 180, 180, 181, 181, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 166, 166, 195, 195, 196, 196, 197,
	197, 177, 177, 177, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 165, 165, 175, 175,
	175, 175, 175, 176, 176, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 174, 160, 160, 160, 160,
	160, 161, 161, 162, 162, 162, 162, 154, 154, 155,
	155, 156, 156, 157, 157, 157, 157, 157, 157, 159,
	159, 158, 158, 158, 158, 158, 158, 190, 190, 190,
	220, 220, 220, 220, 220, 220, 221, 221, 191, 191,
	163, 163, 164, 164, 171, 171, 171, 171, 235, 235,
	169, 169, 169, 170, 170, 170, 236, 26, 27, 27,
	28, 28, 28, 33, 33, 33, 31, 31, 32, 32,
	38, 38, 37, 37, 39, 39, 39, 39, 117, 117,
	117, 116, 116, 217, 217, 217, 217, 217, 41, 41,
	42, 42, 43, 43, 44, 44, 44, 209, 209, 208,
	208, 210, 210, 210, 210, 210, 210, 210, 210, 56,
	56, 93, 93, 93, 97, 97, 45, 45, 45, 45,
	46, 46, 47, 47, 48, 48, 124, 124, 123, 123,
	123, 122, 122, 50, 50, 50, 52, 51, 51, 51,
	51, 53, 53, 55, 55, 54, 54, 57, 57, 57,
	57, 58, 58, 95, 95, 40, 40, 40, 40, 40,
	40, 40, 40, 108, 108, 60, 60, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 70, 70, 70, 70, 70, 70, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 36, 36,
	71, 71, 71, 78, 72, 72, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 68, 68, 68,
	68, 68, 68, 68, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 237,
	237, 69, 69, 69, 69, 34, 34, 34, 34, 34,
	125, 125, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 82, 82, 35, 35, 80, 80, 81,
	110, 110, 83, 83, 79, 79, 79, 79, 211, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 61,
	61, 84, 84, 85, 85, 218, 218, 219, 86, 86,
	87, 87, 88, 89, 89, 89, 90, 90, 90, 90,
	91, 91, 91, 63, 63, 63, 63, 63, 63, 92,
	92, 94, 94, 94, 94, 98, 98, 74, 74, 76,
	76, 75, 77, 99, 99, 103, 100, 100, 104, 104,
	104, 104, 104, 23, 24, 102, 102, 102, 119, 119,
	119, 109, 109, 107, 107, 114, 114, 115, 115, 115,
	115, 115, 120, 120, 120, 121, 121, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 213, 213, 214, 214,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 223,
	223, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 225, 225, 226, 226, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 231, 232,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 2, 13, 12,
	14, 12, 13, 12, 10, 7, 10, 7, 11, 11,
	9, 13, 14, 5, 8, 4, 8, 4, 7, 10,
	7, 8, 6, 9, 8, 9, 9, 8, 10, 10,
	11, 7, 6, 10, 9, 10, 10, 9, 11, 11,
	13, 13, 5, 12, 11, 9, 6, 13, 12, 14,
	14, 6, 7, 6, 6, 10, 12, 10, 11, 12,
	13, 12, 13, 7, 7, 11, 13, 6, 6, 8,
	7, 6, 6, 8, 8, 10, 10, 1, 1, 4,
	6, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 1, 1, 1, 3, 0, 4,
	3, 4, 5, 4, 2, 6, 1, 3, 3, 0,
	1, 2, 2, 2, 3, 5, 0, 2, 2, 2,
	2, 3, 5, 1, 2, 3, 7, 10, 1, 1,
	5, 5, 3, 5, 3, 1, 3, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	0, 3, 0, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 4, 2, 3, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 4,
	1, 1, 0, 1, 2, 0, 3, 0, 2, 2,
	0, 2, 2, 2, 2, 2, 0, 2, 0, 3,
	0, 1, 0, 2, 4, 4, 0, 1, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 3, 1,
	1, 1, 1, 1, 3, 2, 2, 3, 2, 4,
	2, 4, 2, 2, 3, 2, 3, 2, 7, 9,
	3, 3, 6, 9, 10, 9, 10, 4, 7, 13,
	13, 6, 6, 8, 8, 5, 8, 7, 4, 0,
	2, 2, 1, 1, 2, 0, 4, 3, 4, 3,
	3, 3, 3, 3, 3, 3, 2, 4, 6, 2,
	3, 4, 2, 3, 1, 3, 0, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 2, 2, 2, 1, 1, 0, 1, 1,
	3, 3, 2, 2, 2, 1, 1, 1, 1, 1,
	4, 5, 4, 4, 4, 1, 2, 2, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 3, 3, 0, 3, 3, 0, 1,
	0, 1, 0, 2, 1, 0, 3, 3, 0, 1,
	2, 6, 0, 1, 4, 1, 2, 1, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 5, 2, 3, 3, 2, 3, 2,
	3, 3, 2, 2, 3, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 5, 2, 2, 3,
	4, 2, 2, 2, 2, 1, 3, 6, 6, 9,
	9, 13, 11, 1, 1, 2, 2, 10, 8, 10,
	8, 7, 5, 6, 7, 8, 9, 8, 9, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 1,
	0, 1, 1, 1, 2, 2, 1, 2, 0, 3,
	0, 1, 1, 3, 0, 4, 1, 3, 2, 1,
	1, 2, 1, 1, 1, 1, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 3, 6, 4, 7, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 0, 4, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	8, 1, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 0, 4, 1, 3, 3, 2, 3,
	2, 1, 2, 0, 3, 1, 1, 3, 4, 6,
	4, 6, 4, 6, 3, 4, 4, 5, 5, 3,
	4, 3, 3, 3, 3, 5, 6, 2, 4, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 2, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	6, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 2, 1, 3, 4, 5, 5,
	5, 5, 6, 4, 4, 4, 6, 6, 8, 6,
	4, 6, 6, 8, 6, 8, 6, 8, 6, 8,
	9, 7, 5, 4, 4, 3, 3, 3, 1, 3,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 2, 2, 1, 1, 2,
	2, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 4,
	4, 1, 3, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 0, 2, 1, 1, 3, 5, 3, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 0, 3, 0, 2, 1, 3, 1, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 1, 3, 1, 1, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 5, 3, 1, 3, 1, 2, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 2,
	2, 2, 3, 3, 4, 4, 4, 3, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -227, -1, -20, -21, -22, -25, 126, 132, 133,
	127, 71, -228, 401, -167, 58, -220, -221, 285, -186,
	139, 152, 174, 175, 177, 371, 136, 137, 383, 384,
	156, 386, 79, -225, -224, 6, 8, 9, 10, 165,
	147, 174, 21, -114, 61, 311, -225, 137, -107, 138,
	175, 142, 56, -168, -151, -115, 63, 36, -114, 307,
	151, -112, -113, 131, 202, 374, 80, 25, 27, 293,
	299, 201, 84, 120, 16, 85, 208, 383, 384, 119,
	76, 351, 126, 52, 343, 344, 341, 206, 354, 355,
	342, 300, 213, 20, 31, 10, 28, 159, 24, 113,
	128, 203, 89, 88, 162, 166, 167, 26, 160, 75,
	209, 211, 19, 55, 150, 11, 373, 13, 14, 388,
	375, 143, 142, 100, 387, 138, 50, 8, 122, 29,
	97, 46, 157, 212, 48, 98, 17, 345, 346, 34,
	361, 168, 115, 53, 40, 389, 81, 390, 73, 56,
	314, 207, 79, 15, 51, 169, 391, 210, 395, 99,
	129, 350, 176, 49, 204, 392, 136, 205, 6, 357,
	33, 158, 47, 137, 301, 393, 87, 141, 74, 5,
	156, 9, 394, 54, 57, 347, 348, 349, 38, 86,
	12, 153, 365, 77, 178, 396, 397, 152, 175, 179,
	180, 298, 269, 138, 138, 138, 140, 222, 140, -114,
	-114, -79, -109, 61, -113, -120, 143, 63, -54, -120,
	61, -113, -109, 137, -109, -109, 386, 383, 384, 350,
	56, 59, 135, 56, -54, 314, 137, -54, -54, 137,
	145, 60, 59, -152, -129, -133, -130, -135, -134, -136,
	-114, -131, -132, 258, 363, 255, 259, 256, 261, 262,
	263, 120, 260, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 264, 276, 33, 161, 248, 249,
	250, 253, 252, 254, 251, 122, 277, 278, 279, 280,
	281, 282, 283, 284, 285, 229, 230, 231, 232, 233,
	234, 235, 236, 237, 238, 240, 241, 243, 244, 245,
	247, 246, -152, -152, -114, 56, 221, -114, -114, -109,
	223, -109, 56, -198, 19, 201, 202, 214, 56, -114,
	123, 81, 25, 123, -115, -109, -114, -54, 137, -224,
	137, 131, 127, 128, 129, -54, -54, 314, 129, 131,
	-54, -120, -171, -235, 366, 37, -151, -153, -160, -154,
	-155, -156, -157, -172, -161, 146, 144, 156, 399, 148,
	149, 285, -165, 150, 138, 157, 73, 81, -192, 146,
	-193, 56, 293, 299, 144, 157, 156, 399, 71, 147,
	25, 373, 375, 31, 32, -146, 402, 287, -144, 296,
	123, -139, 58, -139, -138, 257, -140, 58, -139, -140,
	-139, -140, -142, 259, -142, -142, -142, -142, 58, 58,
	-139, -139, -139, -139, -139, 58, -148, 58, -137, 242,
	-148, -149, 58, -149, 56, 57, -54, -114, 56, 56,
	-54, -216, 396, 397, -54, -54, -201, -199, 8, 9,
	10, 215, -54, -198, -115, -121, -112, -113, -120, 26,
	-129, 276, -121, -112, -54, -49, -54, -49, 145, -118,
	146, -160, 144, 156, 150, 145, 145, 146, 141, 145,
	131, 131, 127, 128, -54, 141, 41, 97, 123, -169,
	59, -115, 71, 36, 58, -191, 56, 81, -163, -114,
	157, -165, 61, 138, -190, 157, 383, 384, -231, 58,
	-165, 138, -165, 61, 138, 157, 61, 157, 73, 19,
	-114, 9, 157, 157, -191, 63, -54, 58, -188, 374,
	16, 58, -65, -64, -60, 161, -79, -211, -77, -213,
	-78, 120, 121, 109, 110, 117, 82, 122, -68, -66,
	-67, -69, 286, 188, -231, 63, 64, -114, 62, 72,
	65, 66, 67, 68, 73, 74, 75, -120, 319, -75,
	287, 360, 359, 48, 49, 351, 352, 353, 354, 355,
	361, 356, 85, 38, 40, 264, 288, 289, 341, 349,
	348, 347, 345, 346, 343, 344, 398, 143, 342, 115,
	350, -194, 65, 403, -145, 297, -114, 65, -142, -139,
	-142, 65, 61, -142, -142, -143, 120, 119, 33, -143,
	-143, -143, -143, -150, 63, -150, -147, 365, 366, -147,
	65, 65, -148, 65, -54, -114, 58, 56, -54, -54,
	25, 140, 25, -182, 25, 56, 59, 215, -198, -201,
	123, 58, 57, 141, 59, 11, -151, -230, 138, 157,
	-114, 157, -114, -114, -114, -114, -114, 146, -160, -118,
	145, -151, 146, -160, 156, 145, 145, 146, 131, -114,
	-109, 63, 73, -114, -121, 90, -115, -235, -176, -173,
	-114, 157, -113, 58, -68, -66, -67, -69, -120, -212,
	217, 81, 218, 10, 9, 19, 150, 144, 156, 399,
	154, -190, 61, 58, -40, -59, 81, -65, 31, 26,
	9, 76, -231, 61, 61, 61, 61, -190, 156, -163,
	-114, 385, -192, 399, -141, 341, 344, 343, 289, -231,
	58, -212, -40, 25, 31, -61, 65, 110, 106, 105,
	116, 109, 110, 111, 112, 113, 114, 115, 107, 108,
	398, 119, 63, 124, 125, -65, -65, -65, -65, -65,
	-65, -65, -213, -2, -65, -72, -3, -4, -231, -40,
	6, -231, 63, 123, 123, 402, -231, -231, -231, -231,
	-231, -231, -231, -231, -231, -231, -231, -82, -40, -231,
	41, -231, -231, -231, -231, -237, -231, -237, -237, -237,
	-237, -237, -237, -128, 120, 259, 161, 250, -131, -130,
	265, 264, 122, 290, 274, 275, 249, -114, -231, -231,
	-231, -231, 60, -143, -142, -143, 60, 60, -143, -143,
	61, 61, 120, 60, 59, 60, 248, 248, 60, 59,
	60, 59, 58, 57, 56, -175, -176, -68, -66, -67,
	-69, -54, 58, 58, -2, -231, -109, -2, -183, 19,
	185, 186, -54, -199, -93, -114, 157, -201, 56, -115,
	-150, -114, -226, -114, -54, -226, -114, 156, 144, 399,
	154, 58, 33, 128, 175, 141, -114, -230, -151, -114,
	-114, -114, -114, 146, -160, 63, 97, 123, -170, -115,
	63, 65, 60, 59, -139, 58, -174, 291, -139, -139,
	-40, -89, 27, 28, -89, -89, -89, 123, 218, 217,
	220, 219, -162, 181, 182, 33, 183, -162, 385, 157,
	157, -190, -231, -231, 57, 58, -176, -232, 80, 79,
	97, 216, 60, -40, -62, 100, 81, 98, 82, 99,
	101, 102, 103, 104, 84, 90, 91, 92, 93, 94,
	95, 96, -108, -231, -78, -231, -231, -231, -59, -190,
	58, -191, -139, 58, -139, 58, 58, -40, -93, 60,
	58, 375, 59, 65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -133, 249, -128, -131,
	-125, 61, 63, -64, 63, -114, -64, -114, -232, -232,
	59, -232, -86, 15, -28, 5, -2, -26, -236, -38,
	24, -37, -72, -39, -40, 111, -120, -115, -115, -214,
	403, -215, 63, 65, 66, 67, 68, 73, 74, 75,
	-65, -37, -40, -37, -37, -37, -40, -127, 120, 255,
	161, 250, 244, 274, 275, 295, 248, 296, 237, 229,
	234, 247, 245, 231, 246, 230, 243, 240, 253, 252,
	254, 265, 256, 261, 263, 262, 260, -40, -37, -39,
	-39, -37, -31, 24, -80, -81, 86, -79, -114, 19,
	-232, -232, -232, -232, 65, -232, 257, 402, 402, 365,
	366, 123, -37, -38, -37, -37, -37, -143, -142, 63,
	-142, 298, 298, 65, 65, -175, -114, -54, 60, 58,
	-93, -176, -2, -54, 141, 21, 6, 8, 9, 10,
	19, -111, 59, 25, -54, 60, -229, 58, 365, 59,
	182, 58, 58, 383, 384, 157, 58, 58, 57, -176,
	31, 81, 178, 31, 81, -129, -114, 144, -114, 156,
	399, 33, 128, 175, -114, 63, 73, -114, -178, -180,
	365, -179, 57, 151, 71, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 61, -173, -89, 65, -89, 60,
	-115, 220, 219, 218, -191, 56, 73, 184, -191, 56,
	-163, -190, 58, -40, -159, -158, -114, -40, 155, -114,
	-176, 60, -187, 183, -40, -40, -70, 73, 81, 74,
	75, -65, 21, 22, 23, -71, -75, -78, 69, -231,
	100, 98, 99, 84, -65, 98, -65, -65, -65, -65,
	-65, -65, 61, -79, -232, -232, -164, -115, -231, 60,
	65, 60, 60, -232, 60, 371, 372, -40, 58, -61,
	365, -40, -90, 17, 16, -5, -3, -231, 21, 24,
	-232, -33, 44, 45, -27, -232, -37, 59, -232, -232,
	-117, -116, 25, -114, 63, 123, -231, 403, 59, 398,
	-232, -232, -232, -232, 59, 57, 59, -139, 58, -139,
	-139, -149, 235, -139, 235, -149, -139, -139, -139, -139,
	-139, -139, 25, -232, 59, 11, 59, 11, -232, -37,
	-83, -81, 89, -40, -232, -120, -232, 403, 403, 248,
	248, -114, -232, -232, -232, -232, -143, -143, 60, 60,
	60, 58, 58, -95, 387, -175, 60, 60, -232, 25,
	-164, 203, -110, 86, -114, -202, -204, 224, -18, -15,
	-6, -8, -7, -10, -9, -11, -12, -13, -14, -23,
	-3, 143, -16, -17, -29, 10, 9, 20, 33, 207,
	208, 213, 209, 153, -30, 176, -24, 8, 350, 166,
	167, -111, 19, -234, -114, 109, 90, 63, -151, 59,
	132, -114, -176, -176, 58, 58, 58, -40, -159, 155,
	-114, 60, -65, 73, 175, 73, 157, 58, 58, 383,
	384, 58, 31, 81, 178, 31, 81, -129, 144, 97,
	-177, 56, -179, 365, 58, 367, 61, -166, 90, 63,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	60, -89, 219, 220, -212, 9, -212, 10, 58, 58,
	-176, -232, -232, 59, 365, 365, -231, -231, 60, -178,
	358, 73, 74, 75, -65, -231, -65, -231, -65, -231,
	-71, -65, -65, -65, -36, 162, -65, 80, -232, -232,
	60, 59, -40, 60, -187, 56, -212, 60, -189, 60,
	248, -91, 19, 34, -40, -87, -88, -40, -86, -2,
	-31, 70, -232, -39, -217, 400, -116, 111, -121, -38,
	-215, -128, -217, -217, -127, 120, 161, -125, -40, -142,
	61, -127, -65, -65, -65, -65, 362, -86, 88, -40,
	87, 298, 298, -95, -175, -176, -58, 12, 58, 60,
	-58, -178, -2, -184, 57, 204, 224, -40, 401, -204,
	224, -202, -86, -40, -26, -26, -26, -206, -114, -205,
	-26, -223, -222, 320, 321, 322, 323, 324, 325, 326,
	327, 328, 329, 330, 331, 332, 333, 334, 335, 336,
	337, 338, 339, 340, -114, -114, -114, -200, 40, 210,
	211, 212, -40, -114, -231, -82, -110, 203, 60, -234,
	-234, -234, -234, -114, 120, 269, 33, 122, -234, -234,
	134, 60, 60, -176, -176, -176, 60, 60, 58, 58,
	-129, 58, -176, -176, 58, 58, -40, -65, 73, 175,
	73, 157, 63, 73, -114, -181, -179, -114, 65, -195,
	56, 77, 65, -195, -195, -195, -195, -195, -196, 199,
	200, 65, -197, -196, 65, -89, -162, -162, -164, -176,
	60, -187, -58, -158, 90, -114, 80, 90, -114, 80,
	-159, -159, -178, -177, -65, -65, -65, -36, 80, -65,
	-36, -65, 147, -115, -232, 10, 9, 371, 372, 60,
	225, 377, 378, 168, 379, 183, 380, 381, 298, 9,
	100, 59, 18, 59, -89, -90, -232, -32, 47, -231,
	123, -232, -232, -232, -232, 59, -232, -232, 59, -232,
	19, -232, 59, -232, 19, -231, -35, 357, -40, -58,
	60, 60, -178, -40, -93, -95, -178, -185, 365, -40,
	-202, -203, -204, -204, -202, 401, 88, -90, 87, -19,
	-15, -16, -18, 224, -107, 11, -49, -42, -43, -44,
	-45, -56, -78, -231, -54, 59, -207, -124, 205, 25,
	-100, -126, 226, -104, 309, 308, -115, 319, -102, 307,
	259, 306, -195, 59, -114, 11, 11, 11, 11, -204,
	224, -73, -72, -73, 224, 204, -212, 60, 60, 60,
	183, -58, -159, -159, -176, 60, 60, -176, -176, 60,
	-129, 58, -231, 60, 59, -191, -191, 60, 60, -178,
	-232, -232, -177, -212, -232, -232, -232, -65, -54, -187,
	-162, -162, 365, -61, 16, -61, -61, -61, 65, 378,
	168, 380, 16, 42, -40, -40, -88, -91, -37, -232,
	169, -86, 111, -65, -65, -65, -65, -65, -65, -232,
	63, -178, -58, -178, -177, 60, -58, -177, 399, 401,
	-204, 88, 88, -91, -202, 89, 89, -203, -55, 29,
	-54, -54, -49, -233, 11, 57, 33, 59, -50, -52,
	-51, -53, 46, 50, 52, 47, 48, 49, 53, -124,
	-42, -231, -123, 169, -122, 25, -120, 63, -205, -114,
	206, -129, 59, -100, 226, -101, -105, 310, 312, 90,
	123, -119, -114, 63, 31, 33, -222, 29, -203, -232,
	-203, -178, -178, 358, 60, 60, 60, -212, 60, 60,
	183, -176, -114, -179, -212, -212, 147, -178, -177, -58,
	-58, 58, -212, 56, -212, 56, -61, -61, 382, -120,
	43, -41, 11, 16, -232, -232, -232, -232, -232, -232,
	-34, 100, 365, -177, -178, -178, -40, 88, -204, 401,
	-16, -19, 143, -17, 143, 401, 88, -96, 169, -54,
	-96, 57, -42, -99, -103, -79, -43, -44, -44, -43,
	-44, 46, 46, 46, 51, 46, 51, 46, -51, -120,
	-232, -57, 54, 142, 55, -231, -122, 19, -104, -101,
	59, 311, 313, 314, 56, 77, -40, -115, -143, -164,
	88, 401, -177, -177, -58, -58, -178, -178, 358, 60,
	-232, -54, -177, -212, -164, 9, 10, 123, -58, -42,
	-218, -219, -40, -232, 363, 53, 368, -177, 88, 89,
	-40, -40, -63, 33, 38, -2, -231, -231, -58, -42,
	-58, -41, 59, 90, -47, -46, 56, 57, -48, 56,
	-46, 46, 46, -209, 365, 138, 138, 138, -97, -114,
	-2, -105, -106, 315, 312, 318, 90, 88, -177, -177,
	58, 60, -162, -162, -115, -84, 13, -232, -86, 59,
	43, 364, 369, 143, -202, -19, -19, -98, 56, -99,
	-74, -76, -75, -231, -2, -92, -94, 6, -114, -112,
	-113, -97, -86, -58, -58, -103, -40, -40, 58, -40,
	58, -231, -231, -231, -232, 59, 312, 316, 317, -40,
	-164, -212, -212, -85, 14, 16, -232, -219, 43, 401,
	30, -98, 59, -232, -232, -232, 59, 123, -232, -90,
	-86, -93, -208, -210, 388, 389, 390, 391, 392, 393,
	394, 395, -93, -93, -93, -123, -114, 60, -40, -72,
	365, 88, 157, -76, 38, -2, -231, -94, -114, -90,
	60, 60, 59, -232, -232, -232, -57, 368, 143, 9,
	-74, -2, -210, -209, 369, -99, -232,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 0, -2, 0, 0,
	0, 0, 1, 3, 7, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 921, 0, 921, 921, 501, 502,
	503, 506, 0, 0, 992, 982, 983, 984, 985, 986,
	987, 988, 989, 991, 925, 926, 0, 0, 0, 0,
	0, 924, 0, 0, 227, 279, 279, 279, 927, 928,
	929, 930, 931, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 0, 0, 0, 921, 0, 921, 0,
	844, 0, 0, -2, -2, 0, 0, 934, 0, 615,
	932, 933, 0, 921, 0, 0, 507, 504, 505, 223,
	0, 0, 990, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 0, 235, 392, 388, 239, 240, 241, 242,
	243, 375, 309, 338, 339, 375, 362, 382, 375, 382,
	345, 375, 382, 395, 395, 395, 395, 395, 353, 354,
	355, 356, 357, 358, 359, 0, 0, 329, 375, 375,
	375, 375, 375, 335, 336, 337, 364, 365, 366, 367,
	368, 369, 370, 371, 0, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 377, 327, 377, 379, 379,
	325, 326, 236, 237, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 170, 171, 0, 0, 0,
	0, 0, 0, 0, 25, 0, 27, 224, 0, 993,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 516, 0, 519, 228, 229, 230, 231,
	232, 233, 234, 0, 508, 510, 0, -2, 0, 0,
	0, 0, 0, 1047, -2, -2, 246, 0, 248, 0,
	250, 0, 252, 253, 0, 255, 257, 508, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 394, 390, 389,
	0, 308, 0, 395, 375, 363, 395, 0, 395, 395,
	346, 347, 398, 0, 398, 398, 398, 398, 0, 0,
	385, 385, 332, 333, 334, 0, 320, 0, 377, 328,
	322, 323, 0, 324, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 157, 0, 207, 0, 177, 173, 174,
	175, 172, 0, 0, 846, 0, -2, -2, 935, 922,
	23, 0, 616, 936, 0, 0, 106, 0, 0, 0,
	510, 52, 0, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 921, 0, 0, 0,
	0, 520, 522, 518, 0, 937, 0, 0, 0, 511,
	434, 0, 442, -2, 0, 447, 498, 499, 0, 1136,
	0, 446, 0, 437, 439, 0, 497, 510, 247, 0,
	0, 0, 254, 256, 0, 260, 261, 0, 0, 283,
	0, 0, 280, 686, 687, 0, 689, 690, 691, 692,
	693, 0, 0, 0, 0, 0, 0, 0, 720, 721,
	722, 723, 0, 725, 0, -2, 850, 844, 852, 853,
	854, 855, 856, 857, 858, 635, 636, 0, 0, 902,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 0, 0, 758, 769,
	769, 769, 769, 769, 769, 769, 0, 0, 0, 0,
	0, 281, 282, 393, 238, 391, 244, 0, 398, 395,
	398, 0, 0, 398, 398, 348, 399, 0, 0, 349,
	350, 351, 352, 0, 373, 0, 330, 0, 0, 331,
	0, 0, 321, 0, 0, 0, 0, 0, 0, 0,
	0, 921, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 0, 87, 88,
	511, 0, 0, 63, 64, 78, 0, 510, 56, 0,
	0, 42, 510, 61, -2, 0, 0, 0, 0, 77,
	0, 81, 82, 0, 0, 0, 521, 517, 0, 453,
	375, 375, -2, 0, 873, 873, 873, 873, 0, 466,
	938, 0, 0, 0, 0, 0, 0, 0, 497, 0,
	0, 0, 441, 0, 0, 625, 0, 631, 633, 0,
	0, 0, 0, 435, 436, 438, 440, 444, 497, 0,
	511, 278, 249, 508, 251, 375, 375, 304, 0, 0,
	0, 267, 0, 0, 284, 0, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 688, 0, 0, 711, 712, 713, 714, 715,
	716, 717, 724, 92, 631, 0, 868, 0, 0, 684,
	526, 540, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 0, 834, 0,
	0, 0, 0, 0, 0, 761, 0, 762, 763, 764,
	765, 766, 767, 768, 814, 0, 816, 817, 818, 819,
	820, 821, 824, 825, 826, 827, 828, 831, 0, 540,
	0, 0, 376, 340, 398, 342, 383, 384, 343, 344,
	400, 396, 397, 395, 0, 395, 0, 0, 372, 0,
	380, 0, 0, 0, 0, 0, 448, -2, -2, -2,
	-2, 0, 0, 0, -2, 0, 0, -2, 0, 0,
	208, 209, 205, 178, 176, 581, 582, 0, 0, 847,
	0, 160, 28, 994, 107, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 0, 41, 511,
	0, 73, 74, 510, 62, 80, 0, 0, 515, 523,
	524, 525, 402, 0, 873, 1136, 458, 465, 457, 873,
	0, 461, 874, 875, 462, 463, 464, 0, 0, 939,
	940, 941, 508, 473, 474, 0, 0, 508, 509, 510,
	497, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 630, 1137, 628, 0, 0, 0, 0, 0, 0,
	674, 675, 676, 677, 0, 667, 668, 669, 670, 671,
	672, 673, 632, 0, 657, 0, 0, 0, 625, 445,
	0, 0, 299, 0, 302, 0, 0, 0, 0, 0,
	0, 275, 0, 860, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 708, 828, 719, -2,
	709, 780, 781, 706, 849, 0, 707, 718, 683, 726,
	0, 901, 876, 0, 0, 530, 92, 533, 528, 0,
	0, 0, 0, 542, 548, 544, 0, 846, 848, 0,
	947, 948, -2, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 548, 0, 0, 0, 0, 0, 375, 375,
	785, 375, 379, 788, 789, 790, 375, 793, 795, 796,
	797, 798, 379, 800, 801, 802, 803, 804, 375, 375,
	807, 808, 375, 375, 811, 375, 375, 0, 0, 0,
	0, 0, 0, 537, 842, 837, 0, 0, 844, 0,
	755, 756, 757, 759, 0, 770, 815, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 341, 398, 374,
	398, 386, 387, 0, 0, 0, 0, 0, 623, 0,
	0, 0, 92, 0, 0, 211, 212, 213, 214, 215,
	0, 840, 0, 0, 205, -2, 26, 162, 0, 0,
	31, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 34, 0, 37, 79, 0, 0, 0,
	0, 0, 0, 0, 511, 83, 84, 0, 431, 403,
	0, 405, 0, 423, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 454, 455, 0, 459, 873,
	0, 942, 943, 0, 937, 0, 475, 476, 937, 0,
	0, 0, 0, 0, 0, 489, 844, 0, 0, 0,
	0, 402, 482, 0, 626, 627, 629, 661, 0, 663,
	665, 637, 0, 0, 0, 644, 680, 681, 682, 0,
	0, 0, 0, 0, 678, 0, 649, 651, 652, 653,
	654, 0, 0, 0, 659, 660, 0, 512, 0, 300,
	0, 303, 305, 306, 262, 271, 272, 0, 285, 0,
	0, 685, 880, 0, 0, 868, 94, 0, 531, 532,
	-2, 536, 534, 535, 527, 727, 0, 0, 553, 733,
	545, 549, 0, 551, 552, 0, 540, 946, 0, 0,
	553, 553, 734, 735, 0, 0, 0, 782, 1136, 395,
	786, 787, 791, 792, 794, 799, 805, 806, 809, 810,
	812, 813, 0, 740, 0, 0, 0, 0, 0, 868,
	0, 838, 0, 0, 753, 754, 760, 822, 823, 0,
	0, 832, 771, 772, 773, 774, 360, 361, 378, 381,
	623, 0, 0, 621, 0, 0, 621, 402, 93, 0,
	216, 0, 0, 0, 583, 20, 179, 0, 185, 186,
	187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	868, 0, 138, 139, 526, 526, 526, 0, 526, 0,
	0, 0, 126, 0, 0, 833, 913, 98, 99, 200,
	201, 840, 0, 0, -2, 162, 162, -2, 162, 162,
	0, 995, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 33, 35, 0, 36, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 47, 0, 0,
	401, 0, 406, 0, 0, 0, 409, 0, 424, 411,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	376, 460, 944, 945, 467, 0, 468, 0, 0, 0,
	0, 306, 483, 0, 0, 0, 0, 0, 402, 431,
	307, 662, 664, 666, 638, 0, 640, 0, 642, 0,
	645, 678, 650, 0, 646, 0, 678, 0, 634, 658,
	0, 0, 0, 301, 258, 0, 268, 0, 0, 277,
	0, 89, 0, 0, 877, 869, 870, 873, 876, 92,
	538, 529, 728, 543, 729, 0, 550, 546, 0, 0,
	949, -2, 730, 731, 0, 375, 785, 0, 0, 783,
	784, 0, 0, 0, 0, 0, 0, 835, 752, 843,
	0, 829, 830, 621, 0, 0, 402, 0, 0, 623,
	402, 14, -2, 218, 0, 206, 0, 841, 0, 182,
	0, 0, 876, 0, 923, 0, 0, 114, -2, 116,
	0, 0, 959, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 121, 122, 123, 0, 0, 0,
	0, 0, 0, 202, 202, 204, 0, 0, 161, 163,
	164, 165, 166, -2, -2, -2, 1103, -2, 167, 168,
	29, 39, 937, 0, 0, 0, 65, 67, 0, 0,
	38, 0, 0, 0, 0, 0, 0, 43, 45, 0,
	46, 0, 85, 86, 432, 0, 407, 412, 410, 413,
	425, 426, 414, 415, 416, 417, 418, 419, 420, 427,
	428, 421, 422, 429, 430, 456, 508, 508, 0, 0,
	402, 481, 484, 490, 491, 492, 493, 494, 495, 496,
	0, 0, 431, 937, 631, 631, 631, 647, 0, 679,
	648, 655, 0, 513, 306, 0, 0, 273, 274, 276,
	0, 0, 0, 0, 0, 0, 296, 0, -2, 881,
	0, 0, 0, 0, 872, 880, 95, 0, 539, 0,
	0, 732, 736, 741, 737, 0, 739, 742, 0, 744,
	0, 746, 0, 748, 0, 0, 0, 0, 839, 402,
	621, 402, 431, 622, 0, 621, 431, 18, 0, 217,
	19, 0, 133, 180, 0, 0, 183, 880, 0, 144,
	142, 138, 145, 0, 0, 0, 0, 0, 560, 562,
	563, 564, 596, 0, 598, 0, 0, 0, 120, 597,
	110, 0, 0, 906, 158, 159, 0, 0, 0, -2,
	0, 917, 914, 0, 124, 127, 128, 129, 130, 131,
	0, 198, 203, 0, 0, 206, 49, 402, 402, 54,
	0, 68, 0, 0, 0, 40, 937, 0, 0, 75,
	48, 0, 0, 404, 0, 937, 937, 0, 402, 431,
	485, 487, 478, 480, -2, -2, -2, 656, 0, 259,
	263, 265, 0, 287, 0, 289, 290, 291, 292, 293,
	294, 295, 0, 0, 878, 879, 871, 90, 558, 554,
	0, 0, 547, 0, 0, 0, 0, 0, 775, 751,
	836, 431, 402, 11, 9, 624, 402, 13, 0, 0,
	134, 184, 181, 197, 0, 0, 0, 0, 108, 0,
	614, -2, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 606, 0, 0, 0, 0,
	0, 0, 617, 0, 599, 0, 601, 602, 117, 596,
	0, 118, 0, 111, 0, 113, 147, 0, 0, 0,
	0, 398, 918, 919, 920, 916, 960, 0, 0, 199,
	0, 431, 431, 66, 69, 71, 53, 58, 402, 402,
	0, 0, 0, 408, 469, 470, 0, 431, 937, 486,
	488, 0, 264, 0, 266, 0, 286, 288, 297, 0,
	882, 621, 0, 0, 556, 738, 743, 745, 747, 749,
	0, 0, 0, 8, 12, 431, 219, 21, 135, 0,
	140, 141, 0, 143, 0, 0, 146, 0, 0, 613,
	621, 0, 621, 558, 903, 0, 561, 592, 594, 0,
	589, 604, 605, 607, 0, 609, 0, 611, 612, 565,
	566, 567, 0, 0, 0, 0, 600, 0, 907, 112,
	0, 0, 150, 151, 908, 909, 910, 0, 912, 125,
	132, 0, 50, 51, 70, 72, 431, 431, 76, 57,
	433, 0, 477, 479, 0, 0, 0, 0, 861, 559,
	0, 865, 867, 750, 0, 0, 0, 10, 0, 0,
	0, 0, 895, 0, 0, -2, 0, 0, 868, 621,
	103, 621, 0, 0, 586, 593, 0, 0, 587, 0,
	588, 608, 610, 579, 0, 0, 0, 0, 0, 584,
	-2, 148, 149, 0, 0, 155, 0, 22, 59, 60,
	0, 472, 937, 937, 298, 863, 0, 555, 0, 0,
	776, 0, 779, 136, 0, 0, 144, 96, 0, 895,
	883, 897, 899, 0, 92, 0, 889, -2, 891, 893,
	894, 0, 876, 102, 868, 904, 905, 590, 0, 595,
	0, 0, 0, 0, 598, 0, 152, 153, 154, 911,
	0, 269, 270, 91, 0, 0, 557, 866, 777, 0,
	0, 97, 0, 900, -2, 0, 0, 0, 109, 101,
	876, 0, 0, 569, 571, 572, 573, 574, 575, 576,
	577, 578, 0, 0, 0, 617, 585, 471, 864, 862,
	0, 0, 0, 898, 0, -2, 0, 890, 892, 100,
	591, 568, 0, 618, 619, 620, 567, 0, 137, 0,
	886, 92, 570, 580, 778, 896, -2,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 401,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 402, 3, 403, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:430
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:435
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:436
		{
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:442
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:448
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 8:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:453
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:473
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:493
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 11:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:514
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 12:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:530
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 13:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:547
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:567
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:582
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:593
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:605
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:616
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:632
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:646
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:673
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[4].colIdent},
					TableName: yyDollar[8].tableName,
					Time:      yyDollar[5].str,
					Event:     yyDollar[6].strs,
					Body:      yyDollar[12].blockStatement,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:687
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 24:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:698
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: ColumnType{Type: "enum", EnumValues: yyDollar[7].strs},
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:709
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[4].colIdent.String(),
				},
			}
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:719
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:723
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name: yyDollar[4].colIdent.String(),
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:732
		{
			// Convert table names to multiple Grant statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: GrantPrivilege,
					Grant: &Grant{
						IsGrant:    true,
						Privileges: yyDollar[2].strs,
						TableName:  tableName,
						Grantees:   yyDollar[7].strs,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:753
		{
			// Convert table names to multiple Grant statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: GrantPrivilege,
					Grant: &Grant{
						IsGrant:         true,
						Privileges:      yyDollar[2].strs,
						TableName:       tableName,
						Grantees:        yyDollar[7].strs,
						WithGrantOption: true,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:775
		{
			// Convert table names to multiple Revoke statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: RevokePrivilege,
					Grant: &Grant{
						IsGrant:    false,
						Privileges: yyDollar[2].strs,
						TableName:  tableName,
						Grantees:   yyDollar[7].strs,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:796
		{
			// Convert table names to multiple Revoke statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: RevokePrivilege,
					Grant: &Grant{
						IsGrant:       false,
						Privileges:    yyDollar[2].strs,
						TableName:     tableName,
						Grantees:      yyDollar[7].strs,
						CascadeOption: true,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:820
		{
			yyVAL.statement = nil
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:824
		{
			yyVAL.statement = nil
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:828
		{
			yyVAL.statement = nil
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:832
		{
			yyVAL.statement = nil
		}
	case 36:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:836
		{
			yyVAL.statement = nil
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:840
		{
			yyVAL.statement = nil
		}
	case 38:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:844
		{
			yyVAL.statement = nil
		}
	case 39:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:849
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[5].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 40:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:863
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:877
		{
			yyVAL.statement = nil
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:881
		{
			yyVAL.statement = nil
		}
	case 43:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:885
		{
			yyVAL.statement = nil
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:889
		{
			yyVAL.statement = nil
		}
	case 45:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:893
		{
			yyVAL.statement = nil
		}
	case 46:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:897
		{
			yyVAL.statement = nil
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:901
		{
			yyVAL.statement = nil
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:905
		{
			yyVAL.statement = nil
		}
	case 49:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:909
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:              yyDollar[6].colIdent,
					Unique:            true,
					Primary:           false,
					Constraint:        true,
					ConstraintOptions: yyDollar[11].constraintOptions,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 50:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:925
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Clustered:  true,
					Constraint: true,
					Options:    yyDollar[12].indexOptions,
					Partition:  yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 51:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:943
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Clustered:  false,
					Constraint: true,
					Options:    yyDollar[12].indexOptions,
					Partition:  yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:961
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[3].tableName,
				NewName:    yyDollar[3].tableName,
				ForeignKey: yyDollar[5].foreignKeyDefinition,
			}
		}
	case 53:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:970
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[7].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 54:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:984
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[6].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:998
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    NewColIdent(""),
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1012
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 57:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1021
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 58:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1035
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:              yyDollar[7].colIdent,
					Unique:            true,
					Primary:           false,
					Constraint:        true,
					ConstraintOptions: yyDollar[12].constraintOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 59:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1052
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 60:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1070
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1088
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1097
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1106
		{
			yyVAL.statement = nil
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1110
		{
			yyVAL.statement = nil
		}
	case 65:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1114
		{
			yyVAL.statement = nil
		}
	case 66:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1118
		{
			yyVAL.statement = nil
		}
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1122
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					Exclusions:     yyDollar[9].exclusionPairs,
				},
			}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1134
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					Exclusions:     yyDollar[9].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 69:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1147
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      "GIST",
					Exclusions:     yyDollar[11].exclusionPairs,
				},
			}
		}
	case 70:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1160
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      "GIST",
					Exclusions:     yyDollar[11].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[13].expr),
				},
			}
		}
	case 71:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1174
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      yyDollar[9].colIdent.String(),
					Exclusions:     yyDollar[11].exclusionPairs,
				},
			}
		}
	case 72:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1187
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      yyDollar[9].colIdent.String(),
					Exclusions:     yyDollar[11].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[13].expr),
				},
			}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1201
		{
			yyVAL.statement = nil
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1205
		{
			yyVAL.statement = nil
		}
	case 75:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1209
		{
			yyVAL.statement = nil
		}
	case 76:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1213
		{
			yyVAL.statement = nil
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1217
		{
			yyVAL.statement = nil
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1221
		{
			yyVAL.statement = nil
		}
	case 79:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1225
		{
			yyVAL.statement = nil
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1229
		{
			yyVAL.statement = nil
		}
	case 81:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1235
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     String(yyDollar[4].tableName),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1246
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     String(yyDollar[4].tableName),
					Comment:    "NULL",
				},
			}
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1257
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].colIdent.String(),
					Comment:    string(yyDollar[8].bytes),
				},
			}
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1268
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].colIdent.String(),
					Comment:    "NULL",
				},
			}
		}
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].tableIdent.String() + "." + yyDollar[8].colIdent.String(),
					Comment:    string(yyDollar[10].bytes),
				},
			}
		}
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1290
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].tableIdent.String() + "." + yyDollar[8].colIdent.String(),
					Comment:    "NULL",
				},
			}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1307
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1315
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 91:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1322
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1328
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1332
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1338
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1342
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 96:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1349
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1361
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1373
		{
			yyVAL.str = InsertStr
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1377
		{
			yyVAL.str = ReplaceStr
		}
	case 100:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1383
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 101:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1389
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 102:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1393
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1397
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1402
		{
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1403
		{
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1407
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1411
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1416
		{
			yyVAL.partitions = nil
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1420
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1426
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1430
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1434
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1438
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1444
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1448
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1461
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1465
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1471
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1476
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1480
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1486
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1493
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1500
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1507
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1515
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1525
		{
			yyVAL.str = ""
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1529
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1533
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1537
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1541
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1547
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1554
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1568
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1572
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1576
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1583
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1591
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1601
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1605
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1612
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1622
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1633
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1638
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1643
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1650
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1654
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1665
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1669
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1675
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1679
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1683
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1689
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1693
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1697
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1701
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1707
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1711
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1717
		{
			yyVAL.str = SessionStr
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1721
		{
			yyVAL.str = GlobalStr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1726
		{
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1727
		{
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1731
		{
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1732
		{
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1733
		{
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1734
		{
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1735
		{
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1736
		{
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1737
		{
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1741
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1745
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1749
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1753
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1763
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1767
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1772
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1778
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1782
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1788
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1792
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1797
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1806
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1810
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1819
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1835
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1848
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1858
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1863
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1869
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1870
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1873
		{
			yyVAL.exprs = nil
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1874
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1878
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1883
		{
			yyVAL.empty = struct{}{}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1885
		{
			yyVAL.empty = struct{}{}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1888
		{
			yyVAL.bytes = nil
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1892
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1896
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1901
		{
			yyVAL.bytes = nil
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1905
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1909
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1913
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1917
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1921
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1926
		{
			yyVAL.expr = nil
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1930
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1935
		{
			yyVAL.expr = nil
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1939
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1944
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1948
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1953
		{
			yyVAL.bytes = nil
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1957
		{
			yyVAL.bytes = nil
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1963
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1970
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1976
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1980
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1985
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1989
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1993
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1997
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2001
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2005
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2009
		{
			yyVAL.TableSpec = yyDollar[1].TableSpec
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2016
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2021
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2026
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2032
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2043
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].colIdent.val) + "." + string(yyDollar[3].colIdent.val)}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2053
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2066
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2071
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2076
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2081
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2087
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2092
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2097
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2102
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2107
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2112
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2117
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2122
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2127
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 259:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2136
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2146
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2151
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2156
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 263:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2163
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 264:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2170
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = BoolVal(yyDollar[10].constraintOptions.Deferrable)
			yyDollar[1].columnType.ReferenceInitiallyDeferred = BoolVal(yyDollar[10].constraintOptions.InitiallyDeferred)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 265:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2179
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 266:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2186
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = BoolVal(yyDollar[10].constraintOptions.Deferrable)
			yyDollar[1].columnType.ReferenceInitiallyDeferred = BoolVal(yyDollar[10].constraintOptions.InitiallyDeferred)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2195
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceDeferrable = BoolVal(yyDollar[4].constraintOptions.Deferrable)
			yyDollar[1].columnType.ReferenceInitiallyDeferred = BoolVal(yyDollar[4].constraintOptions.InitiallyDeferred)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2202
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceDeferrable = BoolVal(yyDollar[7].constraintOptions.Deferrable)
			yyDollar[1].columnType.ReferenceInitiallyDeferred = BoolVal(yyDollar[7].constraintOptions.InitiallyDeferred)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 269:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2210
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[12].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = BoolVal(yyDollar[13].constraintOptions.Deferrable)
			yyDollar[1].columnType.ReferenceInitiallyDeferred = BoolVal(yyDollar[13].constraintOptions.InitiallyDeferred)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 270:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2220
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[12].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = BoolVal(yyDollar[13].constraintOptions.Deferrable)
			yyDollar[1].columnType.ReferenceInitiallyDeferred = BoolVal(yyDollar[13].constraintOptions.InitiallyDeferred)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2231
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2236
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 273:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2241
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 274:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2246
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2252
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 276:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2258
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2265
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2272
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2278
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2284
		{
			// Check if it's a simple value that should be stored as Value
			if val, ok := yyDollar[2].expr.(*SQLVal); ok {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: val}
			} else if val, ok := yyDollar[2].expr.(BoolVal); ok {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: NewBoolSQLVal(bool(val))}
			} else {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
			}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2297
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2303
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2309
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2313
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2318
		{
			yyVAL.sequence = &Sequence{}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2322
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2327
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2332
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2337
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2342
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2347
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2352
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2357
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2362
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2367
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2372
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2377
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 298:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2382
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2389
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2393
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2397
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, NewIntVal(yyDollar[3].bytes))
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2401
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2405
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2409
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2413
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2418
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2422
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2428
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2433
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2439
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2443
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2447
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2451
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2455
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2459
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2463
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2467
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2471
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2475
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2481
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2487
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2493
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2499
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2505
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2515
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2520
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2524
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2546
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2568
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2572
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2590
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2594
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2642
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2658
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 361:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2668
		{
			yyVAL.str = ""
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2672
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2678
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2716
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2721
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2726
		{
			yyVAL.optVal = nil
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2730
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2735
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2739
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2747
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2751
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2757
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2765
		{
			yyVAL.optVal = nil
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2773
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2782
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2786
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2790
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2799
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2804
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2808
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2813
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2817
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2821
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2826
		{
			yyVAL.str = ""
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2830
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2834
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2839
		{
			yyVAL.str = ""
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2843
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2847
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2853
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2858
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2862
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2866
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2872
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2876
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2882
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2886
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2892
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2896
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2901
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2905
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2909
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2913
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2917
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2921
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2925
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2929
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2933
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2937
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2941
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2945
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2956
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2960
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2966
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2970
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2976
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2980
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2986
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2996
		{
			yyVAL.indexPartition = nil
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3000
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3004
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3010
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3014
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3018
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3022
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3026
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3030
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3034
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3038
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3042
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3046
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3050
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3054
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3060
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3064
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3070
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3075
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3079
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3083
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3087
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3093
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3097
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3103
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 456:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3108
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: NewIntVal(yyDollar[3].bytes), Direction: yyDollar[5].str}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3113
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3117
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3121
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3125
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3129
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3133
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3137
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3141
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3151
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = yyDollar[3].constraintOptions
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 467:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3157
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = yyDollar[6].constraintOptions
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3165
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = yyDollar[6].constraintOptions
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 469:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3173
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = yyDollar[9].constraintOptions
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 470:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3181
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = yyDollar[9].constraintOptions
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 471:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3191
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 472:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3202
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3217
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3221
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3225
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 477:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3231
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3241
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 479:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3252
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: yyDollar[10].constraintOptions,
			}
		}
	case 480:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3263
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:           yyDollar[4].indexColumns,
				Options:           yyDollar[6].indexOptions,
				Partition:         yyDollar[7].indexPartition,
				ConstraintOptions: yyDollar[8].constraintOptions,
			}
		}
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3275
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3284
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3293
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Exclusions:     yyDollar[5].exclusionPairs,
			}
		}
	case 484:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3300
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 485:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "GIST",
				Exclusions:     yyDollar[7].exclusionPairs,
			}
		}
	case 486:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3316
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "GIST",
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3325
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
			}
		}
	case 488:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3333
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3344
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3348
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3354
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: "="}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3358
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: yyDollar[3].colIdent.String()}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3362
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: "&&"}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3366
		{
			// For expressions, we'll use a special column name to indicate it's an expression
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: "="}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3371
		{
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: yyDollar[3].colIdent.String()}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3375
		{
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: "&&"}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3381
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3385
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3389
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3395
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3399
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3403
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3407
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3411
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3415
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3421
		{
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3422
		{
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3426
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3430
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3435
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3442
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3446
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3453
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3457
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3472
		{
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3473
		{
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3477
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3481
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3485
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3491
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3495
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3499
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3504
		{
			setAllowComments(yylex, true)
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3508
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3514
		{
			yyVAL.bytes2 = nil
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3518
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3524
		{
			yyVAL.str = UnionStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3528
		{
			yyVAL.str = UnionAllStr
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3532
		{
			yyVAL.str = UnionDistinctStr
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3537
		{
			yyVAL.str = ""
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3541
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3545
		{
			yyVAL.str = SQLCacheStr
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3550
		{
			yyVAL.str = ""
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.str = DistinctStr
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3559
		{
			yyVAL.str = ""
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3563
		{
			yyVAL.str = StraightJoinHint
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3568
		{
			yyVAL.selectExprs = nil
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3572
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3588
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3592
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3596
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3600
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3605
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3609
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3613
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3620
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3625
		{
			yyVAL.overExpr = nil
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3629
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3633
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3637
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 557:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3641
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3646
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3650
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3656
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3660
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3670
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3674
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3678
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3683
		{
			yyVAL.strs = []string{}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3687
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3693
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3697
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3703
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3707
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3711
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3715
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3719
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3723
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3727
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3731
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3737
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 580:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3741
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3747
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3752
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3756
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3762
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3766
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3779
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3783
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3791
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3797
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3799
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3803
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3805
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3809
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3811
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3814
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3816
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3819
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3823
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3827
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3834
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3840
		{
			yyVAL.str = JoinStr
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3844
		{
			yyVAL.str = JoinStr
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3848
		{
			yyVAL.str = JoinStr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3854
		{
			yyVAL.str = StraightJoinStr
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3860
		{
			yyVAL.str = LeftJoinStr
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3864
		{
			yyVAL.str = LeftJoinStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.str = RightJoinStr
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.str = RightJoinStr
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3878
		{
			yyVAL.str = NaturalJoinStr
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3882
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3892
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3896
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3902
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3906
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3911
		{
			yyVAL.indexHints = nil
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3915
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3928
		{
			yyVAL.expr = nil
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3932
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.columns = nil
		}
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3941
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3947
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3951
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3955
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3963
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3971
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3975
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3981
		{
			yyVAL.str = ""
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3991
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4001
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4005
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4009
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, All: true}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4013
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 641:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4017
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4021
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 643:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4025
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4029
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4033
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4037
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 647:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4045
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4049
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4053
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixRegexStr, Right: yyDollar[3].expr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixRegexCiStr, Right: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixNotRegexStr, Right: yyDollar[3].expr}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4069
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixNotRegexCiStr, Right: yyDollar[3].expr}
		}
	case 655:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4073
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 656:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4077
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4081
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4086
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4090
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4094
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4100
		{
			yyVAL.str = IsNullStr
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.str = IsNotNullStr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.str = IsTrueStr
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4112
		{
			yyVAL.str = IsNotTrueStr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4116
		{
			yyVAL.str = IsFalseStr
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4120
		{
			yyVAL.str = IsNotFalseStr
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.str = EqualStr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4130
		{
			yyVAL.str = LessThanStr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4134
		{
			yyVAL.str = GreaterThanStr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4138
		{
			yyVAL.str = LessEqualStr
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.str = GreaterEqualStr
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4146
		{
			yyVAL.str = NotEqualStr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4150
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4154
		{
			yyVAL.str = PosixRegexStr
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4158
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4162
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4166
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4171
		{
			yyVAL.expr = nil
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4175
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4195
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4205
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4219
		{
			// PostgreSQL date literal syntax: DATE '2022-01-01'
			// This is syntactic sugar for '2022-01-01', so just use the string value
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4225
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4229
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4233
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4237
		{
			yyVAL.expr = yyDollar[1].arrayConstructor
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4241
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4245
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4249
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4253
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4257
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4261
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4265
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4269
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4273
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4277
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4281
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4285
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4289
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4293
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4297
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4301
		{
			colType := yyDollar[3].columnType
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: &colType}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4306
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 710:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4310
		{
			timestampType := ColumnType{Type: "timestamp", Timezone: BoolVal(true)}
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: &timestampType}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4315
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4319
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4323
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4331
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4345
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4349
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4353
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4361
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4369
		{
			// Convert ConvertType to ColumnType
			convertType := yyDollar[3].convertType
			colType := ColumnType{
				Type:    convertType.Type,
				Length:  convertType.Length,
				Scale:   convertType.Scale,
				Charset: convertType.Charset,
			}
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: &colType}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4385
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4389
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4393
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4403
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 728:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4407
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4411
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 730:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4415
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 731:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4419
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 732:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4423
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 733:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4427
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 734:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4437
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4441
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 736:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4445
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 737:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4450
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 738:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4454
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 739:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4458
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4462
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("coalesce"), Exprs: yyDollar[3].selectExprs}
		}
	case 741:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4466
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 742:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4470
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 743:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4474
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 744:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4478
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 745:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4482
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 746:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4486
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 747:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4490
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 748:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4494
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 749:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4498
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 750:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4502
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 751:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4506
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4510
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4514
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4519
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4523
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4527
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4531
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4542
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 760:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4550
		{
			yyVAL.expr = &FuncExpr{
				Name:  NewColIdent("current_timestamp"),
				Exprs: SelectExprs{&AliasedExpr{Expr: NewIntVal(yyDollar[3].bytes)}},
			}
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4557
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4561
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4565
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4570
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4575
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4580
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4585
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4589
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4603
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 772:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4607
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4611
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 774:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4615
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4621
		{
			yyVAL.str = ""
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4625
		{
			yyVAL.str = BooleanModeStr
		}
	case 777:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4629
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 778:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4633
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4637
		{
			yyVAL.str = QueryExpansionStr
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4643
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4647
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4653
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4657
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4661
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4665
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4669
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4673
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4679
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4683
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4687
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4691
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4695
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4699
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4703
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4707
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4711
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4715
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4719
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4723
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4727
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4731
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4735
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4739
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4743
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4747
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4751
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4755
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4759
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4763
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4767
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4771
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4785
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4789
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4793
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4797
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4801
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4805
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4809
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4813
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4817
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type + "[]"}
		}
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + "[]"}
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4825
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4829
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4833
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4837
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4841
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 829:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4845
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " with time zone"}
		}
	case 830:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4849
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " without time zone"}
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4853
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].colIdent.val}
		}
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4857
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].colIdent.val) + "." + string(yyDollar[3].colIdent.val)}
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4862
		{
			yyVAL.expr = nil
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4866
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4871
		{
			yyVAL.str = string("")
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4875
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4881
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4885
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 839:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4891
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4896
		{
			yyVAL.empty = struct{}{}
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4898
		{
			yyVAL.empty = struct{}{}
		}
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4901
		{
			yyVAL.expr = nil
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4905
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4911
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4915
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4919
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 847:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4923
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4929
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4935
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4939
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4944
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4949
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4953
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4957
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4961
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4965
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4969
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4973
		{
			yyVAL.expr = &NullVal{}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4979
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4983
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4988
		{
			yyVAL.exprs = nil
		}
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4992
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4997
		{
			yyVAL.expr = nil
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5001
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5007
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5011
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5017
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5022
		{
			yyVAL.orderBy = nil
		}
	case 869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5026
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5032
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5036
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5042
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5047
		{
			yyVAL.str = AscScr
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5051
		{
			yyVAL.str = AscScr
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5055
		{
			yyVAL.str = DescScr
		}
	case 876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5060
		{
			yyVAL.limit = nil
		}
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5064
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5068
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5072
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5077
		{
			yyVAL.str = ""
		}
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5081
		{
			yyVAL.str = ForUpdateStr
		}
	case 882:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5085
		{
			yyVAL.str = ShareModeStr
		}
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5098
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5102
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5106
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 886:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5111
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 887:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5115
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 888:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5119
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5126
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5130
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5136
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5140
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5144
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5148
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5153
		{
			yyVAL.updateExprs = nil
		}
	case 896:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5157
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5163
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 898:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5167
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5173
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5177
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5183
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5189
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5199
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5203
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5209
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5215
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5219
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5225
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5229
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5233
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 911:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5238
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5242
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5248
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5254
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5261
		{
			yyVAL.bytes = []byte("charset")
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5268
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5272
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5276
		{
			yyVAL.expr = &Default{}
		}
	case 921:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5281
		{
			yyVAL.empty = struct{}{}
		}
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5283
		{
			yyVAL.empty = struct{}{}
		}
	case 923:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5286
		{
			yyVAL.str = ""
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5288
		{
			yyVAL.str = IgnoreStr
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5292
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5296
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5303
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5307
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5311
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5315
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5321
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5325
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5330
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5337
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 937:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5343
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        false,
				InitiallyDeferred: false,
			}
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5350
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        true,
				InitiallyDeferred: false,
			}
		}
	case 939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5357
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        false,
				InitiallyDeferred: false,
			}
		}
	case 940:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5364
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        true,
				InitiallyDeferred: true,
			}
		}
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5371
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        false,
				InitiallyDeferred: false,
			}
		}
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5378
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        true,
				InitiallyDeferred: true,
			}
		}
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5385
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        true,
				InitiallyDeferred: false,
			}
		}
	case 944:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5392
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        false,
				InitiallyDeferred: false,
			}
		}
	case 945:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5399
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        false,
				InitiallyDeferred: true,
			}
		}
	case 946:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5409
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5413
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: nil}
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5420
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 949:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5424
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5431
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5435
		{
			yyVAL.arrayElement = NewIntVal(yyDollar[1].bytes)
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5439
		{
			yyVAL.arrayElement = NewFloatVal(yyDollar[1].bytes)
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5443
		{
			yyVAL.arrayElement = NewHexNum(yyDollar[1].bytes)
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5447
		{
			yyVAL.arrayElement = NewValArg(yyDollar[1].bytes)
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5451
		{
			yyVAL.arrayElement = &NullVal{}
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5455
		{
			yyVAL.arrayElement = BoolVal(true)
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5459
		{
			yyVAL.arrayElement = BoolVal(false)
		}
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5463
		{
			// Convert ConvertType to ColumnType
			convertType := yyDollar[3].convertType
			colType := ColumnType{
				Type:    convertType.Type,
				Length:  convertType.Length,
				Scale:   convertType.Scale,
				Charset: convertType.Charset,
			}
			yyVAL.arrayElement = &CastExpr{Expr: yyDollar[1].expr, Type: &colType}
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5477
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 960:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5481
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5510
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5514
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5518
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5522
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5526
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5530
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5534
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5538
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5542
		{
			yyVAL.str = "ALL PRIVILEGES"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5546
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5552
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5556
		{
			yyVAL.strs = append(yyVAL.strs, yyDollar[3].str)
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5562
		{
			yyVAL.strs = []string{yyDollar[1].colIdent.String()}
		}
	case 995:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5566
		{
			yyVAL.strs = append(yyVAL.strs, yyDollar[3].colIdent.String())
		}
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5723
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5732
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
