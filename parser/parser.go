// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const POSIX_REGEX = 57435
const POSIX_REGEX_CI = 57436
const POSIX_NOT_REGEX = 57437
const POSIX_NOT_REGEX_CI = 57438
const SHIFT_LEFT = 57439
const SHIFT_RIGHT = 57440
const DIV = 57441
const MOD = 57442
const UNARY = 57443
const COLLATE = 57444
const BINARY = 57445
const UNDERSCORE_BINARY = 57446
const INTERVAL = 57447
const JSON_EXTRACT_OP = 57448
const JSON_UNQUOTE_EXTRACT_OP = 57449
const CREATE = 57450
const ALTER = 57451
const DROP = 57452
const RENAME = 57453
const ANALYZE = 57454
const ADD = 57455
const SCHEMA = 57456
const TABLE = 57457
const INDEX = 57458
const MATERIALIZED = 57459
const VIEW = 57460
const TO = 57461
const IGNORE = 57462
const IF = 57463
const PRIMARY = 57464
const COLUMN = 57465
const CONSTRAINT = 57466
const REFERENCES = 57467
const SPATIAL = 57468
const FULLTEXT = 57469
const FOREIGN = 57470
const KEY_BLOCK_SIZE = 57471
const POLICY = 57472
const WHILE = 57473
const UNIQUE = 57474
const KEY = 57475
const SHOW = 57476
const DESCRIBE = 57477
const EXPLAIN = 57478
const DATE = 57479
const ESCAPE = 57480
const REPAIR = 57481
const OPTIMIZE = 57482
const TRUNCATE = 57483
const MAXVALUE = 57484
const PARTITION = 57485
const REORGANIZE = 57486
const LESS = 57487
const THAN = 57488
const PROCEDURE = 57489
const TRIGGER = 57490
const TYPE = 57491
const STATUS = 57492
const VARIABLES = 57493
const RESTRICT = 57494
const CASCADE = 57495
const NO = 57496
const ACTION = 57497
const PERMISSIVE = 57498
const RESTRICTIVE = 57499
const PUBLIC = 57500
const CURRENT_USER = 57501
const SESSION_USER = 57502
const PAD_INDEX = 57503
const FILLFACTOR = 57504
const IGNORE_DUP_KEY = 57505
const STATISTICS_NORECOMPUTE = 57506
const STATISTICS_INCREMENTAL = 57507
const ALLOW_ROW_LOCKS = 57508
const ALLOW_PAGE_LOCKS = 57509
const BEFORE = 57510
const AFTER = 57511
const EACH = 57512
const ROW = 57513
const SCROLL = 57514
const CURSOR = 57515
const OPEN = 57516
const CLOSE = 57517
const FETCH = 57518
const PRIOR = 57519
const FIRST = 57520
const LAST = 57521
const DEALLOCATE = 57522
const INSTEAD = 57523
const OF = 57524
const DEFERRABLE = 57525
const INITIALLY = 57526
const IMMEDIATE = 57527
const DEFERRED = 57528
const CONCURRENTLY = 57529
const SQL = 57530
const SECURITY = 57531
const BEGIN = 57532
const START = 57533
const TRANSACTION = 57534
const COMMIT = 57535
const ROLLBACK = 57536
const BIT = 57537
const TINYINT = 57538
const SMALLINT = 57539
const SMALLSERIAL = 57540
const MEDIUMINT = 57541
const INT = 57542
const INTEGER = 57543
const SERIAL = 57544
const BIGINT = 57545
const BIGSERIAL = 57546
const INTNUM = 57547
const REAL = 57548
const DOUBLE = 57549
const PRECISION = 57550
const FLOAT_TYPE = 57551
const DECIMAL = 57552
const NUMERIC = 57553
const SMALLMONEY = 57554
const MONEY = 57555
const TIME = 57556
const TIMESTAMP = 57557
const DATETIME = 57558
const YEAR = 57559
const DATETIMEOFFSET = 57560
const DATETIME2 = 57561
const SMALLDATETIME = 57562
const CHAR = 57563
const VARCHAR = 57564
const VARYING = 57565
const BOOL = 57566
const CHARACTER = 57567
const VARBINARY = 57568
const NCHAR = 57569
const NVARCHAR = 57570
const NTEXT = 57571
const UUID = 57572
const TEXT = 57573
const TINYTEXT = 57574
const MEDIUMTEXT = 57575
const LONGTEXT = 57576
const CITEXT = 57577
const BLOB = 57578
const TINYBLOB = 57579
const MEDIUMBLOB = 57580
const LONGBLOB = 57581
const JSON = 57582
const JSONB = 57583
const ENUM = 57584
const GEOMETRY = 57585
const POINT = 57586
const LINESTRING = 57587
const POLYGON = 57588
const GEOMETRYCOLLECTION = 57589
const MULTIPOINT = 57590
const MULTILINESTRING = 57591
const MULTIPOLYGON = 57592
const VARIADIC = 57593
const ARRAY = 57594
const NOW = 57595
const GETDATE = 57596
const BPCHAR = 57597
const TEXT_PATTERN_OPS = 57598
const NULLX = 57599
const AUTO_INCREMENT = 57600
const APPROXNUM = 57601
const SIGNED = 57602
const UNSIGNED = 57603
const ZEROFILL = 57604
const ZONE = 57605
const AUTOINCREMENT = 57606
const DATABASES = 57607
const TABLES = 57608
const VSCHEMA_TABLES = 57609
const EXTENDED = 57610
const FULL = 57611
const PROCESSLIST = 57612
const NAMES = 57613
const CHARSET = 57614
const GLOBAL = 57615
const SESSION = 57616
const ISOLATION = 57617
const LEVEL = 57618
const READ = 57619
const WRITE = 57620
const ONLY = 57621
const REPEATABLE = 57622
const COMMITTED = 57623
const UNCOMMITTED = 57624
const SERIALIZABLE = 57625
const NEW = 57626
const CONCAT_NULL_YIELDS_NULL = 57627
const CURSOR_CLOSE_ON_COMMIT = 57628
const QUOTED_IDENTIFIER = 57629
const ARITHABORT = 57630
const FMTONLY = 57631
const NOCOUNT = 57632
const NOEXEC = 57633
const NUMERIC_ROUNDABORT = 57634
const ANSI_DEFAULTS = 57635
const ANSI_NULL_DFLT_OFF = 57636
const ANSI_NULL_DFLT_ON = 57637
const ANSI_NULLS = 57638
const ANSI_PADDING = 57639
const ANSI_WARNINGS = 57640
const FORCEPLAN = 57641
const SHOWPLAN_ALL = 57642
const SHOWPLAN_TEXT = 57643
const SHOWPLAN_XML = 57644
const IMPLICIT_TRANSACTIONS = 57645
const REMOTE_PROC_TRANSACTIONS = 57646
const XACT_ABORT = 57647
const CURRENT_TIMESTAMP = 57648
const DATABASE = 57649
const CURRENT_DATE = 57650
const CURRENT_TIME = 57651
const LOCALTIME = 57652
const LOCALTIMESTAMP = 57653
const UTC_DATE = 57654
const UTC_TIME = 57655
const UTC_TIMESTAMP = 57656
const REPLACE = 57657
const CONVERT = 57658
const CAST = 57659
const SUBSTR = 57660
const SUBSTRING = 57661
const GROUP_CONCAT = 57662
const SEPARATOR = 57663
const INHERIT = 57664
const LEAD = 57665
const LAG = 57666
const MATCH = 57667
const AGAINST = 57668
const BOOLEAN = 57669
const LANGUAGE = 57670
const WITH = 57671
const WITHOUT = 57672
const PARSER = 57673
const QUERY = 57674
const EXPANSION = 57675
const UNUSED = 57676
const VIRTUAL = 57677
const STORED = 57678
const GENERATED = 57679
const ALWAYS = 57680
const IDENTITY = 57681
const SEQUENCE = 57682
const INCREMENT = 57683
const MINVALUE = 57684
const CACHE = 57685
const CYCLE = 57686
const OWNED = 57687
const NONE = 57688
const CLUSTERED = 57689
const NONCLUSTERED = 57690
const REPLICATION = 57691
const COLUMNSTORE = 57692
const INCLUDE = 57693
const HOLDLOCK = 57694
const NOLOCK = 57695
const NOWAIT = 57696
const PAGLOCK = 57697
const ROWLOCK = 57698
const TABLELOCK = 57699
const DEFINER = 57700
const INVOKER = 57701
const TYPECAST = 57702
const CHECK = 57703
const OVER = 57704

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	133, 398,
	-2, 147,
	-1, 399,
	61, 368,
	-2, 365,
	-1, 427,
	122, 794,
	-2, 238,
	-1, 447,
	122, 793,
	-2, 788,
	-1, 544,
	122, 794,
	-2, 238,
	-1, 566,
	269, 803,
	-2, 701,
	-1, 614,
	269, 803,
	-2, 438,
	-1, 646,
	5, 36,
	-2, 13,
	-1, 652,
	5, 36,
	-2, 15,
	-1, 790,
	269, 803,
	-2, 438,
	-1, 950,
	122, 796,
	-2, 792,
	-1, 960,
	269, 803,
	-2, 307,
	-1, 1035,
	269, 803,
	-2, 438,
	-1, 1095,
	60, 99,
	-2, 196,
	-1, 1098,
	60, 99,
	-2, 196,
	-1, 1154,
	5, 37,
	-2, 569,
	-1, 1229,
	5, 36,
	-2, 14,
	-1, 1283,
	60, 99,
	-2, 167,
	-1, 1415,
	89, 790,
	-2, 778,
	-1, 1504,
	57, 50,
	59, 50,
	-2, 52,
	-1, 1670,
	5, 36,
	-2, 749,
	-1, 1695,
	5, 36,
	-2, 59,
	-1, 1768,
	5, 37,
	-2, 750,
	-1, 1799,
	5, 36,
	-2, 752,
	-1, 1823,
	5, 37,
	-2, 753,
}

const yyPrivate = 57344

const yyLast = 9444

var yyAct = [...]int16{
	546, 1599, 1688, 1777, 1617, 527, 1725, 556, 1726, 753,
	1722, 1527, 30, 1385, 840, 1047, 659, 39, 40, 1661,
	1010, 1066, 1600, 1525, 1586, 1539, 1693, 57, 1529, 1540,
	1409, 63, 63, 63, 1514, 125, 128, 867, 864, 1395,
	1063, 1412, 1592, 1680, 1406, 1246, 1392, 1223, 461, 1218,
	1243, 1150, 855, 879, 1043, 26, 30, 388, 1299, 894,
	391, 959, 752, 934, 1396, 204, 1282, 681, 1142, 993,
	1007, 641, 56, 813, 640, 1028, 538, 949, 605, 996,
	518, 222, 817, 907, 188, 1202, 1078, 525, 58, 400,
	236, 780, 64, 59, 394, 1106, 504, 526, 424, 133,
	153, 237, 426, 171, 123, 124, 432, 1323, 148, 450,
	47, 1656, 190, 1068, 947, 1388, 707, 706, 716, 717,
	709, 710, 711, 712, 713, 714, 715, 708, 228, 1789,
	719, 1638, 1589, 1235, 9, 1203, 186, 1496, 719, 33,
	511, 63, 771, 206, 207, 208, 209, 129, 385, 131,
	512, 1778, 1779, 1780, 1781, 1782, 1783, 142, 844, 1044,
	395, 711, 712, 713, 714, 715, 708, 708, 244, 719,
	719, 606, 1102, 412, 232, 233, 49, 401, 402, 799,
	589, 649, 554, 1091, 1081, 1080, 687, 443, 592, 383,
	50, 51, 44, 1111, 45, 1082, 1347, 1348, 1825, 247,
	1758, 43, 224, 1015, 1016, 422, 1821, 649, 1083, 1091,
	1081, 1080, 1714, 473, 474, 150, 1689, 1813, 1469, 245,
	1380, 1082, 1110, 1145, 189, 1757, 1337, 480, 1131, 1462,
	43, 52, 1748, 1749, 1083, 1713, 43, 1349, 1747, 1213,
	44, 416, 45, 1541, 493, 1542, 649, 32, 1091, 1081,
	1080, 447, 1627, 45, 1476, 465, 466, 467, 468, 1699,
	1082, 454, 1698, 436, 456, 1700, 459, 460, 1446, 702,
	830, 705, 33, 1083, 31, 1628, 1629, 720, 721, 722,
	723, 724, 725, 726, 434, 703, 704, 701, 727, 728,
	729, 730, 707, 706, 716, 717, 709, 710, 711, 712,
	713, 714, 715, 708, 829, 452, 719, 192, 747, 43,
	205, 1004, 43, 1089, 43, 43, 197, 43, 1320, 837,
	633, 440, 632, 1088, 246, 43, 194, 220, 1812, 43,
	1331, 217, 472, 1166, 1164, 1753, 1353, 1640, 469, 1089,
	506, 492, 1428, 1233, 167, 130, 1707, 1706, 1355, 1088,
	160, 1643, 159, 1559, 163, 164, 166, 36, 1657, 1644,
	161, 168, 491, 1535, 242, 43, 1084, 1085, 1087, 446,
	885, 1641, 1086, 437, 1232, 439, 438, 398, 1089, 513,
	1556, 126, 385, 1062, 895, 1350, 33, 694, 1088, 718,
	135, 505, 1084, 1085, 1087, 401, 402, 718, 1086, 709,
	710, 711, 712, 713, 714, 715, 708, 1235, 43, 719,
	591, 1593, 43, 716, 717, 709, 710, 711, 712, 713,
	714, 715, 708, 501, 135, 719, 443, 37, 718, 718,
	1322, 1084, 1085, 1087, 1796, 655, 656, 1086, 706, 716,
	717, 709, 710, 711, 712, 713, 714, 715, 708, 399,
	221, 719, 1401, 666, 1475, 718, 1477, 1272, 1293, 33,
	496, 134, 503, 33, 166, 689, 168, 167, 498, 1565,
	667, 42, 1558, 688, 415, 146, 414, 800, 1103, 1104,
	497, 409, 643, 594, 168, 396, 514, 530, 407, 684,
	862, 502, 660, 510, 1578, 664, 165, 668, 588, 1468,
	143, 385, 436, 619, 590, 621, 145, 1092, 624, 625,
	607, 205, 1111, 1820, 1342, 669, 593, 505, 841, 166,
	595, 620, 1105, 434, 602, 149, 1712, 33, 604, 127,
	445, 444, 1530, 1092, 679, 1351, 1352, 1354, 1356, 1357,
	27, 679, 672, 485, 421, 1751, 475, 646, 661, 652,
	471, 477, 506, 48, 848, 1754, 136, 137, 642, 38,
	167, 1692, 25, 698, 1691, 718, 1690, 35, 44, 138,
	1532, 647, 1092, 647, 1618, 1620, 686, 168, 34, 227,
	53, 1498, 230, 662, 234, 235, 46, 241, 693, 162,
	136, 137, 658, 663, 499, 377, 651, 379, 660, 380,
	670, 1817, 690, 138, 41, 868, 697, 63, 446, 6,
	7, 1273, 1274, 1275, 797, 20, 1771, 15, 385, 870,
	1637, 737, 738, 748, 816, 682, 683, 685, 1659, 1370,
	16, 1544, 23, 1359, 808, 418, 868, 1152, 643, 834,
	1148, 1032, 627, 751, 647, 750, 660, 617, 17, 18,
	870, 141, 463, 462, 1701, 795, 1678, 1619, 397, 824,
	405, 406, 839, 1480, 446, 43, 861, 1528, 718, 825,
	863, 1543, 43, 785, 786, 1122, 914, 505, 479, 793,
	401, 402, 483, 1121, 718, 815, 821, 823, 695, 591,
	912, 913, 911, 505, 869, 826, 1120, 828, 696, 695,
	628, 434, 803, 1119, 697, 1427, 696, 695, 1339, 908,
	718, 1118, 833, 846, 642, 697, 773, 774, 775, 776,
	777, 778, 779, 697, 1372, 869, 871, 872, 873, 874,
	875, 876, 877, 1029, 1117, 1174, 939, 647, 944, 944,
	1116, 938, 882, 32, 1114, 1704, 946, 886, 880, 881,
	1064, 385, 385, 997, 858, 698, 887, 871, 872, 873,
	874, 875, 876, 877, 892, 1371, 1100, 939, 33, 33,
	1098, 1031, 998, 878, 696, 695, 884, 696, 695, 889,
	393, 393, 144, 888, 1341, 696, 695, 696, 695, 696,
	695, 697, 948, 951, 697, 1011, 1097, 820, 820, 820,
	696, 695, 697, 997, 697, 1183, 697, 930, 950, 822,
	932, 933, 786, 139, 1158, 1096, 1157, 697, 955, 1030,
	446, 647, 43, 1030, 1300, 942, 945, 956, 957, 883,
	392, 198, 1196, 992, 43, 19, 696, 695, 1300, 643,
	1228, 1419, 647, 990, 991, 1301, 411, 21, 22, 1011,
	24, 696, 695, 697, 393, 393, 1577, 1065, 1576, 1301,
	1005, 1095, 1008, 1009, 1006, 1132, 1133, 1134, 697, 1061,
	804, 428, 429, 430, 1470, 1036, 798, 1037, 404, 433,
	431, 441, 442, 811, 1530, 1023, 781, 404, 453, 910,
	44, 505, 45, 1021, 866, 696, 695, 899, 901, 902,
	410, 810, 1502, 1108, 201, 900, 453, 203, 1474, 1473,
	458, 1472, 697, 1045, 457, 642, 1302, 1298, 940, 908,
	44, 783, 1532, 1471, 1574, 1109, 1391, 1094, 453, 1051,
	1019, 832, 1130, 246, 44, 644, 45, 1548, 1151, 820,
	820, 831, 657, 820, 820, 820, 183, 601, 478, 940,
	476, 449, 186, 187, 33, 547, 943, 545, 549, 550,
	551, 552, 1127, 749, 32, 548, 553, 33, 649, 1547,
	1115, 827, 820, 820, 820, 820, 44, 174, 45, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 33,
	470, 31, 181, 404, 169, 1138, 809, 820, 749, 447,
	784, 45, 170, 44, 44, 45, 1532, 417, 66, 782,
	733, 935, 33, 936, 788, 787, 33, 649, 1031, 1112,
	404, 446, 748, 44, 937, 45, 856, 698, 1806, 1805,
	1030, 856, 1804, 385, 1516, 1519, 1520, 1521, 1517, 626,
	1518, 1522, 643, 505, 1681, 1682, 1163, 587, 1192, 1792,
	1746, 698, 1770, 698, 1192, 1715, 1167, 676, 1647, 698,
	177, 586, 172, 182, 1180, 1225, 1511, 698, 557, 404,
	179, 178, 33, 1194, 948, 1182, 515, 435, 440, 676,
	1561, 676, 1560, 1242, 841, 1268, 1269, 1270, 1508, 1236,
	950, 408, 835, 1237, 1362, 1210, 1283, 1095, 1095, 1283,
	1095, 1095, 505, 505, 847, 1204, 1281, 1201, 1294, 1209,
	1206, 67, 1297, 1216, 1212, 1226, 1211, 1199, 642, 1207,
	1208, 856, 1487, 1229, 941, 1227, 1011, 505, 1719, 698,
	437, 1198, 439, 438, 1509, 1587, 1507, 676, 1442, 647,
	952, 954, 1192, 1441, 1438, 1437, 1310, 647, 1296, 385,
	676, 1432, 1040, 385, 676, 1431, 1000, 1001, 1002, 1039,
	1003, 676, 1363, 1284, 1285, 1286, 1287, 1288, 1314, 1276,
	1279, 123, 1723, 1289, 1290, 1677, 820, 1303, 1304, 1305,
	1306, 1307, 1186, 1677, 1013, 649, 676, 1312, 1313, 909,
	1321, 1308, 1309, 1343, 1325, 1338, 175, 1214, 1311, 1024,
	698, 1022, 176, 1025, 1026, 1038, 950, 820, 1316, 1033,
	1020, 1034, 1668, 517, 836, 246, 660, 1669, 820, 1326,
	1192, 1191, 1328, 1596, 446, 1507, 1315, 1330, 812, 598,
	1324, 403, 1366, 1587, 1059, 805, 1332, 404, 1238, 1239,
	1240, 1375, 1244, 63, 1511, 385, 676, 1129, 856, 1046,
	953, 698, 1364, 1389, 856, 1014, 1368, 676, 893, 676,
	675, 636, 635, 649, 1394, 630, 631, 630, 629, 1178,
	1404, 1367, 1420, 55, 54, 184, 43, 185, 1374, 1128,
	1510, 1024, 1176, 841, 1283, 1231, 1217, 1192, 1093, 802,
	857, 490, 505, 505, 1390, 1798, 623, 622, 618, 180,
	489, 1677, 1766, 490, 1418, 649, 1511, 953, 1511, 649,
	1626, 1091, 1081, 1080, 1536, 404, 1687, 1177, 1402, 1373,
	1024, 1159, 856, 1082, 490, 1146, 1147, 1024, 676, 699,
	1175, 246, 801, 1429, 638, 637, 1083, 634, 404, 1741,
	1739, 1710, 1575, 1154, 1155, 1156, 1384, 1386, 194, 1387,
	1435, 1443, 1516, 1519, 1520, 1521, 1517, 404, 1518, 1522,
	385, 1681, 1682, 1433, 1434, 1292, 1291, 754, 1215, 1439,
	1440, 223, 1126, 1481, 1125, 1447, 765, 1101, 1042, 1041,
	1179, 1018, 890, 860, 838, 794, 1185, 520, 692, 645,
	1425, 1811, 613, 1187, 1188, 612, 1189, 1190, 610, 909,
	1483, 1325, 1485, 1534, 1465, 1497, 796, 597, 385, 516,
	1444, 1200, 481, 1466, 1467, 1546, 218, 423, 419, 390,
	211, 1493, 43, 43, 818, 1494, 225, 226, 1378, 210,
	199, 11, 494, 1099, 1723, 1107, 505, 1563, 1505, 1500,
	1552, 1089, 1554, 1684, 1195, 29, 639, 482, 1495, 1553,
	1361, 1088, 1537, 1533, 229, 132, 1611, 1609, 1686, 1608,
	1486, 1612, 1610, 1607, 1489, 1550, 1613, 1793, 1520, 1521,
	1555, 1056, 1057, 1756, 1585, 1490, 1564, 767, 389, 1549,
	464, 1566, 1219, 600, 1764, 596, 1551, 647, 378, 151,
	1524, 880, 881, 243, 1084, 1085, 1087, 1220, 1060, 1499,
	1086, 891, 599, 488, 608, 896, 897, 1562, 486, 484,
	140, 939, 614, 615, 616, 1053, 1601, 850, 1054, 851,
	852, 853, 994, 1583, 1623, 43, 1430, 1584, 999, 854,
	1597, 654, 849, 509, 1048, 63, 1763, 385, 1580, 1567,
	1386, 1478, 1386, 1049, 841, 385, 1280, 1595, 1762, 1721,
	1214, 1602, 1635, 650, 1605, 650, 1424, 1614, 1423, 1622,
	820, 1422, 1404, 1421, 1625, 754, 1124, 1624, 958, 989,
	238, 239, 240, 43, 43, 1814, 1011, 1603, 1604, 1582,
	1606, 1344, 691, 43, 1531, 1369, 1633, 1346, 1345, 955,
	732, 734, 735, 736, 1634, 1123, 1658, 1360, 413, 1645,
	1646, 843, 1484, 508, 507, 845, 1506, 1488, 665, 1017,
	859, 1665, 1591, 647, 1376, 614, 8, 1, 1245, 13,
	1674, 12, 1694, 1660, 1676, 231, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 1092, 766, 1149, 768, 769,
	770, 772, 772, 772, 772, 772, 772, 772, 772, 1685,
	789, 790, 791, 792, 1705, 1670, 1696, 746, 542, 1642,
	385, 1579, 1650, 1557, 528, 1776, 1499, 1403, 1499, 939,
	1724, 1241, 1731, 1694, 1601, 1718, 1382, 1727, 939, 647,
	1663, 1271, 448, 1601, 173, 43, 1695, 1197, 1733, 43,
	43, 420, 1393, 940, 43, 43, 43, 43, 43, 1732,
	1736, 1716, 14, 1387, 1379, 1230, 1615, 653, 487, 43,
	647, 1011, 614, 1531, 1448, 1295, 1449, 1450, 865, 650,
	1451, 1452, 1454, 1456, 1458, 1752, 678, 157, 1399, 147,
	671, 1755, 381, 28, 1729, 1765, 10, 1113, 158, 1760,
	660, 1708, 1709, 660, 660, 660, 1479, 1788, 43, 1773,
	1774, 1591, 1387, 156, 1386, 155, 1775, 1787, 647, 1784,
	1785, 1786, 154, 1153, 152, 451, 191, 1790, 196, 219,
	43, 1801, 1802, 1795, 1727, 1797, 62, 60, 61, 43,
	65, 1407, 1523, 1545, 495, 649, 1027, 1091, 1081, 1080,
	1803, 731, 1810, 1697, 1414, 1464, 1730, 1222, 1761, 1082,
	1720, 1181, 764, 650, 995, 1815, 1727, 1184, 529, 898,
	1818, 541, 1083, 1819, 193, 939, 1822, 540, 1824, 1499,
	1601, 539, 1193, 1667, 755, 700, 1664, 1398, 1501, 1515,
	1513, 1512, 1799, 1683, 1679, 1673, 1397, 1675, 1461, 1655,
	1055, 1377, 1079, 1503, 1504, 842, 1058, 5, 1090, 1573,
	1077, 940, 4, 3, 1076, 1075, 647, 1074, 1221, 1224,
	940, 1072, 1073, 1816, 1012, 1070, 1071, 1386, 1591, 1581,
	1069, 1050, 648, 2, 1234, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 0, 0, 200, 647, 1399, 202,
	0, 0, 0, 1035, 0, 0, 0, 0, 0, 1278,
	0, 0, 0, 1387, 1499, 0, 212, 213, 214, 215,
	216, 1052, 0, 1616, 1734, 0, 1735, 1089, 0, 739,
	740, 741, 742, 743, 744, 745, 0, 1088, 1531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	649, 1459, 1091, 1081, 1080, 0, 0, 0, 0, 0,
	0, 1648, 0, 0, 1082, 1594, 1651, 1652, 1653, 1654,
	1598, 0, 0, 0, 0, 0, 0, 1083, 0, 1329,
	1084, 1085, 1087, 0, 0, 0, 1086, 649, 0, 1091,
	1081, 1080, 698, 0, 0, 0, 1426, 0, 0, 0,
	0, 1082, 0, 1340, 1399, 0, 0, 940, 0, 1399,
	1399, 1399, 1399, 1399, 1083, 0, 0, 0, 0, 0,
	0, 455, 0, 0, 1399, 1457, 698, 1035, 1649, 0,
	0, 0, 1639, 0, 1365, 0, 707, 706, 716, 717,
	709, 710, 711, 712, 713, 714, 715, 708, 0, 0,
	719, 1381, 0, 1711, 0, 0, 0, 0, 1717, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1636,
	707, 706, 716, 717, 709, 710, 711, 712, 713, 714,
	715, 708, 1089, 0, 719, 1399, 0, 0, 0, 0,
	0, 1745, 1088, 0, 1399, 0, 0, 0, 903, 0,
	0, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 1759, 0, 0, 1089,
	0, 1092, 0, 0, 0, 0, 1767, 1768, 1769, 1088,
	1772, 650, 0, 0, 1455, 1084, 1085, 1087, 0, 650,
	0, 1086, 0, 0, 0, 0, 0, 0, 0, 1453,
	698, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 1085, 1087, 698, 0, 0, 1086, 0,
	0, 0, 1807, 1808, 1809, 0, 0, 0, 0, 0,
	698, 1491, 1492, 1224, 707, 706, 716, 717, 709, 710,
	711, 712, 713, 714, 715, 708, 0, 0, 719, 0,
	0, 0, 0, 0, 1823, 0, 0, 0, 0, 707,
	706, 716, 717, 709, 710, 711, 712, 713, 714, 715,
	708, 0, 0, 719, 707, 706, 716, 717, 709, 710,
	711, 712, 713, 714, 715, 708, 0, 0, 719, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 609, 611, 707, 706, 716, 717, 709, 710,
	711, 712, 713, 714, 715, 708, 1092, 0, 719, 0,
	0, 0, 1358, 707, 706, 716, 717, 709, 710, 711,
	712, 713, 714, 715, 708, 0, 0, 719, 0, 0,
	0, 0, 1135, 1136, 1137, 0, 0, 0, 0, 718,
	1139, 1140, 1141, 1092, 0, 1143, 1588, 0, 0, 1400,
	0, 1144, 0, 0, 1637, 0, 0, 0, 0, 0,
	677, 680, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 0, 707, 706, 716, 717, 709,
	710, 711, 712, 713, 714, 715, 708, 0, 739, 719,
	0, 1637, 0, 1632, 0, 523, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 0, 0, 0, 0, 521, 0, 0,
	0, 0, 0, 0, 567, 0, 568, 0, 0, 0,
	1662, 0, 0, 0, 558, 559, 0, 0, 0, 0,
	0, 0, 1630, 0, 404, 0, 1460, 447, 547, 544,
	545, 549, 550, 551, 552, 0, 0, 0, 548, 553,
	441, 442, 524, 1631, 0, 0, 0, 519, 536, 0,
	566, 707, 706, 716, 717, 709, 710, 711, 712, 713,
	714, 715, 708, 0, 0, 719, 0, 0, 0, 0,
	0, 0, 0, 0, 533, 534, 0, 718, 677, 0,
	583, 0, 535, 0, 0, 531, 532, 537, 0, 1526,
	0, 0, 0, 0, 0, 0, 1277, 0, 0, 0,
	0, 0, 718, 0, 581, 0, 0, 0, 1737, 0,
	0, 1738, 0, 0, 1740, 0, 0, 718, 603, 0,
	0, 447, 0, 427, 428, 429, 430, 0, 0, 0,
	0, 1750, 433, 431, 441, 442, 0, 0, 0, 0,
	0, 0, 543, 0, 0, 0, 781, 718, 0, 1662,
	0, 1318, 1319, 0, 0, 0, 0, 0, 754, 0,
	0, 0, 425, 0, 0, 447, 718, 427, 428, 429,
	430, 0, 0, 0, 0, 0, 433, 431, 441, 442,
	0, 783, 0, 1333, 1334, 1335, 1336, 0, 0, 0,
	0, 0, 1794, 754, 0, 1400, 0, 0, 0, 0,
	1400, 1400, 1400, 1400, 1400, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 0, 1526, 0, 1621, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 0,
	0, 0, 0, 0, 585, 0, 570, 571, 0, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 0,
	116, 117, 0, 118, 119, 120, 122, 121, 0, 931,
	784, 0, 0, 0, 0, 0, 0, 555, 66, 782,
	0, 0, 0, 0, 788, 787, 1400, 0, 0, 0,
	0, 1671, 1672, 0, 0, 1400, 0, 0, 0, 572,
	582, 578, 579, 576, 577, 575, 574, 573, 584, 560,
	561, 562, 563, 565, 0, 0, 445, 444, 564, 0,
	0, 0, 650, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 718, 1445, 0, 0, 0, 0,
	435, 440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1728, 0,
	650, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 0, 0, 435, 440, 0, 0, 0, 1742,
	1743, 1744, 0, 437, 0, 439, 438, 0, 0, 0,
	0, 0, 0, 0, 0, 1160, 1161, 0, 1162, 0,
	445, 444, 0, 1165, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1168, 1169, 0, 0, 1170,
	1171, 0, 1172, 1173, 0, 0, 0, 437, 0, 439,
	438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 445, 444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1728, 0, 0, 1800, 0,
	0, 1568, 0, 1569, 0, 1570, 0, 1571, 1572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1728, 0, 650,
	363, 352, 0, 311, 365, 281, 299, 373, 301, 302,
	338, 259, 321, 0, 296, 278, 0, 0, 0, 284,
	252, 291, 253, 282, 313, 0, 279, 0, 354, 324,
	0, 0, 0, 371, 0, 329, 0, 0, 0, 0,
	0, 316, 356, 319, 347, 310, 339, 268, 328, 366,
	297, 334, 367, 0, 0, 0, 33, 0, 0, 0,
	0, 0, 0, 649, 0, 1091, 1081, 1080, 333, 361,
	293, 265, 376, 0, 337, 251, 331, 1082, 257, 260,
	372, 359, 288, 289, 0, 0, 0, 0, 0, 0,
	1083, 315, 320, 344, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 327,
	0, 0, 0, 264, 258, 0, 312, 0, 0, 0,
	267, 0, 286, 345, 0, 248, 350, 357, 309, 0,
	0, 360, 306, 305, 0, 0, 0, 0, 0, 0,
	298, 387, 342, 374, 364, 317, 355, 283, 292, 0,
	290, 0, 0, 0, 326, 340, 0, 0, 0, 0,
	0, 362, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 249, 287, 348, 351, 272, 336, 261, 294, 343,
	295, 318, 277, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 0, 0, 1408, 1088, 1247, 1248, 1249, 1250,
	1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260,
	1261, 1262, 1263, 1264, 1265, 1266, 1267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 1085,
	1087, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1383, 0, 0, 0, 0, 0,
	254, 0, 1160, 0, 0, 0, 255, 276, 358, 0,
	0, 0, 0, 1417, 1415, 1411, 1410, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 1413, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 275,
	269, 270, 322, 323, 368, 369, 370, 346, 266, 0,
	273, 274, 0, 353, 0, 0, 0, 325, 0, 0,
	0, 375, 0, 0, 0, 0, 0, 0, 0, 300,
	250, 304, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 0, 0, 308, 303, 330, 332, 341, 349, 0,
	280, 314, 363, 352, 0, 311, 365, 281, 299, 373,
	301, 302, 338, 259, 321, 0, 296, 278, 0, 1092,
	0, 284, 252, 291, 253, 282, 313, 0, 279, 0,
	354, 324, 0, 0, 0, 371, 0, 329, 0, 0,
	0, 0, 0, 316, 356, 319, 347, 310, 339, 268,
	328, 366, 297, 334, 367, 0, 0, 0, 33, 0,
	0, 0, 0, 0, 0, 649, 0, 1091, 1081, 1080,
	333, 361, 293, 265, 376, 0, 337, 251, 331, 1082,
	257, 260, 372, 359, 288, 289, 0, 0, 0, 0,
	0, 0, 1083, 315, 320, 344, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	0, 327, 0, 0, 0, 264, 258, 0, 312, 0,
	0, 0, 267, 0, 286, 345, 0, 248, 350, 357,
	309, 0, 0, 360, 306, 305, 0, 0, 0, 0,
	0, 0, 298, 387, 342, 374, 364, 317, 355, 283,
	292, 0, 290, 0, 0, 0, 326, 340, 0, 0,
	0, 0, 0, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 249, 287, 348, 351, 272, 336, 261,
	294, 343, 295, 318, 277, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 0, 0, 1538, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 1085, 1087, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 255, 276,
	358, 0, 0, 0, 0, 1417, 1415, 0, 0, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 1413, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 275, 269, 270, 322, 323, 368, 369, 370, 346,
	266, 0, 273, 274, 0, 353, 0, 0, 0, 325,
	0, 0, 0, 375, 0, 0, 0, 0, 0, 0,
	0, 300, 250, 304, 0, 0, 0, 0, 0, 0,
	0, 262, 263, 0, 0, 308, 303, 330, 332, 341,
	349, 0, 280, 314, 363, 352, 0, 311, 365, 281,
	299, 373, 301, 302, 338, 259, 321, 0, 296, 278,
	0, 1092, 0, 284, 252, 291, 253, 282, 313, 0,
	279, 0, 354, 324, 0, 0, 0, 371, 0, 329,
	0, 0, 0, 0, 0, 316, 356, 319, 347, 310,
	339, 268, 328, 366, 297, 334, 367, 0, 0, 0,
	33, 0, 0, 0, 0, 0, 0, 649, 0, 1091,
	1081, 1080, 333, 361, 293, 265, 376, 0, 337, 251,
	331, 1082, 257, 260, 372, 359, 288, 289, 0, 0,
	0, 0, 0, 0, 1083, 315, 320, 344, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 285, 0, 327, 0, 0, 0, 264, 258, 0,
	312, 0, 0, 0, 267, 0, 286, 345, 0, 248,
	350, 357, 309, 0, 0, 360, 306, 305, 0, 0,
	0, 0, 962, 0, 298, 387, 342, 374, 364, 317,
	355, 283, 292, 0, 290, 0, 0, 0, 326, 340,
	0, 0, 0, 0, 0, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 249, 287, 348, 351, 272,
	336, 261, 294, 343, 295, 318, 277, 0, 0, 1089,
	971, 977, 975, 0, 0, 972, 0, 0, 970, 1088,
	0, 979, 0, 0, 978, 964, 974, 976, 973, 968,
	0, 963, 0, 981, 980, 982, 961, 984, 0, 0,
	0, 988, 985, 987, 986, 0, 983, 0, 0, 0,
	0, 1416, 0, 0, 0, 965, 966, 0, 0, 0,
	0, 0, 1084, 1085, 1087, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 967, 969, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	255, 276, 358, 0, 0, 0, 0, 1417, 1415, 0,
	0, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	1413, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 275, 269, 270, 322, 323, 368, 369,
	370, 346, 266, 0, 273, 274, 0, 353, 0, 0,
	0, 325, 0, 0, 0, 375, 0, 0, 0, 0,
	0, 0, 0, 300, 250, 304, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 0, 0, 308, 303, 330,
	332, 341, 349, 0, 280, 314, 363, 352, 0, 311,
	365, 281, 299, 373, 301, 302, 338, 259, 321, 0,
	296, 278, 0, 1092, 0, 284, 252, 291, 253, 282,
	313, 0, 279, 0, 354, 324, 0, 89, 0, 371,
	32, 329, 0, 0, 0, 0, 0, 316, 356, 319,
	347, 310, 339, 268, 328, 366, 297, 334, 367, 0,
	0, 0, 447, 1100, 45, 33, 0, 1098, 0, 0,
	0, 0, 0, 0, 333, 361, 293, 265, 376, 0,
	337, 251, 331, 0, 257, 260, 372, 359, 288, 289,
	0, 0, 0, 1097, 0, 0, 0, 315, 320, 344,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1205, 1096, 285, 0, 327, 0, 0, 0, 264,
	258, 0, 312, 74, 0, 0, 267, 0, 286, 345,
	0, 248, 350, 357, 309, 0, 0, 360, 306, 305,
	0, 0, 0, 0, 0, 0, 298, 387, 342, 374,
	364, 317, 355, 283, 292, 0, 290, 0, 90, 0,
	326, 340, 0, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 249, 287, 348,
	351, 272, 336, 261, 294, 343, 295, 318, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 0, 116, 117, 0,
	118, 119, 120, 122, 121, 91, 92, 93, 97, 95,
	94, 96, 68, 70, 0, 66, 69, 75, 71, 72,
	73, 87, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 88, 98, 99, 100, 101, 102, 103,
	104, 105, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 255, 276, 358, 0, 0, 0, 0, 0,
	386, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 275, 269, 270, 322, 323,
	368, 369, 370, 346, 266, 0, 273, 274, 0, 353,
	0, 0, 0, 325, 0, 0, 0, 375, 67, 0,
	0, 0, 0, 0, 0, 300, 250, 304, 0, 0,
	0, 0, 0, 0, 0, 262, 263, 0, 0, 308,
	303, 330, 332, 341, 349, 0, 280, 314, 363, 352,
	0, 311, 365, 281, 299, 373, 301, 302, 338, 259,
	321, 0, 296, 278, 0, 0, 0, 284, 252, 291,
	253, 282, 313, 0, 279, 0, 354, 324, 0, 89,
	0, 371, 0, 329, 0, 0, 0, 0, 0, 316,
	356, 319, 347, 310, 339, 268, 328, 366, 297, 334,
	367, 0, 0, 0, 33, 0, 673, 33, 674, 0,
	0, 0, 0, 0, 0, 0, 333, 361, 293, 265,
	376, 0, 337, 251, 331, 0, 257, 260, 372, 359,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 315,
	320, 344, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 0, 327, 0, 0,
	0, 264, 258, 0, 312, 74, 0, 0, 267, 0,
	286, 345, 0, 248, 350, 357, 309, 0, 0, 360,
	306, 305, 0, 0, 0, 0, 0, 0, 298, 387,
	342, 374, 364, 317, 355, 283, 292, 0, 290, 0,
	90, 0, 326, 340, 0, 0, 0, 0, 0, 362,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 249,
	287, 348, 351, 272, 336, 261, 294, 343, 295, 318,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 0, 116,
	117, 0, 118, 119, 120, 122, 121, 91, 92, 93,
	97, 95, 94, 96, 68, 70, 0, 66, 69, 75,
	71, 72, 73, 87, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 88, 98, 99, 100, 101,
	102, 103, 104, 105, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 255, 276, 358, 0, 0, 0,
	0, 0, 386, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 275, 269, 270,
	322, 323, 368, 369, 370, 346, 266, 0, 273, 274,
	0, 353, 0, 0, 0, 325, 0, 0, 0, 375,
	67, 0, 0, 0, 0, 0, 0, 300, 250, 304,
	0, 0, 0, 0, 0, 0, 0, 262, 263, 0,
	0, 308, 303, 330, 332, 341, 349, 0, 280, 314,
	363, 352, 0, 311, 365, 281, 299, 373, 301, 302,
	338, 259, 321, 0, 296, 278, 0, 0, 0, 284,
	252, 291, 253, 282, 313, 0, 279, 0, 354, 324,
	0, 0, 0, 371, 0, 329, 0, 0, 0, 0,
	0, 316, 356, 319, 347, 310, 339, 268, 328, 366,
	297, 334, 367, 0, 382, 0, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 384, 0, 333, 361,
	293, 265, 376, 0, 337, 251, 331, 0, 257, 260,
	372, 359, 288, 289, 0, 0, 0, 0, 0, 0,
	0, 315, 320, 344, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 327,
	0, 0, 0, 264, 258, 0, 312, 0, 0, 0,
	267, 0, 286, 345, 0, 248, 350, 357, 309, 0,
	0, 360, 306, 305, 0, 0, 0, 0, 0, 0,
	298, 387, 342, 374, 364, 317, 355, 283, 292, 0,
	290, 0, 0, 0, 326, 340, 0, 0, 0, 0,
	0, 362, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 249, 287, 348, 351, 272, 336, 261, 294, 343,
	295, 318, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 255, 276, 358, 0,
	0, 0, 0, 0, 386, 0, 0, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 275,
	269, 270, 322, 323, 368, 369, 370, 346, 266, 0,
	273, 274, 0, 353, 0, 0, 0, 325, 0, 0,
	0, 375, 0, 0, 0, 0, 0, 0, 0, 300,
	250, 304, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 0, 0, 308, 303, 330, 332, 341, 349, 0,
	280, 314, 363, 352, 0, 311, 365, 281, 299, 373,
	301, 302, 338, 259, 321, 0, 296, 278, 0, 0,
	0, 284, 252, 291, 253, 282, 313, 0, 279, 0,
	354, 324, 0, 0, 0, 371, 0, 329, 0, 0,
	0, 0, 0, 316, 356, 319, 347, 310, 339, 268,
	328, 366, 297, 334, 367, 0, 0, 0, 33, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 361, 293, 265, 376, 0, 337, 251, 331, 0,
	257, 260, 372, 359, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 315, 320, 344, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 285,
	0, 327, 0, 0, 0, 264, 258, 0, 312, 0,
	0, 0, 267, 0, 286, 345, 0, 248, 350, 357,
	309, 0, 0, 360, 306, 305, 0, 0, 0, 0,
	0, 0, 298, 387, 342, 374, 364, 317, 355, 283,
	292, 0, 290, 0, 0, 0, 326, 340, 0, 0,
	0, 0, 0, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 249, 287, 348, 351, 272, 336, 261,
	294, 343, 295, 318, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 255, 276,
	358, 0, 0, 0, 0, 0, 386, 0, 0, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 275, 269, 270, 322, 323, 368, 369, 370, 346,
	266, 0, 273, 274, 0, 353, 0, 0, 0, 325,
	0, 0, 0, 375, 0, 0, 0, 0, 0, 0,
	0, 300, 250, 304, 0, 0, 0, 0, 0, 0,
	0, 262, 263, 0, 0, 308, 303, 330, 332, 341,
	349, 0, 280, 314, 363, 352, 0, 311, 365, 281,
	299, 373, 301, 302, 338, 259, 321, 0, 296, 278,
	0, 0, 0, 284, 252, 291, 253, 282, 313, 0,
	279, 0, 354, 324, 0, 0, 0, 371, 0, 329,
	0, 0, 0, 0, 0, 316, 356, 319, 347, 310,
	339, 268, 328, 366, 297, 334, 367, 0, 0, 0,
	447, 0, 45, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 333, 361, 293, 265, 376, 0, 337, 251,
	331, 0, 257, 260, 372, 359, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 315, 320, 344, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 0, 327, 0, 0, 0, 264, 258, 0,
	312, 0, 0, 0, 267, 0, 286, 345, 0, 248,
	350, 357, 309, 0, 0, 360, 306, 305, 0, 0,
	0, 0, 0, 0, 298, 387, 342, 374, 364, 317,
	355, 283, 292, 0, 290, 0, 0, 0, 326, 340,
	0, 0, 0, 0, 0, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 249, 287, 348, 351, 272,
	336, 261, 294, 343, 295, 318, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	255, 276, 358, 0, 0, 0, 0, 0, 386, 0,
	0, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 275, 269, 270, 322, 323, 368, 369,
	370, 346, 266, 0, 273, 274, 0, 353, 0, 0,
	0, 325, 0, 0, 0, 375, 0, 0, 0, 0,
	0, 0, 0, 300, 250, 304, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 0, 0, 308, 303, 330,
	332, 341, 349, 0, 280, 314, 363, 352, 0, 311,
	365, 281, 299, 373, 301, 302, 338, 259, 321, 0,
	296, 278, 0, 0, 0, 284, 252, 291, 253, 282,
	313, 0, 279, 0, 354, 324, 0, 0, 0, 371,
	0, 329, 0, 0, 0, 0, 0, 316, 356, 319,
	347, 310, 339, 268, 328, 366, 297, 334, 367, 0,
	0, 0, 33, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 361, 293, 265, 376, 0,
	337, 251, 331, 0, 257, 260, 372, 359, 288, 289,
	500, 0, 0, 0, 0, 0, 0, 315, 320, 344,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 0, 327, 0, 0, 0, 264,
	258, 0, 312, 0, 0, 0, 267, 0, 286, 345,
	0, 248, 350, 357, 309, 0, 0, 360, 306, 305,
	0, 0, 0, 0, 0, 0, 298, 387, 342, 374,
	364, 317, 355, 283, 292, 0, 290, 0, 0, 0,
	326, 340, 0, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 249, 287, 348,
	351, 272, 336, 261, 294, 343, 295, 318, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 255, 276, 358, 0, 0, 0, 0, 0,
	386, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 275, 269, 270, 322, 323,
	368, 369, 370, 346, 266, 0, 273, 274, 0, 353,
	0, 0, 0, 325, 0, 0, 0, 375, 0, 0,
	0, 0, 0, 0, 0, 300, 250, 304, 0, 0,
	0, 0, 0, 0, 0, 262, 263, 0, 0, 308,
	303, 330, 332, 341, 349, 0, 280, 314, 363, 352,
	0, 311, 365, 281, 299, 373, 301, 302, 338, 259,
	321, 0, 296, 278, 0, 0, 0, 284, 252, 291,
	253, 282, 313, 0, 279, 0, 354, 324, 0, 0,
	0, 371, 0, 329, 0, 0, 0, 0, 0, 316,
	356, 319, 347, 310, 339, 268, 328, 366, 297, 334,
	367, 0, 0, 0, 33, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 361, 293, 265,
	376, 0, 337, 251, 331, 0, 257, 260, 372, 359,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 315,
	320, 344, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 0, 327, 0, 0,
	0, 264, 258, 0, 312, 0, 0, 0, 267, 0,
	286, 345, 0, 248, 350, 357, 309, 0, 0, 360,
	306, 305, 0, 0, 0, 0, 0, 0, 298, 387,
	342, 374, 364, 317, 355, 283, 292, 0, 290, 0,
	0, 0, 326, 340, 0, 0, 0, 0, 0, 362,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 249,
	287, 348, 351, 272, 336, 261, 294, 343, 295, 318,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 255, 276, 358, 0, 0, 0,
	0, 0, 386, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 275, 269, 270,
	322, 323, 368, 369, 370, 346, 266, 0, 273, 274,
	0, 353, 0, 0, 0, 325, 0, 0, 0, 375,
	0, 0, 0, 0, 0, 0, 0, 300, 250, 304,
	0, 0, 0, 0, 0, 0, 0, 262, 263, 0,
	0, 308, 303, 330, 332, 341, 349, 0, 280, 314,
	363, 352, 0, 311, 365, 281, 299, 373, 301, 302,
	338, 259, 321, 0, 296, 278, 0, 0, 0, 284,
	252, 291, 253, 282, 313, 0, 279, 0, 354, 324,
	0, 0, 0, 371, 0, 329, 0, 0, 0, 0,
	0, 316, 356, 319, 347, 310, 339, 268, 328, 366,
	297, 334, 367, 0, 0, 0, 44, 0, 45, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 333, 361,
	293, 265, 376, 0, 337, 251, 331, 0, 257, 260,
	372, 359, 288, 289, 0, 0, 0, 0, 0, 0,
	0, 315, 320, 344, 307, 0, 0, 649, 0, 1091,
	1081, 1080, 0, 0, 0, 0, 0, 285, 0, 327,
	0, 1082, 0, 264, 258, 0, 312, 0, 0, 0,
	267, 0, 286, 345, 1083, 248, 350, 357, 309, 0,
	0, 360, 306, 305, 0, 0, 0, 0, 0, 0,
	298, 0, 342, 374, 364, 317, 355, 283, 292, 0,
	290, 0, 0, 0, 326, 340, 0, 0, 0, 0,
	0, 362, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1703, 1702,
	256, 249, 287, 348, 351, 272, 336, 261, 294, 343,
	295, 318, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 649, 0, 1091, 1081, 1080, 0, 0,
	0, 649, 0, 1091, 1081, 1080, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 1089,
	1083, 0, 0, 0, 0, 0, 0, 0, 1083, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 255, 276, 358, 0,
	0, 0, 1084, 1085, 1087, 1791, 0, 0, 1086, 0,
	0, 335, 0, 1666, 0, 0, 0, 0, 0, 0,
	0, 0, 649, 0, 1091, 1081, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 271, 275,
	269, 270, 322, 323, 368, 369, 370, 346, 266, 1083,
	273, 274, 0, 353, 0, 1089, 0, 325, 0, 0,
	0, 375, 0, 1089, 0, 1088, 0, 0, 0, 300,
	250, 304, 523, 1088, 0, 0, 0, 0, 0, 262,
	263, 0, 0, 308, 303, 330, 332, 341, 349, 522,
	280, 314, 0, 0, 521, 0, 0, 0, 0, 0,
	0, 567, 0, 568, 1590, 0, 0, 0, 1084, 1085,
	1087, 558, 559, 0, 1086, 0, 1084, 1085, 1087, 0,
	0, 404, 1086, 0, 447, 547, 544, 545, 549, 550,
	551, 552, 0, 0, 0, 548, 553, 441, 442, 524,
	0, 0, 0, 1092, 519, 536, 0, 566, 0, 0,
	0, 0, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 533, 534, 0, 0, 0, 0, 583, 0, 535,
	0, 0, 960, 532, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 0, 0, 0, 1084, 1085, 1087,
	0, 0, 0, 1086, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 543,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 971, 977, 975, 0, 0,
	972, 0, 0, 970, 0, 0, 979, 0, 0, 978,
	964, 974, 976, 973, 968, 0, 963, 0, 981, 980,
	982, 961, 984, 0, 0, 0, 988, 985, 987, 986,
	569, 983, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 0, 570, 571, 0, 0, 0, 0, 0,
	967, 969, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 572, 582, 578, 579,
	576, 577, 575, 574, 573, 584, 560, 561, 562, 563,
	565, 0, 523, 445, 444, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 814, 0, 522,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 0,
	0, 567, 0, 568, 0, 0, 0, 0, 0, 0,
	580, 558, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 404, 0, 0, 447, 547, 544, 545, 549, 550,
	551, 552, 0, 0, 0, 548, 553, 441, 442, 524,
	0, 0, 0, 0, 519, 536, 0, 566, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 523, 0, 0, 0, 0, 0, 0,
	0, 533, 534, 819, 0, 0, 0, 583, 0, 535,
	522, 0, 531, 532, 537, 521, 0, 0, 0, 0,
	0, 0, 567, 0, 568, 0, 0, 0, 0, 0,
	0, 581, 558, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 404, 0, 698, 447, 547, 544, 545, 549,
	550, 551, 552, 0, 0, 0, 548, 553, 441, 442,
	524, 0, 0, 0, 0, 519, 536, 0, 566, 543,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 533, 534, 0, 0, 0, 0, 583, 0,
	535, 0, 0, 531, 532, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 585, 0, 570, 571, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 572, 582, 578, 579,
	576, 577, 575, 574, 573, 584, 560, 561, 562, 563,
	565, 569, 0, 445, 444, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 585, 0, 570, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 572, 582, 578,
	579, 576, 577, 575, 574, 573, 584, 560, 561, 562,
	563, 565, 0, 523, 445, 444, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 0, 0, 0, 0, 521, 0, 0, 0, 0,
	0, 0, 567, 0, 568, 0, 0, 0, 0, 0,
	0, 580, 558, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 404, 0, 0, 447, 547, 544, 545, 549,
	550, 551, 552, 0, 0, 0, 548, 553, 441, 442,
	524, 0, 0, 0, 0, 519, 536, 0, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 649, 0, 0, 523, 0, 0, 0, 0, 0,
	0, 0, 533, 534, 819, 0, 0, 0, 583, 0,
	535, 522, 0, 531, 532, 537, 521, 0, 0, 0,
	0, 0, 0, 567, 0, 568, 0, 0, 0, 0,
	0, 0, 581, 558, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 404, 0, 0, 447, 547, 544, 545,
	549, 550, 551, 552, 0, 0, 0, 548, 553, 441,
	442, 524, 0, 0, 0, 0, 519, 536, 0, 566,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 533, 534, 0, 0, 0, 0, 583,
	0, 535, 0, 0, 531, 532, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 543, 585, 0, 570, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 572, 582, 578,
	579, 576, 577, 575, 574, 573, 584, 560, 561, 562,
	563, 565, 569, 0, 445, 444, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 0, 570, 571, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 572, 582,
	578, 579, 576, 577, 575, 574, 573, 584, 560, 561,
	562, 563, 565, 0, 523, 445, 444, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 0, 0, 0, 0, 521, 0, 0, 0,
	0, 0, 0, 567, 0, 568, 0, 0, 0, 0,
	0, 0, 580, 558, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 404, 0, 0, 447, 547, 544, 545,
	549, 550, 551, 552, 0, 0, 0, 548, 553, 441,
	442, 524, 0, 0, 0, 0, 519, 536, 0, 566,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 523, 0, 0, 0, 0,
	0, 0, 0, 533, 534, 0, 0, 0, 0, 583,
	0, 535, 522, 0, 531, 532, 537, 0, 0, 0,
	0, 0, 0, 0, 567, 0, 568, 0, 0, 0,
	0, 0, 0, 581, 558, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 404, 0, 0, 447, 547, 544,
	545, 549, 550, 551, 552, 0, 0, 0, 548, 553,
	441, 442, 524, 0, 0, 0, 0, 0, 536, 0,
	566, 543, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 533, 534, 0, 0, 0, 0,
	583, 0, 535, 0, 0, 531, 532, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 585, 0, 570, 571, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 572, 582,
	578, 579, 576, 577, 575, 574, 573, 584, 560, 561,
	562, 563, 565, 569, 0, 445, 444, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 585, 0, 570, 571, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 572,
	582, 578, 579, 576, 577, 575, 574, 573, 584, 560,
	561, 562, 563, 565, 0, 0, 445, 444, 564, 904,
	905, 906, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 567, 0, 568, 0,
	0, 0, 0, 0, 0, 0, 558, 559, 0, 0,
	0, 0, 0, 580, 0, 0, 404, 0, 0, 447,
	547, 544, 545, 549, 550, 551, 552, 0, 0, 0,
	548, 553, 441, 442, 0, 0, 0, 0, 0, 0,
	536, 0, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 534, 0, 0,
	0, 0, 583, 0, 535, 0, 0, 531, 532, 537,
	0, 0, 0, 0, 0, 0, 0, 567, 0, 568,
	0, 0, 0, 0, 0, 0, 581, 558, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 404, 0, 0,
	447, 547, 544, 545, 549, 550, 551, 552, 0, 0,
	0, 548, 553, 441, 442, 0, 0, 0, 0, 0,
	0, 536, 0, 566, 543, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 533, 534, 0,
	0, 0, 0, 583, 0, 535, 0, 0, 531, 532,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 543, 585, 0, 570, 571,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 572, 582, 578, 579, 576, 577, 575, 574, 573,
	584, 560, 561, 562, 563, 565, 569, 0, 445, 444,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 0, 570,
	571, 0, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 0, 33, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 572, 582, 578, 579, 576, 577, 575, 574,
	573, 584, 560, 561, 562, 563, 565, 0, 0, 445,
	444, 564, 0, 567, 0, 568, 0, 0, 0, 0,
	0, 0, 0, 558, 559, 0, 0, 0, 0, 0,
	74, 0, 807, 837, 0, 0, 447, 547, 544, 545,
	549, 550, 551, 552, 0, 0, 580, 548, 553, 441,
	442, 0, 0, 0, 0, 0, 0, 536, 0, 566,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 533, 534, 0, 0, 0, 0, 583,
	0, 535, 0, 0, 531, 532, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 0, 116, 117, 0, 118, 119, 120,
	122, 121, 91, 92, 93, 97, 95, 94, 96, 68,
	70, 543, 66, 69, 75, 71, 72, 73, 87, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	88, 98, 99, 100, 101, 102, 103, 104, 105, 0,
	0, 0, 0, 806, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	33, 0, 569, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 0, 570, 571, 0, 0, 0,
	0, 0, 0, 0, 0, 67, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 572, 582,
	578, 579, 576, 577, 575, 574, 573, 584, 560, 561,
	562, 563, 565, 90, 0, 445, 444, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1405, 0,
	0, 0, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 0, 116, 117, 0, 118, 119, 120, 122, 121,
	91, 92, 93, 97, 95, 94, 96, 68, 70, 0,
	66, 69, 75, 71, 72, 73, 87, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 88, 98,
	99, 100, 101, 102, 103, 104, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 67,
}

var yyPact = [...]int16{
	484, -1000, -246, -1000, -1000, 1373, 483, 403, -1000, -1000,
	-1000, 928, 445, 434, 222, 424, 951, 466, 942, 454,
	415, -1000, -191, -174, -1000, -101, 448, -1000, 1214, -1000,
	4356, 4356, 4356, -1000, 325, 951, 415, 139, 415, 1399,
	405, 732, 1485, 529, -1000, -1000, 415, 942, 701, -1000,
	-1000, -1000, -1000, 179, 178, 211, 921, -157, 29, -1000,
	-1000, -1000, -1000, -1000, 1290, -1000, -1000, -1000, 1290, 76,
	1372, 1290, 1372, -1000, 1290, 1372, 68, 68, 68, 68,
	68, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1371, 1362,
	-1000, 1290, 1290, 1290, 1290, 1290, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1358, 102, 1358, 1313,
	1313, -1000, -1000, 921, 921, 1370, 942, 951, 1398, 942,
	-201, 942, 942, 1562, 942, -1000, -1000, -1000, 165, 1467,
	4356, 6585, 942, -1000, 1462, 467, 942, 4725, -1000, 1442,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1361, 774, 951,
	335, 316, 1280, 334, 427, 1030, 331, -1000, -1000, -1000,
	827, -1000, 951, -1000, 1589, -1000, -1000, 326, -1000, 324,
	699, 944, 942, 1360, 189, 1359, 2484, 886, -1000, -273,
	-1000, 26, -1000, -1000, 863, 68, 1290, -1000, 68, 849,
	68, 68, -1000, -1000, 534, 1447, 534, 534, 534, 534,
	927, 927, -133, -133, -1000, -1000, -1000, -1000, 885, 1358,
	-1000, -1000, -1000, 883, -1000, 942, 951, 1354, 1391, 942,
	1484, 408, -1000, -1000, 1483, 1478, 1244, -1000, -1000, 163,
	-1000, 371, -1000, 951, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1375, -1000, 319,
	464, 5841, 178, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	402, -1000, 1594, 1514, 348, 1, -187, 1015, -1000, -1000,
	1351, -1000, -1000, 8105, -1000, 1000, 986, -1000, 31, 951,
	-1000, -178, 105, 50, -1000, -1000, 1280, -1000, 1349, 8105,
	1477, -1000, 1452, 882, -1000, 2440, -1000, -206, -1000, -1000,
	-1000, -206, -1000, -1000, -1000, 1280, -1000, 1340, 1337, -1000,
	1334, -1000, -1000, 1280, 1280, 1280, 525, -1000, -1000, -1000,
	-1000, -1000, -1000, 1238, 534, 68, 534, 1237, 1236, 534,
	534, -1000, -1000, 978, 581, -1000, -1000, -1000, -1000, 1208,
	-1000, 1206, -1000, 91, 89, -1000, 1278, -1000, 1202, 1277,
	1390, 190, 942, 1331, 1299, 415, 1299, 1512, 262, 942,
	1562, 398, 1562, 371, 951, 320, 951, -1000, -1000, 374,
	4353, -1000, -1000, 1200, -1000, 268, 1290, 456, 456, -180,
	323, 315, -187, 1280, 1330, -1000, 402, 695, -1000, 8105,
	188, 1280, 1280, 1280, 1280, -1000, -1000, 498, -1000, -1000,
	-1000, 8609, 8609, 8609, 8609, 8609, 8609, 8609, -1000, -1000,
	-1000, -1000, 39, -1000, -206, -1000, 935, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 523, 521, -1000, 7775, 1280, 1280,
	1280, 1280, 1280, 1280, 1280, 1280, 8105, 1280, 1436, 1280,
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
	767, 1280, 1280, 1280, 1280, -1000, -1000, -1000, -1000, -187,
	1327, -1000, -1000, -1000, 699, -1000, 8105, 398, 816, 121,
	-1000, 1273, 1229, 807, 1175, -1000, 8851, -1000, 999, -1000,
	841, -1000, 823, 1168, 7263, 7684, 7684, 6213, -1000, -1000,
	534, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 68,
	908, 68, 24, -10, 876, -1000, 866, 190, 951, 942,
	1154, 1269, -1000, 261, 1326, 398, -1000, 1529, 1596, -1000,
	1299, 942, -1000, 418, 1511, -1000, -1000, 1510, -1000, 1263,
	-1000, -1000, 1265, 1562, 1325, 951, -1000, -1000, 341, 951,
	-1000, -1000, -1000, -1000, -1000, 548, 402, 1464, -1000, -1000,
	-1000, 773, -1000, -1000, 703, 198, 700, -1000, 951, -187,
	1324, 8105, 402, 1198, 213, 8105, 8105, 824, -1000, 510,
	8518, 820, 593, 8609, 8609, 8609, 8609, 8609, 8609, 8609,
	8609, 8609, 8609, 8609, 8609, 8609, 8609, 8609, 2407, 950,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 963, -1000, 1299, 938, 999, 893, 893, 20,
	20, 20, 20, 20, 20, 78, -1000, -267, -1000, -1000,
	5469, 6213, 999, 1191, 627, 7775, 7684, 7684, 6933, 8105,
	7684, 7684, 7684, 1498, 668, 627, 938, 1509, 999, 999,
	999, -1000, 999, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 71, -1000, -1000, -1000, -1000, -1000, -1000, 7684,
	7684, 7684, 7684, -1000, 951, 1280, 695, 1195, -149, 8105,
	1323, 865, -1000, 1150, -206, -1000, -1000, -1000, -157, -1000,
	-1000, -1000, -1000, 999, 7684, 1140, 1191, -1000, 708, -1000,
	519, 1140, 708, 1140, 1280, -1000, 534, -1000, 534, -1000,
	-1000, 1145, 1099, 1092, 1321, 1320, -209, 863, 190, 1189,
	1517, 1527, 1299, 1494, 1427, -1000, 999, 1473, 951, -1000,
	-1000, -1000, -1000, -1000, 196, 665, 951, 3299, 1232, -1000,
	707, 1319, 114, 383, 1379, 579, 164, -1000, 958, 655,
	907, 651, 645, 622, 614, 607, 594, 586, -1000, -1000,
	-1000, -1000, -1000, 1586, -1000, -1000, -1000, 1556, 1316, 1314,
	402, 695, 1187, 548, -1000, -111, 510, 608, -1000, -1000,
	792, -1000, -1000, 2327, 8609, 8609, 8609, -1000, -1000, -1000,
	-1000, 820, 8609, 8609, 8609, 2150, 2327, 2231, 307, 333,
	20, 51, 51, 52, 52, 52, 52, 52, 291, 291,
	-1000, -123, -1000, 1290, -1000, -1000, -1000, 999, 999, -1000,
	518, -1000, -1000, -206, 900, -1000, -1000, 875, 1280, 515,
	-1000, -1000, -1000, 8105, -1000, 999, 1140, 1140, 757, 1262,
	8915, 1290, -1000, 1290, 1313, -1000, -1000, 116, 1290, 115,
	-1000, -1000, -1000, -1000, 1313, -1000, -1000, -1000, -1000, -1000,
	1290, 1290, -1000, -1000, 1290, 1290, -1000, 1290, 1290, 710,
	1271, 1258, 1140, 7684, -1000, 718, -1000, 8105, 999, 942,
	-1000, -1000, -1000, -1000, -1000, 1140, 999, 1261, 1140, 1140,
	1161, -1000, 8105, 213, 1388, -1000, -1000, 772, -1000, 1071,
	1057, -1000, -1000, 1140, 7684, -244, -1000, -1000, -1000, 955,
	-1000, -1000, 3981, -244, -244, 7684, -1000, -1000, -1000, -1000,
	-209, 190, 402, 1538, 1310, 1053, 1538, 1463, 8105, 8105,
	1529, -1000, 1299, -1000, -1000, 1498, -1000, -1000, 770, -1000,
	1299, 1228, 186, 136, 8105, -1000, -247, 3671, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1529, -1000,
	-1000, -1000, 951, 2774, 951, 951, 951, 417, 8196, 8105,
	-1000, -1000, -1000, 942, 1046, 3984, 707, 707, 3984, 707,
	707, 402, 402, 1308, 1307, 308, -1000, 951, -1000, -155,
	579, 951, -1000, 852, -1000, -1000, 768, 851, 768, 768,
	768, 768, 768, 456, 456, 951, 402, 1127, 213, 548,
	1379, -1000, -1000, -1000, -1000, 2327, 2327, 2327, -1000, 2150,
	2327, 2169, -1000, 8609, 8609, 87, -1000, -1000, 5469, 48,
	-1000, -206, 6213, 627, -1000, -1000, -1000, 3598, 950, 8105,
	-1000, 269, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3598, 8609, 8609, 8609, 8609, -117,
	1268, 620, -1000, 8105, 698, -1000, -1000, -1000, -1000, -1000,
	-1000, 372, 951, 695, -1000, 1578, -156, 177, -1000, -1000,
	-1000, -1000, -1000, 1280, -1000, -1000, 511, -1000, -1000, 999,
	1538, 1034, 1102, 548, 8105, 398, -209, 548, -1000, 1576,
	530, 706, 1260, -1000, 721, 1517, 999, 1381, -1000, -1000,
	-126, 8105, 2927, 3671, 627, 3671, 27, 1517, 403, 915,
	829, 1259, 9099, -1000, 2865, 782, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 951, 1552, 1550, 1547, 1545, 1779, 188, 619, 135,
	1507, -1000, -1000, 3984, -1000, -1000, -1000, -1000, -1000, 1095,
	1091, 402, 402, 1292, 1280, 1085, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 699, 699,
	1083, 1078, 548, -1000, 1379, -1000, -1000, 8609, 2327, 2327,
	-12, -1000, -1000, 875, -1000, -1000, 999, 1290, 999, 695,
	-1000, -1000, 999, 2080, 2105, 1956, 1922, 1280, -109, -1000,
	627, 8105, 942, -1000, 213, 456, 456, -1000, -1000, -1000,
	153, 858, 846, 844, 843, 95, -1000, 1525, 503, 5097,
	-1000, 548, 1538, 548, 1379, 627, 1062, 1538, 1379, -1000,
	1433, 8105, 8105, 8105, -1000, 1463, -1000, 7684, -1000, -1000,
	-241, 627, -1000, 3671, -1000, 201, -1000, -1000, -1000, 1463,
	873, 942, 1077, -1000, 1247, 1306, -1000, -1000, -1000, 1465,
	962, 507, 951, 173, -1000, -1000, 1255, 3237, -49, -1000,
	-1000, -1000, 582, 509, 906, -1000, 1446, -1000, -1000, 2774,
	1457, -1000, -1000, -1000, -1000, -1000, 3671, 3671, 3671, 665,
	193, -1000, 272, 1022, 1020, 402, 951, -1000, 579, -1000,
	-1000, 327, 548, 1379, -1000, 2327, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 8609, -1000, 8609, -1000, 8609, -1000, 8609,
	8609, 999, 861, 627, 1284, -1000, -1000, -1000, 793, -1000,
	791, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 131, -1000,
	1522, 999, -1000, 1379, 548, -1000, -1000, -1000, 548, -1000,
	1431, 627, 627, -1000, -1000, 1222, 8105, -248, 6886, -1000,
	-1000, 251, 942, -1000, 251, 1166, 829, 942, -1000, -1000,
	938, 829, 829, 829, 829, 829, -1000, 1417, 1413, -1000,
	1411, 1410, 1420, 942, -1000, 1007, 962, 520, 1280, -1000,
	943, -1000, -1000, -1000, 4356, 1505, 3609, 1255, -49, 1251,
	-1000, -41, -20, 2346, 6213, 534, -1000, -1000, -1000, -1000,
	-1000, 951, 1971, -249, 1934, 130, 183, 150, -1000, 159,
	548, 548, 998, 999, -1000, 942, 1379, -1000, 2120, 2120,
	2120, 2120, 12, -1000, -1000, 951, -1000, -1000, -1000, 506,
	8105, -1000, -1000, -1000, 1379, -1000, 1538, 829, 627, 6795,
	-1000, -1000, 1179, 1280, -1000, 1538, 829, 1185, -1000, 1124,
	-1000, 567, 1306, 1305, 1387, 988, -1000, -1000, -1000, -1000,
	1412, -1000, 1270, -1000, -1000, -1000, -1000, -130, 433, 431,
	428, 951, -1000, 1299, -1000, 1251, -49, -35, -1000, -1000,
	-1000, -1000, 627, 565, -1000, -1000, -1000, 3671, 6681, 658,
	3671, -1000, -1000, 144, -1000, 1379, 1379, -1000, -1000, 1283,
	-1000, -1000, -1000, -1000, -1000, 999, 182, -137, 995, 6213,
	1069, -1000, 627, -1000, 1536, 1249, -1000, 1378, 938, 1280,
	-1000, 1011, 951, 1529, 1185, -1000, 1538, 938, 8105, -1000,
	-1000, 8105, 1282, -1000, 8105, -1000, -1000, -1000, -1000, 1281,
	1280, 1280, 1280, 991, -1000, -1000, -1000, -1000, -56, -66,
	-1000, 8105, 407, 3671, 128, 175, -1000, -1000, -1000, -1000,
	951, -1000, 1430, -120, -150, -1000, -1000, -1000, 999, 8105,
	1534, 1520, -1000, 1454, 1116, 1243, -1000, -1000, 7354, 999,
	993, 494, 991, 1517, -1000, 1529, -1000, 627, 627, 398,
	627, -218, 398, 398, 398, 859, 951, -1000, -1000, -1000,
	627, -1000, -251, 3671, 6787, 989, -1000, 1424, -1000, -1000,
	-1000, -1000, 8105, 8105, 284, -1000, 1280, -1000, -1000, 1257,
	951, 951, -1000, -1000, 1517, 972, 969, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 967, 967, 967, 520, -1000, 1303,
	240, -1000, -1000, -129, 627, 1248, 1566, -1000, 1280, -1000,
	1299, 479, -1000, -1000, -1000, -1000, -218, -1000, -1000, -1000,
	-130, 375, -1000, -143, 938, 1243, 999, 951, -1000, -1000,
	-1000, -152, 1242, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1873, 62, 86, 1872, 1871, 1870, 1866, 1865, 1862,
	1861, 1857, 1855, 1854, 1853, 1852, 1850, 1848, 1847, 158,
	1846, 1845, 1842, 69, 1841, 1840, 1839, 1838, 68, 70,
	73, 82, 809, 24, 23, 39, 64, 1836, 43, 1834,
	1833, 46, 1831, 34, 1830, 1829, 452, 1828, 1827, 4,
	239, 80, 97, 1825, 1823, 87, 1387, 1821, 1817, 76,
	1811, 1809, 83, 9, 6, 7, 8, 1808, 487, 5,
	1804, 79, 1802, 1801, 1800, 1798, 14, 1797, 47, 53,
	15, 49, 1796, 16, 54, 42, 26, 10, 1, 44,
	25, 1794, 22, 30, 29, 1793, 55, 1791, 110, 40,
	52, 57, 0, 41, 75, 1786, 1784, 1783, 182, 77,
	28, 11, 1782, 63, 1781, 61, 91, 27, 93, 92,
	1780, 88, 1778, 1777, 1776, 1769, 1768, 1814, 831, 106,
	65, 48, 1766, 1765, 84, 332, 331, 81, 338, 1433,
	72, 1764, 1762, 1755, 1753, 100, 1738, 67, 94, 20,
	496, 1737, 1736, 1733, 1732, 1730, 1729, 1727, 96, 1726,
	74, 71, 95, 38, 37, 1718, 1715, 1708, 1707, 78,
	1705, 1704, 1702, 59, 1691, 1687, 89, 60, 103, 98,
	102, 1684, 1682, 58, 99, 101, 1681, 90, 21, 13,
	113, 1676, 50, 1671, 1667, 1665, 2, 3, 1664, 1663,
	1659, 1658, 1657, 1637, 51, 1625, 85, 1623, 19, 1621,
	1619, 45, 1618, 1617, 1616, 1610, 1608, 1068, 387, 1606,
	66, 108, 1605, 142,
}

var yyR1 = [...]uint8{
	0, 213, 214, 214, 1, 1, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 15, 15, 15, 15, 15, 15,
	15, 216, 216, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 22, 22, 7, 8, 8, 8, 219, 219,
	41, 41, 85, 85, 9, 9, 9, 9, 10, 10,
	193, 193, 192, 194, 194, 11, 11, 11, 11, 11,
	186, 186, 186, 186, 186, 12, 12, 189, 189, 189,
	13, 13, 13, 13, 90, 90, 94, 94, 94, 95,
	95, 95, 95, 205, 205, 114, 114, 215, 215, 220,
	220, 220, 220, 220, 220, 220, 184, 184, 184, 184,
	185, 185, 185, 185, 187, 187, 188, 188, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 191, 191,
	100, 100, 167, 167, 167, 168, 168, 168, 168, 168,
	168, 170, 170, 171, 171, 106, 106, 172, 172, 18,
	152, 153, 153, 153, 153, 153, 153, 153, 153, 139,
	139, 139, 117, 117, 117, 117, 117, 117, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 178, 178, 178,
	178, 178, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 180, 181, 182, 174, 174, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	129, 129, 129, 129, 129, 129, 173, 173, 169, 169,
	169, 169, 121, 121, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 120, 120, 120, 120, 120, 120,
	120, 125, 125, 122, 122, 122, 122, 122, 122, 122,
	122, 118, 118, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 126, 126, 124, 124, 124,
	124, 124, 124, 124, 124, 138, 138, 127, 127, 136,
	136, 137, 137, 137, 128, 128, 128, 135, 135, 135,
	132, 132, 133, 133, 134, 134, 134, 130, 130, 130,
	131, 131, 131, 141, 163, 163, 163, 165, 165, 166,
	166, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 151, 151, 183, 183, 162, 162, 162, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 150, 150,
	160, 160, 161, 161, 158, 158, 158, 159, 145, 145,
	145, 145, 145, 146, 146, 147, 147, 147, 147, 142,
	142, 143, 143, 144, 144, 176, 176, 176, 209, 209,
	209, 209, 209, 209, 210, 210, 177, 177, 148, 148,
	149, 149, 156, 156, 156, 156, 221, 221, 154, 154,
	154, 155, 155, 155, 222, 19, 20, 20, 21, 21,
	21, 25, 25, 25, 23, 23, 24, 24, 30, 30,
	29, 29, 31, 31, 31, 31, 105, 105, 105, 104,
	104, 206, 206, 206, 206, 206, 33, 33, 34, 34,
	35, 35, 36, 36, 36, 196, 196, 195, 195, 197,
	197, 197, 197, 197, 197, 48, 48, 83, 83, 83,
	86, 86, 37, 37, 37, 37, 38, 38, 39, 39,
	40, 40, 112, 112, 111, 111, 111, 110, 110, 42,
	42, 42, 44, 43, 43, 43, 43, 45, 45, 47,
	47, 46, 46, 49, 49, 49, 49, 50, 50, 84,
	84, 32, 32, 32, 32, 32, 32, 32, 97, 97,
	52, 52, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 61, 61, 61,
	61, 61, 61, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 28, 28, 62, 62, 62, 68,
	63, 63, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	59, 59, 59, 59, 59, 59, 59, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 223, 223,
	60, 60, 60, 60, 26, 26, 26, 26, 26, 113,
	113, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 116, 116, 116, 116, 116, 116, 116,
	116, 72, 72, 27, 27, 70, 70, 71, 99, 99,
	73, 73, 69, 69, 69, 198, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 74, 74, 75, 75,
	207, 207, 208, 76, 76, 77, 77, 78, 79, 79,
	79, 80, 80, 80, 80, 81, 81, 81, 54, 54,
	54, 54, 54, 54, 82, 82, 82, 82, 87, 87,
	64, 64, 66, 66, 65, 67, 88, 88, 92, 89,
	89, 93, 93, 93, 93, 93, 16, 17, 91, 91,
	91, 107, 107, 107, 98, 98, 96, 96, 102, 103,
	103, 103, 103, 108, 108, 109, 109, 199, 199, 199,
	200, 200, 200, 201, 201, 202, 203, 203, 204, 212,
	212, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 217, 218,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 7, 10, 7, 11, 11, 9, 11,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 2, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 10, 5, 9, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 0, 3, 0,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 1,
	0, 3, 0, 2, 2, 0, 2, 2, 2, 2,
	2, 0, 2, 0, 3, 0, 1, 0, 2, 4,
	4, 0, 1, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 3, 1, 1, 1, 1, 1, 2, 2,
	3, 2, 4, 2, 4, 2, 2, 3, 2, 3,
	2, 7, 9, 3, 3, 6, 9, 9, 6, 6,
	8, 8, 5, 8, 7, 4, 0, 2, 4, 6,
	2, 4, 2, 1, 1, 1, 2, 1, 1, 1,
	3, 1, 2, 1, 1, 2, 0, 4, 3, 4,
	3, 3, 3, 3, 3, 3, 3, 2, 4, 6,
	2, 3, 2, 3, 1, 3, 0, 2, 0, 2,
	2, 3, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 2, 2, 2, 1,
	1, 0, 1, 1, 3, 3, 2, 2, 2, 1,
	1, 1, 1, 4, 5, 4, 4, 4, 1, 2,
	2, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 3, 3, 0, 3, 3,
	0, 1, 0, 1, 0, 2, 1, 0, 3, 3,
	0, 1, 2, 6, 0, 1, 4, 1, 2, 1,
	3, 2, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 1, 1, 0, 2, 5, 2,
	3, 3, 2, 3, 2, 2, 3, 4, 1, 1,
	1, 1, 1, 3, 3, 2, 2, 1, 2, 5,
	5, 8, 8, 13, 11, 1, 1, 2, 2, 10,
	8, 9, 7, 7, 5, 0, 1, 1, 0, 1,
	1, 1, 2, 2, 1, 2, 0, 3, 0, 1,
	1, 3, 0, 4, 1, 3, 2, 1, 1, 2,
	1, 1, 1, 1, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 3, 6, 4, 7, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 0, 4, 1, 3, 1,
	1, 1, 1, 1, 1, 4, 8, 1, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 0,
	4, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 4, 4, 4, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 4, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 6, 2, 2, 2, 2, 2,
	2, 2, 3, 3, 1, 1, 1, 1, 2, 1,
	4, 5, 5, 5, 5, 6, 4, 4, 4, 6,
	6, 6, 6, 6, 8, 6, 8, 6, 8, 6,
	8, 9, 7, 5, 4, 4, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 2, 2,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	0, 2, 1, 3, 5, 3, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 3, 0, 2,
	1, 3, 1, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 5, 3, 1, 3, 1, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 2,
	0, 2, 2, 0, 1, 4, 1, 3, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -213, -1, -14, -15, -18, 125, 126, -214, 380,
	-152, 58, -209, -210, -172, 134, 147, 165, 166, 352,
	132, 364, 365, 149, 367, 79, -96, 137, -153, -139,
	-102, 63, 36, 61, 133, 133, 135, 205, 135, -102,
	-102, 138, -46, -108, 61, 63, 132, -98, 138, 367,
	364, 365, 332, 132, 60, 59, -140, -117, -121, -118,
	-123, -122, -124, -102, -119, -120, 241, 344, 238, 242,
	239, 244, 245, 246, 119, 243, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 247, 259, 33,
	154, 231, 232, 233, 236, 235, 237, 234, 260, 261,
	262, 263, 264, 265, 266, 267, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 221, 223, 224, 226, 227,
	228, 230, 229, -140, -140, -102, 56, 204, -102, -98,
	206, -98, 56, -184, 56, 19, 185, 186, 198, 81,
	25, 122, -98, -46, 81, -46, 296, -156, -221, 347,
	37, -139, -141, -145, -142, -143, -144, -157, -146, 141,
	139, 149, 378, 143, 144, -150, 145, 133, 150, 73,
	81, -178, 141, -181, 56, 275, 281, 139, 150, 149,
	378, 71, 142, 25, 354, 356, 31, 32, -134, 381,
	269, -132, 278, -127, 58, -127, -126, 240, -128, 58,
	-127, -128, -127, -128, -130, 242, -130, -130, -130, -130,
	58, 58, -127, -127, -127, -127, -127, -136, 58, -125,
	225, -136, -137, 58, -137, 56, 57, -46, -102, 56,
	-46, -205, 375, 376, -46, -46, -187, -185, 8, 9,
	10, -46, 199, 26, -117, -109, -108, -101, 130, 186,
	355, 80, 25, 27, 275, 281, 185, 83, 119, 16,
	84, 192, 364, 365, 118, 76, 333, 125, 52, 325,
	326, 323, 190, 335, 336, 324, 282, 197, 20, 31,
	375, 10, 28, 152, 24, 112, 127, 187, 87, 88,
	155, 26, 153, 75, 193, 195, 19, 55, 145, 11,
	354, 13, 14, 369, 356, 138, 137, 99, 368, 133,
	50, 8, 121, 29, 376, 96, 46, 150, 196, 48,
	97, 17, 327, 328, 34, 342, 159, 114, 53, 40,
	370, 81, 371, 73, 56, 296, 191, 79, 15, 51,
	160, 372, 147, 194, 98, 128, 332, 49, 188, 373,
	131, 189, 6, 338, 33, 151, 47, 132, 283, 86,
	136, 74, 166, 5, 149, 9, 54, 57, 329, 330,
	331, 38, 85, 12, 148, 346, 77, -46, 26, 130,
	-46, -154, 59, -103, 71, -102, 289, 146, -101, 36,
	58, -177, 56, 81, -148, -102, 150, -150, 61, 133,
	-176, 364, 365, -217, 58, -150, -150, 61, 61, 150,
	73, 19, -102, 9, 150, 150, -177, 63, -46, 58,
	-174, 355, 16, 58, -179, 58, -180, 63, 64, 65,
	66, 73, -129, 72, -52, 270, -59, 323, 326, 325,
	271, 74, 75, -102, 341, 340, -108, 61, -182, 65,
	382, -133, 279, 65, -130, -127, -130, 65, 61, -130,
	-130, -131, 119, 118, 33, -131, -131, -131, -131, -138,
	63, -138, -135, 346, 347, -135, 65, -136, 65, -46,
	-102, 58, 56, -46, 25, 135, 25, -167, 25, 56,
	59, 199, -184, -102, 57, -106, 141, -145, 149, 130,
	89, -103, -221, -161, -158, -102, 150, 10, 9, 19,
	145, 139, 149, 378, -176, 61, 58, -32, -51, 81,
	-56, 31, 26, 9, 76, -55, -52, -69, -198, -67,
	-68, 119, 120, 108, 109, 116, 82, 121, -59, -57,
	-58, -60, -201, 176, 63, 64, -102, 62, 72, 65,
	66, 67, 68, 73, -108, 301, -65, -217, 48, 49,
	333, 334, 335, 336, 342, 337, 84, 38, 40, 247,
	270, 271, 323, 331, 330, 329, 327, 328, 325, 326,
	377, 138, 324, 114, 332, 268, 61, 61, -176, 149,
	-148, -102, 366, -178, 378, -129, -217, 58, -32, 25,
	31, 65, -179, 58, -180, -169, 377, -169, -217, -127,
	58, -127, 58, 58, -217, -217, -217, 122, 60, -131,
	-130, -131, 60, 60, -131, -131, 61, 61, 119, 60,
	59, 60, 231, 231, 59, 60, 59, 58, 57, 56,
	-160, -161, -59, -102, -46, 58, -2, -3, -4, 6,
	-217, -98, -2, -168, 19, 173, 174, -46, -185, -83,
	-102, 150, -187, -184, -102, -216, 133, 150, -102, 141,
	-145, -155, -103, 63, 65, 60, 59, -127, -159, 273,
	-127, -147, 169, 170, 33, 171, -147, 366, 150, 150,
	-176, -217, 58, -161, -218, 80, 79, 96, 60, -32,
	-53, 99, 81, 97, 98, 83, 105, 104, 115, 108,
	109, 110, 111, 112, 113, 114, 106, 107, 377, 118,
	89, 90, 91, 92, 93, 94, 95, 100, 101, 102,
	103, -97, -217, -68, -217, -217, -217, 123, 124, -56,
	-56, -56, -56, -56, -56, -56, -202, 269, -169, 63,
	122, 122, -2, -63, -32, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -72, -32, -217, 41, -217, -217,
	-217, -223, -217, -223, -223, -223, -223, -223, -223, -223,
	-116, 119, 242, 154, 233, -119, -118, 248, 247, -217,
	-217, -217, -217, -176, 58, -177, -32, -83, 60, 58,
	356, 59, 60, -179, 63, 60, 272, 121, -117, -218,
	60, 60, 60, -30, 24, -29, -63, -31, -32, 110,
	-108, -29, -32, -29, -103, -131, -130, 63, -130, 280,
	280, 65, 65, -160, -102, -46, 60, 58, 58, -83,
	-76, 15, -21, 5, -19, -222, -2, -46, 136, 21,
	6, 8, 9, 10, 19, -100, 59, 25, -187, -215,
	58, -102, 149, -102, -163, -165, 346, -164, 57, 146,
	71, 178, 179, 180, 181, 182, 183, 184, -158, -79,
	27, 28, -177, 56, 73, 172, -177, 56, -148, -176,
	58, -32, -161, 60, -173, 171, -32, -32, -61, 73,
	81, 74, 75, -56, 21, 22, 23, -62, -65, -68,
	69, 99, 97, 98, 83, -56, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-121, 232, -116, -119, -113, 61, 63, 61, -69, -102,
	-108, -218, -55, 63, -102, -55, -102, 381, -103, -109,
	-101, -103, -218, 59, -218, -2, -29, -29, -32, -115,
	119, 238, 154, 233, 227, 257, 258, 277, 231, 278,
	220, 212, 217, 230, 228, 214, 229, 213, 226, 223,
	236, 235, 237, 248, 239, 244, 246, 245, 243, -32,
	-31, -31, -29, -23, 24, -70, -71, 85, -69, 19,
	-218, -218, -218, -218, 240, -29, -30, -29, -29, -29,
	-149, -102, -217, -218, 60, 352, 353, -32, 58, 65,
	60, -134, -218, -29, 59, -218, -218, -105, -104, 25,
	-102, 63, 122, -218, -218, -217, -131, -131, 60, 60,
	60, 58, 58, -84, 368, -160, 60, -80, 17, 16,
	-5, -3, -217, 21, 24, -25, 44, 45, -20, -218,
	25, -149, 187, -99, 85, -102, -188, 207, -190, -6,
	-8, -7, -10, -9, -11, -12, -13, -16, -3, -22,
	10, 9, 20, 33, 191, 192, 197, 193, 148, 138,
	-17, 8, 332, 56, -220, -102, 108, 89, 63, -139,
	59, 58, 58, 364, 365, 139, -162, 56, -164, 346,
	58, 348, 61, -151, 89, 63, 89, 89, 89, 89,
	89, 89, 89, 9, 10, 58, 58, -161, -218, 60,
	-163, 339, 73, 74, 75, -56, -56, -56, -62, -56,
	-56, -56, -28, 155, 80, 346, -218, -218, 122, -203,
	-204, 63, 122, -32, -218, -218, -218, 59, 57, 59,
	-127, -127, -127, -137, 218, -127, 218, -137, -127, -127,
	-127, -127, -127, -127, 25, 59, 11, 59, 11, -218,
	-29, -73, -71, 87, -32, -218, -108, -218, -218, -218,
	-218, 60, 59, -32, -173, 56, 60, -175, 60, 60,
	-218, -31, -206, 379, -104, 110, -109, -206, -206, -30,
	-84, -160, -161, -50, 12, 58, 60, -50, -81, 19,
	34, -32, -77, -78, -32, -76, -2, -23, 70, -2,
	-170, 57, 188, 207, -32, 380, -188, -76, -19, -19,
	-19, -193, -102, -192, -19, -212, -211, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, -102, -102,
	-102, -186, 40, 194, 195, 196, -51, -56, -32, -51,
	-46, 60, -220, -102, -220, -220, -220, -220, -220, -161,
	-161, 58, 58, 150, -102, -166, -164, -102, 65, -183,
	56, 77, 65, -183, -183, -183, -183, -183, -147, -147,
	-149, -161, 60, -173, -163, -162, -28, 80, -56, -56,
	231, -103, 382, 59, -169, -103, -115, 119, -113, -32,
	-130, 61, -115, -56, -56, -56, -56, 343, -76, 88,
	-32, 86, 142, -102, -218, 10, 9, 352, 353, 60,
	208, 358, 359, 159, 360, 171, 361, 362, -217, 122,
	-218, -50, 60, 60, -163, -32, -83, -84, -163, 9,
	99, 59, 18, 59, -79, -80, -218, -24, 47, -171,
	346, -32, -191, 207, -190, -189, -190, -190, 88, -80,
	-96, 11, -41, -46, -34, -35, -36, -37, -48, -68,
	-217, -46, 59, -194, -117, 189, -89, -114, 209, -93,
	291, 290, -103, 301, -91, 289, 242, 288, -183, 59,
	-102, 11, 11, 11, 11, -190, 207, 86, 207, -100,
	19, 60, 60, -161, -161, 58, -217, 60, 59, -177,
	-177, 60, 60, -163, -162, -56, 280, -204, -218, -218,
	-218, -218, -218, 59, -218, 19, -218, 59, -218, 19,
	-217, -27, 338, -32, -46, -173, -147, -147, 346, 65,
	16, 65, 65, 65, 65, 359, 159, 361, 16, -218,
	160, -76, 110, -163, -50, -163, -162, 60, -50, -162,
	42, -32, -32, -78, -81, -29, 378, -188, 380, -190,
	-81, -47, 29, -46, -46, -41, -219, 59, 11, 57,
	33, 59, -42, -44, -43, -45, 46, 50, 52, 47,
	48, 49, 53, -112, 25, -34, -217, -111, 160, -110,
	25, -108, 63, -192, -102, 190, 59, -89, 209, -90,
	-94, 292, 294, 89, 122, -107, -102, 63, 31, 33,
	-211, 29, -189, -188, -189, -99, 187, -199, 200, 81,
	60, 60, -161, -102, -164, 142, -163, -162, -56, -56,
	-56, -56, -56, -218, 63, 58, 65, 65, 363, -108,
	16, -218, -162, -163, -163, 43, -33, 11, -32, 380,
	88, -190, -85, 160, -46, -85, 57, -34, -46, -88,
	-92, -69, -35, -36, -36, -35, -36, 46, 46, 46,
	51, 46, 51, 46, -43, -108, -218, -49, 54, 137,
	55, -217, -110, 19, -93, -90, 59, 293, 295, 296,
	56, 77, -32, -103, -131, -102, 88, 380, 380, 88,
	207, 188, -200, 201, 200, -163, -163, 60, -218, -46,
	-162, -218, -218, -218, -218, -26, 99, 346, -149, 122,
	-207, -208, -32, -162, -50, -34, 88, -54, 33, 38,
	-2, -217, -217, -50, -34, -50, -33, 59, 89, -39,
	-38, 56, 57, -40, 56, -38, 46, 46, -196, 346,
	133, 133, 133, -86, -102, -2, -94, -95, 297, 294,
	300, 89, 88, 87, 87, -189, 203, 202, -162, -162,
	58, -218, 344, 53, 349, 60, -103, -218, -76, 59,
	-74, 13, -87, 56, -88, -64, -66, -65, -217, -2,
	-82, -102, -86, -76, -50, -50, -92, -32, -32, 58,
	-32, 58, -217, -217, -217, -218, 59, 294, 298, 299,
	-32, 138, -188, 207, 380, -149, 43, 345, 350, -218,
	-208, -75, 14, 16, 30, -87, 59, -218, -218, -218,
	59, 122, -218, -80, -76, -83, -195, -197, 369, 370,
	371, 372, 373, 374, -83, -83, -83, -111, -102, 380,
	-189, 88, 60, 43, -32, -63, 150, -66, 38, -2,
	-217, -102, -102, -80, 60, 60, 59, -218, -218, -218,
	-49, 88, 88, 346, 9, -64, -2, 122, -197, -196,
	138, 349, -88, -218, -102, 350,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 786, 1, 3,
	6, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	784, 399, 400, 401, 404, 0, 0, 787, 0, 152,
	196, 196, 196, 788, 0, 0, 784, 0, 784, 0,
	0, 0, 0, 511, 793, 794, 784, 0, 0, 405,
	402, 403, 148, 0, 412, 0, 159, 324, 320, 163,
	164, 165, 166, 167, 307, 243, 271, 272, 307, 295,
	314, 307, 314, 278, 307, 314, 327, 327, 327, 327,
	327, 286, 287, 288, 289, 290, 291, 292, 0, 0,
	263, 307, 307, 307, 307, 307, 269, 270, 297, 298,
	299, 300, 301, 302, 303, 304, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 309, 261, 309, 311,
	311, 259, 260, 160, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 150, 414, 0,
	417, 153, 154, 155, 156, 157, 158, 0, 406, 408,
	0, 395, 0, 0, 0, 0, 0, 368, 369, 169,
	0, 171, 0, 173, 0, 175, 176, 0, 178, 180,
	406, 0, 0, 0, 0, 0, 0, 0, 168, 0,
	326, 322, 321, 242, 0, 327, 307, 296, 327, 0,
	327, 327, 279, 280, 330, 0, 330, 330, 330, 330,
	0, 0, 317, 317, 266, 267, 268, 254, 0, 309,
	262, 256, 257, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 93, 94, 0, 132, 0, 114, 110, 111,
	112, 0, 109, 0, 22, 512, 795, 796, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 0, 785, 145,
	0, 0, 0, 418, 420, 789, 790, 791, 792, 416,
	0, 378, 0, 0, 0, 409, 359, 0, 364, -2,
	0, 396, 397, 803, 961, 0, 0, 362, 395, 408,
	170, 0, 0, 0, 177, 179, 0, 183, 184, 803,
	0, 214, 0, 0, 197, 0, 200, -2, 203, 204,
	205, 238, 207, 208, 209, 0, 211, 307, 307, 234,
	0, 530, 531, 0, 0, 0, 0, -2, 212, 213,
	325, 162, 323, 0, 330, 327, 330, 0, 0, 330,
	330, 281, 331, 0, 0, 282, 283, 284, 285, 0,
	305, 0, 264, 0, 0, 265, 0, 255, 0, 0,
	0, 0, 0, 0, 0, 784, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 408, 29, 146, 0,
	0, 419, 415, 0, 372, 307, 307, 0, 0, 0,
	0, 0, 395, 0, 0, 363, 0, 0, 521, 803,
	526, 528, 0, 0, 0, 572, 573, 574, 575, 576,
	577, 803, 803, 803, 803, 803, 803, 803, 604, 605,
	606, 607, 0, 609, -2, 717, 712, 719, 720, 721,
	722, 723, 724, 725, 0, 0, 765, 803, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 0, 0, 0,
	0, 0, 648, 648, 648, 648, 648, 648, 648, 648,
	0, 0, 0, 0, 0, 804, 360, 361, 366, 395,
	0, 409, 195, 172, 406, 174, 803, 0, 0, 0,
	215, 0, 0, 0, 0, 202, 0, 206, 0, 230,
	0, 232, 0, 0, -2, 803, 803, 0, 308, 273,
	330, 275, 315, 316, 276, 277, 332, 328, 329, 327,
	0, 327, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 370, 371, 307, 0, 0, -2, 733, 0, 424,
	0, 0, -2, 0, 0, 133, 134, 130, 115, 113,
	477, 478, 0, 0, 97, 0, 31, 32, 409, 408,
	30, 413, 421, 422, 423, 334, 0, 738, 376, 377,
	375, 406, 385, 386, 0, 0, 406, 407, 408, 395,
	0, 803, 0, 0, 236, 803, 803, 0, 962, 524,
	803, 0, 0, 803, 803, 803, 803, 803, 803, 803,
	803, 803, 803, 803, 803, 803, 803, 803, 0, 0,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 527, 0, 544, 0, 0, 0, 0, 0, 595,
	596, 597, 598, 599, 600, 601, 608, 0, 716, 718,
	0, 0, 36, 0, 570, 803, 803, 803, 803, 803,
	803, 803, 803, 434, 0, 702, 0, 0, 0, 0,
	0, 639, 0, 640, 641, 642, 643, 644, 645, 646,
	647, 693, 0, 695, 696, 697, 698, 699, 700, 803,
	-2, 803, 803, 367, 0, 0, 0, 0, 0, 803,
	192, 0, 198, 0, 238, 201, 239, 240, 324, 210,
	231, 233, 235, 0, 803, 0, 0, 440, 446, 442,
	0, 0, 446, 0, 0, 274, 330, 306, 330, 318,
	319, 0, 0, 0, 0, 0, 519, 961, 0, 0,
	741, 0, 0, 428, 431, 426, 36, 0, 0, 136,
	137, 138, 139, 140, 0, 708, 0, 0, 0, 23,
	99, 0, 0, 409, 356, 335, 0, 337, 0, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 373, 374,
	739, 740, 379, 0, 387, 388, 380, 0, 0, 0,
	0, 0, 0, 334, 394, 0, 522, 523, 525, 547,
	0, 549, 551, 532, 803, 803, 803, 536, 566, 567,
	568, 0, 803, 803, 803, 564, 540, 0, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 589,
	592, 0, 603, 307, 593, 659, 660, 0, 0, 712,
	0, 546, 590, 238, 0, 591, 602, 0, 713, 0,
	-2, 715, 569, 803, 764, 36, 0, 0, 0, 0,
	-2, 307, 664, 307, 311, 667, 668, 669, 307, 672,
	674, 675, 676, 677, 311, 679, 680, 681, 682, 683,
	307, 307, 686, 687, 307, 307, 690, 307, 307, 0,
	0, 0, 0, 803, 435, 710, 705, 803, 0, 0,
	636, 637, 638, 649, 694, 0, 0, 439, 0, 0,
	0, 410, 803, 236, 185, 188, 189, 0, 216, 0,
	0, 241, 610, 0, 803, 451, 616, 443, 447, 0,
	449, 450, 0, 451, 451, -2, 293, 294, 310, 313,
	519, 0, 0, 517, 0, 0, 517, 745, 803, 803,
	733, 38, 0, 429, 430, 434, 432, 433, 425, 37,
	0, 141, 0, 0, 803, 479, 18, 0, 116, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 733, 424,
	424, 424, 0, 424, 0, 0, 0, 70, 803, 803,
	776, 42, 43, 0, 0, -2, 99, 99, -2, 99,
	99, 0, 0, 0, 0, 0, 333, 0, 338, 0,
	0, 0, 341, 0, 353, 343, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 236, 334,
	356, 237, 548, 550, 552, 533, 534, 535, 537, 564,
	541, 0, 538, 803, 803, 0, 529, 545, 0, 0,
	806, 238, 0, 571, -2, 617, 618, 0, 0, 803,
	661, 327, 665, 666, 670, 671, 673, 678, 684, 685,
	688, 689, 691, 692, 0, 803, 803, 803, 803, 0,
	733, 0, 706, 803, 0, 634, 635, 650, 651, 652,
	653, 0, 0, 0, 181, 0, 0, 0, 194, 199,
	611, 441, 612, 0, 448, 444, 0, 613, 614, 0,
	517, 0, 0, 334, 803, 0, 519, 334, 33, 0,
	0, 742, 734, 735, 738, 741, 36, 436, 427, -2,
	143, 803, 131, 0, 709, 0, 0, 741, 786, 0,
	0, 58, 63, 60, 0, 0, 809, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 65, 66,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 521,
	130, 98, 100, -2, 101, 102, 103, 104, 105, 0,
	0, 0, 0, 0, 357, 0, 339, 344, 342, 345,
	354, 355, 346, 347, 348, 349, 350, 351, 406, 406,
	0, 0, 334, 393, 356, 392, 539, 803, 565, 542,
	0, 713, 805, 0, 808, 714, 0, 307, 0, 0,
	662, 663, 0, 0, 0, 0, 0, 0, 703, 633,
	711, 803, 0, 411, 236, 0, 0, 190, 191, 193,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 0,
	615, 334, 517, 334, 356, 518, 0, 517, 356, 746,
	0, 803, 803, 803, 737, 745, 39, 803, 437, 16,
	0, 142, 17, 0, 129, 0, 77, 117, 19, 745,
	0, 0, 0, 50, 0, 458, 460, 461, 462, 492,
	0, 494, 0, 0, 62, 64, 54, 0, 0, 769,
	95, 96, 0, 0, 0, -2, 0, 780, 777, 0,
	68, 71, 72, 73, 74, 75, 0, 0, 0, 708,
	0, 24, 797, 0, 0, 0, 0, 336, 0, 381,
	382, 0, 334, 356, 390, 543, 594, 807, 619, 622,
	620, 621, 623, 803, 625, 803, 627, 803, 629, 803,
	803, 0, 0, 707, 0, 182, 186, 187, 0, 218,
	0, 220, 221, 222, 223, 224, 225, 226, 0, 452,
	0, 0, 445, 356, 334, 10, 8, 520, 334, 12,
	0, 743, 744, 736, 34, 456, 803, 0, 0, 78,
	127, 52, 0, 510, -2, 0, 0, 0, 48, 49,
	0, 0, 0, 0, 0, 0, 499, 0, 0, 502,
	0, 0, 0, 0, 493, 0, 0, 513, 0, 495,
	0, 497, 498, 61, 0, 0, 0, 55, 0, 57,
	84, 0, 0, 803, 0, 330, 781, 782, 783, 779,
	810, 0, 0, 0, 0, 0, 0, 800, 798, 0,
	334, 334, 0, 0, 340, 0, 356, 391, 0, 0,
	0, 0, 654, 632, 704, 0, 217, 219, 228, 0,
	803, 454, 7, 11, 356, 747, 517, 0, 144, 0,
	20, 79, 0, 0, 509, 517, 0, 517, 51, 456,
	766, 0, 459, 488, 490, 0, 485, 500, 501, 503,
	0, 505, 0, 507, 508, 463, 464, 465, 0, 0,
	0, 0, 496, 0, 770, 56, 0, 0, 87, 88,
	771, 772, 773, 0, 775, 69, 76, 0, 0, 82,
	0, 131, 26, 0, 799, 356, 356, 25, 358, 0,
	389, 624, 626, 628, 630, 0, 0, 0, 0, 0,
	0, 730, 732, 9, 726, 457, 128, 758, 0, 0,
	-2, 0, 0, 733, 517, 47, 517, 0, 803, 482,
	489, 803, 0, 483, 803, 484, 504, 506, 475, 0,
	0, 0, 0, 0, 480, -2, 85, 86, 0, 0,
	92, 803, 0, 0, 0, 0, 801, 802, 27, 28,
	0, 631, 0, 0, 0, 384, 229, 453, 0, 803,
	728, 0, 40, 0, 758, 748, 760, 762, 803, 36,
	0, 754, 0, 741, 46, 733, 767, 768, 486, 0,
	491, 0, 0, 0, 0, 494, 0, 89, 90, 91,
	774, 80, 0, 0, 0, 0, 655, 0, 658, 455,
	731, 35, 803, 803, 0, 41, 0, 763, -2, 0,
	0, 0, 53, 45, 741, 0, 0, 467, 469, 470,
	471, 472, 473, 474, 0, 0, 0, 513, 481, 0,
	0, 21, 383, 656, 729, 727, 0, 761, 0, -2,
	0, 756, 755, 44, 487, 466, 0, 514, 515, 516,
	465, 0, 83, 0, 0, 751, 36, 0, 468, 476,
	81, 0, 759, -2, 757, 657,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 113, 105, 3,
	58, 60, 110, 108, 59, 109, 122, 111, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 380,
	90, 89, 91, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 381, 3, 382, 115, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 116,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 106, 107, 112, 114, 117,
	118, 119, 120, 121, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:406
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:411
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:412
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:420
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:425
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:445
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:465
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:486
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:502
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:519
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:538
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:549
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:561
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:572
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:588
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:602
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:616
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body: []Statement{&BeginEnd{
						Statements:        yyDollar[10].blockStatement,
						SuppressSemicolon: true,
					}},
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:633
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:646
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[6].colIdent,
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:671
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:677
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:691
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:705
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:725
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:743
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:761
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:770
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:785
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:793
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:800
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:806
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:810
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:816
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:820
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:827
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:839
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:851
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:855
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:861
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:867
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:871
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:875
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:880
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:881
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:885
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:889
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:894
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:898
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:904
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:908
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:912
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:916
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:922
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:926
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:939
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:943
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:949
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:954
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:958
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:964
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:971
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:978
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:985
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:993
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1003
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1007
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1011
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1015
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1019
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1025
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1032
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1042
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1046
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1050
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1057
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1065
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1075
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1083
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1094
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1098
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1104
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1108
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1112
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1118
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1122
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1126
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1130
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1136
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1140
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1146
		{
			yyVAL.str = SessionStr
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1150
		{
			yyVAL.str = GlobalStr
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1155
		{
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1156
		{
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1160
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1161
		{
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1162
		{
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1163
		{
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1164
		{
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1165
		{
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1166
		{
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1170
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1174
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1178
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1182
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1192
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1196
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1201
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1207
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1211
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1217
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1221
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1227
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1239
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1250
		{
			yyVAL.statement = &BeginEnd{
				Statements: yyDollar[2].blockStatement,
			}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1258
		{
			yyVAL.empty = struct{}{}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1260
		{
			yyVAL.empty = struct{}{}
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1263
		{
			yyVAL.bytes = nil
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1267
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1271
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1276
		{
			yyVAL.bytes = nil
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1280
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1284
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1288
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1292
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1296
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1301
		{
			yyVAL.expr = nil
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1305
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1310
		{
			yyVAL.expr = nil
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1314
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1319
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1323
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1328
		{
			yyVAL.bytes = nil
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1332
		{
			yyVAL.bytes = nil
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1338
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1345
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1351
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1355
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1360
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1364
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1368
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1372
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1376
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1380
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1386
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1391
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1396
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1402
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1413
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1419
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1432
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1437
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1442
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1447
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1453
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1458
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1463
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1468
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1473
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1478
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1483
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1488
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1493
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1502
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1512
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1517
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1522
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1529
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1536
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1544
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1549
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1554
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1559
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1565
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1571
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1577
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1584
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1590
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1596
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1600
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1604
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1608
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1612
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1618
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1622
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1626
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1630
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1634
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1638
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1642
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1646
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1650
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1656
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1662
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1668
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1674
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1678
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1683
		{
			yyVAL.sequence = &Sequence{}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1687
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1692
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1697
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1702
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1707
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1712
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1717
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1722
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1727
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1732
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1737
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1742
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1747
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1754
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1758
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1762
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1766
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1770
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1774
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1779
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1783
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1788
		{
			yyVAL.bytes = nil
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1797
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1802
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1889
		{
			yyVAL.str = ""
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1893
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2023
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 294:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2028
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2033
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2037
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2043
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2051
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2055
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2059
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2063
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2077
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2082
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2087
		{
			yyVAL.optVal = nil
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2091
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2096
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2100
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2108
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2112
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2118
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2126
		{
			yyVAL.optVal = nil
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2130
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2134
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2143
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2147
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2151
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2156
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2160
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2165
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2169
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2174
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2178
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2182
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2187
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2191
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2195
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2200
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2204
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2208
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2214
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2219
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2223
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2227
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2233
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2237
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2243
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2247
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2253
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2257
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2262
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2266
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2270
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2274
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2278
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2282
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2286
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2290
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2294
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2300
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2304
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2310
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2314
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2320
		{
			yyVAL.indexPartition = nil
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2324
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 358:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2328
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2334
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2338
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2342
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2346
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2350
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2354
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2358
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2362
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2366
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2372
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2376
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2382
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2387
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2393
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2397
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2403
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2408
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2412
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2422
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2427
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2434
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 381:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2441
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 382:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2448
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 383:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2457
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 384:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2468
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2479
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2483
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2487
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2491
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 389:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2497
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 390:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2507
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 391:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2518
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:   yyDollar[6].indexColumns,
				Options:   yyDollar[8].indexOptions,
				Partition: yyDollar[9].indexPartition,
			}
		}
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2528
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 393:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2539
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2548
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2557
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2561
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2565
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2571
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2575
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2579
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2583
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2587
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2591
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2597
		{
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2598
		{
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2602
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2606
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2611
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2618
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2622
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2629
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2633
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2639
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2643
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2648
		{
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2649
		{
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2653
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2657
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2661
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2667
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2671
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2675
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2680
		{
			setAllowComments(yylex, true)
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2684
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2690
		{
			yyVAL.bytes2 = nil
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2694
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2700
		{
			yyVAL.str = UnionStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2704
		{
			yyVAL.str = UnionAllStr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2708
		{
			yyVAL.str = UnionDistinctStr
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2713
		{
			yyVAL.str = ""
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2717
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2721
		{
			yyVAL.str = SQLCacheStr
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2726
		{
			yyVAL.str = ""
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2730
		{
			yyVAL.str = DistinctStr
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2735
		{
			yyVAL.str = ""
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2739
		{
			yyVAL.str = StraightJoinHint
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2744
		{
			yyVAL.selectExprs = nil
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2748
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2754
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2758
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2764
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2768
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2772
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2776
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2781
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2789
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2796
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2801
		{
			yyVAL.overExpr = nil
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2805
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2809
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2813
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 455:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2817
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2822
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2826
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2832
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2836
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2846
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2850
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2854
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2859
		{
			yyVAL.strs = []string{}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2863
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2869
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2873
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2879
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2883
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2887
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2891
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2895
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2899
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2905
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2909
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2915
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2920
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2924
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2930
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2934
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2947
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2951
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2955
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2959
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2965
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2967
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2971
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2973
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2977
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2979
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2982
		{
			yyVAL.empty = struct{}{}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2984
		{
			yyVAL.empty = struct{}{}
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2987
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2991
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2995
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3002
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3008
		{
			yyVAL.str = JoinStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3012
		{
			yyVAL.str = JoinStr
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3016
		{
			yyVAL.str = JoinStr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3022
		{
			yyVAL.str = StraightJoinStr
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3028
		{
			yyVAL.str = LeftJoinStr
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3032
		{
			yyVAL.str = LeftJoinStr
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3036
		{
			yyVAL.str = RightJoinStr
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3040
		{
			yyVAL.str = RightJoinStr
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3046
		{
			yyVAL.str = NaturalJoinStr
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3050
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3060
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3064
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3070
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3074
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3079
		{
			yyVAL.indexHints = nil
		}
	case 514:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3083
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3087
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3091
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3096
		{
			yyVAL.expr = nil
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3100
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.columns = nil
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3109
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3115
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3119
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3123
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3127
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3131
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3135
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3139
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3145
		{
			yyVAL.str = ""
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3149
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3159
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3165
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3169
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3173
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3177
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3181
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3185
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3189
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3197
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3201
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3205
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 543:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3218
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3222
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3228
		{
			yyVAL.str = IsNullStr
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3232
		{
			yyVAL.str = IsNotNullStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3236
		{
			yyVAL.str = IsTrueStr
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3240
		{
			yyVAL.str = IsNotTrueStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3244
		{
			yyVAL.str = IsFalseStr
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3248
		{
			yyVAL.str = IsNotFalseStr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3254
		{
			yyVAL.str = EqualStr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3258
		{
			yyVAL.str = LessThanStr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3262
		{
			yyVAL.str = GreaterThanStr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3266
		{
			yyVAL.str = LessEqualStr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3270
		{
			yyVAL.str = GreaterEqualStr
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3274
		{
			yyVAL.str = NotEqualStr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3278
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3282
		{
			yyVAL.str = PosixRegexStr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3286
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3290
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3294
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3299
		{
			yyVAL.expr = nil
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3303
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3309
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3313
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3317
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3323
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3329
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3333
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3339
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3343
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3347
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3351
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3355
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3359
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3363
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3367
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3371
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3375
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3379
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3383
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3387
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3391
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3395
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3399
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3403
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3407
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3411
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3415
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3419
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3423
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 594:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3427
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3431
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3435
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3439
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3447
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3461
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3465
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3469
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3477
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3485
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3493
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3497
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3507
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3511
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3515
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3519
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3523
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 615:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3527
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3531
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3541
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3545
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 619:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3549
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 620:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3553
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 621:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3557
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 622:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3561
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 623:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3565
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 624:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3569
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 625:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3573
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 626:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3577
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 627:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3581
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 628:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3585
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 629:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3589
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 630:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3593
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 631:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3597
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 632:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3601
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 633:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3605
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3609
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3614
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3618
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3622
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3626
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3636
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3640
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3644
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3648
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3653
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3658
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3663
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3668
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3672
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3686
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3690
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3694
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3698
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.str = ""
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3708
		{
			yyVAL.str = BooleanModeStr
		}
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3712
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 657:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3716
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3720
		{
			yyVAL.str = QueryExpansionStr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3726
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3730
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3736
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3744
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3748
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3752
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3756
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3766
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3770
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3774
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3778
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3782
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3786
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3790
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3794
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3798
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3802
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3806
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3810
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3814
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3818
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3822
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3826
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3830
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3834
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3838
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3842
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3846
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3850
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3854
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3858
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3862
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3888
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3892
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3896
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3901
		{
			yyVAL.expr = nil
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3905
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3910
		{
			yyVAL.str = string("")
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3914
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3920
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3924
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3930
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3935
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3940
		{
			yyVAL.expr = nil
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3944
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3950
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3954
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 714:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3958
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3964
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3970
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3974
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3979
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3984
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3988
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3992
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3996
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4000
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4004
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4008
		{
			yyVAL.expr = &NullVal{}
		}
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4013
		{
			yyVAL.exprs = nil
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4017
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4022
		{
			yyVAL.expr = nil
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4026
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4032
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4036
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4042
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4047
		{
			yyVAL.orderBy = nil
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4051
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4067
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4072
		{
			yyVAL.str = AscScr
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4076
		{
			yyVAL.str = AscScr
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4080
		{
			yyVAL.str = DescScr
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4085
		{
			yyVAL.limit = nil
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4089
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4093
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4097
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4102
		{
			yyVAL.str = ""
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4106
		{
			yyVAL.str = ForUpdateStr
		}
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4110
		{
			yyVAL.str = ShareModeStr
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4123
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4127
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4131
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4136
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4140
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 753:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4144
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4151
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4155
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4159
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 757:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4168
		{
			yyVAL.updateExprs = nil
		}
	case 759:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4172
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4178
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4182
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4188
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4192
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4198
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4204
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4214
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4218
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4224
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4230
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4234
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4240
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4244
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4248
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 774:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4253
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4257
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4263
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4269
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4276
		{
			yyVAL.bytes = []byte("charset")
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4283
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4287
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4291
		{
			yyVAL.expr = &Default{}
		}
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4296
		{
			yyVAL.empty = struct{}{}
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4298
		{
			yyVAL.empty = struct{}{}
		}
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4301
		{
			yyVAL.str = ""
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4303
		{
			yyVAL.str = IgnoreStr
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4307
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4314
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4318
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4322
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4328
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4333
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4340
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4346
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4350
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4354
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4360
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4364
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4368
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 803:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4374
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4378
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 805:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4385
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4392
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4396
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4403
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4409
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4413
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4580
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4589
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
