// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const SCHEMA = 57457
const TABLE = 57458
const INDEX = 57459
const MATERIALIZED = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const PRIMARY = 57465
const COLUMN = 57466
const CONSTRAINT = 57467
const REFERENCES = 57468
const SPATIAL = 57469
const FULLTEXT = 57470
const FOREIGN = 57471
const KEY_BLOCK_SIZE = 57472
const POLICY = 57473
const WHILE = 57474
const UNIQUE = 57475
const KEY = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const EXEC = 57485
const EXECUTE = 57486
const MAXVALUE = 57487
const PARTITION = 57488
const REORGANIZE = 57489
const LESS = 57490
const THAN = 57491
const PROCEDURE = 57492
const TRIGGER = 57493
const TYPE = 57494
const RETURN = 57495
const STATUS = 57496
const VARIABLES = 57497
const RESTRICT = 57498
const CASCADE = 57499
const NO = 57500
const ACTION = 57501
const PERMISSIVE = 57502
const RESTRICTIVE = 57503
const PUBLIC = 57504
const CURRENT_USER = 57505
const SESSION_USER = 57506
const PAD_INDEX = 57507
const FILLFACTOR = 57508
const IGNORE_DUP_KEY = 57509
const STATISTICS_NORECOMPUTE = 57510
const STATISTICS_INCREMENTAL = 57511
const ALLOW_ROW_LOCKS = 57512
const ALLOW_PAGE_LOCKS = 57513
const DISTANCE = 57514
const M = 57515
const EUCLIDEAN = 57516
const COSINE = 57517
const BEFORE = 57518
const AFTER = 57519
const EACH = 57520
const ROW = 57521
const SCROLL = 57522
const CURSOR = 57523
const OPEN = 57524
const CLOSE = 57525
const FETCH = 57526
const PRIOR = 57527
const FIRST = 57528
const LAST = 57529
const DEALLOCATE = 57530
const INSTEAD = 57531
const OF = 57532
const OUTPUT = 57533
const DEFERRABLE = 57534
const INITIALLY = 57535
const IMMEDIATE = 57536
const DEFERRED = 57537
const CONCURRENTLY = 57538
const SQL = 57539
const SECURITY = 57540
const BEGIN = 57541
const START = 57542
const TRANSACTION = 57543
const COMMIT = 57544
const ROLLBACK = 57545
const BIT = 57546
const TINYINT = 57547
const SMALLINT = 57548
const SMALLSERIAL = 57549
const MEDIUMINT = 57550
const INT = 57551
const INTEGER = 57552
const SERIAL = 57553
const BIGINT = 57554
const BIGSERIAL = 57555
const INTNUM = 57556
const REAL = 57557
const DOUBLE = 57558
const PRECISION = 57559
const FLOAT_TYPE = 57560
const DECIMAL = 57561
const NUMERIC = 57562
const SMALLMONEY = 57563
const MONEY = 57564
const TIME = 57565
const TIMESTAMP = 57566
const DATETIME = 57567
const YEAR = 57568
const DATETIMEOFFSET = 57569
const DATETIME2 = 57570
const SMALLDATETIME = 57571
const CHAR = 57572
const VARCHAR = 57573
const VARYING = 57574
const BOOL = 57575
const CHARACTER = 57576
const VARBINARY = 57577
const NCHAR = 57578
const NVARCHAR = 57579
const NTEXT = 57580
const UUID = 57581
const TEXT = 57582
const TINYTEXT = 57583
const MEDIUMTEXT = 57584
const LONGTEXT = 57585
const CITEXT = 57586
const BLOB = 57587
const TINYBLOB = 57588
const MEDIUMBLOB = 57589
const LONGBLOB = 57590
const JSON = 57591
const JSONB = 57592
const ENUM = 57593
const GEOMETRY = 57594
const POINT = 57595
const LINESTRING = 57596
const POLYGON = 57597
const GEOMETRYCOLLECTION = 57598
const MULTIPOINT = 57599
const MULTILINESTRING = 57600
const MULTIPOLYGON = 57601
const VECTOR = 57602
const VARIADIC = 57603
const ARRAY = 57604
const NOW = 57605
const GETDATE = 57606
const BPCHAR = 57607
const TEXT_PATTERN_OPS = 57608
const NULLX = 57609
const AUTO_INCREMENT = 57610
const APPROXNUM = 57611
const SIGNED = 57612
const UNSIGNED = 57613
const ZEROFILL = 57614
const ZONE = 57615
const AUTOINCREMENT = 57616
const DATABASES = 57617
const TABLES = 57618
const VSCHEMA_TABLES = 57619
const EXTENDED = 57620
const FULL = 57621
const PROCESSLIST = 57622
const NAMES = 57623
const CHARSET = 57624
const GLOBAL = 57625
const SESSION = 57626
const ISOLATION = 57627
const LEVEL = 57628
const READ = 57629
const WRITE = 57630
const ONLY = 57631
const REPEATABLE = 57632
const COMMITTED = 57633
const UNCOMMITTED = 57634
const SERIALIZABLE = 57635
const NEW = 57636
const CONCAT_NULL_YIELDS_NULL = 57637
const CURSOR_CLOSE_ON_COMMIT = 57638
const QUOTED_IDENTIFIER = 57639
const ARITHABORT = 57640
const FMTONLY = 57641
const NOCOUNT = 57642
const NOEXEC = 57643
const NUMERIC_ROUNDABORT = 57644
const ANSI_DEFAULTS = 57645
const ANSI_NULL_DFLT_OFF = 57646
const ANSI_NULL_DFLT_ON = 57647
const ANSI_NULLS = 57648
const ANSI_PADDING = 57649
const ANSI_WARNINGS = 57650
const FORCEPLAN = 57651
const SHOWPLAN_ALL = 57652
const SHOWPLAN_TEXT = 57653
const SHOWPLAN_XML = 57654
const IMPLICIT_TRANSACTIONS = 57655
const REMOTE_PROC_TRANSACTIONS = 57656
const XACT_ABORT = 57657
const CURRENT_TIMESTAMP = 57658
const DATABASE = 57659
const CURRENT_DATE = 57660
const CURRENT_TIME = 57661
const LOCALTIME = 57662
const LOCALTIMESTAMP = 57663
const UTC_DATE = 57664
const UTC_TIME = 57665
const UTC_TIMESTAMP = 57666
const REPLACE = 57667
const CONVERT = 57668
const CAST = 57669
const SUBSTR = 57670
const SUBSTRING = 57671
const GROUP_CONCAT = 57672
const SEPARATOR = 57673
const INHERIT = 57674
const LEAD = 57675
const LAG = 57676
const MATCH = 57677
const AGAINST = 57678
const BOOLEAN = 57679
const LANGUAGE = 57680
const WITH = 57681
const WITHOUT = 57682
const PARSER = 57683
const QUERY = 57684
const EXPANSION = 57685
const UNUSED = 57686
const VIRTUAL = 57687
const STORED = 57688
const GENERATED = 57689
const ALWAYS = 57690
const IDENTITY = 57691
const SEQUENCE = 57692
const INCREMENT = 57693
const MINVALUE = 57694
const CACHE = 57695
const CYCLE = 57696
const OWNED = 57697
const NONE = 57698
const CLUSTERED = 57699
const NONCLUSTERED = 57700
const REPLICATION = 57701
const COLUMNSTORE = 57702
const INCLUDE = 57703
const HOLDLOCK = 57704
const NOLOCK = 57705
const NOWAIT = 57706
const PAGLOCK = 57707
const ROWLOCK = 57708
const TABLOCK = 57709
const UPDLOCK = 57710
const READUNCOMMITTED = 57711
const DEFINER = 57712
const INVOKER = 57713
const TYPECAST = 57714
const CHECK = 57715
const OVER = 57716

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	134, 430,
	-2, 166,
	-1, 45,
	123, 834,
	-2, 829,
	-1, 260,
	123, 837,
	-2, 833,
	-1, 420,
	61, 400,
	-2, 397,
	-1, 450,
	123, 835,
	-2, 259,
	-1, 571,
	123, 835,
	-2, 259,
	-1, 592,
	279, 844,
	-2, 739,
	-1, 646,
	279, 844,
	-2, 470,
	-1, 680,
	5, 36,
	-2, 14,
	-1, 686,
	5, 36,
	-2, 16,
	-1, 828,
	279, 844,
	-2, 470,
	-1, 1001,
	279, 844,
	-2, 329,
	-1, 1077,
	279, 844,
	-2, 470,
	-1, 1139,
	279, 844,
	-2, 739,
	-1, 1147,
	60, 106,
	-2, 215,
	-1, 1150,
	60, 106,
	-2, 215,
	-1, 1204,
	5, 37,
	-2, 605,
	-1, 1283,
	5, 36,
	-2, 15,
	-1, 1299,
	198, 63,
	-2, 526,
	-1, 1334,
	279, 844,
	-2, 146,
	-1, 1335,
	279, 844,
	-2, 146,
	-1, 1340,
	60, 106,
	-2, 186,
	-1, 1484,
	90, 831,
	-2, 819,
	-1, 1580,
	57, 50,
	59, 50,
	-2, 52,
	-1, 1754,
	5, 36,
	-2, 789,
	-1, 1779,
	5, 36,
	-2, 59,
	-1, 1817,
	59, 981,
	60, 981,
	-2, 456,
	-1, 1854,
	5, 37,
	-2, 790,
	-1, 1886,
	5, 36,
	-2, 792,
	-1, 1907,
	5, 37,
	-2, 793,
}

const yyPrivate = 57344

const yyLast = 10164

var yyAct = [...]int16{
	573, 1772, 1863, 1810, 1816, 1682, 554, 1700, 693, 1811,
	775, 1742, 31, 409, 1602, 1090, 1807, 1052, 41, 42,
	1683, 1112, 1777, 1445, 583, 43, 1109, 1616, 1662, 1126,
	1764, 880, 68, 68, 68, 1453, 131, 134, 135, 1266,
	1113, 1124, 1590, 1615, 1464, 1604, 1481, 1127, 1478, 1675,
	907, 484, 1106, 1303, 1460, 1475, 1463, 62, 1206, 1272,
	1472, 31, 1300, 1277, 895, 1600, 27, 937, 412, 922,
	1000, 1496, 1049, 977, 674, 1197, 635, 1365, 716, 802,
	629, 1339, 256, 852, 61, 1034, 1070, 1037, 950, 774,
	232, 197, 552, 884, 63, 213, 557, 1085, 818, 544,
	1356, 69, 673, 415, 64, 565, 553, 421, 530, 247,
	161, 1255, 447, 140, 248, 449, 856, 129, 130, 456,
	199, 180, 473, 156, 994, 537, 9, 1256, 810, 1567,
	744, 52, 1386, 755, 238, 538, 743, 742, 752, 753,
	745, 746, 747, 748, 749, 750, 751, 744, 257, 68,
	755, 195, 1158, 755, 636, 34, 257, 243, 244, 1086,
	617, 260, 54, 400, 1154, 422, 423, 1547, 416, 722,
	136, 620, 138, 55, 56, 445, 837, 1908, 215, 216,
	217, 218, 435, 150, 1409, 1410, 1843, 1198, 1530, 1905,
	50, 1795, 47, 1842, 255, 1163, 467, 1057, 1058, 1162,
	496, 497, 407, 1773, 1898, 1442, 398, 1864, 1865, 1866,
	1867, 1868, 1869, 1870, 1871, 202, 683, 234, 1141, 1130,
	1129, 630, 158, 1200, 1399, 1186, 1533, 1794, 57, 734,
	1131, 1617, 399, 1618, 198, 1835, 683, 504, 1141, 1130,
	1129, 1710, 464, 1132, 747, 748, 749, 750, 751, 744,
	1131, 475, 755, 1836, 1837, 518, 1516, 45, 439, 47,
	1711, 1712, 50, 1132, 47, 869, 631, 488, 489, 490,
	491, 868, 201, 789, 743, 742, 752, 753, 745, 746,
	747, 748, 749, 750, 751, 744, 876, 1783, 755, 204,
	1782, 203, 209, 1784, 461, 211, 463, 462, 1570, 214,
	477, 460, 458, 479, 1046, 482, 483, 206, 738, 1384,
	1393, 741, 221, 222, 223, 224, 225, 756, 757, 758,
	759, 760, 761, 762, 665, 739, 740, 737, 763, 764,
	765, 766, 743, 742, 752, 753, 745, 746, 747, 748,
	749, 750, 751, 744, 664, 230, 755, 532, 1219, 1125,
	1217, 745, 746, 747, 748, 749, 750, 751, 744, 1137,
	1720, 755, 1287, 137, 1723, 495, 1724, 517, 492, 1125,
	1143, 1144, 1110, 38, 1546, 539, 1548, 516, 227, 1137,
	1139, 132, 1788, 1787, 422, 423, 34, 1634, 252, 1610,
	1143, 1144, 1631, 732, 1721, 1286, 1521, 734, 1474, 1105,
	1139, 689, 690, 754, 938, 1329, 257, 1366, 1367, 1133,
	1134, 1136, 531, 1676, 1371, 1135, 731, 730, 34, 928,
	754, 478, 730, 754, 522, 551, 1291, 701, 175, 1133,
	1134, 1136, 524, 619, 732, 1135, 419, 1883, 1350, 732,
	724, 1528, 734, 723, 702, 438, 1291, 34, 437, 467,
	1737, 39, 527, 432, 141, 743, 742, 752, 753, 745,
	746, 747, 748, 749, 750, 751, 744, 1385, 429, 755,
	752, 753, 745, 746, 747, 748, 749, 750, 751, 744,
	1155, 1156, 755, 754, 838, 430, 529, 743, 742, 752,
	753, 745, 746, 747, 748, 749, 750, 751, 744, 1163,
	214, 755, 1654, 231, 733, 1411, 676, 154, 695, 420,
	622, 714, 1539, 417, 523, 1633, 714, 694, 881, 428,
	257, 699, 754, 703, 444, 540, 177, 257, 1793, 651,
	528, 653, 639, 902, 656, 657, 618, 532, 133, 616,
	1366, 1367, 157, 531, 174, 733, 469, 468, 176, 536,
	733, 681, 1142, 681, 460, 458, 623, 621, 754, 1640,
	1404, 632, 1157, 734, 634, 177, 698, 1330, 1331, 1332,
	1473, 1899, 1142, 707, 652, 734, 743, 742, 752, 753,
	745, 746, 747, 748, 749, 750, 751, 744, 498, 494,
	755, 1803, 176, 681, 731, 730, 424, 1605, 1672, 680,
	53, 686, 1289, 923, 924, 581, 1434, 1415, 501, 177,
	704, 675, 732, 721, 175, 28, 754, 728, 888, 45,
	1417, 47, 1849, 510, 46, 49, 694, 696, 142, 143,
	692, 754, 697, 50, 835, 1607, 705, 68, 1071, 1776,
	40, 144, 685, 1701, 1703, 769, 725, 1433, 790, 58,
	257, 773, 731, 730, 1775, 731, 730, 855, 49, 1211,
	1403, 1210, 1412, 1774, 49, 37, 1551, 731, 730, 36,
	732, 676, 873, 732, 34, 35, 1073, 641, 643, 694,
	531, 731, 730, 51, 525, 732, 403, 878, 6, 7,
	1857, 833, 731, 730, 847, 1785, 863, 44, 1740, 732,
	904, 901, 778, 779, 864, 903, 1738, 1620, 823, 1421,
	732, 824, 531, 1074, 418, 729, 426, 427, 793, 854,
	860, 862, 792, 733, 619, 831, 681, 1702, 531, 812,
	813, 814, 815, 816, 817, 1603, 659, 649, 49, 754,
	458, 719, 49, 519, 49, 49, 842, 712, 715, 422,
	423, 49, 754, 261, 879, 261, 49, 865, 149, 867,
	49, 147, 951, 1249, 486, 485, 1432, 1762, 1619, 1177,
	1541, 754, 982, 872, 886, 1227, 675, 630, 981, 991,
	991, 733, 731, 730, 733, 925, 1038, 1176, 993, 1236,
	929, 1175, 1174, 257, 257, 660, 733, 49, 1401, 1173,
	732, 470, 935, 1172, 1171, 982, 260, 898, 1170, 1169,
	733, 1039, 681, 1413, 1414, 1416, 1418, 1419, 681, 630,
	921, 733, 631, 681, 836, 1168, 1166, 931, 1574, 731,
	730, 1575, 932, 1053, 952, 1107, 957, 731, 730, 995,
	996, 49, 1038, 731, 730, 49, 49, 732, 414, 973,
	955, 956, 954, 975, 930, 732, 976, 1526, 1072, 824,
	754, 732, 1072, 926, 631, 624, 988, 997, 998, 152,
	146, 989, 992, 1033, 413, 1357, 773, 434, 676, 414,
	1282, 717, 718, 720, 927, 640, 207, 1357, 414, 1053,
	1488, 1545, 712, 646, 647, 648, 1358, 1108, 734, 414,
	1047, 1147, 1050, 1051, 1368, 33, 1104, 425, 1358, 637,
	638, 733, 1048, 1650, 1207, 1031, 1032, 1078, 953, 1079,
	1061, 942, 944, 945, 1094, 1605, 1065, 1359, 1152, 943,
	34, 433, 1150, 850, 531, 684, 1578, 684, 476, 1063,
	1187, 1188, 1189, 743, 742, 752, 753, 745, 746, 747,
	748, 749, 750, 751, 744, 849, 1160, 755, 733, 1149,
	476, 50, 1355, 1607, 210, 726, 733, 212, 50, 476,
	47, 871, 733, 768, 770, 771, 772, 776, 1148, 951,
	1087, 870, 1146, 675, 781, 781, 781, 781, 781, 781,
	781, 843, 451, 452, 454, 683, 1459, 840, 502, 646,
	457, 455, 465, 466, 500, 481, 499, 472, 1182, 480,
	794, 795, 796, 797, 798, 799, 800, 801, 45, 804,
	47, 806, 807, 808, 809, 811, 811, 811, 811, 811,
	811, 811, 791, 827, 828, 829, 830, 425, 453, 425,
	50, 1624, 47, 1193, 791, 1167, 50, 425, 47, 33,
	50, 952, 47, 50, 470, 47, 742, 752, 753, 745,
	746, 747, 748, 749, 750, 751, 744, 790, 50, 755,
	1607, 34, 1072, 1623, 34, 257, 32, 978, 34, 979,
	1073, 866, 493, 861, 676, 531, 440, 425, 260, 34,
	34, 896, 734, 1893, 1892, 683, 1216, 881, 896, 1891,
	1245, 1878, 646, 1834, 734, 734, 1220, 1233, 1856, 734,
	684, 470, 49, 1245, 1796, 711, 1727, 1587, 734, 1424,
	49, 995, 1752, 1247, 1235, 1279, 1164, 1753, 1270, 711,
	1636, 1151, 1299, 980, 1325, 1326, 1327, 681, 1292, 1334,
	658, 1800, 734, 30, 615, 681, 614, 425, 1340, 1147,
	1147, 1340, 1147, 1147, 531, 531, 1293, 1259, 1257, 1265,
	1351, 1262, 781, 781, 1354, 781, 781, 781, 781, 781,
	781, 781, 781, 781, 781, 781, 781, 781, 781, 781,
	1263, 1053, 531, 1254, 1281, 1280, 1264, 1260, 1261, 675,
	711, 1635, 159, 1283, 896, 1558, 684, 613, 1374, 711,
	1512, 1584, 776, 1245, 1511, 1508, 1507, 776, 459, 464,
	711, 1502, 1663, 1353, 711, 1501, 683, 1213, 1214, 1336,
	1215, 612, 1295, 1296, 1297, 1218, 1301, 754, 1346, 1347,
	1341, 1342, 1343, 1344, 1345, 129, 541, 1221, 1222, 711,
	1425, 1223, 1224, 431, 1225, 1226, 1405, 1585, 1885, 1583,
	1761, 1377, 859, 859, 859, 1370, 1375, 1372, 1373, 1054,
	1761, 461, 1338, 463, 462, 1400, 711, 1376, 425, 694,
	1380, 1360, 1361, 1362, 1363, 1364, 470, 1428, 49, 1066,
	734, 1388, 1245, 1244, 1387, 1390, 908, 711, 1184, 1077,
	920, 49, 711, 1089, 1663, 1437, 896, 1088, 1394, 1679,
	910, 1583, 257, 1423, 986, 734, 896, 1056, 1095, 1451,
	1392, 711, 936, 1444, 711, 710, 1456, 1267, 1448, 669,
	668, 662, 663, 1269, 1455, 662, 661, 60, 59, 1489,
	1808, 1586, 1252, 1761, 881, 1454, 1251, 1145, 1379, 754,
	515, 1340, 1066, 1852, 1231, 1497, 1497, 1082, 1436, 531,
	531, 1285, 1081, 1245, 425, 1080, 848, 1587, 1829, 1062,
	1229, 875, 1458, 1462, 1587, 897, 851, 1429, 844, 841,
	666, 655, 654, 781, 781, 781, 909, 46, 1066, 683,
	781, 781, 781, 781, 34, 574, 990, 572, 576, 577,
	578, 579, 1230, 986, 1467, 575, 580, 650, 261, 515,
	859, 859, 1499, 1487, 859, 859, 859, 1498, 1228, 1587,
	46, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	1245, 1077, 257, 1503, 1504, 514, 1709, 781, 515, 1612,
	1470, 425, 1827, 859, 859, 859, 859, 1435, 1066, 1212,
	896, 1509, 1510, 711, 839, 1517, 667, 1592, 1595, 1596,
	1597, 1593, 1552, 1594, 1598, 671, 670, 1765, 1766, 859,
	1791, 1765, 1766, 520, 1555, 1651, 203, 1505, 698, 1559,
	1349, 1609, 1348, 68, 1536, 1268, 233, 257, 1181, 1573,
	1180, 1576, 1290, 470, 1622, 1153, 1537, 1538, 983, 984,
	985, 987, 1084, 1540, 1542, 1543, 1544, 1565, 1083, 1564,
	1060, 933, 900, 877, 832, 727, 531, 1638, 543, 679,
	681, 1572, 1566, 678, 1581, 645, 644, 642, 625, 1628,
	542, 684, 1041, 1042, 1043, 1044, 626, 1045, 1599, 684,
	1611, 1514, 1613, 1608, 1592, 1595, 1596, 1597, 1593, 505,
	1594, 1598, 1626, 228, 446, 442, 1808, 411, 235, 236,
	1055, 226, 1630, 220, 219, 208, 11, 1159, 1768, 1639,
	1248, 672, 506, 240, 1335, 1467, 239, 145, 1064, 139,
	1067, 1068, 1694, 1879, 1440, 1771, 1075, 1695, 1076, 1557,
	1637, 1692, 1770, 1560, 1691, 906, 1693, 982, 1696, 1690,
	1596, 1597, 1841, 1684, 1099, 1100, 1456, 1661, 1561, 805,
	410, 1273, 1102, 1625, 1668, 1213, 487, 628, 1850, 1627,
	1669, 923, 924, 257, 402, 254, 1274, 1474, 1103, 627,
	1652, 257, 1653, 1671, 781, 781, 513, 511, 1053, 735,
	1678, 509, 148, 1686, 1687, 777, 1689, 1185, 1035, 1096,
	859, 1697, 1097, 681, 1685, 1718, 1239, 1688, 1680, 1706,
	1183, 1705, 1053, 1500, 781, 781, 781, 781, 1708, 1040,
	1446, 1707, 1447, 894, 688, 1290, 1642, 1716, 535, 1739,
	1091, 1848, 859, 1717, 1656, 1549, 803, 1092, 881, 1467,
	261, 1847, 1420, 859, 1467, 1467, 1467, 1467, 1467, 470,
	1802, 988, 1267, 249, 250, 251, 1201, 1202, 1467, 1493,
	1492, 1491, 1745, 1490, 1204, 1778, 1494, 1658, 834, 1408,
	1407, 1760, 1179, 1208, 1209, 534, 533, 681, 1757, 1769,
	1759, 1900, 1431, 1468, 890, 1178, 891, 892, 893, 1746,
	857, 436, 883, 885, 1582, 700, 899, 1780, 8, 889,
	1, 257, 1302, 13, 1786, 1758, 12, 1741, 681, 1232,
	242, 49, 1205, 982, 788, 1238, 1818, 1778, 1809, 1684,
	1467, 569, 982, 1240, 1241, 1754, 1242, 1243, 1684, 1819,
	1722, 1456, 1456, 1799, 1632, 1804, 1467, 1506, 1812, 1820,
	1455, 1253, 1824, 555, 1862, 1805, 1806, 1797, 1471, 1821,
	1271, 1454, 1053, 1298, 1730, 1328, 1779, 681, 1822, 1369,
	1823, 471, 182, 1250, 443, 15, 1441, 781, 1284, 1840,
	934, 546, 1845, 1744, 939, 940, 687, 1290, 1569, 512,
	1352, 1290, 1447, 905, 713, 1531, 1851, 165, 694, 819,
	1446, 694, 694, 694, 155, 1876, 1861, 1859, 706, 1872,
	1873, 1874, 405, 29, 10, 1814, 1165, 166, 1875, 164,
	163, 162, 160, 474, 200, 1860, 205, 1818, 1889, 1881,
	777, 1888, 1884, 229, 821, 777, 67, 192, 1446, 65,
	1819, 66, 70, 195, 196, 1476, 1890, 1812, 1789, 1790,
	999, 1030, 1621, 1897, 521, 1378, 1069, 767, 1781, 1901,
	1483, 1815, 1276, 1846, 1601, 1801, 1903, 681, 183, 1904,
	1234, 982, 49, 49, 1036, 556, 1906, 1684, 941, 568,
	1812, 567, 566, 190, 1751, 178, 736, 1466, 1577, 1591,
	1589, 1059, 1588, 179, 1767, 1763, 1465, 1532, 33, 681,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	1736, 1666, 1098, 1439, 1138, 1886, 1290, 781, 1128, 1569,
	781, 822, 781, 34, 781, 32, 781, 781, 882, 71,
	820, 1101, 1406, 5, 1140, 826, 825, 1426, 1123, 4,
	3, 1430, 1122, 1121, 1120, 1119, 1117, 1902, 1422, 1118,
	1115, 1116, 186, 1114, 181, 191, 1093, 682, 2, 0,
	0, 0, 188, 187, 0, 0, 1438, 0, 0, 0,
	0, 1569, 1524, 734, 0, 0, 0, 0, 1468, 0,
	49, 0, 0, 1468, 1468, 1468, 1468, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 1601, 0, 1704,
	0, 0, 168, 0, 167, 0, 171, 172, 175, 0,
	1447, 0, 169, 177, 0, 859, 1666, 0, 743, 742,
	752, 753, 745, 746, 747, 748, 749, 750, 751, 744,
	0, 0, 755, 72, 49, 49, 0, 0, 0, 0,
	1203, 0, 0, 0, 49, 1606, 0, 1513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	0, 0, 0, 1446, 0, 0, 0, 0, 1469, 0,
	0, 1755, 1756, 0, 1518, 1468, 1519, 1520, 0, 0,
	1522, 1523, 1525, 1527, 1529, 0, 0, 0, 48, 0,
	0, 0, 1237, 0, 1554, 0, 1556, 184, 0, 0,
	0, 0, 684, 185, 0, 0, 1550, 0, 1246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 1655, 0, 153, 0, 1569,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 173,
	0, 0, 0, 0, 0, 1275, 1278, 1290, 0, 1813,
	0, 684, 0, 0, 49, 0, 26, 0, 49, 49,
	0, 1288, 46, 49, 49, 49, 49, 49, 0, 0,
	1830, 1831, 1832, 0, 0, 1698, 193, 49, 194, 1294,
	0, 1606, 1666, 1641, 1629, 0, 0, 0, 0, 0,
	0, 1333, 1447, 803, 0, 0, 0, 0, 0, 0,
	0, 237, 189, 0, 0, 241, 0, 245, 246, 0,
	21, 0, 16, 0, 253, 0, 49, 0, 1649, 401,
	0, 0, 0, 404, 0, 17, 1659, 24, 0, 0,
	1660, 0, 0, 0, 0, 0, 0, 0, 1657, 49,
	0, 0, 0, 1381, 0, 18, 19, 0, 1813, 0,
	0, 1887, 170, 0, 0, 49, 0, 0, 0, 0,
	441, 0, 0, 0, 0, 0, 1391, 0, 743, 742,
	752, 753, 745, 746, 747, 748, 749, 750, 751, 744,
	0, 1813, 755, 684, 0, 0, 1699, 0, 0, 0,
	1402, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 754, 0, 503, 0, 1725, 1726, 507, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 0, 0, 1728, 0, 0, 0, 46, 1731,
	1732, 1733, 1734, 1735, 0, 0, 0, 46, 0, 1443,
	780, 782, 783, 784, 785, 786, 787, 0, 0, 593,
	0, 594, 0, 0, 14, 0, 0, 0, 0, 584,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 425,
	0, 0, 45, 574, 571, 572, 576, 577, 578, 579,
	0, 0, 0, 575, 580, 465, 466, 0, 777, 777,
	0, 0, 0, 563, 0, 0, 592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1606,
	683, 0, 1141, 1130, 1129, 0, 0, 0, 0, 0,
	560, 561, 1792, 0, 1131, 0, 609, 1798, 562, 0,
	0, 558, 559, 564, 0, 0, 0, 1132, 0, 20,
	0, 0, 0, 0, 683, 0, 1141, 1130, 1129, 0,
	607, 22, 23, 0, 25, 0, 0, 1534, 1131, 0,
	0, 0, 0, 1833, 0, 0, 0, 0, 0, 0,
	0, 1132, 0, 0, 0, 0, 46, 0, 0, 0,
	0, 0, 0, 0, 0, 1844, 0, 1562, 1563, 1278,
	0, 570, 1450, 0, 0, 0, 0, 0, 0, 1853,
	1854, 1855, 0, 0, 0, 0, 1858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 946, 0,
	0, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 0, 0, 0, 0,
	0, 0, 0, 1125, 0, 0, 0, 0, 0, 0,
	0, 0, 754, 1137, 0, 0, 0, 0, 1894, 1895,
	1896, 0, 0, 0, 1143, 1144, 0, 595, 683, 0,
	1141, 1130, 1129, 0, 1139, 677, 0, 1125, 0, 0,
	0, 0, 1131, 691, 0, 0, 0, 1137, 1907, 611,
	0, 596, 597, 0, 0, 1132, 0, 0, 1143, 1144,
	0, 0, 0, 1133, 1134, 1136, 0, 0, 1139, 1135,
	0, 0, 0, 0, 683, 0, 1141, 1130, 1129, 0,
	1291, 1664, 582, 0, 0, 0, 0, 0, 1131, 0,
	0, 0, 0, 0, 0, 0, 0, 1133, 1134, 1136,
	0, 1132, 0, 1135, 598, 608, 604, 605, 602, 603,
	601, 600, 599, 610, 586, 587, 588, 589, 591, 0,
	0, 469, 468, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1715, 0, 0, 0, 0, 683, 0,
	1141, 1130, 1129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1131, 0, 0, 0, 1719, 0, 0, 0,
	606, 1125, 0, 0, 0, 1132, 0, 0, 0, 0,
	1743, 1137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1143, 1144, 1749, 0, 1750, 0, 0, 1190,
	1191, 1192, 1139, 0, 0, 0, 0, 1194, 1195, 1196,
	0, 874, 0, 0, 0, 0, 1142, 1125, 0, 0,
	0, 0, 0, 0, 887, 0, 0, 1137, 0, 1199,
	1674, 1133, 1134, 1136, 0, 0, 0, 1135, 1143, 1144,
	0, 0, 0, 0, 0, 0, 0, 0, 1139, 0,
	1142, 0, 0, 780, 743, 742, 752, 753, 745, 746,
	747, 748, 749, 750, 751, 744, 1449, 0, 755, 0,
	0, 0, 0, 0, 0, 0, 0, 1133, 1134, 1136,
	734, 1125, 0, 1135, 0, 0, 1825, 0, 0, 1826,
	0, 1137, 1828, 0, 0, 0, 0, 0, 0, 0,
	1839, 0, 1143, 1144, 0, 0, 0, 0, 0, 1838,
	0, 0, 1139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1743, 743, 742, 752, 753, 745,
	746, 747, 748, 749, 750, 751, 744, 777, 0, 755,
	0, 1133, 1134, 1136, 0, 633, 0, 1135, 45, 0,
	450, 451, 452, 454, 0, 0, 0, 0, 0, 457,
	455, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 1880, 777, 0, 1142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 383, 370, 0, 327, 385, 295,
	315, 394, 317, 318, 354, 273, 337, 453, 312, 292,
	0, 0, 0, 298, 266, 307, 267, 296, 329, 0,
	293, 0, 372, 340, 0, 0, 0, 392, 0, 345,
	1142, 0, 0, 0, 1568, 332, 374, 335, 365, 326,
	355, 282, 344, 387, 313, 350, 388, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1382, 1383, 349, 381, 309, 279, 397, 0, 353, 265,
	347, 0, 0, 271, 274, 393, 379, 303, 302, 0,
	1673, 0, 0, 0, 0, 0, 331, 336, 361, 323,
	1395, 1396, 1397, 1398, 1142, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 343, 0, 0, 0, 278, 272,
	0, 328, 0, 0, 0, 281, 0, 300, 362, 0,
	262, 368, 376, 325, 0, 0, 380, 322, 321, 0,
	0, 0, 0, 0, 0, 314, 259, 358, 395, 384,
	333, 373, 297, 308, 1673, 304, 0, 0, 754, 305,
	306, 342, 356, 0, 0, 0, 0, 0, 382, 364,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 459, 464, 0,
	0, 0, 270, 263, 301, 366, 369, 286, 352, 275,
	310, 359, 311, 334, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 754,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	461, 0, 463, 462, 0, 0, 0, 0, 0, 0,
	1485, 0, 0, 1515, 0, 0, 0, 469, 468, 1304,
	1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
	1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	269, 290, 377, 0, 0, 0, 0, 1486, 1484, 1480,
	1479, 0, 0, 0, 1337, 351, 0, 0, 819, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 289, 283, 284, 338, 339, 389, 390,
	391, 363, 280, 821, 287, 288, 0, 371, 0, 0,
	0, 341, 0, 0, 0, 396, 0, 0, 0, 0,
	0, 0, 0, 316, 264, 320, 0, 0, 0, 0,
	0, 0, 0, 276, 277, 0, 0, 324, 319, 346,
	348, 357, 367, 378, 386, 360, 294, 330, 0, 0,
	0, 0, 0, 1643, 0, 0, 1644, 0, 1645, 0,
	1646, 0, 1647, 1648, 0, 0, 0, 0, 0, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 0,
	122, 123, 0, 124, 125, 126, 128, 127, 0, 974,
	822, 0, 0, 0, 0, 0, 0, 0, 71, 820,
	0, 0, 0, 0, 826, 825, 0, 0, 0, 908,
	0, 0, 0, 920, 0, 1461, 0, 0, 0, 0,
	0, 0, 0, 910, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 383, 370,
	0, 327, 385, 295, 315, 394, 317, 318, 354, 273,
	337, 0, 312, 292, 0, 0, 0, 298, 266, 307,
	267, 296, 329, 0, 293, 0, 372, 340, 0, 0,
	0, 392, 0, 345, 0, 0, 0, 0, 0, 332,
	374, 335, 365, 326, 355, 282, 344, 387, 313, 350,
	388, 0, 0, 0, 34, 0, 0, 0, 0, 909,
	0, 0, 72, 0, 0, 0, 349, 381, 309, 279,
	397, 0, 353, 265, 347, 0, 0, 271, 274, 393,
	379, 303, 302, 1535, 0, 0, 0, 0, 0, 0,
	331, 336, 361, 323, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 0, 0, 0, 299, 0, 343, 0,
	0, 0, 278, 272, 0, 328, 0, 0, 0, 281,
	0, 300, 362, 0, 262, 368, 376, 325, 0, 0,
	380, 322, 321, 0, 0, 0, 0, 1579, 1580, 314,
	259, 358, 395, 384, 333, 373, 297, 308, 0, 304,
	0, 0, 0, 305, 306, 342, 356, 683, 0, 1141,
	1130, 1129, 382, 364, 375, 0, 0, 0, 0, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1132, 0, 270, 263, 301, 366,
	369, 286, 352, 275, 310, 359, 311, 334, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1614, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1747,
	1748, 0, 0, 0, 1485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1677, 0, 0,
	0, 0, 1681, 0, 0, 0, 448, 0, 1161, 45,
	0, 450, 451, 452, 454, 0, 0, 0, 268, 0,
	457, 455, 465, 466, 269, 290, 377, 0, 0, 0,
	1125, 1486, 1484, 0, 0, 0, 0, 0, 0, 351,
	1137, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 1143, 1144, 0, 0, 0, 0, 0, 453, 1729,
	0, 1139, 0, 0, 0, 0, 285, 289, 283, 284,
	338, 339, 389, 390, 391, 363, 280, 0, 287, 288,
	0, 371, 0, 0, 0, 341, 0, 0, 0, 396,
	1133, 1134, 1136, 0, 0, 0, 1135, 316, 264, 320,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 0,
	0, 324, 319, 346, 348, 357, 367, 378, 386, 360,
	294, 330, 383, 370, 0, 327, 385, 295, 315, 394,
	317, 318, 354, 273, 337, 0, 312, 292, 0, 0,
	0, 298, 266, 307, 267, 296, 329, 0, 293, 0,
	372, 340, 0, 0, 0, 392, 0, 345, 0, 0,
	0, 0, 0, 332, 374, 335, 365, 326, 355, 282,
	344, 387, 313, 350, 388, 0, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 381, 309, 279, 397, 0, 353, 265, 347, 0,
	0, 271, 274, 393, 379, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 331, 336, 361, 323, 0, 0,
	0, 0, 0, 1389, 0, 0, 0, 0, 459, 464,
	299, 0, 343, 1142, 0, 0, 278, 272, 0, 328,
	0, 0, 0, 281, 0, 300, 362, 0, 262, 368,
	376, 325, 0, 0, 380, 322, 321, 0, 1003, 0,
	0, 0, 0, 314, 259, 358, 395, 384, 333, 373,
	297, 308, 0, 304, 0, 0, 0, 305, 306, 342,
	356, 461, 0, 463, 462, 0, 382, 364, 375, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 469, 468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 263, 301, 366, 369, 286, 352, 275, 310, 359,
	311, 334, 291, 0, 1012, 1018, 1016, 0, 0, 1013,
	0, 0, 1011, 0, 0, 1020, 0, 0, 1019, 1005,
	1015, 1017, 1014, 1009, 0, 1004, 0, 1022, 1021, 1023,
	1002, 1025, 0, 0, 0, 1029, 1026, 1028, 1027, 0,
	1024, 0, 0, 0, 0, 0, 0, 0, 1485, 1006,
	1007, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1008, 1010, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 269, 290,
	377, 0, 0, 0, 0, 1486, 1484, 0, 0, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 289, 283, 284, 338, 339, 389, 390, 391, 363,
	280, 0, 287, 288, 0, 371, 0, 0, 0, 341,
	0, 0, 0, 396, 0, 0, 0, 0, 0, 0,
	0, 316, 264, 320, 0, 0, 0, 0, 0, 0,
	0, 276, 277, 0, 0, 324, 319, 346, 348, 357,
	367, 378, 386, 360, 294, 330, 383, 370, 0, 327,
	385, 295, 315, 394, 317, 318, 354, 273, 337, 0,
	312, 292, 0, 0, 0, 298, 266, 307, 267, 296,
	329, 0, 293, 0, 372, 340, 0, 94, 0, 392,
	33, 345, 0, 0, 0, 0, 0, 332, 374, 335,
	365, 326, 355, 282, 344, 387, 313, 350, 388, 0,
	0, 0, 45, 1152, 47, 34, 0, 1150, 0, 0,
	0, 0, 0, 0, 349, 381, 309, 279, 397, 0,
	353, 265, 347, 0, 0, 271, 274, 393, 379, 303,
	302, 0, 0, 0, 1149, 0, 0, 0, 331, 336,
	361, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1258, 1148, 299, 0, 343, 0, 0, 0,
	278, 272, 0, 328, 79, 0, 0, 281, 0, 300,
	362, 0, 262, 368, 376, 325, 0, 0, 380, 322,
	321, 0, 0, 0, 0, 0, 0, 314, 259, 358,
	395, 384, 333, 373, 297, 308, 0, 304, 0, 95,
	0, 305, 306, 342, 356, 0, 0, 0, 0, 0,
	382, 364, 375, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 263, 301, 366, 369, 286,
	352, 275, 310, 359, 311, 334, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 0, 122, 123, 0, 124,
	125, 126, 128, 127, 96, 97, 98, 102, 100, 99,
	101, 73, 75, 0, 71, 74, 80, 76, 77, 78,
	92, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 93, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 269, 290, 377, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 289, 283, 284, 338, 339,
	389, 390, 391, 363, 280, 0, 287, 288, 0, 371,
	0, 0, 0, 341, 0, 0, 0, 396, 72, 0,
	0, 0, 0, 0, 0, 316, 264, 320, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 0, 0, 324,
	319, 346, 348, 357, 367, 378, 386, 360, 294, 330,
	383, 370, 0, 327, 385, 295, 315, 394, 317, 318,
	354, 273, 337, 0, 312, 292, 0, 0, 0, 298,
	266, 307, 267, 296, 329, 0, 293, 0, 372, 340,
	0, 94, 0, 392, 0, 345, 0, 0, 0, 0,
	0, 332, 374, 335, 365, 326, 355, 282, 344, 387,
	313, 350, 388, 0, 0, 0, 34, 0, 708, 34,
	709, 0, 0, 0, 0, 0, 0, 0, 349, 381,
	309, 279, 397, 0, 353, 265, 347, 0, 0, 271,
	274, 393, 379, 303, 302, 0, 0, 0, 0, 0,
	0, 0, 331, 336, 361, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 0,
	343, 0, 0, 0, 278, 272, 0, 328, 79, 0,
	0, 281, 0, 300, 362, 0, 262, 368, 376, 325,
	0, 0, 380, 322, 321, 0, 0, 0, 0, 0,
	0, 314, 259, 358, 395, 384, 333, 373, 297, 308,
	0, 304, 0, 95, 0, 305, 306, 342, 356, 0,
	0, 0, 0, 0, 382, 364, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 263,
	301, 366, 369, 286, 352, 275, 310, 359, 311, 334,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 0,
	122, 123, 0, 124, 125, 126, 128, 127, 96, 97,
	98, 102, 100, 99, 101, 73, 75, 0, 71, 74,
	80, 76, 77, 78, 92, 81, 82, 83, 84, 85,
	86, 87, 88, 89, 90, 91, 93, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 377, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 338, 339, 389, 390, 391, 363, 280, 0,
	287, 288, 0, 371, 0, 0, 0, 341, 0, 0,
	0, 396, 72, 0, 0, 0, 0, 0, 0, 316,
	264, 320, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 0, 0, 324, 319, 346, 348, 357, 367, 378,
	386, 360, 294, 330, 383, 370, 0, 327, 385, 295,
	315, 394, 317, 318, 354, 273, 337, 0, 312, 292,
	0, 0, 0, 298, 266, 307, 267, 296, 329, 0,
	293, 0, 372, 340, 0, 0, 0, 392, 0, 345,
	0, 0, 0, 0, 0, 332, 374, 335, 365, 326,
	355, 282, 344, 387, 313, 350, 388, 0, 406, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	408, 0, 349, 381, 309, 279, 397, 0, 353, 265,
	347, 0, 0, 271, 274, 393, 379, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 331, 336, 361, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 343, 0, 0, 0, 278, 272,
	0, 328, 0, 0, 0, 281, 0, 300, 362, 0,
	262, 368, 376, 325, 0, 0, 380, 322, 321, 0,
	0, 0, 0, 0, 0, 314, 259, 358, 395, 384,
	333, 373, 297, 308, 0, 304, 0, 0, 0, 305,
	306, 342, 356, 683, 0, 1141, 1130, 1129, 382, 364,
	375, 0, 0, 0, 0, 0, 0, 1131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1132, 0, 270, 263, 301, 366, 369, 286, 352, 275,
	310, 359, 311, 334, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	269, 290, 377, 0, 0, 0, 1125, 0, 258, 0,
	0, 0, 0, 0, 0, 351, 1137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1143, 1144, 0,
	0, 0, 0, 0, 0, 0, 0, 1139, 0, 0,
	0, 0, 285, 289, 283, 284, 338, 339, 389, 390,
	391, 363, 280, 0, 287, 288, 0, 371, 0, 0,
	0, 341, 0, 0, 0, 396, 1133, 1134, 1136, 0,
	0, 0, 1135, 316, 264, 320, 0, 0, 0, 0,
	0, 0, 0, 276, 277, 0, 0, 324, 319, 346,
	348, 357, 367, 378, 386, 360, 294, 330, 383, 370,
	0, 327, 385, 295, 315, 394, 317, 318, 354, 273,
	337, 0, 312, 292, 0, 0, 0, 298, 266, 307,
	267, 296, 329, 0, 293, 0, 372, 340, 0, 0,
	0, 392, 0, 345, 0, 0, 0, 0, 0, 332,
	374, 335, 365, 326, 355, 282, 344, 387, 313, 350,
	388, 0, 0, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 381, 309, 279,
	397, 0, 353, 265, 347, 0, 0, 271, 274, 393,
	379, 303, 302, 0, 0, 0, 0, 0, 0, 0,
	331, 336, 361, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1553, 0, 299, 0, 343, 1142,
	0, 0, 278, 272, 0, 328, 0, 0, 0, 281,
	0, 300, 362, 0, 262, 368, 376, 325, 0, 0,
	380, 322, 321, 0, 0, 0, 0, 0, 0, 314,
	259, 358, 395, 384, 333, 373, 297, 308, 0, 304,
	0, 0, 0, 305, 306, 342, 356, 683, 0, 1141,
	1130, 1129, 382, 364, 375, 0, 0, 0, 0, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1132, 0, 270, 263, 301, 366,
	369, 286, 352, 275, 310, 359, 311, 334, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1877,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 377, 0, 0, 0,
	1125, 0, 258, 0, 0, 0, 0, 0, 0, 351,
	1137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1143, 1144, 0, 0, 0, 0, 0, 0, 0,
	0, 1139, 0, 0, 0, 0, 285, 289, 283, 284,
	338, 339, 389, 390, 391, 363, 280, 0, 287, 288,
	0, 371, 0, 0, 0, 341, 0, 0, 0, 396,
	1133, 1134, 1136, 0, 0, 0, 1135, 316, 264, 320,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 0,
	0, 324, 319, 346, 348, 357, 367, 378, 386, 360,
	294, 330, 383, 370, 0, 327, 385, 295, 315, 394,
	317, 318, 354, 273, 337, 0, 312, 292, 0, 0,
	0, 298, 266, 307, 267, 296, 329, 0, 293, 0,
	372, 340, 0, 0, 0, 392, 0, 345, 0, 0,
	0, 0, 0, 332, 374, 335, 365, 326, 355, 282,
	344, 387, 313, 350, 388, 0, 0, 0, 45, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 381, 309, 279, 397, 0, 353, 265, 347, 0,
	0, 271, 274, 393, 379, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 331, 336, 361, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 343, 1142, 0, 0, 278, 272, 0, 328,
	0, 0, 0, 281, 0, 300, 362, 0, 262, 368,
	376, 325, 0, 0, 380, 322, 321, 0, 0, 0,
	0, 0, 0, 314, 259, 358, 395, 384, 333, 373,
	297, 308, 0, 304, 0, 0, 0, 305, 306, 342,
	356, 683, 0, 1141, 1130, 1129, 382, 364, 375, 0,
	0, 0, 0, 0, 0, 1131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1132, 0,
	270, 263, 301, 366, 369, 286, 352, 275, 310, 359,
	311, 334, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1665, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 269, 290,
	377, 0, 0, 0, 1125, 0, 258, 0, 0, 0,
	0, 0, 0, 351, 1137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1143, 1144, 0, 0, 0,
	0, 0, 0, 0, 0, 1139, 0, 0, 0, 0,
	285, 289, 283, 284, 338, 339, 389, 390, 391, 363,
	280, 0, 287, 288, 0, 371, 0, 0, 0, 341,
	0, 0, 0, 396, 1133, 1134, 1136, 0, 0, 0,
	1135, 316, 264, 320, 0, 0, 0, 0, 0, 0,
	0, 276, 277, 0, 0, 324, 319, 346, 348, 357,
	367, 378, 386, 360, 294, 330, 383, 370, 0, 327,
	385, 295, 315, 394, 317, 318, 354, 273, 337, 0,
	312, 292, 0, 0, 0, 298, 266, 307, 267, 296,
	329, 0, 293, 0, 372, 340, 0, 0, 0, 392,
	0, 345, 0, 0, 0, 0, 0, 332, 374, 335,
	365, 326, 355, 282, 344, 387, 313, 350, 388, 0,
	0, 0, 34, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 349, 381, 309, 279, 397, 0,
	353, 265, 347, 0, 0, 271, 274, 393, 379, 303,
	302, 526, 0, 0, 0, 0, 0, 0, 331, 336,
	361, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 343, 1142, 0, 0,
	278, 272, 0, 328, 0, 0, 0, 281, 0, 300,
	362, 0, 262, 368, 376, 325, 0, 0, 380, 322,
	321, 0, 0, 0, 0, 0, 0, 314, 259, 358,
	395, 384, 333, 373, 297, 308, 0, 304, 0, 0,
	0, 305, 306, 342, 356, 683, 0, 1141, 1130, 1129,
	382, 364, 375, 0, 0, 0, 0, 0, 0, 1131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1132, 0, 270, 263, 301, 366, 369, 286,
	352, 275, 310, 359, 311, 334, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1571, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 269, 290, 377, 0, 0, 0, 1125, 0,
	258, 0, 0, 0, 0, 0, 0, 351, 1137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1143,
	1144, 0, 0, 0, 0, 0, 0, 0, 0, 1139,
	0, 0, 0, 0, 285, 289, 283, 284, 338, 339,
	389, 390, 391, 363, 280, 0, 287, 288, 0, 371,
	0, 0, 0, 341, 0, 0, 0, 396, 1133, 1134,
	1136, 0, 0, 0, 1135, 316, 264, 320, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 0, 0, 324,
	319, 346, 348, 357, 367, 378, 386, 360, 294, 330,
	383, 370, 0, 327, 385, 295, 315, 394, 317, 318,
	354, 273, 337, 0, 312, 292, 0, 0, 0, 298,
	266, 307, 267, 296, 329, 0, 293, 0, 372, 340,
	0, 0, 0, 392, 0, 345, 0, 0, 0, 0,
	0, 332, 374, 335, 365, 326, 355, 282, 344, 387,
	313, 350, 388, 0, 0, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 349, 381,
	309, 279, 397, 0, 353, 265, 347, 0, 0, 271,
	274, 393, 379, 303, 302, 0, 0, 0, 0, 0,
	0, 0, 331, 336, 361, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 0,
	343, 1142, 0, 0, 278, 272, 0, 328, 0, 0,
	0, 281, 0, 300, 362, 0, 262, 368, 376, 325,
	0, 0, 380, 322, 321, 0, 0, 0, 0, 0,
	0, 314, 259, 358, 395, 384, 333, 373, 297, 308,
	0, 304, 0, 0, 0, 305, 306, 342, 356, 683,
	0, 1141, 1130, 1129, 382, 364, 375, 0, 0, 0,
	0, 0, 0, 1131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1132, 0, 270, 263,
	301, 366, 369, 286, 352, 275, 310, 359, 311, 334,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 377, 0,
	0, 0, 1125, 0, 258, 0, 0, 0, 0, 0,
	0, 351, 1137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1143, 1144, 0, 0, 0, 0, 0,
	0, 0, 0, 1139, 0, 0, 0, 0, 285, 289,
	283, 284, 338, 339, 389, 390, 391, 363, 280, 0,
	287, 288, 0, 371, 0, 0, 0, 341, 0, 0,
	0, 396, 1133, 1134, 1136, 0, 0, 0, 1135, 316,
	264, 320, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 0, 0, 324, 319, 346, 348, 357, 367, 378,
	386, 360, 294, 330, 383, 1817, 0, 327, 385, 295,
	315, 394, 317, 318, 354, 273, 337, 0, 312, 292,
	0, 0, 0, 298, 266, 307, 267, 296, 329, 0,
	293, 0, 372, 340, 0, 0, 0, 392, 0, 345,
	0, 0, 0, 0, 0, 332, 374, 335, 365, 326,
	355, 282, 344, 387, 313, 350, 388, 425, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 381, 309, 279, 397, 0, 353, 265,
	347, 0, 0, 271, 274, 393, 379, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 331, 336, 361, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 343, 1142, 0, 0, 278, 272,
	0, 328, 0, 0, 0, 281, 0, 300, 362, 0,
	262, 368, 376, 325, 0, 0, 380, 322, 321, 0,
	0, 0, 0, 0, 0, 314, 0, 358, 395, 384,
	333, 373, 297, 308, 0, 304, 0, 0, 0, 305,
	306, 342, 356, 0, 0, 0, 0, 0, 382, 364,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 263, 301, 366, 369, 286, 352, 275,
	310, 359, 311, 334, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	269, 290, 377, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 289, 283, 284, 338, 339, 389, 390,
	391, 363, 280, 0, 287, 288, 0, 371, 0, 0,
	0, 341, 0, 0, 0, 396, 0, 0, 0, 0,
	0, 0, 0, 316, 264, 320, 0, 0, 0, 0,
	0, 0, 0, 276, 277, 0, 0, 324, 319, 346,
	348, 357, 367, 378, 386, 360, 294, 330, 383, 370,
	0, 327, 385, 295, 315, 394, 317, 318, 354, 273,
	337, 0, 312, 292, 0, 0, 0, 298, 266, 307,
	267, 296, 329, 0, 293, 0, 372, 340, 0, 0,
	0, 392, 0, 345, 0, 0, 0, 0, 0, 332,
	374, 335, 365, 326, 355, 282, 344, 387, 313, 350,
	388, 0, 0, 0, 50, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 381, 309, 279,
	397, 0, 353, 265, 347, 0, 0, 271, 274, 393,
	379, 303, 302, 0, 0, 0, 0, 0, 0, 0,
	331, 336, 361, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 0, 343, 0,
	0, 0, 278, 272, 0, 328, 0, 0, 0, 281,
	0, 300, 362, 0, 262, 368, 376, 325, 0, 0,
	380, 322, 321, 0, 0, 0, 0, 0, 0, 314,
	0, 358, 395, 384, 333, 373, 297, 308, 0, 304,
	0, 0, 0, 305, 306, 342, 356, 0, 0, 0,
	0, 0, 382, 364, 375, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 263, 301, 366,
	369, 286, 352, 275, 310, 359, 311, 334, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 377, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	338, 339, 389, 390, 391, 363, 280, 0, 287, 288,
	0, 371, 0, 0, 0, 341, 0, 0, 0, 396,
	0, 0, 0, 0, 0, 0, 0, 316, 264, 320,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 0,
	0, 324, 319, 346, 348, 357, 367, 378, 386, 360,
	294, 330, 383, 370, 0, 327, 385, 295, 315, 394,
	317, 318, 354, 273, 337, 0, 312, 292, 0, 0,
	0, 298, 266, 307, 267, 296, 329, 0, 293, 0,
	372, 340, 0, 0, 0, 392, 0, 345, 0, 0,
	0, 0, 0, 332, 374, 335, 365, 326, 355, 282,
	344, 387, 313, 350, 388, 0, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 381, 309, 279, 397, 0, 353, 265, 347, 0,
	0, 271, 274, 393, 379, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 331, 336, 361, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 343, 0, 0, 0, 278, 272, 0, 328,
	0, 0, 0, 281, 0, 300, 362, 0, 262, 368,
	376, 325, 0, 0, 380, 322, 321, 0, 0, 0,
	0, 0, 0, 314, 0, 358, 395, 384, 333, 373,
	297, 308, 0, 304, 0, 0, 0, 305, 306, 342,
	356, 0, 0, 0, 0, 0, 382, 364, 375, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 263, 301, 366, 369, 286, 352, 275, 310, 359,
	311, 334, 291, 0, 0, 947, 948, 949, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 593, 0, 594, 0, 0, 0, 0, 0,
	0, 0, 584, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 425, 0, 0, 45, 574, 571, 572, 576,
	577, 578, 579, 0, 0, 0, 575, 580, 465, 466,
	0, 0, 0, 0, 0, 0, 563, 0, 0, 592,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 269, 290,
	377, 0, 0, 560, 561, 0, 0, 0, 0, 609,
	0, 562, 0, 351, 558, 559, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 0, 0, 0, 0, 0, 0,
	285, 289, 283, 284, 338, 339, 389, 390, 391, 363,
	280, 0, 287, 288, 0, 371, 0, 0, 0, 341,
	0, 0, 0, 396, 0, 0, 0, 0, 0, 0,
	0, 316, 264, 320, 570, 0, 0, 0, 0, 549,
	0, 276, 277, 0, 0, 324, 319, 346, 348, 357,
	367, 378, 386, 360, 294, 330, 548, 0, 0, 0,
	0, 547, 0, 0, 0, 0, 0, 0, 593, 0,
	594, 0, 0, 0, 0, 0, 0, 0, 584, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 425, 0,
	0, 45, 574, 571, 572, 576, 577, 578, 579, 0,
	0, 0, 575, 580, 465, 466, 550, 0, 0, 0,
	595, 545, 563, 0, 0, 592, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 596, 597, 0, 0, 0, 560,
	561, 0, 0, 0, 0, 609, 0, 562, 0, 0,
	1001, 559, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 0, 0, 0, 607,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1003, 0, 598, 608, 604,
	605, 602, 603, 601, 600, 599, 610, 586, 587, 588,
	589, 591, 0, 0, 469, 468, 590, 0, 0, 0,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 0, 0, 0, 0,
	0, 1012, 1018, 1016, 0, 0, 1013, 0, 0, 1011,
	0, 0, 1020, 0, 0, 1019, 1005, 1015, 1017, 1014,
	1009, 0, 1004, 0, 1022, 1021, 1023, 1002, 1025, 0,
	0, 0, 1029, 1026, 1028, 1027, 595, 1024, 0, 0,
	0, 0, 0, 0, 0, 0, 1006, 1007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 611, 0,
	596, 597, 0, 0, 0, 0, 0, 1008, 1010, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 608, 604, 605, 602, 603, 601,
	600, 599, 610, 586, 587, 588, 589, 591, 549, 0,
	469, 468, 590, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 0, 0, 0, 0,
	547, 0, 0, 0, 0, 0, 0, 593, 0, 594,
	0, 0, 0, 0, 0, 0, 0, 584, 585, 606,
	0, 0, 0, 0, 0, 1713, 0, 425, 0, 0,
	45, 574, 571, 572, 576, 577, 578, 579, 0, 0,
	0, 575, 580, 465, 466, 550, 1714, 0, 0, 0,
	545, 563, 0, 0, 592, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 0, 0, 0, 0, 0, 0, 0, 560, 561,
	0, 0, 0, 0, 609, 853, 562, 548, 0, 558,
	559, 564, 547, 0, 0, 0, 0, 0, 0, 593,
	0, 594, 0, 0, 0, 0, 0, 0, 607, 584,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 425,
	0, 0, 45, 574, 571, 572, 576, 577, 578, 579,
	0, 0, 0, 575, 580, 465, 466, 550, 0, 0,
	0, 0, 545, 563, 0, 0, 592, 0, 0, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 0, 0, 0, 0, 0, 0,
	560, 561, 858, 0, 0, 0, 609, 0, 562, 0,
	548, 558, 559, 564, 0, 547, 0, 0, 0, 0,
	0, 0, 593, 0, 594, 0, 0, 0, 0, 0,
	607, 0, 584, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 425, 0, 734, 45, 574, 571, 572, 576,
	577, 578, 579, 0, 0, 595, 575, 580, 465, 466,
	550, 0, 0, 0, 0, 545, 563, 0, 0, 592,
	0, 570, 0, 0, 0, 0, 0, 611, 0, 596,
	597, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 560, 561, 0, 0, 0, 0, 609,
	0, 562, 0, 0, 558, 559, 564, 0, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 608, 604, 605, 602, 603, 601, 600,
	599, 610, 586, 587, 588, 589, 591, 595, 0, 469,
	468, 590, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 570, 0, 0, 0, 0, 611,
	0, 596, 597, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 608, 604, 605, 602, 603,
	601, 600, 599, 610, 586, 587, 588, 589, 591, 0,
	595, 469, 468, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 596, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 608, 604,
	605, 602, 603, 601, 600, 599, 610, 586, 587, 588,
	589, 591, 549, 0, 469, 468, 590, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	0, 0, 0, 0, 547, 0, 0, 0, 0, 0,
	0, 593, 0, 594, 0, 0, 0, 0, 0, 0,
	0, 584, 585, 606, 0, 0, 0, 0, 0, 0,
	0, 425, 0, 0, 45, 574, 571, 572, 576, 577,
	578, 579, 0, 0, 0, 575, 580, 465, 466, 550,
	0, 0, 0, 0, 545, 563, 0, 0, 592, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 683, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 560, 561, 858, 0, 0, 0, 609, 0,
	562, 548, 0, 558, 559, 564, 547, 0, 0, 0,
	0, 0, 0, 593, 0, 594, 0, 0, 0, 0,
	0, 0, 607, 584, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 425, 0, 0, 45, 574, 571, 572,
	576, 577, 578, 579, 0, 0, 0, 575, 580, 465,
	466, 550, 0, 0, 0, 0, 545, 563, 0, 0,
	592, 0, 0, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 560, 561, 0, 0, 0, 0,
	609, 0, 562, 0, 548, 558, 559, 564, 0, 547,
	0, 0, 0, 0, 0, 0, 593, 0, 594, 0,
	0, 0, 0, 0, 607, 0, 584, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 425, 0, 0, 45,
	574, 571, 572, 576, 577, 578, 579, 0, 0, 595,
	575, 580, 465, 466, 550, 0, 0, 0, 0, 545,
	563, 0, 0, 592, 0, 570, 0, 0, 0, 0,
	0, 611, 0, 596, 597, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 560, 561, 0,
	0, 0, 0, 609, 0, 562, 0, 0, 558, 559,
	564, 0, 0, 0, 582, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 608, 604, 605,
	602, 603, 601, 600, 599, 610, 586, 587, 588, 589,
	591, 595, 0, 469, 468, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 570, 0,
	0, 0, 0, 611, 0, 596, 597, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 608,
	604, 605, 602, 603, 601, 600, 599, 610, 586, 587,
	588, 589, 591, 0, 595, 469, 468, 590, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 611, 0, 596, 597,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 34, 582,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 608, 604, 605, 602, 603, 601, 600, 599,
	610, 586, 587, 588, 589, 591, 0, 0, 469, 468,
	590, 0, 0, 0, 593, 0, 594, 0, 0, 0,
	0, 0, 0, 0, 584, 585, 0, 79, 0, 846,
	0, 0, 0, 0, 876, 0, 0, 45, 574, 571,
	572, 576, 577, 578, 579, 0, 0, 606, 575, 580,
	465, 466, 683, 0, 1141, 1130, 1129, 0, 563, 0,
	0, 592, 95, 0, 0, 0, 1131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1132,
	683, 0, 1141, 1130, 1129, 560, 561, 0, 0, 0,
	0, 609, 0, 562, 1131, 0, 558, 559, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 1132, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 0, 122,
	123, 0, 124, 125, 126, 128, 127, 96, 97, 98,
	102, 100, 99, 101, 73, 75, 570, 71, 74, 80,
	76, 77, 78, 92, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 91, 93, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 1125, 0, 0, 0, 845,
	0, 0, 0, 0, 0, 1137, 0, 683, 0, 1141,
	1130, 1129, 0, 0, 0, 0, 1143, 1144, 0, 0,
	0, 1131, 0, 1125, 0, 0, 1139, 0, 0, 0,
	0, 0, 0, 1137, 1132, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 1143, 1144, 0, 0, 0, 0,
	0, 0, 0, 0, 1139, 1133, 1134, 1136, 0, 0,
	0, 1135, 0, 0, 611, 0, 596, 597, 0, 0,
	0, 72, 1291, 0, 0, 0, 0, 0, 0, 0,
	731, 730, 0, 1133, 1134, 1136, 0, 0, 1452, 1135,
	683, 0, 1141, 1130, 1129, 0, 0, 582, 732, 0,
	1291, 0, 0, 0, 1131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1132, 0, 598,
	608, 604, 605, 602, 603, 601, 600, 599, 610, 586,
	587, 588, 589, 591, 0, 0, 469, 468, 590, 683,
	1125, 1141, 1130, 1129, 0, 0, 0, 0, 0, 0,
	1137, 0, 0, 1131, 0, 0, 0, 0, 0, 0,
	0, 1143, 1144, 731, 730, 683, 1132, 1141, 1130, 1129,
	0, 1139, 0, 0, 0, 606, 0, 0, 0, 1131,
	0, 732, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1132, 683, 0, 1141, 1130, 1129, 1142, 0,
	1133, 1134, 1136, 0, 0, 0, 1135, 1131, 0, 733,
	0, 0, 731, 730, 0, 0, 0, 1457, 0, 0,
	1132, 0, 0, 1125, 0, 0, 1142, 0, 0, 0,
	732, 0, 0, 1137, 0, 0, 0, 0, 731, 730,
	0, 0, 0, 0, 1143, 1144, 0, 683, 1667, 1141,
	1130, 1129, 0, 0, 1139, 0, 732, 0, 0, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1125, 0, 1132, 0, 1289, 0, 0, 0,
	0, 0, 1137, 1133, 1134, 1136, 0, 0, 0, 1135,
	0, 0, 733, 1143, 1144, 0, 0, 0, 0, 0,
	1457, 0, 0, 1139, 0, 0, 0, 0, 1137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1143,
	1144, 0, 0, 0, 0, 0, 1125, 0, 0, 1139,
	0, 0, 1133, 1134, 1136, 0, 1137, 0, 1135, 0,
	0, 733, 0, 1142, 0, 0, 0, 1143, 1144, 1495,
	0, 0, 0, 0, 0, 0, 0, 1139, 1133, 1134,
	1136, 0, 0, 0, 1135, 0, 0, 733, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 0, 0, 0,
	1670, 0, 0, 0, 0, 0, 1133, 1134, 1136, 0,
	1137, 0, 1135, 0, 0, 0, 0, 0, 0, 0,
	0, 1143, 1144, 1111, 0, 0, 0, 0, 0, 0,
	0, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1133, 1134, 1136, 0, 0, 0, 1135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1142,
}

var yyPact = [...]int16{
	562, -1000, -266, -1000, -1000, 1498, 2107, 477, -1000, -1000,
	-1000, 1013, 541, 535, 531, 237, 504, 1028, 558, 992,
	550, 461, -1000, -215, -201, -1000, -114, 516, -1000, 1268,
	-1000, 4568, 4568, 4568, -1000, 325, 1028, 1028, 461, 148,
	461, 1513, 435, 1511, 789, -1000, 638, -1000, 1607, 635,
	-1000, 461, 992, 788, -1000, -1000, -1000, -1000, 201, 185,
	1892, 1842, -159, -16, -1000, -1000, -1000, -1000, -1000, 1408,
	-1000, -1000, -1000, 1408, 58, 1497, 1408, 1497, -1000, 1408,
	1497, 48, 48, 48, 48, 48, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1496, 1495, -1000, 1408, 1408, 1408, 1408,
	1408, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1493, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1485, 111, 1485, 1418, 1418, -1000, -1000, 1842,
	1842, 1492, 992, 1028, 1510, 1507, 992, -230, 992, 992,
	1685, -1000, -1000, -1000, 181, 992, 1589, 5717, 4568, 7253,
	992, -1000, 1588, 555, 992, 4949, -1000, 1564, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1489, 818, 1028, 362, 375,
	1296, 414, 458, 334, 1182, 302, -1000, -1000, -1000, 858,
	-1000, 1028, -1000, 1722, -1000, -1000, 297, -1000, 294, 767,
	1023, 992, 1487, 159, 1486, 3628, 942, -1000, -272, -1000,
	-38, -1000, -1000, 904, 48, 1408, -1000, 48, 944, 48,
	48, -1000, -1000, 645, 1573, 645, 645, 645, 645, 1019,
	1019, -156, -156, -1000, -1000, -1000, 941, -1000, 939, 1485,
	-1000, -1000, -1000, 933, -1000, 992, 1028, 1481, 1506, 992,
	992, 1606, 487, -1000, -1000, 1602, 1601, 1369, -1000, -1000,
	170, -1000, -1000, 435, 1028, -1000, 620, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1406, -1000, 282, 553, 6101, 185, -1000, -1000, -1000,
	-1000, 386, -1000, 1706, 1649, 403, -15, -209, 1175, -1000,
	-1000, 1462, -1000, -1000, 9048, -1000, 1160, 1136, -1000, 1085,
	1083, 10, 1028, -1000, -205, 120, -39, -1000, -1000, 1296,
	-1000, 1460, 9048, 1594, -1000, 1576, 712, -1000, 2847, -1000,
	-235, -1000, -1000, 844, -1000, -235, -1000, -1000, -1000, 1296,
	-1000, 1459, 1458, -1000, 1457, -1000, -1000, 1296, 1296, 1296,
	614, -1000, -1000, -1000, -1000, -1000, 1337, 645, 48, 645,
	1312, 1311, 645, 645, -1000, -1000, 1079, 675, -1000, -1000,
	-1000, -1000, 1266, -1000, 1262, -1000, 104, 84, -1000, 1310,
	1387, -1000, 1260, 1398, 1505, 196, 992, 1455, 1451, 1373,
	461, 1373, 1645, 224, 992, 1685, 357, 1685, 435, 6485,
	1028, 293, 1028, -1000, -1000, 468, 4565, -1000, -1000, 1255,
	-1000, 233, 1408, 708, 708, -207, 292, 289, -209, 1296,
	1447, -1000, 386, 515, -1000, 9048, 227, 1296, 1296, 1296,
	1296, 8955, -1000, -1000, 578, -1000, -1000, -1000, 2341, 2341,
	2341, 2341, 2341, 2341, 2341, -1000, -1000, -1000, -1000, -6,
	-1000, -235, -1000, 981, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 599, 595, -1000, 1296, 1296, 1296, 1296, 1296, 1296,
	1296, 1296, 9048, 1296, 1558, 1296, 1296, 1296, 1296, 1296,
	1296, 1296, 1296, 1296, 1296, 1296, 1709, 1296, 1296, 1296,
	1296, -1000, -1000, -1000, -1000, -1000, -1000, -209, 1446, -1000,
	-1000, -1000, 767, -1000, 9048, 357, 764, 118, -1000, 1385,
	-1000, 932, 1309, 928, 1308, -1000, 9297, -1000, -1000, -1000,
	1045, -1000, 895, -1000, 873, 1306, 8431, 8863, 8863, 6485,
	-1000, -1000, 645, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 48, 1018, 48, -19, -25, -1000, 916, -1000, 906,
	196, 1028, 992, 1301, 1384, -1000, 228, 1445, 357, 386,
	-1000, 1663, 1727, -1000, 1373, 992, -1000, 481, 1718, -1000,
	-1000, 1644, -1000, 1381, -1000, -1000, 1340, 1685, -1000, 1444,
	1028, -1000, -1000, 383, 1028, -1000, -1000, -1000, -1000, -1000,
	1229, 386, 1584, -1000, -1000, -1000, 807, -1000, -1000, 811,
	243, 798, -1000, 1028, -209, 1443, 9048, 386, 1252, 229,
	9048, 9048, 848, -1000, -1000, 296, 7824, 849, 752, 2341,
	2341, 2341, 2341, 2341, 2341, 2341, 2341, 2341, 2341, 2341,
	2341, 2341, 2341, 2341, 3128, 1016, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1072, -1000,
	1373, 957, 1045, 1045, 1045, 1245, 8955, 758, 1323, 1323,
	34, 8955, 34, 34, 34, 34, 34, 94, -1000, -269,
	-1000, -1000, 5717, 6485, 8863, 8863, 8000, 9048, 8863, 8863,
	8863, 1614, 756, 758, 957, 1640, 1045, 1045, 1045, 1045,
	-1000, 1045, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	55, -1000, -1000, -1000, -1000, -1000, -1000, 8863, 8863, 8863,
	8863, -1000, 1028, 1296, 515, 1247, -165, 9048, 1442, 712,
	-1000, -1000, 1299, -235, -1000, -1000, -1000, -159, -1000, -1000,
	-1000, -1000, 1045, 8863, 1220, 1245, -1000, 613, -1000, 590,
	1220, 613, 1220, 1296, -1000, 645, -1000, 645, -1000, -1000,
	1295, 1292, 1287, 1440, 1434, -219, 904, 196, 1237, 1233,
	1653, 1661, 1373, 1618, 1550, -1000, 1045, 1593, 1028, -1000,
	-1000, -1000, -1000, -1000, 204, 749, 1028, 9767, 1281, -1000,
	869, 1427, 106, 422, 1501, 3332, 141, -1000, 1065, 736,
	982, 735, 719, 718, 714, 713, 709, 702, 701, 697,
	679, -1000, -1000, -1000, -1000, -1000, 1716, -1000, -1000, -1000,
	1702, 1422, 1420, 386, 515, 1228, 1229, -1000, -124, 296,
	342, -1000, -1000, 867, -1000, -1000, 471, 2341, 2341, 2341,
	-1000, -1000, -1000, -1000, 849, 2341, 2341, 2341, 31, 471,
	2709, 363, 950, 34, 133, 133, 14, 14, 14, 14,
	14, 242, 242, -1000, -133, -1000, 1408, -1000, -1000, -1000,
	1045, 1045, -1000, -1000, -1000, -1000, 9048, -1000, 1045, -1000,
	-235, 969, -1000, -1000, 851, 1296, -1000, 1220, 1220, 602,
	1380, 9366, 1408, -1000, 1408, 1418, -1000, -1000, 123, 1408,
	121, -1000, -1000, -1000, -1000, 1418, -1000, -1000, -1000, -1000,
	-1000, 1408, 1408, -1000, -1000, 1408, 1408, -1000, 1408, 1408,
	750, 1349, 1333, 1220, 8863, -1000, 700, -1000, 9048, 1045,
	992, -1000, -1000, -1000, -1000, -1000, -1000, 1220, 1045, 1379,
	1220, 1220, 1223, -1000, 9048, 229, 1504, -1000, -1000, 703,
	-1000, 1276, 1272, -1000, -1000, 1220, 8863, -264, -1000, -1000,
	-1000, 1017, -1000, -1000, 4181, -264, -264, 8863, -1000, -1000,
	-1000, -1000, -219, 196, 386, 1680, 1417, 1263, 1680, 1229,
	1582, 9048, 9048, 1663, -1000, 1373, -1000, -1000, 1614, -1000,
	-1000, 810, -1000, 1373, 1294, 199, 146, 9048, -1000, 9464,
	-1000, 9767, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1663, 9048, -1000, -1000, -1000, -1000,
	-1000, 1028, 2887, 1028, 1028, 1028, 365, 9048, 1029, 9048,
	-1000, -1000, -1000, -1000, -1000, 992, 1202, 4184, 869, 869,
	4184, 869, 869, 386, 386, 1414, 1412, 287, -1000, 1028,
	-1000, -163, 3332, 1028, -1000, 897, -1000, -1000, 819, 862,
	819, 819, 819, 819, 819, 216, 839, 349, 708, 708,
	1028, 386, 1207, 229, 1229, 1501, -1000, -1000, -1000, -1000,
	471, 471, 471, -1000, 31, 471, 2193, -1000, 2341, 2341,
	69, -1000, -1000, 758, -1000, 73, -1000, -235, -1000, -1000,
	3783, 1016, 9048, -1000, 249, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3783, 2341, 2341,
	2341, 2341, -129, 1319, 710, -1000, 9048, 573, -1000, -1000,
	-1000, -1000, -1000, -1000, 417, 1028, 515, -1000, 1700, -178,
	445, -1000, -1000, -1000, -1000, -1000, 1296, -1000, -1000, 586,
	-1000, -1000, 1045, 1680, 1059, 1180, 1229, 9048, 357, -219,
	1229, -1000, -1000, 1713, 666, 588, 1378, -1000, 576, 1653,
	1045, 1527, -1000, -1000, -151, 9048, 9767, 6643, 758, 6643,
	-1000, 9767, 2434, 1653, 9581, 477, 985, 979, 1371, 373,
	-1000, 2939, 831, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1028, 1692,
	1690, 1689, 1688, 9713, 9048, 9048, -1000, 1634, -1000, -1000,
	4184, -1000, -1000, -1000, -1000, -1000, 1155, 1151, 386, 386,
	1409, 1296, 1146, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 767, 767, 1144, 1140, 1229, -1000, 1501, -1000,
	-1000, 2341, 471, 471, -34, -1000, 851, -1000, 1045, 1408,
	1045, 337, -1000, -1000, 1045, 1943, 838, 382, 169, 1296,
	-122, -1000, 758, 9048, 992, -1000, 229, 708, 708, -1000,
	-1000, -1000, 156, 754, 712, 712, 826, 5, -1000, 1659,
	503, 5333, -1000, 1229, 1680, 1229, 1501, 758, 1135, 1680,
	1501, -1000, 1556, 9048, 9048, 9048, -1000, 1582, -1000, 8863,
	-1000, -1000, -261, 758, 9464, 2592, -1000, -1000, 210, 6259,
	-1000, 1582, 9767, 739, -1000, 742, -1000, 6643, 907, 992,
	1190, -1000, 1298, 1488, -1000, -1000, -1000, 1592, 989, 572,
	1028, 191, 4568, -1000, -1000, 1370, 3413, -71, -1000, -1000,
	-1000, 678, 584, 1010, -1000, 1570, -1000, -1000, 2887, 1580,
	-1000, -1000, -1000, -1000, -1000, 6643, -1000, 1334, 1045, 749,
	197, -1000, 306, 1131, 1070, 386, 1028, -1000, 3332, -1000,
	-1000, 416, 1229, 1501, -1000, 471, -1000, -1000, -1000, -1000,
	-1000, 2341, -1000, -1000, 2341, -1000, 2341, -1000, 2341, -1000,
	2341, 2341, 1045, 850, 758, 1407, -1000, -1000, -1000, 712,
	-1000, 712, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 129,
	-1000, 1658, 1045, -1000, 1501, 1229, -1000, -1000, -1000, 1229,
	-1000, 1554, 758, 758, -1000, -1000, 1283, 9048, 5875, -1000,
	-1000, -1000, -1000, 9436, 9821, 459, 2702, 250, 992, -1000,
	250, 1242, 979, 992, -1000, -1000, 957, 979, 979, 979,
	979, 979, -1000, 1543, 1538, -1000, 1535, 1526, 1542, 992,
	1058, 989, 589, 1296, -1000, 1007, -1000, -1000, -1000, 1592,
	1630, -1000, 3797, 1370, -71, 1367, -1000, -62, -45, 8339,
	6485, 645, -1000, -1000, -1000, -1000, -1000, 1028, 2638, -1000,
	144, 198, 154, -1000, 157, 1229, 1229, 1056, 1045, -1000,
	992, 1501, -1000, 2780, 2780, 2780, 2780, 2780, 350, -1000,
	-1000, 1028, -1000, -1000, -1000, 575, 9048, -1000, -1000, -1000,
	1501, -1000, 1680, 979, 758, -1000, -1000, 3571, -1000, -1000,
	9048, -1000, 9048, 6643, -1000, 1089, 1296, -1000, 1680, 979,
	1305, -1000, 1201, -1000, 677, 1488, 1405, 1502, 1401, -1000,
	-1000, -1000, -1000, 1536, -1000, 1529, -1000, -1000, -1000, -1000,
	-153, 529, 520, 505, 1028, -1000, 1373, -1000, 1367, -71,
	-17, -1000, -1000, -1000, -1000, 758, 605, -1000, 1361, -1000,
	6643, -1000, -1000, 171, -1000, 1501, 1501, -1000, -1000, 1402,
	-1000, -1000, -1000, -1000, -1000, -1000, 1045, 174, -168, 1054,
	6485, 1082, -1000, 758, -1000, 1677, 1350, 452, 9767, 9739,
	9664, 1490, 957, 1296, -1000, 6869, 1028, 1663, 1305, -1000,
	1680, 957, 9048, -1000, -1000, 9048, 1374, -1000, 9048, -1000,
	-1000, -1000, -1000, 1300, 1296, 1296, 1296, 1044, -1000, -1000,
	-1000, -1000, -69, -55, -1000, 9048, 2468, -1000, -1000, -1000,
	-1000, 1028, -1000, 1549, -162, -174, -1000, -1000, -1000, 1045,
	9048, 1667, 1655, -1000, 230, 739, -1000, -1000, 1578, 1274,
	1284, -1000, -1000, 8524, 1045, 1049, -1000, -1000, 567, -1000,
	1044, 1653, -1000, 1663, -1000, 758, 758, 357, 758, -172,
	357, 357, 357, 900, 1028, -1000, -1000, -1000, 758, 5491,
	1041, -1000, 1530, -1000, -1000, -1000, -1000, 9048, 9048, 5107,
	286, -1000, 1296, -1000, -1000, 1210, 7637, 1028, -1000, -1000,
	1653, 1039, 1034, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1032, 1032, 1032, 589, -1000, -1000, -1000, -152,
	758, 1334, 432, 1712, -1000, 1296, -1000, 1373, -1000, -1000,
	-1000, -1000, -1000, -172, -1000, -1000, -1000, -153, -170, -1000,
	957, 1284, 1045, -1000, -1000, -183, 1191, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1988, 89, 41, 1987, 1986, 1983, 1981, 1980, 1979,
	1976, 1975, 1974, 1973, 1972, 40, 29, 47, 21, 35,
	1970, 1969, 1968, 1964, 1963, 93, 1961, 1958, 1948, 1944,
	85, 1943, 1942, 1940, 1927, 75, 72, 83, 116, 1083,
	28, 65, 56, 44, 1926, 30, 1925, 1924, 54, 1922,
	42, 1920, 1919, 2098, 1918, 1917, 7, 39, 99, 106,
	80, 1916, 1914, 92, 1811, 1912, 1911, 105, 1909, 1908,
	88, 10, 71, 3, 24, 9, 1905, 96, 6, 1904,
	87, 79, 1900, 1895, 1893, 31, 1892, 63, 69, 15,
	59, 1891, 8, 4, 97, 49, 22, 16, 5, 55,
	43, 1890, 20, 48, 27, 1888, 66, 1887, 131, 52,
	64, 13, 0, 46, 86, 1886, 1884, 1882, 605, 82,
	45, 14, 60, 73, 1875, 70, 98, 57, 104, 101,
	1872, 94, 1871, 1869, 1866, 1863, 1856, 215, 886, 119,
	95, 51, 1854, 1853, 91, 365, 378, 90, 368, 1131,
	84, 1852, 1851, 1850, 1849, 110, 1847, 78, 103, 17,
	544, 1846, 1844, 1843, 1842, 1838, 1834, 1827, 108, 1824,
	102, 74, 152, 700, 50, 1823, 1820, 1819, 1816, 76,
	1808, 1806, 1805, 67, 1804, 1803, 107, 68, 121, 112,
	115, 1802, 1801, 100, 77, 1799, 113, 114, 1795, 109,
	26, 23, 372, 62, 1793, 1788, 1784, 1, 2, 1783,
	1774, 1770, 1761, 1754, 1752, 58, 1750, 111, 1747, 11,
	1746, 1743, 53, 1742, 1740, 1738, 1736, 1735, 425, 715,
	1734, 81, 123, 1733, 128,
}

var yyR1 = [...]uint8{
	0, 224, 225, 225, 1, 1, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
	21, 227, 227, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 28, 28, 7, 8, 8, 8, 230, 230,
	48, 48, 95, 95, 9, 9, 9, 9, 10, 10,
	204, 204, 203, 205, 205, 11, 11, 11, 11, 11,
	198, 198, 198, 198, 198, 12, 12, 201, 201, 201,
	15, 15, 15, 15, 16, 16, 17, 17, 17, 19,
	19, 100, 100, 104, 104, 104, 105, 105, 105, 105,
	216, 216, 124, 124, 226, 226, 231, 231, 231, 231,
	231, 231, 231, 196, 196, 196, 196, 197, 197, 197,
	197, 199, 199, 200, 200, 200, 200, 200, 200, 202,
	202, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 13, 13, 29, 29, 72, 72, 14, 110,
	110, 177, 177, 177, 178, 178, 178, 178, 178, 178,
	180, 180, 181, 181, 116, 116, 182, 182, 24, 162,
	163, 163, 163, 163, 163, 163, 163, 163, 149, 149,
	149, 127, 127, 127, 127, 127, 127, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 188, 188, 188, 188,
	188, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 190, 191, 192, 184, 184, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 139, 139, 139, 139, 139, 139, 183, 183, 179,
	179, 179, 179, 131, 131, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 130, 130, 130, 130, 130,
	130, 130, 135, 135, 132, 132, 132, 132, 132, 132,
	132, 132, 128, 128, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 136, 136, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 148, 148, 137,
	137, 146, 146, 147, 147, 147, 138, 138, 138, 145,
	145, 145, 142, 142, 143, 143, 144, 144, 144, 140,
	140, 140, 141, 141, 141, 151, 173, 173, 173, 175,
	175, 176, 176, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 161, 161, 193,
	193, 194, 194, 195, 195, 172, 172, 172, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	160, 160, 170, 170, 171, 171, 168, 168, 168, 169,
	155, 155, 155, 155, 155, 156, 156, 157, 157, 157,
	157, 152, 152, 153, 153, 154, 154, 186, 186, 186,
	220, 220, 220, 220, 220, 220, 221, 221, 187, 187,
	158, 158, 159, 159, 166, 166, 166, 166, 232, 232,
	164, 164, 164, 165, 165, 165, 233, 25, 26, 26,
	27, 27, 27, 32, 32, 32, 30, 30, 31, 31,
	37, 37, 36, 36, 38, 38, 38, 38, 115, 115,
	115, 114, 114, 217, 217, 217, 217, 217, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 207, 207, 206,
	206, 208, 208, 208, 208, 208, 208, 208, 208, 55,
	55, 92, 92, 92, 96, 96, 44, 44, 44, 44,
	45, 45, 46, 46, 47, 47, 122, 122, 121, 121,
	121, 120, 120, 49, 49, 49, 51, 50, 50, 50,
	50, 52, 52, 54, 54, 53, 53, 56, 56, 56,
	56, 57, 57, 94, 94, 39, 39, 39, 39, 39,
	39, 39, 39, 107, 107, 59, 59, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 69, 69, 69, 69, 69, 69, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	35, 35, 70, 70, 70, 77, 71, 71, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 67, 67, 67, 67,
	67, 67, 67, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 234, 234, 68, 68,
	68, 68, 33, 33, 33, 33, 33, 123, 123, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 126, 126, 126, 126, 126, 126, 126, 126, 81,
	81, 34, 34, 79, 79, 80, 109, 109, 82, 82,
	78, 78, 78, 209, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 60, 60, 83, 83, 84, 84,
	218, 218, 219, 85, 85, 86, 86, 87, 88, 88,
	88, 89, 89, 89, 89, 90, 90, 90, 62, 62,
	62, 62, 62, 62, 91, 91, 93, 93, 93, 97,
	97, 73, 73, 75, 75, 74, 76, 98, 98, 102,
	99, 99, 103, 103, 103, 103, 103, 22, 23, 101,
	101, 101, 117, 117, 117, 108, 108, 106, 106, 112,
	113, 113, 113, 113, 118, 118, 119, 119, 210, 210,
	210, 211, 211, 211, 212, 212, 213, 214, 214, 215,
	223, 223, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 228,
	229,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 3, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 10, 1, 1, 5, 5, 3, 5, 3, 1,
	3, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 4, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 4, 1, 1, 0, 1, 2, 0,
	3, 0, 2, 2, 0, 2, 2, 2, 2, 2,
	0, 2, 0, 3, 0, 1, 0, 2, 4, 4,
	0, 1, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 3, 1, 1, 1, 1, 1, 2, 2, 3,
	2, 4, 2, 4, 2, 2, 3, 2, 3, 2,
	7, 9, 3, 3, 6, 9, 9, 6, 6, 8,
	8, 5, 8, 7, 4, 0, 2, 4, 6, 2,
	4, 2, 1, 1, 2, 1, 2, 2, 1, 1,
	1, 3, 1, 2, 1, 1, 2, 0, 4, 3,
	4, 3, 3, 3, 3, 3, 3, 3, 2, 4,
	6, 2, 3, 2, 3, 1, 3, 0, 2, 0,
	2, 2, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	1, 1, 0, 1, 1, 3, 3, 2, 2, 2,
	1, 1, 1, 1, 4, 5, 4, 4, 4, 1,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 3, 0,
	3, 3, 0, 1, 0, 1, 0, 2, 1, 0,
	3, 3, 0, 1, 2, 6, 0, 1, 4, 1,
	2, 1, 3, 2, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 5, 2, 3,
	3, 2, 3, 2, 3, 3, 2, 2, 3, 4,
	1, 1, 1, 1, 1, 3, 3, 2, 2, 1,
	2, 5, 5, 8, 8, 13, 11, 1, 1, 2,
	2, 10, 8, 9, 7, 7, 5, 0, 1, 1,
	0, 1, 1, 1, 2, 2, 1, 2, 0, 3,
	0, 1, 1, 3, 0, 4, 1, 3, 2, 1,
	1, 2, 1, 1, 1, 1, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 3, 6, 4, 7, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 0, 4, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	8, 1, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 0, 4, 1, 3, 3, 2, 3,
	2, 1, 2, 0, 3, 1, 1, 3, 4, 4,
	4, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	4, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	6, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 2, 1, 4, 5, 5, 5,
	5, 6, 4, 4, 4, 6, 6, 8, 6, 6,
	6, 8, 6, 8, 6, 8, 6, 8, 9, 7,
	5, 4, 4, 3, 3, 3, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 2, 2, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 0, 2,
	1, 3, 5, 3, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 0, 3, 0, 2,
	1, 3, 1, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 1, 3, 1, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 5, 3, 1, 3, 1,
	2, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	2, 0, 2, 2, 0, 1, 4, 1, 3, 2,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int16{
	-1000, -224, -1, -20, -21, -24, 126, 127, -225, 392,
	-162, 58, -220, -221, 277, -182, 135, 148, 168, 169,
	362, 133, 374, 375, 150, 377, 79, -106, 138, -163,
	-149, -112, 63, 36, 61, 134, 134, 134, 136, 214,
	136, -112, -112, -78, 139, 61, -118, 63, -53, -118,
	61, 133, -108, 139, 377, 374, 375, 342, 133, 60,
	59, -150, -127, -131, -128, -133, -132, -134, -112, -129,
	-130, 250, 354, 247, 251, 248, 253, 254, 255, 120,
	252, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 256, 268, 33, 155, 240, 241, 242, 245,
	244, 246, 243, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 232, 233, 235, 236, 237, 239, 238, -150,
	-150, -112, 56, 213, -112, -112, -108, 215, -108, 56,
	-196, 19, 193, 194, 206, 56, 81, 123, 25, 123,
	-108, -53, 81, -53, 306, -166, -232, 357, 37, -149,
	-151, -155, -152, -153, -154, -167, -156, 142, 140, 150,
	390, 144, 145, 277, -160, 146, 134, 151, 73, 81,
	-188, 142, -191, 56, 285, 291, 140, 151, 150, 390,
	71, 143, 25, 364, 366, 31, 32, -144, 393, 279,
	-142, 288, -137, 58, -137, -136, 249, -138, 58, -137,
	-138, -137, -138, -140, 251, -140, -140, -140, -140, 58,
	58, -137, -137, -137, -137, -137, 58, -146, 58, -135,
	234, -146, -147, 58, -147, 56, 57, -53, -112, 56,
	56, -53, -216, 387, 388, -53, -53, -199, -197, 8,
	9, 10, 207, -53, 26, -113, -119, -112, 299, 147,
	-111, -118, 131, 194, 365, 80, 25, 27, 285, 291,
	193, 84, 120, 16, 85, 200, 374, 375, 119, 76,
	343, 126, 52, 335, 336, 333, 198, 345, 346, 334,
	292, 205, 20, 31, 387, 10, 28, 153, 24, 113,
	128, 195, 89, 88, 156, 160, 161, 26, 154, 75,
	201, 203, 19, 55, 146, 11, 364, 13, 14, 379,
	366, 139, 138, 100, 378, 134, 50, 8, 122, 29,
	388, 97, 46, 151, 204, 48, 98, 17, 337, 338,
	34, 352, 162, 115, 53, 40, 380, 81, 381, 73,
	56, 306, 199, 79, 15, 51, 163, 382, 148, 202,
	386, 99, 129, 342, 170, 49, 196, 383, 132, 197,
	6, 348, 33, 152, 47, 171, 133, 293, 384, 87,
	137, 74, 169, 5, 150, 9, 385, 54, 57, 339,
	340, 341, 38, 86, 12, 149, 356, 77, -127, -119,
	-111, -53, 26, 131, -53, -164, 59, -113, 71, -111,
	36, 58, -187, 56, 81, -158, -112, 151, -160, 61,
	134, -186, 374, 375, -228, 58, -160, -160, 61, 134,
	151, 61, 151, 73, 19, -112, 9, 151, 151, -187,
	63, -53, 58, -184, 365, 16, 58, -189, 58, -190,
	63, 64, 65, 110, 66, 73, -139, 72, -59, 280,
	-67, 333, 336, 335, 281, 74, 75, -112, 351, 350,
	-118, -192, 65, 394, -143, 289, 65, -140, -137, -140,
	65, 61, -140, -140, -141, 120, 119, 33, -141, -141,
	-141, -141, -148, 63, -148, -145, 356, 357, -145, 65,
	65, -146, 65, -53, -112, 58, 56, -53, -53, 25,
	136, 25, -177, 25, 56, 59, 207, -196, -112, 123,
	57, -116, 142, -155, 150, 131, 90, -113, -232, -171,
	-168, -112, 151, 10, 9, 19, 146, 140, 150, 390,
	-186, 61, 58, -39, -58, 81, -64, 31, 26, 9,
	76, -228, -63, -59, -78, -209, -76, -77, 120, 121,
	109, 110, 117, 82, 122, -67, -65, -66, -68, -212,
	180, 63, 64, -112, 62, 72, 65, 66, 67, 68,
	73, -118, 311, -74, 48, 49, 343, 344, 345, 346,
	352, 347, 85, 38, 40, 256, 280, 281, 333, 341,
	340, 339, 337, 338, 335, 336, 389, 139, 334, 115,
	342, 278, 61, 61, 61, 61, -186, 150, -158, -112,
	376, -188, 390, -139, -228, 58, -39, 25, 31, -60,
	65, 110, -189, 58, -190, -179, 389, 65, 66, -179,
	-228, -137, 58, -137, 58, 58, -228, -228, -228, 123,
	60, -141, -140, -141, 60, 60, -141, -141, 61, 61,
	120, 60, 59, 60, 240, 240, 60, 59, 60, 59,
	58, 57, 56, -170, -171, -67, -112, -53, 58, 58,
	-2, -3, -4, 6, -228, -108, -2, -178, 19, 177,
	178, -53, -197, -92, -112, 151, -199, -196, -113, -112,
	-227, 134, 151, -112, 142, -155, -165, -113, 63, 65,
	60, 59, -137, -169, 283, -137, -157, 173, 174, 33,
	175, -157, 376, 151, 151, -186, -228, 58, -171, -229,
	80, 79, 97, 208, 60, -39, -61, 100, 81, 98,
	99, 84, 106, 105, 116, 109, 110, 111, 112, 113,
	114, 115, 107, 108, 389, 119, 90, 91, 92, 93,
	94, 95, 96, 101, 102, 103, 104, -107, -228, -77,
	-228, -228, -228, -58, -2, -71, -228, -39, 124, 125,
	-64, -228, -64, -64, -64, -64, -64, -64, -213, 279,
	-179, 63, 123, 123, -228, -228, -228, -228, -228, -228,
	-228, -228, -81, -39, -228, 41, -228, -228, -228, -228,
	-234, -228, -234, -234, -234, -234, -234, -234, -126, 120,
	251, 155, 242, -129, -128, 257, 256, -228, -228, -228,
	-228, -186, 58, -187, -39, -92, 60, 58, 366, 59,
	65, 60, -189, 63, 60, 282, 122, -127, -229, 60,
	60, 60, -37, 24, -36, -71, -38, -39, 111, -118,
	-36, -39, -36, -113, -141, -140, 63, -140, 290, 290,
	65, 65, -170, -112, -53, 60, 58, 58, -92, -171,
	-85, 15, -27, 5, -25, -233, -2, -53, 137, 21,
	6, 8, 9, 10, 19, -110, 59, 25, -199, -226,
	58, -112, 150, -112, -173, -175, 356, -174, 57, 147,
	71, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	61, -168, -88, 27, 28, -187, 56, 73, 176, -187,
	56, -158, -186, 58, -39, -171, 60, -183, 175, -39,
	-39, -69, 73, 81, 74, 75, -64, 21, 22, 23,
	-70, -74, -77, 69, 100, 98, 99, 84, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -131, 241, -126, -129, -123, 61, 63,
	61, -78, -112, -229, -229, -229, 59, -229, -2, -63,
	63, -112, -63, -112, 393, -113, -113, -36, -36, -39,
	-125, 120, 247, 155, 242, 236, 266, 267, 287, 240,
	288, 229, 221, 226, 239, 237, 223, 238, 222, 235,
	232, 245, 244, 246, 257, 248, 253, 255, 254, 252,
	-39, -38, -38, -36, -30, 24, -79, -80, 86, -78,
	19, -229, -229, -229, -229, -229, 249, -36, -37, -36,
	-36, -36, -159, -112, -228, -229, 60, 362, 363, -39,
	58, -60, 60, -144, -229, -36, 59, -229, -229, -115,
	-114, 25, -112, 63, 123, -229, -229, -228, -141, -141,
	60, 60, 60, 58, 58, -94, 378, -170, 60, 60,
	-89, 17, 16, -5, -3, -228, 21, 24, -32, 44,
	45, -26, -229, 25, -159, 195, -109, 86, -112, -200,
	-202, 216, -18, -15, -6, -8, -7, -10, -9, -11,
	-12, -13, -14, -22, -3, 139, -16, -17, -28, 10,
	9, 20, 33, 199, 200, 205, 201, 149, -29, 170,
	-23, 8, 342, 160, 161, 56, -231, -112, 109, 90,
	63, -149, 59, 58, 58, 374, 375, 140, -172, 56,
	-174, 356, 58, 358, 61, -161, 90, 63, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 9, 10,
	58, 58, -171, -229, 60, -173, 349, 73, 74, 75,
	-64, -64, -64, -70, -64, -64, -64, -35, 156, 80,
	356, -229, -229, -39, -229, -214, -215, 63, -229, -229,
	59, 57, 59, -137, -137, -137, -147, 227, -137, 227,
	-147, -137, -137, -137, -137, -137, -137, 25, 59, 11,
	59, 11, -229, -36, -82, -80, 89, -39, -229, -118,
	-229, -229, -229, -229, 60, 59, -39, -183, 56, 60,
	-185, 60, 60, -229, -38, -217, 391, -114, 111, -119,
	-217, -217, -37, -94, -170, -171, -57, 12, 58, 60,
	-57, -173, -90, 19, 34, -39, -86, -87, -39, -85,
	-2, -30, 70, -2, -180, 57, 196, 216, -39, 392,
	-202, 216, -200, -85, -39, -25, -25, -25, -204, -112,
	-203, -25, -223, -222, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, -112, -112, -112, -198, 40,
	202, 203, 204, -39, -112, -228, -81, -53, 60, -231,
	-112, -231, -231, -231, -231, -231, -171, -171, 58, 58,
	151, -112, -176, -174, -112, 65, -193, 56, 77, 65,
	-193, -193, -193, -193, -193, -194, 191, 192, 65, -195,
	-194, 65, -157, -157, -159, -171, 60, -183, -173, -172,
	-35, 80, -64, -64, 240, 394, 59, -179, -125, 120,
	-123, -39, -140, 61, -125, -64, -64, -64, -64, 353,
	-85, 88, -39, 87, 143, -112, -229, 10, 9, 362,
	363, 60, 217, 368, 369, 162, 370, 175, 371, 372,
	-228, 123, -229, -57, 60, 60, -173, -39, -92, -94,
	-173, 9, 100, 59, 18, 59, -88, -89, -229, -31,
	47, -181, 356, -39, -200, -201, -202, -202, -200, 392,
	88, -89, 87, -19, -15, -16, -18, 216, -106, 11,
	-48, -53, -41, -42, -43, -44, -55, -77, -228, -53,
	59, -205, -122, 197, 25, -99, -124, 218, -103, 301,
	300, -113, 311, -101, 299, 251, 298, -193, 59, -112,
	11, 11, 11, 11, -202, 216, -72, -71, -72, -110,
	19, 60, 60, -171, -171, 58, -228, 60, 59, -187,
	-187, 60, 60, -173, -172, -64, 290, -215, -229, -229,
	-229, 59, -229, -229, 59, -229, 19, -229, 59, -229,
	19, -228, -34, 348, -39, -53, -183, -157, -157, 356,
	-60, 16, -60, -60, -60, 65, 369, 162, 371, 16,
	-229, 163, -85, 111, -173, -57, -173, -172, 60, -57,
	-172, 42, -39, -39, -87, -90, -36, 390, 392, -202,
	88, 88, -90, -200, 89, 89, -201, -54, 29, -53,
	-53, -48, -230, 59, 11, 57, 33, 59, -49, -51,
	-50, -52, 46, 50, 52, 47, 48, 49, 53, -122,
	-41, -228, -121, 163, -120, 25, -118, 63, -203, -112,
	198, -127, 59, -99, 218, -100, -104, 302, 304, 90,
	123, -117, -112, 63, 31, 33, -222, 29, -201, -229,
	-109, 195, -210, 209, 81, 60, 60, -171, -112, -174,
	143, -173, -172, -64, -64, -64, -64, -64, -64, -229,
	63, 58, -60, -60, 373, -118, 16, -229, -172, -173,
	-173, 43, -40, 11, -39, 88, -202, 392, -16, -19,
	139, -17, 139, 392, 88, -95, 163, -53, -95, 57,
	-41, -53, -98, -102, -78, -42, -43, -43, -42, -43,
	46, 46, 46, 51, 46, 51, 46, -50, -118, -229,
	-56, 54, 138, 55, -228, -120, 19, -103, -100, 59,
	303, 305, 306, 56, 77, -39, -113, -141, -159, 88,
	216, 196, -211, 210, 209, -173, -173, 60, -229, -53,
	-172, -229, -229, -229, -229, -229, -33, 100, 356, -159,
	123, -218, -219, -39, -172, -57, -41, 88, 89, -39,
	-39, -62, 33, 38, -2, -228, -228, -57, -41, -57,
	-40, 59, 90, -46, -45, 56, 57, -47, 56, -45,
	46, 46, -207, 356, 134, 134, 134, -96, -112, -2,
	-104, -105, 307, 304, 310, 90, -201, 212, 211, -172,
	-172, 58, -229, 354, 53, 359, 60, -113, -229, -85,
	59, -83, 13, 139, -200, -19, -19, -97, 56, -98,
	-73, -75, -74, -228, -2, -91, -93, 6, -112, -111,
	-96, -85, -57, -57, -102, -39, -39, 58, -39, 58,
	-228, -228, -228, -229, 59, 304, 308, 309, -39, 392,
	-159, 43, 355, 360, -229, -219, -84, 14, 16, 392,
	30, -97, 59, -229, -229, -229, 59, 123, -229, -89,
	-85, -92, -206, -208, 379, 380, 381, 382, 383, 384,
	385, 386, -92, -92, -92, -121, -112, 88, 60, 43,
	-39, -71, 88, 151, -75, 38, -2, -228, -93, -112,
	-89, 60, 60, 59, -229, -229, -229, -56, 356, 139,
	9, -73, -2, -208, -207, 359, -98, -229, 360,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 827, 1, 3,
	6, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 825, 431, 432, 433, 436, 0, 0, 828, 0,
	171, 215, 215, 215, 829, 0, 0, 0, 825, 0,
	825, 0, 750, 0, 0, -2, 0, 835, 0, 545,
	834, 825, 0, 0, 437, 434, 435, 167, 0, 444,
	0, 178, 346, 342, 182, 183, 184, 185, 186, 329,
	264, 292, 293, 329, 316, 336, 329, 336, 299, 329,
	336, 349, 349, 349, 349, 349, 307, 308, 309, 310,
	311, 312, 313, 0, 0, 284, 329, 329, 329, 329,
	329, 290, 291, 318, 319, 320, 321, 322, 323, 324,
	325, 0, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 331, 282, 331, 333, 333, 280, 281, 179,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 114, 115, 0, 0, 0, 0, 0, 0,
	0, 168, 0, 0, 0, 169, 446, 0, 449, 172,
	173, 174, 175, 176, 177, 0, 438, 440, 0, 427,
	0, 0, 0, 0, 0, 0, 400, 401, 188, 0,
	190, 0, 192, 0, 194, 195, 0, 197, 199, 438,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 348,
	344, 343, 263, 0, 349, 329, 317, 349, 0, 349,
	349, 300, 301, 352, 0, 352, 352, 352, 352, 0,
	0, 339, 339, 287, 288, 289, 0, 275, 0, 331,
	283, 277, 278, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 151, 0, 121, 117,
	118, 119, 116, 0, 0, 751, 0, 830, 831, 832,
	-2, 836, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 22, 546,
	837, 0, 826, 164, 0, 0, 0, 450, 452, 833,
	448, 0, 410, 0, 0, 0, 441, 388, 0, 396,
	-2, 0, 428, 429, 844, 1009, 0, 0, 391, 393,
	0, 427, 440, 189, 0, 0, 0, 196, 198, 0,
	202, 203, 844, 0, 235, 0, 0, 216, 0, 219,
	-2, 222, 223, 0, 225, 259, 228, 229, 230, 0,
	232, 329, 329, 255, 0, 565, 566, 0, 0, 0,
	0, 233, 234, 347, 181, 345, 0, 352, 349, 352,
	0, 0, 352, 352, 302, 353, 0, 0, 303, 304,
	305, 306, 0, 327, 0, 285, 0, 0, 286, 0,
	0, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	825, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 29, 165, 0, 0, 451, 447, 0,
	404, 329, 329, 0, 0, 0, 0, 0, 427, 0,
	0, 395, 0, 0, 555, 844, 561, 563, 0, 0,
	0, 844, 608, 609, 610, 611, 612, 613, 844, 844,
	844, 844, 844, 844, 844, 640, 641, 642, 643, 0,
	645, -2, 755, 750, 757, 758, 759, 760, 761, 762,
	763, 0, 0, 806, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 676, 686,
	686, 686, 686, 686, 686, 686, 0, 0, 0, 0,
	0, 845, 389, 390, 392, 394, 398, 427, 0, 441,
	214, 191, 438, 193, 844, 0, 0, 0, 236, 0,
	764, 0, 0, 0, 0, 221, 0, 224, 226, 227,
	0, 251, 0, 253, 0, 0, -2, 844, 844, 0,
	330, 294, 352, 296, 337, 338, 297, 298, 354, 350,
	351, 349, 0, 349, 0, 0, 326, 0, 334, 0,
	0, 0, 0, 0, 402, 403, 329, 0, 0, 0,
	-2, 773, 0, 456, 0, 0, -2, 0, 0, 152,
	153, 149, 122, 120, 511, 512, 0, 0, 752, 104,
	0, 31, 32, 441, 440, 30, 445, 453, 454, 455,
	356, 0, 778, 408, 409, 407, 438, 417, 418, 0,
	0, 438, 439, 440, 427, 0, 844, 0, 0, 257,
	844, 844, 0, 560, 1010, 558, 844, 0, 0, 844,
	844, 844, 844, 844, 844, 844, 844, 844, 844, 844,
	844, 844, 844, 844, 0, 0, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 562, 0, 579,
	0, 0, 0, 555, 36, 0, 844, 606, 0, 0,
	631, 844, 632, 633, 634, 635, 636, 637, 644, 0,
	754, 756, 0, 0, 844, 844, 844, 844, 844, 844,
	844, 466, 0, 740, 0, 0, 0, 0, 0, 0,
	678, 0, 679, 680, 681, 682, 683, 684, 685, 731,
	0, 733, 734, 735, 736, 737, 738, 844, -2, 844,
	844, 399, 0, 0, 0, 0, 0, 844, 211, 0,
	765, 217, 0, 259, 220, 260, 261, 346, 231, 252,
	254, 256, 0, 844, 0, 0, 472, 478, 474, 0,
	0, 478, 0, 0, 295, 352, 328, 352, 340, 341,
	0, 0, 0, 0, 0, 553, 1009, 0, 0, 0,
	781, 0, 0, 460, 463, 458, 36, 0, 0, 155,
	156, 157, 158, 159, 0, 746, 0, 0, 0, 23,
	106, 0, 0, 441, 385, 357, 0, 359, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 405, 406, 779, 780, 411, 0, 419, 420, 412,
	0, 0, 0, 0, 0, 0, 356, 426, 0, 556,
	557, 559, 583, 0, 585, 587, 567, 844, 844, 844,
	571, 602, 603, 604, 0, 844, 844, 844, 600, 575,
	0, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 628, 0, 639, 329, 629, 697, 698,
	0, 0, 750, 581, 582, 605, 844, 805, 36, 626,
	259, 0, 627, 638, 0, 751, 753, 0, 0, 0,
	0, -2, 329, 702, 329, 333, 705, 706, 707, 329,
	710, 712, 713, 714, 715, 333, 717, 718, 719, 720,
	721, 329, 329, 724, 725, 329, 329, 728, 329, 329,
	0, 0, 0, 0, 844, 467, 748, 743, 844, 0,
	0, 673, 674, 675, 677, 687, 732, 0, 0, 471,
	0, 0, 0, 442, 844, 257, 204, 207, 208, 0,
	237, 0, 0, 262, 646, 0, 844, 483, 652, 475,
	479, 0, 481, 482, 0, 483, 483, -2, 314, 315,
	332, 335, 553, 0, 0, 551, 0, 0, 551, 356,
	785, 844, 844, 773, 38, 0, 461, 462, 466, 464,
	465, 457, 37, 0, 160, 0, 0, 844, 513, 19,
	123, 0, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 773, 844, 82, 83, 456, 456,
	456, 0, 456, 0, 0, 0, 70, 844, 0, -2,
	817, 42, 43, 144, 145, 0, 0, -2, 106, 106,
	-2, 106, 106, 0, 0, 0, 0, 0, 355, 0,
	360, 0, 0, 0, 363, 0, 378, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 356, 385, 258, 584, 586, 588,
	568, 569, 570, 572, 600, 576, 0, 573, 844, 844,
	0, 564, 580, 607, -2, 0, 847, 259, 653, 654,
	0, 0, 844, 699, 349, 703, 704, 708, 709, 711,
	716, 722, 723, 726, 727, 729, 730, 0, 844, 844,
	844, 844, 0, 773, 0, 744, 844, 0, 671, 672,
	688, 689, 690, 691, 0, 0, 0, 200, 0, 0,
	0, 213, 218, 647, 473, 648, 0, 480, 476, 0,
	649, 650, 0, 551, 0, 0, 356, 844, 0, 553,
	356, 13, 33, 0, 0, 782, 774, 775, 778, 781,
	36, 468, 459, -2, 162, 844, 150, 0, 747, 0,
	126, 0, 0, 781, 0, 827, 0, 0, 58, -2,
	60, 0, 0, 850, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 65, 66, 67, 0, 0,
	0, 0, 0, 0, -2, -2, 148, 149, 105, 107,
	-2, 108, 109, 110, 111, 112, 0, 0, 0, 0,
	0, 386, 0, 361, 366, 364, 367, 379, 380, 368,
	369, 370, 371, 372, 373, 374, 381, 382, 375, 376,
	383, 384, 438, 438, 0, 0, 356, 425, 385, 424,
	574, 844, 601, 577, 0, 846, 0, 849, 0, 329,
	0, 0, 700, 701, 0, 0, 0, 0, 0, 0,
	741, 670, 749, 844, 0, 443, 257, 0, 0, 209,
	210, 212, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 651, 356, 551, 356, 385, 552, 0, 551,
	385, 786, 0, 844, 844, 844, 777, 785, 39, 844,
	469, 17, 0, 161, 18, 0, 77, 124, 0, 0,
	127, 785, 0, 88, 86, 82, 89, 0, 0, 0,
	0, 50, 0, 490, 492, 493, 494, 526, 0, 528,
	0, 0, 0, 64, 527, 54, 0, 0, 810, 102,
	103, 0, 0, 0, -2, 0, 821, 818, 0, 68,
	71, 72, 73, 74, 75, 0, 142, 147, 0, 746,
	0, 24, 838, 0, 0, 0, 0, 358, 0, 413,
	414, 0, 356, 385, 422, 578, 630, 848, 655, 659,
	656, 844, 658, 660, 844, 662, 844, 664, 844, 666,
	844, 844, 0, 0, 745, 0, 201, 205, 206, 0,
	239, 0, 241, 242, 243, 244, 245, 246, 247, 0,
	484, 0, 0, 477, 385, 356, 10, 8, 554, 356,
	12, 0, 783, 784, 776, 34, 488, 844, 0, 78,
	128, 125, 141, 0, 0, 0, 0, 52, 0, 544,
	-2, 0, 0, 0, 48, 49, 0, 0, 0, 0,
	0, 0, 533, 0, 0, 536, 0, 0, 0, 0,
	0, 0, 547, 0, 529, 0, 531, 532, 61, 526,
	0, 62, 0, 55, 0, 57, 91, 0, 0, 844,
	0, 352, 822, 823, 824, 820, 851, 0, 0, 143,
	0, 0, 841, 839, 0, 356, 356, 0, 0, 362,
	0, 385, 423, 0, 0, 0, 0, 0, 692, 669,
	742, 0, 238, 240, 249, 0, 844, 486, 7, 11,
	385, 787, 551, 0, 163, 20, 79, 0, 84, 85,
	844, 87, 844, 0, 90, 0, 0, 543, 551, 0,
	551, 51, 488, 807, 0, 491, 522, 524, 0, 519,
	534, 535, 537, 0, 539, 0, 541, 542, 495, 496,
	497, 0, 0, 0, 0, 530, 0, 811, 56, 0,
	0, 94, 95, 812, 813, 814, 0, 816, 69, 76,
	0, 150, 26, 0, 840, 385, 385, 25, 387, 0,
	421, 657, 661, 663, 665, 667, 0, 0, 0, 0,
	0, 0, 770, 772, 9, 766, 489, 0, 0, 0,
	0, 799, 0, 0, -2, 0, 0, 773, 551, 47,
	551, 0, 844, 516, 523, 844, 0, 517, 844, 518,
	538, 540, 509, 0, 0, 0, 0, 0, 514, -2,
	92, 93, 0, 0, 99, 844, 0, 842, 843, 27,
	28, 0, 668, 0, 0, 0, 416, 250, 485, 0,
	844, 768, 0, 80, 0, 0, 88, 40, 0, 799,
	788, 801, 803, 844, 36, 0, 794, -2, 796, 798,
	0, 781, 46, 773, 808, 809, 520, 0, 525, 0,
	0, 0, 0, 528, 0, 96, 97, 98, 815, 0,
	0, 693, 0, 696, 487, 771, 35, 844, 844, 0,
	0, 41, 0, 804, -2, 0, 0, 0, 53, 45,
	781, 0, 0, 499, 501, 502, 503, 504, 505, 506,
	507, 508, 0, 0, 0, 547, 515, 21, 415, 694,
	769, 767, 0, 0, 802, 0, -2, 0, 795, 797,
	44, 521, 498, 0, 548, 549, 550, 497, 0, 81,
	0, 791, 36, 500, 510, 0, 800, -2, 695,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 392,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 393, 3, 394, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:422
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:427
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:428
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:436
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:441
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:461
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:481
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:502
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:518
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:535
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:555
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 14:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:570
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:581
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:593
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:604
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:620
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:634
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:648
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:661
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:675
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:686
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:692
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:706
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:720
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:740
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:758
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:776
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:785
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:800
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:808
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:815
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:821
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:825
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:831
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:835
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:842
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:854
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:866
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:870
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:876
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:882
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:886
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:890
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:895
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:896
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:900
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:904
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:909
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:913
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:919
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:923
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:927
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:931
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:937
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:941
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:954
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:958
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:964
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:969
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:973
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:979
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:986
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:993
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1000
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1008
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1018
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1022
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1026
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1030
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1034
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1040
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1047
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1061
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1065
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1069
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1076
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1084
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1094
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1098
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1105
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1115
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1126
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1131
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1136
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1143
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1147
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1158
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1162
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1168
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1172
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1176
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1182
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1186
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1190
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1194
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1200
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1210
		{
			yyVAL.str = SessionStr
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1214
		{
			yyVAL.str = GlobalStr
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1219
		{
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1220
		{
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1224
		{
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1225
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1226
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1227
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1228
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1229
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1230
		{
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1234
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1238
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1242
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1246
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1252
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1256
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1260
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1265
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1271
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1275
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1281
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1285
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1290
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1299
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1303
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1328
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1341
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1351
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1356
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1362
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1363
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1366
		{
			yyVAL.exprs = nil
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1367
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1371
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1376
		{
			yyVAL.empty = struct{}{}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1378
		{
			yyVAL.empty = struct{}{}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1381
		{
			yyVAL.bytes = nil
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1385
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1389
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1394
		{
			yyVAL.bytes = nil
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1398
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1402
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1406
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1410
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1414
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1419
		{
			yyVAL.expr = nil
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1423
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1428
		{
			yyVAL.expr = nil
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1432
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1437
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1441
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1446
		{
			yyVAL.bytes = nil
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1450
		{
			yyVAL.bytes = nil
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1456
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1463
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1469
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1473
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1478
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1482
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1486
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1490
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1494
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1498
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1504
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1509
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1514
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1520
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1531
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1537
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1550
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1555
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1560
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1565
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1571
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1576
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1581
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1586
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1591
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1596
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1601
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1606
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1611
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1620
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1630
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1635
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1640
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1647
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1654
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1662
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1667
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 209:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1672
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1677
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1683
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 212:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1689
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1696
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1703
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1709
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1719
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1723
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1727
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1731
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1737
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1741
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1745
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1749
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1753
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1757
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1761
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1765
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1769
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1773
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1777
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1783
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1789
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1795
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1801
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1805
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1810
		{
			yyVAL.sequence = &Sequence{}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1814
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1819
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1824
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1829
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1834
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1839
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1844
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1849
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1854
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1859
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1864
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1869
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1874
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1881
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1885
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1889
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1893
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1897
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1901
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1906
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1910
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1915
		{
			yyVAL.bytes = nil
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1924
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1929
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2016
		{
			yyVAL.str = ""
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2020
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2026
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2030
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2034
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2038
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2042
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2046
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2050
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2054
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2060
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2064
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2070
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2074
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2078
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2082
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2086
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2090
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2094
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2098
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2102
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2106
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2110
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2114
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2118
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2122
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2126
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 315:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2155
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2160
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2164
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2170
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2174
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2178
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2182
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2186
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2190
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2194
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2198
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2202
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2208
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2213
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2218
		{
			yyVAL.optVal = nil
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2222
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2227
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2231
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2239
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2243
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2249
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2257
		{
			yyVAL.optVal = nil
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2261
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2265
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2274
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2278
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2282
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2287
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2291
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2296
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2300
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2305
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2309
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2313
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2318
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2322
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2326
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2331
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2339
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2345
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2350
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2354
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2358
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2364
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2368
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2374
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2378
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2384
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2388
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2393
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2397
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2401
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2405
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2409
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2413
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2417
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2421
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2425
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2429
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2433
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2437
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2448
		{
			yyVAL.str = ""
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2452
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2458
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2462
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2468
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2472
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2478
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2482
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2488
		{
			yyVAL.indexPartition = nil
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2492
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2496
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2502
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2506
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2510
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2514
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2518
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2522
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2526
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2530
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2534
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2538
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2542
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2546
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2552
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2556
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2562
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2567
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2573
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2577
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2583
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2588
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2592
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2602
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2607
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2614
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 413:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2621
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 414:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2628
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 415:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2637
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 416:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2648
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2659
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2663
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2667
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2671
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 421:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2677
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 422:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2687
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 423:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2698
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 424:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2709
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 425:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2720
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2729
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2738
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2742
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2746
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2752
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2756
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2760
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2764
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2768
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2772
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2778
		{
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2779
		{
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2783
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2787
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2792
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2799
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2803
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2810
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2814
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2820
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2824
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2829
		{
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2830
		{
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2834
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2838
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2842
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2848
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2856
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2861
		{
			setAllowComments(yylex, true)
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2865
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2871
		{
			yyVAL.bytes2 = nil
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2875
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2881
		{
			yyVAL.str = UnionStr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2885
		{
			yyVAL.str = UnionAllStr
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2889
		{
			yyVAL.str = UnionDistinctStr
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2894
		{
			yyVAL.str = ""
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.str = SQLCacheStr
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2907
		{
			yyVAL.str = ""
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2911
		{
			yyVAL.str = DistinctStr
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2916
		{
			yyVAL.str = ""
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2920
		{
			yyVAL.str = StraightJoinHint
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2925
		{
			yyVAL.selectExprs = nil
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2929
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2935
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2939
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2945
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2949
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2953
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2962
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2966
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2970
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2977
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2982
		{
			yyVAL.overExpr = nil
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2986
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2994
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 487:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2998
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3003
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3007
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3013
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3017
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3027
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3031
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3035
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3040
		{
			yyVAL.strs = []string{}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3044
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3050
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3054
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3060
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3064
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3072
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3076
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3080
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3084
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3088
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3094
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3098
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3104
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3109
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3113
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3119
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3123
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3136
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3140
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3144
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3148
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3154
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3156
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3160
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3162
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3166
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3168
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3171
		{
			yyVAL.empty = struct{}{}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3173
		{
			yyVAL.empty = struct{}{}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3176
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3180
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3184
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3191
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3197
		{
			yyVAL.str = JoinStr
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3201
		{
			yyVAL.str = JoinStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3205
		{
			yyVAL.str = JoinStr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3211
		{
			yyVAL.str = StraightJoinStr
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3217
		{
			yyVAL.str = LeftJoinStr
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3221
		{
			yyVAL.str = LeftJoinStr
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3225
		{
			yyVAL.str = RightJoinStr
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3229
		{
			yyVAL.str = RightJoinStr
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3235
		{
			yyVAL.str = NaturalJoinStr
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3239
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3249
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3253
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3259
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3263
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3268
		{
			yyVAL.indexHints = nil
		}
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3272
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3276
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3280
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3285
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3289
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3294
		{
			yyVAL.columns = nil
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3298
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3304
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3312
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3316
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3320
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3324
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3328
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3332
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3338
		{
			yyVAL.str = ""
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3342
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3348
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3352
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3358
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3362
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3366
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3370
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3374
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3378
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3382
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3386
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3390
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3394
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3398
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 578:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3402
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3406
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3411
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3415
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3419
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3425
		{
			yyVAL.str = IsNullStr
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3429
		{
			yyVAL.str = IsNotNullStr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.str = IsTrueStr
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.str = IsNotTrueStr
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.str = IsFalseStr
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3445
		{
			yyVAL.str = IsNotFalseStr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3451
		{
			yyVAL.str = EqualStr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3455
		{
			yyVAL.str = LessThanStr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3459
		{
			yyVAL.str = GreaterThanStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.str = LessEqualStr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.str = GreaterEqualStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.str = NotEqualStr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3475
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3479
		{
			yyVAL.str = PosixRegexStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3483
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3487
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3491
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3496
		{
			yyVAL.expr = nil
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3500
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3506
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3510
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3514
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3520
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3526
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3530
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3536
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3540
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3544
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3548
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3552
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3556
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3560
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3564
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3568
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3572
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3576
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3580
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3584
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3588
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3592
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3596
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3600
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3604
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3608
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3612
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3616
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3620
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 630:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3624
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3628
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3632
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3636
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3644
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3658
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3662
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3666
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3674
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3682
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3690
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3694
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 647:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3708
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3712
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3716
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3720
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 651:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3724
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3728
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3738
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3742
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 655:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3746
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 656:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3751
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 657:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3755
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 658:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3759
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 659:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3763
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 660:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 661:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 662:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3775
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 663:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3779
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 664:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3783
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 665:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 666:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3791
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 667:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3795
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 668:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3799
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 669:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3803
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 670:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3807
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3811
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3816
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3820
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3824
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3828
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3839
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3843
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3847
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3851
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3855
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3860
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3865
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3870
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3875
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3879
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3893
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 689:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3897
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3901
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3905
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3911
		{
			yyVAL.str = ""
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3915
		{
			yyVAL.str = BooleanModeStr
		}
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 695:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3927
		{
			yyVAL.str = QueryExpansionStr
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3933
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3943
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3947
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3951
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3955
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3963
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3969
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3973
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3977
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3981
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3989
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3993
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3997
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4001
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4005
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4009
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4013
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4017
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4021
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4025
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4029
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4033
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4037
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4045
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4049
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4053
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4069
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4075
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4079
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4083
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4087
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4091
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4095
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4099
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4103
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.expr = nil
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4112
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4117
		{
			yyVAL.str = string("")
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4121
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4127
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4131
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4137
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4144
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4147
		{
			yyVAL.expr = nil
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4151
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4157
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4161
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4165
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4171
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4186
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4191
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4195
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4199
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4203
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4207
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.expr = &NullVal{}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4221
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4225
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4230
		{
			yyVAL.exprs = nil
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4234
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4239
		{
			yyVAL.expr = nil
		}
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4243
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4249
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4253
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4259
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4264
		{
			yyVAL.orderBy = nil
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4268
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4274
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4278
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4284
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4289
		{
			yyVAL.str = AscScr
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4293
		{
			yyVAL.str = AscScr
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4297
		{
			yyVAL.str = DescScr
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4302
		{
			yyVAL.limit = nil
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4306
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4310
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 784:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4314
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4319
		{
			yyVAL.str = ""
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4323
		{
			yyVAL.str = ForUpdateStr
		}
	case 787:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4327
		{
			yyVAL.str = ShareModeStr
		}
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4340
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4344
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4348
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 791:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4353
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 792:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4357
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 793:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4361
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4368
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4372
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4378
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4382
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4386
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4391
		{
			yyVAL.updateExprs = nil
		}
	case 800:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4395
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4401
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4405
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4411
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4415
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4421
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4427
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4437
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4441
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4447
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4453
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4457
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4463
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4467
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4471
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 815:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4476
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4480
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4486
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4499
		{
			yyVAL.bytes = []byte("charset")
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4506
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4510
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4514
		{
			yyVAL.expr = &Default{}
		}
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4519
		{
			yyVAL.empty = struct{}{}
		}
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4521
		{
			yyVAL.empty = struct{}{}
		}
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4524
		{
			yyVAL.str = ""
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4526
		{
			yyVAL.str = IgnoreStr
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4530
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4537
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4541
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4545
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4551
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4556
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4563
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4569
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4573
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4577
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4583
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4587
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4591
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4597
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4601
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 846:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4608
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4615
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4619
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4626
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4632
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4636
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4810
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4819
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
