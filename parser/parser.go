// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const VINDEX = 57489
const VINDEXES = 57490
const STATUS = 57491
const VARIABLES = 57492
const RESTRICT = 57493
const CASCADE = 57494
const NO = 57495
const ACTION = 57496
const PERMISSIVE = 57497
const RESTRICTIVE = 57498
const PUBLIC = 57499
const CURRENT_USER = 57500
const SESSION_USER = 57501
const PAD_INDEX = 57502
const FILLFACTOR = 57503
const IGNORE_DUP_KEY = 57504
const STATISTICS_NORECOMPUTE = 57505
const STATISTICS_INCREMENTAL = 57506
const ALLOW_ROW_LOCKS = 57507
const ALLOW_PAGE_LOCKS = 57508
const BEFORE = 57509
const AFTER = 57510
const EACH = 57511
const ROW = 57512
const SCROLL = 57513
const CURSOR = 57514
const OPEN = 57515
const CLOSE = 57516
const FETCH = 57517
const PRIOR = 57518
const FIRST = 57519
const LAST = 57520
const DEALLOCATE = 57521
const INSTEAD = 57522
const OF = 57523
const DEFERRABLE = 57524
const INITIALLY = 57525
const IMMEDIATE = 57526
const DEFERRED = 57527
const CONCURRENTLY = 57528
const SQL = 57529
const SECURITY = 57530
const BEGIN = 57531
const START = 57532
const TRANSACTION = 57533
const COMMIT = 57534
const ROLLBACK = 57535
const BIT = 57536
const TINYINT = 57537
const SMALLINT = 57538
const SMALLSERIAL = 57539
const MEDIUMINT = 57540
const INT = 57541
const INTEGER = 57542
const SERIAL = 57543
const BIGINT = 57544
const BIGSERIAL = 57545
const INTNUM = 57546
const REAL = 57547
const DOUBLE = 57548
const PRECISION = 57549
const FLOAT_TYPE = 57550
const DECIMAL = 57551
const NUMERIC = 57552
const SMALLMONEY = 57553
const MONEY = 57554
const TIME = 57555
const TIMESTAMP = 57556
const DATETIME = 57557
const YEAR = 57558
const DATETIMEOFFSET = 57559
const DATETIME2 = 57560
const SMALLDATETIME = 57561
const CHAR = 57562
const VARCHAR = 57563
const VARYING = 57564
const BOOL = 57565
const CHARACTER = 57566
const VARBINARY = 57567
const NCHAR = 57568
const NVARCHAR = 57569
const NTEXT = 57570
const UUID = 57571
const TEXT = 57572
const TINYTEXT = 57573
const MEDIUMTEXT = 57574
const LONGTEXT = 57575
const CITEXT = 57576
const BLOB = 57577
const TINYBLOB = 57578
const MEDIUMBLOB = 57579
const LONGBLOB = 57580
const JSON = 57581
const JSONB = 57582
const ENUM = 57583
const GEOMETRY = 57584
const POINT = 57585
const LINESTRING = 57586
const POLYGON = 57587
const GEOMETRYCOLLECTION = 57588
const MULTIPOINT = 57589
const MULTILINESTRING = 57590
const MULTIPOLYGON = 57591
const VARIADIC = 57592
const ARRAY = 57593
const NOW = 57594
const GETDATE = 57595
const BPCHAR = 57596
const TEXT_PATTERN_OPS = 57597
const NULLX = 57598
const AUTO_INCREMENT = 57599
const APPROXNUM = 57600
const SIGNED = 57601
const UNSIGNED = 57602
const ZEROFILL = 57603
const ZONE = 57604
const AUTOINCREMENT = 57605
const DATABASES = 57606
const TABLES = 57607
const VITESS_KEYSPACES = 57608
const VITESS_SHARDS = 57609
const VITESS_TABLETS = 57610
const VSCHEMA_TABLES = 57611
const EXTENDED = 57612
const FULL = 57613
const PROCESSLIST = 57614
const NAMES = 57615
const CHARSET = 57616
const GLOBAL = 57617
const SESSION = 57618
const ISOLATION = 57619
const LEVEL = 57620
const READ = 57621
const WRITE = 57622
const ONLY = 57623
const REPEATABLE = 57624
const COMMITTED = 57625
const UNCOMMITTED = 57626
const SERIALIZABLE = 57627
const NEW = 57628
const CONCAT_NULL_YIELDS_NULL = 57629
const CURSOR_CLOSE_ON_COMMIT = 57630
const QUOTED_IDENTIFIER = 57631
const ARITHABORT = 57632
const FMTONLY = 57633
const NOCOUNT = 57634
const NOEXEC = 57635
const NUMERIC_ROUNDABORT = 57636
const ANSI_DEFAULTS = 57637
const ANSI_NULL_DFLT_OFF = 57638
const ANSI_NULL_DFLT_ON = 57639
const ANSI_NULLS = 57640
const ANSI_PADDING = 57641
const ANSI_WARNINGS = 57642
const FORCEPLAN = 57643
const SHOWPLAN_ALL = 57644
const SHOWPLAN_TEXT = 57645
const SHOWPLAN_XML = 57646
const IMPLICIT_TRANSACTIONS = 57647
const REMOTE_PROC_TRANSACTIONS = 57648
const XACT_ABORT = 57649
const CURRENT_TIMESTAMP = 57650
const DATABASE = 57651
const CURRENT_DATE = 57652
const CURRENT_TIME = 57653
const LOCALTIME = 57654
const LOCALTIMESTAMP = 57655
const UTC_DATE = 57656
const UTC_TIME = 57657
const UTC_TIMESTAMP = 57658
const REPLACE = 57659
const CONVERT = 57660
const CAST = 57661
const SUBSTR = 57662
const SUBSTRING = 57663
const GROUP_CONCAT = 57664
const SEPARATOR = 57665
const INHERIT = 57666
const LEAD = 57667
const LAG = 57668
const MATCH = 57669
const AGAINST = 57670
const BOOLEAN = 57671
const LANGUAGE = 57672
const WITH = 57673
const WITHOUT = 57674
const PARSER = 57675
const QUERY = 57676
const EXPANSION = 57677
const UNUSED = 57678
const VIRTUAL = 57679
const STORED = 57680
const GENERATED = 57681
const ALWAYS = 57682
const IDENTITY = 57683
const SEQUENCE = 57684
const INCREMENT = 57685
const MINVALUE = 57686
const CACHE = 57687
const CYCLE = 57688
const OWNED = 57689
const NONE = 57690
const CLUSTERED = 57691
const NONCLUSTERED = 57692
const REPLICATION = 57693
const COLUMNSTORE = 57694
const INCLUDE = 57695
const HOLDLOCK = 57696
const NOLOCK = 57697
const NOWAIT = 57698
const PAGLOCK = 57699
const ROWLOCK = 57700
const TABLELOCK = 57701
const DEFINER = 57702
const INVOKER = 57703
const TYPECAST = 57704
const CHECK = 57705
const OVER = 57706

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 26,
	-2, 4,
	-1, 29,
	130, 408,
	-2, 162,
	-1, 35,
	166, 516,
	167, 516,
	-2, 506,
	-1, 281,
	119, 904,
	-2, 900,
	-1, 282,
	119, 905,
	-2, 901,
	-1, 283,
	119, 906,
	-2, 250,
	-1, 325,
	268, 915,
	-2, 795,
	-1, 359,
	86, 1156,
	-2, 86,
	-1, 360,
	86, 1106,
	-2, 87,
	-1, 366,
	86, 1085,
	-2, 873,
	-1, 368,
	86, 1130,
	-2, 875,
	-1, 629,
	268, 915,
	-2, 544,
	-1, 679,
	268, 915,
	-2, 544,
	-1, 709,
	55, 40,
	57, 40,
	-2, 42,
	-1, 741,
	116, 1080,
	251, 1080,
	257, 1080,
	-2, 287,
	-1, 742,
	116, 1081,
	251, 1081,
	257, 1081,
	-2, 288,
	-1, 743,
	251, 1083,
	257, 1083,
	-2, 322,
	-1, 744,
	251, 1084,
	257, 1084,
	-2, 322,
	-1, 745,
	251, 1185,
	257, 1185,
	-2, 329,
	-1, 746,
	251, 1131,
	257, 1131,
	-2, 322,
	-1, 747,
	251, 1136,
	257, 1136,
	-2, 329,
	-1, 748,
	116, 1134,
	251, 1134,
	257, 1134,
	-2, 294,
	-1, 750,
	116, 1184,
	251, 1184,
	257, 1184,
	-2, 329,
	-1, 751,
	251, 1170,
	257, 1170,
	-2, 342,
	-1, 752,
	251, 1176,
	257, 1176,
	-2, 342,
	-1, 753,
	251, 1124,
	257, 1124,
	-2, 342,
	-1, 754,
	251, 1120,
	257, 1120,
	-2, 342,
	-1, 756,
	116, 1079,
	251, 1079,
	257, 1079,
	-2, 303,
	-1, 757,
	116, 1174,
	251, 1174,
	257, 1174,
	-2, 304,
	-1, 758,
	116, 1122,
	251, 1122,
	257, 1122,
	-2, 305,
	-1, 759,
	116, 1119,
	251, 1119,
	257, 1119,
	-2, 306,
	-1, 760,
	116, 1111,
	251, 1111,
	257, 1111,
	-2, 307,
	-1, 762,
	116, 1183,
	251, 1183,
	257, 1183,
	-2, 309,
	-1, 765,
	116, 1092,
	251, 1092,
	257, 1092,
	-2, 279,
	-1, 766,
	116, 1172,
	251, 1172,
	257, 1172,
	-2, 322,
	-1, 767,
	116, 1173,
	251, 1173,
	257, 1173,
	-2, 322,
	-1, 768,
	116, 1093,
	251, 1093,
	257, 1093,
	-2, 322,
	-1, 769,
	116, 1094,
	251, 1094,
	257, 1094,
	-2, 322,
	-1, 770,
	116, 1095,
	251, 1095,
	257, 1095,
	-2, 322,
	-1, 771,
	116, 1163,
	251, 1163,
	257, 1163,
	-2, 285,
	-1, 772,
	116, 1197,
	251, 1197,
	257, 1197,
	-2, 286,
	-1, 773,
	116, 1103,
	251, 1103,
	257, 1103,
	-2, 312,
	-1, 774,
	116, 1140,
	251, 1140,
	257, 1140,
	-2, 313,
	-1, 775,
	116, 1118,
	251, 1118,
	257, 1118,
	-2, 314,
	-1, 776,
	116, 1141,
	251, 1141,
	257, 1141,
	-2, 315,
	-1, 777,
	116, 1104,
	251, 1104,
	257, 1104,
	-2, 316,
	-1, 778,
	116, 1128,
	251, 1128,
	257, 1128,
	-2, 317,
	-1, 779,
	116, 1127,
	251, 1127,
	257, 1127,
	-2, 318,
	-1, 780,
	116, 1129,
	251, 1129,
	257, 1129,
	-2, 319,
	-1, 781,
	116, 1078,
	251, 1078,
	257, 1078,
	-2, 261,
	-1, 782,
	116, 1175,
	251, 1175,
	257, 1175,
	-2, 262,
	-1, 783,
	116, 1164,
	251, 1164,
	257, 1164,
	-2, 263,
	-1, 784,
	116, 1166,
	251, 1166,
	257, 1166,
	-2, 264,
	-1, 785,
	116, 1123,
	251, 1123,
	257, 1123,
	-2, 265,
	-1, 786,
	116, 1108,
	251, 1108,
	257, 1108,
	-2, 266,
	-1, 787,
	116, 1109,
	251, 1109,
	257, 1109,
	-2, 267,
	-1, 788,
	116, 1157,
	251, 1157,
	257, 1157,
	-2, 268,
	-1, 789,
	116, 1076,
	251, 1076,
	257, 1076,
	-2, 269,
	-1, 790,
	116, 1077,
	251, 1077,
	257, 1077,
	-2, 270,
	-1, 791,
	116, 1148,
	251, 1148,
	257, 1148,
	-2, 324,
	-1, 792,
	116, 1097,
	251, 1097,
	257, 1097,
	-2, 324,
	-1, 793,
	116, 1101,
	251, 1101,
	257, 1101,
	-2, 324,
	-1, 794,
	116, 1096,
	251, 1096,
	257, 1096,
	-2, 326,
	-1, 795,
	116, 1135,
	251, 1135,
	257, 1135,
	-2, 326,
	-1, 796,
	116, 1126,
	251, 1126,
	257, 1126,
	-2, 277,
	-1, 797,
	116, 1165,
	251, 1165,
	257, 1165,
	-2, 278,
	-1, 874,
	119, 908,
	-2, 903,
	-1, 918,
	116, 342,
	268, 342,
	383, 342,
	-2, 255,
	-1, 919,
	268, 307,
	383, 307,
	-2, 256,
	-1, 920,
	268, 308,
	383, 308,
	-2, 257,
	-1, 943,
	268, 915,
	-2, 322,
	-1, 944,
	57, 322,
	59, 322,
	241, 322,
	-2, 1083,
	-1, 945,
	57, 757,
	-2, 1092,
	-1, 946,
	57, 322,
	-2, 1093,
	-1, 947,
	57, 326,
	-2, 1096,
	-1, 948,
	57, 760,
	-2, 1111,
	-1, 950,
	57, 322,
	-2, 1131,
	-1, 951,
	57, 763,
	-2, 1162,
	-1, 952,
	57, 322,
	-2, 1172,
	-1, 953,
	57, 766,
	-2, 1181,
	-1, 954,
	57, 768,
	-2, 1076,
	-1, 955,
	57, 769,
	-2, 1078,
	-1, 956,
	57, 770,
	-2, 1108,
	-1, 957,
	57, 771,
	-2, 1126,
	-1, 958,
	57, 326,
	-2, 1135,
	-1, 959,
	57, 773,
	-2, 1164,
	-1, 960,
	57, 774,
	-2, 1165,
	-1, 961,
	57, 775,
	-2, 1175,
	-1, 962,
	57, 776,
	-2, 1101,
	-1, 963,
	57, 777,
	-2, 1148,
	-1, 964,
	57, 322,
	-2, 1094,
	-1, 965,
	57, 322,
	-2, 1095,
	-1, 966,
	57, 780,
	-2, 1163,
	-1, 967,
	57, 781,
	-2, 1170,
	-1, 968,
	57, 322,
	-2, 1185,
	-1, 969,
	57, 784,
	-2, 1134,
	-1, 970,
	57, 322,
	-2, 1136,
	-1, 971,
	57, 322,
	-2, 1184,
	-1, 1047,
	142, 418,
	-2, 1090,
	-1, 1173,
	268, 915,
	-2, 544,
	-1, 1183,
	116, 322,
	268, 322,
	383, 322,
	-2, 251,
	-1, 1197,
	5, 27,
	-2, 670,
	-1, 1240,
	5, 26,
	-2, 844,
	-1, 1289,
	59, 383,
	-2, 380,
	-1, 1307,
	119, 906,
	-2, 250,
	-1, 1573,
	5, 26,
	-2, 95,
	-1, 1575,
	5, 26,
	-2, 97,
	-1, 1628,
	5, 27,
	-2, 845,
	-1, 1701,
	5, 26,
	-2, 96,
	-1, 1736,
	5, 26,
	-2, 847,
	-1, 1819,
	58, 109,
	-2, 181,
	-1, 1822,
	58, 109,
	-2, 181,
	-1, 1895,
	189, 53,
	-2, 181,
	-1, 1935,
	58, 109,
	-2, 180,
	-1, 1960,
	5, 27,
	-2, 848,
	-1, 2120,
	5, 26,
	-2, 49,
}

const yyPrivate = 57344

const yyLast = 21379

var yyAct = [...]int16{
	370, 1792, 732, 1796, 1751, 1953, 1795, 1568, 1121, 1816,
	1898, 1850, 1945, 1896, 633, 632, 3, 807, 560, 1873,
	995, 1634, 1256, 1748, 277, 1788, 315, 1638, 287, 731,
	1567, 1661, 1477, 53, 95, 298, 265, 95, 614, 857,
	1520, 1278, 1281, 1013, 1508, 1478, 544, 1033, 1651, 703,
	1360, 1474, 1189, 701, 1107, 286, 1304, 1042, 282, 258,
	1306, 95, 95, 264, 1129, 1806, 21, 1130, 279, 1312,
	996, 1243, 1036, 1057, 1261, 95, 932, 942, 899, 1178,
	928, 813, 1102, 719, 95, 1184, 95, 1248, 1343, 1073,
	989, 290, 95, 1967, 1934, 1052, 981, 876, 566, 1823,
	1083, 718, 259, 260, 261, 262, 510, 358, 992, 361,
	705, 690, 849, 21, 344, 365, 346, 285, 1089, 1166,
	739, 269, 1325, 345, 734, 733, 1075, 575, 657, 1423,
	927, 2101, 52, 1515, 273, 1428, 2069, 46, 599, 48,
	25, 26, 1071, 1538, 46, 615, 48, 25, 26, 1789,
	589, 1807, 349, 599, 1118, 1119, 518, 1667, 1807, 1521,
	1522, 1523, 1808, 1524, 500, 1987, 519, 520, 2059, 1808,
	1639, 1640, 1641, 1642, 1643, 1644, 2132, 583, 512, 586,
	1302, 1985, 1986, 517, 353, 601, 602, 603, 604, 605,
	606, 607, 2040, 584, 585, 582, 608, 609, 610, 611,
	588, 587, 597, 598, 590, 591, 592, 593, 594, 595,
	596, 589, 1675, 355, 599, 1752, 2138, 2126, 1958, 1079,
	1855, 1039, 1854, 2107, 1185, 1186, 2113, 1122, 46, 1754,
	48, 25, 26, 2004, 2052, 1257, 1181, 95, 2039, 1957,
	1469, 1074, 1807, 592, 593, 594, 595, 596, 589, 1982,
	1622, 599, 521, 1808, 1528, 46, 1026, 48, 25, 26,
	1501, 1502, 1500, 1991, 1027, 1028, 1814, 282, 282, 1807,
	552, 1327, 1269, 1814, 846, 1268, 1813, 1993, 1270, 282,
	1808, 847, 720, 1813, 721, 1607, 569, 1606, 1605, 1204,
	1079, 1077, 282, 282, 282, 282, 282, 282, 282, 628,
	1090, 986, 568, 1753, 1421, 1420, 1419, 2104, 1103, 1317,
	1461, 1319, 1318, 1079, 1988, 1079, 257, 282, 1211, 1209,
	1710, 1809, 1810, 1812, 2130, 2027, 282, 1811, 1809, 1810,
	1812, 805, 505, 2109, 1811, 1135, 21, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 95, 2124, 2123, 2110, 2074, 1890,
	1767, 95, 95, 95, 2082, 1794, 2125, 1814, 2111, 1874,
	620, 621, 622, 623, 624, 625, 626, 1813, 90, 86,
	87, 1587, 88, 2058, 1946, 2060, 616, 1516, 1401, 1522,
	1523, 993, 21, 1053, 1814, 815, 1580, 1581, 1588, 548,
	549, 1288, 1947, 1733, 1813, 1669, 1597, 1668, 1514, 2129,
	1054, 1296, 600, 361, 507, 1924, 2091, 1295, 1283, 1716,
	1829, 84, 1809, 1810, 1812, 511, 21, 600, 1811, 1841,
	814, 526, 1014, 1016, 588, 587, 597, 598, 590, 591,
	592, 593, 594, 595, 596, 589, 1618, 559, 599, 1809,
	1810, 1812, 349, 1704, 825, 1811, 597, 598, 590, 591,
	592, 593, 594, 595, 596, 589, 1422, 662, 599, 804,
	54, 663, 1289, 508, 1260, 49, 1259, 1989, 1990, 1992,
	1994, 1995, 49, 1402, 1258, 2081, 1104, 504, 600, 1054,
	588, 587, 597, 598, 590, 591, 592, 593, 594, 595,
	596, 589, 1090, 1526, 599, 559, 1183, 83, 1082, 84,
	1398, 503, 304, 559, 1015, 1659, 1659, 1711, 1750, 522,
	516, 1185, 1186, 2105, 1676, 600, 1855, 236, 95, 2051,
	2105, 1301, 85, 95, 618, 619, 95, 2117, 815, 95,
	537, 1846, 798, 95, 1956, 1038, 1631, 710, 588, 587,
	597, 598, 590, 591, 592, 593, 594, 595, 596, 589,
	816, 817, 599, 1546, 95, 1411, 49, 1286, 1224, 1664,
	1925, 1926, 1927, 818, 1556, 364, 89, 501, 1172, 855,
	716, 95, 509, 282, 282, 513, 514, 723, 631, 579,
	282, 532, 282, 49, 648, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	539, 1159, 1725, 541, 2105, 860, 852, 1399, 574, 877,
	1397, 572, 803, 1866, 2121, 806, 1035, 1034, 921, 1865,
	2119, 1557, 1220, 820, 1400, 1864, 873, 574, 1053, 1406,
	282, 2106, 538, 540, 1863, 1862, 282, 282, 282, 282,
	282, 282, 282, 282, 931, 1054, 1861, 282, 834, 1860,
	875, 938, 832, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 1219, 973,
	975, 1842, 1858, 1577, 878, 983, 2122, 1271, 934, 282,
	282, 282, 282, 21, 1246, 95, 1160, 282, 95, 95,
	95, 95, 95, 816, 817, 874, 1662, 1663, 1665, 872,
	95, 21, 600, 95, 870, 722, 818, 95, 1471, 974,
	982, 1405, 95, 95, 1280, 997, 559, 982, 938, 1229,
	930, 905, 600, 282, 810, 663, 902, 939, 940, 904,
	1769, 618, 619, 978, 573, 572, 922, 925, 46, 1766,
	48, 25, 26, 364, 364, 364, 364, 2094, 364, 682,
	1619, 574, 1807, 2093, 1280, 364, 979, 1292, 600, 883,
	988, 1686, 361, 1808, 1968, 1021, 1328, 2018, 21, 987,
	1032, 990, 991, 881, 882, 880, 858, 859, 577, 349,
	349, 349, 349, 349, 1969, 590, 591, 592, 593, 594,
	595, 596, 589, 558, 349, 599, 1765, 536, 1169, 1170,
	1171, 95, 2057, 349, 95, 999, 1000, 95, 1002, 1291,
	1010, 998, 2056, 95, 1001, 95, 600, 1018, 1019, 1024,
	1280, 95, 1136, 1023, 95, 2055, 95, 573, 572, 95,
	1040, 1970, 588, 587, 597, 598, 590, 591, 592, 593,
	594, 595, 596, 589, 574, 1616, 599, 1201, 1086, 1200,
	1109, 1088, 1966, 1779, 282, 282, 282, 282, 525, 364,
	1685, 573, 572, 573, 572, 1328, 725, 1814, 573, 572,
	2026, 1091, 1092, 1093, 1094, 1105, 1106, 1813, 574, 1168,
	574, 1378, 282, 282, 282, 574, 1876, 1218, 1279, 588,
	587, 597, 598, 590, 591, 592, 593, 594, 595, 596,
	589, 1694, 873, 599, 573, 572, 2053, 877, 1693, 1968,
	1533, 1116, 1280, 1328, 650, 651, 652, 653, 654, 655,
	656, 574, 1809, 1810, 1812, 573, 572, 50, 1811, 1969,
	282, 1334, 1473, 1350, 854, 1333, 1348, 282, 879, 1324,
	573, 572, 574, 900, 282, 901, 1859, 528, 529, 530,
	1175, 1176, 1177, 2054, 1732, 1167, 50, 574, 1379, 1375,
	1370, 630, 1380, 1377, 1376, 1109, 1691, 1190, 1374, 1599,
	1344, 874, 878, 853, 1298, 1752, 630, 1856, 1174, 1381,
	282, 1888, 2137, 282, 1519, 95, 1373, 82, 1518, 1754,
	1105, 1106, 573, 572, 866, 868, 869, 1656, 2112, 1740,
	2066, 867, 1207, 54, 738, 738, 799, 802, 1240, 574,
	1517, 1187, 620, 1212, 1656, 2047, 1888, 2046, 2043, 2042,
	1192, 95, 2032, 559, 1656, 2029, 364, 1656, 2028, 1656,
	1998, 1740, 1943, 1740, 1791, 1740, 1776, 364, 364, 364,
	364, 364, 364, 364, 364, 1290, 559, 343, 1740, 559,
	559, 364, 364, 1743, 1742, 1740, 1741, 1997, 21, 600,
	1656, 1655, 1933, 1753, 1497, 559, 49, 1630, 559, 95,
	1226, 1272, 282, 1124, 1264, 1563, 1562, 1228, 913, 577,
	1559, 1560, 364, 1274, 1559, 1558, 1193, 559, 1885, 1253,
	831, 1263, 830, 1265, 936, 559, 1879, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 811, 46, 713, 1316, 1297, 1266,
	600, 95, 349, 809, 1892, 95, 534, 95, 738, 687,
	559, 924, 924, 81, 730, 729, 1878, 1314, 527, 926,
	1238, 1889, 1785, 1888, 364, 1239, 1784, 1337, 1783, 1339,
	1340, 1341, 1342, 1780, 976, 1284, 1285, 1287, 1712, 976,
	714, 1698, 712, 54, 1687, 50, 46, 46, 1682, 1678,
	95, 95, 282, 1475, 1553, 1552, 1244, 600, 1602, 1361,
	1547, 1020, 1245, 712, 282, 71, 76, 936, 68, 1244,
	282, 282, 1365, 1346, 1347, 1345, 1735, 1349, 1223, 976,
	1245, 72, 2037, 79, 282, 1193, 2013, 1371, 1368, 1329,
	1330, 686, 1332, 282, 1335, 1336, 50, 50, 50, 73,
	74, 69, 1364, 1626, 1193, 1365, 1366, 687, 364, 1413,
	282, 282, 282, 282, 282, 282, 364, 687, 687, 1424,
	282, 1656, 1677, 501, 1222, 1244, 1576, 1565, 1564, 282,
	1561, 1275, 1025, 1193, 1202, 282, 282, 282, 1417, 1418,
	282, 715, 1409, 282, 1414, 1415, 856, 1481, 2127, 1476,
	1470, 2034, 1884, 1870, 1869, 1826, 1479, 997, 1853, 1825,
	1426, 1468, 282, 997, 1787, 1786, 1778, 1485, 1429, 1717,
	1458, 1714, 1699, 1545, 1079, 1507, 1108, 1572, 1463, 1464,
	1465, 1466, 1467, 1544, 1542, 351, 1462, 1498, 1530, 1492,
	1490, 1353, 1103, 1303, 1113, 1277, 282, 21, 1249, 1250,
	1110, 1111, 364, 1096, 364, 1486, 1095, 1484, 1084, 64,
	1505, 808, 738, 1367, 1460, 1851, 1875, 1566, 1475, 92,
	1354, 1252, 364, 1114, 828, 812, 1499, 553, 1007, 1005,
	874, 1316, 1162, 1008, 1006, 1255, 1537, 1254, 1506, 1009,
	1539, 696, 697, 1004, 282, 95, 1003, 354, 364, 556,
	557, 1314, 1534, 861, 1527, 95, 1536, 1525, 2088, 2038,
	515, 1410, 1573, 70, 1575, 1163, 647, 1548, 1549, 523,
	1551, 524, 2085, 1554, 1555, 1276, 561, 531, 1338, 1569,
	728, 692, 695, 696, 697, 693, 95, 694, 698, 562,
	535, 75, 1532, 1624, 2076, 858, 859, 282, 1718, 1126,
	827, 1574, 1531, 77, 78, 1363, 80, 282, 1615, 1358,
	1356, 819, 21, 700, 21, 850, 935, 937, 62, 271,
	272, 1584, 1590, 1583, 2102, 1579, 577, 1513, 984, 266,
	2061, 1950, 1592, 985, 1706, 1835, 1707, 1708, 1709, 267,
	1550, 54, 57, 59, 60, 61, 1595, 1949, 1413, 1705,
	1598, 692, 695, 696, 697, 693, 1831, 694, 698, 1245,
	2023, 1249, 1250, 2022, 282, 263, 1608, 1131, 1132, 1133,
	1868, 282, 2021, 2020, 570, 1604, 1984, 1983, 1867, 1207,
	1512, 1511, 1843, 1294, 851, 1012, 56, 95, 58, 1212,
	588, 587, 597, 598, 590, 591, 592, 593, 594, 595,
	596, 589, 1801, 8, 599, 1645, 1646, 1647, 1798, 7,
	1262, 1372, 1633, 1799, 6, 1797, 5, 1586, 1625, 1037,
	282, 1221, 533, 1713, 711, 1650, 51, 1, 1897, 364,
	66, 921, 65, 1952, 1666, 1723, 1648, 1427, 506, 1117,
	1282, 1652, 1674, 1274, 1188, 627, 302, 2108, 2080, 288,
	1637, 1293, 1671, 2014, 1894, 282, 2007, 95, 1672, 1923,
	1323, 1059, 1877, 1300, 1321, 588, 587, 597, 598, 590,
	591, 592, 593, 594, 595, 596, 589, 67, 2003, 599,
	1701, 1314, 1679, 1688, 1700, 1695, 1887, 1578, 1689, 1362,
	1569, 1382, 1123, 95, 316, 47, 1359, 1142, 1944, 1963,
	1749, 1658, 1045, 1273, 1352, 499, 282, 282, 63, 282,
	282, 282, 1857, 1361, 1652, 364, 1703, 1702, 587, 597,
	598, 590, 591, 592, 593, 594, 595, 596, 589, 685,
	21, 599, 1046, 1724, 1044, 1736, 1043, 1041, 709, 1326,
	1076, 737, 47, 1479, 735, 736, 1721, 740, 244, 364,
	270, 356, 699, 724, 1369, 350, 571, 1396, 1395, 1138,
	1404, 282, 1734, 1720, 845, 364, 282, 1690, 1158, 1692,
	551, 246, 612, 1267, 1726, 1727, 363, 1728, 1729, 1730,
	1482, 565, 1747, 1948, 349, 21, 1830, 1763, 1227, 644,
	282, 1762, 980, 1764, 289, 865, 301, 1182, 1768, 300,
	1772, 1770, 299, 1237, 581, 348, 1817, 683, 691, 1537,
	689, 688, 1191, 1251, 1194, 1195, 1247, 364, 347, 1601,
	1790, 1621, 1197, 1198, 1199, 1569, 1840, 555, 1781, 1827,
	1782, 976, 1161, 24, 1483, 1262, 55, 976, 342, 19,
	18, 17, 20, 1845, 1852, 16, 15, 1833, 14, 28,
	1815, 1805, 1479, 13, 12, 11, 10, 9, 1844, 1804,
	1849, 1848, 1225, 1803, 1802, 282, 364, 1231, 600, 1800,
	1509, 1233, 1234, 4, 1235, 1236, 268, 282, 22, 2,
	0, 0, 0, 0, 0, 1882, 0, 0, 0, 1891,
	0, 0, 0, 21, 0, 0, 0, 0, 1321, 1818,
	0, 1880, 0, 821, 282, 282, 0, 1881, 822, 0,
	1932, 826, 1569, 0, 829, 0, 0, 0, 0, 0,
	0, 0, 0, 1941, 1942, 0, 282, 0, 1928, 1931,
	1893, 0, 0, 0, 282, 543, 543, 543, 543, 848,
	543, 0, 798, 600, 0, 0, 1570, 543, 0, 1964,
	1883, 0, 0, 1886, 1959, 0, 862, 0, 0, 0,
	1585, 1978, 997, 1589, 0, 47, 1591, 0, 1979, 0,
	0, 0, 1929, 0, 0, 613, 1593, 0, 0, 617,
	282, 1980, 0, 0, 2008, 0, 2010, 0, 2015, 1976,
	1977, 0, 0, 0, 1596, 600, 2000, 1999, 0, 629,
	2002, 2001, 0, 0, 364, 1936, 1937, 1938, 1939, 1940,
	0, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	2012, 646, 2024, 649, 649, 649, 649, 649, 649, 649,
	649, 0, 678, 679, 680, 681, 0, 0, 0, 0,
	282, 282, 1996, 542, 0, 702, 1971, 1972, 1973, 1974,
	1975, 2030, 0, 0, 0, 2036, 0, 0, 588, 587,
	597, 598, 590, 591, 592, 593, 594, 595, 596, 589,
	994, 0, 599, 0, 0, 0, 1425, 0, 0, 0,
	0, 2017, 0, 1635, 0, 0, 1635, 1635, 1635, 0,
	1649, 2048, 0, 0, 0, 0, 0, 364, 1022, 364,
	0, 2065, 0, 2070, 2068, 2049, 2050, 0, 2044, 2045,
	2062, 0, 2064, 0, 0, 0, 0, 2072, 0, 2075,
	1817, 2071, 2077, 1635, 2079, 0, 2078, 0, 282, 2083,
	0, 1683, 2086, 2087, 0, 2084, 0, 0, 2090, 364,
	0, 0, 1078, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 95, 0, 275, 0, 0, 1570, 1696, 2063,
	282, 2092, 0, 2067, 2097, 1635, 2015, 0, 0, 364,
	364, 1891, 1932, 1891, 0, 0, 0, 2098, 0, 1715,
	0, 2099, 95, 0, 0, 0, 1112, 0, 0, 1115,
	1719, 0, 1120, 0, 2116, 0, 0, 0, 1128, 2010,
	1134, 2118, 0, 0, 0, 0, 1137, 0, 2120, 1154,
	0, 1155, 0, 0, 1156, 0, 0, 0, 543, 2133,
	0, 0, 282, 1738, 1739, 0, 0, 2134, 1891, 543,
	543, 543, 543, 543, 543, 543, 543, 0, 1416, 0,
	0, 0, 0, 543, 543, 0, 0, 0, 0, 1509,
	0, 0, 0, 0, 2128, 0, 0, 0, 21, 0,
	0, 1771, 588, 587, 597, 598, 590, 591, 592, 593,
	594, 595, 596, 589, 0, 0, 599, 564, 0, 0,
	0, 0, 0, 0, 0, 545, 546, 547, 0, 550,
	2135, 0, 1570, 0, 1180, 0, 554, 1793, 1603, 0,
	0, 0, 0, 0, 0, 0, 0, 1819, 0, 0,
	1635, 93, 47, 1610, 256, 0, 0, 0, 588, 587,
	597, 598, 590, 591, 592, 593, 594, 595, 596, 589,
	635, 0, 599, 1847, 0, 276, 600, 0, 93, 93,
	0, 0, 1611, 1612, 0, 0, 1613, 1614, 0, 0,
	1617, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 93, 1627, 1628, 1629, 0, 1632, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1570,
	1509, 0, 350, 350, 350, 350, 350, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 702, 0, 1017,
	1895, 0, 1920, 1921, 1922, 0, 350, 0, 0, 0,
	0, 0, 1935, 1819, 1819, 1935, 1819, 1819, 1509, 1509,
	0, 563, 567, 0, 1684, 1071, 1072, 0, 0, 0,
	0, 0, 0, 580, 0, 0, 976, 0, 0, 1961,
	0, 0, 0, 0, 1962, 0, 0, 0, 1965, 0,
	1060, 0, 0, 0, 1299, 0, 0, 0, 0, 0,
	0, 0, 1793, 1509, 0, 1067, 0, 1055, 0, 0,
	0, 634, 0, 0, 1056, 0, 0, 1635, 0, 0,
	645, 2005, 0, 0, 0, 0, 0, 46, 738, 48,
	25, 26, 0, 1722, 0, 0, 1351, 0, 0, 0,
	1355, 1807, 1357, 0, 543, 1731, 543, 0, 0, 0,
	0, 0, 1808, 0, 93, 0, 2019, 0, 0, 0,
	0, 0, 0, 0, 543, 0, 0, 0, 1935, 1744,
	1745, 1746, 1063, 0, 1058, 1068, 0, 0, 0, 2033,
	600, 0, 1065, 1064, 588, 587, 597, 598, 590, 591,
	592, 593, 594, 595, 596, 589, 0, 1775, 599, 0,
	0, 0, 0, 0, 0, 0, 2011, 824, 1173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 836,
	837, 838, 839, 840, 841, 842, 0, 0, 1148, 0,
	0, 0, 843, 844, 0, 1179, 600, 0, 0, 0,
	0, 0, 1147, 0, 0, 0, 2073, 1832, 1834, 0,
	1836, 1837, 1838, 1839, 0, 0, 1814, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 1813, 1509, 93, 707,
	93, 0, 1152, 0, 2089, 1680, 1308, 1309, 1310, 0,
	0, 0, 1146, 0, 1313, 1311, 312, 313, 0, 0,
	46, 0, 48, 25, 26, 0, 0, 1871, 0, 0,
	0, 0, 0, 0, 1807, 0, 738, 658, 0, 2103,
	1061, 1809, 1810, 1812, 0, 1808, 1062, 1811, 46, 0,
	48, 25, 26, 0, 0, 0, 0, 1241, 1242, 0,
	0, 0, 1807, 0, 0, 0, 1143, 1140, 1141, 0,
	1139, 0, 660, 1808, 0, 0, 0, 0, 0, 0,
	364, 0, 0, 0, 0, 350, 0, 1951, 0, 0,
	1793, 0, 0, 0, 1955, 0, 0, 863, 864, 1960,
	1150, 1153, 46, 0, 48, 25, 26, 0, 0, 0,
	1571, 0, 0, 0, 0, 0, 1807, 0, 0, 0,
	1582, 0, 1069, 0, 1070, 0, 1981, 1808, 0, 0,
	0, 0, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 0, 0, 0, 0, 1066, 0, 0, 1814,
	0, 1594, 0, 661, 933, 0, 0, 0, 0, 1813,
	634, 676, 659, 941, 972, 93, 0, 665, 664, 0,
	93, 0, 0, 93, 0, 0, 93, 1814, 0, 0,
	833, 0, 0, 0, 1145, 49, 0, 1813, 0, 0,
	0, 0, 600, 0, 0, 0, 0, 0, 2031, 0,
	0, 93, 0, 0, 1809, 1810, 1812, 0, 0, 0,
	1811, 0, 0, 1681, 1528, 0, 0, 1144, 93, 0,
	2025, 543, 0, 1125, 0, 1127, 0, 833, 0, 0,
	0, 1814, 1809, 1810, 1812, 0, 0, 0, 1811, 0,
	0, 1813, 0, 1157, 0, 0, 0, 1031, 2009, 0,
	0, 0, 0, 0, 0, 0, 1080, 1081, 0, 1085,
	0, 0, 1087, 0, 0, 0, 0, 677, 0, 1317,
	0, 1319, 1318, 0, 0, 0, 0, 276, 1149, 1097,
	1098, 1099, 1100, 1101, 276, 276, 1809, 1810, 1812, 977,
	276, 0, 1811, 0, 977, 0, 1151, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1697, 1493, 1494, 1495, 276, 276, 276, 276,
	0, 0, 93, 0, 977, 93, 93, 93, 93, 93,
	0, 0, 0, 2114, 0, 0, 0, 1011, 49, 0,
	93, 0, 0, 0, 707, 0, 0, 0, 0, 93,
	93, 0, 1529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 1164, 1165,
	1540, 567, 0, 0, 0, 0, 629, 0, 0, 2139,
	2140, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 0, 0, 658, 0, 0, 0, 0, 0,
	0, 47, 0, 47, 0, 0, 0, 1081, 1098, 0,
	49, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 660,
	0, 93, 0, 0, 93, 0, 1203, 1205, 0, 1206,
	93, 1196, 93, 1208, 0, 1210, 0, 0, 93, 0,
	0, 93, 0, 93, 0, 1388, 93, 1213, 1214, 0,
	0, 1215, 0, 1216, 1217, 0, 0, 0, 0, 0,
	0, 0, 0, 1609, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 1230, 0, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 0,
	906, 907, 0, 908, 909, 910, 912, 911, 0, 903,
	661, 0, 0, 0, 1620, 0, 0, 0, 676, 659,
	0, 0, 0, 0, 665, 664, 1389, 0, 0, 0,
	0, 0, 1391, 1384, 1385, 0, 1392, 1387, 1386, 0,
	0, 0, 1394, 1390, 0, 46, 23, 48, 25, 26,
	1403, 0, 0, 1393, 242, 0, 0, 276, 0, 0,
	1383, 1670, 0, 0, 0, 41, 0, 0, 0, 0,
	27, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 36, 0, 0, 0, 50, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 276, 0, 0,
	0, 0, 1232, 0, 0, 629, 0, 0, 0, 47,
	0, 0, 0, 0, 677, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 237, 0, 0,
	0, 0, 0, 239, 0, 0, 0, 350, 93, 0,
	245, 241, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 29, 30, 32, 31, 34, 0, 0, 0, 0,
	0, 1480, 0, 0, 1737, 0, 1331, 0, 0, 0,
	0, 0, 243, 0, 0, 0, 247, 35, 42, 43,
	0, 0, 44, 45, 33, 0, 93, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1774, 0, 0,
	1430, 0, 0, 0, 0, 0, 1540, 0, 0, 0,
	0, 0, 0, 1173, 1472, 0, 0, 0, 93, 0,
	0, 0, 93, 0, 93, 37, 38, 0, 39, 40,
	1487, 1488, 0, 0, 1489, 1432, 0, 1491, 0, 0,
	0, 0, 238, 1828, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1503, 0, 0, 0,
	1480, 0, 47, 0, 0, 0, 0, 1407, 1408, 276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 276, 240, 0, 248, 249, 250, 251, 255, 0,
	1541, 1543, 0, 254, 253, 1441, 1447, 1445, 0, 0,
	1442, 276, 0, 1440, 0, 0, 1449, 2115, 0, 1448,
	1434, 1444, 1446, 1443, 1438, 0, 1433, 0, 1451, 1450,
	1452, 1431, 1454, 0, 0, 0, 1457, 1436, 1456, 1455,
	0, 1453, 833, 0, 0, 0, 0, 0, 0, 0,
	1435, 949, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 977, 49, 0, 0, 0, 0, 0, 0,
	1437, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1600, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1203, 1205, 0, 1206, 0, 0, 1208,
	0, 1210, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1213, 1214, 0, 0, 1215, 0, 1216,
	1217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1623, 0,
	0, 1322, 93, 0, 0, 634, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1657, 1660, 0, 0, 0, 2041, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1673, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1657, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2131, 0, 0, 0, 0, 1773, 0, 0, 0, 0,
	1777, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1322, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1872,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1930,
	0, 0, 0, 0, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1954, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2006, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2035, 634, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 977, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1954, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 485, 474, 0,
	433, 487, 403, 421, 495, 423, 424, 460, 382, 443,
	162, 418, 400, 99, 406, 375, 413, 376, 404, 435,
	123, 401, 0, 476, 446, 137, 232, 233, 493, 140,
	451, 0, 186, 150, 0, 0, 438, 478, 441, 469,
	432, 461, 390, 450, 488, 419, 456, 489, 0, 0,
	0, 369, 0, 1653, 0, 1654, 0, 0, 0, 0,
	0, 112, 0, 455, 483, 415, 498, 0, 459, 374,
	453, 0, 380, 383, 494, 481, 410, 411, 0, 0,
	0, 0, 0, 0, 0, 437, 442, 466, 429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2096,
	0, 407, 0, 449, 0, 0, 0, 387, 381, 0,
	434, 0, 0, 0, 389, 0, 408, 467, 0, 371,
	472, 479, 431, 146, 213, 482, 428, 427, 169, 93,
	115, 0, 192, 127, 420, 138, 464, 496, 486, 439,
	477, 405, 414, 117, 412, 176, 163, 204, 448, 462,
	174, 141, 196, 170, 203, 484, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 379, 372, 409, 470,
	473, 394, 458, 384, 416, 465, 417, 440, 399, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 377, 0, 187, 206,
	223, 224, 378, 398, 480, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	457, 177, 114, 205, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 393, 397, 391,
	392, 444, 445, 490, 491, 492, 468, 388, 0, 395,
	396, 0, 475, 132, 234, 235, 447, 98, 106, 139,
	497, 220, 0, 171, 125, 207, 0, 0, 422, 373,
	426, 0, 0, 0, 0, 0, 0, 0, 385, 386,
	178, 0, 430, 425, 452, 454, 463, 471, 0, 402,
	436, 0, 111, 485, 474, 0, 433, 487, 403, 421,
	495, 423, 424, 460, 382, 443, 162, 418, 400, 99,
	406, 375, 413, 376, 404, 435, 123, 401, 0, 476,
	446, 137, 232, 233, 493, 140, 451, 0, 186, 150,
	0, 0, 438, 478, 441, 469, 432, 461, 390, 450,
	488, 419, 456, 489, 0, 0, 0, 281, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 455,
	483, 415, 498, 0, 459, 374, 453, 0, 380, 383,
	494, 481, 410, 411, 0, 0, 0, 0, 0, 0,
	0, 437, 442, 466, 429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 871, 0, 407, 0, 449,
	0, 0, 0, 387, 381, 0, 434, 0, 0, 0,
	389, 0, 408, 467, 0, 371, 472, 479, 431, 146,
	213, 482, 428, 427, 169, 0, 115, 0, 192, 127,
	420, 138, 464, 496, 486, 439, 477, 405, 414, 117,
	412, 176, 163, 204, 448, 462, 174, 141, 196, 170,
	203, 484, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 379, 372, 409, 470, 473, 394, 458, 384,
	416, 465, 417, 440, 399, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 377, 0, 187, 206, 223, 224, 378, 398,
	480, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 457, 177, 114, 205,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 393, 397, 391, 392, 444, 445, 490,
	491, 492, 468, 388, 0, 395, 396, 0, 475, 132,
	234, 235, 447, 98, 106, 139, 497, 220, 0, 171,
	125, 207, 0, 0, 422, 373, 426, 0, 0, 0,
	0, 0, 0, 0, 385, 386, 178, 0, 430, 425,
	452, 454, 463, 471, 0, 402, 436, 0, 111, 485,
	474, 0, 433, 487, 403, 421, 495, 423, 424, 460,
	382, 443, 162, 418, 400, 99, 406, 375, 413, 376,
	404, 435, 123, 401, 0, 476, 446, 137, 232, 233,
	493, 140, 451, 0, 186, 150, 0, 0, 438, 478,
	441, 469, 432, 461, 390, 450, 488, 419, 456, 489,
	0, 0, 0, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 455, 483, 415, 498, 0,
	459, 374, 453, 0, 380, 383, 494, 481, 410, 411,
	1504, 0, 0, 0, 0, 0, 0, 437, 442, 466,
	429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 407, 0, 449, 0, 0, 0, 387,
	381, 0, 434, 0, 0, 0, 389, 0, 408, 467,
	0, 371, 472, 479, 431, 146, 213, 482, 428, 427,
	169, 0, 115, 0, 192, 127, 420, 138, 464, 496,
	486, 439, 477, 405, 414, 117, 412, 176, 163, 204,
	448, 462, 174, 141, 196, 170, 203, 484, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 379, 372,
	409, 470, 473, 394, 458, 384, 416, 465, 417, 440,
	399, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 377, 0,
	187, 206, 223, 224, 378, 398, 480, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 457, 177, 114, 205, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 393,
	397, 391, 392, 444, 445, 490, 491, 492, 468, 388,
	0, 395, 396, 0, 475, 132, 234, 235, 447, 98,
	106, 139, 497, 220, 0, 171, 125, 207, 0, 0,
	422, 373, 426, 0, 0, 0, 0, 0, 0, 0,
	385, 386, 178, 0, 430, 425, 452, 454, 463, 471,
	0, 402, 436, 0, 111, 485, 474, 0, 433, 487,
	403, 421, 495, 423, 424, 460, 382, 443, 162, 418,
	400, 99, 406, 375, 413, 376, 404, 435, 123, 401,
	0, 476, 446, 137, 232, 233, 493, 140, 451, 0,
	186, 150, 0, 0, 438, 478, 441, 469, 432, 461,
	390, 450, 488, 419, 456, 489, 0, 0, 0, 281,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 455, 483, 415, 498, 0, 459, 374, 453, 0,
	380, 383, 494, 481, 410, 411, 0, 0, 0, 0,
	0, 0, 0, 437, 442, 466, 429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 407,
	0, 449, 0, 0, 0, 387, 381, 0, 434, 0,
	0, 0, 389, 0, 408, 467, 0, 371, 472, 479,
	431, 146, 213, 482, 428, 427, 169, 0, 115, 0,
	192, 127, 420, 138, 464, 496, 486, 439, 477, 405,
	414, 117, 412, 176, 163, 204, 448, 462, 174, 141,
	196, 170, 203, 484, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 379, 372, 409, 470, 473, 394,
	458, 384, 416, 465, 417, 440, 399, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 377, 0, 187, 206, 223, 224,
	378, 398, 480, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 457, 177,
	114, 205, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 393, 397, 391, 392, 444,
	445, 490, 491, 492, 468, 388, 0, 395, 396, 0,
	475, 132, 234, 235, 447, 98, 106, 139, 497, 220,
	0, 171, 125, 207, 0, 0, 422, 373, 426, 0,
	0, 0, 0, 0, 0, 0, 385, 386, 178, 0,
	430, 425, 452, 454, 463, 471, 0, 402, 436, 0,
	111, 485, 474, 0, 433, 487, 403, 421, 495, 423,
	424, 460, 382, 443, 162, 418, 400, 99, 406, 375,
	413, 376, 404, 435, 123, 401, 0, 476, 446, 137,
	232, 233, 493, 140, 451, 0, 186, 150, 0, 0,
	438, 478, 441, 469, 432, 461, 390, 450, 488, 419,
	456, 489, 0, 0, 0, 369, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 455, 483, 415,
	498, 0, 459, 374, 453, 0, 380, 383, 494, 481,
	410, 411, 0, 0, 0, 0, 0, 0, 0, 437,
	442, 466, 429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1412, 0, 407, 0, 449, 0, 0,
	0, 387, 381, 0, 434, 0, 0, 0, 389, 0,
	408, 467, 0, 371, 472, 479, 431, 146, 213, 482,
	428, 427, 169, 0, 115, 0, 192, 127, 420, 138,
	464, 496, 486, 439, 477, 405, 414, 117, 412, 176,
	163, 204, 448, 462, 174, 141, 196, 170, 203, 484,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	379, 372, 409, 470, 473, 394, 458, 384, 416, 465,
	417, 440, 399, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	377, 0, 187, 206, 223, 224, 378, 398, 480, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 457, 177, 114, 205, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 393, 397, 391, 392, 444, 445, 490, 491, 492,
	468, 388, 0, 395, 396, 0, 475, 132, 234, 235,
	447, 98, 106, 139, 497, 220, 0, 171, 125, 207,
	0, 0, 422, 373, 426, 0, 0, 0, 0, 0,
	0, 0, 385, 386, 178, 0, 430, 425, 452, 454,
	463, 471, 0, 402, 436, 0, 111, 485, 474, 0,
	433, 487, 403, 421, 495, 423, 424, 460, 382, 443,
	162, 418, 400, 99, 406, 375, 413, 376, 404, 435,
	123, 401, 0, 476, 446, 137, 232, 233, 493, 140,
	451, 0, 186, 150, 0, 0, 438, 478, 441, 469,
	432, 461, 390, 450, 488, 419, 456, 489, 50, 0,
	0, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 455, 483, 415, 498, 0, 459, 374,
	453, 0, 380, 383, 494, 481, 410, 411, 0, 0,
	0, 0, 0, 0, 0, 437, 442, 466, 429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 407, 0, 449, 0, 0, 0, 387, 381, 0,
	434, 0, 0, 0, 389, 0, 408, 467, 0, 371,
	472, 479, 431, 146, 213, 482, 428, 427, 169, 0,
	115, 0, 192, 127, 420, 138, 464, 496, 486, 439,
	477, 405, 414, 117, 412, 176, 163, 204, 448, 462,
	174, 141, 196, 170, 203, 484, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 379, 372, 409, 470,
	473, 394, 458, 384, 416, 465, 417, 440, 399, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 377, 0, 187, 206,
	223, 224, 378, 398, 480, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	457, 177, 114, 205, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 393, 397, 391,
	392, 444, 445, 490, 491, 492, 468, 388, 0, 395,
	396, 0, 475, 132, 234, 235, 447, 98, 106, 139,
	497, 220, 0, 171, 125, 207, 0, 0, 422, 373,
	426, 0, 0, 0, 0, 0, 0, 0, 385, 386,
	178, 0, 430, 425, 452, 454, 463, 471, 0, 402,
	436, 0, 111, 485, 474, 0, 433, 487, 403, 421,
	495, 423, 424, 460, 382, 443, 162, 418, 400, 99,
	406, 375, 413, 376, 404, 435, 123, 401, 0, 476,
	446, 137, 232, 233, 493, 140, 451, 0, 186, 150,
	0, 0, 438, 478, 441, 469, 432, 461, 390, 450,
	488, 419, 456, 489, 0, 0, 0, 369, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 455,
	483, 415, 498, 0, 459, 374, 453, 0, 380, 383,
	494, 481, 410, 411, 0, 0, 0, 0, 0, 0,
	0, 437, 442, 466, 429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 407, 0, 449,
	0, 0, 0, 387, 381, 0, 434, 0, 0, 0,
	389, 0, 408, 467, 0, 371, 472, 479, 431, 146,
	213, 482, 428, 427, 169, 0, 115, 0, 192, 127,
	420, 138, 464, 496, 486, 439, 477, 405, 414, 117,
	412, 176, 163, 204, 448, 462, 174, 141, 196, 170,
	203, 484, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 379, 372, 409, 470, 473, 394, 458, 384,
	416, 465, 417, 440, 399, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 367,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 377, 0, 187, 206, 223, 224, 378, 398,
	480, 216, 217, 218, 219, 0, 0, 0, 368, 366,
	131, 181, 135, 142, 172, 221, 457, 177, 114, 205,
	183, 362, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 393, 397, 391, 392, 444, 445, 490,
	491, 492, 468, 388, 0, 395, 396, 0, 475, 132,
	234, 235, 447, 98, 106, 139, 497, 220, 0, 171,
	125, 207, 0, 0, 422, 373, 426, 0, 0, 0,
	0, 0, 0, 0, 385, 386, 178, 0, 430, 425,
	452, 454, 463, 471, 0, 402, 436, 0, 111, 485,
	474, 0, 433, 487, 403, 421, 495, 423, 424, 460,
	382, 443, 162, 418, 400, 99, 406, 375, 413, 376,
	404, 435, 123, 401, 0, 476, 446, 137, 232, 233,
	493, 140, 451, 0, 186, 150, 0, 0, 438, 478,
	441, 469, 432, 461, 390, 450, 488, 419, 456, 489,
	0, 0, 0, 94, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 455, 483, 415, 498, 0,
	459, 374, 453, 0, 380, 383, 494, 481, 410, 411,
	0, 0, 0, 0, 0, 0, 0, 437, 442, 466,
	429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 407, 0, 449, 0, 0, 0, 387,
	381, 0, 434, 0, 0, 0, 389, 0, 408, 467,
	0, 371, 472, 479, 431, 146, 213, 482, 428, 427,
	169, 0, 115, 0, 192, 127, 420, 138, 464, 496,
	486, 439, 477, 405, 414, 117, 412, 176, 163, 204,
	448, 462, 174, 141, 196, 170, 203, 484, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 379, 372,
	409, 470, 473, 394, 458, 384, 416, 465, 417, 440,
	399, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 377, 0,
	187, 206, 223, 224, 378, 398, 480, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 457, 177, 114, 205, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 393,
	397, 391, 392, 444, 445, 490, 491, 492, 468, 388,
	0, 395, 396, 0, 475, 132, 234, 235, 447, 98,
	106, 139, 497, 220, 0, 171, 125, 207, 0, 0,
	422, 373, 426, 0, 0, 0, 0, 0, 0, 0,
	385, 386, 178, 0, 430, 425, 452, 454, 463, 471,
	0, 402, 436, 0, 111, 485, 474, 0, 433, 487,
	403, 421, 495, 423, 424, 460, 382, 443, 162, 418,
	400, 99, 406, 375, 413, 376, 404, 435, 123, 401,
	0, 476, 446, 137, 232, 233, 493, 140, 451, 0,
	186, 150, 0, 0, 438, 478, 441, 469, 432, 461,
	390, 450, 488, 419, 456, 489, 0, 0, 0, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 455, 483, 415, 498, 0, 459, 374, 453, 0,
	380, 383, 494, 481, 410, 411, 0, 0, 0, 0,
	0, 0, 0, 437, 442, 466, 429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 407,
	0, 449, 0, 0, 0, 387, 381, 0, 434, 0,
	0, 0, 389, 0, 408, 467, 0, 371, 472, 479,
	431, 146, 213, 482, 428, 427, 169, 0, 115, 0,
	192, 127, 420, 138, 464, 496, 486, 439, 477, 405,
	414, 117, 412, 176, 163, 204, 448, 462, 174, 141,
	196, 170, 203, 484, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 379, 372, 409, 470, 473, 394,
	458, 384, 416, 465, 417, 440, 399, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 717, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 367, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 377, 0, 187, 206, 223, 224,
	378, 398, 480, 216, 217, 218, 219, 0, 0, 0,
	368, 366, 131, 181, 135, 142, 172, 221, 457, 177,
	114, 205, 183, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 393, 397, 391, 392, 444,
	445, 490, 491, 492, 468, 388, 0, 395, 396, 0,
	475, 132, 234, 235, 447, 98, 106, 139, 497, 220,
	0, 171, 125, 207, 0, 0, 422, 373, 426, 0,
	0, 0, 0, 0, 0, 0, 385, 386, 178, 0,
	430, 425, 452, 454, 463, 471, 0, 402, 436, 0,
	111, 485, 474, 0, 433, 487, 403, 421, 495, 423,
	424, 460, 382, 443, 162, 418, 400, 99, 406, 375,
	413, 376, 404, 435, 123, 401, 0, 476, 446, 137,
	232, 233, 493, 140, 451, 0, 186, 150, 0, 0,
	438, 478, 441, 469, 432, 461, 390, 450, 488, 419,
	456, 489, 0, 0, 0, 369, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 455, 483, 415,
	498, 0, 459, 374, 453, 0, 380, 383, 494, 481,
	410, 411, 0, 0, 0, 0, 0, 0, 0, 437,
	442, 466, 429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 407, 0, 449, 0, 0,
	0, 387, 381, 0, 434, 0, 0, 0, 389, 0,
	408, 467, 0, 371, 472, 479, 431, 146, 213, 482,
	428, 427, 169, 0, 115, 0, 192, 127, 420, 138,
	464, 496, 486, 439, 477, 405, 414, 117, 412, 176,
	163, 204, 448, 462, 174, 141, 196, 170, 203, 484,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	379, 372, 409, 470, 473, 394, 458, 384, 416, 465,
	417, 440, 399, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 357, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 367, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	377, 0, 187, 206, 223, 224, 378, 398, 480, 216,
	217, 218, 219, 0, 0, 0, 368, 366, 360, 359,
	135, 142, 172, 221, 457, 177, 114, 205, 183, 362,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 393, 397, 391, 392, 444, 445, 490, 491, 492,
	468, 388, 0, 395, 396, 0, 475, 132, 234, 235,
	447, 98, 106, 139, 497, 220, 0, 171, 125, 207,
	0, 0, 422, 373, 426, 0, 0, 0, 0, 0,
	0, 0, 385, 386, 178, 0, 430, 425, 452, 454,
	463, 471, 0, 402, 436, 0, 111, 485, 474, 0,
	433, 487, 403, 421, 495, 423, 424, 460, 382, 443,
	162, 418, 400, 99, 406, 375, 413, 376, 404, 435,
	123, 401, 0, 476, 446, 137, 232, 233, 493, 140,
	451, 0, 186, 150, 0, 0, 438, 478, 441, 469,
	432, 461, 390, 450, 488, 419, 456, 489, 0, 0,
	0, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 455, 483, 415, 498, 0, 459, 374,
	453, 0, 380, 383, 494, 481, 410, 411, 0, 0,
	0, 0, 0, 0, 0, 437, 442, 466, 429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 407, 0, 449, 0, 0, 0, 387, 381, 0,
	434, 0, 0, 0, 389, 0, 408, 467, 0, 371,
	472, 479, 431, 146, 213, 482, 428, 427, 169, 0,
	115, 0, 192, 127, 420, 138, 464, 496, 486, 439,
	477, 405, 414, 117, 412, 176, 163, 204, 448, 462,
	174, 141, 196, 170, 203, 484, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 379, 372, 409, 470,
	473, 394, 458, 384, 416, 465, 417, 440, 399, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 377, 0, 187, 206,
	223, 224, 378, 398, 480, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	457, 177, 114, 205, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 393, 397, 391,
	392, 444, 445, 490, 491, 492, 468, 388, 0, 395,
	396, 0, 475, 132, 234, 235, 447, 98, 106, 139,
	497, 220, 0, 171, 125, 207, 0, 0, 422, 373,
	426, 0, 0, 0, 0, 0, 0, 0, 385, 386,
	178, 0, 430, 425, 452, 454, 463, 471, 162, 402,
	436, 99, 111, 0, 284, 0, 0, 0, 123, 280,
	0, 0, 0, 137, 232, 233, 326, 140, 327, 0,
	186, 150, 0, 0, 0, 0, 317, 318, 0, 0,
	0, 0, 0, 0, 1029, 0, 50, 0, 0, 281,
	305, 283, 303, 307, 308, 309, 310, 0, 0, 112,
	306, 311, 312, 313, 1030, 0, 0, 0, 278, 296,
	0, 325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 0, 0, 0,
	0, 339, 0, 295, 0, 0, 291, 292, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 337, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 341, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 338, 334, 335, 332,
	333, 331, 330, 329, 340, 319, 320, 321, 322, 324,
	0, 132, 234, 235, 323, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 162, 0, 0, 99, 929, 0,
	284, 0, 0, 0, 123, 280, 0, 0, 178, 137,
	232, 233, 326, 140, 327, 0, 186, 150, 0, 336,
	111, 0, 317, 318, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 281, 305, 283, 303, 307,
	308, 309, 310, 0, 0, 112, 306, 311, 312, 313,
	0, 0, 0, 0, 278, 296, 0, 325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 274, 0, 0, 0, 339, 0, 295,
	0, 0, 291, 292, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 337, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 341, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 338, 334, 335, 332, 333, 331, 330, 329,
	340, 319, 320, 321, 322, 324, 0, 132, 234, 235,
	323, 98, 106, 139, 0, 220, 0, 171, 125, 207,
	162, 0, 0, 99, 0, 0, 284, 0, 0, 0,
	123, 280, 0, 0, 178, 137, 232, 233, 326, 140,
	327, 0, 186, 150, 0, 336, 111, 0, 317, 318,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	559, 281, 305, 283, 303, 307, 308, 309, 310, 0,
	0, 112, 306, 311, 312, 313, 0, 0, 0, 0,
	278, 296, 0, 325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 0,
	0, 0, 0, 339, 0, 295, 0, 0, 291, 292,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 337, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 341,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 338, 334,
	335, 332, 333, 331, 330, 329, 340, 319, 320, 321,
	322, 324, 0, 132, 234, 235, 323, 98, 106, 139,
	0, 220, 0, 171, 125, 207, 162, 0, 0, 99,
	0, 0, 284, 0, 0, 0, 123, 280, 0, 0,
	178, 137, 232, 233, 326, 140, 327, 0, 186, 150,
	0, 336, 111, 0, 317, 318, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 281, 305, 283,
	303, 307, 308, 309, 310, 0, 0, 112, 306, 311,
	312, 313, 0, 0, 0, 0, 278, 296, 0, 325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 274, 0, 0, 0, 339,
	0, 295, 0, 0, 291, 292, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 337, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 341, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 338, 334, 335, 332, 333, 331,
	330, 329, 340, 319, 320, 321, 322, 324, 0, 132,
	234, 235, 323, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 162, 0, 0, 99, 0, 0, 284, 0,
	0, 0, 123, 280, 0, 0, 178, 137, 232, 233,
	326, 140, 327, 0, 186, 150, 0, 336, 111, 0,
	317, 318, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 281, 305, 283, 303, 307, 308, 309,
	310, 0, 0, 112, 306, 311, 312, 313, 0, 0,
	0, 0, 278, 296, 0, 325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 0, 0, 0, 0, 339, 0, 295, 0, 0,
	943, 292, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 337,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 945, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 955, 961, 959, 191, 148,
	956, 134, 182, 954, 102, 0, 963, 122, 167, 962,
	947, 958, 960, 957, 952, 198, 946, 222, 965, 964,
	966, 944, 968, 211, 105, 109, 971, 950, 970, 969,
	208, 967, 201, 149, 145, 0, 104, 199, 147, 144,
	948, 949, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 341, 0, 158, 130, 0, 0, 0, 0, 0,
	951, 953, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	338, 334, 335, 332, 333, 331, 330, 329, 340, 319,
	320, 321, 322, 324, 0, 132, 234, 235, 323, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 46, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 178, 99, 0, 0, 284, 0, 0, 0,
	123, 280, 0, 336, 111, 137, 232, 233, 326, 140,
	327, 0, 186, 150, 0, 0, 0, 0, 317, 318,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 281, 305, 283, 303, 307, 308, 309, 310, 0,
	0, 112, 306, 311, 312, 313, 0, 0, 0, 0,
	278, 296, 0, 325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 0,
	0, 0, 0, 339, 0, 295, 0, 0, 291, 292,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 337, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 341,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 338, 334,
	335, 332, 333, 331, 330, 329, 340, 319, 320, 321,
	322, 324, 0, 132, 234, 235, 323, 98, 106, 139,
	0, 220, 0, 171, 125, 207, 162, 0, 0, 99,
	0, 0, 284, 0, 0, 0, 123, 280, 0, 0,
	178, 137, 232, 233, 326, 140, 327, 0, 186, 150,
	0, 336, 111, 0, 317, 318, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 281, 305, 283,
	303, 307, 308, 309, 310, 0, 0, 112, 306, 311,
	312, 313, 0, 0, 0, 0, 278, 296, 0, 325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 0, 0, 0, 0, 339,
	0, 295, 0, 0, 291, 292, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 337, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 341, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 338, 334, 335, 332, 333, 331,
	330, 329, 340, 319, 320, 321, 322, 324, 0, 132,
	234, 235, 323, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 178, 137, 232, 233,
	326, 140, 327, 0, 186, 150, 0, 336, 111, 0,
	317, 318, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 281, 305, 283, 303, 307, 308, 309,
	310, 0, 0, 112, 306, 311, 312, 313, 0, 0,
	0, 0, 0, 296, 0, 325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 0, 0, 0, 0, 339, 0, 295, 0, 0,
	291, 292, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 337,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	2136, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 341, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	338, 334, 335, 332, 333, 331, 330, 329, 340, 319,
	320, 321, 322, 324, 0, 132, 234, 235, 323, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 162, 0,
	0, 99, 0, 0, 284, 0, 0, 0, 123, 0,
	0, 0, 178, 137, 232, 233, 326, 140, 327, 0,
	186, 150, 0, 336, 111, 0, 317, 318, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 281,
	305, 283, 303, 307, 308, 309, 310, 0, 0, 112,
	306, 311, 312, 313, 0, 0, 0, 0, 0, 296,
	0, 325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 0, 0, 0,
	0, 339, 0, 295, 0, 0, 291, 292, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 337, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 341, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 338, 334, 335, 332,
	333, 331, 330, 329, 340, 319, 320, 321, 322, 324,
	0, 132, 234, 235, 323, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 178, 137,
	232, 233, 326, 140, 327, 0, 186, 150, 0, 336,
	111, 0, 317, 318, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 281, 305, 283, 303, 307,
	308, 309, 310, 0, 0, 112, 306, 311, 312, 313,
	0, 0, 0, 0, 0, 296, 0, 325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 339, 0, 295,
	0, 0, 291, 292, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 337, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 341, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 338, 334, 335, 332, 333, 331, 330, 329,
	340, 319, 320, 321, 322, 324, 0, 132, 234, 235,
	323, 98, 106, 139, 0, 220, 0, 171, 125, 207,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 178, 137, 232, 233, 326, 140,
	327, 0, 186, 150, 0, 336, 111, 0, 317, 318,
	0, 0, 0, 0, 0, 0, 0, 0, 1204, 0,
	0, 281, 305, 283, 303, 307, 308, 309, 310, 0,
	0, 112, 306, 311, 312, 313, 0, 0, 0, 0,
	0, 296, 0, 325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 0,
	0, 0, 0, 339, 0, 295, 0, 0, 291, 292,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 337, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 341,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 338, 334,
	335, 332, 333, 331, 330, 329, 340, 319, 320, 321,
	322, 324, 0, 132, 234, 235, 323, 98, 106, 139,
	0, 220, 0, 171, 125, 207, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	178, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 336, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1535, 0, 0, 281, 0, 1307,
	1308, 1309, 1310, 0, 0, 0, 0, 112, 1313, 1311,
	312, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 1315, 1320, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1317, 0, 1319, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	234, 235, 0, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 178, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1305, 0, 0, 281, 0, 1307, 1308, 1309, 1310, 0,
	0, 0, 0, 112, 1313, 1311, 312, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 1315, 1320, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 1317,
	0, 1319, 1318, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 132, 234, 235, 0, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 0, 369,
	305, 923, 303, 307, 308, 309, 310, 0, 0, 112,
	306, 311, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 764, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 132, 234, 235, 0, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 1824, 0, 369, 0, 1822, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 1821, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1820, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 765, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 0, 791,
	792, 167, 793, 794, 795, 797, 796, 766, 767, 768,
	772, 770, 769, 771, 743, 745, 211, 741, 744, 750,
	746, 747, 748, 762, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 763, 773, 774, 775, 776,
	777, 778, 779, 780, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 764, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 234,
	235, 369, 98, 742, 139, 0, 220, 0, 171, 125,
	207, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 749, 0,
	917, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 765, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 0, 791, 792, 167, 793, 794, 795,
	797, 796, 766, 915, 768, 772, 770, 769, 771, 743,
	745, 211, 741, 914, 750, 746, 747, 748, 762, 918,
	752, 753, 754, 755, 756, 757, 758, 759, 919, 920,
	763, 773, 774, 775, 776, 777, 778, 779, 780, 0,
	0, 158, 130, 916, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 764, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 369, 98, 742, 139,
	0, 220, 0, 171, 125, 207, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 765, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 2016, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 0, 791,
	792, 167, 793, 794, 795, 797, 796, 766, 767, 768,
	772, 770, 769, 771, 743, 745, 211, 741, 744, 750,
	746, 747, 748, 762, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 763, 773, 774, 775, 776,
	777, 778, 779, 780, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	0, 0, 0, 0, 162, 0, 0, 99, 0, 576,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 137,
	232, 233, 0, 140, 0, 0, 186, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 234,
	235, 0, 98, 742, 139, 369, 220, 578, 171, 125,
	207, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 573, 572, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 574,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 0, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 764, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 234, 235,
	369, 98, 106, 139, 0, 220, 0, 171, 125, 207,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 765, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 0, 791, 792, 167, 793, 794, 795, 797,
	796, 766, 767, 768, 772, 770, 769, 771, 743, 745,
	211, 741, 744, 750, 746, 747, 748, 762, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 763,
	773, 774, 775, 776, 777, 778, 779, 780, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 132, 234, 235, 0, 98, 742, 139, 0,
	220, 0, 171, 125, 207, 1824, 0, 369, 0, 1822,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 1821, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1820, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	234, 235, 0, 98, 106, 139, 369, 220, 502, 171,
	125, 207, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1053, 146, 213,
	0, 0, 0, 1048, 0, 1047, 0, 1049, 1050, 0,
	138, 0, 0, 1051, 1054, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	0, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 132, 234,
	235, 0, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 50, 0, 0, 94, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 112, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 0,
	98, 106, 139, 94, 220, 96, 171, 125, 207, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 234, 235, 0, 98,
	106, 139, 281, 220, 96, 171, 125, 207, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 2095,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	1510, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 132, 234, 235, 0, 98, 106,
	139, 0, 220, 0, 171, 125, 207, 50, 0, 0,
	94, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	112, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 162, 0,
	0, 99, 0, 706, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 0, 98, 106, 139, 94,
	220, 708, 171, 125, 207, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 46, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 132, 234, 235, 0, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 50, 0, 0, 369, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	234, 235, 0, 98, 106, 139, 94, 220, 96, 171,
	125, 207, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 823, 177, 114, 205, 183,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 800, 0, 132, 234,
	235, 369, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 801, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	727, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 0, 98, 106, 139,
	369, 220, 726, 171, 125, 207, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 162, 0,
	0, 99, 0, 706, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 0, 98, 106, 139, 94,
	220, 708, 171, 125, 207, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 704, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 684, 123, 0, 0,
	0, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 234, 235, 0, 98, 106, 139, 94, 220,
	96, 171, 125, 207, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 0, 0, 0, 352, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	132, 234, 235, 0, 98, 106, 139, 0, 220, 0,
	171, 125, 207, 94, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 234, 235, 0, 98,
	106, 139, 94, 220, 96, 171, 125, 207, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 0, 0, 0, 0,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 234, 235, 0, 98, 106,
	139, 94, 220, 96, 171, 125, 207, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 369, 98, 106, 139,
	0, 220, 0, 171, 125, 207, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 1510, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 234,
	235, 369, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 1636,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 0, 98, 106, 139,
	281, 220, 96, 171, 125, 207, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 0, 98, 106, 139, 94,
	220, 708, 171, 125, 207, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 234, 235, 369, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 0,
	98, 106, 139, 369, 220, 578, 171, 125, 207, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 234, 235, 0, 98,
	106, 139, 369, 220, 502, 171, 125, 207, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 234, 235, 369, 98, 106,
	139, 0, 220, 0, 171, 125, 207, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	234, 235, 0, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111,
}

var yyPact = [...]int16{
	3099, -1000, -250, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1436, 1491, -1000, -1000, -1000, -1000, -1000, 1263, 1047,
	365, 393, 240, 18413, 388, 3081, 18702, -1000, 108, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1151, -1000, -1000,
	-1000, -1000, -1000, 1422, 1433, 1151, 1408, 9268, -1000, 277,
	15801, 18124, 7526, -1000, 20713, 371, 347, 200, 331, 20998,
	280, 280, 20998, 20998, 18702, 381, 280, -1000, -213, -200,
	-1000, -82, 380, 18702, -1000, 18702, 286, 1069, 286, 286,
	286, 18702, -1000, 462, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 18702, 1057, 1369, 471,
	6022, 6022, 6022, 6022, 223, 6022, -18, 1283, -1000, -1000,
	-1000, -1000, 6022, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1317, 992, 1367, 10288, 10288, 1436, -1000,
	1151, -1000, -1000, 1473, -1000, 13756, 460, -1000, 10288, 99,
	1152, -1000, -1000, -234, 1152, -1000, -1000, 404, -1000, -1000,
	-1000, 11296, 11296, 11296, 11296, 11296, 11296, 11296, -1000, -1000,
	-1000, -1000, 31, -1000, 900, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 459, -1000, 9952, 1152, 1152, 1152,
	1152, 1152, 1152, 1152, 1152, 10288, 1152, 1337, 1152, 1152,
	1152, 1152, 1152, 1152, 1152, 1152, 2461, 1152, 1152, 1152,
	1152, -1000, 681, 17829, 1170, 1347, -1000, -1000, -1000, 1400,
	14925, 17540, 18702, 1095, -1000, 1194, 7150, -12, -1000, -1000,
	-1000, 619, 458, 17251, -1000, -1000, -1000, 1359, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1067,
	-1000, 14041, 14041, 16962, 20998, 280, 327, 126, 280, 1266,
	1054, 646, 1045, 1281, 366, 1398, 280, 18702, -1000, -1000,
	-1000, -1000, 16677, 6022, 311, 18702, 1386, 1280, 18702, 1033,
	1031, -1000, 6774, -1000, 6022, 6022, 6022, 6022, 6022, 6022,
	6022, 6022, -1000, -1000, -1000, -1000, -1000, -1000, 6022, 6022,
	-1000, -8, -1000, 18702, -1000, 1403, -1000, -1000, -1000, -1000,
	-1000, 1485, 510, 916, 450, 1199, -1000, 751, 1422, 992,
	18702, -1000, 10288, 10288, 923, -1000, 20424, -1000, -1000, 4518,
	515, 11296, 871, 679, 11296, 11296, 11296, 11296, 11296, 11296,
	11296, 11296, 11296, 11296, 11296, 11296, 11296, 11296, 11296, 884,
	2838, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1019, -1000, 13182, -1000, 1151, 12600, 12600,
	23, 23, 23, 23, 23, 23, 20135, -1000, -253, 8596,
	-1000, 7902, 992, 1037, 785, 9952, 9268, 9268, 9604, 10288,
	11296, 19561, 9268, 1403, 628, 785, 19561, 1419, -1000, 992,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 62,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9268, 9268,
	9268, 9268, -1000, 224, 18702, -1000, 19561, 15801, 15801, 15801,
	15801, 15801, -1000, 1312, 1309, -1000, 1295, 1294, 1305, 18702,
	-1000, 1062, 14925, 370, 1152, -1000, 19850, -1000, -1000, 224,
	1116, 15801, 18702, -1000, -1000, 6398, 1194, -12, 1185, -1000,
	-39, -33, 8260, 7902, 501, -1000, -1000, -1000, -1000, 186,
	14627, 2306, -142, 14, -1000, -1000, -1000, -1000, -1000, 1228,
	-1000, -1000, -1000, 1228, 259, 1262, 1228, 1262, -1000, 1228,
	1262, 59, 59, 59, 59, 59, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1260, 1257, -1000, 1228, 1228, 1228, 1228,
	1228, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1246, 252, 1246, 1230, 1230, -1000, -1000, 2306, 1256,
	18702, 20998, 1279, 18702, 280, -223, 18702, -121, 1014, 6022,
	1385, 6022, 18702, 1469, 18702, -1000, -1000, -1000, 137, 14041,
	18702, -1000, 2483, 18702, -1000, 18702, -1000, -1000, 18702, 6022,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 590, -1000, -1000, -1000, 1297,
	-1000, -1000, 1335, 10288, 10288, 5270, 10288, -1000, -1000, -1000,
	1367, -1000, -1000, 515, 534, -1000, -1000, 727, -1000, -1000,
	-1000, -1000, 449, 1152, -1000, 1867, -1000, -1000, -1000, -1000,
	871, 11296, 11296, 11296, 2353, 1867, 2127, 343, 1526, 23,
	136, 136, 38, 38, 38, 38, 38, 680, 680, -1000,
	-1000, -1000, -1000, -112, -1000, 1228, 1246, 252, 1246, 1230,
	1230, -1000, -1000, 992, 257, 163, -1000, -1000, 59, -1000,
	-1000, -142, -1000, -234, 915, -1000, -1000, 906, 992, 9268,
	1029, 1037, -1000, 13756, -1000, -1000, 10288, -1000, 992, 1029,
	1029, 792, 1187, 11632, 1228, -1000, 1228, 1230, -1000, -1000,
	1228, 102, 1228, 101, -1000, -1000, -1000, -1000, 1230, -1000,
	-1000, -1000, -1000, -1000, 1228, 1228, -1000, -1000, 1228, -1000,
	1228, 1228, 864, 611, 1474, 1177, -1000, 439, 1029, 9268,
	635, -1000, 10288, 992, 18702, -1000, -1000, 1029, 992, 1186,
	1029, 1029, 1099, 1152, -1000, 1178, -1000, 598, 1347, 1254,
	1277, 1417, -1000, -1000, -1000, -1000, 1303, -1000, 1301, -1000,
	-1000, -1000, -1000, -113, 344, 336, 334, 20998, -1000, 1457,
	15801, 1160, -1000, -1000, 1185, -12, -24, -1000, -1000, -1000,
	-1000, 785, 591, -1000, -1000, 1012, 7902, 1184, 1351, -1000,
	-1000, -1000, -1000, -1000, -1000, 1249, 834, 20998, 261, 253,
	498, 332, 986, -1000, -1000, -1000, 738, -1000, 20998, -1000,
	1484, -1000, -1000, 260, -1000, 254, 636, 913, 18702, 164,
	1247, 12304, 876, -1000, -262, -1000, -7, -1000, -1000, 850,
	59, 59, 1228, 59, 872, 59, 59, -1000, -1000, 501,
	1357, 501, 501, 501, 501, 909, 909, -124, -124, -1000,
	-1000, -1000, -1000, 873, 1246, -1000, -1000, -1000, 870, -1000,
	18702, 20998, 1245, 1276, 18702, 1397, 18702, -1000, -1000, -1000,
	1396, -1000, 7902, -1000, -1000, -1000, -1000, -1000, 1392, 1158,
	-1000, -1000, -1000, -1000, 509, -1000, -1000, 1268, -1000, 822,
	2956, 477, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 221, 346, -1000, 6022, -1000, 617, 18702,
	18702, 9268, -1000, 1330, 785, 785, 436, -1000, -1000, -1000,
	-1000, -1000, 5646, 9268, -1000, 2353, 1867, 2071, -1000, 11296,
	11296, 76, -1000, 1228, -1000, 75, 74, -1000, 72, -1000,
	-234, -1000, 1029, 9268, -246, -1000, 785, -1000, -1000, -1000,
	3164, 884, 10288, -1000, 850, 251, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3164, 11296,
	11296, 11296, 11296, 11296, 5270, -105, 1138, 623, -1000, 10288,
	849, -1000, -1000, -1000, -1000, -1000, -1000, 1274, 19561, 1152,
	-1000, 16388, 20998, 1436, 19561, 10288, 10288, -1000, -1000, 10288,
	1244, -1000, 10288, -1000, -1000, -1000, -1000, 1243, 1152, 1152,
	1152, 1007, -1000, 1436, 1160, -1000, -1000, -1000, -34, -40,
	-1000, 10288, -1000, 4894, -1000, 186, -1000, 18987, -1000, 1481,
	1418, 256, -3, -1000, 951, 929, -1000, 925, -1000, -1000,
	13, -1000, -205, 113, -16, -1000, -1000, 1152, -1000, 1242,
	1389, -1000, 1373, 847, -1000, 11968, -1000, -236, -1000, -1000,
	-1000, -234, -1000, -1000, -1000, 1152, -1000, 1238, 1237, -1000,
	1227, 1152, 434, -1000, -1000, -1000, -1000, -1000, 1112, 501,
	501, 59, 501, 1107, 1106, 501, 501, -1000, 505, -1000,
	-1000, -1000, -1000, 1027, -1000, 1023, -1000, -1000, 1183, -1000,
	1018, 1182, 1273, 15503, 18702, 1231, 1151, 1388, 1151, 1179,
	-1000, 587, 1416, 214, 18702, 1469, 1469, 20998, -1000, 241,
	20998, -1000, -1000, 20998, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 20998, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 18702, -1000, -1000, -1000, -1000,
	-1000, 20998, 258, -1000, -1000, 908, 10288, -1000, -1000, 1157,
	-1000, 7902, -1000, -1000, 992, -1000, 11296, 1867, 1867, 9,
	8, 6, -1000, 906, -1000, -1000, -1000, -1000, 1152, 992,
	1228, 1228, -1000, 1228, 1230, -1000, 1228, 102, 1228, 101,
	-1000, -1000, -1000, -1000, 1230, -1000, -1000, -1000, -1000, -1000,
	1228, 1228, -1000, -1000, 1228, -1000, 1228, 1228, 992, 658,
	-1000, -1000, 992, 437, 1399, 788, 379, 731, -1000, 1152,
	-90, -1000, 785, 10288, -1000, 1375, 1109, 1156, -1000, -1000,
	8932, 992, 1010, 417, 1007, 1422, -1000, 785, 785, 785,
	19272, 785, -201, 19272, 19272, 19272, 16090, 20998, 1422, -1000,
	-1000, -1000, -1000, 785, 4142, -1000, 7902, 1003, -1000, 234,
	1228, 528, 528, -211, 250, 248, 1152, -1000, -1000, -1000,
	-1000, -206, -1000, -1000, -1000, -1000, 636, -1000, 1227, 10288,
	19272, 156, -1000, 1175, 1101, 2484, 1100, -1000, 13182, -1000,
	992, -1000, 802, -1000, 703, 1096, 7902, -1000, -1000, -1000,
	501, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 59, 905,
	59, 845, -1000, 838, 15503, 20998, 18702, 1093, 1174, -1000,
	233, 1226, 19272, -1000, 1151, -1000, 7902, 4142, 310, 1438,
	-1000, -1000, 301, -1000, 1125, 1225, 20998, -1000, -1000, 263,
	-1000, 1223, -1000, -1000, -1000, -1000, 1381, 20998, -1000, -1000,
	785, 1457, 15801, -1000, 1867, -1000, -1000, -1000, -1000, 445,
	-1000, -1000, -1000, -1000, -1000, 11296, 11296, -1000, 11296, 11296,
	11296, 992, 893, 785, 246, -1000, 1152, -1000, -1000, 1150,
	20998, 20998, -1000, -1000, 998, -1000, -1000, 996, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 991, 991, 991, 370, -1000,
	-1000, -1000, -1000, -1000, -1000, 160, 18987, 1380, -1000, -1000,
	-1000, 742, -1000, -1000, 668, 179, 676, -1000, 20998, -206,
	10288, -1000, 1152, 658, 978, 10288, 1220, 790, -1000, 1085,
	-236, 1152, -1000, -1000, -1000, -1000, -1000, -1000, 1152, -1000,
	501, -1000, 501, 1080, 1078, 1074, 1219, 1218, -221, 15503,
	976, -1000, -1000, -1000, 20998, -1000, -1000, -1000, -1000, -1000,
	169, 2636, 2636, -1000, 14338, 1213, 1209, 19272, 1152, 274,
	1453, 1171, -1000, 988, 992, 1429, 437, 437, 437, 437,
	323, -1000, -1000, 1483, -1000, 1152, -1000, 1151, 412, -1000,
	20998, -1000, -1000, -201, -1000, -1000, -1000, -113, 1271, 920,
	166, -1000, 918, 586, 885, 563, 560, 549, 548, 539,
	533, 527, -1000, -1000, -1000, 1479, -1000, -1000, -1000, 1470,
	1208, -1000, 1207, 658, 10288, 189, 1272, 828, -1000, 1068,
	1038, -1000, -1000, -1000, -1000, -221, 15503, 18987, 1457, 1206,
	1030, 1457, 1076, -1000, 162, 732, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1436, 20998, 2627, 20998,
	20998, 20998, 367, 10960, 10288, -1000, 2636, -1000, 1004, 12897,
	14338, 14338, 12897, 14338, 14338, 18987, 18987, 974, 217, 245,
	1443, 1425, -1000, 992, -1000, 10288, -1000, -1000, -1000, -1000,
	992, 188, -133, 19561, 1156, 992, 20998, -1000, -1000, -1000,
	-1000, 20998, -1000, -130, 920, 20998, -1000, 789, -1000, -1000,
	855, 768, 855, 855, 855, 855, 855, 528, 528, 20998,
	18987, 189, 658, -1000, -92, 1477, -173, 107, -1000, -1000,
	1457, 999, 972, 160, 19272, -221, 160, -115, 20998, 10288,
	2582, -1000, 2391, 1422, 1139, 13467, -1000, 710, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 20998, 1472, 1471, 1462, 1459, 2554, 99,
	787, 119, -1000, -1000, -1000, 12897, -1000, -1000, -1000, -1000,
	-1000, 970, 967, 1266, 965, -1000, 20998, 1205, -1000, 10288,
	10288, -1000, 1135, -1000, 785, -1000, 1328, -109, -160, 1122,
	-1000, -1000, 1152, 961, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 636, 636, 959, 957,
	-1000, 189, -1000, 528, 528, -1000, -1000, -1000, 171, 890,
	762, 749, 739, 12, -1000, 1424, 160, 1457, 160, 1271,
	942, 1457, 1271, -1000, -244, -1000, 785, -1000, -1000, 2636,
	-1000, -1000, 1367, 20998, 159, -1000, -1000, -1000, 2627, 1377,
	-1000, -1000, -1000, -1000, -1000, 2636, 2636, 2636, -1000, 276,
	-121, -1000, 217, 1346, 18987, 785, 1120, 10288, -1000, 1327,
	-1000, 20998, -1000, 920, -1000, -1000, 267, 160, -1000, -1000,
	-1000, 690, -1000, 684, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15214, 1271, 160, -1000, -1000, -1000, 160, -1000, 10288,
	-251, -1000, -1000, 14041, 1415, -1000, 20998, 222, 249, 138,
	133, -1000, 148, -1000, -1000, 199, 940, -1000, -122, 992,
	-1000, 18702, 1271, -1000, -1000, -1000, 408, -1000, -1000, 1271,
	785, 535, 1151, -1000, -1000, 2636, 529, 592, -1000, 144,
	-1000, 196, -1000, -134, -1000, 1202, -1000, 7902, -1000, -1000,
	-1000, 264, 118, -1000, -1000, 1152, -176, 20998, -1000, -1000,
	2636, 10624, -1000, 924, 131, 437, 992, -1000, -1000, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 1789, 15, 65, 1788, 1786, 1783, 1525, 1523, 1518,
	1512, 1779, 1774, 1773, 1769, 1767, 1766, 1765, 1764, 1763,
	1761, 1760, 1759, 1758, 1756, 1755, 1752, 1751, 1750, 1749,
	1428, 1748, 1746, 1743, 112, 1742, 1737, 1736, 1731, 79,
	90, 80, 76, 2064, 1729, 53, 123, 116, 1728, 87,
	1726, 1723, 184, 1721, 111, 1720, 1718, 1295, 1717, 1715,
	43, 71, 24, 55, 1714, 1713, 117, 68, 1712, 1709,
	35, 1706, 1705, 97, 14, 32, 26, 45, 1704, 91,
	28, 1702, 96, 1699, 1698, 1696, 1693, 33, 1691, 98,
	39, 36, 18, 1690, 21, 25, 108, 74, 51, 20,
	213, 101, 1686, 70, 107, 83, 1683, 987, 1682, 1681,
	1680, 1678, 1674, 1670, 858, 106, 1669, 1668, 1667, 115,
	0, 502, 46, 127, 1666, 1664, 1663, 2187, 119, 110,
	49, 1662, 59, 1953, 78, 1661, 1658, 77, 128, 2,
	124, 120, 1657, 125, 1655, 1654, 1651, 2052, 100, 69,
	118, 47, 1650, 1649, 89, 85, 82, 54, 88, 99,
	29, 1647, 1646, 1644, 57, 1642, 31, 42, 1, 95,
	1622, 1618, 1615, 1613, 48, 72, 1612, 44, 1611, 30,
	7, 11, 23, 4, 1610, 1609, 1608, 12, 1607, 50,
	1606, 8, 1602, 17, 1601, 1599, 1597, 38, 1596, 1588,
	1587, 19, 1573, 1572, 40, 41, 73, 56, 60, 1571,
	1570, 93, 81, 67, 1569, 64, 9, 6, 3, 1566,
	13, 1564, 1563, 1560, 22, 27, 1559, 1558, 1557, 1556,
	1555, 1554, 52, 1549, 1548, 1547, 1545, 1543, 5, 1542,
	1540, 10, 1538, 1537, 1536, 1604, 793, 1534, 1533, 94,
	1529, 1527, 1521, 1498, 584,
}

var yyR1 = [...]uint8{
	0, 243, 244, 244, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 6, 3, 4, 4, 5, 5,
	7, 7, 33, 33, 8, 9, 9, 9, 247, 247,
	52, 52, 96, 96, 10, 10, 10, 10, 11, 11,
	221, 221, 220, 222, 222, 12, 12, 12, 12, 12,
	214, 214, 214, 214, 214, 13, 13, 217, 217, 217,
	14, 14, 14, 101, 101, 105, 105, 105, 106, 106,
	106, 106, 234, 234, 233, 233, 135, 135, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 248, 248, 249,
	249, 249, 249, 249, 249, 249, 212, 212, 212, 212,
	213, 213, 213, 215, 215, 216, 216, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 219, 219, 195,
	195, 195, 196, 196, 196, 196, 196, 196, 198, 198,
	199, 199, 125, 125, 193, 193, 192, 191, 191, 190,
	190, 189, 200, 200, 22, 171, 172, 172, 172, 172,
	172, 172, 172, 159, 159, 139, 139, 139, 139, 139,
	139, 139, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 206, 206,
	206, 206, 206, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 208, 209, 210, 202, 202, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 149, 149, 149, 149, 149, 149, 201, 201,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 143,
	143, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 142, 142, 142, 142, 142, 142, 142, 142, 144,
	144, 144, 144, 144, 144, 144, 144, 140, 140, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 146, 146, 146, 146, 146, 146, 146, 146,
	158, 158, 147, 147, 156, 156, 157, 157, 157, 148,
	148, 148, 155, 155, 155, 152, 152, 153, 153, 154,
	154, 154, 150, 150, 150, 151, 151, 151, 161, 182,
	182, 182, 184, 184, 185, 185, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 170, 170, 211,
	211, 181, 181, 181, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 169, 169, 179, 179, 180, 180, 177,
	177, 177, 178, 164, 164, 164, 164, 164, 165, 166,
	166, 166, 166, 162, 163, 204, 204, 204, 239, 239,
	239, 239, 239, 239, 240, 240, 205, 205, 167, 167,
	168, 168, 175, 175, 175, 175, 250, 250, 173, 173,
	174, 174, 174, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 251, 251,
	252, 252, 252, 252, 252, 252, 252, 188, 186, 186,
	187, 187, 17, 18, 18, 18, 18, 18, 19, 19,
	23, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 112, 112, 109, 109, 110, 110,
	111, 111, 111, 113, 113, 113, 136, 136, 136, 25,
	25, 27, 27, 28, 29, 26, 26, 26, 26, 26,
	253, 30, 31, 31, 32, 32, 32, 36, 36, 36,
	34, 34, 35, 35, 41, 41, 40, 40, 42, 42,
	42, 42, 124, 124, 124, 123, 123, 235, 235, 235,
	235, 235, 44, 44, 45, 45, 46, 46, 47, 47,
	47, 224, 224, 223, 223, 225, 225, 225, 225, 225,
	225, 59, 59, 94, 94, 94, 97, 97, 48, 48,
	48, 48, 49, 49, 50, 50, 51, 51, 131, 131,
	130, 130, 130, 129, 129, 53, 53, 53, 55, 54,
	54, 54, 54, 56, 56, 58, 58, 57, 57, 60,
	60, 60, 60, 61, 61, 95, 95, 43, 43, 43,
	43, 43, 43, 43, 108, 108, 63, 63, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 72, 72,
	72, 72, 72, 72, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 39, 39, 73, 73, 73,
	79, 74, 74, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	70, 70, 70, 70, 70, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 254, 254, 71, 71, 71, 71, 37, 37, 37,
	37, 37, 134, 134, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 138, 138, 138,
	138, 138, 138, 138, 138, 83, 83, 38, 38, 81,
	81, 82, 84, 84, 80, 80, 80, 226, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 85,
	85, 86, 86, 236, 236, 237, 237, 238, 87, 87,
	88, 88, 89, 90, 90, 90, 91, 91, 91, 91,
	92, 92, 92, 65, 65, 65, 65, 65, 65, 93,
	93, 93, 93, 98, 98, 75, 75, 77, 77, 76,
	78, 99, 99, 103, 100, 100, 104, 104, 104, 104,
	104, 20, 21, 102, 102, 102, 126, 126, 126, 114,
	114, 115, 115, 107, 107, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 117, 117, 117, 118, 118,
	121, 121, 122, 122, 127, 127, 127, 128, 128, 227,
	227, 227, 228, 228, 228, 229, 229, 230, 231, 231,
	232, 242, 242, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 245, 246, 132, 133, 133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 5, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 8, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 2, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 0, 3, 1, 1, 1, 1, 2, 13,
	12, 14, 12, 13, 12, 7, 8, 7, 5, 5,
	5, 11, 11, 9, 11, 5, 8, 0, 3, 0,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	1, 1, 1, 1, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 1, 4, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 0, 1, 3, 3,
	3, 3, 3, 2, 2, 3, 1, 1, 1, 1,
	1, 0, 2, 2, 3, 2, 4, 2, 4, 2,
	2, 3, 2, 3, 2, 7, 9, 3, 3, 6,
	9, 9, 8, 8, 5, 8, 7, 4, 2, 4,
	6, 2, 4, 2, 1, 1, 1, 2, 1, 1,
	1, 3, 3, 1, 2, 1, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 2, 3, 1, 3, 0, 2,
	0, 3, 3, 2, 2, 2, 2, 2, 3, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 2, 2, 2, 2, 1, 1, 1,
	3, 3, 2, 2, 2, 1, 1, 1, 1, 4,
	4, 4, 4, 4, 1, 5, 2, 2, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	3, 3, 0, 3, 3, 0, 1, 0, 1, 0,
	2, 1, 0, 3, 3, 0, 1, 2, 6, 0,
	1, 4, 1, 2, 1, 3, 2, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 1,
	1, 0, 2, 5, 2, 3, 3, 2, 3, 2,
	2, 3, 4, 1, 1, 1, 1, 1, 3, 3,
	2, 2, 1, 2, 5, 5, 8, 8, 13, 1,
	1, 2, 2, 10, 7, 0, 1, 1, 0, 1,
	1, 1, 2, 2, 1, 2, 0, 3, 0, 1,
	1, 3, 0, 4, 1, 3, 2, 1, 1, 2,
	1, 1, 1, 6, 11, 13, 13, 6, 7, 7,
	7, 12, 7, 7, 7, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 3, 4,
	4, 5, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 0, 4, 1, 3, 1, 1, 1, 1, 1,
	1, 4, 8, 1, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 0, 4, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 6, 2, 2, 2, 2,
	2, 2, 2, 3, 3, 1, 1, 1, 1, 2,
	4, 5, 5, 6, 4, 4, 4, 6, 6, 6,
	6, 6, 8, 8, 6, 8, 8, 9, 7, 5,
	4, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 2, 2, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 3, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	3, 0, 2, 0, 3, 1, 3, 1, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 5,
	3, 1, 3, 1, 2, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 2, 0, 2, 2, 0, 1, 4, 1, 3,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -243, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -23, -24, -25, -27, -28, -29,
	-26, -3, -4, 7, -33, 9, 10, 31, -22, 122,
	123, 125, 124, 155, 126, 148, 52, 206, 207, 209,
	210, 26, 149, 150, 153, 154, 6, -245, 8, 334,
	56, -244, 382, -87, 15, -32, 5, -30, -253, -30,
	-30, -30, -30, -171, 56, -239, -240, -200, 131, 164,
	326, 128, 144, 162, 163, 354, 129, 366, 367, 146,
	369, 76, -107, 132, 134, 129, 129, 130, 132, 326,
	128, 129, -57, -127, 59, -120, 61, 171, 345, 21,
	206, 219, 220, 211, 252, 240, 346, 169, 237, 241,
	291, 380, 69, 209, 300, 138, 175, 151, 232, 235,
	234, 226, 223, 28, 258, 352, 225, 141, 259, 263,
	270, 292, 341, 216, 217, 294, 256, 33, 143, 347,
	37, 159, 295, 261, 255, 250, 131, 254, 215, 249,
	41, 229, 265, 264, 266, 290, 243, 170, 269, 245,
	227, 244, 18, 154, 157, 260, 262, 224, 172, 136,
	161, 351, 296, 222, 158, 173, 153, 299, 368, 168,
	210, 293, 218, 302, 205, 204, 40, 276, 236, 213,
	228, 214, 140, 207, 166, 247, 160, 230, 231, 253,
	212, 248, 208, 162, 155, 301, 277, 353, 246, 242,
	238, 239, 167, 132, 164, 165, 283, 284, 285, 286,
	349, 297, 233, 278, 279, 177, 178, 179, 180, 181,
	182, 183, 34, 35, 342, 343, 129, 116, 241, 122,
	281, 130, 33, 161, -136, 129, -109, 165, 283, 284,
	285, 286, 59, 293, 292, 287, -127, 208, -132, -132,
	-132, -132, -132, -30, -2, -91, 17, 16, -5, -3,
	-245, 21, 22, -42, 107, -43, -127, -62, 78, -67,
	29, 59, -120, 61, 24, -66, -63, -80, -226, -78,
	-79, 116, 117, 105, 106, 113, 79, 118, -70, -68,
	-69, -71, -229, 62, -121, 60, 70, 63, 64, 65,
	66, 71, 72, 73, 303, -76, -245, 46, 47, 335,
	336, 337, 338, 344, 339, 81, 36, 38, 325, 333,
	332, 331, 329, 330, 327, 328, 379, 135, 326, 111,
	334, 267, -31, -107, -45, -46, -47, -48, -59, -79,
	-245, -57, 11, -52, -57, -100, -135, 208, -104, 293,
	292, -122, 303, -102, -121, -119, 291, 241, 290, 59,
	-120, 127, 185, 357, 77, 23, 25, 274, 280, 184,
	80, 116, 16, 81, 191, 366, 367, 115, 335, 122,
	50, 327, 328, 325, 189, 337, 338, 326, 281, 196,
	20, 29, 377, 10, 26, 149, 22, 109, 124, 186,
	84, 85, 152, 24, 150, 73, 192, 194, 19, 53,
	142, 11, 356, 13, 14, 371, 358, 135, 134, 96,
	370, 130, 48, 8, 118, 27, 378, 93, 44, 147,
	195, 46, 94, 17, 329, 330, 32, 344, 156, 111,
	51, 38, 372, 78, 373, 71, 54, 298, 190, 76,
	15, 49, 157, 374, 144, 193, 95, 125, 334, 47,
	187, 375, 128, 188, 6, 340, 31, 148, 45, 129,
	282, 83, 133, 72, 163, 5, 146, 9, 52, 55,
	331, 332, 333, 36, 82, 12, 145, 348, 74, -172,
	-159, -121, 61, 130, 130, 132, -234, 204, 132, -121,
	-115, 135, -115, -121, -121, -57, 129, -115, 369, 366,
	367, 334, 129, -57, -57, -114, 135, 59, -114, -114,
	-114, -57, 119, -57, 59, 31, 326, 59, 161, 129,
	162, 132, -133, -245, -122, -133, -133, -133, 166, 167,
	-133, -110, 288, 54, -133, -36, 42, 43, -246, 58,
	-92, 19, 32, -43, -127, -88, -89, -43, -87, -2,
	11, -124, 77, 76, 93, -123, 23, -121, 61, 119,
	-43, -64, 96, 78, 94, 95, 80, 102, 101, 112,
	105, 106, 107, 108, 109, 110, 111, 103, 104, 115,
	379, 86, 87, 88, 89, 90, 91, 92, 97, 98,
	99, 100, -108, -245, -197, 379, -79, -245, 120, 121,
	-67, -67, -67, -67, -67, -67, -67, -230, 268, -245,
	61, 119, -2, -74, -43, -245, -245, -245, -245, -245,
	-245, -245, -245, -245, -83, -43, -245, 39, -254, -245,
	-254, -254, -254, -254, -254, -254, -254, -138, 116, 241,
	151, 232, -141, -140, 247, 246, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 240, 346, -245, -245,
	-245, -245, 68, -58, 27, -57, 31, 57, -53, -55,
	-54, -56, 44, 48, 50, 45, 46, 47, 51, -131,
	23, -45, -245, -130, 157, -129, 23, -127, 61, -57,
	-52, -247, 57, 11, 55, 57, -100, 208, -101, -105,
	294, 296, 86, 119, -126, -121, 61, 29, 31, 58,
	57, -160, -139, -143, -140, -145, -144, -146, -121, -141,
	-142, 240, 346, 237, 241, 238, 243, 244, 245, 116,
	242, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 246, 258, 31, 151, 230, 231, 232, 235,
	234, 236, 233, 259, 260, 261, 262, 263, 264, 265,
	266, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 225, 226, 227, 229, 228, -160, -121,
	54, 203, -121, -115, 132, 205, -115, -193, 55, 59,
	78, 59, 54, -212, 54, 19, 184, 185, 197, 23,
	-115, -57, -57, 298, -133, 133, -57, 24, 54, -57,
	59, 59, -128, -127, -119, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -112, 282, 289, -57, -34,
	22, 9, 96, 57, 18, 119, 57, -90, 25, 26,
	-91, -246, -57, -43, -43, -72, 71, 78, 72, 73,
	-123, 107, -128, -122, -119, -67, -73, -76, -79, 67,
	96, 94, 95, 80, -67, -67, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -67, -134,
	59, 61, -143, 231, -138, -141, 222, 223, 225, 226,
	227, 229, 228, 59, 241, 231, 271, 118, 247, 256,
	257, -139, -66, 61, -121, -66, -121, 383, -41, 22,
	-40, -74, -42, -43, -122, -246, 57, -246, -2, -40,
	-40, -43, -137, 116, 237, 151, 232, 226, 256, 257,
	243, 276, 230, 277, 219, 211, 216, 229, 227, 213,
	228, 212, 225, 222, 235, 234, 236, 247, 238, 245,
	244, 242, -43, -80, -67, -80, -121, -127, -40, -34,
	-81, -82, 82, -80, 19, -246, 239, -40, -41, -40,
	-40, -40, -96, 157, -57, -99, -103, -80, -46, -47,
	-47, -46, -47, 44, 44, 44, 49, 44, 49, 44,
	-54, -127, -246, -60, 52, 134, 53, -245, -129, -96,
	55, -45, -57, -104, -101, 57, 295, 297, 298, 54,
	74, -43, -122, -151, 116, 115, -175, -250, 349, 35,
	-159, -161, -164, -162, -163, -176, -165, 138, 136, 140,
	141, 146, -169, 130, 147, 71, 78, -206, 138, -209,
	54, 274, 280, 136, 147, 146, 380, 69, 139, 356,
	358, 29, 30, -154, 383, 268, -152, 277, -147, 56,
	-147, -147, 239, -148, 56, -147, -148, -147, -148, -150,
	241, -150, -150, -150, -150, 56, 56, -147, -147, -147,
	-147, -147, -156, 56, 224, -156, -156, -157, 56, -157,
	54, 55, -57, -121, 54, -57, -115, -233, 377, 378,
	-57, -191, 348, -192, 59, -133, 24, -133, -57, -215,
	-213, 8, 9, 10, -57, 198, -139, -57, -116, 127,
	124, 125, -188, 123, 274, 241, 69, 29, 15, 335,
	157, 353, 59, 158, -57, -57, -57, -133, -111, 11,
	96, -35, 45, 40, -43, -43, -128, -89, -92, 71,
	72, 73, 119, -245, -73, -67, -67, -67, -39, 152,
	77, 348, -246, 239, -155, 348, 349, -154, -231, -232,
	61, -246, -40, 57, -246, -246, -43, -246, -246, -246,
	57, 55, 57, -147, 56, -147, -147, -157, -147, 217,
	-147, 217, -157, -147, -147, -147, -147, -147, 23, 57,
	11, 57, 57, 11, 119, -246, -40, -84, -82, 84,
	-43, -246, -127, -246, -246, -246, -246, -65, 31, 36,
	-2, -245, -245, -61, 57, 12, 86, -50, -49, 54,
	55, -51, 54, -49, 44, 44, -224, 348, 130, 130,
	130, -97, -121, -61, -45, -61, -105, -106, 299, 296,
	302, 86, 59, -173, -122, 57, 34, 56, -205, 54,
	78, -167, -121, 147, -169, -169, 59, -169, 59, 130,
	59, 71, 19, -121, 9, 147, 147, -205, 61, -57,
	-202, 357, 16, 56, -207, 56, -208, 61, 62, 63,
	64, 71, -149, 70, -63, 269, -70, 325, 328, 327,
	270, -121, -127, -210, 63, 384, -153, 278, 63, -150,
	-150, -147, -150, 63, 59, -150, -150, -151, 31, -151,
	-151, -151, -151, -158, 61, -158, -155, -155, 63, -156,
	63, -57, -121, 56, 54, -57, 23, -57, 23, -190,
	-189, -122, -195, 23, 54, 57, -212, 55, -132, -125,
	138, -164, -252, 164, 146, 137, 142, 141, 59, 136,
	140, 157, -194, 164, 137, 138, 142, 141, 59, 130,
	147, 136, 140, 157, 146, -117, -118, 133, 23, 130,
	147, 157, 127, -133, -113, 94, 12, -127, -127, -40,
	41, 119, 107, -122, -41, -39, 77, -67, -67, 230,
	230, 230, 384, 57, -197, -246, -42, -235, 381, -137,
	116, 237, 151, 232, 226, 256, 243, 276, 230, 277,
	219, 211, 216, 229, 227, 213, 228, 212, 225, 222,
	235, 234, 236, 247, 238, 245, 244, 242, -134, -43,
	-150, 59, -137, -67, -67, -67, -67, -67, -122, 345,
	-87, 85, -43, 83, -98, 54, -99, -75, -77, -76,
	-245, -2, -93, -121, -97, -87, -103, -43, -43, -43,
	56, -43, 56, -245, -245, -245, -246, 57, -87, -61,
	296, 300, 301, -43, 86, -122, -175, -180, -177, -121,
	147, 10, 9, 19, 142, 136, 380, 59, 59, 59,
	-204, 146, 366, 367, 368, -206, 380, -149, 270, -245,
	56, 23, 29, 63, -207, 56, -208, -197, 379, -197,
	-245, -147, 56, -147, 56, 56, 119, 58, -151, -151,
	-150, -151, 58, 58, -151, -151, 59, 116, 58, 57,
	58, 57, 58, 57, 56, 55, 54, -179, -180, -70,
	-121, -57, 56, -2, 23, -2, 57, 86, -196, 19,
	172, 173, -57, -213, -215, -121, -251, 130, 147, -121,
	-132, -121, -132, -121, -57, -132, -121, 138, -164, 61,
	-43, -44, 11, -246, -67, 279, 279, 279, -232, -245,
	-246, -246, -246, -246, -246, 19, 57, -246, 57, 19,
	-245, -38, 340, -43, 28, -98, 57, -246, -246, -246,
	57, 119, -246, -91, -94, -121, 147, -223, -225, 371,
	372, 373, 374, 375, 376, -94, -94, -94, -130, -121,
	-91, -174, -122, 61, 63, 58, 57, -147, -178, 272,
	-147, -166, 168, 169, 31, 170, -166, 368, 147, 147,
	-245, -204, -205, -43, -94, 56, 358, 57, 58, -207,
	61, 269, 58, -121, -246, 58, 58, 58, -122, -151,
	-150, 61, -150, 63, 63, -179, -121, -57, 58, 56,
	-94, -2, -189, -174, 133, 21, 6, 8, 9, 10,
	19, 206, 23, -248, 56, -121, 146, 56, 27, -121,
	-61, -45, -246, -236, -87, 157, -67, -67, -67, -67,
	-67, -246, 61, 147, -77, 36, -2, -245, -121, -121,
	57, 58, 58, 57, -246, -246, -246, -60, -182, -184,
	348, -183, 55, 143, 69, 177, 178, 179, 180, 181,
	182, 183, -177, -90, -205, 54, 71, 171, -205, 54,
	-167, -121, -204, -43, -245, -246, 58, -43, 56, 63,
	58, -151, -151, 58, 58, 58, 56, 56, -95, 370,
	-179, 58, -168, -121, 186, -217, -218, -7, -9, -8,
	-11, -10, -12, -13, -14, -20, -3, 20, 31, 190,
	191, 196, 192, 145, 135, -21, -216, -218, -249, -121,
	105, 86, 61, -159, 57, 56, 56, -94, -245, 136,
	-85, 13, -246, -87, -246, 16, -246, -246, -246, -246,
	-37, 96, 348, 9, -75, -2, 119, -121, -225, -224,
	-181, 54, -183, 348, 56, 350, 59, -170, 86, 61,
	86, 86, 86, 86, 86, 86, 86, 9, 10, 56,
	56, -246, -43, -201, 170, 54, 58, -203, 58, 58,
	-95, -179, -180, -61, 56, 58, -61, -198, 57, 55,
	187, -218, 382, -87, -221, -121, -220, -242, -241, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	-121, -121, -121, -214, 38, 193, 194, 195, -62, -67,
	-43, -62, -218, 58, -249, -121, -249, -249, -249, -249,
	-249, -180, -180, 58, -186, -187, 157, 147, -86, 14,
	16, -246, -237, -238, -43, -246, 346, 51, 351, -99,
	-246, -121, -121, -185, -183, -121, 63, -211, 54, 74,
	63, -211, -211, -211, -211, -211, -166, -166, -168, -180,
	-201, -246, 341, 10, 9, 354, 355, 58, 207, 360,
	361, 156, 362, 170, 363, 364, -61, 58, 58, -182,
	-94, -95, -182, -199, 348, -121, -43, -219, -218, 206,
	-218, 85, -91, 57, -222, -139, 188, -211, 57, -121,
	11, 11, 11, 11, -218, 206, 83, 206, 58, 58,
	-193, -246, 57, -121, 56, -43, -74, 57, 41, 347,
	352, -245, 58, 57, -205, -205, 58, 58, -201, -166,
	-166, 348, 63, 16, 63, 63, 63, 63, 361, 156,
	363, 16, -182, -61, -182, -181, 58, -61, -181, 380,
	-218, -92, -220, -121, 189, -241, 27, -217, -216, -217,
	-227, 199, 78, -191, -187, 36, -180, -238, 41, -121,
	-183, 139, -182, 63, 63, 365, -127, -181, -182, -182,
	-43, 382, 19, -121, 85, 382, 382, 85, -228, 200,
	199, 159, 58, 348, -246, -57, -181, 119, -181, 85,
	-2, 85, 84, 202, 201, 160, 351, 56, -122, 135,
	206, -245, 352, -168, -217, -67, 156, 58, 85, -246,
	-246,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 828, 0, 530, 530, 530, 530, 530, 0, -2,
	883, 0, 0, 0, 0, -2, 520, 521, 0, 523,
	524, 1213, 1213, 1213, 1213, 1213, 530, 0, 32, 33,
	1211, 1, 3, 836, 0, 0, 534, 915, 532, 883,
	0, 0, 0, 88, 166, 0, 0, 0, 0, 0,
	881, 881, 0, 0, 0, 0, 881, 409, 410, 411,
	414, 0, 0, 0, 884, 0, 879, 0, 879, 879,
	879, 0, 479, 617, 904, 905, 906, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
	1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
	1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
	1205, 1206, 1207, 1208, 1209, 1210, 0, 0, 0, 0,
	1214, 1214, 1214, 1214, 0, 1214, 508, 497, 499, 500,
	501, 502, 1214, 517, 518, 507, 519, 522, 525, 526,
	527, 528, 529, 537, 26, 840, 915, 915, 828, 28,
	0, 535, 536, 0, 548, 552, 0, 627, 915, 632,
	634, -2, -2, -2, 0, 673, 674, 675, 676, 677,
	678, 915, 915, 915, 915, 915, 915, 915, 705, 706,
	707, 708, 0, 810, 804, 812, 813, 814, 815, 816,
	817, 818, 636, 637, 0, 860, 915, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, 741, 741,
	741, 741, 741, 741, 741, 741, 0, 0, 0, 0,
	0, 916, 531, 0, 0, 564, 566, 567, 568, 598,
	0, 600, 0, 0, 40, 44, 0, 1177, 864, -2,
	-2, 0, 0, 0, 902, 903, -2, 1084, -2, 900,
	901, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 0,
	167, 181, 181, 0, 0, 881, 0, 0, 881, 154,
	0, 0, 0, 0, 0, 0, 881, 0, 415, 412,
	413, 163, 0, 1214, 0, 0, 0, 0, 0, 0,
	0, 478, 0, 480, 1214, 1214, 1214, 1214, 1214, 1214,
	1214, 1214, 489, 1215, 1216, 490, 491, 492, 1214, 1214,
	494, 0, 509, 0, 503, 540, 538, 539, 27, 1212,
	22, 0, 0, 837, 0, 829, 830, 833, 836, 26,
	0, 549, 915, 915, 0, 553, 0, 555, 556, 0,
	630, 915, 0, 0, 915, 915, 915, 915, 915, 915,
	915, 915, 915, 915, 915, 915, 915, 915, 915, 0,
	0, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 633, 0, 809, 181, 647, 0, 0, 0,
	696, 697, 698, 699, 700, 701, 702, 709, 0, -2,
	811, 0, 26, 0, 671, 915, 915, 915, 915, 915,
	915, 0, 915, 540, 0, 796, 0, 0, 732, 0,
	733, 734, 735, 736, 737, 738, 739, 740, 787, 0,
	789, 790, 791, 792, 793, 794, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 287, 288, 915, -2,
	915, 915, 533, 42, 0, 616, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 608, 0, 0, 0, 0,
	599, 0, 0, 619, 1139, 601, 0, 603, 604, -2,
	0, 0, 0, 38, 39, 0, 45, 1177, 47, 73,
	0, 0, 915, 0, 345, 876, 877, 878, 874, 422,
	0, 173, 339, 335, 176, 177, 178, 179, 180, 322,
	260, -2, -2, -2, -2, -2, -2, -2, -2, 322,
	-2, -2, -2, -2, -2, 342, -2, -2, -2, -2,
	-2, 308, -2, 1099, 0, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 174, 0,
	0, 0, 0, 0, 881, 0, 0, 157, 0, 1214,
	0, 1214, 0, 0, 0, 116, 117, 118, 0, 181,
	0, 164, 0, 0, 445, 0, 473, 880, 0, 1214,
	476, 477, 618, 907, 908, 481, 482, 483, 484, 485,
	486, 487, 488, 493, 496, 510, 504, 505, 498, 542,
	541, 841, 0, 915, 915, 0, 915, 832, 834, 835,
	840, 29, 24, 628, 629, 631, 648, 0, 650, 652,
	554, 550, 0, 805, -2, 638, 639, 667, 668, 669,
	0, 915, 915, 915, 665, 643, 0, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 693,
	752, 753, 694, 0, 704, 322, 324, 324, 324, 326,
	326, 277, 278, 0, 322, 322, 253, 254, -2, -2,
	-2, 339, 691, 250, 0, 692, 703, 0, 0, 915,
	0, 0, 546, 552, 807, 670, 915, 859, 26, 0,
	0, 0, 0, -2, -2, -2, -2, -2, -2, 761,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 0, 675, 0, 0, 804, 0, 0, 915,
	802, 799, 915, 0, 0, 742, 788, 0, 0, 545,
	0, 0, 0, 0, 615, 623, 861, 0, 565, 594,
	596, 0, 591, 606, 607, 609, 0, 611, 0, 613,
	614, 569, 570, 571, 0, 0, 0, 0, 602, 623,
	0, 623, 41, 865, 46, 0, 0, 76, 77, 866,
	867, 868, 0, 870, 346, 0, 165, 424, 0, 427,
	168, 169, 170, 171, 172, 0, 416, -2, 1144, 1167,
	1102, 0, 0, 383, 384, 183, 0, 185, 0, 187,
	0, 189, 190, 0, 192, 194, 416, 0, 0, 0,
	0, 0, 0, 182, 0, 341, 337, 336, 259, 0,
	342, 342, 322, 342, 0, 342, 342, 296, 297, 345,
	0, 345, 345, 345, 345, 0, 0, 332, 332, 282,
	283, 284, 271, 0, 324, 273, 274, 275, 0, 276,
	0, 0, 0, 0, 0, 0, 0, 83, 84, 85,
	0, 98, 0, 155, 156, 99, 882, 100, 139, 0,
	123, 120, 121, 122, 0, 119, 105, 0, 1213, 152,
	0, 895, 446, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 0, 0, 472, 1214, 475, 513, 0,
	0, 915, 543, 0, 838, 839, 0, 831, 23, 649,
	651, 653, 0, -2, 640, 665, 644, 0, 641, 915,
	915, 0, 635, -2, 252, 0, 0, 258, 0, 918,
	250, 710, 0, 915, 557, 714, 672, -2, 715, 716,
	0, 0, 915, 754, 1211, 342, 758, 759, 762, 764,
	765, 767, 772, 778, 779, 782, 785, 786, 0, 915,
	915, 915, 915, 915, 0, 0, 828, 0, 800, 915,
	0, 730, 731, 743, 744, 745, 746, 853, 0, 0,
	-2, 0, 0, 828, 0, 915, 915, 588, 595, 915,
	0, 589, 915, 590, 610, 612, 581, 0, 0, 0,
	0, 0, 586, 828, 623, 37, 74, 75, 0, 0,
	81, 915, 347, 0, 428, 422, 426, 0, 393, 0,
	0, 0, 419, 374, 0, 0, 377, 0, 379, -2,
	405, 184, 0, 0, 0, 191, 193, 0, 197, 198,
	0, 226, 0, 0, 208, 0, 211, -2, 214, 215,
	216, 250, 218, 219, 220, 1133, 223, 322, 322, 246,
	1105, 0, 0, 224, 225, 340, 175, 338, 0, 345,
	345, 342, 345, 0, 0, 345, 345, 298, 0, 299,
	300, 301, 302, 0, 320, 0, 280, 281, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 158,
	159, 0, 142, 0, 0, 0, 0, 0, 433, 0,
	418, 437, 1213, 0, 153, 460, 461, 462, 463, 464,
	465, 466, 1213, 0, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 457, 0, 1213, 896, 897, 898,
	899, 0, 0, 474, 495, 0, 915, 511, 512, 562,
	842, 0, 551, 806, 0, 642, 915, 666, 645, 0,
	0, 0, 917, 0, 920, 711, 547, 712, 0, 0,
	322, 322, 757, 322, 326, 760, 322, 763, 322, 766,
	768, 769, 770, 771, 326, 773, 774, 775, 776, 777,
	322, 322, 780, 781, 322, 784, 322, 322, 0, 0,
	755, 756, 0, 0, 0, 0, 0, 0, 805, 0,
	797, 729, 803, 915, 30, 0, 853, 843, 855, 857,
	915, 26, 0, 849, 0, 836, 862, 624, 863, 592,
	0, 597, 0, 0, 0, 0, 600, 0, 836, 36,
	78, 79, 80, 869, 0, 429, 425, 0, 387, 322,
	322, 0, 0, 0, 0, 0, 0, 375, 376, 378,
	381, 405, 406, 407, 207, 186, 416, 188, 0, 915,
	0, 0, 227, 0, 0, 0, 0, 213, 181, 217,
	0, 242, 0, 244, 0, 0, 0, 323, 289, 290,
	345, 291, 330, 331, 292, 293, 343, 344, 342, 0,
	342, 0, 327, 0, 0, 0, 0, 0, 385, 386,
	322, 0, 0, -2, 0, -2, 0, 0, 0, 0,
	140, 141, 0, 124, 0, 107, 0, 458, 459, 419,
	439, 0, 440, 442, 443, 444, 0, 418, 438, 514,
	515, 623, 0, 713, 646, 695, 333, 334, 919, 0,
	717, 720, 718, 719, 721, 915, 915, 724, 915, 915,
	915, 0, 0, 801, 0, 31, 0, 858, -2, 0,
	0, 0, 43, 34, 0, 583, 584, 0, 573, 575,
	576, 577, 578, 579, 580, 0, 0, 0, 619, 587,
	35, 423, 430, 431, 432, 349, 0, 833, 391, 392,
	390, 416, 399, 400, 0, 0, 416, 417, 418, 405,
	915, 382, 0, 0, 0, 915, 204, 0, 209, 0,
	250, 0, 212, 180, 221, 243, 245, 247, 0, 295,
	345, 321, 345, 0, 0, 0, 0, 0, 625, 0,
	0, -2, 160, 161, 0, 143, 144, 145, 146, 147,
	0, 0, 0, 106, 109, 0, 0, 0, 0, 419,
	819, 563, 558, 0, 0, 0, 0, 0, 0, 0,
	747, 728, 798, 0, 856, 0, -2, 0, 851, 850,
	0, 593, 572, 0, 620, 621, 622, 571, 371, 350,
	0, 352, 0, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 388, 389, 394, 0, 401, 402, 395, 0,
	0, 419, 0, 0, 915, 248, 199, 0, 228, 0,
	0, 310, 311, 325, 328, 625, 0, 0, 623, 0,
	0, 623, 148, 420, 0, 0, 67, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 828, 0, 530, 0,
	0, 0, 60, 915, 915, 871, 103, 125, 0, -2,
	109, 109, -2, 109, 109, 0, 0, 0, 0, 0,
	821, 0, 559, 0, 560, 915, 723, 722, 725, 726,
	0, 0, 0, 0, 846, 26, 0, 585, 574, 582,
	348, 0, 353, 0, 0, 0, 356, 0, 368, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 195, 0, 0, 0, 0, 206, 210,
	623, 0, 0, 349, 0, 625, 349, 150, 0, 915,
	0, 68, 0, 836, 48, -2, 50, 0, 921, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	55, 56, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 126, 108, 110, -2, 111, 112, 113, 114,
	115, 0, 0, 154, 0, 468, 0, 0, 25, 915,
	915, 561, 824, 825, 827, 727, 0, 0, 0, 854,
	-2, 852, 372, 0, 354, 359, 357, 360, 369, 370,
	361, 362, 363, 364, 365, 366, 416, 416, 0, 0,
	404, 248, 249, 0, 0, 202, 203, 205, 0, 0,
	0, 0, 0, 0, 239, 0, 349, 623, 349, 371,
	0, 623, 371, 101, 0, 421, 149, 102, 137, 0,
	69, 104, 840, 0, 0, 52, 54, 872, 0, 58,
	61, 62, 63, 64, 65, 0, 0, 0, 434, 909,
	157, 467, 0, 0, 0, 822, 820, 915, 748, 0,
	751, 0, 351, 0, 396, 397, 0, 349, 196, 200,
	201, 0, 230, 0, 232, 233, 234, 235, 236, 237,
	238, 0, 371, 349, 92, 90, 626, 349, 94, 915,
	0, 136, 51, 181, 0, 922, 0, 0, 0, 0,
	912, 910, 0, 441, 469, 0, 0, 826, 749, 0,
	355, 0, 371, 229, 231, 240, 0, 89, 93, 371,
	151, 0, 0, 59, 66, 0, 0, 71, 436, 0,
	911, 0, 435, 0, 373, 0, 403, 0, 91, 138,
	-2, 0, 0, 913, 914, 0, 0, 0, 241, 70,
	0, 915, 750, 0, 0, 0, 0, 398, 72, 470,
	471,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 382,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 383, 3, 384, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:421
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:426
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:427
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:431
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:454
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:462
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:468
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:475
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:481
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:485
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:491
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:495
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:502
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:514
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
			yyVAL.str = InsertStr
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:530
		{
			yyVAL.str = ReplaceStr
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:536
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:542
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:546
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:550
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:555
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:556
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:560
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:564
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:569
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:573
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:579
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:583
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:587
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:591
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:597
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:601
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:614
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:618
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:624
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:629
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:633
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:639
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:646
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:653
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:660
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:668
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:678
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:682
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:686
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:690
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:694
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:700
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:707
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:717
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:721
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:725
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:732
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:741
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:749
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:760
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:764
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:770
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:774
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:778
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:784
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:788
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:792
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:796
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:801
		{
			yyVAL.str = ""
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:805
		{
			yyVAL.str = yyDollar[3].str
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:811
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:815
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:821
		{
			yyVAL.str = SessionStr
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:825
		{
			yyVAL.str = GlobalStr
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:831
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 89:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:836
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:856
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 91:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:876
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 92:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:897
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 93:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:913
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 94:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:930
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:949
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:957
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:       CreateSqlSecurityStr,
				SecurityType: yyDollar[3].str,
				Name:         yyDollar[6].tableName.ToViewName(),
				Definition:   yyDollar[8].selStmt,
			}}
		}
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:966
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:974
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:982
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:986
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:990
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 102:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1002
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 103:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1013
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 104:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1024
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1035
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 106:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1046
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1051
		{
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1052
		{
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1056
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1057
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1058
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1059
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1060
		{
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1061
		{
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1062
		{
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1066
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1070
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1074
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1078
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1084
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1088
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1092
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1098
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1102
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1108
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1112
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1118
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1130
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1142
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1149
		{
			yyVAL.bytes = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1153
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1157
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1162
		{
			yyVAL.bytes = nil
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1166
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1170
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1174
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1178
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1182
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1187
		{
			yyVAL.expr = nil
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1191
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1196
		{
			yyVAL.expr = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1200
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1205
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1209
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1214
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1218
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1224
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1229
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1234
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1240
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1245
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1251
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1256
		{
			yyVAL.bytes = nil
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1260
		{
			yyVAL.bytes = nil
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1266
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1273
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1279
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1283
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1288
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1292
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1296
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1300
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1304
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1310
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1315
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1321
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1332
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1337
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1343
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1356
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1361
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1366
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1371
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1377
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1382
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1387
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1392
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1397
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1402
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1407
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1412
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1417
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1426
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1436
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1441
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1446
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1453
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1460
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1468
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1473
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1479
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1485
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1491
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1497
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1504
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1508
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 210:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1512
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1516
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1520
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1526
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1530
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1534
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1538
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1542
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1546
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1550
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1554
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1558
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1562
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1568
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1574
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1580
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1586
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1590
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1595
		{
			yyVAL.sequence = &Sequence{}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1599
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1604
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1609
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1614
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1619
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1624
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1629
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1634
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1639
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1644
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1649
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1654
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 241:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1659
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1666
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1670
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1674
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1678
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1682
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1686
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1691
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1695
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1700
		{
			yyVAL.bytes = nil
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1714
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1719
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 311:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1986
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1991
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1996
		{
			yyVAL.optVal = nil
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2000
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2005
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 325:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2009
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2017
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2021
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2027
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2035
		{
			yyVAL.optVal = nil
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2039
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2043
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2052
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2056
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2060
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2065
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2069
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2074
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2078
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2083
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2087
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2091
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2096
		{
			yyVAL.str = ""
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2100
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2104
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2109
		{
			yyVAL.str = ""
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2113
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2117
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2123
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2128
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2132
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2136
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2142
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2146
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2152
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2156
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2162
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2166
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2171
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2175
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2179
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2183
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2187
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2191
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2195
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2199
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2203
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2209
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2213
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2219
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2223
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2229
		{
			yyVAL.indexPartition = nil
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2233
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2237
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2243
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2247
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2251
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2255
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2259
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2263
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2267
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2271
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2275
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2281
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2285
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2291
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2296
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2302
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2306
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2312
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2317
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2321
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2331
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2336
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2343
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 396:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2350
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 397:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2357
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 398:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2366
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2378
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2382
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2386
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2390
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 403:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2396
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 404:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2407
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2417
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2421
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2425
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2431
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2435
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2439
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2443
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2447
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2451
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2457
		{
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2458
		{
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2462
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2466
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2471
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2478
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2482
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2489
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2493
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2499
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2503
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2508
		{
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2509
		{
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2513
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2517
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2523
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2527
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2531
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 433:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2537
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 434:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2541
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 435:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2555
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 436:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2569
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2588
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2597
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 439:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2606
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 440:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2610
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 441:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2614
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 442:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2627
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2637
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 444:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2642
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2647
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2651
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 467:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2683
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2689
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2693
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 470:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2699
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 471:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2703
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2709
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2715
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2723
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2728
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2736
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2740
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2746
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2750
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2755
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2761
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2765
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2769
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2774
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2778
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2782
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2786
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2790
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2794
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2798
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2802
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2806
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2810
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2814
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2818
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2828
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2832
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2836
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2840
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2844
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2848
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2852
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2862
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2868
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2872
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2878
		{
			yyVAL.str = ""
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2882
		{
			yyVAL.str = "extended "
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2888
		{
			yyVAL.str = ""
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2892
		{
			yyVAL.str = "full "
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2898
		{
			yyVAL.str = ""
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2902
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2906
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2912
		{
			yyVAL.showFilter = nil
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2916
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2920
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2926
		{
			yyVAL.str = ""
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2930
		{
			yyVAL.str = SessionStr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2934
		{
			yyVAL.str = GlobalStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2940
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2944
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2950
		{
			yyVAL.statement = &Begin{}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2954
		{
			yyVAL.statement = &Begin{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2960
		{
			yyVAL.statement = &Commit{}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2966
		{
			yyVAL.statement = &Rollback{}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2972
		{
			yyVAL.statement = &OtherRead{}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2976
		{
			yyVAL.statement = &OtherRead{}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2980
		{
			yyVAL.statement = &OtherRead{}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2984
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2988
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2993
		{
			setAllowComments(yylex, true)
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2997
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3003
		{
			yyVAL.bytes2 = nil
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3007
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3013
		{
			yyVAL.str = UnionStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3017
		{
			yyVAL.str = UnionAllStr
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3021
		{
			yyVAL.str = UnionDistinctStr
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3026
		{
			yyVAL.str = ""
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3030
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3034
		{
			yyVAL.str = SQLCacheStr
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3039
		{
			yyVAL.str = ""
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3043
		{
			yyVAL.str = DistinctStr
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3048
		{
			yyVAL.str = ""
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3052
		{
			yyVAL.str = StraightJoinHint
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3057
		{
			yyVAL.selectExprs = nil
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3061
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3067
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3071
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3077
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3081
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3085
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3089
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3094
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3098
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3102
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3109
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3114
		{
			yyVAL.overExpr = nil
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3118
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3122
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3126
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 561:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3130
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy, OrderBy: yyDollar[4].orderBy}
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3135
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3139
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3145
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3149
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3159
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3163
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3167
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3172
		{
			yyVAL.strs = []string{}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3176
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3182
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3186
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3192
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3196
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3200
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3218
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 582:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3222
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3228
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3233
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3237
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3243
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3247
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3260
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3264
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3268
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3272
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3278
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3280
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3284
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3286
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3290
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3292
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3295
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3297
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3300
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3304
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3308
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3315
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3321
		{
			yyVAL.str = JoinStr
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3325
		{
			yyVAL.str = JoinStr
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3329
		{
			yyVAL.str = JoinStr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3335
		{
			yyVAL.str = StraightJoinStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3341
		{
			yyVAL.str = LeftJoinStr
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3345
		{
			yyVAL.str = LeftJoinStr
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3349
		{
			yyVAL.str = RightJoinStr
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3353
		{
			yyVAL.str = RightJoinStr
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3359
		{
			yyVAL.str = NaturalJoinStr
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3363
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3373
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3377
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3383
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3387
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3392
		{
			yyVAL.indexHints = nil
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3396
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3400
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3404
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3409
		{
			yyVAL.expr = nil
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3413
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3418
		{
			yyVAL.columns = nil
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3422
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3428
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3432
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3436
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3440
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3444
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3448
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3452
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3458
		{
			yyVAL.str = ""
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3462
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3468
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3472
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3478
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3482
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3486
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3490
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3494
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3498
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3502
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3506
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 646:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3510
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3514
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3520
		{
			yyVAL.str = IsNullStr
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3524
		{
			yyVAL.str = IsNotNullStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3528
		{
			yyVAL.str = IsTrueStr
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3532
		{
			yyVAL.str = IsNotTrueStr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3536
		{
			yyVAL.str = IsFalseStr
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3540
		{
			yyVAL.str = IsNotFalseStr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3546
		{
			yyVAL.str = EqualStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3550
		{
			yyVAL.str = LessThanStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3554
		{
			yyVAL.str = GreaterThanStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3558
		{
			yyVAL.str = LessEqualStr
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3562
		{
			yyVAL.str = GreaterEqualStr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3566
		{
			yyVAL.str = NotEqualStr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3570
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3574
		{
			yyVAL.str = PosixRegexStr
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3578
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3582
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3586
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3591
		{
			yyVAL.expr = nil
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3595
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3601
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3605
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3609
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3615
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3621
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3625
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3631
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3635
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3639
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3643
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3647
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3651
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3655
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3659
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3663
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3667
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3671
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3675
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3679
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3683
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3687
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3691
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3695
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3699
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3703
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3707
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3711
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3715
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 695:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3719
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3723
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3727
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3731
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3739
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3753
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3757
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3761
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3769
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3777
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3785
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3795
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 711:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3799
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3803
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 713:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3807
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3811
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3821
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3825
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 717:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3829
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 718:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3833
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 719:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3837
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 720:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3841
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 721:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3845
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 722:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3849
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 723:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3853
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 724:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3857
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 725:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3861
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 726:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3865
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 727:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3869
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 728:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3873
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3877
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3881
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3886
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3896
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3900
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3904
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3908
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3913
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3918
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3923
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3928
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3932
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3946
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3950
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3954
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3958
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3964
		{
			yyVAL.str = ""
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3968
		{
			yyVAL.str = BooleanModeStr
		}
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3972
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 750:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3976
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3980
		{
			yyVAL.str = QueryExpansionStr
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3986
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3990
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3996
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4000
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4004
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4008
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4012
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4016
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4022
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4026
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4030
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4034
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4038
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4042
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4046
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4050
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4054
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4058
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4062
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4066
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4070
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4074
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4078
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4082
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4086
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4090
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4094
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4098
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4102
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4106
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4110
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4114
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4118
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4122
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4126
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4132
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4136
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4140
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4144
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4148
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4152
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4156
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4160
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4165
		{
			yyVAL.expr = nil
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4169
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4174
		{
			yyVAL.str = string("")
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4178
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4184
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4188
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 801:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4194
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4199
		{
			yyVAL.expr = nil
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4203
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4209
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4213
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 806:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4217
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4223
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4229
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4233
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4237
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4242
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4247
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4251
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4255
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4259
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4263
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4267
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4271
		{
			yyVAL.expr = &NullVal{}
		}
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4276
		{
			yyVAL.exprs = nil
		}
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4280
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4285
		{
			yyVAL.expr = nil
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4289
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4294
		{
			yyVAL.partitionBy = nil
		}
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4298
		{
			yyVAL.partitionBy = yyDollar[3].partitionBy
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4304
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4308
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4314
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4319
		{
			yyVAL.orderBy = nil
		}
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4323
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4329
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4333
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4339
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4344
		{
			yyVAL.str = AscScr
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4348
		{
			yyVAL.str = AscScr
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4352
		{
			yyVAL.str = DescScr
		}
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4357
		{
			yyVAL.limit = nil
		}
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4361
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 838:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4365
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 839:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4369
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4374
		{
			yyVAL.str = ""
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4378
		{
			yyVAL.str = ForUpdateStr
		}
	case 842:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4382
		{
			yyVAL.str = ShareModeStr
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4395
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4399
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4403
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 846:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4408
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 847:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4412
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 848:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4416
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4423
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4427
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4431
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 852:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4435
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4440
		{
			yyVAL.updateExprs = nil
		}
	case 854:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4444
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4450
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4454
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4460
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4464
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4470
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4476
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4486
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4490
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4496
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4502
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4506
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4512
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4516
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4520
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 869:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4525
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4529
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4535
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4541
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4548
		{
			yyVAL.bytes = []byte("charset")
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4555
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4559
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4563
		{
			yyVAL.expr = &Default{}
		}
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4568
		{
			yyVAL.byt = 0
		}
	case 880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4570
		{
			yyVAL.byt = 1
		}
	case 881:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4573
		{
			yyVAL.empty = struct{}{}
		}
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4575
		{
			yyVAL.empty = struct{}{}
		}
	case 883:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4578
		{
			yyVAL.str = ""
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4580
		{
			yyVAL.str = IgnoreStr
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4584
		{
			yyVAL.empty = struct{}{}
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4586
		{
			yyVAL.empty = struct{}{}
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4588
		{
			yyVAL.empty = struct{}{}
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4590
		{
			yyVAL.empty = struct{}{}
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4592
		{
			yyVAL.empty = struct{}{}
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4594
		{
			yyVAL.empty = struct{}{}
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4596
		{
			yyVAL.empty = struct{}{}
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4598
		{
			yyVAL.empty = struct{}{}
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4600
		{
			yyVAL.empty = struct{}{}
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4602
		{
			yyVAL.empty = struct{}{}
		}
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4605
		{
			yyVAL.empty = struct{}{}
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4607
		{
			yyVAL.empty = struct{}{}
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4609
		{
			yyVAL.empty = struct{}{}
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4613
		{
			yyVAL.empty = struct{}{}
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4615
		{
			yyVAL.empty = struct{}{}
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4619
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4623
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4630
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4636
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4640
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4645
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4652
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 909:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4658
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4662
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4666
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4672
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4676
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 914:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4680
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4686
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4690
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 917:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4697
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4704
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4708
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4715
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4721
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4725
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5041
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5050
		{
			decNesting(yylex)
		}
	case 1213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:5055
		{
			forceEOF(yylex)
		}
	case 1214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:5060
		{
			forceEOF(yylex)
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5064
		{
			forceEOF(yylex)
		}
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5068
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
