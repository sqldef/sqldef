// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const STATUS = 57489
const VARIABLES = 57490
const RESTRICT = 57491
const CASCADE = 57492
const NO = 57493
const ACTION = 57494
const PERMISSIVE = 57495
const RESTRICTIVE = 57496
const PUBLIC = 57497
const CURRENT_USER = 57498
const SESSION_USER = 57499
const PAD_INDEX = 57500
const FILLFACTOR = 57501
const IGNORE_DUP_KEY = 57502
const STATISTICS_NORECOMPUTE = 57503
const STATISTICS_INCREMENTAL = 57504
const ALLOW_ROW_LOCKS = 57505
const ALLOW_PAGE_LOCKS = 57506
const BEFORE = 57507
const AFTER = 57508
const EACH = 57509
const ROW = 57510
const SCROLL = 57511
const CURSOR = 57512
const OPEN = 57513
const CLOSE = 57514
const FETCH = 57515
const PRIOR = 57516
const FIRST = 57517
const LAST = 57518
const DEALLOCATE = 57519
const INSTEAD = 57520
const OF = 57521
const DEFERRABLE = 57522
const INITIALLY = 57523
const IMMEDIATE = 57524
const DEFERRED = 57525
const CONCURRENTLY = 57526
const SQL = 57527
const SECURITY = 57528
const BEGIN = 57529
const START = 57530
const TRANSACTION = 57531
const COMMIT = 57532
const ROLLBACK = 57533
const BIT = 57534
const TINYINT = 57535
const SMALLINT = 57536
const SMALLSERIAL = 57537
const MEDIUMINT = 57538
const INT = 57539
const INTEGER = 57540
const SERIAL = 57541
const BIGINT = 57542
const BIGSERIAL = 57543
const INTNUM = 57544
const REAL = 57545
const DOUBLE = 57546
const PRECISION = 57547
const FLOAT_TYPE = 57548
const DECIMAL = 57549
const NUMERIC = 57550
const SMALLMONEY = 57551
const MONEY = 57552
const TIME = 57553
const TIMESTAMP = 57554
const DATETIME = 57555
const YEAR = 57556
const DATETIMEOFFSET = 57557
const DATETIME2 = 57558
const SMALLDATETIME = 57559
const CHAR = 57560
const VARCHAR = 57561
const VARYING = 57562
const BOOL = 57563
const CHARACTER = 57564
const VARBINARY = 57565
const NCHAR = 57566
const NVARCHAR = 57567
const NTEXT = 57568
const UUID = 57569
const TEXT = 57570
const TINYTEXT = 57571
const MEDIUMTEXT = 57572
const LONGTEXT = 57573
const CITEXT = 57574
const BLOB = 57575
const TINYBLOB = 57576
const MEDIUMBLOB = 57577
const LONGBLOB = 57578
const JSON = 57579
const JSONB = 57580
const ENUM = 57581
const GEOMETRY = 57582
const POINT = 57583
const LINESTRING = 57584
const POLYGON = 57585
const GEOMETRYCOLLECTION = 57586
const MULTIPOINT = 57587
const MULTILINESTRING = 57588
const MULTIPOLYGON = 57589
const VARIADIC = 57590
const ARRAY = 57591
const NOW = 57592
const GETDATE = 57593
const BPCHAR = 57594
const TEXT_PATTERN_OPS = 57595
const NULLX = 57596
const AUTO_INCREMENT = 57597
const APPROXNUM = 57598
const SIGNED = 57599
const UNSIGNED = 57600
const ZEROFILL = 57601
const ZONE = 57602
const AUTOINCREMENT = 57603
const DATABASES = 57604
const TABLES = 57605
const VSCHEMA_TABLES = 57606
const EXTENDED = 57607
const FULL = 57608
const PROCESSLIST = 57609
const NAMES = 57610
const CHARSET = 57611
const GLOBAL = 57612
const SESSION = 57613
const ISOLATION = 57614
const LEVEL = 57615
const READ = 57616
const WRITE = 57617
const ONLY = 57618
const REPEATABLE = 57619
const COMMITTED = 57620
const UNCOMMITTED = 57621
const SERIALIZABLE = 57622
const NEW = 57623
const CONCAT_NULL_YIELDS_NULL = 57624
const CURSOR_CLOSE_ON_COMMIT = 57625
const QUOTED_IDENTIFIER = 57626
const ARITHABORT = 57627
const FMTONLY = 57628
const NOCOUNT = 57629
const NOEXEC = 57630
const NUMERIC_ROUNDABORT = 57631
const ANSI_DEFAULTS = 57632
const ANSI_NULL_DFLT_OFF = 57633
const ANSI_NULL_DFLT_ON = 57634
const ANSI_NULLS = 57635
const ANSI_PADDING = 57636
const ANSI_WARNINGS = 57637
const FORCEPLAN = 57638
const SHOWPLAN_ALL = 57639
const SHOWPLAN_TEXT = 57640
const SHOWPLAN_XML = 57641
const IMPLICIT_TRANSACTIONS = 57642
const REMOTE_PROC_TRANSACTIONS = 57643
const XACT_ABORT = 57644
const CURRENT_TIMESTAMP = 57645
const DATABASE = 57646
const CURRENT_DATE = 57647
const CURRENT_TIME = 57648
const LOCALTIME = 57649
const LOCALTIMESTAMP = 57650
const UTC_DATE = 57651
const UTC_TIME = 57652
const UTC_TIMESTAMP = 57653
const REPLACE = 57654
const CONVERT = 57655
const CAST = 57656
const SUBSTR = 57657
const SUBSTRING = 57658
const GROUP_CONCAT = 57659
const SEPARATOR = 57660
const INHERIT = 57661
const LEAD = 57662
const LAG = 57663
const MATCH = 57664
const AGAINST = 57665
const BOOLEAN = 57666
const LANGUAGE = 57667
const WITH = 57668
const WITHOUT = 57669
const PARSER = 57670
const QUERY = 57671
const EXPANSION = 57672
const UNUSED = 57673
const VIRTUAL = 57674
const STORED = 57675
const GENERATED = 57676
const ALWAYS = 57677
const IDENTITY = 57678
const SEQUENCE = 57679
const INCREMENT = 57680
const MINVALUE = 57681
const CACHE = 57682
const CYCLE = 57683
const OWNED = 57684
const NONE = 57685
const CLUSTERED = 57686
const NONCLUSTERED = 57687
const REPLICATION = 57688
const COLUMNSTORE = 57689
const INCLUDE = 57690
const HOLDLOCK = 57691
const NOLOCK = 57692
const NOWAIT = 57693
const PAGLOCK = 57694
const ROWLOCK = 57695
const TABLELOCK = 57696
const DEFINER = 57697
const INVOKER = 57698
const TYPECAST = 57699
const CHECK = 57700
const OVER = 57701

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	130, 391,
	-2, 143,
	-1, 401,
	59, 363,
	-2, 360,
	-1, 421,
	119, 778,
	-2, 233,
	-1, 441,
	119, 777,
	-2, 773,
	-1, 535,
	119, 778,
	-2, 233,
	-1, 557,
	266, 787,
	-2, 686,
	-1, 606,
	266, 787,
	-2, 431,
	-1, 638,
	5, 33,
	-2, 13,
	-1, 644,
	5, 33,
	-2, 15,
	-1, 777,
	266, 787,
	-2, 431,
	-1, 925,
	119, 780,
	-2, 776,
	-1, 935,
	266, 787,
	-2, 302,
	-1, 1013,
	266, 787,
	-2, 431,
	-1, 1072,
	58, 95,
	-2, 191,
	-1, 1075,
	58, 95,
	-2, 191,
	-1, 1122,
	5, 34,
	-2, 557,
	-1, 1199,
	5, 33,
	-2, 14,
	-1, 1252,
	58, 95,
	-2, 162,
	-1, 1381,
	86, 775,
	-2, 763,
	-1, 1465,
	55, 47,
	57, 47,
	-2, 49,
	-1, 1626,
	5, 33,
	-2, 734,
	-1, 1651,
	5, 33,
	-2, 56,
	-1, 1720,
	5, 34,
	-2, 735,
	-1, 1750,
	5, 33,
	-2, 737,
	-1, 1771,
	5, 34,
	-2, 738,
}

const yyPrivate = 57344

const yyLast = 8587

var yyAct = [...]int16{
	537, 1644, 1729, 1678, 740, 1557, 1575, 518, 1679, 1675,
	1354, 1488, 30, 1617, 1025, 651, 827, 39, 40, 1353,
	1558, 988, 1055, 1649, 1081, 1501, 1636, 739, 1500, 1375,
	1490, 63, 63, 63, 57, 125, 128, 1475, 1361, 1550,
	1041, 1372, 547, 1044, 1215, 1193, 633, 1358, 1212, 879,
	854, 673, 1486, 1118, 842, 1188, 30, 1183, 1362, 26,
	866, 388, 455, 934, 1266, 1021, 56, 597, 521, 971,
	974, 1112, 511, 889, 924, 385, 221, 187, 64, 1378,
	529, 1172, 800, 1006, 632, 203, 192, 59, 58, 516,
	767, 507, 804, 391, 1251, 235, 236, 498, 123, 124,
	418, 517, 420, 133, 153, 47, 426, 148, 170, 985,
	1287, 444, 851, 189, 922, 1547, 9, 1173, 185, 1457,
	545, 698, 701, 702, 703, 704, 705, 698, 227, 598,
	505, 33, 708, 758, 231, 232, 1022, 49, 679, 43,
	584, 63, 129, 416, 131, 1773, 831, 1710, 383, 1769,
	1317, 581, 142, 508, 509, 194, 50, 51, 199, 392,
	44, 201, 45, 205, 206, 207, 208, 1085, 43, 786,
	1315, 1316, 406, 1086, 43, 243, 993, 994, 211, 212,
	213, 214, 215, 1667, 1437, 1645, 437, 706, 707, 699,
	700, 701, 702, 703, 704, 705, 698, 223, 696, 706,
	707, 699, 700, 701, 702, 703, 704, 705, 698, 641,
	1430, 1068, 1058, 1057, 150, 1762, 244, 246, 467, 468,
	1348, 1115, 1709, 1059, 1305, 188, 474, 381, 1730, 1731,
	1732, 1733, 1734, 1735, 1060, 1104, 1666, 1423, 52, 1655,
	1700, 410, 1654, 487, 1502, 1656, 1503, 43, 1321, 441,
	43, 45, 43, 43, 1585, 43, 1701, 1702, 1586, 1587,
	1323, 1409, 245, 43, 817, 816, 430, 43, 459, 460,
	461, 462, 446, 44, 191, 45, 734, 1297, 824, 204,
	448, 982, 449, 450, 193, 453, 454, 428, 1761, 641,
	1285, 1068, 1058, 1057, 196, 625, 624, 1318, 219, 692,
	1134, 695, 43, 1059, 1705, 216, 440, 709, 710, 711,
	712, 713, 714, 715, 1060, 693, 694, 691, 716, 717,
	718, 719, 697, 696, 706, 707, 699, 700, 701, 702,
	703, 704, 705, 698, 1132, 463, 466, 500, 1066, 1598,
	1394, 1203, 130, 1601, 486, 43, 434, 1612, 1065, 43,
	1520, 36, 697, 696, 706, 707, 699, 700, 701, 702,
	703, 704, 705, 698, 548, 1602, 508, 509, 1597, 506,
	699, 700, 701, 702, 703, 704, 705, 698, 485, 241,
	383, 1282, 126, 708, 1436, 1496, 1438, 33, 499, 708,
	1599, 1061, 1062, 1064, 1662, 1661, 1202, 1063, 431, 1517,
	433, 432, 647, 648, 583, 697, 696, 706, 707, 699,
	700, 701, 702, 703, 704, 705, 698, 1040, 1066, 872,
	437, 37, 1241, 880, 220, 135, 1551, 1747, 1065, 490,
	849, 828, 1286, 165, 497, 32, 658, 492, 504, 684,
	641, 1260, 1068, 1058, 1057, 135, 708, 1319, 1320, 1322,
	1324, 1325, 681, 659, 1059, 164, 1086, 204, 708, 495,
	33, 1536, 31, 33, 586, 1060, 787, 400, 166, 1519,
	708, 1061, 1062, 1064, 688, 1420, 635, 1063, 676, 415,
	134, 680, 491, 409, 408, 167, 652, 403, 496, 656,
	1429, 660, 671, 599, 580, 383, 393, 582, 671, 1524,
	430, 639, 1310, 639, 33, 661, 638, 146, 644, 165,
	1080, 611, 398, 613, 587, 585, 616, 617, 601, 603,
	594, 428, 596, 149, 471, 394, 1665, 439, 438, 127,
	33, 166, 1069, 1704, 1491, 612, 27, 159, 401, 158,
	440, 161, 162, 165, 1576, 1578, 465, 163, 167, 469,
	48, 653, 835, 479, 678, 167, 634, 697, 696, 706,
	707, 699, 700, 701, 702, 703, 704, 705, 698, 1066,
	44, 639, 1493, 1441, 664, 1242, 1243, 1244, 38, 1065,
	1595, 650, 654, 166, 722, 643, 669, 672, 136, 137,
	652, 655, 500, 1648, 1613, 708, 440, 43, 662, 63,
	167, 138, 1647, 735, 43, 784, 41, 1646, 136, 137,
	383, 803, 1069, 674, 675, 677, 35, 396, 397, 399,
	34, 138, 1061, 1062, 1064, 708, 1577, 53, 1063, 46,
	635, 821, 493, 795, 377, 6, 7, 1766, 652, 708,
	724, 725, 1723, 1615, 1505, 1327, 1148, 1120, 782, 1144,
	772, 1010, 738, 826, 737, 609, 141, 1338, 848, 773,
	1595, 687, 850, 457, 456, 639, 619, 1657, 1489, 499,
	833, 896, 685, 780, 1634, 812, 686, 685, 708, 1504,
	1097, 583, 1096, 1007, 499, 894, 895, 893, 687, 811,
	1095, 1094, 1093, 687, 1092, 1143, 790, 428, 760, 761,
	762, 763, 764, 765, 766, 1091, 1089, 813, 1658, 815,
	634, 1622, 1307, 688, 820, 1659, 802, 808, 810, 33,
	32, 1009, 669, 620, 1042, 919, 919, 807, 807, 807,
	878, 686, 685, 921, 890, 869, 686, 685, 383, 383,
	873, 867, 868, 1077, 975, 33, 639, 1075, 687, 968,
	440, 845, 43, 687, 968, 965, 967, 390, 724, 725,
	891, 976, 874, 1069, 43, 639, 865, 1126, 144, 1125,
	930, 139, 1074, 876, 875, 588, 160, 870, 686, 685,
	871, 1340, 989, 686, 685, 1393, 390, 915, 686, 685,
	1309, 1073, 686, 685, 600, 687, 773, 912, 389, 914,
	687, 390, 606, 607, 608, 687, 1008, 1198, 197, 687,
	1008, 1706, 1267, 925, 917, 920, 1535, 923, 926, 1534,
	1339, 641, 390, 1068, 1058, 1057, 635, 975, 1435, 1153,
	708, 1166, 1268, 405, 452, 1059, 989, 798, 451, 686,
	685, 1434, 447, 642, 1043, 642, 1060, 1431, 1072, 686,
	685, 1433, 1029, 931, 932, 1045, 687, 1039, 245, 970,
	984, 884, 886, 887, 807, 807, 687, 1269, 885, 969,
	807, 682, 1267, 999, 969, 1385, 1014, 1532, 1015, 721,
	723, 200, 395, 1265, 202, 404, 983, 447, 986, 987,
	1416, 997, 1268, 892, 1432, 1142, 809, 807, 807, 807,
	807, 819, 606, 1083, 818, 593, 634, 1105, 1106, 1107,
	1023, 1001, 472, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 807, 753, 470, 755, 756, 757, 759, 759,
	759, 759, 759, 759, 759, 759, 890, 776, 777, 778,
	779, 443, 1071, 1419, 688, 1119, 440, 33, 686, 685,
	1066, 736, 33, 538, 918, 536, 540, 541, 542, 543,
	1065, 1090, 891, 539, 544, 687, 785, 1108, 441, 44,
	45, 45, 697, 696, 706, 707, 699, 700, 701, 702,
	703, 704, 705, 698, 686, 685, 735, 697, 696, 706,
	707, 699, 700, 701, 702, 703, 704, 705, 698, 1491,
	606, 687, 1509, 1061, 1062, 1064, 1357, 642, 1008, 1063,
	814, 383, 797, 395, 464, 641, 1131, 447, 736, 411,
	635, 499, 1128, 1129, 395, 1130, 1135, 44, 1087, 45,
	1133, 44, 33, 1493, 1508, 44, 1293, 1493, 1294, 916,
	796, 1164, 1136, 1137, 1152, 1195, 1138, 1139, 618, 1140,
	1141, 843, 688, 639, 44, 1205, 45, 33, 1196, 1009,
	1211, 639, 1237, 1238, 1239, 395, 1199, 1182, 44, 579,
	45, 578, 1206, 1252, 1072, 1072, 1252, 1072, 1072, 499,
	499, 1150, 1187, 1261, 1180, 1176, 925, 1264, 642, 577,
	923, 1174, 807, 1177, 1178, 1171, 1179, 402, 1156, 688,
	634, 989, 499, 1197, 1181, 32, 1330, 742, 1676, 1463,
	641, 1633, 1068, 1058, 1057, 1756, 1755, 843, 1754, 1162,
	1743, 383, 1277, 807, 1059, 1258, 1259, 1699, 688, 1184,
	33, 245, 31, 1184, 807, 1060, 1263, 1250, 1245, 1248,
	440, 44, 123, 45, 1069, 1722, 688, 990, 1278, 383,
	1275, 1276, 1279, 1186, 1367, 1162, 1668, 1169, 1270, 1271,
	1272, 1273, 1274, 1311, 668, 1603, 1168, 1306, 1253, 1254,
	1255, 1256, 1257, 42, 1472, 828, 1013, 641, 1633, 927,
	929, 1281, 1472, 688, 1018, 1469, 652, 1288, 1554, 1290,
	1468, 43, 1596, 1017, 1030, 978, 979, 980, 1545, 981,
	1289, 1334, 143, 1207, 1208, 1209, 1298, 1213, 145, 828,
	1343, 1016, 63, 1351, 383, 1296, 1280, 1672, 688, 843,
	1448, 1355, 1147, 991, 925, 668, 1406, 395, 1304, 1470,
	33, 1468, 844, 641, 1162, 1405, 1402, 1401, 1329, 1066,
	1000, 1386, 1003, 1004, 1002, 708, 1370, 998, 1011, 1065,
	1012, 1002, 1335, 1252, 1471, 1342, 1391, 1201, 1624, 1162,
	708, 823, 1360, 1625, 668, 1398, 484, 1356, 1146, 245,
	668, 1397, 799, 1037, 668, 1331, 1002, 688, 1365, 1384,
	1472, 226, 1070, 395, 229, 484, 233, 234, 1013, 240,
	792, 510, 1061, 1062, 1064, 789, 1332, 375, 1063, 615,
	1336, 378, 1162, 1161, 1395, 1407, 668, 1103, 843, 1024,
	590, 614, 1477, 1480, 1481, 1482, 1478, 1102, 1479, 1483,
	1114, 610, 1637, 1638, 928, 688, 843, 992, 383, 43,
	43, 1633, 513, 668, 667, 1718, 412, 1403, 1404, 628,
	627, 1410, 641, 1442, 697, 696, 706, 707, 699, 700,
	701, 702, 703, 704, 705, 698, 1116, 1447, 622, 623,
	928, 1450, 1426, 1458, 1460, 1427, 1428, 622, 621, 1495,
	1122, 1123, 1124, 1472, 383, 55, 54, 483, 1128, 473,
	484, 1507, 1584, 477, 1497, 1368, 1341, 1454, 1445, 639,
	641, 1002, 395, 1449, 1127, 642, 843, 668, 788, 1455,
	499, 1522, 626, 642, 1045, 1466, 25, 1289, 395, 689,
	1149, 1461, 1513, 1694, 1515, 1498, 1155, 1494, 630, 629,
	1749, 1692, 1663, 1157, 1158, 1533, 1159, 1160, 1637, 1638,
	1511, 43, 193, 1069, 1399, 1365, 1516, 1514, 1076, 1185,
	395, 1170, 1444, 222, 1446, 741, 1521, 1101, 1100, 1079,
	29, 1078, 1020, 1523, 752, 1456, 1019, 996, 847, 20,
	825, 15, 781, 683, 637, 605, 807, 604, 602, 1540,
	1549, 589, 968, 475, 16, 217, 23, 43, 43, 1559,
	417, 1459, 413, 387, 210, 783, 209, 43, 1492, 224,
	225, 488, 17, 18, 151, 198, 63, 11, 383, 1676,
	1640, 1082, 1165, 805, 631, 1553, 383, 476, 228, 132,
	639, 1560, 1569, 1593, 1563, 930, 1346, 1570, 1567, 1525,
	1555, 1572, 1580, 1568, 1460, 1205, 1460, 1582, 1583, 1643,
	1370, 1642, 1561, 1562, 989, 1564, 1365, 1571, 1326, 1481,
	1482, 1365, 1365, 1365, 1365, 1365, 1566, 1565, 1034, 1035,
	1606, 1744, 1708, 1543, 1451, 1614, 1365, 754, 1541, 386,
	1537, 1510, 1542, 1189, 458, 592, 1716, 1619, 1512, 1592,
	867, 868, 376, 639, 1366, 242, 1190, 1485, 1626, 877,
	1650, 1038, 881, 882, 43, 1591, 1031, 1032, 43, 43,
	1641, 591, 969, 43, 43, 43, 43, 43, 1621, 482,
	480, 478, 1620, 1312, 639, 1573, 1549, 1630, 43, 1651,
	1652, 1629, 1492, 1631, 1365, 1632, 383, 708, 1660, 1328,
	140, 972, 1581, 1365, 1396, 968, 1400, 977, 1684, 1650,
	1677, 636, 1559, 1671, 968, 841, 1344, 646, 649, 741,
	503, 1559, 933, 964, 1026, 43, 1686, 1715, 1538, 1688,
	639, 1439, 1685, 1027, 1689, 1682, 1477, 1480, 1481, 1482,
	1478, 828, 1479, 1483, 989, 1714, 43, 1674, 1680, 1184,
	1421, 1460, 1390, 1389, 837, 43, 838, 839, 840, 19,
	237, 238, 239, 995, 1388, 1707, 1712, 1717, 1687, 836,
	1387, 21, 22, 652, 24, 1669, 652, 652, 652, 1099,
	1740, 1725, 1763, 1726, 1314, 1313, 502, 501, 1727, 1337,
	1739, 1736, 1737, 1738, 1098, 407, 830, 1549, 832, 1467,
	1746, 657, 855, 1752, 1753, 1741, 846, 1748, 8, 1,
	1411, 1487, 1412, 1214, 13, 1413, 857, 12, 1414, 1415,
	1616, 230, 1418, 1117, 639, 969, 1760, 733, 533, 1750,
	1600, 1518, 1460, 1764, 969, 519, 1728, 1369, 1210, 1767,
	1350, 1680, 1768, 1240, 968, 442, 1440, 1772, 172, 1770,
	1167, 1559, 414, 14, 639, 1347, 1200, 645, 481, 1765,
	1262, 852, 670, 156, 147, 663, 822, 379, 28, 10,
	1088, 157, 1680, 155, 154, 152, 445, 190, 834, 195,
	218, 641, 62, 1068, 1058, 1057, 60, 61, 65, 1373,
	856, 1292, 1484, 1506, 489, 1059, 1005, 720, 1653, 1492,
	1380, 1683, 1192, 1713, 1673, 1121, 1060, 1151, 751, 973,
	520, 883, 1366, 532, 531, 530, 1623, 1366, 1366, 1366,
	1366, 1366, 858, 859, 860, 861, 862, 863, 864, 690,
	1364, 1462, 1487, 1476, 1579, 726, 727, 728, 729, 730,
	731, 732, 1531, 182, 1474, 1473, 1639, 1635, 1363, 185,
	186, 1544, 1154, 1422, 1611, 1033, 1345, 1056, 829, 1036,
	1594, 5, 1539, 1067, 969, 1054, 4, 1163, 3, 1053,
	1052, 1051, 1049, 1050, 173, 1047, 791, 422, 423, 424,
	1048, 1046, 1028, 640, 688, 427, 425, 435, 436, 180,
	1366, 168, 2, 0, 0, 1627, 1628, 0, 169, 1366,
	0, 0, 0, 1191, 1194, 0, 1574, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 0, 0, 0, 1204,
	1065, 0, 0, 0, 0, 0, 642, 697, 696, 706,
	707, 699, 700, 701, 702, 703, 704, 705, 698, 0,
	0, 0, 1604, 1247, 0, 0, 1607, 1608, 1609, 1610,
	0, 0, 0, 0, 0, 0, 176, 0, 171, 181,
	0, 0, 0, 1061, 1062, 1064, 178, 177, 0, 1063,
	1681, 0, 642, 697, 696, 706, 707, 699, 700, 701,
	702, 703, 704, 705, 698, 0, 0, 0, 0, 0,
	853, 1695, 1696, 1697, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 888, 1295, 0, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 0, 0, 0, 1113, 0, 0, 0, 0, 0,
	1308, 1664, 0, 0, 0, 0, 1670, 0, 0, 697,
	696, 706, 707, 699, 700, 701, 702, 703, 704, 705,
	698, 0, 0, 0, 855, 0, 0, 0, 0, 0,
	966, 1333, 1145, 1681, 0, 0, 1751, 0, 857, 1698,
	0, 0, 0, 0, 0, 0, 0, 0, 1349, 0,
	0, 0, 429, 434, 0, 0, 0, 0, 0, 0,
	0, 1711, 174, 0, 1681, 0, 642, 0, 175, 0,
	0, 1719, 1720, 1721, 1069, 1724, 697, 696, 706, 707,
	699, 700, 701, 702, 703, 704, 705, 698, 697, 696,
	706, 707, 699, 700, 701, 702, 703, 704, 705, 698,
	0, 0, 0, 0, 0, 431, 0, 433, 432, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1595, 0, 0, 0, 1757, 1758, 1759, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 184, 858, 859, 860, 861, 862, 863,
	864, 0, 0, 0, 0, 1771, 1424, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 0, 0,
	708, 0, 0, 0, 0, 1249, 0, 1109, 1110, 1111,
	0, 0, 0, 0, 0, 0, 1452, 1453, 1194, 0,
	0, 0, 515, 0, 0, 0, 0, 514, 0, 0,
	0, 0, 0, 0, 558, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 708, 0, 726, 0,
	0, 0, 1588, 0, 395, 0, 0, 441, 538, 535,
	536, 540, 541, 542, 543, 0, 0, 0, 539, 544,
	435, 436, 1589, 0, 0, 0, 512, 527, 0, 557,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 0, 0, 524, 525, 0, 0, 0, 0, 574,
	0, 526, 708, 515, 522, 523, 528, 0, 514, 0,
	0, 0, 0, 0, 0, 558, 0, 559, 0, 0,
	0, 0, 0, 572, 1546, 549, 550, 0, 0, 0,
	0, 0, 1084, 1359, 0, 395, 0, 688, 441, 538,
	535, 536, 540, 541, 542, 543, 0, 0, 0, 539,
	544, 435, 436, 0, 0, 0, 0, 512, 527, 0,
	557, 534, 0, 0, 0, 768, 0, 0, 1246, 708,
	0, 1590, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 708, 0, 0, 524, 525, 0, 0, 0, 0,
	574, 0, 526, 0, 0, 522, 523, 528, 0, 0,
	770, 0, 0, 0, 0, 1618, 0, 0, 0, 0,
	0, 0, 0, 0, 572, 0, 1283, 1284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 560, 0, 0, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1299, 1300, 1301, 1302,
	1303, 0, 534, 576, 0, 561, 562, 0, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 0, 116,
	117, 0, 118, 119, 120, 122, 121, 0, 913, 771,
	0, 1464, 1465, 0, 0, 0, 546, 66, 769, 0,
	0, 0, 0, 775, 774, 0, 0, 0, 0, 0,
	0, 1690, 0, 0, 1691, 0, 0, 1693, 563, 573,
	569, 570, 567, 568, 566, 565, 564, 575, 551, 552,
	553, 554, 556, 560, 1703, 439, 438, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1618,
	0, 0, 0, 0, 576, 0, 561, 562, 741, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 571, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 546, 0, 0,
	0, 1745, 741, 0, 0, 1408, 0, 0, 1552, 0,
	67, 0, 0, 1556, 0, 0, 0, 0, 0, 563,
	573, 569, 570, 567, 568, 566, 565, 564, 575, 551,
	552, 553, 554, 556, 0, 0, 439, 438, 555, 0,
	0, 361, 350, 0, 309, 363, 279, 297, 371, 299,
	300, 336, 258, 319, 0, 294, 276, 0, 282, 251,
	289, 252, 280, 311, 0, 277, 0, 352, 322, 1605,
	0, 0, 369, 571, 327, 0, 0, 0, 0, 0,
	314, 354, 317, 345, 308, 337, 266, 326, 364, 295,
	332, 365, 0, 0, 0, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 331, 359, 291,
	374, 0, 335, 250, 329, 0, 256, 259, 370, 357,
	286, 287, 0, 0, 0, 0, 0, 0, 0, 313,
	318, 342, 305, 0, 0, 0, 0, 0, 0, 1526,
	1527, 0, 1528, 1529, 1530, 283, 0, 325, 0, 0,
	0, 263, 257, 0, 310, 768, 0, 0, 265, 0,
	284, 343, 0, 247, 348, 355, 307, 0, 0, 358,
	304, 303, 0, 0, 0, 0, 0, 0, 296, 0,
	340, 372, 362, 315, 353, 281, 290, 0, 288, 0,
	770, 0, 324, 338, 0, 0, 0, 0, 0, 360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 248,
	285, 346, 349, 270, 334, 260, 292, 341, 293, 316,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1374, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 771,
	0, 0, 0, 0, 0, 1382, 0, 66, 769, 0,
	0, 0, 0, 775, 774, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 254, 274, 356, 0, 0, 0,
	0, 1383, 1381, 1377, 1376, 0, 0, 0, 0, 333,
	0, 0, 0, 0, 1379, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 273, 267, 268,
	320, 321, 366, 367, 368, 344, 264, 0, 271, 272,
	0, 351, 0, 0, 0, 323, 0, 0, 0, 373,
	67, 0, 0, 0, 0, 0, 0, 298, 249, 302,
	0, 0, 0, 0, 0, 0, 0, 261, 262, 0,
	0, 306, 301, 328, 330, 339, 347, 0, 278, 312,
	361, 350, 0, 309, 363, 279, 297, 371, 299, 300,
	336, 258, 319, 0, 294, 276, 0, 282, 251, 289,
	252, 280, 311, 0, 277, 0, 352, 322, 0, 0,
	0, 369, 0, 327, 0, 0, 0, 0, 0, 314,
	354, 317, 345, 308, 337, 266, 326, 364, 295, 332,
	365, 0, 0, 0, 33, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 331, 359, 291, 374,
	0, 335, 250, 329, 0, 256, 259, 370, 357, 286,
	287, 0, 641, 0, 1068, 1058, 1057, 0, 313, 318,
	342, 305, 0, 0, 0, 0, 1059, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 325, 1060, 0, 0,
	263, 257, 0, 310, 0, 0, 0, 265, 0, 284,
	343, 0, 247, 348, 355, 307, 0, 0, 358, 304,
	303, 0, 0, 0, 0, 0, 0, 296, 0, 340,
	372, 362, 315, 353, 281, 290, 0, 288, 0, 0,
	0, 324, 338, 0, 0, 0, 0, 0, 360, 0,
	0, 1742, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 248, 285,
	346, 349, 270, 334, 260, 292, 341, 293, 316, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1066, 0, 0, 0, 641, 0, 1068, 1058, 1057,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 1059,
	0, 0, 0, 0, 1382, 0, 0, 0, 0, 0,
	1060, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1061, 1062, 1064, 253, 0, 0,
	1063, 0, 0, 254, 274, 356, 0, 0, 0, 0,
	1383, 1381, 0, 0, 0, 0, 0, 0, 333, 0,
	0, 0, 0, 1379, 1548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 273, 267, 268, 320,
	321, 366, 367, 368, 344, 264, 0, 271, 272, 0,
	351, 0, 0, 0, 323, 0, 0, 0, 373, 0,
	0, 0, 0, 0, 1066, 0, 298, 249, 302, 0,
	0, 0, 0, 0, 1065, 0, 261, 262, 0, 0,
	306, 301, 328, 330, 339, 347, 0, 278, 312, 361,
	350, 0, 309, 363, 279, 297, 371, 299, 300, 336,
	258, 319, 0, 294, 276, 0, 282, 251, 289, 252,
	280, 311, 0, 277, 0, 352, 322, 1061, 1062, 1064,
	369, 0, 327, 1063, 0, 1069, 0, 0, 314, 354,
	317, 345, 308, 337, 266, 326, 364, 295, 332, 365,
	0, 0, 0, 33, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 331, 359, 291, 374, 0,
	335, 250, 329, 0, 256, 259, 370, 357, 286, 287,
	0, 641, 0, 1068, 1058, 1057, 0, 313, 318, 342,
	305, 0, 0, 0, 0, 1059, 0, 1291, 0, 0,
	0, 0, 0, 283, 0, 325, 1060, 0, 0, 263,
	257, 0, 310, 0, 0, 0, 265, 0, 284, 343,
	0, 247, 348, 355, 307, 0, 0, 358, 304, 303,
	0, 0, 937, 0, 0, 0, 296, 0, 340, 372,
	362, 315, 353, 281, 290, 0, 288, 0, 0, 0,
	324, 338, 0, 0, 0, 0, 0, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 255, 248, 285, 346,
	349, 270, 334, 260, 292, 341, 293, 316, 275, 0,
	946, 952, 950, 0, 0, 947, 0, 0, 945, 0,
	0, 954, 0, 0, 953, 939, 949, 951, 948, 943,
	1066, 938, 0, 956, 955, 957, 936, 959, 0, 0,
	1065, 963, 960, 962, 961, 0, 958, 0, 0, 0,
	0, 0, 0, 1382, 0, 940, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 942, 944, 0, 0, 0,
	0, 0, 0, 1061, 1062, 1064, 253, 0, 0, 1063,
	0, 0, 254, 274, 356, 0, 0, 0, 0, 1383,
	1381, 0, 0, 0, 0, 0, 0, 333, 0, 0,
	0, 0, 1379, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 273, 267, 268, 320, 321,
	366, 367, 368, 344, 264, 0, 271, 272, 0, 351,
	0, 0, 0, 323, 0, 0, 0, 373, 0, 0,
	0, 0, 0, 0, 0, 298, 249, 302, 0, 0,
	0, 0, 0, 0, 0, 261, 262, 0, 0, 306,
	301, 328, 330, 339, 347, 0, 278, 312, 361, 350,
	0, 309, 363, 279, 297, 371, 299, 300, 336, 258,
	319, 0, 294, 276, 0, 282, 251, 289, 252, 280,
	311, 0, 277, 0, 352, 322, 0, 89, 0, 369,
	32, 327, 0, 0, 1069, 0, 0, 314, 354, 317,
	345, 308, 337, 266, 326, 364, 295, 332, 365, 0,
	0, 0, 441, 1077, 45, 33, 0, 1075, 0, 0,
	0, 0, 0, 0, 331, 359, 291, 374, 0, 335,
	250, 329, 0, 256, 259, 370, 357, 286, 287, 0,
	0, 0, 1074, 0, 0, 0, 313, 318, 342, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1175, 1073, 283, 0, 325, 0, 0, 0, 263, 257,
	0, 310, 74, 0, 0, 265, 0, 284, 343, 0,
	247, 348, 355, 307, 0, 0, 358, 304, 303, 0,
	0, 0, 0, 0, 0, 296, 0, 340, 372, 362,
	315, 353, 281, 290, 0, 288, 0, 90, 0, 324,
	338, 0, 0, 0, 0, 0, 360, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 248, 285, 346, 349,
	270, 334, 260, 292, 341, 293, 316, 275, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 0, 116, 117, 0, 118,
	119, 120, 122, 121, 91, 92, 93, 97, 95, 94,
	96, 68, 70, 0, 66, 69, 75, 71, 72, 73,
	87, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 88, 98, 99, 100, 101, 102, 103, 104,
	105, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	0, 254, 274, 356, 0, 0, 0, 0, 0, 384,
	0, 0, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 273, 267, 268, 320, 321, 366,
	367, 368, 344, 264, 0, 271, 272, 0, 351, 0,
	0, 0, 323, 0, 0, 0, 373, 67, 0, 0,
	0, 0, 0, 0, 298, 249, 302, 0, 0, 0,
	0, 0, 0, 0, 261, 262, 0, 0, 306, 301,
	328, 330, 339, 347, 0, 278, 312, 361, 350, 0,
	309, 363, 279, 297, 371, 299, 300, 336, 258, 319,
	0, 294, 276, 0, 282, 251, 289, 252, 280, 311,
	0, 277, 0, 352, 322, 0, 89, 0, 369, 0,
	327, 0, 0, 0, 0, 0, 314, 354, 317, 345,
	308, 337, 266, 326, 364, 295, 332, 365, 0, 0,
	0, 33, 0, 665, 33, 666, 0, 0, 0, 0,
	0, 0, 0, 331, 359, 291, 374, 0, 335, 250,
	329, 0, 256, 259, 370, 357, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 313, 318, 342, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 325, 0, 0, 0, 263, 257, 0,
	310, 74, 0, 0, 265, 0, 284, 343, 0, 247,
	348, 355, 307, 0, 0, 358, 304, 303, 0, 0,
	0, 0, 0, 0, 296, 0, 340, 372, 362, 315,
	353, 281, 290, 0, 288, 0, 90, 0, 324, 338,
	0, 0, 0, 0, 0, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 248, 285, 346, 349, 270,
	334, 260, 292, 341, 293, 316, 275, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 0, 116, 117, 0, 118, 119,
	120, 122, 121, 91, 92, 93, 97, 95, 94, 96,
	68, 70, 0, 66, 69, 75, 71, 72, 73, 87,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 88, 98, 99, 100, 101, 102, 103, 104, 105,
	0, 0, 0, 0, 253, 641, 0, 1068, 1058, 1057,
	254, 274, 356, 0, 0, 0, 0, 0, 384, 1059,
	0, 0, 0, 0, 0, 333, 0, 0, 0, 0,
	1060, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 273, 267, 268, 320, 321, 366, 367,
	368, 344, 264, 0, 271, 272, 0, 351, 0, 0,
	0, 323, 0, 0, 0, 373, 67, 0, 0, 0,
	0, 0, 0, 298, 249, 302, 0, 0, 0, 0,
	0, 0, 0, 261, 262, 0, 0, 306, 301, 328,
	330, 339, 347, 0, 278, 312, 361, 350, 0, 309,
	363, 279, 297, 371, 299, 300, 336, 258, 319, 0,
	294, 276, 0, 282, 251, 289, 252, 280, 311, 0,
	277, 0, 352, 322, 1066, 0, 0, 369, 0, 327,
	0, 0, 0, 0, 1065, 314, 354, 317, 345, 308,
	337, 266, 326, 364, 295, 332, 365, 0, 380, 0,
	33, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	382, 0, 331, 359, 291, 374, 0, 335, 250, 329,
	0, 256, 259, 370, 357, 286, 287, 1061, 1062, 1064,
	0, 0, 0, 1063, 313, 318, 342, 305, 0, 0,
	0, 0, 0, 1392, 0, 0, 0, 0, 0, 0,
	283, 0, 325, 0, 0, 0, 263, 257, 0, 310,
	0, 0, 0, 265, 0, 284, 343, 0, 247, 348,
	355, 307, 0, 0, 358, 304, 303, 0, 0, 0,
	0, 0, 0, 296, 0, 340, 372, 362, 315, 353,
	281, 290, 0, 288, 0, 0, 0, 324, 338, 0,
	0, 0, 0, 0, 360, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 248, 285, 346, 349, 270, 334,
	260, 292, 341, 293, 316, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 253, 641, 0, 1068, 1058, 1057, 254,
	274, 356, 0, 0, 0, 0, 0, 384, 1059, 0,
	0, 0, 0, 0, 333, 0, 0, 0, 0, 1060,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 273, 267, 268, 320, 321, 366, 367, 368,
	344, 264, 0, 271, 272, 0, 351, 0, 0, 0,
	323, 0, 0, 0, 373, 0, 0, 0, 0, 0,
	0, 0, 298, 249, 302, 0, 0, 0, 0, 0,
	0, 0, 261, 262, 0, 0, 306, 301, 328, 330,
	339, 347, 0, 278, 312, 361, 350, 0, 309, 363,
	279, 297, 371, 299, 300, 336, 258, 319, 0, 294,
	276, 0, 282, 251, 289, 252, 280, 311, 0, 277,
	0, 352, 322, 1066, 0, 0, 369, 0, 327, 0,
	0, 0, 0, 1065, 314, 354, 317, 345, 308, 337,
	266, 326, 364, 295, 332, 365, 0, 0, 0, 33,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 331, 359, 291, 374, 0, 335, 250, 329, 0,
	256, 259, 370, 357, 286, 287, 1061, 1062, 1064, 0,
	0, 0, 1063, 313, 318, 342, 305, 0, 0, 0,
	0, 0, 1352, 0, 0, 0, 0, 1443, 0, 283,
	0, 325, 0, 0, 0, 263, 257, 0, 310, 0,
	0, 0, 265, 0, 284, 343, 0, 247, 348, 355,
	307, 0, 0, 358, 304, 303, 0, 0, 0, 0,
	0, 0, 296, 0, 340, 372, 362, 315, 353, 281,
	290, 0, 288, 0, 0, 0, 324, 338, 0, 0,
	0, 0, 0, 360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 248, 285, 346, 349, 270, 334, 260,
	292, 341, 293, 316, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 0, 0, 0, 0, 0, 254, 274,
	356, 0, 0, 0, 0, 0, 384, 0, 0, 0,
	0, 0, 0, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 273, 267, 268, 320, 321, 366, 367, 368, 344,
	264, 0, 271, 272, 0, 351, 0, 0, 0, 323,
	0, 0, 0, 373, 0, 0, 0, 0, 0, 0,
	0, 298, 249, 302, 0, 0, 0, 0, 0, 0,
	0, 261, 262, 0, 0, 306, 301, 328, 330, 339,
	347, 0, 278, 312, 361, 350, 0, 309, 363, 279,
	297, 371, 299, 300, 336, 258, 319, 0, 294, 276,
	0, 282, 251, 289, 252, 280, 311, 0, 277, 0,
	352, 322, 0, 0, 0, 369, 0, 327, 0, 0,
	0, 0, 0, 314, 354, 317, 345, 308, 337, 266,
	326, 364, 295, 332, 365, 0, 0, 0, 441, 0,
	45, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	331, 359, 291, 374, 0, 335, 250, 329, 0, 256,
	259, 370, 357, 286, 287, 0, 0, 0, 0, 0,
	0, 0, 313, 318, 342, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	325, 0, 0, 0, 263, 257, 0, 310, 0, 0,
	0, 265, 0, 284, 343, 0, 247, 348, 355, 307,
	0, 0, 358, 304, 303, 0, 0, 0, 0, 0,
	0, 296, 0, 340, 372, 362, 315, 353, 281, 290,
	0, 288, 0, 0, 0, 324, 338, 0, 0, 0,
	0, 0, 360, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 248, 285, 346, 349, 270, 334, 260, 292,
	341, 293, 316, 275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 0, 254, 274, 356,
	0, 0, 0, 0, 0, 384, 0, 0, 0, 0,
	0, 0, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	273, 267, 268, 320, 321, 366, 367, 368, 344, 264,
	0, 271, 272, 0, 351, 0, 0, 0, 323, 0,
	0, 0, 373, 0, 0, 0, 0, 0, 0, 0,
	298, 249, 302, 0, 0, 0, 0, 0, 0, 0,
	261, 262, 0, 0, 306, 301, 328, 330, 339, 347,
	0, 278, 312, 361, 350, 0, 309, 363, 279, 297,
	371, 299, 300, 336, 258, 319, 0, 294, 276, 0,
	282, 251, 289, 252, 280, 311, 0, 277, 0, 352,
	322, 0, 0, 0, 369, 0, 327, 0, 0, 0,
	0, 0, 314, 354, 317, 345, 308, 337, 266, 326,
	364, 295, 332, 365, 0, 0, 0, 33, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	359, 291, 374, 0, 335, 250, 329, 0, 256, 259,
	370, 357, 286, 287, 494, 0, 0, 0, 0, 0,
	0, 313, 318, 342, 305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 325,
	0, 0, 0, 263, 257, 0, 310, 0, 0, 0,
	265, 0, 284, 343, 0, 247, 348, 355, 307, 0,
	0, 358, 304, 303, 0, 0, 0, 0, 0, 0,
	296, 0, 340, 372, 362, 315, 353, 281, 290, 0,
	288, 0, 0, 0, 324, 338, 0, 0, 0, 0,
	0, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 248, 285, 346, 349, 270, 334, 260, 292, 341,
	293, 316, 275, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 254, 274, 356, 0,
	0, 0, 0, 0, 384, 0, 0, 0, 0, 0,
	0, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 273,
	267, 268, 320, 321, 366, 367, 368, 344, 264, 0,
	271, 272, 0, 351, 0, 0, 0, 323, 0, 0,
	0, 373, 0, 0, 0, 0, 0, 0, 0, 298,
	249, 302, 0, 0, 0, 0, 0, 0, 0, 261,
	262, 0, 0, 306, 301, 328, 330, 339, 347, 0,
	278, 312, 361, 350, 0, 309, 363, 279, 297, 371,
	299, 300, 336, 258, 319, 0, 294, 276, 0, 282,
	251, 289, 252, 280, 311, 0, 277, 0, 352, 322,
	0, 0, 0, 369, 0, 327, 0, 0, 0, 0,
	0, 314, 354, 317, 345, 308, 337, 266, 326, 364,
	295, 332, 365, 0, 0, 0, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 331, 359,
	291, 374, 0, 335, 250, 329, 0, 256, 259, 370,
	357, 286, 287, 0, 0, 0, 0, 0, 0, 0,
	313, 318, 342, 305, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 325, 0,
	0, 0, 263, 257, 0, 310, 0, 0, 0, 265,
	0, 284, 343, 0, 247, 348, 355, 307, 0, 0,
	358, 304, 303, 0, 0, 0, 0, 0, 0, 296,
	0, 340, 372, 362, 315, 353, 281, 290, 0, 288,
	0, 0, 0, 324, 338, 0, 0, 0, 0, 0,
	360, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	248, 285, 346, 349, 270, 334, 260, 292, 341, 293,
	316, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 0, 254, 274, 356, 0, 0,
	0, 0, 0, 384, 0, 0, 0, 0, 0, 0,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 273, 267,
	268, 320, 321, 366, 367, 368, 344, 264, 0, 271,
	272, 0, 351, 0, 0, 0, 323, 0, 0, 0,
	373, 0, 0, 0, 0, 0, 0, 0, 298, 249,
	302, 0, 0, 0, 0, 0, 0, 0, 261, 262,
	0, 0, 306, 301, 328, 330, 339, 347, 0, 278,
	312, 361, 350, 0, 309, 363, 279, 297, 371, 299,
	300, 336, 258, 319, 0, 294, 276, 0, 282, 251,
	289, 252, 280, 311, 0, 277, 0, 352, 322, 0,
	0, 0, 369, 0, 327, 0, 0, 0, 0, 0,
	314, 354, 317, 345, 308, 337, 266, 326, 364, 295,
	332, 365, 0, 0, 0, 44, 0, 45, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 331, 359, 291,
	374, 0, 335, 250, 329, 0, 256, 259, 370, 357,
	286, 287, 0, 0, 0, 0, 0, 0, 0, 313,
	318, 342, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 325, 0, 0,
	0, 263, 257, 0, 310, 0, 0, 0, 265, 0,
	284, 343, 0, 247, 348, 355, 307, 0, 0, 358,
	304, 303, 0, 0, 0, 0, 0, 0, 296, 0,
	340, 372, 362, 315, 353, 281, 290, 0, 288, 0,
	0, 0, 324, 338, 0, 0, 0, 0, 0, 360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 248,
	285, 346, 349, 270, 334, 260, 292, 341, 293, 316,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 515, 0, 0, 595, 0, 514, 441,
	0, 421, 422, 423, 424, 558, 0, 559, 0, 0,
	427, 425, 435, 436, 0, 549, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 441, 538,
	535, 536, 540, 541, 542, 543, 0, 0, 0, 539,
	544, 435, 436, 0, 0, 0, 0, 512, 527, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 254, 274, 356, 0, 0, 0,
	0, 0, 0, 0, 524, 525, 0, 0, 0, 333,
	574, 0, 526, 0, 0, 935, 523, 528, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 572, 0, 269, 273, 267, 268,
	320, 321, 366, 367, 368, 344, 264, 0, 271, 272,
	937, 351, 0, 0, 0, 323, 0, 0, 0, 373,
	0, 0, 0, 0, 0, 0, 0, 298, 249, 302,
	0, 0, 534, 0, 0, 0, 0, 261, 262, 0,
	0, 306, 301, 328, 330, 339, 347, 0, 278, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 946, 952,
	950, 0, 0, 947, 0, 0, 945, 0, 0, 954,
	0, 0, 953, 939, 949, 951, 948, 943, 0, 938,
	0, 956, 955, 957, 936, 959, 0, 429, 434, 963,
	960, 962, 961, 560, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 941, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 576, 0, 561, 562, 0, 0,
	0, 0, 419, 942, 944, 441, 0, 421, 422, 423,
	424, 0, 0, 0, 0, 0, 427, 425, 435, 436,
	431, 0, 433, 432, 0, 0, 0, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 439, 438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	573, 569, 570, 567, 568, 566, 565, 564, 575, 551,
	552, 553, 554, 556, 0, 0, 439, 438, 555, 0,
	801, 0, 515, 0, 0, 0, 0, 514, 0, 0,
	0, 0, 0, 0, 558, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 0, 0, 0, 0,
	0, 0, 0, 571, 395, 0, 0, 441, 538, 535,
	536, 540, 541, 542, 543, 0, 0, 0, 539, 544,
	435, 436, 0, 0, 0, 0, 512, 527, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 524, 525, 806, 0, 0, 0, 574,
	0, 526, 0, 515, 522, 523, 528, 0, 514, 0,
	0, 0, 0, 0, 0, 558, 0, 559, 0, 0,
	0, 0, 0, 572, 0, 549, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 441, 538,
	535, 536, 540, 541, 542, 543, 0, 0, 0, 539,
	544, 435, 436, 429, 434, 0, 0, 512, 527, 0,
	557, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 524, 525, 806, 0, 0, 0,
	574, 0, 526, 0, 0, 522, 523, 528, 0, 0,
	0, 0, 0, 0, 0, 0, 431, 0, 433, 432,
	0, 0, 0, 0, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 439, 438, 0, 0, 0, 0, 0,
	0, 0, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 534, 576, 0, 561, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 563, 573,
	569, 570, 567, 568, 566, 565, 564, 575, 551, 552,
	553, 554, 556, 560, 0, 439, 438, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 576, 0, 561, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 571, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	573, 569, 570, 567, 568, 566, 565, 564, 575, 551,
	552, 553, 554, 556, 641, 0, 439, 438, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 515, 0, 0, 0, 0, 514, 0, 0,
	0, 0, 0, 0, 558, 0, 559, 0, 0, 0,
	0, 0, 0, 571, 549, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 395, 0, 0, 441, 538, 535,
	536, 540, 541, 542, 543, 0, 0, 0, 539, 544,
	435, 436, 0, 0, 0, 0, 512, 527, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 524, 525, 0, 0, 0, 0, 574,
	0, 526, 0, 515, 522, 523, 528, 0, 514, 0,
	0, 0, 0, 0, 0, 558, 0, 559, 0, 0,
	0, 0, 0, 572, 0, 549, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 441, 538,
	535, 536, 540, 541, 542, 543, 0, 0, 0, 539,
	544, 435, 436, 0, 0, 0, 0, 512, 527, 0,
	557, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 524, 525, 0, 0, 0, 0,
	574, 0, 526, 0, 0, 522, 523, 528, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 534, 576, 0, 561, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 563, 573,
	569, 570, 567, 568, 566, 565, 564, 575, 551, 552,
	553, 554, 556, 560, 0, 439, 438, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 576, 0, 561, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 571, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	573, 569, 570, 567, 568, 566, 565, 564, 575, 551,
	552, 553, 554, 556, 0, 0, 439, 438, 555, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 558, 0, 559, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 395, 0, 571, 441, 538, 535, 536, 540, 541,
	542, 543, 0, 0, 0, 539, 544, 435, 436, 0,
	0, 0, 0, 0, 527, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	524, 525, 0, 0, 0, 0, 574, 0, 526, 0,
	0, 522, 523, 528, 0, 0, 0, 0, 0, 0,
	0, 0, 558, 0, 559, 0, 0, 0, 0, 0,
	572, 0, 549, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 395, 0, 0, 441, 538, 535, 536, 540,
	541, 542, 543, 0, 0, 0, 539, 544, 435, 436,
	0, 0, 0, 0, 0, 527, 0, 557, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 524, 525, 0, 0, 0, 0, 574, 0, 526,
	0, 0, 522, 523, 528, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 534,
	576, 0, 561, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 573, 569, 570, 567,
	568, 566, 565, 564, 575, 551, 552, 553, 554, 556,
	560, 0, 439, 438, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 561, 562, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 571,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 546, 0, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 563, 573, 569, 570,
	567, 568, 566, 565, 564, 575, 551, 552, 553, 554,
	556, 0, 0, 439, 438, 555, 0, 558, 0, 559,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 0,
	0, 0, 0, 74, 0, 794, 0, 824, 0, 0,
	441, 538, 535, 536, 540, 541, 542, 543, 0, 0,
	571, 539, 544, 435, 436, 0, 0, 0, 0, 0,
	527, 0, 557, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 524, 525, 0, 0,
	0, 0, 574, 0, 526, 0, 0, 522, 523, 528,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 0, 116, 117, 0,
	118, 119, 120, 122, 121, 91, 92, 93, 97, 95,
	94, 96, 68, 70, 534, 66, 69, 75, 71, 72,
	73, 87, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 88, 98, 99, 100, 101, 102, 103,
	104, 105, 0, 0, 0, 0, 793, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 33, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 576, 0, 561, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 546,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 563, 573, 569, 570, 567, 568, 566, 565, 564,
	575, 551, 552, 553, 554, 556, 90, 0, 439, 438,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1371, 0, 0, 0, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 0, 116, 117, 0, 118, 119,
	120, 122, 121, 91, 92, 93, 97, 95, 94, 96,
	68, 70, 0, 66, 69, 75, 71, 72, 73, 87,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 88, 98, 99, 100, 101, 102, 103, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67,
}

var yyPact = [...]int16{
	513, -1000, -261, -1000, -1000, 1441, 1330, 402, -1000, -1000,
	-1000, 1071, 490, 486, 219, 446, 888, 471, 910, 500,
	415, -1000, -227, -205, -1000, -91, 498, -1000, 1318, -1000,
	4125, 4125, 4125, -1000, 328, 888, 415, 139, 415, 1455,
	426, 693, 1597, 537, -1000, -1000, 415, 910, 690, -1000,
	-1000, -1000, -1000, 214, 179, 401, 1840, -153, -1, -1000,
	-1000, -1000, -1000, -1000, 1376, -1000, -1000, -1000, 1376, 57,
	1439, 1376, 1439, -1000, 1376, 1439, 40, 40, 40, 40,
	40, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1430, 1428,
	-1000, 1376, 1376, 1376, 1376, 1376, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1419, 76, 1419, 1387,
	1387, -1000, -1000, 1840, 1840, 1435, 910, 888, 1454, 910,
	-238, 910, 910, 1672, 910, -1000, -1000, -1000, 183, 1551,
	4125, 6336, 910, -1000, 1548, 507, 910, 4491, -1000, 1525,
	-1000, -1000, -1000, -1000, -1000, -1000, 1427, 744, 888, 349,
	1352, 338, 453, 408, 1038, 340, -1000, -1000, -1000, 814,
	-1000, 888, -1000, 1706, -1000, -1000, 337, -1000, 336, 679,
	958, 910, 1426, 127, 1424, 6736, 878, -1000, -268, -1000,
	-4, -1000, -1000, 824, 40, 1376, -1000, 40, 775, 40,
	40, -1000, -1000, 548, 1533, 548, 548, 548, 548, 953,
	953, -125, -125, -1000, -1000, -1000, -1000, 861, 1419, -1000,
	-1000, -1000, 849, -1000, 910, 888, 1417, 1453, 910, 1578,
	421, -1000, -1000, 1577, 1576, 1323, -1000, -1000, 182, -1000,
	406, -1000, 888, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1436, -1000, 291, 505, 5598,
	179, -1000, -1000, -1000, -1000, -1000, -1000, 445, -1000, 1697,
	1621, 296, -6, -208, 7349, -1000, 1030, 1012, -1000, 1010,
	-1000, -1000, 5, 888, -1000, -223, 89, 78, -1000, -1000,
	1352, -1000, 1415, 7349, 1568, -1000, 1536, 842, -1000, 6490,
	-1000, -245, -1000, -1000, -1000, -245, -1000, -1000, -1000, 1352,
	-1000, 1412, 1411, -1000, 1409, -1000, -1000, 1352, 1352, 1352,
	536, -1000, -1000, -1000, -1000, -1000, -1000, 1263, 548, 40,
	548, 1253, 1241, 548, 548, -1000, -1000, 989, 607, -1000,
	-1000, -1000, -1000, 1310, -1000, 1301, -1000, 68, 67, -1000,
	1345, -1000, 1282, 1363, 1450, 190, 910, 1408, 1336, 415,
	1336, 1618, 232, 910, 1672, 404, 1672, 406, 888, 306,
	888, -1000, -1000, 367, 4122, -1000, -1000, 1276, -1000, 228,
	1376, 447, 447, -225, 334, 305, 1352, 1407, -1000, -1000,
	655, -1000, 7349, 221, 1352, 1352, -1000, -1000, 520, -1000,
	-1000, -1000, 7756, 7756, 7756, 7756, 7756, 7756, 7756, -1000,
	-1000, -1000, -1000, 10, -1000, -245, -1000, 957, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 535, 533, -1000, 7258, 1352,
	1352, 1352, 1352, 1352, 1352, 1352, 1352, 7349, 1352, 1518,
	1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
	1352, 2649, 1352, 1352, 1352, 1352, -1000, -1000, -1000, -1000,
	-1000, -208, 1406, -1000, -1000, -1000, 679, -1000, 7349, 404,
	908, 113, -1000, 1341, 1237, 1835, 1232, -1000, 7997, -1000,
	1041, -1000, 954, -1000, 779, 1214, 6838, 6929, 6929, 5967,
	-1000, -1000, 548, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 40, 949, 40, -12, -13, 841, -1000, 838, 190,
	888, 910, 1203, 1340, -1000, 222, 1404, 404, -1000, 1646,
	1711, -1000, 1336, 910, -1000, 419, 1668, -1000, -1000, 1616,
	-1000, 1339, -1000, -1000, 1209, 1672, 1402, 888, -1000, -1000,
	284, 888, -1000, -1000, -1000, -1000, -1000, 1667, 445, 1545,
	-1000, -1000, -1000, 723, -1000, -1000, 709, 250, 708, -1000,
	888, -208, 7349, 445, 255, 7349, 7349, 790, -1000, 568,
	7756, 826, 591, 7756, 7756, 7756, 7756, 7756, 7756, 7756,
	7756, 7756, 7756, 7756, 7756, 7756, 7756, 7756, 2279, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 980, -1000, 1336, 893, 893, -242, -242, -242, -242,
	-242, -242, 72, -1000, -264, -1000, -1000, 5229, 5967, 1041,
	1267, 600, 7258, 6929, 6929, 6519, 7349, 7756, 909, 6929,
	1599, 662, 600, 909, 1608, 1041, 1041, 1041, -1000, 1041,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 44,
	-1000, -1000, -1000, -1000, -1000, -1000, 6929, 6929, 6929, 6929,
	-1000, 888, 1352, 655, 1269, -173, 7349, 1401, 828, -1000,
	1189, -245, -1000, -1000, -1000, -153, -1000, -1000, -1000, -1000,
	1041, 6929, 1219, 1267, -1000, 660, -1000, 532, 1219, 660,
	1219, 1352, -1000, 548, -1000, 548, -1000, -1000, 1153, 1135,
	1126, 1400, 1396, -229, 824, 190, 1251, 1627, 1637, 1336,
	1565, 1506, -1000, 1041, 1558, 888, -1000, -1000, -1000, -1000,
	-1000, 233, 642, 888, 3465, 1228, -1000, 686, 1395, 1393,
	374, 1447, 2019, 111, -1000, 969, 620, 900, 619, 608,
	606, 605, 604, 596, 594, -1000, -1000, -1000, -1000, -1000,
	1705, -1000, -1000, -1000, 1689, 1392, 1391, 655, 1249, -1000,
	-101, 568, 595, -1000, -1000, 836, -1000, -1000, 2037, -1000,
	-1000, -1000, -1000, 826, 7756, 7756, 7756, 1892, 2037, 1243,
	84, 96, -242, 15, 15, 9, 9, 9, 9, 9,
	265, 265, -1000, -122, -1000, 1376, 1041, -1000, -245, 890,
	-1000, -1000, 884, 1352, 528, -1000, -1000, -1000, 7349, -1000,
	1041, 1219, 1219, 712, 1337, 8061, 1376, -1000, 1376, 1387,
	-1000, -1000, 119, 1376, 85, -1000, -1000, -1000, -1000, 1387,
	-1000, -1000, -1000, -1000, -1000, 1376, 1376, -1000, -1000, 1376,
	1376, -1000, 1376, 1376, 872, 638, 2025, 1211, -1000, 527,
	1219, 6929, -1000, 745, -1000, 7349, 1041, 910, -1000, -1000,
	-1000, -1000, -1000, 1219, 1041, 1334, 1219, 1219, 1245, -1000,
	7349, 255, 1448, -1000, -1000, 773, -1000, 1108, 1099, -1000,
	-1000, 1219, 6929, -259, -1000, -1000, -1000, 998, -1000, -1000,
	3753, -259, -259, 6929, -1000, -1000, -1000, -1000, -229, 190,
	445, 1657, 1383, 1095, 1657, 1544, 7349, 7349, 1646, -1000,
	1336, -1000, -1000, 1599, -1000, -1000, 739, -1000, 1336, 1202,
	211, 137, 7349, -1000, 3465, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1646, -1000, -1000, -1000, 888,
	2001, 888, 888, 888, 384, 7665, 7349, -1000, -1000, -1000,
	910, 1079, 3756, 686, 686, 3756, 686, 686, 445, 445,
	294, -1000, 888, -1000, -172, 2019, 888, -1000, 820, -1000,
	-1000, 758, 804, 758, 758, 758, 758, 758, 447, 447,
	888, 445, 255, 1667, -1000, -1000, -1000, -1000, -1000, 1892,
	2037, 304, -1000, 7756, 7756, 62, -1000, 53, -1000, -245,
	5967, 600, -1000, -1000, -1000, 3371, 977, 7349, -1000, 218,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3371, 7756, 7756, 7756, 7756, 7756, 5229, -116,
	1194, 627, -1000, 7349, 707, -1000, -1000, -1000, -1000, -1000,
	-1000, 363, 888, 655, -1000, 1695, -179, 92, -1000, -1000,
	-1000, -1000, -1000, 1352, -1000, -1000, 526, -1000, -1000, 1041,
	1657, 1048, 1217, 1667, 7349, 404, -229, 1667, -1000, 1700,
	561, 763, 1329, -1000, 716, 1627, 1041, 1471, -1000, -1000,
	-123, 7349, 4758, 3465, 600, -1000, 1627, 402, 995, 968,
	1328, 8245, -1000, 2646, 818, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	888, 1679, 1673, 1662, 1661, 4389, 221, 702, 136, 1605,
	-1000, -1000, 3756, -1000, -1000, -1000, -1000, -1000, 1213, 1207,
	1378, 1352, 1179, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 679, 679, 1177, 1168, -1000,
	1447, -1000, 7756, 2037, 2037, -16, -1000, 884, -1000, -1000,
	1041, 1376, 1041, -1000, -1000, 655, -1000, -1000, 1041, 1846,
	871, 1958, 886, 456, -1000, 1352, -98, -1000, 600, 7349,
	910, -1000, 255, 447, 447, -1000, -1000, -1000, 147, 831,
	788, 778, 765, 28, -1000, 1635, 416, 4860, -1000, 1667,
	1657, 1667, 1447, 600, 1162, 1657, 1447, -1000, 1514, 7349,
	7349, 7349, -1000, 1544, -1000, 6929, -1000, -1000, -256, 600,
	-1000, -1000, 3465, 1104, -1000, 1544, 1082, 910, 1174, -1000,
	1223, 1612, -1000, -1000, -1000, 1554, 1009, 511, 888, 198,
	-1000, -1000, 1327, 3015, -45, -1000, -1000, -1000, 593, 525,
	973, -1000, 1530, -1000, -1000, 2001, 1541, -1000, -1000, -1000,
	-1000, -1000, 3465, 3465, 3465, 642, 215, -1000, 272, 445,
	888, -1000, 2019, -1000, -1000, 360, 1667, -1000, 2037, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 7756, 7756, -1000, 7756,
	7756, 7756, 1041, 816, 600, 1369, -1000, -1000, -1000, 756,
	-1000, 753, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 101,
	-1000, 1632, 1041, -1000, 1447, 1667, -1000, -1000, -1000, 1667,
	-1000, 1512, 600, 600, -1000, -1000, 1187, 7349, -262, 3229,
	-1000, -1000, 269, 910, -1000, 269, 1133, 968, 910, -1000,
	-1000, 909, 968, 968, 968, 968, 968, -1000, 1503, 1502,
	-1000, 1474, 1468, 1493, 910, -1000, 1125, 1009, 492, 1352,
	-1000, 972, -1000, -1000, -1000, 4125, 1603, 3384, 1327, -45,
	1325, -1000, -36, -34, 2218, 5967, 548, -1000, -1000, -1000,
	-1000, -1000, 888, 1795, 815, 283, 135, 205, 145, -1000,
	168, 1107, 1041, -1000, 910, 1447, 1846, 1846, 1846, 1846,
	251, -1000, -1000, 888, -1000, -1000, -1000, 524, 7349, -1000,
	-1000, -1000, 1447, -1000, 1657, 968, 600, 626, -1000, -1000,
	1227, 1352, -1000, 1657, 968, 1117, -1000, 1121, -1000, 588,
	1612, 1374, 1446, 1268, -1000, -1000, -1000, -1000, 1487, -1000,
	1485, -1000, -1000, -1000, -1000, -158, 477, 472, 463, 888,
	-1000, 1336, -1000, 1325, -45, -52, -1000, -1000, -1000, -1000,
	600, 581, -1000, -1000, -1000, 3465, 623, 631, 3465, -1000,
	-1000, 195, -1000, -1000, -1000, 1366, -1000, -1000, -1000, -1000,
	-1000, 1041, 185, -163, 1098, 5967, 1160, -1000, 600, -1000,
	1654, 1316, -1000, 1445, 909, 1352, -1000, 1171, 888, 1646,
	1117, -1000, 1646, 909, 7349, -1000, -1000, 7349, 1365, -1000,
	7349, -1000, -1000, -1000, -1000, 1357, 1352, 1352, 1352, 1070,
	-1000, -1000, -1000, -1000, -51, -39, -1000, 7349, 398, 100,
	434, -1000, -1000, 888, -1000, 1511, -120, -200, -1000, -1000,
	-1000, 1041, 7349, 1651, 1631, -1000, 1538, 1054, 1278, -1000,
	-1000, 2309, 1041, 1088, 523, 1070, 1627, -1000, 1627, -1000,
	600, 600, 404, 600, -138, 404, 404, 404, 976, 888,
	-1000, -1000, -1000, 600, -1000, 3465, 3096, 1062, -1000, 1510,
	-1000, -1000, -1000, -1000, 7349, 7349, 280, -1000, 1352, -1000,
	-1000, 1384, 888, 888, -1000, -1000, -1000, 1060, 1058, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 994, 994, 994, 492,
	-1000, 203, -1000, -1000, -128, 600, 1303, 1693, -1000, 1352,
	-1000, 1336, 518, -1000, -1000, -1000, -138, -1000, -1000, -1000,
	-158, -1000, -197, 909, 1278, 1041, 888, -1000, -1000, -202,
	1274, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1912, 27, 22, 1903, 1902, 1901, 1900, 1895, 1893,
	1892, 1891, 1890, 1889, 1888, 1886, 1885, 1883, 1881, 146,
	1879, 1878, 1877, 69, 1876, 1875, 1874, 1873, 71, 109,
	82, 92, 896, 1871, 52, 38, 58, 1868, 26, 1867,
	1866, 47, 1865, 37, 1864, 1853, 1154, 1851, 1850, 6,
	57, 72, 101, 1849, 1836, 89, 1332, 1835, 1834, 80,
	1833, 1831, 73, 4, 3, 42, 8, 1830, 68, 7,
	1829, 70, 1828, 1827, 1824, 1823, 16, 1822, 45, 60,
	14, 55, 1821, 15, 65, 39, 23, 9, 5, 41,
	28, 1820, 20, 29, 25, 1818, 59, 1817, 105, 40,
	54, 75, 0, 79, 83, 1816, 1814, 1813, 120, 74,
	30, 11, 1812, 1811, 1809, 63, 90, 34, 87, 78,
	1808, 88, 1807, 1806, 1802, 1800, 1799, 86, 808, 106,
	85, 62, 1797, 1796, 77, 336, 305, 76, 335, 1438,
	66, 1795, 1794, 1793, 104, 1791, 51, 93, 21, 455,
	1790, 1789, 1788, 1787, 1785, 1784, 1783, 97, 1782, 84,
	46, 24, 112, 50, 1781, 1780, 1778, 1777, 67, 1776,
	1775, 1773, 49, 1772, 1770, 91, 61, 108, 100, 102,
	1768, 1765, 64, 103, 96, 1763, 95, 43, 19, 10,
	1760, 48, 1758, 1757, 1756, 1, 2, 1755, 1751, 1750,
	1748, 1747, 1743, 53, 1741, 81, 1740, 13, 1737, 1734,
	44, 1733, 1729, 1728, 1726, 1721, 364, 439, 1719, 94,
	107, 1718, 133,
}

var yyR1 = [...]uint8{
	0, 212, 213, 213, 1, 1, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 15, 15, 215, 215,
	2, 2, 3, 4, 4, 5, 5, 6, 6, 22,
	22, 7, 8, 8, 8, 218, 218, 41, 41, 85,
	85, 9, 9, 9, 9, 10, 10, 192, 192, 191,
	193, 193, 11, 11, 11, 11, 11, 185, 185, 185,
	185, 185, 12, 12, 188, 188, 188, 13, 13, 13,
	90, 90, 94, 94, 94, 95, 95, 95, 95, 204,
	204, 114, 114, 214, 214, 219, 219, 219, 219, 219,
	219, 219, 183, 183, 183, 183, 184, 184, 184, 184,
	186, 186, 187, 187, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 190, 190, 100, 100, 166, 166,
	166, 167, 167, 167, 167, 167, 167, 169, 169, 170,
	170, 106, 106, 171, 171, 18, 151, 152, 152, 152,
	152, 152, 152, 152, 139, 139, 139, 117, 117, 117,
	117, 117, 117, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 177, 177, 177, 177, 177, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 179, 180, 181, 173,
	173, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 129, 129, 129, 129, 129,
	129, 172, 172, 168, 168, 168, 168, 121, 121, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 120,
	120, 120, 120, 120, 120, 120, 125, 125, 122, 122,
	122, 122, 122, 122, 122, 122, 118, 118, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	126, 126, 124, 124, 124, 124, 124, 124, 124, 124,
	138, 138, 127, 127, 136, 136, 137, 137, 137, 128,
	128, 128, 135, 135, 135, 132, 132, 133, 133, 134,
	134, 134, 130, 130, 130, 131, 131, 131, 141, 162,
	162, 162, 164, 164, 165, 165, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 150, 150, 182,
	182, 161, 161, 161, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 149, 149, 159, 159, 160, 160, 157,
	157, 157, 158, 144, 144, 144, 144, 144, 145, 145,
	146, 146, 146, 146, 142, 142, 143, 143, 175, 175,
	175, 208, 208, 208, 208, 208, 208, 209, 209, 176,
	176, 147, 147, 148, 148, 155, 155, 155, 155, 220,
	220, 153, 153, 153, 154, 154, 154, 221, 19, 20,
	20, 21, 21, 21, 25, 25, 25, 23, 23, 24,
	24, 30, 30, 29, 29, 31, 31, 31, 31, 105,
	105, 105, 104, 104, 205, 205, 205, 205, 205, 33,
	33, 34, 34, 35, 35, 36, 36, 36, 195, 195,
	194, 194, 196, 196, 196, 196, 196, 196, 48, 48,
	83, 83, 83, 86, 86, 37, 37, 37, 37, 38,
	38, 39, 39, 40, 40, 112, 112, 111, 111, 111,
	110, 110, 42, 42, 42, 44, 43, 43, 43, 43,
	45, 45, 47, 47, 46, 46, 49, 49, 49, 49,
	50, 50, 84, 84, 32, 32, 32, 32, 32, 32,
	32, 97, 97, 52, 52, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 61, 61, 61, 61, 61,
	61, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 28, 28, 62, 62, 62, 68, 63, 63,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 59, 59, 59,
	59, 59, 59, 59, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 222, 222, 60, 60, 60, 60, 26,
	26, 26, 26, 26, 113, 113, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 116, 116,
	116, 116, 116, 116, 116, 116, 72, 72, 27, 27,
	70, 70, 71, 99, 99, 73, 73, 69, 69, 69,
	197, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 74, 74, 75, 75, 206, 206, 207, 76, 76,
	77, 77, 78, 79, 79, 79, 80, 80, 80, 80,
	81, 81, 81, 54, 54, 54, 54, 54, 54, 82,
	82, 82, 82, 87, 87, 64, 64, 66, 66, 65,
	67, 88, 88, 92, 89, 89, 93, 93, 93, 93,
	93, 16, 17, 91, 91, 91, 107, 107, 107, 98,
	98, 96, 96, 102, 103, 103, 103, 108, 108, 109,
	109, 198, 198, 198, 199, 199, 199, 200, 200, 201,
	202, 202, 203, 211, 211, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 216, 217,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 7, 10, 7, 11, 11, 9, 13,
	16, 5, 8, 11, 13, 13, 6, 7, 1, 1,
	4, 6, 10, 1, 3, 1, 3, 7, 8, 1,
	1, 8, 8, 7, 6, 1, 1, 1, 3, 0,
	4, 3, 4, 5, 4, 2, 6, 1, 3, 2,
	0, 1, 2, 2, 2, 3, 5, 0, 2, 2,
	2, 2, 3, 5, 1, 2, 3, 7, 5, 9,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 0, 3, 0, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 1, 1, 1, 3,
	1, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 4, 0, 3, 0, 2,
	2, 0, 2, 2, 2, 2, 2, 0, 2, 0,
	3, 0, 1, 0, 2, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 2, 2, 2, 3, 1, 1,
	1, 1, 1, 2, 2, 3, 2, 4, 2, 4,
	2, 2, 3, 2, 3, 2, 7, 9, 3, 3,
	6, 9, 9, 6, 6, 8, 8, 5, 8, 7,
	4, 0, 2, 4, 6, 2, 4, 2, 1, 1,
	1, 2, 1, 1, 1, 3, 1, 2, 1, 1,
	2, 0, 4, 3, 4, 3, 3, 3, 3, 3,
	3, 3, 2, 4, 6, 2, 3, 2, 3, 1,
	3, 0, 2, 0, 2, 2, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 2, 2, 2, 1, 1, 0, 1, 1, 3,
	3, 2, 2, 2, 1, 1, 1, 1, 4, 5,
	4, 4, 4, 1, 2, 2, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	3, 3, 0, 3, 3, 0, 1, 0, 1, 0,
	2, 1, 0, 3, 3, 0, 1, 2, 6, 0,
	1, 4, 1, 2, 1, 3, 2, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 1,
	1, 0, 2, 5, 2, 3, 3, 2, 3, 2,
	2, 3, 4, 1, 1, 1, 1, 1, 3, 3,
	2, 2, 1, 2, 5, 5, 8, 8, 13, 11,
	1, 1, 2, 2, 10, 8, 7, 5, 0, 1,
	1, 0, 1, 1, 1, 2, 2, 1, 2, 0,
	3, 0, 1, 1, 3, 0, 4, 1, 3, 2,
	1, 1, 2, 1, 1, 1, 1, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 3, 6, 4, 7, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 0, 4,
	1, 3, 1, 1, 1, 1, 1, 1, 4, 8,
	1, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 0, 4, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 6, 2, 2, 2, 2, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 2, 1, 4, 5, 5,
	5, 5, 6, 4, 4, 4, 6, 6, 6, 6,
	6, 8, 8, 6, 8, 8, 9, 7, 5, 4,
	4, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	2, 1, 1, 2, 2, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 0, 2, 1, 3, 5,
	3, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 3, 0, 2, 1, 3, 1, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 5,
	3, 1, 3, 1, 2, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 2, 0, 2, 2, 0, 1, 4,
	1, 3, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -212, -1, -14, -15, -18, 122, 123, -213, 377,
	-151, 56, -208, -209, -171, 131, 144, 162, 163, 349,
	129, 361, 362, 146, 364, 76, -96, 134, -152, -139,
	-102, 61, 34, 59, 130, 130, 132, 202, 132, -102,
	-102, 135, -46, -108, 59, 61, 129, -98, 135, 364,
	361, 362, 329, 129, 58, 57, -140, -117, -121, -118,
	-123, -122, -124, -102, -119, -120, 238, 341, 235, 239,
	236, 241, 242, 243, 116, 240, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 244, 256, 31,
	151, 228, 229, 230, 233, 232, 234, 231, 257, 258,
	259, 260, 261, 262, 263, 264, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 220, 221, 223, 224,
	225, 227, 226, -140, -140, -102, 54, 201, -102, -98,
	203, -98, 54, -183, 54, 19, 182, 183, 195, 78,
	23, 119, -98, -46, 78, -46, 293, -155, -220, 344,
	35, -139, -141, -144, -142, -143, -156, -145, 138, 136,
	375, 140, 141, 146, -149, 142, 130, 147, 71, 78,
	-177, 138, -180, 54, 272, 278, 136, 147, 146, 375,
	69, 139, 23, 351, 353, 29, 30, -134, 378, 266,
	-132, 275, -127, 56, -127, -126, 237, -128, 56, -127,
	-128, -127, -128, -130, 239, -130, -130, -130, -130, 56,
	56, -127, -127, -127, -127, -127, -136, 56, -125, 222,
	-136, -137, 56, -137, 54, 55, -46, -102, 54, -46,
	-204, 372, 373, -46, -46, -186, -184, 8, 9, 10,
	-46, 196, 24, -117, -109, -108, -101, 127, 183, 352,
	77, 23, 25, 272, 278, 182, 80, 116, 16, 81,
	189, 361, 362, 115, 330, 122, 50, 322, 323, 320,
	187, 332, 333, 321, 279, 194, 20, 29, 372, 10,
	26, 149, 22, 109, 124, 184, 84, 85, 152, 24,
	150, 73, 190, 192, 19, 53, 142, 11, 351, 13,
	14, 366, 353, 135, 134, 96, 365, 130, 48, 8,
	118, 27, 373, 93, 44, 147, 193, 46, 94, 17,
	324, 325, 32, 339, 156, 111, 51, 38, 367, 78,
	368, 71, 54, 293, 188, 76, 15, 49, 157, 369,
	144, 191, 95, 125, 329, 47, 185, 370, 128, 186,
	6, 335, 31, 148, 45, 129, 280, 83, 133, 72,
	163, 5, 146, 9, 52, 55, 326, 327, 328, 36,
	82, 12, 145, 343, 74, -46, 24, 127, -46, -153,
	57, -103, 69, -102, 286, -101, 34, 56, -176, 54,
	78, -147, -102, 147, -216, 56, -149, -149, 59, -149,
	59, 130, 59, 147, 71, 19, -102, 9, 147, 147,
	-176, 61, -46, 56, -173, 352, 16, 56, -178, 56,
	-179, 61, 62, 63, 64, 71, -129, 70, -52, 267,
	-59, 320, 323, 322, 268, 72, 73, -102, 338, 337,
	-108, 59, -181, 63, 379, -133, 276, 63, -130, -127,
	-130, 63, 59, -130, -130, -131, 116, 115, 31, -131,
	-131, -131, -131, -138, 61, -138, -135, 343, 344, -135,
	63, -136, 63, -46, -102, 56, 54, -46, 23, 132,
	23, -166, 23, 54, 57, 196, -183, -102, 55, -106,
	138, -144, 146, 127, 86, -103, -220, -160, -157, -102,
	147, 10, 9, 19, 142, 136, 375, -175, 361, 362,
	-32, -51, 78, -56, 29, 24, -55, -52, -69, -197,
	-67, -68, 116, 117, 105, 106, 113, 79, 118, -59,
	-57, -58, -60, -200, 173, 61, 62, -102, 60, 70,
	63, 64, 65, 66, 71, -108, 298, -65, -216, 46,
	47, 330, 331, 332, 333, 339, 334, 81, 36, 38,
	244, 267, 268, 320, 328, 327, 326, 324, 325, 322,
	323, 374, 135, 321, 111, 329, 265, 59, 59, 59,
	-175, 146, -147, -102, 363, -177, 375, -129, -216, 56,
	-32, 23, 29, 63, -178, 56, -179, -168, 374, -168,
	-216, -127, 56, -127, 56, 56, -216, -216, -216, 119,
	58, -131, -130, -131, 58, 58, -131, -131, 59, 59,
	116, 58, 57, 58, 228, 228, 57, 58, 57, 56,
	55, 54, -159, -160, -59, -102, -46, 56, -2, -3,
	-4, 6, -216, -98, -2, -167, 19, 170, 171, -46,
	-184, -83, -102, 147, -186, -183, -102, -215, 130, 147,
	-102, 138, -144, -154, -103, 61, 63, 58, 57, -127,
	-158, 270, -127, -146, 166, 167, 31, 168, -146, 363,
	147, 147, -216, 56, -217, 77, 76, 93, 58, -32,
	-53, 96, 78, 94, 95, 80, 102, 101, 112, 105,
	106, 107, 108, 109, 110, 111, 103, 104, 374, 86,
	87, 88, 89, 90, 91, 92, 97, 98, 99, 100,
	-97, -216, -68, -216, 120, 121, -56, -56, -56, -56,
	-56, -56, -56, -201, 266, -168, 61, 119, 119, -2,
	-63, -32, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -72, -32, -216, 39, -216, -216, -216, -222, -216,
	-222, -222, -222, -222, -222, -222, -222, -116, 116, 239,
	151, 230, -119, -118, 245, 244, -216, -216, -216, -216,
	-175, 56, -176, -32, -83, 58, 56, 353, 57, 58,
	-178, 61, 58, 269, 118, -117, -217, 58, 58, 58,
	-30, 22, -29, -63, -31, -32, 107, -108, -29, -32,
	-29, -103, -131, -130, 61, -130, 277, 277, 63, 63,
	-159, -102, -46, 58, 56, 56, -83, -76, 15, -21,
	5, -19, -221, -2, -46, 133, 21, 6, 8, 9,
	10, 19, -100, 57, 23, -186, -214, 56, -102, 146,
	-102, -162, -164, 343, -163, 55, 143, 69, 175, 176,
	177, 178, 179, 180, 181, -157, -79, 25, 26, -176,
	54, 71, 169, -176, 54, -147, -175, -32, -160, -172,
	168, -32, -32, -61, 71, 78, 72, 73, -56, -62,
	-65, -68, 67, 96, 94, 95, 80, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, -121, 229, -116, -119, 59, -55, 61, -102,
	-55, -102, 378, -103, -109, -101, -103, -217, 57, -217,
	-2, -29, -29, -32, -115, 116, 235, 151, 230, 224,
	254, 255, 274, 228, 275, 217, 209, 214, 227, 225,
	211, 226, 210, 223, 220, 233, 232, 234, 245, 236,
	241, 243, 242, 240, -32, -69, -56, -69, -102, -108,
	-29, -23, 22, -70, -71, 82, -69, 19, -217, -217,
	-217, -217, 237, -29, -30, -29, -29, -29, -148, -102,
	-216, -217, 58, 349, 350, -32, 56, 63, 58, -134,
	-217, -29, 57, -217, -217, -105, -104, 23, -102, 61,
	119, -217, -217, -216, -131, -131, 58, 58, 58, 56,
	56, -84, 365, -159, 58, -80, 17, 16, -5, -3,
	-216, 21, 22, -25, 42, 43, -20, -217, 23, -148,
	184, -99, 82, -102, -187, -189, -6, -8, -7, -10,
	-9, -11, -12, -13, -16, -3, -22, 10, 9, 20,
	31, 188, 189, 194, 190, 145, 135, -17, 8, 329,
	54, -219, -102, 105, 86, 61, -139, 57, 56, 56,
	136, -161, 54, -163, 343, 56, 345, 59, -150, 86,
	61, 86, 86, 86, 86, 86, 86, 86, 9, 10,
	56, 56, -217, 58, 336, 71, 72, 73, -62, -56,
	-56, -56, -28, 152, 77, 343, -217, -202, -203, 61,
	119, -32, -217, -217, -217, 57, 55, 57, -127, -127,
	-127, -137, 215, -127, 215, -137, -127, -127, -127, -127,
	-127, -127, 23, 57, 11, 57, 57, 11, 119, -217,
	-29, -73, -71, 84, -32, -217, -108, -217, -217, -217,
	-217, 58, 57, -32, -172, 54, 58, -174, 58, 58,
	-217, -31, -205, 376, -104, 107, -109, -205, -205, -30,
	-84, -159, -160, -50, 12, 56, 58, -50, -81, 19,
	32, -32, -77, -78, -32, -76, -2, -23, 68, -2,
	-169, 55, 185, 204, -32, -189, -76, -19, -19, -19,
	-192, -102, -191, -19, -211, -210, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, -102, -102, -102,
	-185, 38, 191, 192, 193, -51, -56, -32, -51, -46,
	58, -219, -102, -219, -219, -219, -219, -219, -160, -160,
	147, -102, -165, -163, -102, 63, -182, 54, 74, 63,
	-182, -182, -182, -182, -182, -146, -146, -148, -160, -172,
	-162, -28, 77, -56, -56, 228, 379, 57, -168, -103,
	-115, 116, -113, 59, 61, -32, -130, 59, -115, -56,
	-56, -56, -56, -56, -103, 340, -76, 85, -32, 83,
	139, -102, -217, 10, 9, 349, 350, 58, 205, 355,
	356, 156, 357, 168, 358, 359, -216, 119, -217, -50,
	58, 58, -162, -32, -83, -84, -162, 9, 96, 57,
	18, 57, -79, -80, -217, -24, 45, -170, 343, -32,
	-190, -189, 204, -188, -189, -80, -96, 11, -41, -46,
	-34, -35, -36, -37, -48, -68, -216, -46, 57, -193,
	-117, 186, -89, -114, 206, -93, 288, 287, -103, 298,
	-91, 286, 239, 285, -182, 57, -102, 11, 11, 11,
	11, -189, 204, 83, 204, -100, 19, 58, 58, 56,
	-216, 58, 57, -176, -176, 58, 58, -161, -56, 277,
	-203, -217, -217, -217, -217, -217, 19, 57, -217, 57,
	19, -216, -27, 335, -32, -46, -172, -146, -146, 343,
	63, 16, 63, 63, 63, 63, 356, 156, 358, 16,
	-217, 157, -76, 107, -162, -50, -162, -161, 58, -50,
	-161, 40, -32, -32, -78, -81, -29, 375, -189, 377,
	-189, -81, -47, 27, -46, -46, -41, -218, 57, 11,
	55, 31, 57, -42, -44, -43, -45, 44, 48, 50,
	45, 46, 47, 51, -112, 23, -34, -216, -111, 157,
	-110, 23, -108, 61, -191, -102, 187, 57, -89, 206,
	-90, -94, 289, 291, 86, 119, -107, -102, 61, 29,
	31, -210, 27, -188, -187, -188, -99, 184, -198, 197,
	78, -160, -102, -163, 139, -162, -56, -56, -56, -56,
	-56, -217, 61, 56, 63, 63, 360, -108, 16, -217,
	-161, -162, -162, 41, -33, 11, -32, 377, 85, -189,
	-85, 157, -46, -85, 55, -34, -46, -88, -92, -69,
	-35, -36, -36, -35, -36, 44, 44, 44, 49, 44,
	49, 44, -43, -108, -217, -49, 52, 134, 53, -216,
	-110, 19, -93, -90, 57, 290, 292, 293, 54, 74,
	-32, -103, -131, -102, 85, 377, 377, 85, 204, 185,
	-199, 198, 197, 58, -217, -46, -161, -217, -217, -217,
	-217, -26, 96, 343, -148, 119, -206, -207, -32, -161,
	-50, -34, 85, -54, 31, 36, -2, -216, -216, -50,
	-34, -50, -50, 57, 86, -39, -38, 54, 55, -40,
	54, -38, 44, 44, -195, 343, 130, 130, 130, -86,
	-102, -2, -94, -95, 294, 291, 297, 86, 85, 84,
	-188, 200, 199, 56, -217, 341, 51, 346, 58, -103,
	-217, -76, 57, -74, 13, -87, 54, -88, -64, -66,
	-65, -216, -2, -82, -102, -86, -76, -50, -76, -92,
	-32, -32, 56, -32, 56, -216, -216, -216, -217, 57,
	291, 295, 296, -32, 135, 204, 377, -148, 41, 342,
	347, -217, -207, -75, 14, 16, 28, -87, 57, -217,
	-217, -217, 57, 119, -217, -80, -80, -83, -194, -196,
	366, 367, 368, 369, 370, 371, -83, -83, -83, -111,
	-102, -188, 85, 58, 41, -32, -63, 147, -66, 36,
	-2, -216, -102, -102, 58, 58, 57, -217, -217, -217,
	-49, 85, 343, 9, -64, -2, 119, -196, -195, 346,
	-88, -217, -102, 347,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 771, 1, 3,
	6, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	769, 392, 393, 394, 397, 0, 0, 772, 0, 148,
	191, 191, 191, 773, 0, 0, 769, 0, 769, 0,
	0, 0, 0, 504, 777, 778, 769, 0, 0, 398,
	395, 396, 144, 0, 405, 0, 154, 319, 315, 158,
	159, 160, 161, 162, 302, 238, 266, 267, 302, 290,
	309, 302, 309, 273, 302, 309, 322, 322, 322, 322,
	322, 281, 282, 283, 284, 285, 286, 287, 0, 0,
	258, 302, 302, 302, 302, 302, 264, 265, 292, 293,
	294, 295, 296, 297, 298, 299, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 304, 256, 304, 306,
	306, 254, 255, 155, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 0, 0,
	0, 0, 0, 145, 0, 0, 0, 146, 407, 0,
	410, 149, 150, 151, 152, 153, 0, 399, 401, 0,
	0, 0, 0, 0, 0, 0, 363, 364, 164, 0,
	166, 0, 168, 0, 170, 171, 0, 173, 175, 399,
	0, 0, 0, 0, 0, 0, 0, 163, 0, 321,
	317, 316, 237, 0, 322, 302, 291, 322, 0, 322,
	322, 274, 275, 325, 0, 325, 325, 325, 325, 0,
	0, 312, 312, 261, 262, 263, 249, 0, 304, 257,
	251, 252, 0, 253, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 0, 128, 0, 110, 106, 107, 108,
	0, 105, 0, 21, 505, 779, 780, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 0, 770, 141, 0, 0,
	0, 411, 413, 774, 775, 776, 409, 0, 373, 0,
	0, 0, 402, 354, 787, 944, 0, 0, 357, 0,
	359, -2, 388, 401, 165, 0, 0, 0, 172, 174,
	0, 178, 179, 787, 0, 209, 0, 0, 192, 0,
	195, -2, 198, 199, 200, 233, 202, 203, 204, 0,
	206, 302, 302, 229, 0, 523, 524, 0, 0, 0,
	0, -2, 207, 208, 320, 157, 318, 0, 325, 322,
	325, 0, 0, 325, 325, 276, 326, 0, 0, 277,
	278, 279, 280, 0, 300, 0, 259, 0, 0, 260,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 769,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	401, 26, 142, 0, 0, 412, 408, 0, 367, 302,
	302, 0, 0, 0, 0, 0, 0, 0, 389, 390,
	0, 514, 787, 519, 521, 0, 560, 561, 562, 563,
	564, 565, 787, 787, 787, 787, 787, 787, 787, 591,
	592, 593, 594, 0, 596, -2, 702, 697, 704, 705,
	706, 707, 708, 709, 710, 0, 0, 750, 787, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 633, 633, 633, 633, 633, 633, 633,
	633, 0, 0, 0, 0, 0, 788, 355, 356, 358,
	361, 388, 0, 402, 190, 167, 399, 169, 787, 0,
	0, 0, 210, 0, 0, 0, 0, 197, 0, 201,
	0, 225, 0, 227, 0, 0, -2, 787, 787, 0,
	303, 268, 325, 270, 310, 311, 271, 272, 327, 323,
	324, 322, 0, 322, 0, 0, 0, 307, 0, 0,
	0, 0, 0, 365, 366, 302, 0, 0, -2, 718,
	0, 417, 0, 0, -2, 0, 0, 129, 130, 126,
	111, 109, 470, 471, 0, 0, 93, 0, 28, 29,
	402, 401, 27, 406, 414, 415, 416, 329, 0, 723,
	371, 372, 370, 399, 380, 381, 0, 0, 399, 400,
	401, 388, 787, 0, 231, 787, 787, 0, 945, 517,
	787, 0, 0, 787, 787, 787, 787, 787, 787, 787,
	787, 787, 787, 787, 787, 787, 787, 787, 0, 541,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	520, 0, 534, 0, 0, 0, 582, 583, 584, 585,
	586, 587, 588, 595, 0, 701, 703, 0, 0, 33,
	0, 558, 787, 787, 787, 787, 787, 787, 0, 787,
	427, 0, 687, 0, 0, 0, 0, 0, 624, 0,
	625, 626, 627, 628, 629, 630, 631, 632, 678, 0,
	680, 681, 682, 683, 684, 685, 787, -2, 787, 787,
	362, 0, 0, 0, 0, 0, 787, 187, 0, 193,
	0, 233, 196, 234, 235, 319, 205, 226, 228, 230,
	0, 787, 0, 0, 433, 439, 435, 0, 0, 439,
	0, 0, 269, 325, 301, 325, 313, 314, 0, 0,
	0, 0, 0, 512, 944, 0, 0, 726, 0, 0,
	421, 424, 419, 33, 0, 0, 132, 133, 134, 135,
	136, 0, 693, 0, 0, 0, 22, 95, 0, 0,
	402, 351, 330, 0, 332, 0, 347, 0, 0, 0,
	0, 0, 0, 0, 0, 368, 369, 724, 725, 374,
	0, 382, 383, 375, 0, 0, 0, 0, 0, 387,
	0, 515, 516, 518, 535, 0, 537, 539, 525, 526,
	554, 555, 556, 0, 787, 787, 787, 552, 530, 0,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 580, 0, 590, 302, 0, 578, 233, 0,
	579, 589, 0, 698, 0, -2, 700, 557, 787, 749,
	33, 0, 0, 0, 0, -2, 302, 649, 302, 306,
	652, 653, 654, 302, 657, 659, 660, 661, 662, 306,
	664, 665, 666, 667, 668, 302, 302, 671, 672, 302,
	302, 675, 302, 302, 0, 562, 0, 0, 697, 0,
	0, 787, 428, 695, 690, 787, 0, 0, 621, 622,
	623, 634, 679, 0, 0, 432, 0, 0, 0, 403,
	787, 231, 180, 183, 184, 0, 211, 0, 0, 236,
	597, 0, 787, 444, 603, 436, 440, 0, 442, 443,
	0, 444, 444, -2, 288, 289, 305, 308, 512, 0,
	0, 510, 0, 0, 510, 730, 787, 787, 718, 35,
	0, 422, 423, 427, 425, 426, 418, 34, 0, 137,
	0, 0, 787, 472, 18, 112, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 718, 417, 417, 417, 0,
	417, 0, 0, 0, 67, 787, 787, 761, 39, 40,
	0, 0, -2, 95, 95, -2, 95, 95, 0, 0,
	0, 328, 0, 333, 0, 0, 0, 336, 0, 348,
	338, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 329, 232, 536, 538, 540, 527, 552,
	531, 0, 528, 787, 787, 0, 522, 0, 790, 233,
	0, 559, -2, 604, 605, 0, 0, 787, 646, 322,
	650, 651, 655, 656, 658, 663, 669, 670, 673, 674,
	676, 677, 0, 787, 787, 787, 787, 787, 0, 0,
	718, 0, 691, 787, 0, 619, 620, 635, 636, 637,
	638, 0, 0, 0, 176, 0, 0, 0, 189, 194,
	598, 434, 599, 0, 441, 437, 0, 600, 601, 0,
	510, 0, 0, 329, 787, 0, 512, 329, 30, 0,
	0, 727, 719, 720, 723, 726, 33, 429, 420, -2,
	139, 787, 127, 0, 694, 113, 726, 771, 0, 0,
	55, 60, 57, 0, 0, 793, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 62, 63, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 514, 126,
	94, 96, -2, 97, 98, 99, 100, 101, 0, 0,
	0, 352, 0, 334, 339, 337, 340, 349, 350, 341,
	342, 343, 344, 345, 346, 399, 399, 0, 0, 386,
	351, 529, 787, 553, 532, 0, 789, 0, 792, 699,
	0, 302, 0, 644, 645, 0, 647, 648, 0, 0,
	0, 0, 0, 0, 698, 0, 688, 618, 696, 787,
	0, 404, 231, 0, 0, 185, 186, 188, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 602, 329,
	510, 329, 351, 511, 0, 510, 351, 731, 0, 787,
	787, 787, 722, 730, 36, 787, 430, 16, 0, 138,
	17, 124, 0, 0, 74, 730, 0, 0, 0, 47,
	0, 451, 453, 454, 455, 485, 0, 487, 0, 0,
	59, 61, 51, 0, 0, 754, 91, 92, 0, 0,
	0, -2, 0, 765, 762, 0, 65, 68, 69, 70,
	71, 72, 0, 0, 0, 693, 0, 23, 781, 0,
	0, 331, 0, 376, 377, 0, 329, 385, 533, 581,
	791, 606, 609, 607, 608, 610, 787, 787, 613, 787,
	787, 787, 0, 0, 692, 0, 177, 181, 182, 0,
	213, 0, 215, 216, 217, 218, 219, 220, 221, 0,
	445, 0, 0, 438, 351, 329, 10, 8, 513, 329,
	12, 0, 728, 729, 721, 31, 449, 787, 0, 0,
	75, 123, 49, 0, 503, -2, 0, 0, 0, 45,
	46, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	495, 0, 0, 0, 0, 486, 0, 0, 506, 0,
	488, 0, 490, 491, 58, 0, 0, 0, 52, 0,
	54, 80, 0, 0, 787, 0, 325, 766, 767, 768,
	764, 794, 0, 0, 0, 0, 0, 0, 784, 782,
	0, 0, 0, 335, 0, 351, 0, 0, 0, 0,
	639, 617, 689, 0, 212, 214, 223, 0, 787, 447,
	7, 11, 351, 732, 510, 0, 140, 0, 19, 76,
	0, 0, 502, 510, 0, 510, 48, 510, 751, 0,
	452, 481, 483, 0, 478, 493, 494, 496, 0, 498,
	0, 500, 501, 456, 457, 458, 0, 0, 0, 0,
	489, 0, 755, 53, 0, 0, 83, 84, 756, 757,
	758, 0, 760, 66, 73, 0, 0, 78, 0, 127,
	25, 0, 783, 24, 353, 0, 384, 612, 611, 614,
	615, 0, 0, 0, 0, 0, 0, 715, 717, 9,
	711, 450, 125, 743, 0, 0, -2, 0, 0, 718,
	510, 44, 718, 0, 787, 475, 482, 787, 0, 476,
	787, 477, 497, 499, 468, 0, 0, 0, 0, 0,
	473, -2, 81, 82, 0, 0, 88, 787, 0, 0,
	0, 785, 786, 0, 616, 0, 0, 0, 379, 224,
	446, 0, 787, 713, 0, 37, 0, 743, 733, 745,
	747, 787, 33, 0, 739, 0, 726, 43, 726, 752,
	753, 479, 0, 484, 0, 0, 0, 0, 487, 0,
	85, 86, 87, 759, 77, 0, 0, 0, 640, 0,
	643, 448, 716, 32, 787, 787, 0, 38, 0, 748,
	-2, 0, 0, 0, 50, 42, 41, 0, 0, 460,
	462, 463, 464, 465, 466, 467, 0, 0, 0, 506,
	474, 0, 20, 378, 641, 714, 712, 0, 746, 0,
	-2, 0, 741, 740, 480, 459, 0, 507, 508, 509,
	458, 79, 0, 0, 736, 33, 0, 461, 469, 0,
	744, -2, 742, 642,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 377,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 378, 3, 379, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:406
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:411
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:412
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:420
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:425
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:445
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:465
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:486
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:502
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:519
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:538
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:549
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:561
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:572
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:588
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:602
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:616
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:629
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[6].colIdent,
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:643
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:654
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 23:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 24:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:674
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:688
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:707
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:716
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:731
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:739
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 32:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:746
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:752
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:756
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:762
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:766
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:773
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:785
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:797
		{
			yyVAL.str = InsertStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:801
		{
			yyVAL.str = ReplaceStr
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:807
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:813
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:817
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:821
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:826
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:827
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:831
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:835
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:840
		{
			yyVAL.partitions = nil
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:844
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:850
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:854
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:858
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:862
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:868
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:872
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:885
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:889
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:895
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:900
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:904
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:910
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:917
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:924
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:931
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:939
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:949
		{
			yyVAL.str = ""
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:953
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:957
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:961
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:965
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:971
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:978
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:988
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:992
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:996
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1003
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1012
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 79:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1020
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1031
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1035
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1041
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1045
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1049
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1055
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1059
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1063
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1067
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1073
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1077
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1083
		{
			yyVAL.str = SessionStr
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1087
		{
			yyVAL.str = GlobalStr
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1092
		{
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1093
		{
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1097
		{
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1098
		{
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1099
		{
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1100
		{
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1101
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1102
		{
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1103
		{
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1107
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1111
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1115
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1119
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1125
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1129
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1133
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1138
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1144
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1148
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1154
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1158
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1164
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1176
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1195
		{
			yyVAL.empty = struct{}{}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1197
		{
			yyVAL.empty = struct{}{}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1200
		{
			yyVAL.bytes = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1204
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1208
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1213
		{
			yyVAL.bytes = nil
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1217
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1221
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1225
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1229
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1233
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1238
		{
			yyVAL.expr = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1242
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1247
		{
			yyVAL.expr = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1251
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1256
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1260
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1265
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1269
		{
			yyVAL.bytes = nil
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1275
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1282
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1288
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1292
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1301
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1305
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1309
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1313
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1319
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1324
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1329
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1335
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1346
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1352
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1365
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1370
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1375
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1380
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1386
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1391
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1396
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1401
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1406
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1411
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1416
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1421
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1426
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1435
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1445
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1450
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1455
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1462
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1469
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1477
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1482
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1487
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1492
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1498
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1504
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1510
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1516
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1522
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1528
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1532
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1536
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1540
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1544
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1550
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1554
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1558
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1562
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1566
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1570
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1574
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1578
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1582
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1588
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1594
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1600
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1606
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1610
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1615
		{
			yyVAL.sequence = &Sequence{}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1619
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1624
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1629
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1634
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1639
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1644
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1649
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1654
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1659
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1664
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1669
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1674
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1679
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1686
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1690
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1694
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1698
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1702
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1706
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1711
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1720
		{
			yyVAL.bytes = nil
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1729
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1734
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1821
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1825
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1965
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1969
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2009
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2014
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2019
		{
			yyVAL.optVal = nil
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2023
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2028
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2032
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2040
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2044
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2050
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2058
		{
			yyVAL.optVal = nil
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2062
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2066
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2075
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2079
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2083
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2088
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2092
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2097
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2101
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2106
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2110
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2114
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2119
		{
			yyVAL.str = ""
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2123
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2127
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2132
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2136
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2140
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2146
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2151
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2155
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2159
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2165
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2169
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2175
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2179
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2185
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2189
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2194
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2198
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2202
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2206
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2210
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2214
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2218
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2222
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2226
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2232
		{
			yyVAL.str = ""
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2236
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2242
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2246
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2252
		{
			yyVAL.indexPartition = nil
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2256
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2260
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2266
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2270
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2274
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2278
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2282
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2286
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2290
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2294
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2298
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2304
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2308
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2314
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2319
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2325
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2329
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2340
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2344
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2354
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2359
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2366
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 376:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2373
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 377:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2380
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 378:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2389
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 379:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2400
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2411
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2415
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2419
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2423
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 384:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2429
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 385:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2439
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 386:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2450
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2459
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2468
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2472
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2476
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2482
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2486
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2490
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2494
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2498
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2502
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2508
		{
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2509
		{
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2513
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2517
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2522
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2529
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2533
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2540
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2544
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2550
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2554
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2559
		{
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2560
		{
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2564
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2568
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2572
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2578
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2582
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2586
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2591
		{
			setAllowComments(yylex, true)
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2595
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2601
		{
			yyVAL.bytes2 = nil
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2605
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2611
		{
			yyVAL.str = UnionStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2615
		{
			yyVAL.str = UnionAllStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2619
		{
			yyVAL.str = UnionDistinctStr
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2624
		{
			yyVAL.str = ""
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2628
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2632
		{
			yyVAL.str = SQLCacheStr
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2637
		{
			yyVAL.str = ""
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2641
		{
			yyVAL.str = DistinctStr
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2646
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2650
		{
			yyVAL.str = StraightJoinHint
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2655
		{
			yyVAL.selectExprs = nil
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2659
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2665
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2669
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2675
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2679
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2683
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2687
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2692
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2696
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2700
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2707
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2712
		{
			yyVAL.overExpr = nil
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2716
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2720
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2724
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 448:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2728
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2733
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2737
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2743
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2747
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2757
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2761
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2765
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2770
		{
			yyVAL.strs = []string{}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2774
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2780
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2784
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2790
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2794
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2798
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2802
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2806
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2810
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2816
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 469:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2820
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2826
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2831
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2835
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2841
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2845
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2858
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2862
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2866
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2870
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2876
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2878
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2882
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2884
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2888
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2890
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2893
		{
			yyVAL.empty = struct{}{}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2895
		{
			yyVAL.empty = struct{}{}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2906
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2913
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2919
		{
			yyVAL.str = JoinStr
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2923
		{
			yyVAL.str = JoinStr
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2927
		{
			yyVAL.str = JoinStr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2933
		{
			yyVAL.str = StraightJoinStr
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2939
		{
			yyVAL.str = LeftJoinStr
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2943
		{
			yyVAL.str = LeftJoinStr
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2947
		{
			yyVAL.str = RightJoinStr
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2951
		{
			yyVAL.str = RightJoinStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.str = NaturalJoinStr
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2961
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2971
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2975
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2981
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.indexHints = nil
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2994
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2998
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 509:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3002
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3007
		{
			yyVAL.expr = nil
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3011
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3016
		{
			yyVAL.columns = nil
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3020
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3026
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3030
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3034
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3038
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3042
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3046
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3050
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3056
		{
			yyVAL.str = ""
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3060
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3066
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3070
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3076
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3080
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3084
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3088
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3092
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3096
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3100
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 532:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3104
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 533:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3108
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3112
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3118
		{
			yyVAL.str = IsNullStr
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3122
		{
			yyVAL.str = IsNotNullStr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3126
		{
			yyVAL.str = IsTrueStr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3130
		{
			yyVAL.str = IsNotTrueStr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3134
		{
			yyVAL.str = IsFalseStr
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3138
		{
			yyVAL.str = IsNotFalseStr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3144
		{
			yyVAL.str = EqualStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3148
		{
			yyVAL.str = LessThanStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3152
		{
			yyVAL.str = GreaterThanStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3156
		{
			yyVAL.str = LessEqualStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3160
		{
			yyVAL.str = GreaterEqualStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3164
		{
			yyVAL.str = NotEqualStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3168
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3172
		{
			yyVAL.str = PosixRegexStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3176
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3180
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3184
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3189
		{
			yyVAL.expr = nil
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3199
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3203
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3207
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3219
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3223
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3229
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3233
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3237
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3241
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3245
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3249
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3253
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3257
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3261
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3265
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3269
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3273
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3277
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3281
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3285
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3289
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3293
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3297
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3301
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3305
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3309
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 581:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3313
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3317
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3321
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3325
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3333
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3347
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3351
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3355
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3363
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3371
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3379
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3383
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3393
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3397
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 599:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3401
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 600:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3405
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3409
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3413
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3417
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3427
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3431
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3435
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 607:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3439
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 608:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3443
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 609:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3447
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 610:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3451
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 611:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3455
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 612:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3459
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 614:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 615:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 616:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3475
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 617:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3479
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3483
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3487
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3492
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3496
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3500
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3504
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3514
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3518
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3522
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3526
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3531
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3536
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3541
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3550
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3564
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3568
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3572
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3576
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.str = ""
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3586
		{
			yyVAL.str = BooleanModeStr
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3590
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 642:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3594
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3598
		{
			yyVAL.str = QueryExpansionStr
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3604
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3608
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3614
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3618
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3622
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3626
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3630
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3634
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3640
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3644
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3648
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3652
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3656
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3660
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3664
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3668
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3672
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3676
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3680
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3688
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3692
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3696
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3700
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3708
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3712
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3716
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3720
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3724
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3728
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3732
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3736
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3746
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3750
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3754
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3758
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3762
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3766
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3770
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3774
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3779
		{
			yyVAL.expr = nil
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3783
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3788
		{
			yyVAL.str = string("")
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3792
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3798
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3802
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3808
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3813
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3815
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3818
		{
			yyVAL.expr = nil
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3822
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3828
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3832
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 699:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3836
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3842
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3848
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3852
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3857
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3862
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3866
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3870
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3874
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3878
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3882
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3886
		{
			yyVAL.expr = &NullVal{}
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3891
		{
			yyVAL.exprs = nil
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3895
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3900
		{
			yyVAL.expr = nil
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3904
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3910
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3914
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3920
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3925
		{
			yyVAL.orderBy = nil
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3929
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3935
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3939
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3945
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3950
		{
			yyVAL.str = AscScr
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3954
		{
			yyVAL.str = AscScr
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3958
		{
			yyVAL.str = DescScr
		}
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3963
		{
			yyVAL.limit = nil
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3971
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 729:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3975
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3980
		{
			yyVAL.str = ""
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3984
		{
			yyVAL.str = ForUpdateStr
		}
	case 732:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3988
		{
			yyVAL.str = ShareModeStr
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4001
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4005
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4009
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 736:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4014
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4018
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 738:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4022
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4029
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4033
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4037
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 742:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4046
		{
			yyVAL.updateExprs = nil
		}
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4050
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4056
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4060
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4066
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4070
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4076
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4082
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4092
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4096
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4102
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4112
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4118
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4122
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 759:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4131
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4141
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4147
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4154
		{
			yyVAL.bytes = []byte("charset")
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4161
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4165
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4169
		{
			yyVAL.expr = &Default{}
		}
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4174
		{
			yyVAL.empty = struct{}{}
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4176
		{
			yyVAL.empty = struct{}{}
		}
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4179
		{
			yyVAL.str = ""
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.str = IgnoreStr
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4192
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4196
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4202
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4207
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4214
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4220
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4224
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4228
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4234
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4238
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4242
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4248
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4252
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4259
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4266
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4270
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4277
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4283
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4287
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4453
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4462
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
