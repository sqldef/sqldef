// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const SCHEMA = 57457
const TABLE = 57458
const INDEX = 57459
const MATERIALIZED = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const PRIMARY = 57465
const COLUMN = 57466
const CONSTRAINT = 57467
const REFERENCES = 57468
const SPATIAL = 57469
const FULLTEXT = 57470
const FOREIGN = 57471
const KEY_BLOCK_SIZE = 57472
const POLICY = 57473
const WHILE = 57474
const UNIQUE = 57475
const KEY = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const TYPE = 57492
const STATUS = 57493
const VARIABLES = 57494
const RESTRICT = 57495
const CASCADE = 57496
const NO = 57497
const ACTION = 57498
const PERMISSIVE = 57499
const RESTRICTIVE = 57500
const PUBLIC = 57501
const CURRENT_USER = 57502
const SESSION_USER = 57503
const PAD_INDEX = 57504
const FILLFACTOR = 57505
const IGNORE_DUP_KEY = 57506
const STATISTICS_NORECOMPUTE = 57507
const STATISTICS_INCREMENTAL = 57508
const ALLOW_ROW_LOCKS = 57509
const ALLOW_PAGE_LOCKS = 57510
const DISTANCE = 57511
const M = 57512
const EUCLIDEAN = 57513
const COSINE = 57514
const BEFORE = 57515
const AFTER = 57516
const EACH = 57517
const ROW = 57518
const SCROLL = 57519
const CURSOR = 57520
const OPEN = 57521
const CLOSE = 57522
const FETCH = 57523
const PRIOR = 57524
const FIRST = 57525
const LAST = 57526
const DEALLOCATE = 57527
const INSTEAD = 57528
const OF = 57529
const DEFERRABLE = 57530
const INITIALLY = 57531
const IMMEDIATE = 57532
const DEFERRED = 57533
const CONCURRENTLY = 57534
const SQL = 57535
const SECURITY = 57536
const BEGIN = 57537
const START = 57538
const TRANSACTION = 57539
const COMMIT = 57540
const ROLLBACK = 57541
const BIT = 57542
const TINYINT = 57543
const SMALLINT = 57544
const SMALLSERIAL = 57545
const MEDIUMINT = 57546
const INT = 57547
const INTEGER = 57548
const SERIAL = 57549
const BIGINT = 57550
const BIGSERIAL = 57551
const INTNUM = 57552
const REAL = 57553
const DOUBLE = 57554
const PRECISION = 57555
const FLOAT_TYPE = 57556
const DECIMAL = 57557
const NUMERIC = 57558
const SMALLMONEY = 57559
const MONEY = 57560
const TIME = 57561
const TIMESTAMP = 57562
const DATETIME = 57563
const YEAR = 57564
const DATETIMEOFFSET = 57565
const DATETIME2 = 57566
const SMALLDATETIME = 57567
const CHAR = 57568
const VARCHAR = 57569
const VARYING = 57570
const BOOL = 57571
const CHARACTER = 57572
const VARBINARY = 57573
const NCHAR = 57574
const NVARCHAR = 57575
const NTEXT = 57576
const UUID = 57577
const TEXT = 57578
const TINYTEXT = 57579
const MEDIUMTEXT = 57580
const LONGTEXT = 57581
const CITEXT = 57582
const BLOB = 57583
const TINYBLOB = 57584
const MEDIUMBLOB = 57585
const LONGBLOB = 57586
const JSON = 57587
const JSONB = 57588
const ENUM = 57589
const GEOMETRY = 57590
const POINT = 57591
const LINESTRING = 57592
const POLYGON = 57593
const GEOMETRYCOLLECTION = 57594
const MULTIPOINT = 57595
const MULTILINESTRING = 57596
const MULTIPOLYGON = 57597
const VECTOR = 57598
const VARIADIC = 57599
const ARRAY = 57600
const NOW = 57601
const GETDATE = 57602
const BPCHAR = 57603
const TEXT_PATTERN_OPS = 57604
const NULLX = 57605
const AUTO_INCREMENT = 57606
const APPROXNUM = 57607
const SIGNED = 57608
const UNSIGNED = 57609
const ZEROFILL = 57610
const ZONE = 57611
const AUTOINCREMENT = 57612
const DATABASES = 57613
const TABLES = 57614
const VSCHEMA_TABLES = 57615
const EXTENDED = 57616
const FULL = 57617
const PROCESSLIST = 57618
const NAMES = 57619
const CHARSET = 57620
const GLOBAL = 57621
const SESSION = 57622
const ISOLATION = 57623
const LEVEL = 57624
const READ = 57625
const WRITE = 57626
const ONLY = 57627
const REPEATABLE = 57628
const COMMITTED = 57629
const UNCOMMITTED = 57630
const SERIALIZABLE = 57631
const NEW = 57632
const CONCAT_NULL_YIELDS_NULL = 57633
const CURSOR_CLOSE_ON_COMMIT = 57634
const QUOTED_IDENTIFIER = 57635
const ARITHABORT = 57636
const FMTONLY = 57637
const NOCOUNT = 57638
const NOEXEC = 57639
const NUMERIC_ROUNDABORT = 57640
const ANSI_DEFAULTS = 57641
const ANSI_NULL_DFLT_OFF = 57642
const ANSI_NULL_DFLT_ON = 57643
const ANSI_NULLS = 57644
const ANSI_PADDING = 57645
const ANSI_WARNINGS = 57646
const FORCEPLAN = 57647
const SHOWPLAN_ALL = 57648
const SHOWPLAN_TEXT = 57649
const SHOWPLAN_XML = 57650
const IMPLICIT_TRANSACTIONS = 57651
const REMOTE_PROC_TRANSACTIONS = 57652
const XACT_ABORT = 57653
const CURRENT_TIMESTAMP = 57654
const DATABASE = 57655
const CURRENT_DATE = 57656
const CURRENT_TIME = 57657
const LOCALTIME = 57658
const LOCALTIMESTAMP = 57659
const UTC_DATE = 57660
const UTC_TIME = 57661
const UTC_TIMESTAMP = 57662
const REPLACE = 57663
const CONVERT = 57664
const CAST = 57665
const SUBSTR = 57666
const SUBSTRING = 57667
const GROUP_CONCAT = 57668
const SEPARATOR = 57669
const INHERIT = 57670
const LEAD = 57671
const LAG = 57672
const MATCH = 57673
const AGAINST = 57674
const BOOLEAN = 57675
const LANGUAGE = 57676
const WITH = 57677
const WITHOUT = 57678
const PARSER = 57679
const QUERY = 57680
const EXPANSION = 57681
const UNUSED = 57682
const VIRTUAL = 57683
const STORED = 57684
const GENERATED = 57685
const ALWAYS = 57686
const IDENTITY = 57687
const SEQUENCE = 57688
const INCREMENT = 57689
const MINVALUE = 57690
const CACHE = 57691
const CYCLE = 57692
const OWNED = 57693
const NONE = 57694
const CLUSTERED = 57695
const NONCLUSTERED = 57696
const REPLICATION = 57697
const COLUMNSTORE = 57698
const INCLUDE = 57699
const HOLDLOCK = 57700
const NOLOCK = 57701
const NOWAIT = 57702
const PAGLOCK = 57703
const ROWLOCK = 57704
const TABLOCK = 57705
const UPDLOCK = 57706
const READUNCOMMITTED = 57707
const DEFINER = 57708
const INVOKER = 57709
const TYPECAST = 57710
const CHECK = 57711
const OVER = 57712

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	134, 421,
	-2, 157,
	-1, 45,
	123, 823,
	-2, 818,
	-1, 260,
	123, 826,
	-2, 822,
	-1, 417,
	61, 391,
	-2, 388,
	-1, 447,
	123, 824,
	-2, 250,
	-1, 568,
	123, 824,
	-2, 250,
	-1, 589,
	275, 833,
	-2, 729,
	-1, 643,
	275, 833,
	-2, 461,
	-1, 677,
	5, 36,
	-2, 14,
	-1, 683,
	5, 36,
	-2, 16,
	-1, 824,
	275, 833,
	-2, 461,
	-1, 997,
	275, 833,
	-2, 320,
	-1, 1073,
	275, 833,
	-2, 461,
	-1, 1137,
	60, 106,
	-2, 206,
	-1, 1140,
	60, 106,
	-2, 206,
	-1, 1194,
	5, 37,
	-2, 595,
	-1, 1273,
	5, 36,
	-2, 15,
	-1, 1290,
	195, 63,
	-2, 517,
	-1, 1329,
	60, 106,
	-2, 177,
	-1, 1473,
	90, 820,
	-2, 808,
	-1, 1566,
	57, 50,
	59, 50,
	-2, 52,
	-1, 1739,
	5, 36,
	-2, 779,
	-1, 1764,
	5, 36,
	-2, 59,
	-1, 1836,
	5, 37,
	-2, 780,
	-1, 1868,
	5, 36,
	-2, 782,
	-1, 1890,
	5, 37,
	-2, 783,
}

const yyPrivate = 57344

const yyLast = 9340

var yyAct = [...]int16{
	570, 551, 1667, 1845, 1795, 1685, 580, 1757, 1796, 1792,
	690, 771, 31, 1588, 1086, 1762, 1727, 1668, 41, 42,
	43, 1602, 770, 1749, 1108, 1120, 1586, 1647, 1601, 1106,
	1434, 1048, 68, 68, 68, 1442, 131, 134, 135, 1467,
	1590, 1576, 876, 1109, 1105, 541, 1660, 1102, 903, 1121,
	1470, 1294, 1453, 1464, 62, 481, 1461, 1291, 1449, 1452,
	1267, 31, 1262, 933, 1196, 891, 27, 409, 1345, 996,
	1118, 918, 973, 632, 1081, 1354, 213, 713, 1187, 61,
	880, 1148, 848, 852, 406, 1030, 670, 1245, 197, 1066,
	1033, 232, 256, 549, 63, 671, 69, 527, 946, 64,
	814, 550, 247, 52, 418, 444, 140, 412, 161, 446,
	453, 248, 129, 130, 806, 180, 1375, 1045, 156, 743,
	744, 745, 746, 747, 740, 199, 562, 751, 470, 990,
	9, 534, 1246, 740, 238, 195, 751, 1553, 751, 633,
	1082, 535, 136, 34, 138, 626, 243, 244, 257, 68,
	54, 614, 419, 420, 1533, 150, 257, 719, 617, 215,
	216, 217, 218, 1144, 55, 56, 442, 1892, 413, 50,
	1888, 47, 1398, 1399, 833, 900, 1053, 1054, 1825, 416,
	1780, 1153, 432, 748, 749, 741, 742, 743, 744, 745,
	746, 747, 740, 493, 494, 751, 464, 158, 255, 1758,
	1880, 1256, 1824, 395, 1431, 1190, 404, 1388, 1176, 680,
	1152, 1133, 1124, 1123, 1519, 1779, 1328, 57, 234, 1768,
	1817, 627, 1767, 1125, 461, 1769, 1818, 1819, 1696, 1697,
	1458, 50, 260, 47, 397, 1695, 1126, 501, 1603, 198,
	1604, 1502, 396, 865, 864, 472, 201, 872, 785, 214,
	48, 1042, 417, 227, 206, 515, 1382, 436, 741, 742,
	743, 744, 745, 746, 747, 740, 628, 1373, 751, 177,
	662, 485, 486, 487, 488, 661, 458, 230, 460, 459,
	1705, 474, 1209, 151, 476, 1207, 479, 480, 137, 153,
	45, 1556, 47, 492, 203, 1277, 1708, 455, 1846, 1847,
	1848, 1849, 1850, 1851, 1852, 1853, 734, 489, 38, 737,
	1773, 1772, 1709, 513, 252, 752, 753, 754, 755, 756,
	757, 758, 457, 735, 736, 733, 759, 760, 761, 762,
	739, 738, 748, 749, 741, 742, 743, 744, 745, 746,
	747, 740, 1119, 1596, 751, 934, 1706, 1276, 924, 1619,
	1616, 1101, 1131, 1661, 1463, 1355, 1356, 1400, 698, 1532,
	514, 1534, 34, 237, 686, 687, 34, 241, 132, 245,
	246, 419, 420, 34, 141, 699, 253, 536, 231, 519,
	529, 398, 39, 175, 174, 401, 1865, 521, 898, 1591,
	426, 176, 1339, 750, 721, 720, 435, 434, 429, 1127,
	1128, 1130, 750, 257, 750, 1129, 414, 427, 177, 528,
	533, 1147, 701, 1881, 877, 1281, 175, 554, 1625, 1393,
	1788, 1320, 438, 1686, 1688, 50, 1360, 1593, 1657, 53,
	616, 738, 748, 749, 741, 742, 743, 744, 745, 746,
	747, 740, 214, 884, 751, 548, 464, 1374, 716, 45,
	507, 47, 692, 524, 28, 33, 529, 1404, 40, 730,
	680, 750, 1133, 1124, 1123, 1761, 500, 750, 711, 1406,
	504, 505, 154, 1618, 1125, 1145, 1146, 1639, 834, 1760,
	34, 1759, 32, 498, 37, 36, 1722, 1126, 419, 420,
	619, 739, 738, 748, 749, 741, 742, 743, 744, 745,
	746, 747, 740, 673, 526, 751, 1153, 1687, 1525, 520,
	1401, 441, 1778, 157, 691, 711, 495, 257, 696, 537,
	700, 133, 525, 1462, 257, 1589, 636, 44, 491, 677,
	648, 683, 650, 613, 750, 653, 654, 615, 35, 58,
	528, 1134, 1439, 51, 620, 142, 143, 455, 618, 1355,
	1356, 629, 649, 176, 415, 631, 423, 424, 144, 168,
	1537, 167, 522, 171, 172, 175, 400, 695, 425, 169,
	177, 1885, 457, 1839, 704, 466, 465, 678, 1725, 678,
	1321, 1322, 1323, 6, 7, 714, 715, 717, 774, 775,
	1606, 1279, 1410, 1119, 769, 1070, 839, 448, 449, 451,
	789, 788, 646, 1131, 516, 454, 452, 462, 463, 718,
	750, 682, 149, 147, 483, 482, 421, 693, 1421, 678,
	656, 727, 694, 691, 689, 627, 729, 1770, 1747, 672,
	953, 702, 1605, 831, 68, 725, 1527, 1167, 729, 1166,
	722, 176, 786, 450, 951, 952, 950, 257, 1165, 1390,
	1127, 1128, 1130, 1507, 730, 851, 1129, 1034, 177, 1164,
	1226, 1402, 1403, 1405, 1407, 1408, 1281, 1163, 673, 869,
	628, 728, 727, 728, 727, 726, 691, 528, 857, 657,
	680, 1162, 1133, 1124, 1123, 627, 874, 829, 843, 729,
	1161, 729, 173, 1160, 1125, 1067, 1159, 859, 897, 1158,
	819, 33, 899, 820, 882, 860, 1156, 1126, 1560, 528,
	750, 1561, 808, 809, 810, 811, 812, 813, 1103, 827,
	1034, 616, 926, 922, 1142, 528, 34, 411, 1140, 26,
	628, 34, 455, 1069, 674, 861, 838, 863, 1723, 152,
	947, 207, 688, 146, 923, 730, 1423, 411, 411, 728,
	727, 1272, 678, 410, 868, 1139, 1346, 634, 635, 1477,
	1531, 850, 856, 858, 728, 727, 1357, 729, 978, 977,
	1346, 750, 875, 431, 1138, 987, 987, 1347, 411, 919,
	920, 921, 729, 21, 989, 16, 925, 1422, 422, 257,
	257, 1347, 1134, 34, 672, 984, 1348, 894, 17, 949,
	24, 978, 1035, 728, 727, 170, 917, 728, 727, 456,
	461, 1441, 1201, 1119, 1200, 1344, 18, 19, 769, 210,
	931, 729, 212, 1131, 473, 729, 928, 430, 927, 1049,
	867, 728, 727, 1217, 728, 727, 846, 678, 866, 991,
	992, 473, 1438, 678, 680, 969, 836, 972, 678, 729,
	820, 971, 729, 499, 1068, 938, 940, 941, 1068, 728,
	727, 1239, 458, 939, 460, 459, 1635, 1392, 985, 988,
	1127, 1128, 1130, 260, 673, 497, 1129, 729, 1027, 1028,
	728, 727, 621, 1516, 832, 1049, 1281, 728, 727, 1177,
	1178, 1179, 496, 1104, 1564, 1591, 422, 1137, 729, 50,
	870, 47, 637, 728, 727, 729, 1610, 1044, 993, 994,
	643, 644, 645, 883, 1029, 845, 1100, 1074, 478, 1075,
	473, 729, 477, 14, 730, 469, 50, 45, 47, 47,
	528, 50, 1059, 1593, 422, 1448, 34, 50, 1609, 47,
	50, 1043, 47, 1046, 1047, 50, 974, 1593, 975, 1090,
	1150, 34, 681, 1069, 681, 1197, 422, 947, 680, 33,
	1083, 787, 787, 765, 1157, 862, 490, 1061, 437, 739,
	738, 748, 749, 741, 742, 743, 744, 745, 746, 747,
	740, 1057, 723, 751, 34, 50, 32, 47, 892, 730,
	764, 766, 767, 768, 772, 1875, 1874, 1141, 892, 1873,
	672, 777, 777, 777, 777, 777, 777, 777, 20, 30,
	422, 877, 1134, 34, 1235, 1860, 643, 1816, 730, 730,
	22, 23, 1154, 25, 976, 1172, 655, 790, 791, 792,
	793, 794, 795, 796, 797, 612, 800, 611, 802, 803,
	804, 805, 807, 807, 807, 807, 807, 807, 807, 1183,
	823, 824, 825, 826, 610, 1785, 730, 1257, 159, 609,
	786, 538, 1831, 1838, 730, 1235, 1781, 1413, 1068, 708,
	1712, 257, 34, 571, 986, 569, 573, 574, 575, 576,
	673, 528, 428, 572, 577, 1578, 1581, 1582, 1583, 1579,
	1327, 1580, 1584, 1206, 1572, 1750, 1751, 1573, 730, 1648,
	540, 708, 1621, 1210, 1573, 578, 708, 1620, 1175, 892,
	1544, 708, 1498, 1136, 1270, 1237, 1235, 1497, 623, 643,
	1573, 991, 1273, 1225, 46, 49, 1290, 681, 1316, 1317,
	1318, 877, 1269, 1494, 1493, 1280, 708, 1488, 1329, 1137,
	1137, 1329, 1137, 1137, 528, 528, 1244, 1746, 1223, 1259,
	1340, 948, 1282, 1253, 1343, 260, 1252, 1247, 49, 1250,
	1251, 1283, 678, 1249, 49, 1285, 1254, 1570, 708, 1487,
	678, 1049, 528, 708, 1414, 1062, 1255, 1324, 777, 777,
	1271, 777, 777, 777, 777, 777, 777, 777, 777, 777,
	777, 777, 777, 777, 777, 777, 708, 1365, 1062, 730,
	1648, 1342, 1363, 1286, 1287, 1288, 672, 1292, 1235, 1234,
	708, 1174, 681, 1571, 1242, 1569, 708, 1085, 772, 1793,
	129, 731, 1746, 772, 892, 1084, 1664, 773, 1569, 1349,
	1350, 1351, 1352, 1353, 982, 730, 1394, 1366, 49, 1335,
	1336, 1241, 49, 1359, 49, 49, 1361, 1362, 1062, 750,
	680, 49, 1275, 261, 1235, 261, 49, 1368, 1221, 691,
	49, 1261, 1078, 1369, 892, 1052, 1389, 1364, 799, 1417,
	1377, 1376, 708, 932, 1379, 1050, 1077, 1737, 708, 707,
	1135, 1381, 1738, 512, 1426, 1219, 1260, 1383, 666, 665,
	659, 660, 1076, 257, 659, 658, 1058, 49, 1440, 680,
	830, 467, 422, 893, 1746, 1073, 1220, 1435, 871, 1436,
	1445, 1444, 1280, 844, 847, 1451, 60, 59, 840, 837,
	1478, 1433, 853, 663, 1091, 730, 1437, 652, 1512, 1443,
	1329, 1867, 651, 1218, 1418, 647, 1834, 512, 528, 528,
	1425, 49, 680, 982, 511, 49, 49, 512, 1573, 1235,
	1367, 422, 422, 1447, 1483, 1330, 1331, 1332, 1333, 1334,
	1694, 1598, 1476, 1459, 1424, 1062, 1326, 1202, 948, 730,
	739, 738, 748, 749, 741, 742, 743, 744, 745, 746,
	747, 740, 892, 708, 751, 835, 668, 667, 1811, 777,
	777, 777, 1485, 664, 422, 1809, 777, 777, 777, 777,
	1776, 1636, 930, 1750, 1751, 517, 935, 936, 203, 1491,
	1338, 257, 543, 1337, 739, 738, 748, 749, 741, 742,
	743, 744, 745, 746, 747, 740, 1258, 233, 751, 1495,
	1496, 1171, 1415, 1489, 1490, 1170, 1419, 1073, 1143, 1080,
	1503, 1079, 1056, 777, 979, 980, 981, 983, 929, 1500,
	896, 773, 1538, 873, 828, 1412, 773, 724, 676, 1522,
	1595, 695, 68, 1280, 1555, 675, 257, 1280, 1436, 642,
	641, 995, 1026, 1608, 1523, 1524, 1435, 1562, 1037, 1038,
	1039, 1040, 639, 1041, 622, 1550, 1559, 539, 502, 1551,
	228, 443, 528, 1623, 439, 408, 226, 1543, 235, 236,
	1861, 1546, 220, 1558, 219, 208, 1051, 1567, 11, 1793,
	1149, 1753, 1055, 1585, 1435, 1614, 1597, 1594, 1450, 1599,
	1238, 669, 503, 240, 1060, 239, 1063, 1064, 678, 1612,
	145, 139, 1071, 1615, 1072, 1679, 1756, 681, 1429, 1677,
	1680, 1499, 1755, 1624, 1678, 681, 1552, 1526, 1528, 1529,
	1530, 467, 1676, 1578, 1581, 1582, 1583, 1579, 1098, 1580,
	1584, 1681, 1675, 1582, 1583, 1095, 1096, 1823, 1646, 1547,
	801, 407, 1611, 978, 1669, 484, 1263, 625, 1832, 1613,
	399, 1627, 919, 920, 1651, 1445, 1653, 1622, 1540, 1280,
	1542, 1264, 1555, 254, 1463, 1665, 1654, 1099, 1092, 257,
	624, 1093, 1691, 510, 508, 506, 1173, 257, 467, 49,
	984, 1656, 148, 1663, 1049, 1541, 1031, 49, 1486, 1036,
	1545, 890, 1643, 685, 1521, 532, 1682, 1671, 1672, 1693,
	1674, 1087, 1690, 1670, 777, 777, 1673, 1049, 1692, 886,
	1830, 887, 888, 889, 1555, 1703, 1641, 1535, 1088, 877,
	750, 1829, 1191, 1192, 885, 1787, 1257, 1701, 678, 1482,
	1194, 1193, 1481, 1702, 777, 777, 777, 777, 1724, 1198,
	1199, 1637, 1480, 1638, 1626, 1731, 1479, 1169, 1565, 1566,
	1397, 1396, 1436, 1739, 249, 250, 251, 1882, 1651, 1420,
	1763, 1743, 1409, 1168, 750, 1745, 433, 1754, 531, 530,
	879, 1734, 881, 1735, 1568, 1222, 1456, 697, 1715, 895,
	8, 1228, 1, 1227, 1764, 1293, 1765, 1644, 13, 1230,
	1231, 1645, 1232, 1233, 12, 1726, 257, 1729, 242, 1236,
	1195, 678, 784, 566, 1457, 1435, 1771, 1243, 978, 1669,
	1794, 1801, 1763, 1707, 1617, 1797, 552, 978, 1669, 855,
	855, 855, 1844, 1460, 1289, 1319, 1358, 1802, 468, 1445,
	1445, 1444, 678, 1799, 1806, 182, 1265, 1268, 1240, 1784,
	1790, 1791, 440, 467, 15, 49, 1782, 1049, 1789, 1443,
	1430, 1274, 1278, 684, 509, 1803, 1492, 1341, 49, 901,
	710, 165, 1774, 1775, 155, 1662, 1710, 1711, 1284, 703,
	1666, 1555, 1827, 402, 1833, 29, 10, 1155, 1822, 166,
	691, 678, 164, 691, 691, 691, 777, 1858, 1841, 1280,
	1843, 163, 162, 1854, 1855, 1856, 160, 471, 200, 1857,
	205, 229, 67, 65, 1517, 66, 70, 1465, 1607, 1870,
	1871, 1797, 1863, 1866, 518, 1065, 763, 1766, 1842, 1730,
	1472, 1651, 1800, 1266, 1828, 1786, 1714, 1872, 1224, 798,
	1868, 1436, 1032, 1879, 553, 1742, 937, 1744, 565, 564,
	563, 1736, 1883, 46, 1797, 1456, 732, 1455, 1563, 1886,
	1577, 1380, 1575, 978, 1669, 1889, 1891, 1887, 1574, 1752,
	1748, 1454, 1884, 1518, 261, 1721, 855, 855, 1094, 1428,
	855, 855, 855, 1587, 1122, 1391, 46, 878, 678, 1097,
	5, 192, 1395, 1132, 1117, 4, 3, 195, 196, 1116,
	1115, 680, 1113, 1133, 1124, 1123, 1114, 1111, 1411, 855,
	855, 855, 855, 1112, 1110, 1125, 1416, 1089, 679, 2,
	678, 0, 183, 0, 0, 1804, 1427, 1805, 1126, 0,
	0, 0, 0, 777, 1432, 855, 777, 190, 777, 178,
	777, 0, 777, 777, 0, 0, 0, 179, 776, 778,
	779, 780, 781, 782, 783, 0, 0, 202, 0, 467,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 1456, 1456, 1456, 1456, 1456, 0, 680, 0, 1133,
	1124, 1123, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 1125, 0, 0, 1457, 0, 0, 0, 0, 1457,
	1457, 1457, 1457, 1457, 1126, 0, 186, 0, 181, 191,
	0, 0, 0, 1587, 0, 1689, 188, 187, 680, 0,
	1133, 1124, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 1125, 1504, 209, 1505, 1506, 211, 0, 1508,
	1509, 1511, 1513, 1515, 1131, 1126, 1456, 0, 0, 0,
	0, 1520, 0, 0, 221, 222, 223, 224, 225, 1704,
	0, 0, 1456, 0, 0, 1536, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 1548, 1549, 1268, 0, 0, 1740, 1741, 0, 0,
	1457, 1127, 1128, 1130, 0, 0, 0, 1129, 0, 0,
	1659, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	1119, 0, 0, 0, 0, 0, 855, 681, 0, 0,
	1131, 0, 1229, 0, 0, 942, 0, 0, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 0, 0, 0, 0, 184, 855, 0,
	0, 1119, 0, 185, 0, 0, 261, 0, 0, 855,
	0, 1131, 0, 475, 1798, 467, 681, 1127, 1128, 1130,
	0, 0, 0, 1129, 1634, 680, 0, 1133, 1124, 1123,
	0, 0, 0, 0, 0, 1812, 1813, 1814, 0, 1125,
	0, 0, 0, 0, 1642, 0, 0, 680, 0, 1133,
	1124, 1123, 1126, 0, 0, 0, 0, 0, 1127, 1128,
	1130, 1125, 1649, 0, 1129, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 1126, 0, 193, 0, 194, 0,
	0, 0, 0, 1134, 0, 680, 0, 1133, 1124, 1123,
	0, 0, 1684, 680, 0, 1133, 1124, 1123, 0, 1125,
	0, 0, 189, 0, 0, 0, 0, 1125, 0, 0,
	1798, 0, 1126, 1869, 1700, 0, 0, 0, 0, 0,
	1126, 0, 0, 0, 0, 0, 0, 0, 680, 1713,
	1133, 1124, 1123, 0, 1716, 1717, 1718, 1719, 1720, 0,
	0, 0, 1125, 1798, 0, 681, 0, 0, 0, 0,
	1728, 0, 0, 0, 0, 1126, 0, 0, 1119, 1134,
	0, 0, 0, 0, 0, 0, 0, 0, 1131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1119, 0, 0, 0, 0, 0, 1180, 1181, 1182, 0,
	1131, 0, 0, 0, 1184, 1185, 1186, 0, 0, 0,
	1134, 0, 0, 0, 0, 0, 0, 0, 0, 1658,
	1732, 1733, 0, 0, 0, 1127, 1128, 1130, 1119, 0,
	0, 1129, 0, 49, 49, 0, 1119, 1777, 1131, 0,
	0, 1281, 1783, 0, 0, 0, 1131, 1127, 1128, 1130,
	776, 0, 0, 1129, 0, 0, 0, 0, 0, 0,
	1658, 0, 0, 1281, 0, 0, 1807, 0, 0, 1808,
	0, 1119, 1810, 0, 0, 0, 638, 640, 1815, 0,
	0, 1131, 0, 0, 0, 1127, 1128, 1130, 0, 1820,
	0, 1129, 0, 1127, 1128, 1130, 0, 0, 0, 1129,
	1826, 0, 0, 0, 1728, 1514, 730, 0, 0, 0,
	0, 0, 0, 0, 1835, 1836, 1837, 773, 1840, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1127, 1128,
	1130, 0, 0, 0, 1129, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 709, 712, 1862, 773,
	0, 739, 738, 748, 749, 741, 742, 743, 744, 745,
	746, 747, 740, 0, 0, 751, 0, 1134, 0, 0,
	1876, 1877, 1878, 0, 855, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 0, 0, 0, 0, 1134,
	0, 0, 0, 49, 49, 0, 0, 1510, 730, 0,
	1890, 0, 0, 49, 1592, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1652, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1134, 0, 0,
	0, 0, 0, 0, 0, 1134, 0, 0, 0, 1279,
	0, 1371, 1372, 739, 738, 748, 749, 741, 742, 743,
	744, 745, 746, 747, 740, 0, 0, 751, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1370, 0, 0,
	1134, 1384, 1385, 1386, 1387, 0, 0, 1821, 0, 0,
	0, 1640, 0, 0, 0, 1554, 0, 0, 0, 0,
	0, 709, 739, 738, 748, 749, 741, 742, 743, 744,
	745, 746, 747, 740, 0, 0, 751, 0, 0, 0,
	49, 0, 0, 0, 49, 49, 0, 0, 46, 49,
	49, 49, 49, 49, 0, 0, 0, 0, 0, 0,
	0, 1683, 0, 49, 0, 0, 0, 1592, 0, 739,
	738, 748, 749, 741, 742, 743, 744, 745, 746, 747,
	740, 0, 1189, 751, 0, 0, 0, 0, 739, 738,
	748, 749, 741, 742, 743, 744, 745, 746, 747, 740,
	0, 49, 751, 0, 0, 0, 0, 739, 738, 748,
	749, 741, 742, 743, 744, 745, 746, 747, 740, 0,
	1188, 751, 380, 367, 49, 325, 382, 295, 313, 391,
	315, 316, 352, 273, 335, 0, 310, 292, 0, 0,
	49, 298, 266, 305, 267, 296, 327, 0, 293, 0,
	369, 338, 0, 1501, 0, 389, 0, 343, 0, 0,
	0, 750, 0, 330, 371, 333, 362, 324, 353, 282,
	342, 384, 311, 348, 385, 0, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 378, 307, 279, 394, 0, 351, 265, 345, 0,
	0, 271, 274, 390, 376, 303, 302, 0, 0, 0,
	0, 0, 0, 46, 329, 334, 359, 321, 0, 0,
	0, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 341, 0, 0, 0, 278, 272, 0, 326,
	0, 0, 0, 281, 0, 300, 360, 0, 262, 365,
	373, 323, 0, 750, 377, 320, 319, 0, 0, 0,
	0, 0, 0, 312, 259, 356, 392, 381, 331, 370,
	297, 306, 0, 304, 0, 0, 0, 340, 354, 0,
	0, 0, 0, 0, 379, 372, 0, 0, 0, 0,
	1628, 1592, 0, 1629, 0, 1630, 0, 1631, 0, 1632,
	1633, 0, 750, 0, 0, 0, 0, 270, 263, 301,
	363, 366, 286, 350, 275, 308, 357, 309, 332, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1203, 1204, 0, 1205, 750,
	0, 0, 0, 1208, 0, 0, 0, 0, 46, 0,
	0, 0, 0, 0, 1474, 1211, 1212, 0, 750, 1213,
	1214, 0, 1215, 1216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 750, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 374, 0, 0, 0,
	0, 1475, 1473, 1469, 1468, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 1471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1325, 0,
	1325, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	336, 337, 386, 387, 388, 361, 280, 0, 287, 288,
	0, 368, 0, 0, 0, 339, 0, 0, 0, 393,
	0, 0, 0, 0, 0, 0, 904, 314, 264, 318,
	916, 0, 0, 0, 0, 0, 0, 276, 277, 0,
	906, 322, 317, 344, 346, 355, 364, 375, 383, 358,
	294, 328, 380, 367, 0, 325, 382, 295, 313, 391,
	315, 316, 352, 273, 335, 0, 310, 292, 0, 0,
	0, 298, 266, 305, 267, 296, 327, 0, 293, 0,
	369, 338, 0, 0, 0, 389, 0, 343, 0, 0,
	0, 0, 0, 330, 371, 333, 362, 324, 353, 282,
	342, 384, 311, 348, 385, 0, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 905, 0, 0, 0,
	347, 378, 307, 279, 394, 0, 351, 265, 345, 0,
	0, 271, 274, 390, 376, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 329, 334, 359, 321, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 0, 0, 0,
	299, 0, 341, 0, 0, 0, 278, 272, 0, 326,
	0, 0, 0, 281, 0, 300, 360, 0, 262, 365,
	373, 323, 815, 0, 377, 320, 319, 0, 0, 0,
	0, 0, 0, 312, 259, 356, 392, 381, 331, 370,
	297, 306, 0, 304, 0, 0, 0, 340, 354, 0,
	0, 0, 0, 0, 379, 372, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 263, 301,
	363, 366, 286, 350, 275, 308, 357, 309, 332, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1600, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1203, 0, 0, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	818, 0, 0, 0, 0, 0, 0, 0, 71, 816,
	0, 0, 0, 0, 822, 821, 0, 0, 0, 0,
	0, 902, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 374, 0, 0, 0,
	0, 1475, 1473, 0, 0, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 1471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	336, 337, 386, 387, 388, 361, 280, 0, 287, 288,
	0, 368, 0, 0, 0, 339, 0, 0, 0, 393,
	0, 0, 0, 0, 0, 0, 904, 314, 264, 318,
	916, 0, 72, 0, 0, 0, 0, 276, 277, 0,
	906, 322, 317, 344, 346, 355, 364, 375, 383, 358,
	294, 328, 380, 367, 0, 325, 382, 295, 313, 391,
	315, 316, 352, 273, 335, 0, 310, 292, 0, 0,
	0, 298, 266, 305, 267, 296, 327, 0, 293, 0,
	369, 338, 0, 0, 0, 389, 0, 343, 0, 0,
	0, 0, 0, 330, 371, 333, 362, 324, 353, 282,
	342, 384, 311, 348, 385, 0, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 905, 0, 0, 0,
	347, 378, 307, 279, 394, 0, 351, 265, 345, 0,
	0, 271, 274, 390, 376, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 329, 334, 359, 321, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 815, 0, 0,
	299, 0, 341, 0, 0, 0, 278, 272, 0, 326,
	0, 0, 0, 281, 0, 300, 360, 0, 262, 365,
	373, 323, 0, 0, 377, 320, 319, 0, 0, 0,
	0, 0, 817, 312, 259, 356, 392, 381, 331, 370,
	297, 306, 0, 304, 0, 0, 0, 340, 354, 0,
	0, 0, 0, 0, 379, 372, 1295, 1296, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 270, 263, 301,
	363, 366, 286, 350, 275, 308, 357, 309, 332, 291,
	0, 0, 0, 0, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 0, 122, 123, 0, 124, 125,
	126, 128, 127, 0, 970, 818, 0, 0, 0, 0,
	0, 0, 0, 71, 816, 0, 0, 0, 0, 822,
	821, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1151, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 374, 0, 0, 0,
	0, 1475, 1473, 0, 0, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 1471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	336, 337, 386, 387, 388, 361, 280, 72, 287, 288,
	0, 368, 0, 0, 0, 339, 0, 0, 0, 393,
	0, 0, 0, 0, 0, 0, 0, 314, 264, 318,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 0,
	0, 322, 317, 344, 346, 355, 364, 375, 383, 358,
	294, 328, 380, 367, 0, 325, 382, 295, 313, 391,
	315, 316, 352, 273, 335, 0, 310, 292, 0, 0,
	0, 298, 266, 305, 267, 296, 327, 0, 293, 0,
	369, 338, 0, 94, 0, 389, 33, 343, 0, 0,
	0, 0, 0, 330, 371, 333, 362, 324, 353, 282,
	342, 384, 311, 348, 385, 0, 0, 0, 45, 1142,
	47, 34, 0, 1140, 0, 0, 0, 0, 0, 0,
	347, 378, 307, 279, 394, 0, 351, 265, 345, 0,
	0, 271, 274, 390, 376, 303, 302, 0, 0, 0,
	1139, 0, 0, 0, 329, 334, 359, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1248, 1138,
	299, 0, 341, 0, 0, 0, 278, 272, 0, 326,
	79, 0, 0, 281, 0, 300, 360, 0, 262, 365,
	373, 323, 0, 0, 377, 320, 319, 0, 0, 0,
	0, 0, 0, 312, 259, 356, 392, 381, 331, 370,
	297, 306, 0, 304, 0, 95, 0, 340, 354, 0,
	0, 0, 0, 0, 379, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 263, 301,
	363, 366, 286, 350, 275, 308, 357, 309, 332, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 0, 122, 123,
	0, 124, 125, 126, 128, 127, 96, 97, 98, 102,
	100, 99, 101, 73, 75, 0, 71, 74, 80, 76,
	77, 78, 92, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 93, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 374, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	336, 337, 386, 387, 388, 361, 280, 0, 287, 288,
	0, 368, 0, 0, 0, 339, 0, 0, 0, 393,
	72, 0, 0, 0, 0, 0, 0, 314, 264, 318,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 0,
	0, 322, 317, 344, 346, 355, 364, 375, 383, 358,
	294, 328, 380, 367, 0, 325, 382, 295, 313, 391,
	315, 316, 352, 273, 335, 0, 310, 292, 0, 0,
	0, 298, 266, 305, 267, 296, 327, 0, 293, 0,
	369, 338, 0, 94, 0, 389, 0, 343, 0, 0,
	0, 0, 0, 330, 371, 333, 362, 324, 353, 282,
	342, 384, 311, 348, 385, 0, 0, 0, 34, 0,
	705, 34, 706, 0, 0, 0, 0, 0, 0, 0,
	347, 378, 307, 279, 394, 0, 351, 265, 345, 0,
	0, 271, 274, 390, 376, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 329, 334, 359, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 341, 0, 0, 0, 278, 272, 0, 326,
	79, 0, 0, 281, 0, 300, 360, 0, 262, 365,
	373, 323, 0, 0, 377, 320, 319, 0, 0, 0,
	0, 0, 0, 312, 259, 356, 392, 381, 331, 370,
	297, 306, 0, 304, 0, 95, 0, 340, 354, 0,
	0, 0, 0, 0, 379, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 263, 301,
	363, 366, 286, 350, 275, 308, 357, 309, 332, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 0, 122, 123,
	0, 124, 125, 126, 128, 127, 96, 97, 98, 102,
	100, 99, 101, 73, 75, 0, 71, 74, 80, 76,
	77, 78, 92, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 93, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 374, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	336, 337, 386, 387, 388, 361, 280, 0, 287, 288,
	0, 368, 0, 0, 0, 339, 0, 0, 0, 393,
	72, 0, 0, 0, 0, 0, 0, 314, 264, 318,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 0,
	0, 322, 317, 344, 346, 355, 364, 375, 383, 358,
	294, 328, 380, 367, 0, 325, 382, 295, 313, 391,
	315, 316, 352, 273, 335, 0, 310, 292, 0, 0,
	0, 298, 266, 305, 267, 296, 327, 0, 293, 0,
	369, 338, 0, 0, 0, 389, 0, 343, 0, 0,
	0, 0, 0, 330, 371, 333, 362, 324, 353, 282,
	342, 384, 311, 348, 385, 0, 403, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 405, 0,
	347, 378, 307, 279, 394, 0, 351, 265, 345, 0,
	0, 271, 274, 390, 376, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 329, 334, 359, 321, 0, 0,
	0, 0, 0, 1378, 0, 0, 0, 0, 0, 0,
	299, 0, 341, 0, 0, 0, 278, 272, 0, 326,
	0, 0, 0, 281, 0, 300, 360, 0, 262, 365,
	373, 323, 0, 0, 377, 320, 319, 0, 999, 0,
	0, 0, 0, 312, 259, 356, 392, 381, 331, 370,
	297, 306, 0, 304, 0, 0, 0, 340, 354, 0,
	0, 0, 0, 0, 379, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 263, 301,
	363, 366, 286, 350, 275, 308, 357, 309, 332, 291,
	1008, 1014, 1012, 0, 0, 1009, 0, 0, 1007, 0,
	0, 1016, 0, 0, 1015, 1001, 1011, 1013, 1010, 1005,
	0, 1000, 0, 1018, 1017, 1019, 998, 1021, 0, 0,
	0, 1025, 1022, 1024, 1023, 0, 1020, 0, 0, 0,
	0, 0, 0, 0, 0, 1002, 1003, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1004, 1006, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 374, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	336, 337, 386, 387, 388, 361, 280, 0, 287, 288,
	0, 368, 0, 0, 0, 339, 0, 630, 0, 393,
	45, 0, 447, 448, 449, 451, 0, 314, 264, 318,
	0, 454, 452, 462, 463, 0, 0, 276, 277, 0,
	0, 322, 317, 344, 346, 355, 364, 375, 383, 358,
	294, 328, 380, 367, 0, 325, 382, 295, 313, 391,
	315, 316, 352, 273, 335, 0, 310, 292, 0, 450,
	0, 298, 266, 305, 267, 296, 327, 0, 293, 0,
	369, 338, 0, 0, 0, 389, 0, 343, 0, 0,
	0, 0, 0, 330, 371, 333, 362, 324, 353, 282,
	342, 384, 311, 348, 385, 0, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 378, 307, 279, 394, 0, 351, 265, 345, 0,
	0, 271, 274, 390, 376, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 329, 334, 359, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1539, 0,
	299, 0, 341, 0, 0, 0, 278, 272, 0, 326,
	0, 0, 0, 281, 0, 300, 360, 0, 262, 365,
	373, 323, 0, 0, 377, 320, 319, 0, 0, 0,
	0, 0, 0, 312, 259, 356, 392, 381, 331, 370,
	297, 306, 0, 304, 0, 0, 0, 340, 354, 0,
	0, 0, 0, 0, 379, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 456, 461, 270, 263, 301,
	363, 366, 286, 350, 275, 308, 357, 309, 332, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 458, 0,
	460, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 466, 465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 374, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	336, 337, 386, 387, 388, 361, 280, 0, 287, 288,
	0, 368, 0, 0, 0, 339, 0, 445, 0, 393,
	45, 0, 447, 448, 449, 451, 0, 314, 264, 318,
	0, 454, 452, 462, 463, 0, 0, 276, 277, 0,
	0, 322, 317, 344, 346, 355, 364, 375, 383, 358,
	294, 328, 380, 367, 0, 325, 382, 295, 313, 391,
	315, 316, 352, 273, 335, 0, 310, 292, 0, 450,
	0, 298, 266, 305, 267, 296, 327, 0, 293, 0,
	369, 338, 0, 0, 0, 389, 0, 343, 0, 0,
	0, 0, 0, 330, 371, 333, 362, 324, 353, 282,
	342, 384, 311, 348, 385, 0, 0, 0, 45, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 378, 307, 279, 394, 0, 351, 265, 345, 0,
	0, 271, 274, 390, 376, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 329, 334, 359, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 341, 0, 0, 0, 278, 272, 0, 326,
	0, 0, 0, 281, 0, 300, 360, 0, 262, 365,
	373, 323, 0, 0, 377, 320, 319, 0, 0, 0,
	0, 0, 0, 312, 259, 356, 392, 381, 331, 370,
	297, 306, 0, 304, 0, 0, 0, 340, 354, 0,
	0, 0, 0, 0, 379, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 456, 461, 270, 263, 301,
	363, 366, 286, 350, 275, 308, 357, 309, 332, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 680, 0, 1133, 1124, 1123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1125, 0, 458, 0,
	460, 459, 0, 0, 0, 0, 0, 0, 0, 1126,
	0, 0, 0, 0, 0, 466, 465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 374, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 1864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	336, 337, 386, 387, 388, 361, 280, 0, 287, 288,
	0, 368, 0, 0, 0, 339, 0, 0, 0, 393,
	0, 0, 0, 0, 0, 1119, 0, 314, 264, 318,
	0, 0, 0, 0, 0, 1131, 0, 276, 277, 0,
	0, 322, 317, 344, 346, 355, 364, 375, 383, 358,
	294, 328, 380, 367, 0, 325, 382, 295, 313, 391,
	315, 316, 352, 273, 335, 0, 310, 292, 0, 0,
	0, 298, 266, 305, 267, 296, 327, 0, 293, 0,
	369, 338, 1127, 1128, 1130, 389, 0, 343, 1129, 0,
	0, 0, 0, 330, 371, 333, 362, 324, 353, 282,
	342, 384, 311, 348, 385, 0, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 378, 307, 279, 394, 0, 351, 265, 345, 0,
	0, 271, 274, 390, 376, 303, 302, 523, 0, 0,
	0, 0, 0, 0, 329, 334, 359, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 341, 0, 0, 0, 278, 272, 0, 326,
	0, 0, 0, 281, 0, 300, 360, 0, 262, 365,
	373, 323, 0, 0, 377, 320, 319, 0, 0, 0,
	0, 0, 0, 312, 259, 356, 392, 381, 331, 370,
	297, 306, 0, 304, 0, 0, 0, 340, 354, 0,
	0, 0, 0, 0, 379, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 1134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 263, 301,
	363, 366, 286, 350, 275, 308, 357, 309, 332, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 680, 0, 1133, 1124, 1123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 374, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 1859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	336, 337, 386, 387, 388, 361, 280, 0, 287, 288,
	0, 368, 0, 0, 0, 339, 0, 0, 0, 393,
	0, 0, 0, 0, 0, 1119, 0, 314, 264, 318,
	0, 0, 0, 0, 0, 1131, 0, 276, 277, 0,
	0, 322, 317, 344, 346, 355, 364, 375, 383, 358,
	294, 328, 380, 367, 0, 325, 382, 295, 313, 391,
	315, 316, 352, 273, 335, 0, 310, 292, 0, 0,
	0, 298, 266, 305, 267, 296, 327, 0, 293, 0,
	369, 338, 1127, 1128, 1130, 389, 0, 343, 1129, 0,
	0, 0, 0, 330, 371, 333, 362, 324, 353, 282,
	342, 384, 311, 348, 385, 0, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 378, 307, 279, 394, 0, 351, 265, 345, 0,
	0, 271, 274, 390, 376, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 329, 334, 359, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 341, 0, 0, 0, 278, 272, 0, 326,
	0, 0, 0, 281, 0, 300, 360, 0, 262, 365,
	373, 323, 0, 0, 377, 320, 319, 0, 0, 0,
	0, 0, 0, 312, 259, 356, 392, 381, 331, 370,
	297, 306, 0, 304, 0, 0, 0, 340, 354, 0,
	0, 0, 0, 0, 379, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 1134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 263, 301,
	363, 366, 286, 350, 275, 308, 357, 309, 332, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 680, 0, 1133, 1124, 1123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 374, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 1650, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	336, 337, 386, 387, 388, 361, 280, 0, 287, 288,
	0, 368, 0, 0, 0, 339, 0, 0, 0, 393,
	0, 0, 0, 0, 0, 1119, 0, 314, 264, 318,
	0, 0, 0, 0, 0, 1131, 0, 276, 277, 0,
	0, 322, 317, 344, 346, 355, 364, 375, 383, 358,
	294, 328, 380, 367, 0, 325, 382, 295, 313, 391,
	315, 316, 352, 273, 335, 0, 310, 292, 0, 0,
	0, 298, 266, 305, 267, 296, 327, 0, 293, 0,
	369, 338, 1127, 1128, 1130, 389, 0, 343, 1129, 0,
	0, 0, 0, 330, 371, 333, 362, 324, 353, 282,
	342, 384, 311, 348, 385, 0, 0, 0, 50, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 378, 307, 279, 394, 0, 351, 265, 345, 0,
	0, 271, 274, 390, 376, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 329, 334, 359, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 341, 0, 0, 0, 278, 272, 0, 326,
	0, 0, 0, 281, 0, 300, 360, 0, 262, 365,
	373, 323, 0, 0, 377, 320, 319, 0, 0, 0,
	0, 0, 0, 312, 0, 356, 392, 381, 331, 370,
	297, 306, 0, 304, 0, 0, 0, 340, 354, 0,
	0, 0, 0, 0, 379, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 1134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 263, 301,
	363, 366, 286, 350, 275, 308, 357, 309, 332, 291,
	0, 0, 0, 0, 943, 944, 945, 0, 0, 0,
	680, 0, 1133, 1124, 1123, 0, 0, 0, 0, 0,
	0, 590, 0, 591, 1125, 0, 0, 0, 0, 0,
	0, 581, 582, 0, 0, 0, 0, 1126, 0, 0,
	0, 422, 0, 0, 45, 571, 568, 569, 573, 574,
	575, 576, 0, 0, 0, 572, 577, 462, 463, 0,
	0, 0, 0, 0, 0, 560, 0, 0, 589, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 374, 0, 0, 0,
	0, 0, 557, 558, 0, 0, 0, 0, 606, 349,
	559, 0, 0, 555, 556, 561, 0, 0, 0, 0,
	680, 0, 1133, 1124, 1123, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 1125, 0, 285, 289, 283, 284,
	336, 337, 386, 387, 388, 361, 280, 1126, 287, 288,
	0, 368, 0, 1119, 0, 339, 0, 0, 0, 393,
	0, 0, 0, 1131, 0, 0, 0, 314, 264, 318,
	567, 0, 0, 0, 0, 546, 0, 276, 277, 0,
	0, 322, 317, 344, 346, 355, 364, 375, 383, 358,
	294, 328, 545, 0, 0, 0, 0, 544, 0, 0,
	0, 0, 1557, 0, 590, 0, 591, 0, 0, 0,
	1127, 1128, 1130, 0, 581, 582, 1129, 0, 0, 0,
	0, 0, 0, 0, 422, 0, 1446, 45, 571, 568,
	569, 573, 574, 575, 576, 0, 0, 0, 572, 577,
	462, 463, 547, 0, 0, 592, 0, 542, 560, 0,
	0, 589, 0, 1119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1131, 0, 0, 0, 608, 0, 593,
	594, 0, 0, 0, 0, 557, 558, 0, 0, 0,
	0, 606, 0, 559, 0, 0, 997, 556, 561, 0,
	0, 0, 680, 0, 1133, 1124, 1123, 0, 0, 0,
	579, 0, 0, 0, 0, 604, 1125, 0, 0, 0,
	1127, 1128, 1130, 0, 0, 0, 1129, 0, 0, 1126,
	0, 999, 595, 605, 601, 602, 599, 600, 598, 597,
	596, 607, 583, 584, 585, 586, 588, 0, 0, 466,
	465, 587, 0, 567, 0, 0, 0, 0, 0, 0,
	0, 0, 1134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	0, 0, 0, 1008, 1014, 1012, 0, 0, 1009, 0,
	0, 1007, 0, 0, 1016, 0, 0, 1015, 1001, 1011,
	1013, 1010, 1005, 0, 1000, 0, 1018, 1017, 1019, 998,
	1021, 0, 0, 0, 1025, 1022, 1024, 1023, 592, 1020,
	0, 0, 0, 0, 0, 1119, 0, 0, 1002, 1003,
	0, 0, 0, 0, 0, 1131, 0, 0, 0, 0,
	608, 0, 593, 594, 0, 0, 0, 0, 0, 1004,
	1006, 0, 1134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 680, 0, 1133, 1124, 1123, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 1125, 0, 0, 0,
	0, 0, 1127, 1128, 1130, 0, 0, 0, 1129, 1126,
	0, 0, 0, 0, 0, 595, 605, 601, 602, 599,
	600, 598, 597, 596, 607, 583, 584, 585, 586, 588,
	546, 0, 466, 465, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 545, 0, 0,
	0, 0, 544, 0, 0, 0, 0, 0, 0, 590,
	0, 591, 0, 0, 680, 0, 1133, 1124, 1123, 581,
	582, 603, 0, 0, 0, 0, 0, 1698, 1125, 422,
	0, 0, 45, 571, 568, 569, 573, 574, 575, 576,
	0, 1126, 0, 572, 577, 462, 463, 547, 1699, 0,
	0, 0, 542, 560, 0, 0, 589, 0, 0, 0,
	0, 0, 0, 0, 0, 1119, 0, 0, 0, 680,
	0, 1133, 1124, 1123, 0, 1131, 0, 0, 0, 0,
	557, 558, 0, 1125, 0, 0, 606, 546, 559, 0,
	0, 555, 556, 561, 1134, 0, 1126, 0, 0, 0,
	0, 0, 849, 0, 545, 0, 0, 0, 0, 544,
	604, 0, 0, 0, 0, 0, 590, 0, 591, 0,
	0, 0, 1127, 1128, 1130, 0, 581, 582, 1129, 0,
	0, 0, 0, 0, 0, 0, 422, 0, 1107, 45,
	571, 568, 569, 573, 574, 575, 576, 1655, 567, 0,
	572, 577, 462, 463, 547, 0, 0, 1131, 0, 542,
	560, 0, 0, 589, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 854,
	0, 0, 0, 606, 0, 559, 0, 0, 555, 556,
	561, 0, 1119, 0, 1127, 1128, 1130, 0, 0, 0,
	1129, 0, 1131, 0, 0, 0, 0, 604, 0, 0,
	1446, 0, 0, 592, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 593, 594, 0,
	0, 0, 0, 0, 0, 567, 0, 0, 0, 1127,
	1128, 1130, 0, 0, 1134, 1129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 605, 601, 602, 599, 600, 598, 597, 596, 607,
	583, 584, 585, 586, 588, 0, 0, 466, 465, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1134, 0, 0, 0,
	0, 0, 608, 0, 593, 594, 603, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1134, 0, 0, 0, 0, 0, 595, 605, 601,
	602, 599, 600, 598, 597, 596, 607, 583, 584, 585,
	586, 588, 546, 0, 466, 465, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 545,
	0, 0, 0, 0, 544, 0, 0, 0, 0, 0,
	0, 590, 0, 591, 0, 0, 0, 0, 0, 0,
	0, 581, 582, 603, 0, 0, 0, 0, 0, 0,
	0, 422, 0, 730, 45, 571, 568, 569, 573, 574,
	575, 576, 0, 0, 0, 572, 577, 462, 463, 547,
	0, 0, 0, 0, 542, 560, 0, 0, 589, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 546, 0, 0, 0, 0,
	0, 0, 557, 558, 0, 0, 0, 0, 606, 0,
	559, 0, 545, 555, 556, 561, 0, 544, 0, 0,
	0, 0, 0, 0, 590, 0, 591, 0, 0, 0,
	0, 0, 604, 0, 581, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 422, 0, 0, 45, 571, 568,
	569, 573, 574, 575, 576, 0, 0, 0, 572, 577,
	462, 463, 547, 0, 0, 0, 0, 542, 560, 0,
	567, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 854, 0, 0,
	0, 606, 0, 559, 0, 0, 555, 556, 561, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 567, 0, 0, 0, 608, 0, 593,
	594, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 605, 601, 602, 599, 600, 598, 597,
	596, 607, 583, 584, 585, 586, 588, 0, 592, 466,
	465, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	608, 0, 593, 594, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 605, 601, 602, 599,
	600, 598, 597, 596, 607, 583, 584, 585, 586, 588,
	0, 0, 466, 465, 587, 680, 0, 0, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 545, 0, 0, 0, 0,
	544, 0, 0, 0, 0, 0, 0, 590, 0, 591,
	0, 603, 0, 0, 0, 0, 0, 581, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 422, 0, 0,
	45, 571, 568, 569, 573, 574, 575, 576, 0, 0,
	0, 572, 577, 462, 463, 547, 0, 0, 0, 0,
	542, 560, 0, 0, 589, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 546, 0, 0, 0, 0, 0, 0, 557, 558,
	0, 0, 0, 0, 606, 0, 559, 0, 545, 555,
	556, 561, 0, 544, 0, 0, 0, 0, 0, 0,
	590, 0, 591, 0, 0, 0, 0, 0, 604, 0,
	581, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	422, 0, 0, 45, 571, 568, 569, 573, 574, 575,
	576, 0, 0, 0, 572, 577, 462, 463, 547, 0,
	0, 0, 0, 542, 560, 0, 567, 589, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 0, 0, 0, 0, 606, 0, 559,
	0, 0, 555, 556, 561, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 567,
	0, 0, 0, 608, 0, 593, 594, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 605,
	601, 602, 599, 600, 598, 597, 596, 607, 583, 584,
	585, 586, 588, 0, 592, 466, 465, 587, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 608, 0, 593, 594,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 595, 605, 601, 602, 599, 600, 598, 597, 596,
	607, 583, 584, 585, 586, 588, 546, 0, 466, 465,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 591, 0, 0,
	0, 0, 0, 0, 0, 581, 582, 603, 0, 0,
	0, 0, 0, 0, 0, 422, 0, 0, 45, 571,
	568, 569, 573, 574, 575, 576, 0, 0, 0, 572,
	577, 462, 463, 547, 0, 0, 0, 0, 0, 560,
	0, 0, 589, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 0, 0,
	0, 0, 606, 0, 559, 0, 0, 555, 556, 561,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	591, 0, 0, 0, 0, 0, 604, 0, 581, 582,
	0, 0, 0, 0, 0, 0, 0, 0, 422, 0,
	0, 45, 571, 568, 569, 573, 574, 575, 576, 0,
	0, 0, 572, 577, 462, 463, 0, 0, 0, 0,
	0, 0, 560, 0, 567, 589, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 0, 0, 0, 0, 606, 0, 559, 0, 0,
	555, 556, 561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 567, 0, 0,
	0, 608, 0, 593, 594, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 605, 601, 602,
	599, 600, 598, 597, 596, 607, 583, 584, 585, 586,
	588, 0, 592, 466, 465, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 0, 593, 594, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 595,
	605, 601, 602, 599, 600, 598, 597, 596, 607, 583,
	584, 585, 586, 588, 34, 0, 466, 465, 587, 0,
	0, 0, 590, 0, 591, 0, 0, 0, 0, 0,
	0, 0, 581, 582, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 45, 571, 568, 569, 573,
	574, 575, 576, 0, 0, 603, 572, 577, 462, 463,
	0, 0, 0, 0, 0, 0, 560, 0, 0, 589,
	0, 0, 0, 79, 0, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 0, 0, 0, 0, 606,
	0, 559, 0, 0, 555, 556, 561, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 567, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	0, 122, 123, 0, 124, 125, 126, 128, 127, 96,
	97, 98, 102, 100, 99, 101, 73, 75, 0, 71,
	74, 80, 76, 77, 78, 92, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 93, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 608, 0,
	593, 594, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 595, 605, 601, 602, 599, 600, 598,
	597, 596, 607, 583, 584, 585, 586, 588, 0, 0,
	466, 465, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 603,
}

var yyPact = [...]int16{
	457, -1000, -258, -1000, -1000, 1450, 650, 316, -1000, -1000,
	-1000, 923, 404, 351, 350, 172, 322, 732, 388, 879,
	410, 290, -1000, -223, -206, -1000, -121, 406, -1000, 1257,
	-1000, 4270, 4270, 4270, -1000, 312, 732, 732, 290, 77,
	290, 1475, 355, 1474, 662, -1000, 490, -1000, 1587, 489,
	-1000, 290, 879, 658, -1000, -1000, -1000, -1000, 170, 160,
	419, 1886, -150, -38, -1000, -1000, -1000, -1000, -1000, 1350,
	-1000, -1000, -1000, 1350, 9, 1447, 1350, 1447, -1000, 1350,
	1447, 2, 2, 2, 2, 2, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1446, 1444, -1000, 1350, 1350, 1350, 1350,
	1350, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1438, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1432, 47, 1432, 1369, 1369, -1000, -1000, 1886,
	1886, 1442, 879, 732, 1469, 1467, 879, -237, 879, 879,
	1676, -1000, -1000, -1000, 110, 879, 1567, 5407, 4270, 6547,
	879, -1000, 1554, 435, 879, 4647, -1000, 1535, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1437, 697, 732, 255, 118,
	1294, 257, 507, 256, 1021, 247, -1000, -1000, -1000, 754,
	-1000, 732, -1000, 1687, -1000, -1000, 246, -1000, 245, 646,
	905, 879, 1436, 150, 1433, 5319, 860, -1000, -262, -1000,
	-40, -1000, -1000, 759, 2, 1350, -1000, 2, 857, 2,
	2, -1000, -1000, 495, 1542, 495, 495, 495, 495, 903,
	903, -159, -159, -1000, -1000, -1000, 827, -1000, 810, 1432,
	-1000, -1000, -1000, 788, -1000, 879, 732, 1430, 1466, 879,
	879, 1580, 314, -1000, -1000, 1579, 1578, 1288, -1000, -1000,
	109, -1000, -1000, 355, 732, -1000, 481, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1348, -1000,
	237, 431, 5787, 160, -1000, -1000, -1000, -1000, 305, -1000,
	1689, 1606, 264, -9, -218, 1000, -1000, -1000, 1429, -1000,
	-1000, 8212, -1000, 998, 993, -1000, 976, 974, 1, 732,
	-1000, -214, 104, -53, -1000, -1000, 1294, -1000, 1426, 8212,
	1575, -1000, 1546, 560, -1000, 4939, -1000, -246, -1000, -1000,
	692, -1000, -246, -1000, -1000, -1000, 1294, -1000, 1424, 1412,
	-1000, 1411, -1000, -1000, 1294, 1294, 1294, 479, -1000, -1000,
	-1000, -1000, -1000, 1275, 495, 2, 495, 1272, 1267, 495,
	495, -1000, -1000, 965, 559, -1000, -1000, -1000, -1000, 1235,
	-1000, 1231, -1000, 39, 34, -1000, 1263, 1334, -1000, 1229,
	1329, 1465, 229, 879, 1407, 1400, 1336, 290, 1336, 1604,
	190, 879, 1676, 301, 1676, 355, 6167, 732, 224, 732,
	-1000, -1000, 270, 4267, -1000, -1000, 1219, -1000, 236, 1350,
	415, 415, -215, 244, 243, -218, 1294, 1399, -1000, 305,
	685, -1000, 8212, 225, 1294, 1294, 1294, 1294, 8119, -1000,
	-1000, 464, -1000, -1000, -1000, 8640, 8640, 8640, 8640, 8640,
	8640, 8640, -1000, -1000, -1000, -1000, -27, -1000, -246, -1000,
	898, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 478, 477,
	-1000, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 8212,
	1294, 1529, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
	1294, 1294, 1294, 3142, 1294, 1294, 1294, 1294, -1000, -1000,
	-1000, -1000, -1000, -1000, -218, 1396, -1000, -1000, -1000, 646,
	-1000, 8212, 301, 824, 116, -1000, 1326, -1000, 781, 1259,
	533, 1258, -1000, 8923, -1000, -1000, -1000, 959, -1000, 855,
	-1000, 776, 1254, 7348, 7776, 7776, 6167, -1000, -1000, 495,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2, 902,
	2, -42, -43, -1000, 773, -1000, 765, 229, 732, 879,
	1248, 1324, -1000, 189, 1395, 301, 305, -1000, 1634, 1695,
	-1000, 1336, 879, -1000, 306, 1633, -1000, -1000, 1602, -1000,
	1323, -1000, -1000, 1278, 1676, -1000, 1392, 732, -1000, -1000,
	238, 732, -1000, -1000, -1000, -1000, -1000, 3049, 305, 1555,
	-1000, -1000, -1000, 667, -1000, -1000, 671, 175, 666, -1000,
	732, -218, 1390, 8212, 305, 1213, 173, 8212, 8212, 782,
	-1000, 529, 6733, 730, 546, 8640, 8640, 8640, 8640, 8640,
	8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640,
	3497, 885, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 963, -1000, 1336, 866, 959, 959,
	959, 1175, 8119, 592, 1011, 1011, 19, 8119, 19, 19,
	19, 19, 19, 82, -1000, -260, -1000, -1000, 5407, 6167,
	7776, 7776, 6906, 8212, 7776, 7776, 7776, 1592, 634, 592,
	866, 1600, 959, 959, 959, 959, -1000, 959, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6, -1000, -1000, -1000,
	-1000, -1000, -1000, 7776, 7776, 7776, 7776, -1000, 732, 1294,
	685, 1205, -182, 8212, 1384, 560, -1000, -1000, 1236, -246,
	-1000, -1000, -1000, -150, -1000, -1000, -1000, -1000, 959, 7776,
	1139, 1175, -1000, 670, -1000, 472, 1139, 670, 1139, 1294,
	-1000, 495, -1000, 495, -1000, -1000, 1232, 1216, 1202, 1383,
	1381, -234, 759, 229, 1165, 1157, 1614, 1632, 1336, 1577,
	1521, -1000, 959, 1572, 732, -1000, -1000, -1000, -1000, -1000,
	159, 632, 732, 7196, 1224, -1000, 665, 1380, 105, 271,
	1454, 3429, 152, -1000, 961, 616, 901, 609, 606, 603,
	600, 591, 577, 569, 558, 549, 547, -1000, -1000, -1000,
	-1000, -1000, 1684, -1000, -1000, -1000, 1667, 1377, 1373, 305,
	685, 1151, 3049, -1000, -137, 529, 541, -1000, -1000, 816,
	-1000, -1000, 2613, 8640, 8640, 8640, -1000, -1000, -1000, -1000,
	730, 8640, 8640, 8640, 2594, 2613, 2632, 76, 325, 19,
	8, 8, 17, 17, 17, 17, 17, 149, 149, -1000,
	-147, -1000, 1350, -1000, -1000, -1000, 959, 959, -1000, -1000,
	-1000, -1000, 8212, -1000, 959, -1000, -246, 899, -1000, -1000,
	892, 1294, -1000, 1139, 1139, 755, 1308, 8954, 1350, -1000,
	1350, 1369, -1000, -1000, 62, 1350, 59, -1000, -1000, -1000,
	-1000, 1369, -1000, -1000, -1000, -1000, -1000, 1350, 1350, -1000,
	-1000, 1350, 1350, -1000, 1350, 1350, 808, 1274, 1247, 1139,
	7776, -1000, 571, -1000, 8212, 959, 879, -1000, -1000, -1000,
	-1000, -1000, -1000, 1139, 959, 1306, 1139, 1139, 1149, -1000,
	8212, 173, 1464, -1000, -1000, 801, -1000, 1181, 1154, -1000,
	-1000, 1139, 7776, -255, -1000, -1000, -1000, 890, -1000, -1000,
	3887, -255, -255, 7776, -1000, -1000, -1000, -1000, -234, 229,
	305, 1644, 1368, 1089, 1644, 3049, 1557, 8212, 8212, 1634,
	-1000, 1336, -1000, -1000, 1592, -1000, -1000, 681, -1000, 1336,
	1195, 154, 83, 8212, -1000, 2211, -1000, 7196, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1634, 8212,
	-1000, -1000, -1000, -1000, -1000, 732, 3368, 732, 732, 732,
	381, 8547, -1000, -1000, -1000, 879, 1030, 3890, 665, 665,
	3890, 665, 665, 305, 305, 1355, 1352, 241, -1000, 732,
	-1000, -173, 3429, 732, -1000, 750, -1000, -1000, 714, 731,
	714, 714, 714, 714, 714, 167, 701, 361, 415, 415,
	732, 305, 1137, 173, 3049, 1454, -1000, -1000, -1000, -1000,
	2613, 2613, 2613, -1000, 2594, 2613, 2547, -1000, 8640, 8640,
	31, -1000, -1000, 592, -1000, 57, -1000, -246, -1000, -1000,
	4633, 885, 8212, -1000, 195, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4633, 8640, 8640,
	8640, 8640, -142, 1116, 561, -1000, 8212, 780, -1000, -1000,
	-1000, -1000, -1000, -1000, 276, 732, 685, -1000, 1671, -186,
	297, -1000, -1000, -1000, -1000, -1000, 1294, -1000, -1000, 469,
	-1000, -1000, 959, 1644, 1007, 1114, 3049, 8212, 301, -234,
	3049, -1000, -1000, 1680, 518, 728, 1305, -1000, 752, 1614,
	959, 1491, -1000, -1000, -148, 8212, 7196, 7026, 592, 7026,
	-1000, 7196, 454, 1614, 724, 6754, 316, 924, 876, 1304,
	329, -1000, 2747, 700, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 732,
	1665, 1661, 1651, 1648, 7333, 225, 1599, -1000, -1000, 3890,
	-1000, -1000, -1000, -1000, -1000, 1109, 1077, 305, 305, 1351,
	1294, 1074, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 646, 646, 1057, 1052, 3049, -1000, 1454, -1000, -1000,
	8640, 2613, 2613, -45, -1000, 892, -1000, 959, 1350, 959,
	594, -1000, -1000, 959, 2498, 1309, 2406, 864, 1294, -130,
	-1000, 592, 8212, 879, -1000, 173, 415, 415, -1000, -1000,
	-1000, 156, 620, 560, 560, 695, -6, -1000, 1631, 399,
	5027, -1000, 3049, 1644, 3049, 1454, 592, 1050, 1644, 1454,
	-1000, 1527, 8212, 8212, 8212, -1000, 1557, -1000, 7776, -1000,
	-1000, -249, 592, 2211, 2257, -1000, -1000, 203, 6854, -1000,
	1557, 7196, 619, -1000, 622, -1000, 7026, 865, 879, 1156,
	-1000, 1061, 1507, -1000, -1000, -1000, 1569, 838, 364, 732,
	148, 4270, -1000, -1000, 1302, 3127, -60, -1000, -1000, -1000,
	542, 467, 875, -1000, 1539, -1000, -1000, 3368, 1550, -1000,
	-1000, -1000, -1000, -1000, 7026, 632, 158, -1000, 268, 1047,
	1042, 305, 732, -1000, 3429, -1000, -1000, 275, 3049, 1454,
	-1000, 2613, -1000, -1000, -1000, -1000, -1000, 8640, -1000, -1000,
	8640, -1000, 8640, -1000, 8640, -1000, 8640, 8640, 959, 803,
	592, 1343, -1000, -1000, -1000, 560, -1000, 560, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 108, -1000, 1630, 959, -1000,
	1454, 3049, -1000, -1000, -1000, 3049, -1000, 1525, 592, 592,
	-1000, -1000, 1189, 8212, 6386, -1000, -1000, -1000, -1000, 2189,
	7278, 289, 2032, 192, 879, -1000, 192, 1169, 876, 879,
	-1000, -1000, 866, 876, 876, 876, 876, 876, -1000, 1516,
	1506, -1000, 1493, 1489, 1515, 879, 1038, 838, 369, 1294,
	-1000, 884, -1000, -1000, -1000, 1569, 1583, -1000, 3507, 1302,
	-60, 1301, -1000, -64, -73, 7241, 6167, 495, -1000, -1000,
	-1000, -1000, -1000, 732, 1991, 68, 153, 90, -1000, 107,
	3049, 3049, 1010, 959, -1000, 879, 1454, -1000, 1265, 1265,
	1265, 1265, 1265, 386, -1000, -1000, 732, -1000, -1000, -1000,
	455, 8212, -1000, -1000, -1000, 1454, -1000, 1644, 876, 592,
	-1000, -1000, 2292, -1000, -1000, 8547, -1000, 8547, 7026, -1000,
	1244, 1294, -1000, 1644, 876, 1045, -1000, 1088, -1000, 538,
	1507, 1347, 1455, 1039, -1000, -1000, -1000, -1000, 1496, -1000,
	1490, -1000, -1000, -1000, -1000, -153, 347, 345, 331, 732,
	-1000, 1336, -1000, 1301, -60, -81, -1000, -1000, -1000, -1000,
	592, 537, -1000, 1290, -1000, 7026, -1000, -1000, 103, -1000,
	1454, 1454, -1000, -1000, 1342, -1000, -1000, -1000, -1000, -1000,
	-1000, 959, 162, -175, 1006, 6167, 996, -1000, 592, -1000,
	1642, 1289, 281, 7196, 1915, 6754, 1453, 866, 1294, -1000,
	952, 732, 1634, 1045, -1000, 1644, 866, 8212, -1000, -1000,
	8212, 1337, -1000, 8212, -1000, -1000, -1000, -1000, 1330, 1294,
	1294, 1294, 958, -1000, -1000, -1000, -1000, -80, -78, -1000,
	8212, 2249, -1000, -1000, -1000, -1000, 732, -1000, 1524, -149,
	-178, -1000, -1000, -1000, 959, 8212, 1637, 1624, -1000, 674,
	619, -1000, -1000, 1548, 1163, 1277, -1000, -1000, 7683, 959,
	1004, 450, 958, 1614, -1000, 1634, -1000, 592, 592, 301,
	592, -77, 301, 301, 301, 870, 732, -1000, -1000, -1000,
	592, 6006, 955, -1000, 1457, -1000, -1000, -1000, -1000, 8212,
	8212, 5626, 235, -1000, 1294, -1000, -1000, 1293, 732, 732,
	-1000, -1000, 1614, 939, 936, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 929, 929, 929, 369, -1000, -1000,
	-1000, -152, 592, 1284, 274, 1678, -1000, 1294, -1000, 1336,
	448, -1000, -1000, -1000, -1000, -77, -1000, -1000, -1000, -153,
	-185, -1000, 866, 1277, 959, 732, -1000, -1000, -189, 1245,
	-1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1939, 22, 70, 1938, 1937, 1934, 1933, 1927, 1926,
	1922, 1920, 1919, 43, 25, 49, 24, 35, 1916, 1915,
	1914, 1913, 1910, 80, 1909, 1907, 1904, 85, 1899, 1898,
	1895, 1893, 78, 117, 82, 83, 678, 27, 26, 59,
	52, 1891, 23, 1890, 1889, 58, 1888, 41, 1882, 1880,
	230, 1878, 1877, 5, 201, 45, 101, 145, 1876, 1871,
	93, 1412, 1870, 1869, 126, 1868, 1866, 98, 11, 4,
	6, 8, 1864, 417, 1, 1862, 90, 1859, 1858, 1855,
	1854, 42, 1853, 60, 71, 14, 62, 1852, 10, 74,
	46, 15, 9, 2, 53, 28, 1850, 17, 39, 21,
	1847, 66, 1846, 103, 47, 65, 84, 0, 50, 89,
	1845, 1844, 1838, 1105, 92, 40, 13, 56, 72, 1837,
	69, 100, 54, 99, 96, 1836, 94, 1835, 1833, 1832,
	1831, 1830, 1977, 741, 110, 76, 55, 1828, 1827, 88,
	293, 253, 91, 307, 997, 79, 1826, 1822, 1821, 1812,
	108, 1809, 77, 107, 31, 384, 1807, 1806, 1805, 1803,
	1799, 1794, 1791, 97, 1790, 86, 95, 81, 175, 48,
	1789, 1787, 1784, 1783, 73, 1781, 1780, 1774, 63, 1772,
	1768, 104, 67, 115, 105, 109, 1765, 1758, 68, 75,
	1756, 106, 111, 1755, 102, 44, 30, 29, 57, 1754,
	1753, 1752, 7, 3, 1746, 1744, 1743, 1733, 1732, 1730,
	64, 1728, 87, 1725, 16, 1724, 1718, 51, 1715, 1712,
	1710, 1709, 1707, 445, 675, 1704, 216, 118, 1702, 114,
}

var yyR1 = [...]uint8{
	0, 219, 220, 220, 1, 1, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 19, 19, 19, 19, 19, 19,
	19, 222, 222, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 26, 26, 7, 8, 8, 8, 225, 225,
	45, 45, 90, 90, 9, 9, 9, 9, 10, 10,
	199, 199, 198, 200, 200, 11, 11, 11, 11, 11,
	193, 193, 193, 193, 193, 12, 12, 196, 196, 196,
	13, 13, 13, 13, 14, 14, 15, 15, 15, 17,
	17, 95, 95, 99, 99, 99, 100, 100, 100, 100,
	211, 211, 119, 119, 221, 221, 226, 226, 226, 226,
	226, 226, 226, 191, 191, 191, 191, 192, 192, 192,
	192, 194, 194, 195, 195, 195, 195, 195, 195, 197,
	197, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	105, 105, 172, 172, 172, 173, 173, 173, 173, 173,
	173, 175, 175, 176, 176, 111, 111, 177, 177, 22,
	157, 158, 158, 158, 158, 158, 158, 158, 158, 144,
	144, 144, 122, 122, 122, 122, 122, 122, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 183, 183, 183,
	183, 183, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 185, 186, 187, 179, 179, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 134, 134, 134, 134, 134, 134, 178, 178,
	174, 174, 174, 174, 126, 126, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 125, 125, 125, 125,
	125, 125, 125, 130, 130, 127, 127, 127, 127, 127,
	127, 127, 127, 123, 123, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 131, 131, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 143, 143,
	132, 132, 141, 141, 142, 142, 142, 133, 133, 133,
	140, 140, 140, 137, 137, 138, 138, 139, 139, 139,
	135, 135, 135, 136, 136, 136, 146, 168, 168, 168,
	170, 170, 171, 171, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 156, 156,
	188, 188, 189, 189, 190, 190, 167, 167, 167, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 155, 155, 165, 165, 166, 166, 163, 163, 163,
	164, 150, 150, 150, 150, 150, 151, 151, 152, 152,
	152, 152, 147, 147, 148, 148, 149, 149, 181, 181,
	181, 215, 215, 215, 215, 215, 215, 216, 216, 182,
	182, 153, 153, 154, 154, 161, 161, 161, 161, 227,
	227, 159, 159, 159, 160, 160, 160, 228, 23, 24,
	24, 25, 25, 25, 29, 29, 29, 27, 27, 28,
	28, 34, 34, 33, 33, 35, 35, 35, 35, 110,
	110, 110, 109, 109, 212, 212, 212, 212, 212, 37,
	37, 38, 38, 39, 39, 40, 40, 40, 202, 202,
	201, 201, 203, 203, 203, 203, 203, 203, 203, 203,
	52, 52, 88, 88, 88, 91, 91, 41, 41, 41,
	41, 42, 42, 43, 43, 44, 44, 117, 117, 116,
	116, 116, 115, 115, 46, 46, 46, 48, 47, 47,
	47, 47, 49, 49, 51, 51, 50, 50, 53, 53,
	53, 53, 54, 54, 89, 89, 36, 36, 36, 36,
	36, 36, 36, 102, 102, 56, 56, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 66, 66, 66, 66, 66, 66, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	32, 32, 67, 67, 67, 73, 68, 68, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 64, 64, 64, 64,
	64, 64, 64, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 229, 229, 65, 65,
	65, 65, 30, 30, 30, 30, 30, 118, 118, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 121, 121, 121, 121, 121, 121, 121, 121, 77,
	77, 31, 31, 75, 75, 76, 104, 104, 78, 78,
	74, 74, 74, 204, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 57, 57, 79, 79, 80, 80,
	213, 213, 214, 81, 81, 82, 82, 83, 84, 84,
	84, 85, 85, 85, 85, 86, 86, 86, 59, 59,
	59, 59, 59, 59, 87, 87, 87, 87, 92, 92,
	69, 69, 71, 71, 70, 72, 93, 93, 97, 94,
	94, 98, 98, 98, 98, 98, 20, 21, 96, 96,
	96, 112, 112, 112, 103, 103, 101, 101, 107, 108,
	108, 108, 108, 113, 113, 114, 114, 205, 205, 205,
	206, 206, 206, 207, 207, 208, 209, 209, 210, 218,
	218, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 223, 224,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 3, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 10, 1, 1, 5, 5, 3, 5, 3, 1,
	3, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 4, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	0, 3, 0, 2, 2, 0, 2, 2, 2, 2,
	2, 0, 2, 0, 3, 0, 1, 0, 2, 4,
	4, 0, 1, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 3, 1, 1, 1, 1, 1, 2, 2,
	3, 2, 4, 2, 4, 2, 2, 3, 2, 3,
	2, 7, 9, 3, 3, 6, 9, 9, 6, 6,
	8, 8, 5, 8, 7, 4, 0, 2, 4, 6,
	2, 4, 2, 1, 1, 2, 1, 2, 2, 1,
	1, 1, 3, 1, 2, 1, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 2, 3, 1, 3, 0, 2,
	0, 2, 2, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 1, 1, 0, 1, 1, 3, 3, 2, 2,
	2, 1, 1, 1, 1, 4, 5, 4, 4, 4,
	1, 2, 2, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 3, 3,
	0, 3, 3, 0, 1, 0, 1, 0, 2, 1,
	0, 3, 3, 0, 1, 2, 6, 0, 1, 4,
	1, 2, 1, 3, 2, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 5, 2,
	3, 3, 2, 3, 2, 3, 3, 2, 2, 3,
	4, 1, 1, 1, 1, 1, 3, 3, 2, 2,
	1, 2, 5, 5, 8, 8, 13, 11, 1, 1,
	2, 2, 10, 8, 9, 7, 7, 5, 0, 1,
	1, 0, 1, 1, 1, 2, 2, 1, 2, 0,
	3, 0, 1, 1, 3, 0, 4, 1, 3, 2,
	1, 1, 2, 1, 1, 1, 1, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 3, 6, 4, 7, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 0, 4,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 8, 1, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 0, 4, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 4, 4,
	4, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	4, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	6, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 2, 1, 4, 5, 5, 5,
	5, 6, 4, 4, 4, 6, 6, 8, 6, 6,
	6, 8, 6, 8, 6, 8, 6, 8, 9, 7,
	5, 4, 4, 3, 3, 3, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 2, 2, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 0, 2,
	1, 3, 5, 3, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 0, 3, 0, 2,
	1, 3, 1, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 5, 3, 1, 3, 1, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 2,
	0, 2, 2, 0, 1, 4, 1, 3, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -219, -1, -18, -19, -22, 126, 127, -220, 388,
	-157, 58, -215, -216, 273, -177, 135, 148, 166, 167,
	358, 133, 370, 371, 150, 373, 79, -101, 138, -158,
	-144, -107, 63, 36, 61, 134, 134, 134, 136, 210,
	136, -107, -107, -74, 139, 61, -113, 63, -50, -113,
	61, 133, -103, 139, 373, 370, 371, 338, 133, 60,
	59, -145, -122, -126, -123, -128, -127, -129, -107, -124,
	-125, 246, 350, 243, 247, 244, 249, 250, 251, 120,
	248, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 252, 264, 33, 155, 236, 237, 238, 241,
	240, 242, 239, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 217, 218, 219, 220, 221, 222, 223, 224,
	225, 226, 228, 229, 231, 232, 233, 235, 234, -145,
	-145, -107, 56, 209, -107, -107, -103, 211, -103, 56,
	-191, 19, 190, 191, 203, 56, 81, 123, 25, 123,
	-103, -50, 81, -50, 302, -161, -227, 353, 37, -144,
	-146, -150, -147, -148, -149, -162, -151, 142, 140, 150,
	386, 144, 145, 273, -155, 146, 134, 151, 73, 81,
	-183, 142, -186, 56, 281, 287, 140, 151, 150, 386,
	71, 143, 25, 360, 362, 31, 32, -139, 389, 275,
	-137, 284, -132, 58, -132, -131, 245, -133, 58, -132,
	-133, -132, -133, -135, 247, -135, -135, -135, -135, 58,
	58, -132, -132, -132, -132, -132, 58, -141, 58, -130,
	230, -141, -142, 58, -142, 56, 57, -50, -107, 56,
	56, -50, -211, 383, 384, -50, -50, -194, -192, 8,
	9, 10, 204, -50, 26, -108, -114, -107, 295, 147,
	-106, -113, 131, 191, 361, 80, 25, 27, 281, 287,
	190, 84, 120, 16, 85, 197, 370, 371, 119, 76,
	339, 126, 52, 331, 332, 329, 195, 341, 342, 330,
	288, 202, 20, 31, 383, 10, 28, 153, 24, 113,
	128, 192, 89, 88, 156, 26, 154, 75, 198, 200,
	19, 55, 146, 11, 360, 13, 14, 375, 362, 139,
	138, 100, 374, 134, 50, 8, 122, 29, 384, 97,
	46, 151, 201, 48, 98, 17, 333, 334, 34, 348,
	160, 115, 53, 40, 376, 81, 377, 73, 56, 302,
	196, 79, 15, 51, 161, 378, 148, 199, 382, 99,
	129, 338, 49, 193, 379, 132, 194, 6, 344, 33,
	152, 47, 168, 133, 289, 380, 87, 137, 74, 167,
	5, 150, 9, 381, 54, 57, 335, 336, 337, 38,
	86, 12, 149, 352, 77, -122, -114, -106, -50, 26,
	131, -50, -159, 59, -108, 71, -106, 36, 58, -182,
	56, 81, -153, -107, 151, -155, 61, 134, -181, 370,
	371, -223, 58, -155, -155, 61, 134, 151, 61, 151,
	73, 19, -107, 9, 151, 151, -182, 63, -50, 58,
	-179, 361, 16, 58, -184, 58, -185, 63, 64, 65,
	110, 66, 73, -134, 72, -56, 276, -64, 329, 332,
	331, 277, 74, 75, -107, 347, 346, -113, -187, 65,
	390, -138, 285, 65, -135, -132, -135, 65, 61, -135,
	-135, -136, 120, 119, 33, -136, -136, -136, -136, -143,
	63, -143, -140, 352, 353, -140, 65, 65, -141, 65,
	-50, -107, 58, 56, -50, -50, 25, 136, 25, -172,
	25, 56, 59, 204, -191, -107, 123, 57, -111, 142,
	-150, 150, 131, 90, -108, -227, -166, -163, -107, 151,
	10, 9, 19, 146, 140, 150, 386, -181, 61, 58,
	-36, -55, 81, -61, 31, 26, 9, 76, -223, -60,
	-56, -74, -204, -72, -73, 120, 121, 109, 110, 117,
	82, 122, -64, -62, -63, -65, -207, 177, 63, 64,
	-107, 62, 72, 65, 66, 67, 68, 73, -113, 307,
	-70, 48, 49, 339, 340, 341, 342, 348, 343, 85,
	38, 40, 252, 276, 277, 329, 337, 336, 335, 333,
	334, 331, 332, 385, 139, 330, 115, 338, 274, 61,
	61, 61, 61, -181, 150, -153, -107, 372, -183, 386,
	-134, -223, 58, -36, 25, 31, -57, 65, 110, -184,
	58, -185, -174, 385, 65, 66, -174, -223, -132, 58,
	-132, 58, 58, -223, -223, -223, 123, 60, -136, -135,
	-136, 60, 60, -136, -136, 61, 61, 120, 60, 59,
	60, 236, 236, 60, 59, 60, 59, 58, 57, 56,
	-165, -166, -64, -107, -50, 58, 58, -2, -3, -4,
	6, -223, -103, -2, -173, 19, 174, 175, -50, -192,
	-88, -107, 151, -194, -191, -108, -107, -222, 134, 151,
	-107, 142, -150, -160, -108, 63, 65, 60, 59, -132,
	-164, 279, -132, -152, 170, 171, 33, 172, -152, 372,
	151, 151, -181, -223, 58, -166, -224, 80, 79, 97,
	60, -36, -58, 100, 81, 98, 99, 84, 106, 105,
	116, 109, 110, 111, 112, 113, 114, 115, 107, 108,
	385, 119, 90, 91, 92, 93, 94, 95, 96, 101,
	102, 103, 104, -102, -223, -73, -223, -223, -223, -55,
	-2, -68, -223, -36, 124, 125, -61, -223, -61, -61,
	-61, -61, -61, -61, -208, 275, -174, 63, 123, 123,
	-223, -223, -223, -223, -223, -223, -223, -223, -77, -36,
	-223, 41, -223, -223, -223, -223, -229, -223, -229, -229,
	-229, -229, -229, -229, -121, 120, 247, 155, 238, -124,
	-123, 253, 252, -223, -223, -223, -223, -181, 58, -182,
	-36, -88, 60, 58, 362, 59, 65, 60, -184, 63,
	60, 278, 122, -122, -224, 60, 60, 60, -34, 24,
	-33, -68, -35, -36, 111, -113, -33, -36, -33, -108,
	-136, -135, 63, -135, 286, 286, 65, 65, -165, -107,
	-50, 60, 58, 58, -88, -166, -81, 15, -25, 5,
	-23, -228, -2, -50, 137, 21, 6, 8, 9, 10,
	19, -105, 59, 25, -194, -221, 58, -107, 150, -107,
	-168, -170, 352, -169, 57, 147, 71, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 61, -163, -84, 27,
	28, -182, 56, 73, 173, -182, 56, -153, -181, 58,
	-36, -166, 60, -178, 172, -36, -36, -66, 73, 81,
	74, 75, -61, 21, 22, 23, -67, -70, -73, 69,
	100, 98, 99, 84, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -126,
	237, -121, -124, -118, 61, 63, 61, -74, -107, -224,
	-224, -224, 59, -224, -2, -60, 63, -107, -60, -107,
	389, -108, -108, -33, -33, -36, -120, 120, 243, 155,
	238, 232, 262, 263, 283, 236, 284, 225, 217, 222,
	235, 233, 219, 234, 218, 231, 228, 241, 240, 242,
	253, 244, 249, 251, 250, 248, -36, -35, -35, -33,
	-27, 24, -75, -76, 86, -74, 19, -224, -224, -224,
	-224, -224, 245, -33, -34, -33, -33, -33, -154, -107,
	-223, -224, 60, 358, 359, -36, 58, -57, 60, -139,
	-224, -33, 59, -224, -224, -110, -109, 25, -107, 63,
	123, -224, -224, -223, -136, -136, 60, 60, 60, 58,
	58, -89, 374, -165, 60, 60, -85, 17, 16, -5,
	-3, -223, 21, 24, -29, 44, 45, -24, -224, 25,
	-154, 192, -104, 86, -107, -195, -197, 212, -16, -13,
	-6, -8, -7, -10, -9, -11, -12, -20, -3, 139,
	-14, -15, -26, 10, 9, 20, 33, 196, 197, 202,
	198, 149, -21, 8, 338, 56, -226, -107, 109, 90,
	63, -144, 59, 58, 58, 370, 371, 140, -167, 56,
	-169, 352, 58, 354, 61, -156, 90, 63, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 9, 10,
	58, 58, -166, -224, 60, -168, 345, 73, 74, 75,
	-61, -61, -61, -67, -61, -61, -61, -32, 156, 80,
	352, -224, -224, -36, -224, -209, -210, 63, -224, -224,
	59, 57, 59, -132, -132, -132, -142, 223, -132, 223,
	-142, -132, -132, -132, -132, -132, -132, 25, 59, 11,
	59, 11, -224, -33, -78, -76, 89, -36, -224, -113,
	-224, -224, -224, -224, 60, 59, -36, -178, 56, 60,
	-180, 60, 60, -224, -35, -212, 387, -109, 111, -114,
	-212, -212, -34, -89, -165, -166, -54, 12, 58, 60,
	-54, -168, -86, 19, 34, -36, -82, -83, -36, -81,
	-2, -27, 70, -2, -175, 57, 193, 212, -36, 388,
	-197, 212, -195, -81, -36, -55, -23, -23, -23, -199,
	-107, -198, -23, -218, -217, 308, 309, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, -107, -107, -107, -193,
	40, 199, 200, 201, -55, -61, -50, 60, -226, -107,
	-226, -226, -226, -226, -226, -166, -166, 58, 58, 151,
	-107, -171, -169, -107, 65, -188, 56, 77, 65, -188,
	-188, -188, -188, -188, -189, 188, 189, 65, -190, -189,
	65, -152, -152, -154, -166, 60, -178, -168, -167, -32,
	80, -61, -61, 236, 390, 59, -174, -120, 120, -118,
	-36, -135, 61, -120, -61, -61, -61, -61, 349, -81,
	88, -36, 87, 143, -107, -224, 10, 9, 358, 359,
	60, 213, 364, 365, 160, 366, 172, 367, 368, -223,
	123, -224, -54, 60, 60, -168, -36, -88, -89, -168,
	9, 100, 59, 18, 59, -84, -85, -224, -28, 47,
	-176, 352, -36, -195, -196, -197, -197, -195, 388, 88,
	-85, 87, -17, -13, -14, -16, 212, -101, 11, -45,
	-50, -38, -39, -40, -41, -52, -73, -223, -50, 59,
	-200, -117, 194, 25, -94, -119, 214, -98, 297, 296,
	-108, 307, -96, 295, 247, 294, -188, 59, -107, 11,
	11, 11, 11, -197, 212, -105, 19, 60, 60, -166,
	-166, 58, -223, 60, 59, -182, -182, 60, 60, -168,
	-167, -61, 286, -210, -224, -224, -224, 59, -224, -224,
	59, -224, 19, -224, 59, -224, 19, -223, -31, 344,
	-36, -50, -178, -152, -152, 352, -57, 16, -57, -57,
	-57, 65, 365, 160, 367, 16, -224, 161, -81, 111,
	-168, -54, -168, -167, 60, -54, -167, 42, -36, -36,
	-83, -86, -33, 386, 388, -197, 88, 88, -86, -195,
	89, 89, -196, -51, 29, -50, -50, -45, -225, 59,
	11, 57, 33, 59, -46, -48, -47, -49, 46, 50,
	52, 47, 48, 49, 53, -117, -38, -223, -116, 161,
	-115, 25, -113, 63, -198, -107, 195, -122, 59, -94,
	214, -95, -99, 298, 300, 90, 123, -112, -107, 63,
	31, 33, -217, 29, -196, -104, 192, -205, 205, 81,
	60, 60, -166, -107, -169, 143, -168, -167, -61, -61,
	-61, -61, -61, -61, -224, 63, 58, -57, -57, 369,
	-113, 16, -224, -167, -168, -168, 43, -37, 11, -36,
	88, -197, 388, -14, -17, 139, -15, 139, 388, 88,
	-90, 161, -50, -90, 57, -38, -50, -93, -97, -74,
	-39, -40, -40, -39, -40, 46, 46, 46, 51, 46,
	51, 46, -47, -113, -224, -53, 54, 138, 55, -223,
	-115, 19, -98, -95, 59, 299, 301, 302, 56, 77,
	-36, -108, -136, -154, 88, 212, 193, -206, 206, 205,
	-168, -168, 60, -224, -50, -167, -224, -224, -224, -224,
	-224, -30, 100, 352, -154, 123, -213, -214, -36, -167,
	-54, -38, 88, 89, -55, -55, -59, 33, 38, -2,
	-223, -223, -54, -38, -54, -37, 59, 90, -43, -42,
	56, 57, -44, 56, -42, 46, 46, -202, 352, 134,
	134, 134, -91, -107, -2, -99, -100, 303, 300, 306,
	90, -196, 208, 207, -167, -167, 58, -224, 350, 53,
	355, 60, -108, -224, -81, 59, -79, 13, 139, -195,
	-17, -17, -92, 56, -93, -69, -71, -70, -223, -2,
	-87, -107, -91, -81, -54, -54, -97, -36, -36, 58,
	-36, 58, -223, -223, -223, -224, 59, 300, 304, 305,
	-36, 388, -154, 43, 351, 356, -224, -214, -80, 14,
	16, 388, 30, -92, 59, -224, -224, -224, 59, 123,
	-224, -85, -81, -88, -201, -203, 375, 376, 377, 378,
	379, 380, 381, 382, -88, -88, -88, -116, -107, 88,
	60, 43, -36, -68, 88, 151, -71, 38, -2, -223,
	-107, -107, -85, 60, 60, 59, -224, -224, -224, -53,
	352, 139, 9, -69, -2, 123, -203, -202, 355, -93,
	-224, -107, 356,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 816, 1, 3,
	6, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 814, 422, 423, 424, 427, 0, 0, 817, 0,
	162, 206, 206, 206, 818, 0, 0, 0, 814, 0,
	814, 0, 740, 0, 0, -2, 0, 824, 0, 536,
	823, 814, 0, 0, 428, 425, 426, 158, 0, 435,
	0, 169, 337, 333, 173, 174, 175, 176, 177, 320,
	255, 283, 284, 320, 307, 327, 320, 327, 290, 320,
	327, 340, 340, 340, 340, 340, 298, 299, 300, 301,
	302, 303, 304, 0, 0, 275, 320, 320, 320, 320,
	320, 281, 282, 309, 310, 311, 312, 313, 314, 315,
	316, 0, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 322, 273, 322, 324, 324, 271, 272, 170,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 114, 115, 0, 0, 0, 0, 0, 0,
	0, 159, 0, 0, 0, 160, 437, 0, 440, 163,
	164, 165, 166, 167, 168, 0, 429, 431, 0, 418,
	0, 0, 0, 0, 0, 0, 391, 392, 179, 0,
	181, 0, 183, 0, 185, 186, 0, 188, 190, 429,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 339,
	335, 334, 254, 0, 340, 320, 308, 340, 0, 340,
	340, 291, 292, 343, 0, 343, 343, 343, 343, 0,
	0, 330, 330, 278, 279, 280, 0, 266, 0, 322,
	274, 268, 269, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 142, 0, 121, 117,
	118, 119, 116, 0, 0, 741, 0, 819, 820, 821,
	-2, 825, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 22, 537, 826, 0, 815,
	155, 0, 0, 0, 441, 443, 822, 439, 0, 401,
	0, 0, 0, 432, 379, 0, 387, -2, 0, 419,
	420, 833, 995, 0, 0, 382, 384, 0, 418, 431,
	180, 0, 0, 0, 187, 189, 0, 193, 194, 833,
	0, 226, 0, 0, 207, 0, 210, -2, 213, 214,
	0, 216, 250, 219, 220, 221, 0, 223, 320, 320,
	246, 0, 555, 556, 0, 0, 0, 0, 224, 225,
	338, 172, 336, 0, 343, 340, 343, 0, 0, 343,
	343, 293, 344, 0, 0, 294, 295, 296, 297, 0,
	318, 0, 276, 0, 0, 277, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 814, 0, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 431,
	29, 156, 0, 0, 442, 438, 0, 395, 320, 320,
	0, 0, 0, 0, 0, 418, 0, 0, 386, 0,
	0, 546, 833, 551, 553, 0, 0, 0, 833, 598,
	599, 600, 601, 602, 603, 833, 833, 833, 833, 833,
	833, 833, 630, 631, 632, 633, 0, 635, -2, 745,
	740, 747, 748, 749, 750, 751, 752, 753, 0, 0,
	795, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 0, 0, 0, 0, 666, 676, 676, 676, 676,
	676, 676, 676, 0, 0, 0, 0, 0, 834, 380,
	381, 383, 385, 389, 418, 0, 432, 205, 182, 429,
	184, 833, 0, 0, 0, 227, 0, 754, 0, 0,
	0, 0, 212, 0, 215, 217, 218, 0, 242, 0,
	244, 0, 0, -2, 833, 833, 0, 321, 285, 343,
	287, 328, 329, 288, 289, 345, 341, 342, 340, 0,
	340, 0, 0, 317, 0, 325, 0, 0, 0, 0,
	0, 393, 394, 320, 0, 0, 0, -2, 763, 0,
	447, 0, 0, -2, 0, 0, 143, 144, 140, 122,
	120, 502, 503, 0, 0, 742, 104, 0, 31, 32,
	432, 431, 30, 436, 444, 445, 446, 347, 0, 768,
	399, 400, 398, 429, 408, 409, 0, 0, 429, 430,
	431, 418, 0, 833, 0, 0, 248, 833, 833, 0,
	996, 549, 833, 0, 0, 833, 833, 833, 833, 833,
	833, 833, 833, 833, 833, 833, 833, 833, 833, 833,
	0, 0, 579, 580, 581, 582, 583, 584, 585, 586,
	587, 588, 589, 552, 0, 569, 0, 0, 0, 546,
	36, 0, 833, 596, 0, 0, 621, 833, 622, 623,
	624, 625, 626, 627, 634, 0, 744, 746, 0, 0,
	833, 833, 833, 833, 833, 833, 833, 457, 0, 730,
	0, 0, 0, 0, 0, 0, 668, 0, 669, 670,
	671, 672, 673, 674, 675, 721, 0, 723, 724, 725,
	726, 727, 728, 833, -2, 833, 833, 390, 0, 0,
	0, 0, 0, 833, 202, 0, 755, 208, 0, 250,
	211, 251, 252, 337, 222, 243, 245, 247, 0, 833,
	0, 0, 463, 469, 465, 0, 0, 469, 0, 0,
	286, 343, 319, 343, 331, 332, 0, 0, 0, 0,
	0, 544, 995, 0, 0, 0, 771, 0, 0, 451,
	454, 449, 36, 0, 0, 146, 147, 148, 149, 150,
	0, 736, 0, 0, 0, 23, 106, 0, 0, 432,
	376, 348, 0, 350, 0, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 396, 397, 769,
	770, 402, 0, 410, 411, 403, 0, 0, 0, 0,
	0, 0, 347, 417, 0, 547, 548, 550, 573, 0,
	575, 577, 557, 833, 833, 833, 561, 592, 593, 594,
	0, 833, 833, 833, 590, 565, 0, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 618,
	0, 629, 320, 619, 687, 688, 0, 0, 740, 571,
	572, 595, 833, 794, 36, 616, 250, 0, 617, 628,
	0, 741, 743, 0, 0, 0, 0, -2, 320, 692,
	320, 324, 695, 696, 697, 320, 700, 702, 703, 704,
	705, 324, 707, 708, 709, 710, 711, 320, 320, 714,
	715, 320, 320, 718, 320, 320, 0, 0, 0, 0,
	833, 458, 738, 733, 833, 0, 0, 663, 664, 665,
	667, 677, 722, 0, 0, 462, 0, 0, 0, 433,
	833, 248, 195, 198, 199, 0, 228, 0, 0, 253,
	636, 0, 833, 474, 642, 466, 470, 0, 472, 473,
	0, 474, 474, -2, 305, 306, 323, 326, 544, 0,
	0, 542, 0, 0, 542, 347, 775, 833, 833, 763,
	38, 0, 452, 453, 457, 455, 456, 448, 37, 0,
	151, 0, 0, 833, 504, 19, 123, 0, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 763, 833,
	82, 83, 447, 447, 447, 0, 447, 0, 0, 0,
	70, 833, 806, 42, 43, 0, 0, -2, 106, 106,
	-2, 106, 106, 0, 0, 0, 0, 0, 346, 0,
	351, 0, 0, 0, 354, 0, 369, 356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 347, 376, 249, 574, 576, 578,
	558, 559, 560, 562, 590, 566, 0, 563, 833, 833,
	0, 554, 570, 597, -2, 0, 836, 250, 643, 644,
	0, 0, 833, 689, 340, 693, 694, 698, 699, 701,
	706, 712, 713, 716, 717, 719, 720, 0, 833, 833,
	833, 833, 0, 763, 0, 734, 833, 0, 661, 662,
	678, 679, 680, 681, 0, 0, 0, 191, 0, 0,
	0, 204, 209, 637, 464, 638, 0, 471, 467, 0,
	639, 640, 0, 542, 0, 0, 347, 833, 0, 544,
	347, 13, 33, 0, 0, 772, 764, 765, 768, 771,
	36, 459, 450, -2, 153, 833, 141, 0, 737, 0,
	126, 0, 0, 771, 0, 546, 816, 0, 0, 58,
	-2, 60, 0, 0, 839, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 65, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 140, 105, 107, -2,
	108, 109, 110, 111, 112, 0, 0, 0, 0, 0,
	377, 0, 352, 357, 355, 358, 370, 371, 359, 360,
	361, 362, 363, 364, 365, 372, 373, 366, 367, 374,
	375, 429, 429, 0, 0, 347, 416, 376, 415, 564,
	833, 591, 567, 0, 835, 0, 838, 0, 320, 0,
	0, 690, 691, 0, 0, 0, 0, 0, 0, 731,
	660, 739, 833, 0, 434, 248, 0, 0, 200, 201,
	203, 0, 0, 0, 0, 0, 0, 239, 0, 0,
	0, 641, 347, 542, 347, 376, 543, 0, 542, 376,
	776, 0, 833, 833, 833, 767, 775, 39, 833, 460,
	17, 0, 152, 18, 0, 77, 124, 0, 0, 127,
	775, 0, 88, 86, 82, 89, 0, 0, 0, 0,
	50, 0, 481, 483, 484, 485, 517, 0, 519, 0,
	0, 0, 64, 518, 54, 0, 0, 799, 102, 103,
	0, 0, 0, -2, 0, 810, 807, 0, 68, 71,
	72, 73, 74, 75, 0, 736, 0, 24, 827, 0,
	0, 0, 0, 349, 0, 404, 405, 0, 347, 376,
	413, 568, 620, 837, 645, 649, 646, 833, 648, 650,
	833, 652, 833, 654, 833, 656, 833, 833, 0, 0,
	735, 0, 192, 196, 197, 0, 230, 0, 232, 233,
	234, 235, 236, 237, 238, 0, 475, 0, 0, 468,
	376, 347, 10, 8, 545, 347, 12, 0, 773, 774,
	766, 34, 479, 833, 0, 78, 128, 125, 139, 0,
	0, 0, 0, 52, 0, 535, -2, 0, 0, 0,
	48, 49, 0, 0, 0, 0, 0, 0, 524, 0,
	0, 527, 0, 0, 0, 0, 0, 0, 538, 0,
	520, 0, 522, 523, 61, 517, 0, 62, 0, 55,
	0, 57, 91, 0, 0, 833, 0, 343, 811, 812,
	813, 809, 840, 0, 0, 0, 0, 830, 828, 0,
	347, 347, 0, 0, 353, 0, 376, 414, 0, 0,
	0, 0, 0, 682, 659, 732, 0, 229, 231, 240,
	0, 833, 477, 7, 11, 376, 777, 542, 0, 154,
	20, 79, 0, 84, 85, 833, 87, 833, 0, 90,
	0, 0, 534, 542, 0, 542, 51, 479, 796, 0,
	482, 513, 515, 0, 510, 525, 526, 528, 0, 530,
	0, 532, 533, 486, 487, 488, 0, 0, 0, 0,
	521, 0, 800, 56, 0, 0, 94, 95, 801, 802,
	803, 0, 805, 69, 76, 0, 141, 26, 0, 829,
	376, 376, 25, 378, 0, 412, 647, 651, 653, 655,
	657, 0, 0, 0, 0, 0, 0, 760, 762, 9,
	756, 480, 0, 0, 0, 0, 788, 0, 0, -2,
	0, 0, 763, 542, 47, 542, 0, 833, 507, 514,
	833, 0, 508, 833, 509, 529, 531, 500, 0, 0,
	0, 0, 0, 505, -2, 92, 93, 0, 0, 99,
	833, 0, 831, 832, 27, 28, 0, 658, 0, 0,
	0, 407, 241, 476, 0, 833, 758, 0, 80, 0,
	0, 88, 40, 0, 788, 778, 790, 792, 833, 36,
	0, 784, 0, 771, 46, 763, 797, 798, 511, 0,
	516, 0, 0, 0, 0, 519, 0, 96, 97, 98,
	804, 0, 0, 683, 0, 686, 478, 761, 35, 833,
	833, 0, 0, 41, 0, 793, -2, 0, 0, 0,
	53, 45, 771, 0, 0, 490, 492, 493, 494, 495,
	496, 497, 498, 499, 0, 0, 0, 538, 506, 21,
	406, 684, 759, 757, 0, 0, 791, 0, -2, 0,
	786, 785, 44, 512, 489, 0, 539, 540, 541, 488,
	0, 81, 0, 781, 36, 0, 491, 501, 0, 789,
	-2, 787, 685,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 388,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 389, 3, 390, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:421
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:426
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:427
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:435
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:440
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:460
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:480
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:501
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:517
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:534
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:554
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 14:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:569
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:580
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:592
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:603
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:619
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:633
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:647
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:674
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:685
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:691
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:705
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:719
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:739
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:757
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:775
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:784
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:799
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:807
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:814
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:820
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:824
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:830
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:834
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:841
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:853
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:865
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:869
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:875
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:881
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:885
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:889
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:894
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:895
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:899
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:903
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:908
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:912
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:918
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:922
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:926
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:930
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:936
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:940
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:953
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:957
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:963
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:968
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:972
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:978
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:985
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:992
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:999
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1007
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1017
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1021
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1025
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1029
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1033
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1039
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1046
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1060
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1064
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1068
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1075
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1083
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1093
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1097
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1104
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1114
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1125
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1130
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1135
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1142
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1146
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1157
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1161
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1167
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1171
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1175
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1181
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1185
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1189
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1193
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1199
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1203
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1209
		{
			yyVAL.str = SessionStr
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1213
		{
			yyVAL.str = GlobalStr
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1218
		{
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1219
		{
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1223
		{
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1224
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1225
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1226
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1227
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1228
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1229
		{
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1233
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1237
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1241
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1245
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1251
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1255
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1259
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1264
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1270
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1274
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1280
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1284
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1289
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1298
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1302
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1311
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1327
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1338
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1347
		{
			yyVAL.empty = struct{}{}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1349
		{
			yyVAL.empty = struct{}{}
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1352
		{
			yyVAL.bytes = nil
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1356
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1360
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1365
		{
			yyVAL.bytes = nil
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1369
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1373
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1377
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1381
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1385
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1390
		{
			yyVAL.expr = nil
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1394
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1399
		{
			yyVAL.expr = nil
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1403
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1408
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1412
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1417
		{
			yyVAL.bytes = nil
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1421
		{
			yyVAL.bytes = nil
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1427
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1434
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1440
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1444
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1449
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1453
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1457
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1461
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1465
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1469
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1475
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1480
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1485
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1491
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1502
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1508
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1521
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1526
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1531
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1536
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1542
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1547
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1552
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1557
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1562
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1567
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1572
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1577
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1582
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1591
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1601
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1606
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1611
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1618
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1625
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1633
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1638
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1643
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1648
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1654
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1660
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1667
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1674
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1680
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1686
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1690
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1694
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1698
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1702
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1708
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1712
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1716
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1720
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1724
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1728
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1732
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1736
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1740
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1744
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1748
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1754
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1760
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1766
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1772
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1776
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1781
		{
			yyVAL.sequence = &Sequence{}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1785
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1790
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1795
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1800
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1805
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1810
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1815
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1820
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1825
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1830
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1835
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1840
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 241:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1845
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1852
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1856
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1860
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1864
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1868
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1872
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1877
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1881
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1886
		{
			yyVAL.bytes = nil
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1895
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1900
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1987
		{
			yyVAL.str = ""
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1991
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2035
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2053
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2057
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2061
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2065
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2069
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2073
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2077
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2081
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2085
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2089
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2093
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2097
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2101
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2105
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2109
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2113
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2117
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2121
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 306:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2126
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2131
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2135
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2141
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2145
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2149
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2153
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2157
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2161
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2165
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2169
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2173
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2179
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2184
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2189
		{
			yyVAL.optVal = nil
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2193
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2198
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 323:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2202
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2210
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2214
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2220
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2228
		{
			yyVAL.optVal = nil
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2232
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2236
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2245
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2249
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2253
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2258
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2262
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2267
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2271
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2276
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2280
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2284
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2289
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2293
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2297
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2302
		{
			yyVAL.str = ""
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2306
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2310
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2316
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2321
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2325
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2329
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2339
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2345
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2349
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2355
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2359
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2364
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2368
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2372
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2376
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2380
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2384
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2388
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2392
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2396
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2400
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2404
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2408
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2419
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2423
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2429
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2433
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2439
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2443
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2449
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2453
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2459
		{
			yyVAL.indexPartition = nil
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2463
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2467
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2473
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2477
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2481
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2485
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2489
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2493
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2497
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2501
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2505
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2509
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2513
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2517
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2523
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2527
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2533
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2538
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2544
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2548
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2554
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2559
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2563
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2573
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2578
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2585
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 404:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2592
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 405:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2599
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 406:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2608
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 407:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2619
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2630
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2634
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2638
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2642
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 412:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2648
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 413:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2658
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 414:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2669
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 415:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2680
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 416:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2691
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2700
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2709
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2713
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2717
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2723
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2727
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2731
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2735
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2739
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2743
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2749
		{
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2750
		{
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2754
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2758
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2763
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2770
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2774
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2781
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2791
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2800
		{
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2801
		{
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2805
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2809
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2813
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2819
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2823
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2827
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2832
		{
			setAllowComments(yylex, true)
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2836
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2842
		{
			yyVAL.bytes2 = nil
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2846
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.str = UnionStr
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2856
		{
			yyVAL.str = UnionAllStr
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2860
		{
			yyVAL.str = UnionDistinctStr
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2865
		{
			yyVAL.str = ""
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2869
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2873
		{
			yyVAL.str = SQLCacheStr
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2878
		{
			yyVAL.str = ""
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2882
		{
			yyVAL.str = DistinctStr
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2887
		{
			yyVAL.str = ""
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2891
		{
			yyVAL.str = StraightJoinHint
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2896
		{
			yyVAL.selectExprs = nil
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2900
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2906
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2910
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2916
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2920
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2924
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2928
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2933
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2937
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2941
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2948
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2953
		{
			yyVAL.overExpr = nil
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2965
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 478:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2969
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2974
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2978
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2984
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2988
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2998
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3002
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3006
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3011
		{
			yyVAL.strs = []string{}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3015
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3021
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3025
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3031
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3035
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3039
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3043
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3047
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3051
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3055
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3059
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3065
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 501:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3069
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3075
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3080
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3084
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3090
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3094
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3107
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3111
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3115
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3119
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3125
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3127
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3131
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3133
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3137
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3139
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3142
		{
			yyVAL.empty = struct{}{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3144
		{
			yyVAL.empty = struct{}{}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3147
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3151
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3162
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3168
		{
			yyVAL.str = JoinStr
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3172
		{
			yyVAL.str = JoinStr
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3176
		{
			yyVAL.str = JoinStr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3182
		{
			yyVAL.str = StraightJoinStr
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3188
		{
			yyVAL.str = LeftJoinStr
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3192
		{
			yyVAL.str = LeftJoinStr
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3196
		{
			yyVAL.str = RightJoinStr
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3200
		{
			yyVAL.str = RightJoinStr
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3206
		{
			yyVAL.str = NaturalJoinStr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3210
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3220
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3224
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3230
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3234
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3239
		{
			yyVAL.indexHints = nil
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3243
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3247
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3251
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3256
		{
			yyVAL.expr = nil
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3260
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3265
		{
			yyVAL.columns = nil
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3269
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3275
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3279
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3283
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3287
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3291
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3295
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3299
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3305
		{
			yyVAL.str = ""
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3309
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3315
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3319
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3325
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3329
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3333
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3337
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3341
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3345
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3349
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 564:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3353
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3357
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3361
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3365
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 568:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3369
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3373
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3378
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3382
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3386
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3392
		{
			yyVAL.str = IsNullStr
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3396
		{
			yyVAL.str = IsNotNullStr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3400
		{
			yyVAL.str = IsTrueStr
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3404
		{
			yyVAL.str = IsNotTrueStr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3408
		{
			yyVAL.str = IsFalseStr
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3412
		{
			yyVAL.str = IsNotFalseStr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3418
		{
			yyVAL.str = EqualStr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3422
		{
			yyVAL.str = LessThanStr
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3426
		{
			yyVAL.str = GreaterThanStr
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3430
		{
			yyVAL.str = LessEqualStr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3434
		{
			yyVAL.str = GreaterEqualStr
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3438
		{
			yyVAL.str = NotEqualStr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3442
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3446
		{
			yyVAL.str = PosixRegexStr
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3450
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3454
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3458
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.expr = nil
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3473
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3477
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3481
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3487
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3493
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3497
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3503
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3507
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3511
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3515
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3519
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3523
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3527
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3531
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3535
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3539
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3543
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3547
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3551
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3555
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3559
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3563
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3567
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3571
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3575
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3579
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3583
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3587
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 620:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3591
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3595
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3599
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3603
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3611
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3625
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3629
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3633
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3641
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3649
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3657
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3661
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3671
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 637:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3675
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3679
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3683
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 640:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3687
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 641:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3691
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3695
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3705
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3709
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 645:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3713
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 646:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 647:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 648:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3726
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 649:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3730
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 650:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3734
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 651:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3738
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 652:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3742
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 653:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3746
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 654:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3750
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 655:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3754
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 656:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3758
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 657:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3762
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 658:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3766
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 659:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3770
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3774
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3778
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3783
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3791
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3795
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3806
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3810
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3814
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3818
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3822
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3827
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3837
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3842
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3846
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3860
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3864
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3878
		{
			yyVAL.str = ""
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3882
		{
			yyVAL.str = BooleanModeStr
		}
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3886
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 685:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3890
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3894
		{
			yyVAL.str = QueryExpansionStr
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3900
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3904
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3910
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3914
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3918
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3922
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3926
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3930
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3936
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3940
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3944
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3948
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3952
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3956
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3960
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3964
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3968
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3972
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3976
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3980
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3984
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3988
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3992
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3996
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4000
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4004
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4008
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4012
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4016
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4020
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4024
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4028
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4032
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4036
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4042
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4046
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4050
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4054
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4058
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4062
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4066
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4070
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4075
		{
			yyVAL.expr = nil
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4079
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4084
		{
			yyVAL.str = string("")
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4088
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4094
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4098
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4109
		{
			yyVAL.empty = struct{}{}
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4111
		{
			yyVAL.empty = struct{}{}
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4114
		{
			yyVAL.expr = nil
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4118
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4124
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4128
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 742:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4132
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4138
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4144
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4148
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4153
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4158
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4162
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4166
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4170
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4174
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4178
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4182
		{
			yyVAL.expr = &NullVal{}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4188
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4192
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.exprs = nil
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4206
		{
			yyVAL.expr = nil
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4210
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4216
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4220
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4226
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 763:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4231
		{
			yyVAL.orderBy = nil
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4235
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4241
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4245
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4251
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4256
		{
			yyVAL.str = AscScr
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4260
		{
			yyVAL.str = AscScr
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4264
		{
			yyVAL.str = DescScr
		}
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4269
		{
			yyVAL.limit = nil
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4273
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4277
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 774:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4281
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4286
		{
			yyVAL.str = ""
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4290
		{
			yyVAL.str = ForUpdateStr
		}
	case 777:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4294
		{
			yyVAL.str = ShareModeStr
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4307
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4311
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4315
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 781:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4320
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 782:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4324
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 783:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4328
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4335
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4339
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4343
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 787:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4347
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4352
		{
			yyVAL.updateExprs = nil
		}
	case 789:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4356
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4362
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4366
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4372
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4376
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4382
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4388
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4398
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4402
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4408
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4414
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4418
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4424
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4428
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4432
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 804:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4437
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4441
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4447
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4453
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4460
		{
			yyVAL.bytes = []byte("charset")
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4467
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4471
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4475
		{
			yyVAL.expr = &Default{}
		}
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4480
		{
			yyVAL.empty = struct{}{}
		}
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4482
		{
			yyVAL.empty = struct{}{}
		}
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4485
		{
			yyVAL.str = ""
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4487
		{
			yyVAL.str = IgnoreStr
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4491
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4498
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4502
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4506
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4512
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4517
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4524
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4530
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4534
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4538
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4544
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4548
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4552
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4558
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4562
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 835:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4569
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4576
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4580
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4587
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4593
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4597
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4768
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4777
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
