// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex any, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex any, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex any, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex any) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex any) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex any) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	statements               []Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
	handlerCondition         HandlerCondition
	handlerConditions        []HandlerCondition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const GRANT = 57457
const REVOKE = 57458
const SCHEMA = 57459
const TABLE = 57460
const INDEX = 57461
const MATERIALIZED = 57462
const VIEW = 57463
const TO = 57464
const IGNORE = 57465
const IF = 57466
const PRIMARY = 57467
const COLUMN = 57468
const CONSTRAINT = 57469
const REFERENCES = 57470
const SPATIAL = 57471
const FULLTEXT = 57472
const FOREIGN = 57473
const KEY_BLOCK_SIZE = 57474
const POLICY = 57475
const WHILE = 57476
const UNIQUE = 57477
const KEY = 57478
const SHOW = 57479
const DESCRIBE = 57480
const EXPLAIN = 57481
const DATE = 57482
const ESCAPE = 57483
const REPAIR = 57484
const OPTIMIZE = 57485
const TRUNCATE = 57486
const EXEC = 57487
const EXECUTE = 57488
const MAXVALUE = 57489
const PARTITION = 57490
const REORGANIZE = 57491
const LESS = 57492
const THAN = 57493
const PROCEDURE = 57494
const TRIGGER = 57495
const TYPE = 57496
const RETURN = 57497
const STATUS = 57498
const VARIABLES = 57499
const RESTRICT = 57500
const CASCADE = 57501
const NO = 57502
const ACTION = 57503
const PERMISSIVE = 57504
const RESTRICTIVE = 57505
const PUBLIC = 57506
const CURRENT_USER = 57507
const SESSION_USER = 57508
const PAD_INDEX = 57509
const FILLFACTOR = 57510
const IGNORE_DUP_KEY = 57511
const STATISTICS_NORECOMPUTE = 57512
const STATISTICS_INCREMENTAL = 57513
const ALLOW_ROW_LOCKS = 57514
const ALLOW_PAGE_LOCKS = 57515
const DISTANCE = 57516
const M = 57517
const EUCLIDEAN = 57518
const COSINE = 57519
const BEFORE = 57520
const AFTER = 57521
const EACH = 57522
const ROW = 57523
const SCROLL = 57524
const CURSOR = 57525
const OPEN = 57526
const CLOSE = 57527
const FETCH = 57528
const PRIOR = 57529
const FIRST = 57530
const LAST = 57531
const DEALLOCATE = 57532
const INSTEAD = 57533
const OF = 57534
const OUTPUT = 57535
const HANDLER = 57536
const CONTINUE = 57537
const EXIT = 57538
const SQLEXCEPTION = 57539
const SQLWARNING = 57540
const SQLSTATE = 57541
const FOUND = 57542
const DEFERRABLE = 57543
const INITIALLY = 57544
const IMMEDIATE = 57545
const DEFERRED = 57546
const CONCURRENTLY = 57547
const ASYNC = 57548
const SQL = 57549
const SECURITY = 57550
const BEGIN = 57551
const START = 57552
const TRANSACTION = 57553
const COMMIT = 57554
const ROLLBACK = 57555
const BIT = 57556
const TINYINT = 57557
const SMALLINT = 57558
const SMALLSERIAL = 57559
const MEDIUMINT = 57560
const INT = 57561
const INTEGER = 57562
const SERIAL = 57563
const BIGINT = 57564
const BIGSERIAL = 57565
const INTNUM = 57566
const REAL = 57567
const DOUBLE = 57568
const PRECISION = 57569
const FLOAT_TYPE = 57570
const DECIMAL = 57571
const NUMERIC = 57572
const SMALLMONEY = 57573
const MONEY = 57574
const TIME = 57575
const TIMESTAMP = 57576
const DATETIME = 57577
const YEAR = 57578
const DATETIMEOFFSET = 57579
const DATETIME2 = 57580
const SMALLDATETIME = 57581
const CHAR = 57582
const VARCHAR = 57583
const VARYING = 57584
const BOOL = 57585
const CHARACTER = 57586
const VARBINARY = 57587
const NCHAR = 57588
const NVARCHAR = 57589
const NTEXT = 57590
const UUID = 57591
const TEXT = 57592
const TINYTEXT = 57593
const MEDIUMTEXT = 57594
const LONGTEXT = 57595
const CITEXT = 57596
const BLOB = 57597
const TINYBLOB = 57598
const MEDIUMBLOB = 57599
const LONGBLOB = 57600
const JSON = 57601
const JSONB = 57602
const ENUM = 57603
const GEOMETRY = 57604
const POINT = 57605
const LINESTRING = 57606
const POLYGON = 57607
const GEOMETRYCOLLECTION = 57608
const MULTIPOINT = 57609
const MULTILINESTRING = 57610
const MULTIPOLYGON = 57611
const VECTOR = 57612
const VARIADIC = 57613
const ARRAY = 57614
const NOW = 57615
const GETDATE = 57616
const BPCHAR = 57617
const TEXT_PATTERN_OPS = 57618
const NULLX = 57619
const AUTO_INCREMENT = 57620
const APPROXNUM = 57621
const SIGNED = 57622
const UNSIGNED = 57623
const ZEROFILL = 57624
const ZONE = 57625
const AUTOINCREMENT = 57626
const DATABASES = 57627
const TABLES = 57628
const VSCHEMA_TABLES = 57629
const EXTENDED = 57630
const FULL = 57631
const PROCESSLIST = 57632
const NAMES = 57633
const CHARSET = 57634
const GLOBAL = 57635
const SESSION = 57636
const ISOLATION = 57637
const LEVEL = 57638
const READ = 57639
const WRITE = 57640
const ONLY = 57641
const REPEATABLE = 57642
const COMMITTED = 57643
const UNCOMMITTED = 57644
const SERIALIZABLE = 57645
const NEW = 57646
const CONCAT_NULL_YIELDS_NULL = 57647
const CURSOR_CLOSE_ON_COMMIT = 57648
const QUOTED_IDENTIFIER = 57649
const ARITHABORT = 57650
const FMTONLY = 57651
const NOCOUNT = 57652
const NOEXEC = 57653
const NUMERIC_ROUNDABORT = 57654
const ANSI_DEFAULTS = 57655
const ANSI_NULL_DFLT_OFF = 57656
const ANSI_NULL_DFLT_ON = 57657
const ANSI_NULLS = 57658
const ANSI_PADDING = 57659
const ANSI_WARNINGS = 57660
const FORCEPLAN = 57661
const SHOWPLAN_ALL = 57662
const SHOWPLAN_TEXT = 57663
const SHOWPLAN_XML = 57664
const IMPLICIT_TRANSACTIONS = 57665
const REMOTE_PROC_TRANSACTIONS = 57666
const XACT_ABORT = 57667
const CURRENT_TIMESTAMP = 57668
const DATABASE = 57669
const CURRENT_DATE = 57670
const CURRENT_TIME = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const UTC_DATE = 57674
const UTC_TIME = 57675
const UTC_TIMESTAMP = 57676
const REPLACE = 57677
const CONVERT = 57678
const CAST = 57679
const SUBSTR = 57680
const SUBSTRING = 57681
const GROUP_CONCAT = 57682
const SEPARATOR = 57683
const INHERIT = 57684
const LEAD = 57685
const LAG = 57686
const MATCH = 57687
const AGAINST = 57688
const BOOLEAN = 57689
const LANGUAGE = 57690
const WITH = 57691
const WITHOUT = 57692
const PARSER = 57693
const QUERY = 57694
const EXPANSION = 57695
const UNUSED = 57696
const VIRTUAL = 57697
const STORED = 57698
const GENERATED = 57699
const ALWAYS = 57700
const IDENTITY = 57701
const SEQUENCE = 57702
const INCREMENT = 57703
const MINVALUE = 57704
const CACHE = 57705
const CYCLE = 57706
const OWNED = 57707
const NONE = 57708
const CLUSTERED = 57709
const NONCLUSTERED = 57710
const REPLICATION = 57711
const COLUMNSTORE = 57712
const INCLUDE = 57713
const HOLDLOCK = 57714
const NOLOCK = 57715
const NOWAIT = 57716
const PAGLOCK = 57717
const ROWLOCK = 57718
const TABLOCK = 57719
const UPDLOCK = 57720
const READUNCOMMITTED = 57721
const DEFINER = 57722
const INVOKER = 57723
const TYPECAST = 57724
const CHECK = 57725
const OVER = 57726

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"GRANT",
	"REVOKE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"HANDLER",
	"CONTINUE",
	"EXIT",
	"SQLEXCEPTION",
	"SQLWARNING",
	"SQLSTATE",
	"FOUND",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"ASYNC",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 8,
	136, 526,
	-2, 250,
	-1, 64,
	123, 923,
	-2, 917,
	-1, 65,
	123, 924,
	-2, 837,
	-1, 312,
	123, 927,
	-2, 921,
	-1, 313,
	123, 924,
	-2, 922,
	-1, 479,
	61, 495,
	-2, 492,
	-1, 509,
	123, 925,
	-2, 348,
	-1, 643,
	123, 925,
	-2, 348,
	-1, 664,
	289, 934,
	-2, 825,
	-1, 718,
	289, 934,
	-2, 566,
	-1, 754,
	5, 52,
	-2, 20,
	-1, 760,
	5, 52,
	-2, 22,
	-1, 906,
	289, 934,
	-2, 566,
	-1, 1077,
	289, 934,
	-2, 430,
	-1, 1145,
	289, 934,
	-2, 566,
	-1, 1209,
	289, 934,
	-2, 825,
	-1, 1327,
	5, 53,
	-2, 699,
	-1, 1409,
	5, 52,
	-2, 21,
	-1, 1425,
	200, 80,
	-2, 622,
	-1, 1463,
	289, 934,
	-2, 230,
	-1, 1464,
	289, 934,
	-2, 230,
	-1, 1667,
	90, 919,
	-2, 907,
	-1, 1766,
	57, 66,
	59, 66,
	-2, 68,
	-1, 1951,
	5, 52,
	-2, 876,
	-1, 1976,
	5, 52,
	-2, 75,
	-1, 2021,
	59, 1068,
	60, 1068,
	-2, 552,
	-1, 2063,
	5, 53,
	-2, 877,
	-1, 2097,
	5, 52,
	-2, 879,
	-1, 2119,
	5, 53,
	-2, 880,
}

const yyPrivate = 57344

const yyLast = 12170

var yyAct = [...]int16{
	645, 1870, 1969, 2072, 1888, 626, 655, 1160, 2014, 2020,
	34, 34, 2015, 467, 767, 1788, 2011, 44, 1896, 33,
	958, 1938, 1974, 60, 61, 1871, 1627, 73, 1801, 62,
	36, 1961, 1786, 1850, 853, 1800, 1661, 1776, 1176, 1432,
	1646, 88, 1182, 1645, 1635, 99, 99, 99, 99, 1197,
	1658, 93, 1654, 543, 1863, 170, 174, 175, 1196, 746,
	1183, 1427, 1238, 701, 1403, 985, 1398, 1642, 1664, 471,
	1679, 973, 1536, 794, 279, 1076, 1052, 1320, 629, 707,
	1329, 38, 1545, 196, 1107, 1016, 201, 202, 1000, 880,
	1119, 200, 44, 281, 283, 1029, 616, 1179, 249, 624,
	95, 896, 601, 299, 264, 180, 480, 146, 146, 146,
	146, 962, 1104, 625, 474, 213, 300, 506, 515, 852,
	508, 232, 208, 1194, 1566, 75, 532, 1070, 14, 609,
	1380, 1561, 1153, 251, 930, 1390, 247, 1753, 1138, 610,
	35, 308, 822, 637, 708, 832, 745, 1379, 832, 295,
	296, 933, 1154, 888, 77, 1276, 821, 820, 830, 831,
	823, 824, 825, 826, 827, 828, 829, 822, 481, 482,
	832, 1241, 915, 288, 289, 2073, 2074, 2075, 2076, 2077,
	2078, 2079, 2080, 176, 1240, 178, 800, 478, 309, 99,
	823, 824, 825, 826, 827, 828, 829, 822, 190, 1791,
	832, 312, 692, 448, 78, 79, 689, 462, 309, 504,
	1589, 1590, 1239, 2120, 1731, 2052, 150, 150, 150, 150,
	475, 266, 267, 268, 269, 1126, 1127, 2117, 1651, 149,
	149, 149, 149, 1999, 494, 70, 702, 67, 1285, 210,
	446, 825, 826, 827, 828, 829, 822, 250, 526, 832,
	1970, 146, 2110, 68, 555, 556, 307, 147, 147, 147,
	147, 1624, 479, 1284, 757, 1323, 1211, 1200, 1199, 2051,
	1580, 1309, 1717, 80, 523, 2044, 465, 1998, 1201, 229,
	757, 703, 1987, 2045, 2046, 1986, 1906, 563, 1988, 1907,
	1908, 1202, 757, 1700, 1211, 1200, 1199, 1802, 945, 1803,
	944, 534, 253, 867, 192, 554, 1201, 579, 551, 1573,
	195, 498, 198, 199, 265, 1116, 203, 952, 1280, 1202,
	547, 548, 549, 550, 50, 257, 520, 1564, 522, 521,
	737, 447, 484, 736, 282, 70, 1344, 67, 1342, 1789,
	177, 1180, 255, 1916, 1413, 51, 2086, 52, 1919, 171,
	57, 1992, 1991, 1920, 35, 1983, 560, 1657, 577, 535,
	150, 517, 304, 538, 810, 541, 542, 1794, 1917, 1820,
	1933, 1412, 35, 149, 1915, 821, 820, 830, 831, 823,
	824, 825, 826, 827, 828, 829, 822, 611, 1816, 832,
	1017, 519, 1656, 1175, 809, 808, 808, 809, 808, 1195,
	287, 147, 1584, 1546, 1547, 293, 1007, 297, 298, 1207,
	226, 578, 810, 810, 305, 810, 763, 764, 1591, 449,
	1213, 1214, 1864, 452, 50, 833, 454, 1195, 833, 1730,
	1209, 1732, 604, 460, 461, 35, 58, 1207, 481, 482,
	777, 1826, 2094, 1530, 802, 51, 980, 52, 1213, 1214,
	833, 582, 801, 1714, 34, 497, 34, 778, 1209, 1203,
	1204, 1206, 1551, 181, 309, 1205, 488, 496, 959, 1565,
	491, 602, 500, 584, 53, 586, 476, 811, 833, 1352,
	833, 1277, 1278, 489, 1417, 608, 1585, 1203, 1204, 1206,
	916, 1279, 691, 1205, 812, 830, 831, 823, 824, 825,
	826, 827, 828, 829, 822, 694, 1819, 832, 526, 265,
	481, 482, 789, 812, 562, 172, 173, 35, 2111, 567,
	568, 569, 1595, 1428, 1429, 811, 811, 603, 811, 833,
	600, 2007, 598, 809, 808, 1597, 1458, 1723, 982, 821,
	820, 830, 831, 823, 824, 825, 826, 827, 828, 829,
	822, 810, 791, 832, 820, 830, 831, 823, 824, 825,
	826, 827, 828, 829, 822, 748, 1655, 832, 503, 209,
	1860, 48, 49, 1285, 53, 593, 76, 791, 768, 557,
	553, 309, 773, 612, 34, 1592, 34, 599, 1997, 722,
	1546, 1547, 725, 779, 711, 728, 729, 688, 309, 39,
	1616, 35, 228, 774, 35, 775, 690, 966, 1897, 769,
	1212, 812, 583, 780, 695, 602, 693, 227, 1735, 229,
	254, 517, 453, 260, 1900, 704, 262, 35, 706, 571,
	809, 808, 477, 59, 485, 486, 1934, 1791, 1212, 182,
	183, 1615, 724, 272, 273, 274, 275, 276, 810, 772,
	604, 519, 184, 64, 1973, 67, 797, 84, 86, 278,
	2087, 809, 808, 1972, 811, 85, 784, 1373, 1971, 833,
	56, 48, 49, 70, 806, 67, 487, 55, 1139, 810,
	799, 89, 770, 54, 40, 771, 809, 808, 1861, 87,
	754, 72, 760, 766, 755, 595, 755, 759, 768, 847,
	1459, 1460, 1461, 459, 810, 1889, 1891, 74, 747, 99,
	2066, 781, 913, 1936, 35, 731, 1141, 803, 856, 857,
	851, 1805, 309, 868, 244, 1601, 1142, 871, 1705, 812,
	247, 248, 809, 808, 870, 1614, 1593, 1594, 1596, 1598,
	1599, 901, 50, 748, 949, 603, 458, 755, 809, 808,
	810, 228, 748, 768, 602, 235, 1003, 1901, 1899, 1898,
	925, 811, 50, 51, 911, 52, 810, 956, 229, 537,
	242, 146, 230, 721, 732, 809, 808, 979, 940, 902,
	231, 981, 580, 51, 189, 52, 187, 833, 457, 602,
	939, 1890, 811, 810, 749, 750, 909, 702, 795, 796,
	798, 456, 691, 1989, 765, 258, 602, 545, 544, 932,
	937, 938, 43, 957, 623, 1959, 914, 811, 1804, 517,
	1299, 1725, 1030, 920, 1298, 782, 890, 891, 892, 893,
	894, 895, 1297, 833, 484, 809, 808, 70, 941, 67,
	943, 238, 703, 233, 243, 1036, 1760, 833, 1001, 1002,
	201, 240, 239, 810, 1296, 1058, 1295, 1067, 1067, 1034,
	1035, 1033, 1294, 811, 1004, 1014, 1069, 1293, 1292, 1008,
	702, 309, 309, 592, 1291, 976, 1290, 227, 964, 811,
	150, 594, 755, 201, 312, 1334, 747, 1333, 1109, 948,
	1288, 999, 53, 149, 1031, 747, 901, 1761, 955, 1108,
	809, 808, 1361, 1582, 211, 1177, 811, 809, 808, 1011,
	1108, 34, 53, 1009, 473, 703, 1010, 261, 810, 193,
	263, 147, 191, 1005, 186, 810, 50, 1310, 1311, 1312,
	1122, 588, 1006, 472, 902, 1056, 1140, 1090, 473, 1071,
	1072, 589, 1021, 1023, 1024, 11, 1408, 51, 473, 52,
	1022, 851, 528, 527, 748, 748, 1065, 1068, 473, 1537,
	484, 1537, 1671, 1073, 1074, 493, 811, 34, 1053, 1103,
	1054, 1032, 755, 950, 1064, 1178, 709, 710, 755, 1217,
	1538, 1130, 1538, 755, 1729, 1548, 1174, 928, 965, 48,
	49, 1539, 536, 1809, 236, 1146, 1117, 1147, 1120, 1121,
	237, 8, 12, 13, 1535, 536, 947, 9, 10, 48,
	49, 927, 946, 602, 1712, 812, 536, 540, 918, 492,
	1982, 539, 1134, 35, 1132, 1808, 561, 2043, 1101, 1102,
	559, 811, 558, 713, 715, 531, 1836, 483, 811, 484,
	1030, 1118, 1981, 35, 869, 1141, 1083, 1330, 869, 1282,
	1289, 942, 590, 587, 552, 499, 974, 812, 812, 1081,
	821, 820, 830, 831, 823, 824, 825, 826, 827, 828,
	829, 822, 1305, 245, 832, 246, 53, 2104, 2103, 1778,
	1781, 1782, 1783, 1779, 1164, 1780, 1784, 1082, 35, 1962,
	1963, 959, 1300, 484, 1772, 1286, 35, 747, 747, 241,
	1155, 1156, 35, 646, 1066, 644, 648, 649, 650, 651,
	290, 1057, 1031, 647, 652, 35, 792, 757, 974, 2102,
	1773, 921, 510, 511, 513, 82, 2089, 2039, 812, 1316,
	516, 514, 524, 525, 1770, 2004, 812, 2065, 812, 1851,
	1140, 82, 2000, 309, 1949, 730, 868, 788, 1923, 1950,
	1773, 812, 748, 602, 788, 1822, 312, 1340, 788, 1821,
	1684, 757, 687, 1211, 1200, 1199, 974, 1742, 512, 484,
	686, 788, 1696, 48, 49, 1201, 1339, 685, 1341, 684,
	1771, 613, 1769, 490, 1405, 82, 1695, 1958, 1202, 1692,
	1691, 1360, 788, 1686, 1604, 1358, 788, 1685, 788, 1605,
	788, 1556, 1425, 1467, 1454, 1455, 1456, 1135, 812, 1463,
	1371, 1071, 1389, 1958, 70, 1419, 67, 1394, 1217, 1217,
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
	1217, 1217, 1217, 1217, 1217, 1217, 602, 602, 1381, 1418,
	1386, 1407, 1531, 1387, 1383, 1406, 1534, 1378, 1393, 755,
	1395, 1384, 1385, 1409, 1396, 747, 1195, 755, 1388, 1465,
	82, 1369, 1376, 50, 34, 602, 1207, 788, 1307, 959,
	1421, 1422, 1423, 696, 1430, 788, 1159, 1213, 1214, 974,
	1158, 974, 1125, 1554, 51, 1391, 52, 1209, 1062, 812,
	788, 1015, 1867, 712, 1769, 1526, 1527, 788, 787, 741,
	740, 718, 719, 720, 734, 735, 734, 733, 518, 523,
	1533, 91, 90, 1135, 833, 1375, 1203, 1204, 1206, 1411,
	2012, 82, 1205, 1958, 1555, 1540, 1541, 1542, 1543, 1544,
	757, 1851, 1773, 1356, 1157, 1552, 1553, 1354, 1150, 1581,
	1215, 1417, 1550, 576, 975, 758, 1149, 758, 1148, 1131,
	951, 929, 1557, 768, 922, 1560, 1090, 919, 738, 727,
	726, 520, 2096, 522, 521, 723, 2061, 1608, 1062, 1568,
	1567, 1570, 757, 1619, 575, 1090, 1574, 576, 576, 1135,
	1773, 1355, 484, 2012, 82, 1353, 804, 1633, 1575, 83,
	81, 309, 82, 82, 846, 848, 849, 850, 854, 1905,
	1797, 1652, 1572, 1617, 1466, 859, 859, 859, 859, 859,
	859, 859, 1135, 53, 1335, 974, 1644, 788, 1672, 917,
	718, 743, 742, 1638, 484, 581, 739, 484, 2034, 2032,
	1995, 872, 873, 874, 875, 876, 877, 878, 879, 1637,
	882, 1636, 884, 885, 886, 887, 889, 889, 889, 889,
	889, 889, 889, 1618, 905, 906, 907, 908, 1680, 1680,
	1837, 807, 1649, 1640, 1670, 1083, 255, 1212, 1962, 1963,
	1626, 1689, 280, 1529, 1528, 1630, 1392, 284, 1081, 1304,
	1303, 1416, 1275, 1603, 1083, 1152, 1609, 1610, 1151, 602,
	602, 1611, 1129, 1012, 978, 1681, 1840, 1081, 1682, 1622,
	954, 953, 70, 910, 67, 805, 1082, 753, 752, 751,
	48, 49, 1764, 717, 1308, 716, 714, 2058, 697, 614,
	564, 505, 501, 718, 470, 1082, 285, 286, 2090, 277,
	271, 270, 259, 758, 1641, 1778, 1781, 1782, 1783, 1779,
	16, 1780, 1784, 1281, 70, 469, 67, 1965, 1687, 1688,
	1336, 1337, 1372, 1338, 744, 596, 566, 565, 292, 291,
	205, 1343, 309, 1345, 1346, 1347, 185, 179, 1348, 1349,
	37, 1350, 1351, 1882, 1880, 1968, 197, 1967, 1883, 1881,
	1879, 1736, 1693, 1694, 70, 1878, 67, 1559, 2050, 859,
	859, 50, 859, 859, 859, 859, 859, 859, 859, 859,
	859, 859, 859, 859, 859, 859, 859, 1701, 1169, 1170,
	1849, 1643, 51, 1793, 52, 99, 1724, 1726, 1727, 1728,
	309, 1721, 1722, 758, 1747, 883, 1762, 1807, 1399, 854,
	772, 1810, 1720, 50, 854, 546, 70, 1884, 67, 1782,
	1783, 700, 1750, 1400, 2059, 1217, 1751, 1812, 1001, 1002,
	602, 1824, 451, 450, 51, 92, 52, 306, 1397, 206,
	1758, 1656, 1785, 1173, 1166, 1813, 1795, 1167, 65, 1767,
	1798, 1811, 1752, 50, 1792, 699, 968, 146, 969, 970,
	971, 1815, 574, 572, 570, 45, 1123, 188, 1105, 1649,
	1894, 967, 1759, 71, 51, 1796, 52, 1683, 1110, 972,
	1739, 167, 168, 169, 762, 1743, 1744, 607, 1161, 1823,
	194, 2057, 1842, 1733, 1145, 1628, 1162, 1629, 1825, 959,
	1416, 2, 2056, 2006, 1391, 50, 301, 302, 303, 961,
	1676, 1675, 1674, 201, 755, 1165, 41, 1673, 1872, 1588,
	1587, 53, 606, 605, 71, 585, 51, 1838, 52, 1839,
	71, 455, 71, 71, 1302, 2112, 71, 1902, 309, 1613,
	45, 1868, 1301, 1638, 1677, 1857, 309, 495, 963, 1768,
	776, 1859, 977, 34, 1719, 1874, 1875, 1873, 1877, 1856,
	1876, 1866, 1885, 53, 1, 1431, 150, 18, 17, 1937,
	294, 1328, 1914, 866, 1903, 1904, 641, 1918, 34, 149,
	1818, 859, 859, 859, 627, 2071, 1558, 1649, 859, 859,
	859, 859, 1649, 1649, 1649, 1649, 1649, 1935, 1977, 1895,
	1913, 1426, 1653, 53, 1424, 1457, 1649, 147, 1549, 1765,
	1766, 530, 234, 1374, 1912, 502, 20, 1698, 48, 49,
	71, 1623, 1410, 761, 1943, 71, 1145, 71, 71, 573,
	1532, 983, 859, 1975, 71, 790, 313, 217, 71, 71,
	1955, 207, 783, 71, 1957, 463, 71, 1064, 1966, 42,
	15, 755, 1287, 71, 71, 53, 468, 218, 216, 215,
	48, 49, 214, 212, 533, 1741, 252, 256, 102, 1606,
	1649, 1746, 104, 103, 1984, 1612, 101, 309, 100, 98,
	96, 97, 94, 1990, 1659, 1806, 1649, 591, 1137, 845,
	201, 2013, 71, 2022, 1975, 1872, 71, 2016, 2003, 201,
	48, 49, 1985, 1666, 1872, 2019, 2023, 1402, 1416, 1755,
	2055, 2005, 1416, 1629, 1359, 2026, 2025, 1106, 628, 1902,
	758, 1628, 1020, 1951, 2029, 640, 1942, 755, 758, 1638,
	1638, 2009, 2010, 1865, 71, 639, 34, 2040, 1869, 71,
	71, 71, 1954, 638, 1956, 2001, 1637, 1948, 1636, 814,
	1648, 1763, 48, 49, 1976, 2049, 1828, 1777, 755, 1775,
	1628, 1774, 1964, 1464, 1960, 1647, 2054, 1716, 1932, 1168,
	2060, 1621, 1208, 768, 2068, 1198, 768, 768, 768, 960,
	2085, 1171, 7, 2008, 1210, 1193, 6, 2070, 5, 2069,
	2081, 2082, 2083, 4, 2084, 1925, 1192, 1844, 1191, 1190,
	1189, 1187, 1188, 1185, 1848, 1186, 2022, 2100, 2016, 1184,
	1163, 756, 2018, 3, 2095, 2099, 755, 2101, 2042, 2023,
	0, 0, 1336, 0, 0, 0, 0, 0, 0, 2108,
	0, 2027, 2092, 2028, 1322, 1697, 1854, 0, 0, 0,
	0, 1416, 0, 2016, 1755, 2113, 0, 0, 2115, 0,
	0, 2116, 0, 201, 2118, 0, 0, 0, 1872, 821,
	820, 830, 831, 823, 824, 825, 826, 827, 828, 829,
	822, 0, 0, 832, 0, 653, 859, 859, 0, 0,
	0, 0, 1738, 0, 1740, 0, 1926, 0, 0, 0,
	1745, 0, 0, 0, 0, 1755, 0, 1710, 0, 66,
	69, 0, 0, 0, 0, 1940, 1941, 0, 859, 859,
	859, 859, 468, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 67, 0, 2097, 47, 0, 0, 755, 0,
	0, 0, 0, 0, 0, 1600, 0, 1629, 812, 0,
	0, 0, 0, 1854, 0, 0, 0, 0, 0, 0,
	35, 69, 46, 0, 926, 0, 71, 69, 2114, 69,
	69, 66, 755, 69, 0, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 1827, 0, 1979, 1650, 0,
	1993, 1994, 0, 821, 820, 830, 831, 823, 824, 825,
	826, 827, 828, 829, 822, 0, 0, 832, 1628, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	64, 0, 67, 71, 71, 71, 0, 0, 1845, 0,
	0, 0, 1846, 1847, 71, 228, 0, 0, 0, 468,
	51, 220, 52, 219, 0, 223, 224, 227, 0, 50,
	0, 221, 229, 0, 0, 71, 468, 69, 0, 47,
	0, 0, 69, 0, 69, 69, 0, 1708, 812, 0,
	51, 69, 52, 314, 0, 314, 69, 0, 0, 0,
	69, 0, 1755, 69, 35, 0, 46, 0, 0, 0,
	69, 69, 0, 0, 0, 0, 1690, 0, 0, 0,
	1416, 0, 1059, 1060, 1061, 1063, 812, 0, 0, 50,
	1921, 1922, 0, 821, 820, 830, 831, 823, 824, 825,
	826, 827, 828, 829, 822, 0, 859, 832, 0, 69,
	51, 0, 52, 529, 1416, 0, 1111, 1112, 1113, 1114,
	1854, 1115, 0, 0, 0, 1715, 0, 0, 0, 0,
	1629, 821, 820, 830, 831, 823, 824, 825, 826, 827,
	828, 829, 822, 833, 1124, 832, 70, 0, 67, 53,
	0, 69, 0, 50, 0, 0, 69, 69, 69, 1629,
	468, 0, 1133, 0, 1136, 204, 225, 0, 0, 1143,
	1144, 0, 0, 0, 51, 0, 52, 0, 0, 53,
	0, 71, 0, 71, 0, 64, 0, 67, 0, 0,
	71, 0, 0, 0, 816, 1787, 1172, 819, 71, 0,
	0, 0, 0, 834, 835, 836, 837, 838, 839, 840,
	0, 817, 818, 815, 841, 842, 843, 844, 821, 820,
	830, 831, 823, 824, 825, 826, 827, 828, 829, 822,
	0, 0, 832, 0, 0, 50, 0, 0, 0, 53,
	0, 0, 0, 0, 0, 1306, 48, 49, 986, 0,
	859, 0, 998, 859, 0, 859, 51, 859, 52, 859,
	859, 0, 988, 0, 0, 63, 0, 833, 0, 0,
	0, 0, 0, 0, 50, 0, 48, 49, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	1325, 0, 0, 0, 0, 51, 1327, 52, 0, 0,
	0, 0, 0, 53, 0, 1331, 1332, 0, 0, 313,
	468, 0, 0, 1650, 0, 0, 0, 0, 1650, 1650,
	1650, 1650, 1650, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1787, 0, 1892, 1357, 48, 49, 0, 0,
	987, 1363, 0, 0, 0, 0, 0, 0, 0, 1365,
	1366, 0, 1367, 1368, 821, 820, 830, 831, 823, 824,
	825, 826, 827, 828, 829, 822, 1377, 0, 832, 0,
	0, 0, 0, 529, 0, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 0, 53, 0, 833, 0, 0,
	0, 0, 71, 71, 0, 0, 1650, 0, 0, 0,
	48, 49, 0, 0, 0, 0, 0, 1321, 1952, 1953,
	0, 0, 1650, 0, 0, 0, 0, 1237, 0, 0,
	0, 0, 0, 32, 53, 833, 0, 0, 0, 0,
	529, 69, 69, 0, 0, 0, 0, 0, 0, 758,
	0, 69, 615, 0, 0, 0, 0, 821, 820, 830,
	831, 823, 824, 825, 826, 827, 828, 829, 822, 0,
	698, 832, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 26, 27,
	0, 21, 48, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 22, 2017, 30, 758, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 833, 0, 23, 24, 2035, 2036, 2037, 0,
	0, 48, 49, 0, 0, 0, 0, 705, 0, 0,
	64, 0, 509, 510, 511, 513, 0, 0, 0, 0,
	0, 516, 514, 524, 525, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	0, 0, 0, 793, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 813, 0, 0, 512,
	0, 313, 855, 0, 936, 936, 936, 0, 0, 757,
	71, 1211, 1200, 1199, 0, 0, 0, 0, 0, 0,
	0, 0, 1586, 1201, 0, 0, 2017, 0, 529, 2098,
	69, 0, 0, 0, 0, 0, 1202, 529, 1602, 50,
	0, 0, 0, 881, 0, 69, 0, 0, 0, 0,
	0, 19, 0, 0, 0, 0, 0, 0, 1620, 0,
	51, 2017, 52, 758, 0, 0, 0, 0, 833, 0,
	0, 0, 0, 0, 71, 912, 1237, 1237, 1237, 1237,
	1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
	1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
	1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
	1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
	1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
	1237, 1237, 1237, 1237, 0, 66, 25, 0, 0, 0,
	0, 0, 0, 757, 1195, 1211, 1200, 1199, 28, 29,
	0, 31, 0, 0, 1207, 0, 314, 1201, 936, 936,
	0, 833, 936, 936, 936, 1213, 1214, 0, 66, 0,
	1202, 0, 0, 0, 0, 1209, 0, 0, 0, 518,
	523, 0, 0, 1013, 0, 0, 0, 1018, 1019, 53,
	0, 936, 936, 936, 936, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1203, 1204, 1206, 0, 0, 0,
	1205, 0, 0, 0, 0, 0, 0, 936, 0, 0,
	1702, 0, 1703, 1704, 0, 1756, 0, 1706, 1707, 1709,
	1711, 1713, 520, 855, 522, 521, 0, 0, 855, 529,
	529, 0, 0, 0, 0, 0, 0, 0, 0, 528,
	527, 0, 1734, 1075, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 757, 0, 1211, 1200,
	1199, 0, 0, 0, 1216, 0, 0, 0, 1195, 0,
	1201, 71, 71, 0, 0, 0, 48, 49, 1207, 468,
	0, 0, 0, 1202, 1128, 0, 0, 0, 0, 1213,
	1214, 0, 0, 0, 0, 0, 0, 0, 0, 1209,
	0, 0, 507, 0, 0, 64, 0, 509, 510, 511,
	513, 0, 0, 0, 0, 0, 516, 514, 524, 525,
	0, 0, 0, 1814, 0, 0, 0, 0, 1203, 1204,
	1206, 0, 0, 0, 1205, 0, 0, 0, 1632, 0,
	0, 0, 0, 0, 0, 1212, 0, 0, 0, 0,
	0, 0, 0, 1417, 512, 0, 0, 0, 1835, 0,
	0, 0, 757, 0, 1211, 1200, 1199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1201, 0, 1843, 0,
	936, 0, 0, 0, 0, 0, 1364, 0, 0, 1202,
	0, 1195, 0, 0, 50, 2048, 0, 0, 0, 0,
	0, 1207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 936, 1213, 1214, 0, 51, 0, 52, 314, 0,
	0, 936, 1209, 0, 0, 0, 0, 529, 1887, 0,
	0, 1326, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1862, 0, 0, 0, 0, 0,
	468, 1203, 1204, 1206, 0, 0, 0, 1205, 0, 0,
	0, 0, 0, 0, 0, 0, 1924, 0, 0, 0,
	0, 1927, 1928, 1929, 1930, 1931, 1417, 1362, 0, 1212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	71, 69, 1370, 0, 0, 0, 0, 1195, 0, 71,
	71, 0, 0, 0, 0, 0, 0, 1207, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1213, 1214,
	0, 0, 0, 0, 0, 0, 0, 0, 1209, 1415,
	1401, 1404, 0, 1237, 518, 523, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 1414, 0, 0, 0,
	858, 860, 861, 862, 863, 864, 865, 1203, 1204, 1206,
	0, 0, 0, 1205, 1420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1996, 0, 1462, 0, 881, 2002,
	0, 0, 71, 0, 0, 0, 0, 520, 0, 522,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1212, 0, 528, 527, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 2038, 71, 71, 0,
	0, 0, 71, 71, 71, 71, 71, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 71, 0, 0, 0,
	71, 48, 49, 986, 0, 2053, 468, 998, 0, 0,
	0, 0, 1631, 0, 468, 0, 0, 988, 0, 2062,
	2063, 2064, 0, 0, 0, 0, 0, 2067, 757, 0,
	1211, 1200, 1199, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 1201, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1202, 0, 0, 69, 69,
	71, 0, 0, 0, 1571, 0, 0, 0, 1212, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 2105, 2106, 2107, 0, 0, 0, 0,
	1583, 0, 0, 0, 1025, 987, 0, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 0, 0, 0, 0, 2119, 0, 1861, 0,
	1607, 0, 1269, 0, 0, 0, 0, 0, 0, 0,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 0,
	1625, 0, 0, 0, 0, 468, 0, 0, 0, 1232,
	1231, 0, 35, 0, 1230, 0, 1233, 1234, 1235, 1236,
	0, 2024, 0, 1195, 1252, 0, 0, 0, 0, 0,
	1255, 1254, 1253, 1207, 0, 1259, 1260, 1261, 1262, 1264,
	1263, 1227, 1228, 1229, 1213, 1214, 0, 0, 1257, 1258,
	0, 1256, 855, 855, 1209, 0, 1224, 1223, 0, 0,
	1218, 1219, 1220, 1221, 0, 1222, 0, 1225, 0, 0,
	0, 0, 0, 0, 1226, 0, 0, 0, 0, 0,
	0, 69, 0, 1203, 1204, 1206, 0, 0, 0, 1205,
	0, 0, 0, 1271, 0, 1270, 1274, 0, 0, 0,
	0, 50, 0, 1272, 0, 0, 0, 71, 1417, 0,
	0, 0, 0, 0, 0, 0, 0, 936, 0, 0,
	0, 0, 51, 0, 52, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2024, 0, 69, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 1790, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 1314, 1315, 0,
	0, 0, 1283, 1718, 1317, 1318, 1319, 0, 0, 0,
	0, 0, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 0, 161, 0, 0, 162, 163, 164, 166,
	165, 0, 0, 0, 1748, 1749, 1404, 0, 1248, 1247,
	0, 0, 897, 0, 0, 0, 0, 858, 1242, 1249,
	1250, 1251, 0, 1243, 1244, 1245, 1246, 0, 0, 1841,
	0, 0, 0, 0, 1212, 0, 0, 0, 0, 757,
	0, 1211, 1200, 1199, 0, 0, 0, 0, 0, 899,
	0, 53, 0, 1201, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 69, 69, 1202, 0, 66, 69,
	69, 69, 69, 69, 0, 0, 757, 0, 1211, 1200,
	1199, 1886, 0, 69, 1855, 0, 0, 1893, 0, 0,
	1201, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1202, 1266, 1265, 1267, 1268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 151, 152, 153, 154, 155, 156, 157,
	158, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1852, 1055, 900, 0, 0, 69, 48, 49,
	0, 1273, 105, 898, 0, 0, 0, 0, 904, 903,
	0, 0, 0, 69, 0, 0, 0, 897, 0, 0,
	0, 0, 0, 0, 1195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1207, 0, 0, 0, 0, 0,
	0, 0, 0, 1911, 0, 1213, 1214, 0, 0, 0,
	0, 0, 0, 0, 899, 1209, 0, 0, 0, 0,
	0, 1195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1207, 0, 0, 757, 0, 1211, 1200, 1199, 0,
	0, 1939, 1213, 1214, 1203, 1204, 1206, 0, 1201, 0,
	1205, 0, 1209, 0, 0, 66, 0, 1946, 0, 1947,
	0, 1202, 0, 0, 66, 0, 106, 0, 0, 1417,
	0, 1562, 1563, 0, 0, 0, 0, 0, 0, 0,
	0, 1203, 1204, 1206, 0, 0, 0, 1205, 151, 152,
	153, 154, 155, 156, 157, 158, 159, 160, 0, 0,
	0, 0, 0, 1576, 1577, 1578, 1579, 809, 808, 900,
	0, 0, 0, 0, 0, 1634, 0, 105, 898, 0,
	0, 0, 0, 904, 903, 810, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1790, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2030, 0,
	0, 2031, 0, 0, 2033, 0, 0, 0, 0, 1195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1207,
	0, 0, 0, 0, 0, 0, 0, 0, 2047, 0,
	1213, 1214, 0, 0, 0, 1212, 0, 0, 0, 0,
	1209, 0, 0, 1939, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 855, 0, 66, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 1203,
	1204, 1206, 1212, 0, 0, 1205, 0, 0, 811, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 0, 1639, 2091, 855, 1433, 1434, 1435,
	1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 0, 0,
	0, 0, 1754, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1699, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
	1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
	1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
	1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 431, 420,
	0, 379, 433, 347, 367, 442, 369, 370, 405, 326,
	388, 0, 364, 345, 0, 0, 0, 350, 319, 359,
	320, 348, 381, 0, 346, 0, 422, 391, 0, 0,
	0, 440, 0, 396, 0, 0, 0, 0, 0, 383,
	424, 386, 415, 378, 406, 335, 395, 435, 365, 401,
	436, 0, 0, 0, 35, 1829, 0, 0, 1830, 0,
	1831, 0, 1832, 0, 1833, 1834, 400, 430, 361, 332,
	445, 0, 404, 318, 398, 0, 0, 324, 327, 441,
	428, 355, 354, 757, 0, 1211, 1200, 1199, 0, 0,
	382, 387, 411, 375, 0, 0, 0, 1201, 0, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 394, 0,
	1202, 0, 331, 325, 0, 380, 0, 0, 0, 334,
	0, 352, 412, 0, 315, 0, 0, 418, 425, 377,
	0, 0, 429, 374, 373, 0, 0, 0, 0, 0,
	0, 366, 311, 50, 443, 432, 384, 423, 349, 360,
	0, 356, 0, 0, 0, 357, 358, 393, 407, 0,
	0, 0, 0, 0, 51, 414, 52, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 323, 316,
	353, 416, 419, 339, 403, 328, 362, 409, 363, 385,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1195, 0,
	0, 1660, 0, 0, 0, 0, 0, 0, 1207, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1213,
	1214, 0, 0, 0, 0, 0, 0, 0, 0, 1209,
	0, 0, 0, 0, 1668, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1203, 1204,
	1206, 0, 0, 0, 1205, 0, 0, 0, 321, 0,
	0, 0, 0, 53, 322, 343, 426, 0, 0, 0,
	0, 1669, 1667, 1663, 1662, 0, 0, 0, 0, 402,
	0, 0, 0, 0, 1665, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 338, 342, 336, 337,
	389, 390, 437, 438, 439, 413, 333, 0, 340, 341,
	0, 421, 0, 0, 0, 392, 0, 0, 0, 444,
	0, 0, 0, 0, 0, 0, 0, 368, 317, 372,
	0, 0, 0, 0, 0, 0, 0, 329, 330, 1817,
	0, 376, 371, 397, 399, 408, 417, 427, 434, 410,
	48, 49, 431, 420, 0, 379, 433, 347, 367, 442,
	369, 370, 405, 326, 388, 0, 364, 345, 0, 0,
	0, 350, 319, 359, 320, 348, 381, 0, 346, 0,
	422, 391, 0, 0, 0, 440, 0, 396, 0, 1212,
	0, 0, 0, 383, 424, 386, 415, 378, 406, 335,
	395, 435, 365, 401, 436, 0, 0, 0, 35, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	400, 430, 361, 332, 445, 0, 404, 318, 398, 0,
	0, 324, 327, 441, 428, 355, 354, 757, 0, 1211,
	1200, 1199, 0, 0, 382, 387, 411, 375, 0, 0,
	0, 1201, 0, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 394, 0, 1202, 0, 331, 325, 0, 380,
	0, 0, 0, 334, 0, 352, 412, 0, 315, 0,
	0, 418, 425, 377, 0, 0, 429, 374, 373, 0,
	1978, 0, 0, 0, 0, 366, 311, 50, 443, 432,
	384, 423, 349, 360, 0, 356, 0, 0, 0, 357,
	358, 393, 407, 0, 0, 0, 0, 0, 51, 414,
	52, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 316, 353, 416, 419, 339, 403, 328,
	362, 409, 363, 385, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1195, 0, 0, 1799, 0, 0, 0, 0,
	0, 0, 1207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1213, 1214, 0, 0, 0, 0, 0,
	0, 0, 0, 1209, 0, 0, 0, 0, 1668, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1203, 1204, 1206, 0, 0, 0, 1205, 0,
	0, 0, 321, 0, 0, 0, 0, 53, 322, 343,
	426, 0, 0, 0, 0, 1669, 1667, 1980, 0, 0,
	0, 0, 0, 402, 0, 0, 0, 0, 1665, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	338, 342, 336, 337, 389, 390, 437, 438, 439, 413,
	333, 0, 340, 341, 0, 421, 0, 0, 0, 392,
	0, 0, 0, 444, 0, 0, 0, 0, 0, 0,
	0, 368, 317, 372, 0, 0, 0, 0, 0, 0,
	0, 329, 330, 0, 0, 376, 371, 397, 399, 408,
	417, 427, 434, 410, 48, 49, 431, 420, 0, 379,
	433, 347, 367, 442, 369, 370, 405, 326, 388, 0,
	364, 345, 0, 0, 0, 350, 319, 359, 320, 348,
	381, 0, 346, 0, 422, 391, 0, 0, 0, 440,
	0, 396, 0, 1212, 0, 0, 0, 383, 424, 386,
	415, 378, 406, 335, 395, 435, 365, 401, 436, 0,
	0, 0, 35, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 400, 430, 361, 332, 445, 0,
	404, 318, 398, 0, 0, 324, 327, 441, 428, 355,
	354, 757, 0, 1211, 1200, 1199, 0, 0, 382, 387,
	411, 375, 0, 0, 0, 1201, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 394, 0, 1202, 0,
	331, 325, 0, 380, 0, 0, 0, 334, 0, 352,
	412, 0, 315, 0, 0, 418, 425, 377, 0, 0,
	429, 374, 373, 0, 0, 0, 0, 0, 0, 366,
	311, 50, 443, 432, 384, 423, 349, 360, 0, 356,
	0, 0, 0, 357, 358, 393, 407, 0, 0, 0,
	0, 0, 51, 414, 52, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 316, 353, 416,
	419, 339, 403, 328, 362, 409, 363, 385, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1213, 1214, 0,
	0, 0, 0, 0, 0, 0, 0, 1209, 0, 0,
	0, 0, 1668, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1203, 1204, 1206, 0,
	0, 0, 1205, 0, 0, 0, 321, 0, 0, 0,
	0, 53, 322, 343, 426, 0, 0, 0, 0, 1669,
	1667, 1181, 0, 0, 0, 0, 0, 402, 0, 0,
	0, 0, 1665, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 338, 342, 336, 337, 389, 390,
	437, 438, 439, 413, 333, 0, 340, 341, 0, 421,
	0, 0, 0, 392, 0, 0, 0, 444, 0, 0,
	0, 0, 0, 0, 0, 368, 317, 372, 0, 0,
	0, 0, 0, 0, 0, 329, 330, 0, 0, 376,
	371, 397, 399, 408, 417, 427, 434, 410, 48, 49,
	431, 420, 0, 379, 433, 347, 367, 442, 369, 370,
	405, 326, 388, 0, 364, 345, 0, 0, 0, 350,
	319, 359, 320, 348, 381, 0, 346, 0, 422, 391,
	0, 128, 0, 440, 0, 396, 0, 1212, 0, 0,
	0, 383, 424, 386, 415, 378, 406, 335, 395, 435,
	365, 401, 436, 0, 0, 0, 64, 0, 67, 35,
	0, 0, 0, 0, 0, 0, 0, 0, 400, 430,
	361, 332, 445, 0, 404, 318, 398, 0, 0, 324,
	327, 441, 428, 355, 354, 0, 0, 0, 0, 0,
	0, 0, 382, 387, 411, 375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1382, 0, 351, 0,
	394, 0, 0, 0, 331, 325, 0, 380, 113, 0,
	0, 334, 0, 352, 412, 0, 315, 0, 0, 418,
	425, 377, 0, 0, 429, 374, 373, 0, 0, 0,
	0, 0, 0, 366, 311, 50, 443, 432, 384, 423,
	349, 360, 0, 356, 0, 129, 0, 357, 358, 393,
	407, 0, 0, 0, 0, 0, 51, 414, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	323, 316, 353, 416, 419, 339, 403, 328, 362, 409,
	363, 385, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 0,
	161, 148, 0, 162, 163, 164, 166, 165, 130, 131,
	132, 136, 134, 133, 135, 107, 109, 0, 105, 108,
	114, 110, 111, 112, 126, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 127, 137, 138, 139,
	140, 141, 142, 143, 144, 145, 0, 0, 0, 0,
	321, 0, 0, 0, 0, 53, 322, 343, 426, 0,
	0, 0, 0, 0, 310, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 338, 342,
	336, 337, 389, 390, 437, 438, 439, 413, 333, 0,
	340, 341, 0, 421, 0, 0, 0, 392, 0, 0,
	0, 444, 106, 0, 0, 0, 0, 0, 0, 368,
	317, 372, 0, 0, 0, 0, 0, 0, 0, 329,
	330, 0, 0, 376, 371, 397, 399, 408, 417, 427,
	434, 410, 48, 49, 431, 420, 0, 379, 433, 347,
	367, 442, 369, 370, 405, 326, 388, 0, 364, 345,
	0, 0, 0, 350, 319, 359, 320, 348, 381, 0,
	346, 0, 422, 391, 0, 0, 0, 440, 0, 396,
	0, 0, 0, 0, 0, 383, 424, 386, 415, 378,
	406, 335, 395, 435, 365, 401, 436, 0, 0, 0,
	35, 0, 785, 0, 786, 0, 0, 0, 0, 0,
	0, 0, 400, 430, 361, 332, 445, 0, 404, 318,
	398, 0, 0, 324, 327, 441, 428, 355, 354, 757,
	0, 1211, 1200, 1199, 0, 0, 382, 387, 411, 375,
	0, 0, 0, 1201, 0, 0, 0, 0, 0, 0,
	0, 0, 351, 0, 394, 0, 1202, 0, 331, 325,
	0, 380, 0, 0, 0, 334, 0, 352, 412, 0,
	315, 0, 0, 418, 425, 377, 0, 0, 429, 374,
	373, 0, 0, 0, 0, 0, 0, 366, 311, 50,
	443, 432, 384, 423, 349, 360, 0, 356, 0, 0,
	0, 357, 358, 393, 407, 0, 0, 0, 0, 0,
	51, 414, 52, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 323, 316, 353, 416, 419, 339,
	403, 328, 362, 409, 363, 385, 344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1213, 1214, 0, 0, 0,
	0, 0, 0, 0, 0, 1209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1203, 1204, 1206, 0, 0, 0,
	1205, 0, 0, 0, 321, 0, 0, 0, 0, 53,
	322, 343, 426, 0, 0, 0, 0, 0, 310, 1639,
	0, 0, 0, 0, 0, 402, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 338, 342, 336, 337, 389, 390, 437, 438,
	439, 413, 333, 0, 340, 341, 0, 421, 0, 0,
	0, 392, 0, 0, 0, 444, 0, 0, 0, 0,
	0, 0, 0, 368, 317, 372, 0, 0, 0, 0,
	0, 0, 0, 329, 330, 0, 0, 376, 371, 397,
	399, 408, 417, 427, 434, 410, 48, 49, 431, 420,
	0, 379, 433, 347, 367, 442, 369, 370, 405, 326,
	388, 0, 364, 345, 0, 0, 0, 350, 319, 359,
	320, 348, 381, 0, 346, 0, 422, 391, 0, 0,
	0, 440, 0, 396, 0, 1212, 0, 0, 0, 383,
	424, 386, 415, 378, 406, 335, 395, 435, 365, 401,
	436, 0, 464, 0, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 466, 0, 400, 430, 361, 332,
	445, 0, 404, 318, 398, 0, 0, 324, 327, 441,
	428, 355, 354, 0, 0, 0, 0, 0, 0, 0,
	382, 387, 411, 375, 1569, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 394, 0,
	0, 0, 331, 325, 0, 380, 0, 0, 0, 334,
	0, 352, 412, 0, 315, 0, 0, 418, 425, 377,
	0, 1079, 429, 374, 373, 0, 0, 0, 0, 0,
	0, 366, 311, 50, 443, 432, 384, 423, 349, 360,
	0, 356, 0, 0, 0, 357, 358, 393, 407, 0,
	0, 0, 0, 0, 51, 414, 52, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 323, 316,
	353, 416, 419, 339, 403, 328, 362, 409, 363, 385,
	344, 0, 0, 0, 0, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 0, 161, 1084, 0, 162,
	163, 164, 166, 165, 1088, 0, 1080, 0, 1092, 1091,
	1093, 1078, 1095, 0, 0, 0, 1099, 1096, 1098, 1097,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1087, 1089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 321, 0,
	0, 0, 0, 53, 322, 343, 426, 0, 0, 0,
	0, 0, 310, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 338, 342, 336, 337,
	389, 390, 437, 438, 439, 413, 333, 0, 340, 341,
	0, 421, 0, 0, 0, 392, 0, 0, 0, 444,
	0, 0, 0, 0, 0, 0, 0, 368, 317, 372,
	0, 0, 0, 0, 0, 0, 0, 329, 330, 0,
	0, 376, 371, 397, 399, 408, 417, 427, 434, 410,
	48, 49, 431, 420, 0, 379, 433, 347, 367, 442,
	369, 370, 405, 326, 388, 0, 364, 345, 0, 0,
	0, 350, 319, 359, 320, 348, 381, 0, 346, 0,
	422, 391, 0, 0, 0, 440, 0, 396, 0, 0,
	0, 0, 0, 383, 424, 386, 415, 378, 406, 335,
	395, 435, 365, 401, 436, 0, 0, 0, 35, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	400, 430, 361, 332, 445, 0, 404, 318, 398, 0,
	0, 324, 327, 441, 428, 355, 354, 0, 0, 0,
	0, 0, 0, 0, 382, 387, 411, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1737, 0,
	351, 0, 394, 0, 0, 0, 331, 325, 0, 380,
	0, 0, 0, 334, 0, 352, 412, 0, 315, 0,
	0, 418, 425, 377, 0, 0, 429, 374, 373, 0,
	0, 0, 0, 0, 0, 366, 311, 50, 443, 432,
	384, 423, 349, 360, 0, 356, 0, 0, 0, 357,
	358, 393, 407, 0, 0, 0, 0, 0, 51, 414,
	52, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 316, 353, 416, 419, 339, 403, 328,
	362, 409, 363, 385, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 321, 0, 0, 0, 0, 53, 322, 343,
	426, 0, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	338, 342, 336, 337, 389, 390, 437, 438, 439, 413,
	333, 0, 340, 341, 0, 421, 0, 0, 0, 392,
	0, 0, 0, 444, 0, 0, 0, 0, 0, 0,
	0, 368, 317, 372, 0, 0, 0, 0, 0, 0,
	0, 329, 330, 0, 0, 376, 371, 397, 399, 408,
	417, 427, 434, 410, 48, 49, 431, 420, 0, 379,
	433, 347, 367, 442, 369, 370, 405, 326, 388, 0,
	364, 345, 0, 0, 0, 350, 319, 359, 320, 348,
	381, 0, 346, 0, 422, 391, 0, 0, 0, 440,
	0, 396, 0, 0, 0, 0, 0, 383, 424, 386,
	415, 378, 406, 335, 395, 435, 365, 401, 436, 0,
	0, 0, 64, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 400, 430, 361, 332, 445, 0,
	404, 318, 398, 0, 0, 324, 327, 441, 428, 355,
	354, 0, 0, 0, 0, 0, 0, 0, 382, 387,
	411, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 394, 0, 0, 0,
	331, 325, 0, 380, 0, 0, 0, 334, 0, 352,
	412, 0, 315, 0, 0, 418, 425, 377, 0, 0,
	429, 374, 373, 0, 0, 0, 0, 0, 0, 366,
	311, 50, 443, 432, 384, 423, 349, 360, 0, 356,
	0, 0, 0, 357, 358, 393, 407, 0, 0, 0,
	0, 0, 51, 414, 52, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 316, 353, 416,
	419, 339, 403, 328, 362, 409, 363, 385, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 321, 0, 0, 0,
	0, 53, 322, 343, 426, 0, 0, 0, 0, 0,
	310, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 338, 342, 336, 337, 389, 390,
	437, 438, 439, 413, 333, 0, 340, 341, 0, 421,
	0, 0, 0, 392, 0, 0, 0, 444, 0, 0,
	0, 0, 0, 0, 0, 368, 317, 372, 0, 0,
	0, 0, 0, 0, 0, 329, 330, 0, 0, 376,
	371, 397, 399, 408, 417, 427, 434, 410, 48, 49,
	431, 420, 0, 379, 433, 347, 367, 442, 369, 370,
	405, 326, 388, 0, 364, 345, 0, 0, 0, 350,
	319, 359, 320, 348, 381, 0, 346, 0, 422, 391,
	0, 0, 0, 440, 0, 396, 0, 0, 0, 0,
	0, 383, 424, 386, 415, 378, 406, 335, 395, 435,
	365, 401, 436, 0, 0, 0, 35, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 400, 430,
	361, 332, 445, 0, 404, 318, 398, 0, 0, 324,
	327, 441, 428, 355, 354, 597, 0, 0, 0, 0,
	0, 0, 382, 387, 411, 375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 351, 0,
	394, 0, 0, 0, 331, 325, 0, 380, 0, 0,
	0, 334, 0, 352, 412, 0, 315, 0, 0, 418,
	425, 377, 0, 0, 429, 374, 373, 0, 0, 0,
	0, 0, 0, 366, 311, 50, 443, 432, 384, 423,
	349, 360, 0, 356, 0, 0, 0, 357, 358, 393,
	407, 0, 0, 0, 0, 0, 51, 414, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	323, 316, 353, 416, 419, 339, 403, 328, 362, 409,
	363, 385, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	321, 0, 0, 0, 0, 53, 322, 343, 426, 0,
	0, 0, 0, 0, 310, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 338, 342,
	336, 337, 389, 390, 437, 438, 439, 413, 333, 0,
	340, 341, 0, 421, 0, 0, 0, 392, 0, 0,
	0, 444, 0, 0, 0, 0, 0, 0, 0, 368,
	317, 372, 0, 0, 0, 0, 0, 0, 0, 329,
	330, 0, 0, 376, 371, 397, 399, 408, 417, 427,
	434, 410, 48, 49, 431, 420, 0, 379, 433, 347,
	367, 442, 369, 370, 405, 326, 388, 0, 364, 345,
	0, 0, 0, 350, 319, 359, 320, 348, 381, 0,
	346, 0, 422, 391, 0, 0, 0, 440, 0, 396,
	0, 0, 0, 0, 0, 383, 424, 386, 415, 378,
	406, 335, 395, 435, 365, 401, 436, 0, 0, 0,
	35, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 400, 430, 361, 332, 445, 0, 404, 318,
	398, 0, 0, 324, 327, 441, 428, 355, 354, 0,
	0, 0, 0, 0, 0, 0, 382, 387, 411, 375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 351, 0, 394, 0, 0, 0, 331, 325,
	0, 380, 0, 0, 0, 334, 0, 352, 412, 0,
	315, 0, 0, 418, 425, 377, 0, 0, 429, 374,
	373, 0, 0, 0, 0, 0, 0, 366, 311, 50,
	443, 432, 384, 423, 349, 360, 0, 356, 0, 0,
	0, 357, 358, 393, 407, 0, 0, 0, 0, 0,
	51, 414, 52, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 323, 316, 353, 416, 419, 339,
	403, 328, 362, 409, 363, 385, 344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 321, 0, 0, 0, 0, 53,
	322, 343, 426, 0, 0, 0, 0, 0, 310, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 338, 342, 336, 337, 389, 390, 437, 438,
	439, 413, 333, 0, 340, 341, 0, 421, 0, 0,
	0, 392, 0, 0, 0, 444, 0, 0, 0, 0,
	0, 0, 0, 368, 317, 372, 0, 0, 0, 0,
	0, 0, 0, 329, 330, 0, 0, 376, 371, 397,
	399, 408, 417, 427, 434, 410, 48, 49, 431, 2021,
	0, 379, 433, 347, 367, 442, 369, 370, 405, 326,
	388, 0, 364, 345, 0, 0, 0, 350, 319, 359,
	320, 348, 381, 0, 346, 0, 422, 391, 0, 0,
	0, 440, 0, 396, 0, 0, 0, 0, 0, 383,
	424, 386, 415, 378, 406, 335, 395, 435, 365, 401,
	436, 484, 0, 0, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 400, 430, 361, 332,
	445, 0, 404, 318, 398, 0, 0, 324, 327, 441,
	428, 355, 354, 0, 0, 0, 0, 0, 0, 0,
	382, 387, 411, 375, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 394, 0,
	0, 0, 331, 325, 0, 380, 0, 0, 0, 334,
	0, 352, 412, 0, 315, 0, 0, 418, 425, 377,
	0, 0, 429, 374, 373, 0, 0, 0, 0, 0,
	0, 366, 0, 50, 443, 432, 384, 423, 349, 360,
	0, 356, 0, 0, 0, 357, 358, 393, 407, 0,
	0, 0, 0, 0, 51, 414, 52, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 323, 316,
	353, 416, 419, 339, 403, 328, 362, 409, 363, 385,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 321, 0,
	0, 0, 0, 53, 322, 343, 426, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 338, 342, 336, 337,
	389, 390, 437, 438, 439, 413, 333, 0, 340, 341,
	0, 421, 0, 0, 0, 392, 0, 0, 0, 444,
	0, 0, 0, 0, 0, 0, 0, 368, 317, 372,
	0, 0, 0, 0, 0, 0, 0, 329, 330, 0,
	0, 376, 371, 397, 399, 408, 417, 427, 434, 410,
	48, 49, 431, 420, 0, 379, 433, 347, 367, 442,
	369, 370, 405, 326, 388, 0, 364, 345, 0, 0,
	0, 350, 319, 359, 320, 348, 381, 0, 346, 0,
	422, 391, 0, 0, 0, 440, 0, 396, 0, 0,
	0, 0, 0, 383, 424, 386, 415, 378, 406, 335,
	395, 435, 365, 401, 436, 0, 0, 0, 70, 0,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	400, 430, 361, 332, 445, 0, 404, 318, 398, 0,
	0, 324, 327, 441, 428, 355, 354, 0, 0, 0,
	0, 0, 0, 0, 382, 387, 411, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 394, 0, 0, 0, 331, 325, 0, 380,
	0, 0, 0, 334, 0, 352, 412, 0, 315, 0,
	0, 418, 425, 377, 0, 0, 429, 374, 373, 0,
	0, 0, 0, 0, 0, 366, 0, 50, 443, 432,
	384, 423, 349, 360, 0, 356, 0, 0, 0, 357,
	358, 393, 407, 0, 0, 0, 0, 0, 51, 414,
	52, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 316, 353, 416, 419, 339, 403, 328,
	362, 409, 363, 385, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 321, 0, 0, 0, 0, 53, 322, 343,
	426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	338, 342, 336, 337, 389, 390, 437, 438, 439, 413,
	333, 0, 340, 341, 0, 421, 0, 0, 0, 392,
	0, 0, 0, 444, 0, 0, 0, 0, 0, 0,
	0, 368, 317, 372, 0, 0, 0, 0, 0, 0,
	0, 329, 330, 0, 0, 376, 371, 397, 399, 408,
	417, 427, 434, 410, 48, 49, 431, 420, 0, 379,
	433, 347, 367, 442, 369, 370, 405, 326, 388, 0,
	364, 345, 0, 0, 0, 350, 319, 359, 320, 348,
	381, 0, 346, 0, 422, 391, 0, 0, 0, 440,
	0, 396, 0, 0, 0, 0, 0, 383, 424, 386,
	415, 378, 406, 335, 395, 435, 365, 401, 436, 0,
	0, 0, 35, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 400, 430, 361, 332, 445, 0,
	404, 318, 398, 0, 0, 324, 327, 441, 428, 355,
	354, 0, 0, 0, 0, 0, 0, 0, 382, 387,
	411, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 394, 0, 0, 0,
	331, 325, 0, 380, 0, 0, 0, 334, 0, 352,
	412, 0, 315, 0, 0, 418, 425, 377, 0, 0,
	429, 374, 373, 0, 0, 0, 0, 0, 0, 366,
	0, 50, 443, 432, 384, 423, 349, 360, 0, 356,
	0, 0, 0, 357, 358, 393, 407, 0, 0, 0,
	0, 0, 51, 414, 52, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 316, 353, 416,
	419, 339, 403, 328, 362, 409, 363, 385, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 321, 0, 0, 0,
	0, 53, 322, 343, 426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 338, 342, 336, 337, 389, 390,
	437, 438, 439, 413, 333, 0, 340, 341, 0, 421,
	0, 0, 0, 392, 0, 0, 0, 444, 0, 0,
	0, 0, 0, 0, 0, 368, 317, 372, 0, 0,
	0, 0, 0, 621, 0, 329, 330, 0, 0, 376,
	371, 397, 399, 408, 417, 427, 434, 410, 48, 49,
	620, 0, 0, 0, 0, 619, 0, 0, 0, 0,
	0, 0, 665, 0, 666, 0, 0, 0, 0, 0,
	0, 0, 656, 657, 0, 0, 0, 0, 0, 0,
	0, 0, 484, 0, 0, 64, 646, 643, 644, 648,
	649, 650, 651, 0, 0, 0, 647, 652, 524, 525,
	622, 0, 0, 0, 0, 617, 635, 0, 0, 664,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 632, 633, 0, 0, 0, 0, 681,
	0, 634, 0, 0, 1077, 631, 636, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 679, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 52, 0, 0,
	0, 0, 0, 0, 0, 0, 642, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 0, 161, 1084, 0, 162,
	163, 164, 166, 165, 1088, 0, 1080, 0, 1092, 1091,
	1093, 1078, 1095, 0, 0, 0, 1099, 1096, 1098, 1097,
	667, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 683, 0, 668, 669, 757, 0, 1211, 1200,
	1199, 1087, 1089, 0, 53, 0, 0, 0, 0, 0,
	1201, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1202, 0, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 670, 680, 676,
	677, 674, 675, 673, 672, 671, 682, 658, 659, 660,
	661, 663, 0, 0, 528, 527, 662, 621, 0, 809,
	808, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 810, 0, 619,
	0, 0, 0, 0, 0, 0, 665, 0, 666, 0,
	0, 48, 49, 678, 0, 0, 656, 657, 0, 0,
	0, 0, 0, 0, 1909, 0, 484, 0, 0, 64,
	646, 643, 644, 648, 649, 650, 651, 0, 0, 0,
	647, 652, 524, 525, 622, 1910, 0, 0, 0, 617,
	635, 1207, 0, 664, 0, 0, 0, 0, 0, 0,
	0, 0, 1213, 1214, 0, 757, 0, 1211, 1200, 1199,
	0, 0, 1209, 0, 0, 0, 0, 632, 633, 1201,
	0, 0, 0, 681, 0, 634, 0, 0, 630, 631,
	636, 0, 1202, 0, 0, 0, 0, 0, 0, 0,
	0, 1203, 1204, 1206, 0, 621, 0, 1205, 0, 679,
	811, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	931, 0, 620, 0, 0, 0, 1639, 619, 0, 0,
	0, 0, 0, 0, 665, 0, 666, 0, 0, 51,
	0, 52, 0, 0, 656, 657, 0, 2041, 0, 0,
	642, 0, 0, 0, 484, 0, 0, 64, 646, 643,
	644, 648, 649, 650, 651, 0, 0, 0, 647, 652,
	524, 525, 622, 0, 0, 0, 0, 617, 635, 0,
	0, 664, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1195, 0, 0, 0, 0, 632, 633, 934, 0, 0,
	1207, 681, 0, 634, 0, 0, 630, 631, 636, 0,
	0, 1213, 1214, 0, 0, 0, 0, 0, 0, 0,
	0, 1209, 0, 0, 667, 0, 0, 679, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 1212, 0, 0, 0, 683, 0, 668, 669,
	1203, 1204, 1206, 0, 0, 0, 1205, 51, 53, 52,
	0, 0, 0, 0, 0, 0, 0, 0, 642, 0,
	0, 0, 0, 0, 0, 1181, 0, 0, 0, 654,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 670, 680, 676, 677, 674, 675, 673, 672, 671,
	682, 658, 659, 660, 661, 663, 0, 0, 528, 527,
	662, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 667, 0, 0, 48, 49, 678, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 683, 0, 668, 669, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1212, 0, 0, 0, 0, 0, 654, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 670,
	680, 676, 677, 674, 675, 673, 672, 671, 682, 658,
	659, 660, 661, 663, 0, 0, 528, 527, 662, 621,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	757, 0, 1211, 1200, 1199, 0, 620, 0, 0, 0,
	0, 619, 0, 0, 1201, 0, 0, 0, 665, 0,
	666, 0, 0, 48, 49, 678, 0, 1202, 656, 657,
	0, 0, 0, 0, 0, 0, 0, 0, 484, 0,
	812, 64, 646, 643, 644, 648, 649, 650, 651, 0,
	0, 0, 647, 652, 524, 525, 622, 0, 0, 0,
	0, 617, 635, 0, 0, 664, 0, 0, 0, 0,
	0, 0, 0, 809, 808, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 632,
	633, 810, 0, 0, 0, 681, 0, 634, 0, 0,
	630, 631, 636, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 621, 0, 0, 0, 0,
	0, 679, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 620, 0, 0, 1195, 0, 619, 0, 0,
	0, 0, 0, 0, 665, 1207, 666, 0, 0, 0,
	0, 51, 0, 52, 656, 657, 1213, 1214, 0, 0,
	0, 0, 642, 0, 484, 0, 1209, 64, 646, 643,
	644, 648, 649, 650, 651, 0, 0, 0, 647, 652,
	524, 525, 622, 0, 0, 0, 0, 617, 635, 0,
	0, 664, 0, 0, 0, 1203, 1204, 1206, 0, 0,
	0, 1205, 0, 0, 811, 0, 0, 0, 757, 0,
	1211, 1200, 1199, 0, 0, 632, 633, 934, 0, 0,
	1639, 681, 1201, 634, 0, 0, 630, 631, 636, 0,
	0, 0, 0, 0, 0, 1202, 757, 0, 1211, 1200,
	1199, 0, 0, 0, 0, 0, 667, 679, 0, 0,
	1201, 0, 0, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 0, 1202, 0, 0, 0, 0, 683, 0,
	668, 669, 0, 0, 0, 0, 0, 51, 0, 52,
	53, 809, 808, 0, 0, 0, 0, 0, 642, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 810,
	0, 654, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1944, 1945,
	0, 0, 0, 670, 680, 676, 677, 674, 675, 673,
	672, 671, 682, 658, 659, 660, 661, 663, 0, 0,
	528, 527, 662, 1195, 0, 0, 1212, 0, 0, 0,
	0, 0, 0, 1207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1213, 1214, 0, 0, 0, 0,
	0, 1195, 667, 0, 1209, 0, 0, 48, 49, 678,
	0, 1207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1213, 1214, 683, 0, 668, 669, 0, 0,
	0, 0, 1209, 1203, 1204, 1206, 53, 0, 0, 1205,
	0, 0, 811, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 654, 1678, 0,
	0, 1203, 1204, 1206, 0, 0, 0, 1205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 670,
	680, 676, 677, 674, 675, 673, 672, 671, 682, 658,
	659, 660, 661, 663, 0, 0, 528, 527, 662, 0,
	0, 0, 0, 0, 757, 0, 0, 621, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 757, 0,
	1211, 1200, 1199, 0, 620, 0, 0, 0, 0, 619,
	0, 0, 1201, 48, 49, 678, 665, 0, 666, 0,
	0, 0, 0, 0, 0, 1202, 656, 657, 0, 0,
	0, 0, 0, 0, 0, 0, 484, 0, 0, 64,
	646, 643, 644, 648, 649, 650, 651, 0, 0, 0,
	647, 652, 524, 525, 622, 0, 0, 0, 0, 617,
	635, 0, 0, 664, 1212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 0, 1211, 1200, 1199,
	2109, 0, 0, 0, 0, 0, 0, 632, 633, 1201,
	0, 0, 1212, 681, 0, 634, 0, 0, 630, 631,
	636, 0, 1202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 621, 0, 0, 0, 0, 0, 679,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	620, 0, 0, 1195, 0, 619, 0, 0, 0, 0,
	0, 0, 665, 1207, 666, 0, 0, 0, 0, 51,
	0, 52, 656, 657, 1213, 1214, 0, 2093, 0, 0,
	642, 0, 484, 0, 1209, 64, 646, 643, 644, 648,
	649, 650, 651, 0, 0, 0, 647, 652, 524, 525,
	622, 0, 0, 0, 0, 617, 635, 0, 0, 664,
	0, 0, 0, 1203, 1204, 1206, 0, 0, 0, 1205,
	0, 757, 0, 1211, 1200, 1199, 0, 0, 0, 0,
	1195, 0, 0, 632, 633, 1201, 0, 0, 0, 681,
	1207, 634, 0, 0, 630, 631, 636, 0, 1202, 0,
	0, 1213, 1214, 757, 0, 1211, 1200, 1199, 0, 0,
	0, 1209, 0, 0, 667, 679, 0, 1201, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 0, 0, 0,
	1202, 0, 0, 0, 0, 0, 683, 0, 668, 669,
	1203, 1204, 1206, 0, 0, 51, 1205, 52, 53, 0,
	0, 0, 0, 2088, 0, 0, 642, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 654,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1853, 0, 0, 0, 0,
	0, 670, 680, 676, 677, 674, 675, 673, 672, 671,
	682, 658, 659, 660, 661, 663, 1195, 0, 528, 527,
	662, 0, 0, 0, 1212, 0, 1207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1213, 1214, 0,
	0, 0, 0, 0, 0, 0, 0, 1209, 1195, 0,
	667, 0, 0, 0, 0, 48, 49, 678, 1207, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1213,
	1214, 0, 683, 0, 668, 669, 1203, 1204, 1206, 1209,
	0, 0, 1205, 0, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1212, 0, 0, 0, 654, 0, 0, 1203, 1204,
	1206, 0, 0, 0, 1205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 670, 680, 676,
	677, 674, 675, 673, 672, 671, 682, 658, 659, 660,
	661, 663, 0, 0, 528, 527, 662, 1026, 1027, 1028,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 665, 0, 666, 0, 0, 0,
	0, 0, 0, 0, 656, 657, 0, 0, 0, 0,
	0, 48, 49, 678, 484, 0, 0, 64, 646, 643,
	644, 648, 649, 650, 651, 0, 0, 0, 647, 652,
	524, 525, 0, 0, 0, 0, 0, 0, 635, 0,
	0, 664, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1212, 0, 0,
	0, 0, 0, 0, 0, 632, 633, 0, 0, 0,
	0, 681, 0, 634, 0, 0, 630, 631, 636, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1212,
	0, 0, 0, 0, 0, 0, 0, 679, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	665, 0, 666, 0, 0, 0, 0, 51, 0, 52,
	656, 657, 0, 0, 0, 0, 0, 0, 642, 0,
	484, 0, 0, 64, 646, 643, 644, 648, 649, 650,
	651, 0, 0, 0, 647, 652, 524, 525, 0, 0,
	0, 0, 0, 0, 635, 0, 0, 664, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	757, 0, 1211, 1200, 1199, 0, 0, 0, 0, 0,
	0, 632, 633, 0, 1201, 0, 0, 681, 0, 634,
	0, 0, 630, 631, 636, 0, 0, 1202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 667, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 683, 0, 668, 669, 0, 0,
	0, 0, 0, 51, 0, 52, 53, 0, 0, 0,
	0, 0, 1757, 0, 642, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 654, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 670,
	680, 676, 677, 674, 675, 673, 672, 671, 682, 658,
	659, 660, 661, 663, 0, 1195, 528, 527, 662, 0,
	0, 0, 0, 0, 0, 1207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1213, 1214, 0, 0,
	0, 0, 0, 0, 0, 0, 1209, 0, 667, 0,
	0, 0, 0, 48, 49, 678, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	683, 0, 668, 669, 0, 1203, 1204, 1206, 0, 0,
	0, 1205, 53, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 654, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 670, 680, 676, 677, 674,
	675, 673, 672, 671, 682, 658, 659, 660, 661, 663,
	35, 0, 528, 527, 662, 0, 0, 0, 665, 0,
	666, 0, 0, 0, 0, 0, 0, 0, 656, 657,
	0, 0, 0, 0, 0, 0, 0, 0, 952, 0,
	0, 64, 646, 643, 644, 648, 649, 650, 651, 48,
	49, 678, 647, 652, 524, 525, 0, 0, 0, 0,
	0, 0, 635, 0, 0, 664, 0, 0, 0, 113,
	0, 924, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 632,
	633, 0, 0, 0, 0, 681, 1212, 634, 0, 0,
	630, 631, 636, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 679, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 52, 0, 0, 0, 0, 0, 0,
	0, 0, 642, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
	0, 161, 148, 0, 162, 163, 164, 166, 165, 130,
	131, 132, 136, 134, 133, 135, 107, 109, 0, 105,
	108, 114, 110, 111, 112, 126, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 127, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 0, 0, 0,
	0, 923, 0, 0, 0, 0, 667, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 683, 0,
	668, 669, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 654, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 670, 680, 676, 677, 674, 675, 673,
	672, 671, 682, 658, 659, 660, 661, 663, 0, 0,
	528, 527, 662, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 49, 678,
}

var yyPact = [...]int16{
	875, -1000, -1000, -274, -1000, -1000, -1000, 1522, 2614, 1027,
	1027, 1554, 459, 548, 875, -1000, 2273, 547, 541, 534,
	212, 495, 1027, 2394, 2355, 556, 566, 435, -1000, -233,
	-180, -1000, -79, 1374, -1000, -1000, 1373, 522, 554, -1000,
	540, -1000, 1292, -1000, 5608, 5608, 5608, 5608, -1000, -1000,
	-1000, -1000, -1000, -1000, 293, 1027, 1027, 435, 115, 435,
	1551, 444, 1550, 843, -1000, -1000, 663, -1000, 1702, 661,
	-1000, -1000, 435, -1000, 841, 2355, 838, -1000, -1000, -1000,
	-1000, 1615, 1027, 1481, 2355, 2209, 1027, 2119, 1544, 1673,
	202, 2149, 699, -156, 4, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1448, 66, 1514,
	1448, 1514, -1000, 1448, 1514, 53, 53, 53, 53, 53,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1513, 1512, -1000,
	1448, 1448, 1448, 1448, 1448, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1511, 1448, 1454, 90, 1459,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 699, 699, 699,
	1510, 2355, 1027, 1054, 1543, 1542, 2355, -248, 2355, 2355,
	1758, -1000, -1000, -1000, 153, 2355, 1671, 7181, 5608, 8757,
	2355, 1667, -1000, 1666, 2355, 483, -1000, 2355, 1780, 704,
	691, -1000, 649, 572, 2355, 2355, 1027, 6393, -1000, 1549,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1506, 877, 1027,
	323, 126, 1409, 466, 615, 330, 1122, 317, -1000, -1000,
	-1000, 946, -1000, 1027, -1000, 1798, -1000, -1000, 314, -1000,
	302, 833, 992, 2355, 1504, 193, 1503, 3104, 970, -1000,
	-278, -1000, 2, -1000, 53, 940, 1448, -1000, 53, 956,
	53, 53, -1000, -1000, 688, 1642, 688, 688, 688, 688,
	991, 991, -112, -112, -1000, -1000, -1000, 967, -1000, -1000,
	965, 1454, -1000, -1000, 961, 2355, 1027, 1502, 1541, 1540,
	2355, 2355, 2355, 1699, 491, -1000, -1000, 1698, 1697, 1358,
	-1000, -1000, 149, -1000, -1000, 444, 1027, -1000, 659, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1408,
	1027, -1000, 473, 1027, 1774, 1027, 990, 868, 989, 729,
	564, -1000, 1539, 7575, 202, -1000, -1000, -1000, -1000, -1000,
	374, -1000, 1773, 1728, 337, -13, -216, 1120, -1000, -1000,
	1501, -1000, -1000, 10974, -1000, 1118, 1116, -1000, 1109, 1101,
	54, 1027, -1000, -184, 105, -17, -1000, -1000, 1409, -1000,
	1500, 10974, 1690, -1000, 1650, 732, -1000, 2739, -1000, -255,
	-1000, -1000, 911, -1000, -255, -1000, -1000, -1000, 1409, -1000,
	1498, 1497, -1000, 1495, -1000, -1000, 1409, 1409, 1409, 650,
	-1000, -1000, -1000, -1000, -1000, 688, 1345, 53, 688, 1340,
	1339, 688, 688, -1000, -1000, 1084, 654, -1000, -1000, -1000,
	-1000, 1287, -1000, 1285, -1000, 83, 80, -1000, 1338, 1407,
	-1000, 1280, 1404, 1538, 592, 2355, 2355, 1491, 1490, 1489,
	1406, 435, 1406, 1725, 237, 2355, 1758, 456, 1758, 444,
	7969, 1027, -1000, 1027, 1365, 1027, 1365, -1000, -1000, -1000,
	-1000, 304, 1027, -1000, -1000, 469, 2355, 5999, -1000, -1000,
	1278, -1000, 284, 1448, 10974, 623, 623, -200, 299, 291,
	-216, 1409, 1487, -1000, 374, 551, -1000, 10974, 2383, 1409,
	1409, 1409, 1409, 10848, -1000, -1000, 594, -1000, -1000, -1000,
	11442, 11442, 11442, 11442, 11442, 11442, 11442, -1000, -1000, -1000,
	-1000, 14, -1000, -255, -1000, 981, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 611, 604, -1000, 1409, 1409, 1409, 1409,
	1409, 1409, 1409, 1409, 10974, 1409, 1624, 1409, 1409, 1409,
	1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 3887, 1409,
	1409, 1409, 1409, -1000, -1000, -1000, -1000, -1000, -1000, -216,
	1485, -1000, -1000, -1000, 833, -1000, 10974, 456, 756, 114,
	-1000, 1400, -1000, 953, 1337, 1058, 1334, -1000, 11739, -1000,
	-1000, -1000, 998, -1000, 951, -1000, 927, 1331, 10006, 10486,
	10486, 7969, -1000, -1000, 688, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 53, 988, 53, 0, -2, -1000, 947,
	-1000, 941, 592, 1027, 2355, 1330, 1398, -1000, 259, 1483,
	1482, 592, 456, 374, -1000, 1744, 1764, -1000, 1406, 2355,
	-1000, 468, 1710, -1000, -1000, 1720, -1000, 1396, -1000, -1000,
	1359, 1758, -1000, 1476, 1365, 1365, 1027, -1000, -1000, 294,
	1027, -1000, -1000, -1000, -1000, -1000, -1000, 2461, 374, 1661,
	-1000, -1000, -1000, 696, 867, -1000, -1000, 859, 228, 857,
	-1000, 1027, -216, 1475, 10974, 374, 1271, 213, 10974, 10974,
	869, -1000, -1000, 267, 11316, 902, 761, 11442, 11442, 11442,
	11442, 11442, 11442, 11442, 11442, 11442, 11442, 11442, 11442, 11442,
	11442, 11442, 907, 3732, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1050, -1000, 1406, 2209,
	998, 998, 998, 1269, 10848, 318, 1041, 1041, 29, 10848,
	29, 29, 29, 29, 29, 79, -1000, -276, -1000, -1000,
	7181, 7969, 10486, 10486, 9524, 10974, 10486, 10486, 10486, 1704,
	824, 318, 2209, 1719, 998, 998, 998, 998, -1000, 998,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 56, -1000,
	-1000, -1000, -1000, -1000, -1000, 10486, 10486, 10486, 10486, -1000,
	1027, 1409, 551, 1262, -147, 10974, 1474, 732, -1000, -1000,
	1329, -255, -1000, -1000, -1000, -156, -1000, -1000, -1000, -1000,
	998, 10486, 1148, -1000, -1000, 653, 603, 1148, 1148, 1409,
	-1000, 688, -1000, 688, -1000, -1000, 1328, 1326, 1318, 1470,
	1467, -236, 940, 592, 592, 1314, 1260, 1256, 1731, 1740,
	1406, 1683, 1604, -1000, 998, 1678, 1027, -1000, -1000, -1000,
	-1000, -1000, 196, 819, 1027, 5295, 1324, -1000, 3591, 1464,
	97, 349, 1527, 3446, 205, -1000, 1034, 800, 987, 786,
	784, 778, 777, 772, 766, 764, 742, 734, 730, -1000,
	-1000, -1000, -1000, 1661, -1000, 1793, -1000, -1000, -1000, 1784,
	1462, 1461, 374, 551, 1248, 2461, -1000, -88, 267, 316,
	-1000, -1000, 854, -1000, -1000, 2612, 11442, 11442, 11442, -1000,
	-1000, -1000, -1000, 902, 11442, 11442, 11442, 2519, 2612, 2014,
	388, 448, 29, 130, 130, 26, 26, 26, 26, 26,
	81, 81, -1000, -1000, -1000, -101, -1000, 998, 998, -1000,
	-1000, -1000, 10974, -1000, 998, -1000, -255, 985, -1000, -1000,
	984, 1409, -1000, 1148, 1148, 828, 1395, 11770, 1448, -1000,
	1448, 1459, 1454, -1000, 90, -1000, -1000, 101, 1448, 99,
	1448, 1448, 1448, -1000, -1000, 1448, 1448, -1000, 1448, 1448,
	454, 1366, 1362, 1148, 10486, -1000, 813, -1000, 10974, 998,
	2355, -1000, -1000, -1000, -1000, -1000, -1000, 1148, 998, 1393,
	1148, 1148, 1241, 10974, 213, 1536, -1000, -1000, 607, -1000,
	1295, 1242, -1000, -1000, 1148, 10486, -271, -1000, -1000, 982,
	-1000, -1000, 5605, -271, -271, 10486, -1000, -1000, -1000, -1000,
	-236, 592, 374, 1752, 1458, 1228, 1157, -236, 1752, 2461,
	1649, 10974, 10974, 1744, -1000, 1406, -1000, -1000, 1704, -1000,
	-1000, 876, -1000, 1406, 1302, 173, 118, 10974, -1000, 3873,
	-1000, 5295, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1744, 10974, -1000, -1000, -1000, -1000,
	-1000, 311, 3965, 1027, 1027, 1027, 496, 10974, 1035, 10974,
	-1000, -1000, -1000, -1000, -1000, 2355, 1143, 3591, 3591, 3591,
	3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591,
	3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591,
	3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591,
	3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591,
	3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591,
	3591, 3591, 3591, 3591, 3591, 374, 374, 1456, 1455, 290,
	-1000, 1027, -1000, -130, 3446, 1027, -1000, 939, -1000, -1000,
	905, 926, 905, 905, 905, 905, 905, 210, 920, 397,
	-1000, 623, 623, 1027, 374, 1141, 213, 2461, 1527, -1000,
	-1000, -1000, -1000, 2612, 2612, 2612, -1000, 2519, 2612, 51,
	-1000, 11442, 11442, 77, -1000, -1000, 318, -1000, 65, -1000,
	-255, -1000, -1000, 6374, 907, 10974, -1000, 248, -1000, -1000,
	-1000, 1454, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 6374, 11442, 11442, 11442, 11442, -93, 1294, 815,
	-1000, 10974, 315, -1000, -1000, -1000, -1000, -1000, -1000, 341,
	551, -1000, 1770, -162, 358, -1000, -1000, -1000, -1000, -1000,
	1409, -1000, -1000, 602, -1000, -1000, 998, 1752, 1134, 1139,
	2461, 10974, 456, -236, -236, 1752, 2461, -1000, -1000, 1790,
	635, 582, 1384, -1000, 821, 1731, 998, 1492, -1000, -1000,
	-105, 10974, 5295, 4507, 318, 4507, -1000, 5295, 3110, 1731,
	4058, 459, 1563, 776, 1382, 367, 146, -1000, -1000, -1000,
	4423, 903, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1027, 1766, 1761,
	1760, 1759, 10582, 10974, 10974, -1000, 1718, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1100, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1137, 1133, 374, 374,
	1453, 1409, 1130, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 833, 833, 1126, 1112, 2461, -1000, 1527, -1000,
	-1000, 11442, 2612, 2612, -7, -1000, 984, -1000, 998, 1448,
	998, 669, -1000, -1000, -1000, 998, 2258, 2138, 955, 434,
	1409, -86, -1000, 318, 10974, 2355, 213, 623, 623, -1000,
	-1000, -1000, 171, 805, 732, 732, 919, 50, -1000, 1737,
	453, 6787, -1000, 2461, 1752, 2461, 1527, 318, 1107, 1752,
	1752, 2461, 1527, -1000, 1622, 10974, 10974, 10974, -1000, 1649,
	-1000, 10486, -1000, -1000, -263, 318, 3873, 3910, -1000, -1000,
	2987, 11534, -1000, 1649, 5295, 757, -1000, 808, -1000, 4507,
	1523, 2355, 1123, -1000, 1061, 1529, -1000, -1000, -1000, 1676,
	274, 174, 1027, 167, 5608, -1000, -1000, 1716, 1381, 4817,
	-15, -1000, -1000, -1000, 728, 598, 962, -1000, 1638, -1000,
	-1000, 3965, 1658, -1000, -1000, -1000, -1000, -1000, 4507, -1000,
	1349, 998, 819, 191, 3591, -1000, 288, 1099, 1095, 374,
	1027, -1000, 3446, -1000, -1000, 296, 2461, 1527, -1000, 2612,
	-1000, -1000, -1000, -1000, -1000, 11442, -1000, -1000, 11442, -1000,
	11442, -1000, 11442, -1000, 11442, 11442, 998, 973, 318, 1442,
	-1000, -1000, -1000, 732, -1000, 732, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1153, -1000, 1736, 998, -1000, 1527, 2461,
	-1000, -1000, -1000, 2461, 2461, 1527, -1000, 1607, 318, 318,
	-1000, -1000, 1360, 10974, 11097, -1000, -1000, -1000, -1000, 3522,
	6083, 429, 3216, 257, 2355, -1000, 257, 1275, 776, 2355,
	-1000, -1000, 2209, 776, 776, 776, 776, 776, -1000, 1579,
	1574, -1000, 1568, 1567, 1631, 2355, 1091, 274, 651, 1409,
	-1000, 2355, -1000, 1676, 1711, -1000, 543, 5211, 1381, -15,
	1380, -1000, -27, -26, 9878, 7969, 688, -1000, -1000, -1000,
	-1000, -1000, 1027, 286, -1000, 117, 170, -1000, 129, -1000,
	135, 2461, 2461, 1088, 998, -1000, 2355, 1527, -1000, 2296,
	2296, 2296, 2296, 2296, 270, -1000, -1000, 1027, -1000, -1000,
	-1000, 590, 10974, -1000, -1000, -1000, 1527, 1527, -1000, -1000,
	1752, 776, 318, -1000, -1000, 10610, -1000, -1000, 10974, -1000,
	10974, 4507, -1000, 1111, 1409, -1000, 1752, 776, 1313, -1000,
	1128, -1000, 725, 1529, 1452, 1531, 1033, -1000, -1000, -1000,
	-1000, 1571, -1000, 1569, -1000, -1000, -1000, -1000, -116, 532,
	527, 518, 1027, -1000, 1406, 4901, -1000, -1000, 979, -1000,
	138, -1000, -1000, -1000, 1380, -15, -32, -1000, -1000, -1000,
	-1000, 318, 713, -1000, 1365, -1000, 4507, -1000, -1000, 131,
	-1000, 1527, 1527, -1000, -1000, 1412, -1000, -1000, -1000, -1000,
	-1000, -1000, 998, 224, -136, 1082, 7969, 1076, -1000, 318,
	-1000, -1000, 1750, 1361, 390, 5295, 9810, 10374, 1367, 2209,
	1409, -1000, 8363, 1027, 1744, 1313, -1000, 1752, 2209, 10974,
	-1000, -1000, 10974, 1411, -1000, 10974, -1000, -1000, -1000, -1000,
	1410, 1409, 1409, 1409, 1068, -1000, -1000, -1000, 543, -1000,
	9969, -1000, 964, -1000, -1000, -1000, -39, -35, -1000, 10974,
	2853, -1000, -1000, -1000, -1000, 1027, -1000, 1585, -96, -155,
	-1000, -1000, -1000, 998, 10974, 1748, 1735, -1000, 1155, 757,
	-1000, -1000, 1654, 1304, 1347, -1000, -1000, 10360, 998, 1078,
	-1000, -1000, 587, -1000, -1000, 1068, 1731, -1000, 1744, -1000,
	318, 318, 456, 318, -214, 456, 456, 456, 612, 1027,
	-1000, -1000, 258, -1000, -1000, -1000, -1000, 318, 11065, 1066,
	-1000, 1525, -1000, -1000, -1000, -1000, 10974, 10974, 10939, 289,
	-1000, 1409, -1000, -1000, 1364, 9151, 1027, -1000, -1000, 1731,
	1059, 1018, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 997, 997, 997, 651, -1000, -1000, 10862, -1000, -1000,
	-114, 318, 1349, 377, 1786, -1000, 1409, -1000, 1406, -1000,
	-1000, -1000, -1000, -1000, -214, -1000, -1000, -1000, -116, -1000,
	-142, -1000, 2209, 1347, 998, -1000, -1000, -157, 1154, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 2073, 1761, 119, 123, 2071, 2070, 2069, 2065, 2063,
	2062, 2061, 2060, 2059, 2058, 2056, 60, 58, 49, 42,
	44, 2053, 2048, 2046, 2045, 2044, 2042, 111, 2041, 2039,
	2035, 2032, 112, 2031, 2029, 2028, 2027, 77, 90, 134,
	151, 2228, 33, 32, 43, 40, 2025, 31, 2024, 2022,
	67, 2021, 37, 2019, 2017, 228, 2011, 2010, 4, 135,
	96, 113, 63, 2009, 2007, 99, 2779, 2003, 1995, 143,
	1985, 1982, 95, 34, 70, 8, 6, 12, 1978, 78,
	5, 1977, 84, 89, 1974, 1971, 1970, 20, 1967, 64,
	88, 7, 66, 1965, 14, 9, 132, 54, 22, 16,
	1, 50, 35, 1963, 25, 36, 28, 1962, 81, 1949,
	125, 38, 71, 13, 1708, 0, 68, 138, 1948, 1947,
	1945, 2135, 141, 15, 52, 76, 1944, 75, 101, 51,
	100, 1942, 1941, 1940, 1939, 62, 212, 184, 171, 1938,
	1936, 1933, 1932, 1928, 93, 1927, 512, 805, 118, 104,
	53, 1926, 1924, 98, 305, 74, 94, 308, 812, 1695,
	1923, 1922, 1919, 1918, 115, 1917, 73, 114, 19, 410,
	1912, 1910, 1909, 1905, 1902, 1901, 1897, 102, 1895, 146,
	59, 318, 538, 65, 1891, 1890, 1889, 1883, 79, 1882,
	1881, 1876, 85, 1875, 1873, 106, 69, 121, 117, 120,
	1872, 1871, 72, 82, 1868, 105, 116, 1865, 103, 97,
	26, 341, 61, 1864, 1862, 1861, 18, 1859, 1858, 1845,
	2, 3, 1844, 1840, 1837, 1836, 1833, 1831, 80, 1830,
	147, 1829, 21, 1828, 1827, 39, 1825, 1824, 1824, 1812,
	1810, 814, 1501, 1809, 3124, 122, 1808, 153,
}

var yyR1 = [...]uint8{
	0, 237, 2, 2, 2, 238, 238, 1, 1, 1,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	22, 22, 22, 22, 22, 22, 22, 240, 240, 3,
	3, 4, 5, 5, 6, 6, 7, 7, 30, 30,
	8, 9, 9, 9, 243, 243, 50, 50, 97, 97,
	10, 10, 10, 10, 11, 11, 11, 213, 213, 212,
	214, 214, 215, 215, 217, 217, 216, 216, 216, 216,
	216, 216, 216, 218, 218, 218, 218, 12, 12, 12,
	12, 12, 207, 207, 207, 207, 207, 13, 13, 210,
	210, 210, 16, 16, 16, 16, 17, 17, 18, 18,
	18, 20, 20, 102, 102, 106, 106, 106, 107, 107,
	107, 107, 229, 229, 126, 126, 239, 239, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 205, 205, 205,
	205, 206, 206, 206, 206, 208, 208, 209, 209, 209,
	209, 209, 209, 211, 211, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 14, 14, 31, 31,
	74, 74, 15, 112, 112, 186, 186, 186, 187, 187,
	187, 187, 187, 187, 189, 189, 190, 190, 119, 119,
	191, 191, 23, 23, 23, 23, 26, 171, 172, 172,
	172, 172, 172, 172, 172, 172, 158, 158, 158, 158,
	129, 129, 129, 129, 129, 129, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 197, 197, 197, 197, 197,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 199, 200, 201, 193, 193, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	148, 148, 148, 148, 148, 148, 192, 192, 188, 188,
	188, 188, 131, 131, 131, 131, 131, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 139, 136, 136,
	140, 137, 137, 141, 143, 144, 144, 155, 155, 156,
	156, 156, 138, 138, 142, 132, 132, 132, 132, 132,
	132, 132, 132, 130, 130, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 145, 145, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 157, 157,
	146, 146, 147, 147, 147, 154, 154, 154, 151, 151,
	152, 152, 153, 153, 153, 149, 149, 149, 150, 150,
	150, 160, 182, 182, 182, 184, 184, 185, 185, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 170, 170, 202, 202, 203, 203, 204,
	204, 181, 181, 181, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 169, 169, 179, 179, 180,
	180, 177, 177, 177, 177, 178, 164, 164, 164, 164,
	164, 165, 165, 166, 166, 166, 166, 161, 161, 162,
	162, 163, 163, 195, 195, 195, 233, 233, 233, 233,
	233, 233, 234, 234, 196, 196, 167, 167, 168, 168,
	175, 175, 175, 175, 245, 245, 173, 173, 173, 174,
	174, 174, 246, 27, 28, 28, 29, 29, 29, 34,
	34, 34, 32, 32, 33, 33, 39, 39, 38, 38,
	40, 40, 40, 40, 118, 118, 118, 117, 117, 230,
	230, 230, 230, 230, 42, 42, 43, 43, 44, 44,
	45, 45, 45, 220, 220, 219, 219, 221, 221, 221,
	221, 221, 221, 221, 221, 57, 57, 94, 94, 94,
	98, 98, 46, 46, 46, 46, 47, 47, 48, 48,
	49, 49, 124, 124, 123, 123, 123, 51, 51, 51,
	53, 52, 52, 52, 52, 54, 54, 56, 56, 55,
	55, 58, 58, 58, 58, 59, 59, 96, 96, 41,
	41, 41, 41, 41, 41, 41, 41, 109, 109, 61,
	61, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 71, 71, 71,
	71, 71, 71, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 37, 37, 72, 72, 72, 79,
	73, 73, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 69,
	69, 69, 69, 69, 69, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 247, 247,
	70, 70, 70, 70, 35, 35, 35, 35, 35, 125,
	125, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 128, 128, 128,
	128, 128, 128, 128, 128, 83, 83, 36, 36, 81,
	81, 82, 111, 111, 84, 84, 80, 80, 80, 80,
	222, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 62, 62, 85, 85, 86, 86, 231, 231, 232,
	87, 87, 88, 88, 89, 90, 90, 90, 91, 91,
	91, 91, 92, 92, 92, 64, 64, 64, 64, 64,
	64, 93, 93, 95, 95, 95, 95, 99, 99, 75,
	75, 77, 77, 76, 78, 100, 100, 104, 101, 101,
	105, 105, 105, 105, 105, 24, 25, 103, 103, 103,
	120, 120, 120, 110, 110, 108, 108, 115, 116, 116,
	116, 116, 116, 121, 121, 121, 122, 122, 223, 223,
	223, 224, 224, 224, 225, 225, 226, 227, 227, 228,
	236, 236, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 114, 114, 114, 114, 114, 114,
	241, 242,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 2, 0, 1, 1, 1, 1,
	2, 13, 12, 14, 14, 13, 12, 13, 12, 10,
	7, 10, 7, 11, 11, 9, 13, 16, 5, 8,
	7, 6, 7, 6, 3, 6, 6, 6, 6, 6,
	11, 13, 13, 14, 14, 6, 7, 1, 1, 4,
	6, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 1, 1, 1, 3, 0, 4,
	3, 4, 5, 4, 2, 6, 6, 1, 3, 3,
	0, 1, 1, 1, 1, 3, 1, 2, 3, 1,
	2, 1, 1, 1, 2, 3, 4, 2, 2, 2,
	3, 5, 0, 2, 2, 2, 2, 3, 5, 1,
	2, 3, 7, 10, 1, 1, 5, 5, 3, 5,
	3, 1, 3, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 0, 3, 0, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 4,
	2, 3, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 4, 1, 1,
	0, 1, 2, 0, 3, 0, 2, 2, 0, 2,
	2, 2, 2, 2, 0, 2, 0, 3, 0, 1,
	0, 2, 3, 5, 5, 7, 4, 4, 0, 1,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 1, 2, 2, 3, 2,
	4, 2, 4, 2, 2, 3, 2, 3, 2, 7,
	9, 3, 3, 6, 9, 9, 6, 6, 8, 8,
	5, 8, 7, 4, 0, 2, 4, 6, 2, 4,
	2, 1, 1, 2, 1, 2, 2, 1, 1, 1,
	3, 1, 2, 1, 1, 2, 0, 4, 3, 4,
	3, 3, 3, 3, 3, 3, 3, 2, 4, 6,
	2, 3, 2, 3, 1, 3, 0, 2, 0, 2,
	2, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 3, 0, 1, 0, 5, 0,
	3, 5, 1, 1, 1, 1, 3, 3, 2, 2,
	2, 1, 1, 1, 1, 4, 5, 4, 4, 4,
	1, 2, 2, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 1, 3,
	0, 3, 0, 3, 3, 0, 3, 3, 0, 1,
	0, 1, 0, 2, 1, 0, 3, 3, 0, 1,
	2, 6, 0, 1, 4, 1, 2, 1, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 5, 3, 3, 2, 3, 2, 3,
	3, 2, 2, 3, 4, 1, 1, 1, 1, 1,
	3, 3, 2, 2, 4, 1, 2, 5, 5, 8,
	8, 13, 11, 1, 1, 2, 2, 10, 8, 9,
	7, 7, 5, 0, 1, 1, 0, 1, 1, 1,
	2, 2, 1, 2, 0, 3, 0, 1, 1, 3,
	0, 4, 1, 3, 2, 1, 1, 2, 1, 1,
	1, 1, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	3, 6, 4, 7, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 0, 4, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 8, 1, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 0, 4, 1,
	3, 3, 2, 3, 2, 1, 2, 0, 3, 1,
	1, 3, 4, 4, 4, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 4, 3, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 6, 2, 2, 2, 2, 2, 2,
	2, 3, 3, 1, 1, 1, 1, 2, 1, 4,
	5, 5, 5, 5, 6, 4, 4, 6, 6, 8,
	6, 6, 6, 8, 6, 8, 6, 8, 6, 8,
	9, 7, 5, 4, 4, 3, 3, 3, 1, 3,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 2, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 0, 2, 1, 1, 3, 5,
	3, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 0, 3, 0, 2, 1, 3, 1,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 1, 3, 1, 1, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 5, 3, 1, 3, 1, 2, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	2, 0, 2, 2, 0, 1, 4, 1, 3, 2,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -237, -2, -1, -21, -22, -23, -26, 126, 132,
	133, 70, 127, 128, 402, -171, 58, -233, -234, 287,
	-191, 137, 150, 170, 171, 372, 134, 135, 384, 385,
	152, 387, 79, -168, -115, 61, -168, 56, -108, 140,
	136, -2, -172, -158, -115, -114, 63, 36, 397, 398,
	150, 171, 173, 300, 136, 136, 136, 138, 224, 138,
	-115, -115, -80, 141, 61, -114, -121, 63, -55, -121,
	61, -114, 135, -115, 141, -110, 141, 387, 384, 385,
	352, 56, 59, 56, 135, 143, 136, 135, -115, 141,
	60, 59, -159, -129, -131, -130, -133, -132, -134, -115,
	-139, -140, -143, -141, -142, 260, 364, 257, 261, 258,
	263, 264, 265, 120, 262, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 266, 278, 33, 157,
	250, 251, 252, 255, 254, 256, 253, 279, 280, 281,
	282, 283, 284, 285, 286, 287, -135, -136, 243, -137,
	-138, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 242, 245, 246, 247, 249, 248, -159, -159, -159,
	-115, 56, 222, 223, -115, -115, -110, 225, -110, 56,
	-205, 19, 195, 196, 208, 56, 81, 123, 25, 123,
	-110, 81, -55, 81, 135, -55, -115, 135, -55, -55,
	-80, -115, -115, -55, 316, 56, 26, -175, -245, 367,
	37, -158, -160, -164, -161, -162, -163, -176, -165, 144,
	142, 152, 400, 146, 147, 287, -169, 148, 136, 153,
	73, 81, -197, 144, -200, 56, 295, 301, 142, 153,
	152, 400, 71, 145, 25, 374, 376, 31, 32, -153,
	403, 289, -151, 298, -146, 58, -145, 259, -147, 58,
	-146, -147, -146, -147, -149, 261, -149, -149, -149, -149,
	58, 58, -146, -146, -146, -146, -146, 58, -146, -155,
	58, -144, 244, -156, 58, 56, 57, -55, -115, -115,
	56, 56, 56, -55, -229, 397, 398, -55, -55, -208,
	-206, 8, 9, 10, 209, -55, 26, -116, -122, -115,
	309, 149, -113, -114, -121, 131, 196, 375, 80, 25,
	27, 295, 301, 195, 84, 120, 16, 85, 202, 384,
	385, 119, 76, 353, 126, 52, 345, 346, 343, 200,
	355, 356, 344, 302, 207, 20, 31, 10, 28, 155,
	24, 113, 128, 197, 89, 88, 158, 162, 163, 26,
	156, 75, 203, 205, 19, 55, 148, 11, 374, 13,
	14, 389, 376, 141, 140, 100, 388, 136, 50, 8,
	122, 29, 97, 46, 153, 206, 48, 98, 17, 347,
	348, 34, 362, 164, 115, 53, 40, 390, 81, 391,
	73, 56, 316, 201, 79, 15, 51, 165, 392, 204,
	396, 99, 129, 352, 172, 49, 198, 393, 134, 199,
	6, 358, 33, 154, 47, 135, 303, 394, 87, 139,
	74, 5, 152, 9, 395, 54, 57, 349, 350, 351,
	38, 86, 12, 151, 366, 77, -129, -122, -113, -55,
	26, 26, -55, 139, -55, 11, 97, 97, 97, 131,
	-55, -55, -115, -173, 59, -116, 71, -113, -114, 36,
	58, -196, 56, 81, -167, -115, 153, -169, 61, 136,
	-195, 384, 385, -241, 58, -169, -169, 61, 136, 153,
	61, 153, 73, 19, -115, 9, 153, 153, -196, 63,
	-55, 58, -193, 375, 16, 58, -198, 58, -199, 63,
	64, 65, 110, 66, 73, -148, 72, -61, 290, -69,
	343, 346, 345, 291, 74, 75, -115, 361, 360, -121,
	-201, 65, 404, -152, 299, -149, 65, -146, -149, 65,
	61, -149, -149, -150, 120, 119, 33, -150, -150, -150,
	-150, -157, 63, -157, -154, 366, 367, -154, 65, 65,
	-155, 65, -55, -115, 58, 56, 56, -55, -55, -55,
	25, 138, 25, -186, 25, 56, 59, 209, -205, -115,
	123, 57, -115, 139, -168, 11, -168, 63, 63, 73,
	63, -119, 144, -164, 152, 131, 56, 90, -116, -245,
	-180, -177, -115, 153, 58, 10, 9, 19, 148, 142,
	152, 400, -195, 61, 58, -41, -60, 81, -66, 31,
	26, 9, 76, -241, -65, -61, -80, -222, -78, -79,
	120, 121, 109, 110, 117, 82, 122, -69, -67, -68,
	-70, -225, 182, 63, 64, -115, 62, 72, 65, 66,
	67, 68, 73, -121, 321, -76, 48, 49, 353, 354,
	355, 356, 362, 357, 85, 38, 40, 266, 290, 291,
	343, 351, 350, 349, 347, 348, 345, 346, 399, 141,
	344, 115, 352, 288, 61, 61, 61, 61, -195, 152,
	-167, -115, 386, -197, 400, -148, -241, 58, -41, 25,
	31, -62, 65, 110, -198, 58, -199, -188, 399, 65,
	66, -188, -241, -146, 58, -146, 58, 58, -241, -241,
	-241, 123, -150, 60, -149, -150, 60, 60, -150, -150,
	61, 61, 120, 60, 59, 60, 250, 250, 60, 59,
	60, 59, 58, 57, 56, -179, -180, -69, -115, -55,
	-55, 58, 58, 58, -3, -4, -5, 6, -241, -110,
	-3, -187, 19, 179, 180, -55, -206, -94, -115, 153,
	-208, -205, -116, -115, -168, -168, -240, 136, 153, -115,
	144, -164, -55, -174, -116, 63, 65, 60, 59, -146,
	-178, 293, -146, -41, -166, 175, 176, 33, 177, -166,
	386, 153, 153, -195, -241, 58, -180, -242, 80, 79,
	97, 210, 60, -41, -63, 100, 81, 98, 99, 84,
	106, 105, 116, 109, 110, 111, 112, 113, 114, 115,
	107, 108, 119, 399, 90, 91, 92, 93, 94, 95,
	96, 101, 102, 103, 104, -109, -241, -79, -241, -241,
	-241, -60, -3, -73, -241, -41, 124, 125, -66, -241,
	-66, -66, -66, -66, -66, -66, -226, 289, -188, 63,
	123, 123, -241, -241, -241, -241, -241, -241, -241, -241,
	-83, -41, -241, 41, -241, -241, -241, -241, -247, -241,
	-247, -247, -247, -247, -247, -247, -128, 120, 261, 157,
	252, -135, -130, 267, 266, -241, -241, -241, -241, -195,
	58, -196, -41, -94, 60, 58, 376, 59, 65, 60,
	-198, 63, 60, 292, 122, -129, -242, 60, 60, 60,
	-39, 24, -38, -40, 111, -41, -121, -38, -38, -116,
	-150, -149, 63, -149, 300, 300, 65, 65, -179, -115,
	-55, 60, 58, 58, 58, -179, -94, -180, -87, 15,
	-29, 5, -27, -246, -3, -55, 139, 21, 6, 8,
	9, 10, 19, -112, 59, 25, -208, -239, 58, -115,
	152, -115, -182, -184, 366, -183, 57, 149, 71, 184,
	185, 186, 187, 188, 189, 190, 191, 192, 61, -177,
	-90, 27, 28, 60, -196, 56, 73, 178, -196, 56,
	-167, -195, 58, -41, -180, 60, -192, 177, -41, -41,
	-71, 73, 81, 74, 75, -66, 21, 22, 23, -72,
	-76, -79, 69, 100, 98, 99, 84, -66, -66, -66,
	-66, -66, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -125, 61, 63, 251, -128, 61, -80, -242,
	-242, -242, 59, -242, -3, -65, 63, -115, -65, -115,
	403, -116, -116, -38, -38, -41, -127, 120, 257, 157,
	252, -137, -136, -138, 243, 276, 277, 297, 250, 298,
	-135, 255, 254, 256, 267, 258, 263, 265, 264, 262,
	-41, -40, -40, -38, -32, 24, -81, -82, 86, -80,
	19, -242, -242, -242, -242, -242, 259, -38, -39, -38,
	-38, -38, -168, -241, -242, 60, 372, 373, -41, 58,
	-62, 60, -153, -242, -38, 59, -242, -118, -117, 25,
	-115, 63, 123, -242, -242, -241, -150, -150, 60, 60,
	60, 58, 58, -96, 388, -179, -179, 60, 60, 60,
	-91, 17, 16, -6, -4, -241, 21, 24, -34, 44,
	45, -28, -242, 25, -168, 197, -111, 86, -115, -209,
	-211, 226, -19, -16, -7, -9, -8, -11, -10, -12,
	-13, -14, -15, -24, -4, 141, -17, -18, -30, 10,
	9, 20, 33, 201, 202, 207, 203, 151, -31, 172,
	-25, 8, 352, 162, 163, 56, -244, -115, 109, 110,
	111, 112, 114, 106, 105, 116, 123, 90, 91, 92,
	63, 59, 58, 65, 66, 67, 68, -114, -135, -136,
	-137, -138, 267, 272, 273, 274, 275, 258, 257, 268,
	269, 270, 73, 81, 80, 79, 100, 97, 98, 84,
	85, 86, 87, 89, 88, 354, 353, 355, 356, 31,
	144, 142, 152, 400, 145, 58, 58, 384, 385, 142,
	-181, 56, -183, 366, 58, 368, 61, -170, 90, 63,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	-90, 9, 10, 58, 58, -180, -242, 60, -182, 359,
	73, 74, 75, -66, -66, -66, -72, -66, -66, -66,
	-37, 158, 80, 366, -242, -242, -41, -242, -227, -228,
	63, -242, -242, 59, 57, 59, -146, -146, -146, -156,
	-155, -144, 237, -146, 237, -146, -146, -146, -146, -146,
	-146, -146, 25, 59, 11, 59, 11, -242, -38, -84,
	-82, 89, -41, -242, -121, -242, -242, -242, -242, 60,
	-41, -192, 56, 60, -194, 60, 60, -242, -40, -230,
	401, -117, 111, -122, -230, -230, -39, -96, -179, -180,
	-59, 12, 58, 60, 60, -96, -59, -182, -92, 19,
	34, -41, -88, -89, -41, -87, -3, -32, 70, -3,
	-189, 57, 198, 226, -41, 402, -211, 226, -209, -87,
	-41, -27, -27, -27, -213, -115, -215, -212, 212, 213,
	-27, -236, -235, 322, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 342, -115, -115, -115, -207, 40, 204,
	205, 206, -41, -115, -241, -83, -55, 60, -244, -244,
	-244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
	-244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
	-244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
	-244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
	-244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
	-244, -244, -244, -244, -244, -244, -180, -180, 58, 58,
	153, -115, -185, -183, -115, 65, -202, 56, 77, 65,
	-202, -202, -202, -202, -202, -203, 193, 194, 65, -204,
	-203, 65, -166, -166, -168, -180, 60, -192, -182, -181,
	-37, 80, -66, -66, 250, 404, 59, -188, -127, 120,
	-125, -41, -149, 61, -155, -127, -66, -66, -66, -66,
	363, -87, 88, -41, 87, 145, -242, 10, 9, 372,
	373, 60, 227, 378, 379, 164, 380, 177, 381, 382,
	-241, 123, -242, -59, 60, 60, -182, -41, -94, -96,
	-96, -59, -182, 9, 100, 59, 18, 59, -90, -91,
	-242, -33, 47, -190, 366, -41, -209, -210, -211, -211,
	-209, 402, 88, -91, 87, -20, -16, -17, -19, 226,
	-108, 11, -50, -55, -43, -44, -45, -46, -57, -79,
	-241, -55, 59, -214, -124, 199, 25, 211, -101, -126,
	228, -105, 311, 310, -116, 321, -103, 309, 261, 308,
	-202, 59, -115, 11, 11, 11, 11, -211, 226, -74,
	-73, -74, -112, 19, 60, 60, 60, -180, -180, 58,
	-241, 60, 59, -196, -196, 60, 60, -182, -181, -66,
	300, -228, -242, -242, -242, 59, -242, -242, 59, -242,
	19, -242, 59, -242, 19, -241, -36, 358, -41, -55,
	-192, -166, -166, 366, -62, 16, -62, -62, -62, 65,
	379, 164, 381, 16, -242, 165, -87, 111, -182, -59,
	-182, -181, 60, -59, -59, -182, -181, 42, -41, -41,
	-89, -92, -38, 400, 402, -211, 88, 88, -92, -209,
	89, 89, -210, -56, 29, -55, -55, -50, -243, 59,
	11, 57, 33, 59, -51, -53, -52, -54, 46, 50,
	52, 47, 48, 49, 53, -124, -43, -241, -123, 165,
	-121, 25, -212, -115, 200, -129, 19, 59, -101, 228,
	-102, -106, 312, 314, 90, 123, -120, -115, 63, 31,
	33, -235, 29, -210, -242, -111, 197, -244, -223, 218,
	81, 60, 60, -180, -115, -183, 145, -182, -181, -66,
	-66, -66, -66, -66, -66, -242, 63, 58, -62, -62,
	383, -121, 16, -242, -181, -182, -182, -182, -181, 43,
	-42, 11, -41, 88, -211, 402, -17, -20, 141, -18,
	141, 402, 88, -97, 165, -55, -97, 57, -43, -55,
	-100, -104, -80, -44, -45, -45, -44, -45, 46, 46,
	46, 51, 46, 51, 46, -52, -121, -242, -58, 54,
	140, 55, -241, -121, 19, -217, -216, 65, 216, 215,
	81, 214, -115, -105, -102, 59, 313, 315, 316, 56,
	77, -41, -116, -150, -168, 88, 226, 198, -224, 219,
	218, -182, -182, 60, -242, -55, -181, -242, -242, -242,
	-242, -242, -35, 100, 366, -168, 123, -231, -232, -41,
	-181, -181, -59, -43, 88, 89, -41, -41, -64, 33,
	38, -3, -241, -241, -59, -43, -59, -42, 59, 90,
	-48, -47, 56, 57, -49, 56, -47, 46, 46, -220,
	366, 136, 136, 136, -98, -115, -3, -218, 59, -211,
	226, 63, 41, 217, -106, -107, 317, 314, 320, 90,
	-210, 221, 220, -181, -181, 58, -242, 364, 53, 369,
	60, -116, -242, -87, 59, -85, 13, 141, -209, -20,
	-20, -99, 56, -100, -75, -77, -76, -241, -3, -93,
	-95, 6, -115, -113, -114, -98, -87, -59, -59, -104,
	-41, -41, 58, -41, 58, -241, -241, -241, -242, 59,
	-216, 88, -209, 63, 314, 318, 319, -41, 402, -168,
	43, 365, 370, -242, -232, -86, 14, 16, 402, 30,
	-99, 59, -242, -242, -242, 59, 123, -242, -91, -87,
	-94, -219, -221, 389, 390, 391, 392, 393, 394, 395,
	396, -94, -94, -94, -123, -115, 88, 402, 88, 60,
	43, -41, -73, 88, 153, -77, 38, -3, -241, -95,
	-115, -91, 60, 60, 59, -242, -242, -242, -58, 88,
	366, 141, 9, -75, -3, -221, -220, 369, -100, -242,
	370,
}

var yyDef = [...]int16{
	0, -2, 1, 2, 7, 8, 9, 0, -2, 0,
	0, 0, 915, 0, 4, 10, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 913, 527, 528,
	529, 532, 0, 0, 538, 917, 0, 0, 0, 916,
	0, 3, 0, 259, 304, 304, 304, 304, 1094, 1095,
	1096, 1097, 1098, 1099, 0, 0, 0, 913, 0, 913,
	0, 836, 0, 0, -2, -2, 0, 925, 0, 639,
	923, 924, 913, 34, 0, 0, 0, 533, 530, 531,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 0,
	540, 0, 266, 442, 438, 271, 272, 273, 274, 275,
	352, 353, 354, 355, 356, 393, 394, 430, 417, 432,
	430, 432, 400, 430, 432, 445, 445, 445, 445, 445,
	408, 409, 410, 411, 412, 413, 414, 0, 0, 385,
	430, 430, 430, 430, 430, 391, 392, 419, 420, 421,
	422, 423, 424, 425, 426, 0, 430, 377, 375, 379,
	384, 357, 358, 359, 360, 361, 362, 363, 364, 365,
	366, 368, 369, 371, 372, 382, 383, 267, 268, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 199, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 0, 539, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 0, 257, 542, 0,
	545, 260, 261, 262, 263, 264, 265, 0, 534, 536,
	0, 523, 0, 0, 0, 0, 0, 0, 495, 496,
	277, 0, 279, 0, 281, 0, 283, 284, 0, 286,
	288, 534, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 444, 440, 439, 445, 0, 430, 418, 445, 0,
	445, 445, 401, 402, 448, 0, 448, 448, 448, 448,
	0, 0, 435, 435, 388, 389, 390, 0, 367, 370,
	0, 377, 376, 373, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 133, 0, 235, 0,
	205, 201, 202, 203, 200, 0, 0, 838, 0, 918,
	919, 920, -2, -2, 926, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 28, 640, 927, 0,
	0, 914, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 254, 253, 0, 0, 546, 548, 921, 922, 544,
	0, 506, 0, 0, 0, 537, 523, 0, 491, -2,
	0, 524, 525, 934, 1100, 0, 0, 486, 488, 0,
	523, 536, 278, 0, 0, 0, 285, 287, 0, 291,
	292, 934, 0, 324, 0, 0, 305, 0, 308, -2,
	311, 312, 0, 314, 348, 317, 318, 319, 0, 321,
	430, 430, 344, 0, 659, 660, 0, 0, 0, 0,
	322, 323, 443, 270, 441, 448, 0, 445, 448, 0,
	0, 448, 448, 403, 449, 0, 0, 404, 405, 406,
	407, 0, 428, 0, 386, 0, 0, 387, 0, 0,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 913, 0, 238, 0, 0, 0, 0, 0, 0,
	0, 0, 35, 0, 31, 0, 33, 36, 37, 38,
	39, 0, 536, 45, 249, 0, 0, 0, 547, 543,
	0, 499, 430, 430, 934, 0, 0, 0, 0, 0,
	523, 0, 0, 490, 0, 0, 649, 934, 655, 657,
	0, 0, 0, 934, 702, 703, 704, 705, 706, 707,
	934, 934, 934, 934, 934, 934, 934, 733, 734, 735,
	736, 0, 738, -2, 842, 836, 844, 845, 846, 847,
	848, 849, 850, 0, 0, 894, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 0, 0, 0, 0, 0,
	768, 778, 778, 778, 778, 778, 778, 778, 0, 0,
	0, 0, 0, 935, 484, 485, 487, 489, 493, 523,
	0, 537, 303, 280, 534, 282, 934, 0, 0, 0,
	325, 0, 851, 0, 0, 0, 0, 310, 0, 313,
	315, 316, 0, 340, 0, 342, 0, 0, -2, 934,
	934, 0, 395, 431, 448, 397, 433, 434, 398, 399,
	450, 446, 447, 445, 0, 445, 0, 0, 427, 0,
	380, 0, 0, 0, 0, 0, 497, 498, 430, 0,
	0, 0, 0, 0, -2, 860, 0, 552, 0, 0,
	-2, 0, 0, 236, 237, 233, 206, 204, 607, 608,
	0, 0, 839, 136, 30, 32, 0, 47, 48, 537,
	536, 46, 255, 541, 549, 550, 551, 452, 0, 865,
	503, 505, 502, 0, 534, 513, 514, 0, 0, 534,
	535, 536, 523, 0, 934, 0, 0, 346, 934, 934,
	0, 654, 1101, 652, 934, 0, 0, 934, 934, 934,
	934, 934, 934, 934, 934, 934, 934, 934, 934, 934,
	934, 934, 0, 0, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 692, 693, 656, 0, 673, 0, 0,
	0, 649, 52, 0, 934, 700, 0, 0, 724, 934,
	725, 726, 727, 728, 729, 730, 737, 0, 841, 843,
	0, 0, 934, 934, 934, 934, 934, 934, 934, 562,
	0, 826, 0, 0, 0, 0, 0, 0, 770, 0,
	771, 772, 773, 774, 775, 776, 777, 817, 0, 819,
	820, 821, 822, 823, 824, 934, -2, 934, 934, 494,
	0, 0, 0, 0, 0, 934, 300, 0, 852, 306,
	0, 348, 309, 349, 350, 442, 320, 341, 343, 345,
	0, 934, 0, 568, 570, 574, 0, 0, 0, 0,
	396, 448, 429, 448, 436, 437, 0, 0, 0, 0,
	0, 647, 1100, 0, 0, 0, 0, 0, 868, 0,
	0, 556, 559, 554, 52, 0, 0, 239, 240, 241,
	242, 243, 0, 832, 0, 0, 0, 29, 138, 0,
	0, 537, 481, 453, 0, 455, 0, 473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 500,
	501, 866, 867, 865, 507, 0, 515, 516, 508, 0,
	0, 0, 0, 0, 0, 452, 522, 0, 650, 651,
	653, 677, 0, 679, 681, 661, 934, 934, 934, 665,
	696, 697, 698, 0, 934, 934, 934, 694, 669, 0,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 722, 789, 790, 0, 732, 0, 0, 675,
	676, 699, 934, 893, 52, 720, 348, 0, 721, 731,
	0, 838, 840, 0, 0, 0, 0, -2, 430, 794,
	430, 379, 377, 798, 375, 800, 801, 802, 430, 805,
	430, 430, 430, 810, 811, 430, 430, 814, 430, 430,
	0, 0, 0, 0, 934, 563, 834, 829, 934, 0,
	0, 765, 766, 767, 769, 779, 818, 0, 0, 567,
	0, 0, 0, 934, 346, 293, 296, 297, 0, 326,
	0, 0, 351, 739, 0, 934, 579, 571, 575, 0,
	577, 578, 0, 579, 579, -2, 415, 416, 378, 381,
	647, 0, 0, 645, 0, 0, 0, 647, 645, 452,
	872, 934, 934, 860, 54, 0, 557, 558, 562, 560,
	561, 553, 53, 0, 244, 0, 0, 934, 609, 25,
	207, 0, 213, 214, 215, 216, 217, 218, 219, 220,
	221, 222, 223, 224, 860, 934, 114, 115, 552, 552,
	552, 0, 552, 0, 0, 0, 102, 934, 0, -2,
	905, 58, 59, 228, 229, 0, 0, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 0, 0, 0, 0, 0,
	451, 0, 456, 0, 0, 0, 459, 0, 474, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	504, 0, 0, 0, 0, 0, 346, 452, 481, 347,
	678, 680, 682, 662, 663, 664, 666, 694, 670, 0,
	667, 934, 934, 0, 658, 674, 701, -2, 0, 937,
	348, 745, 746, 0, 0, 934, 791, 445, 795, 796,
	797, 377, 803, 804, 806, 807, 808, 809, 812, 813,
	815, 816, 0, 934, 934, 934, 934, 0, 860, 0,
	830, 934, 0, 763, 764, 780, 781, 782, 783, 0,
	0, 289, 0, 0, 0, 302, 307, 740, 569, 741,
	0, 576, 572, 0, 742, 743, 0, 645, 0, 0,
	452, 934, 0, 647, 647, 645, 452, 19, 49, 0,
	0, 869, 861, 862, 865, 868, 52, 564, 555, -2,
	246, 934, 234, 0, 833, 0, 210, 0, 0, 868,
	0, 915, 0, 0, 74, -2, 0, 77, 82, 83,
	0, 0, 940, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 97, 98, 99, 0, 0, 0,
	0, 0, 0, -2, -2, 232, 233, 137, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 0, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 0, 0, 0, 0,
	0, 482, 0, 457, 462, 460, 463, 475, 476, 464,
	465, 466, 467, 468, 469, 470, 477, 478, 471, 472,
	479, 480, 534, 534, 0, 0, 452, 521, 481, 520,
	668, 934, 695, 671, 0, 936, 0, 939, 0, 430,
	0, 0, 792, 793, 799, 0, 0, 0, 0, 0,
	0, 827, 762, 835, 934, 0, 346, 0, 0, 298,
	299, 301, 0, 0, 0, 0, 0, 0, 337, 0,
	0, 0, 744, 452, 645, 452, 481, 646, 0, 645,
	645, 452, 481, 873, 0, 934, 934, 934, 864, 872,
	55, 934, 565, 23, 0, 245, 24, 0, 109, 208,
	0, 0, 211, 872, 0, 120, 118, 114, 121, 0,
	0, 0, 0, 66, 0, 586, 588, 589, 590, 622,
	0, 624, 0, 0, 0, 81, 623, 0, 70, 0,
	0, 898, 134, 135, 0, 0, 0, -2, 0, 909,
	906, 0, 100, 103, 104, 105, 106, 107, 0, 226,
	231, 0, 832, 0, 138, 40, 928, 0, 0, 0,
	0, 454, 0, 509, 510, 0, 452, 481, 518, 672,
	723, 938, 747, 751, 748, 934, 750, 752, 934, 754,
	934, 756, 934, 758, 934, 934, 0, 0, 831, 0,
	290, 294, 295, 0, 328, 0, 330, 331, 332, 333,
	334, 335, 336, 0, 580, 0, 0, 573, 481, 452,
	16, 12, 648, 452, 452, 481, 18, 0, 870, 871,
	863, 50, 584, 934, 0, 110, 212, 209, 225, 0,
	0, 0, 0, 68, 0, 638, -2, 0, 0, 0,
	64, 65, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 630, 0, 0, 0, 0, 0, 0, 641, 0,
	625, 0, 78, 622, 0, 79, 0, 0, 71, 0,
	73, 123, 0, 0, 934, 0, 448, 910, 911, 912,
	908, 941, 0, 0, 227, 0, 0, 154, 931, 929,
	0, 452, 452, 0, 0, 458, 0, 481, 519, 0,
	0, 0, 0, 0, 784, 761, 828, 0, 327, 329,
	338, 0, 934, 582, 11, 17, 481, 481, 15, 874,
	645, 0, 247, 26, 111, 0, 116, 117, 934, 119,
	934, 0, 122, 0, 0, 637, 645, 0, 645, 67,
	584, 895, 0, 587, 618, 620, 0, 615, 628, 629,
	631, 0, 633, 0, 635, 636, 591, 592, 593, 0,
	0, 0, 0, 626, 0, 0, 84, 86, 0, 89,
	0, 91, 92, 899, 72, 0, 0, 126, 127, 900,
	901, 902, 0, 904, 101, 108, 0, 234, 42, 0,
	930, 481, 481, 41, 483, 0, 517, 749, 753, 755,
	757, 759, 0, 0, 0, 0, 0, 0, 857, 859,
	13, 14, 853, 585, 0, 0, 0, 0, 887, 0,
	0, -2, 0, 0, 860, 645, 63, 645, 0, 934,
	612, 619, 934, 0, 613, 934, 614, 632, 634, 605,
	0, 0, 0, 0, 0, 610, -2, 76, 0, 93,
	0, 87, 0, 90, 124, 125, 0, 0, 131, 934,
	0, 932, 933, 43, 44, 0, 760, 0, 0, 0,
	512, 339, 581, 0, 934, 855, 0, 112, 0, 0,
	120, 56, 0, 887, 875, 889, 891, 934, 52, 0,
	881, -2, 883, 885, 886, 0, 868, 62, 860, 896,
	897, 616, 0, 621, 0, 0, 0, 0, 624, 0,
	85, 94, 0, 88, 128, 129, 130, 903, 0, 0,
	785, 0, 788, 583, 858, 51, 934, 934, 0, 0,
	57, 0, 892, -2, 0, 0, 0, 69, 61, 868,
	0, 0, 595, 597, 598, 599, 600, 601, 602, 603,
	604, 0, 0, 0, 641, 611, 95, 0, 27, 511,
	786, 856, 854, 0, 0, 890, 0, -2, 0, 882,
	884, 60, 617, 594, 0, 642, 643, 644, 593, 96,
	0, 113, 0, 878, 52, 596, 606, 0, 888, -2,
	787,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 402,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 403, 3, 404, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:433
		{
			switch len(yyDollar[1].statements) {
			case 0:
				setParseTree(yylex, nil)
			case 1:
				setParseTree(yylex, yyDollar[1].statements[0])
			default:
				setParseTree(yylex, &MultiStatement{Statements: yyDollar[1].statements})
			}
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:446
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:450
		{
			yyVAL.statements = append([]Statement{yyDollar[1].statement}, yyDollar[3].statements...)
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:454
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:459
		{
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:460
		{
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:469
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:474
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:494
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 13:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:514
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 14:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:535
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 15:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:556
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 16:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:578
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 17:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:594
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 18:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:611
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:631
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:646
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:657
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:669
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:680
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:696
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:710
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:724
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 27:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:737
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:751
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:762
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:767
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:787
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[4].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:808
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:828
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[4].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:849
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:858
		{
			yyVAL.statement = &DDL{
				Action:      CreateSchema,
				IfNotExists: true,
				Schema: &Schema{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:869
		{
			tableName := ""
			if !yyDollar[4].tableName.Schema.isEmpty() {
				tableName = yyDollar[4].tableName.Schema.String() + "."
			}
			tableName += yyDollar[4].tableName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Table:  yyDollar[4].tableName,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     tableName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:886
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:905
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    "",
				},
			}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:924
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "INDEX",
					Object:     yyDollar[4].colIdent.String(),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 40:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:937
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 41:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:951
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 42:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:965
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 43:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:985
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 44:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1003
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1021
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1030
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1045
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1053
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 51:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1060
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1066
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1070
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1076
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1080
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 56:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1087
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1099
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1111
		{
			yyVAL.str = InsertStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1115
		{
			yyVAL.str = ReplaceStr
		}
	case 60:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1121
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1127
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1131
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1135
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1140
		{
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1141
		{
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1145
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1149
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1154
		{
			yyVAL.partitions = nil
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1158
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1164
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1168
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1172
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1176
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1182
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 75:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1186
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1197
		{
			yyVAL.statement = &Declare{
				Type: declareHandler,
				Handler: &HandlerDefinition{
					Action:     yyDollar[2].str,
					Conditions: yyDollar[5].handlerConditions,
					Statement:  yyDollar[6].statement,
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1210
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1214
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1220
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1225
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1229
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1235
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1239
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1245
		{
			yyVAL.handlerConditions = []HandlerCondition{yyDollar[1].handlerCondition}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1249
		{
			yyVAL.handlerConditions = append(yyVAL.handlerConditions, yyDollar[3].handlerCondition)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1255
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionMysqlErrorCode, Value: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1259
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[2].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1263
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[3].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1267
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlwarning}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1271
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionNotFound}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1275
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlexception}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionName, Value: string(yyDollar[1].colIdent.String())}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1285
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1289
		{
			yyVAL.statement = &BeginEnd{
				Statements:        []Statement{},
				SuppressSemicolon: false,
			}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1296
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1303
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1319
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1326
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1333
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1341
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1351
		{
			yyVAL.str = ""
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1355
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1359
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1363
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1367
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1373
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1380
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1394
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1398
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1402
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 112:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1409
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 113:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1417
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1427
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1431
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1438
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1448
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1459
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 119:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1464
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1469
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1476
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1480
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1491
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1495
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1501
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1505
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1509
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1523
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1527
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1533
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1537
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1543
		{
			yyVAL.str = SessionStr
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1547
		{
			yyVAL.str = GlobalStr
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1620
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1624
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1628
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1632
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1638
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1642
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1646
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1651
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1657
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1661
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1667
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1671
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1676
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1685
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1689
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1698
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1714
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1727
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1737
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1742
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1748
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1749
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1752
		{
			yyVAL.exprs = nil
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1753
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1757
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1762
		{
			yyVAL.empty = struct{}{}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1764
		{
			yyVAL.empty = struct{}{}
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1767
		{
			yyVAL.bytes = nil
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1775
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1780
		{
			yyVAL.bytes = nil
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1784
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1788
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1792
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1796
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1800
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1805
		{
			yyVAL.expr = nil
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1809
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1814
		{
			yyVAL.expr = nil
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1818
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1823
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1827
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1832
		{
			yyVAL.bytes = nil
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1836
		{
			yyVAL.bytes = nil
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1842
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1851
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1861
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				Table:  yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1871
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				Table:    yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1884
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1897
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1901
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1906
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1910
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1914
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1918
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1922
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1926
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1932
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1936
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1941
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1946
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1952
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1963
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1969
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1982
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1987
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1992
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1997
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2003
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2008
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2013
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2018
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2023
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2028
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2033
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2038
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2043
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 290:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2052
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2062
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2067
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 293:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2072
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 294:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2079
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 295:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2086
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 296:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2094
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2099
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 298:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2104
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 299:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2109
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2115
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 301:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2121
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 302:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2128
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2135
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2141
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2147
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2151
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2155
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2159
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2163
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2169
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2173
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2177
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2181
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2185
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2189
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2193
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2197
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2201
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2205
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2209
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2215
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2221
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2227
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2233
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2237
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2242
		{
			yyVAL.sequence = &Sequence{}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2246
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2251
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2256
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2261
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2266
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2271
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2276
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2281
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2286
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2291
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2296
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2301
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 339:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2306
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2313
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2317
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2321
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2325
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2329
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2333
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2338
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2342
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2347
		{
			yyVAL.bytes = nil
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2375
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), DisplayWidth: yyDollar[2].optVal}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2385
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2397
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2405
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2412
		{
			yyVAL.str = ""
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2416
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2421
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2425
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2433
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2437
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2443
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2456
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2462
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2474
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2496
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2500
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2514
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2546
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 416:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2596
		{
			yyVAL.str = ""
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2600
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2644
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2649
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2654
		{
			yyVAL.optVal = nil
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2658
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2663
		{
			yyVAL.optVal = nil
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2667
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2671
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2680
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2684
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2688
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2693
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2697
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2702
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2706
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2711
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2715
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2719
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2724
		{
			yyVAL.str = ""
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2728
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2732
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2737
		{
			yyVAL.str = ""
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2741
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2745
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2751
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2756
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2760
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2764
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2770
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2774
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2780
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2784
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2790
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2794
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2799
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2803
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2807
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2811
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2815
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2819
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2823
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2827
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2831
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2835
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2839
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2843
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2854
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2858
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2864
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2868
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2874
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2878
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2884
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2888
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2894
		{
			yyVAL.indexPartition = nil
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2908
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2912
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2916
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2920
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2924
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2928
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2932
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2936
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2940
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2944
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2948
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2954
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2958
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2964
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2969
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2975
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2979
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2994
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2998
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3008
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3013
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3020
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 509:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3027
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3034
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 511:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3043
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 512:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3054
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3065
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3069
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3073
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3077
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 517:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3083
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 518:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3093
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 519:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3104
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 520:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3115
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 521:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3126
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3135
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3144
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3148
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3152
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3158
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3162
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3166
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3170
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3174
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3178
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3184
		{
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3185
		{
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3189
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3198
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3205
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3216
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3220
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3226
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3230
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3235
		{
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3236
		{
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3240
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3244
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3248
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3254
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3258
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3262
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3267
		{
			setAllowComments(yylex, true)
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3271
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3277
		{
			yyVAL.bytes2 = nil
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3281
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3287
		{
			yyVAL.str = UnionStr
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3291
		{
			yyVAL.str = UnionAllStr
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3295
		{
			yyVAL.str = UnionDistinctStr
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3300
		{
			yyVAL.str = ""
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3304
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.str = SQLCacheStr
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3313
		{
			yyVAL.str = ""
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3317
		{
			yyVAL.str = DistinctStr
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3322
		{
			yyVAL.str = ""
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3326
		{
			yyVAL.str = StraightJoinHint
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3331
		{
			yyVAL.selectExprs = nil
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3335
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3341
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3345
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3351
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3355
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3359
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3363
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3372
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3376
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3383
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3388
		{
			yyVAL.overExpr = nil
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3392
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 581:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3396
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3400
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 583:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3404
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3409
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3413
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3419
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3423
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3446
		{
			yyVAL.strs = []string{}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3450
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3456
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3460
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3466
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3470
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3474
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3478
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3482
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3486
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3490
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3494
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3500
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 606:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3504
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3510
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3515
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3519
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3525
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3529
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3542
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3546
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3550
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3560
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3562
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3566
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3568
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3572
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3574
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3577
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3579
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3586
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3590
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3596
		{
			yyVAL.str = JoinStr
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3600
		{
			yyVAL.str = JoinStr
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3604
		{
			yyVAL.str = JoinStr
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3610
		{
			yyVAL.str = StraightJoinStr
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3616
		{
			yyVAL.str = LeftJoinStr
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3620
		{
			yyVAL.str = LeftJoinStr
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3624
		{
			yyVAL.str = RightJoinStr
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3628
		{
			yyVAL.str = RightJoinStr
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3634
		{
			yyVAL.str = NaturalJoinStr
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3638
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3648
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3652
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3658
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3662
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3667
		{
			yyVAL.indexHints = nil
		}
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3671
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3675
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 644:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3679
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3684
		{
			yyVAL.expr = nil
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3688
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3693
		{
			yyVAL.columns = nil
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3697
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3703
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3707
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3711
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3715
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3719
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3723
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3727
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3731
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3737
		{
			yyVAL.str = ""
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3741
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3747
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3751
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3757
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3761
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3765
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3769
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3773
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3777
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3781
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3785
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3789
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3793
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3797
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 672:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3801
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3805
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3810
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3814
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3818
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3824
		{
			yyVAL.str = IsNullStr
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3828
		{
			yyVAL.str = IsNotNullStr
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3832
		{
			yyVAL.str = IsTrueStr
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3836
		{
			yyVAL.str = IsNotTrueStr
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3840
		{
			yyVAL.str = IsFalseStr
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3844
		{
			yyVAL.str = IsNotFalseStr
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3850
		{
			yyVAL.str = EqualStr
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3854
		{
			yyVAL.str = LessThanStr
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3858
		{
			yyVAL.str = GreaterThanStr
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3862
		{
			yyVAL.str = LessEqualStr
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3866
		{
			yyVAL.str = GreaterEqualStr
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3870
		{
			yyVAL.str = NotEqualStr
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3874
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3878
		{
			yyVAL.str = PosixRegexStr
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3882
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3886
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3890
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3895
		{
			yyVAL.expr = nil
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3899
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3905
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3909
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3913
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3925
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3929
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3935
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3939
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3943
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3947
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3951
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3955
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3963
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3971
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3975
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3979
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3983
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3987
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3991
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4003
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4007
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4011
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4015
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 723:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4019
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4023
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4027
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4031
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4039
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4053
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4061
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4069
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4077
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4085
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4089
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4099
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 740:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4103
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 741:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4107
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 742:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4111
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 743:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4115
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 744:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4119
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4129
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4133
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 747:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4137
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 748:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 749:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4146
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 750:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4150
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 751:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4154
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 752:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4158
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 753:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4162
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 754:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4166
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 755:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4170
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 756:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4174
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 757:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4178
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 758:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4182
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 759:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4186
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 760:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4190
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 761:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4194
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 762:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4198
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4202
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4207
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4219
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4230
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4234
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4238
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4242
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4246
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4251
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4256
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4261
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4266
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4270
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 780:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4284
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 781:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4288
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 782:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4292
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4296
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4302
		{
			yyVAL.str = ""
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4306
		{
			yyVAL.str = BooleanModeStr
		}
	case 786:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4310
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 787:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4314
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4318
		{
			yyVAL.str = QueryExpansionStr
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4324
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4328
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4334
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4338
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4342
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4346
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4350
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4354
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4360
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4366
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4370
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.convertType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4376
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4380
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4384
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4388
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4392
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4396
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4400
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4404
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4408
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4412
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4416
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4420
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4424
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4428
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4432
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4436
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4440
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4446
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4450
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4454
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4458
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4462
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4466
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4470
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4474
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4479
		{
			yyVAL.expr = nil
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4483
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4488
		{
			yyVAL.str = string("")
		}
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4498
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4502
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 831:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4508
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 832:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4513
		{
			yyVAL.empty = struct{}{}
		}
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4515
		{
			yyVAL.empty = struct{}{}
		}
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4518
		{
			yyVAL.expr = nil
		}
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4522
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4528
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4532
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4536
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 839:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4540
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4546
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4552
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4556
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4561
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4566
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4570
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4574
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4578
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4582
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4586
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4590
		{
			yyVAL.expr = &NullVal{}
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4596
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4600
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4605
		{
			yyVAL.exprs = nil
		}
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4609
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4614
		{
			yyVAL.expr = nil
		}
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4618
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4624
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4628
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4634
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4639
		{
			yyVAL.orderBy = nil
		}
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4643
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4649
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4653
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4659
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4664
		{
			yyVAL.str = AscScr
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4668
		{
			yyVAL.str = AscScr
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4672
		{
			yyVAL.str = DescScr
		}
	case 868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4677
		{
			yyVAL.limit = nil
		}
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4681
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4685
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 871:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4689
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 872:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4694
		{
			yyVAL.str = ""
		}
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4698
		{
			yyVAL.str = ForUpdateStr
		}
	case 874:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4702
		{
			yyVAL.str = ShareModeStr
		}
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4715
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4719
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4723
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 878:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4728
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4732
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 880:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4736
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4743
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4747
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4753
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 884:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4757
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4761
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4765
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4770
		{
			yyVAL.updateExprs = nil
		}
	case 888:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4774
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4780
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4784
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4790
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4794
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4800
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4806
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4816
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4820
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4826
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4832
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4836
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4842
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4846
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4850
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 903:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4855
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4859
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4865
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4871
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4878
		{
			yyVAL.bytes = []byte("charset")
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4885
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4889
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4893
		{
			yyVAL.expr = &Default{}
		}
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4898
		{
			yyVAL.empty = struct{}{}
		}
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4900
		{
			yyVAL.empty = struct{}{}
		}
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4903
		{
			yyVAL.str = ""
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4905
		{
			yyVAL.str = IgnoreStr
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4909
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4916
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4920
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4924
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4928
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4934
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4938
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4943
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4950
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 928:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4956
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4960
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4964
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 931:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4970
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4974
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 933:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4978
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4984
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4988
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 936:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4995
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5002
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5006
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5013
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5019
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 941:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5023
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5200
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5209
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
