// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex any, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex any, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex any, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex any) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex any) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex any) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
	handlerCondition         HandlerCondition
	handlerConditions        []HandlerCondition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const SCHEMA = 57457
const TABLE = 57458
const INDEX = 57459
const MATERIALIZED = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const PRIMARY = 57465
const COLUMN = 57466
const CONSTRAINT = 57467
const REFERENCES = 57468
const SPATIAL = 57469
const FULLTEXT = 57470
const FOREIGN = 57471
const KEY_BLOCK_SIZE = 57472
const POLICY = 57473
const WHILE = 57474
const UNIQUE = 57475
const KEY = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const EXEC = 57485
const EXECUTE = 57486
const MAXVALUE = 57487
const PARTITION = 57488
const REORGANIZE = 57489
const LESS = 57490
const THAN = 57491
const PROCEDURE = 57492
const TRIGGER = 57493
const TYPE = 57494
const RETURN = 57495
const STATUS = 57496
const VARIABLES = 57497
const RESTRICT = 57498
const CASCADE = 57499
const NO = 57500
const ACTION = 57501
const PERMISSIVE = 57502
const RESTRICTIVE = 57503
const PUBLIC = 57504
const CURRENT_USER = 57505
const SESSION_USER = 57506
const PAD_INDEX = 57507
const FILLFACTOR = 57508
const IGNORE_DUP_KEY = 57509
const STATISTICS_NORECOMPUTE = 57510
const STATISTICS_INCREMENTAL = 57511
const ALLOW_ROW_LOCKS = 57512
const ALLOW_PAGE_LOCKS = 57513
const DISTANCE = 57514
const M = 57515
const EUCLIDEAN = 57516
const COSINE = 57517
const BEFORE = 57518
const AFTER = 57519
const EACH = 57520
const ROW = 57521
const SCROLL = 57522
const CURSOR = 57523
const OPEN = 57524
const CLOSE = 57525
const FETCH = 57526
const PRIOR = 57527
const FIRST = 57528
const LAST = 57529
const DEALLOCATE = 57530
const INSTEAD = 57531
const OF = 57532
const OUTPUT = 57533
const HANDLER = 57534
const CONTINUE = 57535
const EXIT = 57536
const SQLEXCEPTION = 57537
const SQLWARNING = 57538
const SQLSTATE = 57539
const FOUND = 57540
const DEFERRABLE = 57541
const INITIALLY = 57542
const IMMEDIATE = 57543
const DEFERRED = 57544
const CONCURRENTLY = 57545
const SQL = 57546
const SECURITY = 57547
const BEGIN = 57548
const START = 57549
const TRANSACTION = 57550
const COMMIT = 57551
const ROLLBACK = 57552
const BIT = 57553
const TINYINT = 57554
const SMALLINT = 57555
const SMALLSERIAL = 57556
const MEDIUMINT = 57557
const INT = 57558
const INTEGER = 57559
const SERIAL = 57560
const BIGINT = 57561
const BIGSERIAL = 57562
const INTNUM = 57563
const REAL = 57564
const DOUBLE = 57565
const PRECISION = 57566
const FLOAT_TYPE = 57567
const DECIMAL = 57568
const NUMERIC = 57569
const SMALLMONEY = 57570
const MONEY = 57571
const TIME = 57572
const TIMESTAMP = 57573
const DATETIME = 57574
const YEAR = 57575
const DATETIMEOFFSET = 57576
const DATETIME2 = 57577
const SMALLDATETIME = 57578
const CHAR = 57579
const VARCHAR = 57580
const VARYING = 57581
const BOOL = 57582
const CHARACTER = 57583
const VARBINARY = 57584
const NCHAR = 57585
const NVARCHAR = 57586
const NTEXT = 57587
const UUID = 57588
const TEXT = 57589
const TINYTEXT = 57590
const MEDIUMTEXT = 57591
const LONGTEXT = 57592
const CITEXT = 57593
const BLOB = 57594
const TINYBLOB = 57595
const MEDIUMBLOB = 57596
const LONGBLOB = 57597
const JSON = 57598
const JSONB = 57599
const ENUM = 57600
const GEOMETRY = 57601
const POINT = 57602
const LINESTRING = 57603
const POLYGON = 57604
const GEOMETRYCOLLECTION = 57605
const MULTIPOINT = 57606
const MULTILINESTRING = 57607
const MULTIPOLYGON = 57608
const VECTOR = 57609
const VARIADIC = 57610
const ARRAY = 57611
const NOW = 57612
const GETDATE = 57613
const BPCHAR = 57614
const TEXT_PATTERN_OPS = 57615
const NULLX = 57616
const AUTO_INCREMENT = 57617
const APPROXNUM = 57618
const SIGNED = 57619
const UNSIGNED = 57620
const ZEROFILL = 57621
const ZONE = 57622
const AUTOINCREMENT = 57623
const DATABASES = 57624
const TABLES = 57625
const VSCHEMA_TABLES = 57626
const EXTENDED = 57627
const FULL = 57628
const PROCESSLIST = 57629
const NAMES = 57630
const CHARSET = 57631
const GLOBAL = 57632
const SESSION = 57633
const ISOLATION = 57634
const LEVEL = 57635
const READ = 57636
const WRITE = 57637
const ONLY = 57638
const REPEATABLE = 57639
const COMMITTED = 57640
const UNCOMMITTED = 57641
const SERIALIZABLE = 57642
const NEW = 57643
const CONCAT_NULL_YIELDS_NULL = 57644
const CURSOR_CLOSE_ON_COMMIT = 57645
const QUOTED_IDENTIFIER = 57646
const ARITHABORT = 57647
const FMTONLY = 57648
const NOCOUNT = 57649
const NOEXEC = 57650
const NUMERIC_ROUNDABORT = 57651
const ANSI_DEFAULTS = 57652
const ANSI_NULL_DFLT_OFF = 57653
const ANSI_NULL_DFLT_ON = 57654
const ANSI_NULLS = 57655
const ANSI_PADDING = 57656
const ANSI_WARNINGS = 57657
const FORCEPLAN = 57658
const SHOWPLAN_ALL = 57659
const SHOWPLAN_TEXT = 57660
const SHOWPLAN_XML = 57661
const IMPLICIT_TRANSACTIONS = 57662
const REMOTE_PROC_TRANSACTIONS = 57663
const XACT_ABORT = 57664
const CURRENT_TIMESTAMP = 57665
const DATABASE = 57666
const CURRENT_DATE = 57667
const CURRENT_TIME = 57668
const LOCALTIME = 57669
const LOCALTIMESTAMP = 57670
const UTC_DATE = 57671
const UTC_TIME = 57672
const UTC_TIMESTAMP = 57673
const REPLACE = 57674
const CONVERT = 57675
const CAST = 57676
const SUBSTR = 57677
const SUBSTRING = 57678
const GROUP_CONCAT = 57679
const SEPARATOR = 57680
const INHERIT = 57681
const LEAD = 57682
const LAG = 57683
const MATCH = 57684
const AGAINST = 57685
const BOOLEAN = 57686
const LANGUAGE = 57687
const WITH = 57688
const WITHOUT = 57689
const PARSER = 57690
const QUERY = 57691
const EXPANSION = 57692
const UNUSED = 57693
const VIRTUAL = 57694
const STORED = 57695
const GENERATED = 57696
const ALWAYS = 57697
const IDENTITY = 57698
const SEQUENCE = 57699
const INCREMENT = 57700
const MINVALUE = 57701
const CACHE = 57702
const CYCLE = 57703
const OWNED = 57704
const NONE = 57705
const CLUSTERED = 57706
const NONCLUSTERED = 57707
const REPLICATION = 57708
const COLUMNSTORE = 57709
const INCLUDE = 57710
const HOLDLOCK = 57711
const NOLOCK = 57712
const NOWAIT = 57713
const PAGLOCK = 57714
const ROWLOCK = 57715
const TABLOCK = 57716
const UPDLOCK = 57717
const READUNCOMMITTED = 57718
const DEFINER = 57719
const INVOKER = 57720
const TYPECAST = 57721
const CHECK = 57722
const OVER = 57723

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"HANDLER",
	"CONTINUE",
	"EXIT",
	"SQLEXCEPTION",
	"SQLWARNING",
	"SQLSTATE",
	"FOUND",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	134, 506,
	-2, 234,
	-1, 52,
	123, 903,
	-2, 897,
	-1, 53,
	123, 904,
	-2, 817,
	-1, 275,
	123, 907,
	-2, 901,
	-1, 276,
	123, 904,
	-2, 902,
	-1, 432,
	61, 475,
	-2, 472,
	-1, 462,
	123, 905,
	-2, 328,
	-1, 584,
	123, 905,
	-2, 328,
	-1, 605,
	286, 914,
	-2, 805,
	-1, 659,
	286, 914,
	-2, 546,
	-1, 693,
	5, 36,
	-2, 14,
	-1, 699,
	5, 36,
	-2, 16,
	-1, 842,
	286, 914,
	-2, 546,
	-1, 1012,
	286, 914,
	-2, 410,
	-1, 1081,
	286, 914,
	-2, 546,
	-1, 1143,
	286, 914,
	-2, 805,
	-1, 1261,
	5, 37,
	-2, 679,
	-1, 1342,
	5, 36,
	-2, 15,
	-1, 1358,
	198, 64,
	-2, 602,
	-1, 1396,
	286, 914,
	-2, 214,
	-1, 1397,
	286, 914,
	-2, 214,
	-1, 1599,
	90, 899,
	-2, 887,
	-1, 1696,
	57, 50,
	59, 50,
	-2, 52,
	-1, 1878,
	5, 36,
	-2, 856,
	-1, 1903,
	5, 36,
	-2, 59,
	-1, 1948,
	59, 1048,
	60, 1048,
	-2, 532,
	-1, 1990,
	5, 37,
	-2, 857,
	-1, 2024,
	5, 36,
	-2, 859,
	-1, 2046,
	5, 37,
	-2, 860,
}

const yyPrivate = 57344

const yyLast = 11578

var yyAct = [...]int16{
	586, 567, 1798, 1896, 1999, 1816, 596, 1941, 1094, 1947,
	1942, 1938, 31, 706, 1718, 1866, 420, 1901, 48, 49,
	50, 1799, 1824, 789, 1559, 1116, 1130, 1325, 1057, 1731,
	1567, 1716, 77, 77, 77, 77, 1778, 1128, 1117, 1593,
	1730, 1888, 496, 148, 151, 152, 1596, 1706, 1791, 1131,
	1365, 1110, 919, 1590, 71, 1360, 1586, 1172, 1574, 687,
	1331, 907, 1611, 1336, 1263, 1011, 730, 1578, 986, 950,
	31, 27, 1254, 1577, 1583, 244, 1042, 642, 816, 246,
	648, 424, 229, 1054, 1478, 1469, 934, 248, 963, 124,
	124, 124, 124, 214, 56, 565, 896, 1175, 1113, 73,
	832, 427, 262, 557, 542, 178, 433, 566, 459, 157,
	1039, 61, 824, 263, 461, 197, 468, 1499, 216, 485,
	1005, 916, 173, 9, 1315, 1089, 212, 788, 1683, 128,
	128, 128, 128, 35, 892, 1174, 168, 578, 271, 866,
	686, 649, 170, 1074, 1090, 768, 1721, 258, 259, 1210,
	63, 253, 630, 736, 869, 1173, 1314, 153, 633, 155,
	758, 434, 435, 768, 550, 272, 77, 127, 127, 127,
	127, 851, 167, 272, 551, 431, 2047, 231, 232, 233,
	234, 275, 58, 411, 55, 428, 457, 125, 125, 125,
	125, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 447,
	766, 767, 759, 760, 761, 762, 763, 764, 765, 758,
	1979, 270, 768, 479, 64, 65, 696, 1523, 1524, 418,
	409, 1062, 1063, 124, 252, 2044, 1926, 643, 256, 1219,
	260, 261, 215, 175, 508, 509, 1218, 268, 1897, 2037,
	1556, 1257, 412, 1978, 1925, 1513, 415, 1243, 432, 1649,
	66, 1732, 516, 1733, 759, 760, 761, 762, 763, 764,
	765, 758, 1971, 128, 768, 194, 1663, 1834, 437, 38,
	530, 58, 644, 55, 500, 501, 502, 503, 1632, 476,
	1972, 1973, 881, 453, 1719, 1835, 1836, 880, 451, 487,
	39, 1914, 40, 218, 1913, 1214, 888, 1915, 220, 803,
	1506, 127, 488, 230, 1051, 410, 491, 222, 494, 495,
	696, 1497, 1145, 1134, 1133, 678, 677, 247, 507, 1278,
	470, 125, 513, 1276, 1135, 515, 1844, 1750, 1346, 519,
	520, 473, 154, 475, 474, 504, 1847, 1136, 149, 1848,
	1919, 1918, 752, 35, 1910, 755, 1589, 528, 267, 1724,
	472, 770, 771, 772, 773, 774, 775, 776, 38, 753,
	754, 751, 777, 778, 779, 780, 757, 756, 766, 767,
	759, 760, 761, 762, 763, 764, 765, 758, 529, 39,
	768, 40, 746, 434, 435, 1114, 1845, 646, 1345, 1746,
	52, 45, 462, 463, 464, 466, 1548, 1109, 1479, 1480,
	941, 469, 467, 477, 478, 757, 756, 766, 767, 759,
	760, 761, 762, 763, 764, 765, 758, 272, 41, 768,
	1588, 552, 769, 951, 543, 756, 766, 767, 759, 760,
	761, 762, 763, 764, 765, 758, 1792, 1547, 768, 465,
	769, 702, 703, 1129, 1391, 632, 2021, 761, 762, 763,
	764, 765, 758, 1141, 1463, 768, 1255, 745, 744, 1498,
	1573, 479, 1749, 539, 1147, 1148, 570, 696, 769, 1145,
	1134, 1133, 1211, 1212, 1143, 746, 46, 38, 725, 738,
	1662, 1135, 1664, 541, 737, 450, 852, 35, 449, 769,
	35, 714, 635, 747, 1136, 434, 435, 230, 39, 1286,
	40, 158, 150, 1137, 1138, 1140, 893, 41, 715, 1139,
	58, 444, 55, 534, 429, 36, 37, 192, 689, 1484,
	535, 536, 1268, 914, 1267, 1655, 549, 1350, 727, 707,
	727, 663, 272, 712, 666, 716, 553, 669, 670, 272,
	540, 769, 456, 1219, 745, 744, 631, 1213, 652, 1843,
	629, 748, 1924, 745, 744, 1756, 543, 510, 1075, 694,
	174, 694, 746, 634, 219, 636, 744, 225, 470, 645,
	227, 746, 506, 665, 545, 647, 1518, 35, 711, 2038,
	708, 745, 744, 746, 1934, 720, 747, 237, 238, 239,
	240, 241, 1587, 690, 35, 1788, 1077, 38, 472, 746,
	1129, 704, 694, 243, 36, 37, 1392, 1393, 1394, 62,
	1141, 28, 745, 744, 735, 742, 471, 476, 39, 1525,
	40, 1147, 1148, 67, 900, 522, 41, 441, 935, 936,
	746, 1143, 709, 47, 698, 1900, 1361, 1362, 717, 707,
	710, 705, 192, 718, 442, 1479, 1480, 193, 1899, 693,
	77, 699, 849, 1146, 1667, 688, 733, 769, 739, 191,
	1137, 1138, 1140, 272, 194, 804, 1139, 544, 787, 473,
	1898, 475, 474, 747, 44, 159, 160, 837, 43, 35,
	745, 744, 747, 1825, 689, 885, 481, 480, 161, 42,
	60, 537, 707, 543, 747, 414, 769, 1993, 746, 1828,
	490, 440, 1864, 1985, 861, 890, 1735, 124, 876, 875,
	747, 6, 7, 1535, 913, 769, 1078, 847, 915, 838,
	807, 1529, 806, 36, 37, 543, 826, 827, 828, 829,
	830, 831, 769, 662, 1531, 694, 531, 845, 632, 166,
	1721, 747, 543, 868, 873, 874, 41, 128, 545, 792,
	793, 52, 891, 55, 470, 856, 1861, 877, 964, 879,
	886, 757, 756, 766, 767, 759, 760, 761, 762, 763,
	764, 765, 758, 899, 193, 768, 58, 164, 55, 498,
	497, 745, 744, 1526, 1546, 127, 993, 992, 223, 1517,
	1916, 194, 672, 1002, 1002, 564, 731, 732, 734, 746,
	1886, 948, 1004, 1817, 1819, 125, 1734, 272, 272, 747,
	1146, 1233, 938, 910, 1637, 748, 1232, 942, 1657, 993,
	1044, 688, 694, 275, 884, 898, 26, 837, 694, 933,
	1829, 1827, 1826, 694, 745, 744, 748, 1690, 38, 944,
	643, 544, 1231, 36, 37, 945, 430, 1058, 438, 439,
	970, 673, 746, 1006, 1007, 745, 744, 1230, 1229, 39,
	1789, 40, 1228, 38, 968, 969, 967, 643, 1025, 838,
	990, 1043, 1076, 746, 1295, 426, 1227, 1226, 226, 1225,
	21, 228, 16, 1224, 39, 644, 40, 1818, 1000, 1003,
	689, 1222, 1008, 1009, 787, 17, 1691, 24, 1038, 1515,
	1111, 1058, 1646, 696, 1043, 1145, 1134, 1133, 1018, 1112,
	747, 169, 644, 1151, 943, 18, 19, 1135, 999, 939,
	1082, 1308, 1083, 163, 1470, 1052, 446, 1055, 1056, 1108,
	1136, 1066, 1098, 940, 1527, 1528, 1530, 1532, 1533, 426,
	745, 744, 937, 748, 426, 1471, 1016, 543, 955, 957,
	958, 1070, 654, 656, 1341, 1068, 956, 1470, 746, 30,
	1603, 745, 744, 747, 650, 651, 1017, 1036, 1037, 1661,
	1216, 864, 863, 1694, 964, 425, 489, 489, 1471, 746,
	445, 1481, 1053, 436, 747, 1790, 1739, 41, 757, 756,
	766, 767, 759, 760, 761, 762, 763, 764, 765, 758,
	426, 850, 768, 437, 1472, 58, 1239, 55, 1244, 1245,
	1246, 493, 41, 1468, 966, 492, 35, 489, 1738, 1862,
	745, 744, 883, 728, 1234, 882, 854, 688, 783, 176,
	1091, 14, 514, 512, 511, 484, 1129, 1909, 746, 987,
	35, 988, 1077, 1970, 437, 1766, 1141, 481, 480, 805,
	1264, 805, 769, 1223, 878, 505, 1250, 1147, 1148, 1908,
	452, 893, 437, 35, 1220, 35, 991, 1143, 671, 747,
	628, 1242, 908, 748, 2031, 2030, 1076, 908, 2029, 272,
	1304, 2016, 804, 627, 36, 37, 1966, 748, 689, 543,
	747, 626, 38, 1274, 696, 275, 1137, 1138, 1140, 1275,
	1992, 748, 1139, 625, 1273, 1931, 748, 1304, 1927, 36,
	37, 724, 1851, 39, 554, 40, 20, 443, 1294, 748,
	1329, 1876, 1616, 1292, 1939, 1006, 1877, 1885, 22, 23,
	1306, 25, 1703, 748, 724, 1752, 1358, 694, 1387, 1388,
	1389, 724, 1751, 1396, 1538, 694, 437, 1400, 1324, 747,
	908, 1674, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
	1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
	1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
	1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
	1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
	1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
	543, 543, 1322, 1340, 1351, 1330, 1464, 1318, 965, 1316,
	1467, 1321, 1398, 1494, 1399, 688, 1313, 1339, 1323, 1354,
	1355, 1356, 1338, 1363, 1326, 1342, 1319, 1320, 1058, 543,
	1328, 41, 724, 1628, 1304, 1627, 1146, 637, 757, 756,
	766, 767, 759, 760, 761, 762, 763, 764, 765, 758,
	1700, 1779, 768, 1352, 1624, 1623, 1487, 653, 1311, 1459,
	1460, 1466, 724, 1618, 1310, 659, 660, 661, 1702, 769,
	1086, 1703, 35, 587, 1001, 585, 589, 590, 591, 592,
	724, 1617, 743, 588, 593, 1795, 1789, 1699, 1488, 724,
	1539, 1085, 1485, 1486, 1703, 1519, 1701, 1779, 1699, 1885,
	1490, 1084, 1473, 1474, 1475, 1476, 1477, 697, 1483, 697,
	724, 1489, 1071, 748, 1493, 1025, 1304, 1303, 707, 724,
	1241, 724, 1093, 1501, 908, 1092, 1067, 1503, 36, 37,
	887, 1542, 908, 1061, 1025, 1500, 865, 1551, 740, 696,
	1537, 1507, 1508, 909, 1505, 1071, 782, 784, 785, 786,
	790, 1565, 858, 1491, 272, 1018, 855, 795, 795, 795,
	795, 795, 795, 795, 997, 748, 724, 949, 679, 1570,
	1569, 2023, 659, 668, 1018, 724, 723, 527, 1576, 682,
	681, 1604, 1568, 808, 809, 810, 811, 812, 813, 814,
	815, 437, 818, 1016, 820, 821, 822, 823, 825, 825,
	825, 825, 825, 825, 825, 893, 841, 842, 843, 844,
	1612, 1612, 1016, 1017, 1550, 1290, 1572, 1514, 675, 676,
	1575, 675, 674, 1288, 965, 69, 68, 1344, 1149, 1304,
	1885, 527, 1017, 667, 1558, 664, 1988, 1540, 696, 1562,
	1602, 1544, 526, 997, 1543, 527, 1703, 1304, 1833, 1071,
	1613, 1614, 543, 543, 1727, 1708, 1711, 1712, 1713, 1709,
	1584, 1710, 1714, 1289, 1549, 1889, 1890, 1644, 748, 1071,
	1269, 1287, 908, 724, 853, 659, 684, 683, 532, 680,
	437, 1270, 1271, 697, 1272, 1961, 1959, 1922, 1767, 1349,
	437, 220, 1277, 1621, 1279, 1280, 1281, 1889, 1890, 1282,
	1283, 245, 1284, 1285, 1462, 1461, 1327, 249, 1238, 1237,
	1209, 1619, 1620, 757, 756, 766, 767, 759, 760, 761,
	762, 763, 764, 765, 758, 1088, 272, 768, 1492, 769,
	1087, 1065, 58, 946, 55, 912, 795, 795, 889, 795,
	795, 795, 795, 795, 795, 795, 795, 795, 795, 795,
	795, 795, 795, 795, 1633, 846, 1671, 1625, 1626, 741,
	692, 1675, 1708, 1711, 1712, 1713, 1709, 691, 1710, 1714,
	697, 658, 711, 657, 1939, 1723, 790, 77, 1653, 1654,
	1652, 790, 272, 1651, 655, 638, 1692, 555, 517, 1737,
	458, 454, 423, 242, 1656, 1658, 1659, 1660, 250, 251,
	1215, 1629, 1681, 1680, 236, 235, 224, 1151, 11, 1892,
	694, 1307, 543, 1754, 685, 518, 1688, 255, 254, 38,
	162, 156, 1697, 1554, 1810, 1743, 1895, 1682, 1715, 1811,
	1722, 1725, 1894, 1059, 124, 1728, 1808, 1695, 1696, 1807,
	39, 1809, 40, 1812, 1741, 1712, 1713, 1806, 2017, 1670,
	1977, 1672, 1103, 1104, 1777, 1689, 1745, 1677, 819, 1668,
	422, 1081, 70, 1740, 1332, 499, 53, 1755, 641, 1986,
	871, 1753, 1742, 413, 128, 935, 936, 269, 32, 1333,
	1099, 1588, 1107, 640, 1100, 525, 59, 1101, 902, 523,
	903, 904, 905, 993, 1800, 145, 146, 147, 521, 165,
	1040, 1095, 1822, 901, 1726, 1615, 1570, 1784, 1045, 906,
	701, 1785, 127, 548, 1984, 1772, 1665, 1830, 272, 1096,
	1796, 893, 1560, 1768, 1561, 1769, 272, 1349, 59, 1983,
	1933, 1787, 125, 1058, 59, 1794, 32, 1326, 1608, 1607,
	1757, 264, 265, 266, 1236, 694, 795, 795, 795, 1606,
	2039, 1605, 1813, 795, 795, 795, 795, 1831, 1058, 1793,
	1832, 1842, 1802, 1803, 1797, 1805, 1545, 1801, 41, 1841,
	1804, 1609, 1840, 1522, 1521, 547, 546, 1630, 1235, 448,
	895, 897, 1698, 1775, 713, 911, 1863, 1776, 8, 1,
	1364, 13, 1081, 12, 1865, 257, 1869, 437, 795, 1262,
	58, 1870, 55, 802, 769, 582, 1846, 1748, 568, 1998,
	1904, 1902, 1881, 1581, 1883, 1823, 59, 1882, 1359, 694,
	59, 1853, 59, 59, 1585, 1884, 1673, 1357, 1390, 59,
	1676, 276, 1482, 59, 59, 999, 1893, 594, 59, 421,
	483, 199, 1309, 455, 15, 1555, 1343, 700, 524, 1465,
	694, 1770, 917, 1911, 726, 272, 54, 57, 182, 1917,
	172, 719, 416, 1849, 1850, 36, 37, 993, 1800, 1940,
	1949, 1902, 29, 10, 1943, 59, 993, 1800, 1221, 59,
	183, 181, 180, 179, 177, 697, 1950, 38, 1952, 1570,
	1570, 1569, 486, 697, 1936, 1937, 1830, 1956, 217, 57,
	1954, 1928, 1955, 1568, 221, 57, 80, 694, 39, 1878,
	40, 82, 81, 1058, 79, 1758, 78, 59, 1967, 76,
	74, 59, 59, 75, 72, 1591, 1736, 533, 1397, 1073,
	781, 1912, 1150, 1598, 1349, 1685, 862, 1981, 1349, 1561,
	1903, 1976, 1987, 1946, 1335, 1982, 1932, 1560, 1293, 1041,
	707, 569, 1995, 707, 707, 707, 1774, 2012, 954, 581,
	580, 1935, 579, 1997, 1875, 750, 2008, 2009, 2010, 1580,
	2011, 1270, 1693, 1707, 1705, 1704, 1891, 1887, 1579, 58,
	1648, 55, 1860, 1949, 2027, 1943, 1560, 57, 1102, 2022,
	1930, 57, 2026, 57, 57, 2028, 1969, 1945, 2019, 1950,
	57, 1553, 277, 1142, 277, 57, 1953, 2035, 1132, 57,
	894, 1105, 5, 52, 1144, 55, 1127, 4, 3, 694,
	1943, 2040, 1126, 1125, 1124, 1123, 2042, 1121, 1122, 2043,
	993, 1800, 2045, 1119, 1120, 1118, 41, 1097, 695, 1581,
	2, 795, 795, 1854, 0, 0, 57, 0, 0, 0,
	482, 0, 0, 694, 0, 0, 0, 0, 0, 0,
	1782, 0, 1868, 0, 0, 1349, 38, 0, 1685, 994,
	995, 996, 998, 795, 795, 795, 795, 0, 0, 0,
	1996, 0, 0, 421, 0, 0, 0, 39, 57, 40,
	0, 51, 57, 57, 0, 0, 0, 0, 0, 0,
	38, 1534, 0, 1046, 1047, 1048, 1049, 556, 1050, 2024,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1685,
	0, 39, 0, 40, 0, 639, 0, 59, 0, 0,
	0, 1060, 0, 36, 37, 1920, 1921, 0, 0, 0,
	0, 0, 1582, 2041, 0, 0, 0, 0, 0, 1069,
	0, 1072, 0, 0, 0, 1581, 1079, 1080, 0, 1561,
	1581, 1581, 1581, 1581, 1581, 1782, 0, 0, 0, 0,
	0, 0, 0, 1642, 1581, 0, 696, 0, 1145, 1134,
	1133, 1106, 0, 0, 59, 59, 0, 0, 0, 0,
	1135, 1640, 748, 59, 0, 0, 0, 0, 421, 1906,
	0, 0, 0, 1136, 0, 421, 0, 0, 0, 0,
	0, 0, 0, 0, 748, 41, 729, 0, 0, 0,
	1560, 0, 0, 0, 0, 0, 0, 0, 0, 749,
	1240, 171, 0, 0, 0, 791, 1581, 757, 756, 766,
	767, 759, 760, 761, 762, 763, 764, 765, 758, 41,
	1622, 768, 1581, 0, 0, 0, 0, 0, 2013, 757,
	756, 766, 767, 759, 760, 761, 762, 763, 764, 765,
	758, 0, 0, 768, 1258, 1259, 817, 0, 0, 0,
	795, 0, 1261, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 1266, 1685, 0, 0, 0, 0, 482, 1647,
	0, 0, 0, 0, 0, 0, 0, 0, 848, 1129,
	0, 1349, 36, 37, 696, 559, 1145, 1134, 1133, 1141,
	0, 1291, 0, 0, 0, 0, 0, 1297, 1135, 421,
	1147, 1148, 0, 0, 0, 1299, 1300, 0, 1301, 1302,
	1143, 1136, 0, 0, 0, 1349, 36, 37, 0, 0,
	59, 1782, 59, 1312, 0, 482, 57, 0, 0, 0,
	0, 1561, 0, 0, 57, 59, 0, 0, 1717, 1137,
	1138, 1140, 0, 0, 0, 1139, 0, 52, 0, 55,
	0, 0, 34, 0, 0, 0, 0, 0, 0, 460,
	1561, 0, 52, 1350, 462, 463, 464, 466, 0, 0,
	0, 0, 0, 469, 467, 477, 478, 35, 0, 33,
	0, 947, 0, 0, 0, 952, 953, 58, 0, 55,
	0, 0, 0, 795, 0, 0, 795, 0, 795, 0,
	795, 0, 795, 795, 0, 0, 0, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 0, 1129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1141, 0, 0,
	0, 791, 0, 0, 38, 0, 791, 0, 1147, 1148,
	0, 0, 0, 276, 421, 0, 0, 0, 1143, 38,
	0, 1010, 1035, 0, 1582, 39, 0, 40, 0, 1582,
	1582, 1582, 1582, 1582, 38, 0, 0, 872, 872, 872,
	39, 0, 40, 1717, 38, 1820, 0, 1137, 1138, 1140,
	0, 0, 0, 1139, 0, 39, 0, 40, 0, 1146,
	0, 482, 1064, 57, 0, 39, 0, 40, 769, 0,
	0, 1350, 0, 0, 0, 0, 57, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 0, 0, 0,
	769, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 1582, 0, 0, 0, 2014,
	0, 0, 0, 0, 0, 0, 0, 1879, 1880, 1171,
	0, 1582, 0, 0, 0, 0, 0, 0, 1520, 757,
	756, 766, 767, 759, 760, 761, 762, 763, 764, 765,
	758, 0, 0, 768, 1536, 0, 1256, 0, 697, 0,
	0, 0, 0, 41, 0, 0, 0, 0, 471, 476,
	0, 0, 1552, 54, 0, 0, 0, 0, 41, 0,
	0, 757, 756, 766, 767, 759, 760, 761, 762, 763,
	764, 765, 758, 41, 277, 768, 872, 872, 0, 0,
	872, 872, 872, 41, 0, 0, 54, 1146, 0, 0,
	0, 0, 0, 1944, 0, 697, 0, 0, 1260, 0,
	0, 473, 0, 475, 474, 0, 0, 0, 0, 872,
	872, 872, 872, 0, 1962, 1963, 1964, 0, 481, 480,
	757, 756, 766, 767, 759, 760, 761, 762, 763, 764,
	765, 758, 0, 0, 768, 872, 0, 1783, 0, 0,
	36, 37, 59, 0, 1296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 37, 482, 0, 0,
	1305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	36, 37, 0, 0, 0, 276, 0, 0, 0, 0,
	36, 37, 0, 0, 59, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1334, 1337, 0, 0,
	0, 0, 0, 0, 1944, 0, 0, 2025, 0, 0,
	0, 0, 1347, 0, 1634, 0, 1635, 1636, 0, 0,
	0, 1638, 1639, 1641, 1643, 1645, 0, 0, 0, 0,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 1944,
	0, 697, 1395, 0, 817, 0, 59, 1666, 1171, 1171,
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
	1171, 1171, 1171, 1171, 1171, 1171, 0, 872, 0, 0,
	769, 0, 0, 1298, 0, 0, 0, 794, 796, 797,
	798, 799, 800, 801, 0, 0, 1744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 872,
	0, 0, 769, 209, 0, 482, 0, 0, 920, 212,
	213, 1765, 932, 0, 0, 857, 463, 464, 466, 0,
	1504, 0, 922, 0, 469, 467, 477, 478, 0, 0,
	0, 1773, 0, 0, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1516, 0, 0, 207,
	0, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 769, 465, 0, 0, 0, 0, 57, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1541, 0, 1815,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1557, 0, 0, 921, 0,
	0, 0, 59, 59, 0, 0, 0, 0, 0, 0,
	421, 0, 0, 0, 0, 0, 0, 1852, 203, 0,
	198, 208, 1855, 1856, 1857, 1858, 1859, 0, 205, 204,
	0, 0, 0, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 0, 0, 0, 0, 959, 791, 791, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
	1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
	1457, 1458, 0, 1923, 0, 0, 0, 0, 1929, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 471,
	476, 0, 0, 0, 0, 696, 0, 1145, 1134, 1133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1135,
	0, 0, 0, 0, 1965, 59, 0, 0, 1650, 0,
	201, 0, 1136, 57, 57, 0, 202, 0, 0, 0,
	0, 0, 421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 473, 1980, 475, 474, 0, 0, 1678, 1679,
	1337, 0, 0, 0, 0, 0, 0, 1989, 1990, 1991,
	0, 0, 0, 0, 918, 1994, 0, 0, 0, 59,
	59, 0, 0, 696, 0, 1145, 1134, 1133, 0, 59,
	59, 0, 0, 0, 0, 0, 0, 1135, 421, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	1136, 211, 0, 0, 0, 0, 1247, 1248, 1249, 0,
	0, 0, 0, 1171, 1251, 1252, 1253, 0, 0, 0,
	0, 2032, 2033, 2034, 0, 206, 0, 0, 1129, 0,
	0, 0, 920, 0, 0, 0, 932, 0, 1141, 0,
	0, 0, 0, 0, 0, 0, 922, 0, 0, 1147,
	1148, 0, 0, 0, 2046, 1686, 0, 0, 794, 1143,
	0, 0, 59, 0, 0, 696, 0, 1145, 1134, 1133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1135,
	0, 0, 0, 0, 1780, 0, 57, 0, 1137, 1138,
	1140, 59, 1136, 0, 1139, 59, 59, 0, 0, 0,
	59, 59, 59, 59, 59, 0, 1129, 0, 0, 0,
	0, 0, 59, 0, 59, 0, 1141, 0, 59, 0,
	0, 872, 921, 0, 421, 0, 0, 1147, 1148, 0,
	0, 0, 421, 0, 0, 1839, 0, 1143, 0, 0,
	57, 57, 0, 0, 0, 0, 0, 1564, 0, 0,
	57, 1720, 0, 59, 0, 0, 0, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 1137, 1138, 1140, 0,
	0, 0, 1139, 1867, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1873, 0, 1874,
	1350, 0, 59, 0, 0, 0, 0, 0, 1129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1141, 0,
	696, 0, 1145, 1134, 1133, 0, 0, 0, 0, 1147,
	1148, 0, 0, 0, 1135, 0, 0, 0, 0, 1143,
	0, 0, 0, 1771, 0, 0, 0, 1136, 1146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1137, 1138,
	1140, 421, 57, 0, 1139, 0, 57, 57, 0, 0,
	54, 57, 57, 57, 57, 57, 1951, 0, 0, 1747,
	0, 0, 1350, 1814, 0, 57, 0, 1957, 1975, 1821,
	1958, 0, 0, 1960, 0, 0, 0, 0, 0, 0,
	0, 1495, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1146, 1974, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 0, 0, 0,
	0, 0, 1867, 1509, 1510, 1511, 1512, 0, 1217, 0,
	0, 0, 0, 1129, 0, 791, 0, 57, 0, 0,
	0, 0, 0, 1141, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 57, 1147, 1148, 1348, 0, 0, 0,
	0, 0, 0, 0, 1143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2018, 791, 0, 0, 0, 1951,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1137, 1138, 1140, 0, 0, 1146, 1139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1350, 394, 383,
	0, 342, 396, 310, 330, 405, 332, 333, 368, 289,
	351, 0, 327, 308, 54, 0, 0, 313, 282, 322,
	283, 311, 344, 54, 309, 0, 385, 354, 1563, 0,
	0, 403, 0, 359, 0, 0, 0, 0, 0, 346,
	387, 349, 378, 341, 369, 298, 358, 398, 328, 364,
	399, 0, 0, 0, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 363, 393, 324, 295,
	408, 0, 367, 281, 361, 0, 0, 287, 290, 404,
	391, 318, 317, 0, 696, 0, 1145, 1134, 1133, 0,
	345, 350, 374, 338, 0, 0, 0, 0, 1135, 0,
	0, 0, 0, 1720, 0, 0, 314, 0, 357, 0,
	1631, 1136, 294, 288, 0, 343, 0, 0, 0, 297,
	0, 315, 375, 1146, 278, 381, 388, 340, 0, 0,
	392, 337, 336, 0, 0, 0, 0, 0, 0, 329,
	274, 38, 406, 395, 347, 386, 312, 323, 0, 319,
	0, 0, 0, 320, 321, 356, 370, 0, 0, 0,
	0, 0, 39, 377, 40, 0, 0, 0, 0, 0,
	0, 0, 0, 1348, 0, 0, 0, 54, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 279, 316, 379,
	382, 302, 366, 291, 325, 372, 326, 348, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1129, 1592, 0,
	0, 0, 0, 0, 0, 0, 0, 1141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1147, 1148,
	0, 0, 0, 0, 0, 0, 0, 0, 1143, 0,
	0, 1600, 0, 1759, 0, 0, 1760, 0, 1761, 0,
	1762, 0, 1763, 1764, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1137, 1138, 1140,
	0, 0, 0, 1139, 0, 284, 0, 0, 0, 0,
	41, 285, 306, 389, 0, 0, 0, 0, 1601, 1599,
	1595, 1594, 0, 0, 0, 0, 365, 0, 0, 0,
	0, 1597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 305, 299, 300, 352, 353, 400,
	401, 402, 376, 296, 0, 303, 304, 0, 384, 0,
	0, 0, 355, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 331, 280, 335, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 0, 0, 339, 334,
	360, 362, 371, 380, 390, 397, 373, 36, 37, 394,
	383, 0, 342, 396, 310, 330, 405, 332, 333, 368,
	289, 351, 0, 327, 308, 0, 0, 0, 313, 282,
	322, 283, 311, 344, 0, 309, 0, 385, 354, 0,
	0, 0, 403, 0, 359, 0, 0, 1146, 0, 0,
	346, 387, 349, 378, 341, 369, 298, 358, 398, 328,
	364, 399, 0, 0, 0, 35, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 393, 324,
	295, 408, 0, 367, 281, 361, 0, 0, 287, 290,
	404, 391, 318, 317, 0, 0, 0, 1684, 0, 0,
	0, 345, 350, 374, 338, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 357,
	0, 0, 0, 294, 288, 0, 343, 833, 0, 0,
	297, 0, 315, 375, 0, 278, 381, 388, 340, 0,
	0, 392, 337, 336, 0, 0, 0, 0, 0, 0,
	329, 274, 38, 406, 395, 347, 386, 312, 323, 0,
	319, 0, 835, 0, 320, 321, 356, 370, 0, 0,
	0, 0, 0, 39, 377, 40, 833, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 279, 316,
	379, 382, 302, 366, 291, 325, 372, 326, 348, 307,
	0, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 34, 0, 0, 0, 1729,
	0, 0, 0, 0, 0, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 0, 0, 0, 0, 0,
	35, 0, 33, 0, 0, 989, 836, 0, 0, 0,
	0, 0, 1600, 0, 83, 834, 0, 0, 0, 0,
	840, 839, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 0, 0, 284, 0, 0, 0,
	0, 41, 285, 306, 389, 836, 0, 0, 0, 1601,
	1599, 0, 0, 83, 834, 0, 0, 365, 0, 840,
	839, 0, 1597, 193, 0, 0, 0, 0, 0, 185,
	0, 184, 0, 188, 189, 192, 0, 38, 0, 186,
	194, 0, 0, 0, 301, 305, 299, 300, 352, 353,
	400, 401, 402, 376, 296, 0, 303, 304, 39, 384,
	40, 0, 0, 355, 0, 0, 0, 407, 84, 0,
	0, 0, 0, 0, 0, 331, 280, 335, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 0, 0, 339,
	334, 360, 362, 371, 380, 390, 397, 373, 36, 37,
	394, 383, 0, 342, 396, 310, 330, 405, 332, 333,
	368, 289, 351, 0, 327, 308, 0, 84, 0, 313,
	282, 322, 283, 311, 344, 0, 309, 0, 385, 354,
	0, 0, 0, 403, 0, 359, 0, 0, 0, 0,
	0, 346, 387, 349, 378, 341, 369, 298, 358, 398,
	328, 364, 399, 0, 0, 0, 35, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 363, 393,
	324, 295, 408, 190, 367, 281, 361, 0, 0, 287,
	290, 404, 391, 318, 317, 696, 41, 1145, 1134, 1133,
	0, 0, 345, 350, 374, 338, 0, 0, 0, 1135,
	0, 0, 0, 0, 0, 0, 0, 0, 314, 0,
	357, 0, 1136, 0, 294, 288, 0, 343, 0, 0,
	0, 297, 0, 315, 375, 0, 278, 381, 388, 340,
	0, 0, 392, 337, 336, 0, 0, 0, 0, 0,
	0, 329, 274, 38, 406, 395, 347, 386, 312, 323,
	0, 319, 0, 0, 0, 320, 321, 356, 370, 0,
	0, 0, 0, 0, 39, 377, 40, 1968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 36, 37, 0, 187, 0, 286, 279,
	316, 379, 382, 302, 366, 291, 325, 372, 326, 348,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1147,
	1148, 0, 0, 0, 0, 0, 0, 0, 0, 1143,
	0, 0, 0, 1600, 1366, 1367, 1368, 1369, 1370, 1371,
	1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381,
	1382, 1383, 1384, 1385, 1386, 0, 0, 0, 1137, 1138,
	1140, 0, 0, 0, 1139, 0, 0, 284, 0, 0,
	0, 0, 41, 285, 306, 389, 0, 0, 0, 0,
	1601, 1599, 1115, 0, 0, 0, 0, 0, 365, 0,
	0, 0, 0, 1597, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 305, 299, 300, 352,
	353, 400, 401, 402, 376, 296, 0, 303, 304, 0,
	384, 0, 0, 0, 355, 0, 0, 0, 407, 0,
	0, 0, 0, 0, 0, 0, 331, 280, 335, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 0, 0,
	339, 334, 360, 362, 371, 380, 390, 397, 373, 36,
	37, 394, 383, 0, 342, 396, 310, 330, 405, 332,
	333, 368, 289, 351, 0, 327, 308, 0, 0, 0,
	313, 282, 322, 283, 311, 344, 0, 309, 0, 385,
	354, 0, 106, 0, 403, 0, 359, 0, 1146, 0,
	0, 0, 346, 387, 349, 378, 341, 369, 298, 358,
	398, 328, 364, 399, 0, 0, 0, 52, 0, 55,
	35, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	393, 324, 295, 408, 0, 367, 281, 361, 0, 0,
	287, 290, 404, 391, 318, 317, 0, 0, 0, 0,
	0, 0, 0, 345, 350, 374, 338, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1317, 0, 314,
	0, 357, 0, 0, 0, 294, 288, 0, 343, 91,
	0, 0, 297, 0, 315, 375, 0, 278, 381, 388,
	340, 0, 0, 392, 337, 336, 0, 0, 0, 0,
	0, 0, 329, 274, 38, 406, 395, 347, 386, 312,
	323, 0, 319, 0, 107, 0, 320, 321, 356, 370,
	0, 0, 0, 0, 0, 39, 377, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	279, 316, 379, 382, 302, 366, 291, 325, 372, 326,
	348, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 0, 139, 126,
	0, 140, 141, 142, 144, 143, 108, 109, 110, 114,
	112, 111, 113, 85, 87, 0, 83, 86, 92, 88,
	89, 90, 104, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 105, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 0, 0, 0, 0, 284, 0,
	0, 0, 0, 41, 285, 306, 389, 0, 0, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 0, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 305, 299, 300,
	352, 353, 400, 401, 402, 376, 296, 0, 303, 304,
	0, 384, 0, 0, 0, 355, 0, 0, 0, 407,
	84, 0, 0, 0, 0, 0, 0, 331, 280, 335,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 0,
	0, 339, 334, 360, 362, 371, 380, 390, 397, 373,
	36, 37, 394, 383, 0, 342, 396, 310, 330, 405,
	332, 333, 368, 289, 351, 0, 327, 308, 0, 0,
	0, 313, 282, 322, 283, 311, 344, 0, 309, 0,
	385, 354, 0, 0, 0, 403, 0, 359, 0, 0,
	0, 0, 0, 346, 387, 349, 378, 341, 369, 298,
	358, 398, 328, 364, 399, 0, 0, 0, 35, 0,
	721, 0, 722, 0, 0, 0, 0, 0, 0, 0,
	363, 393, 324, 295, 408, 0, 367, 281, 361, 0,
	0, 287, 290, 404, 391, 318, 317, 0, 696, 0,
	1145, 1134, 1133, 0, 345, 350, 374, 338, 0, 0,
	0, 0, 1135, 0, 0, 0, 0, 0, 0, 0,
	314, 0, 357, 0, 0, 1136, 294, 288, 0, 343,
	0, 0, 0, 297, 0, 315, 375, 0, 278, 381,
	388, 340, 0, 0, 392, 337, 336, 0, 0, 0,
	0, 0, 0, 329, 274, 38, 406, 395, 347, 386,
	312, 323, 0, 319, 0, 0, 0, 320, 321, 356,
	370, 745, 744, 0, 0, 0, 39, 377, 40, 1566,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 279, 316, 379, 382, 302, 366, 291, 325, 372,
	326, 348, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1147, 1148, 0, 0, 0, 0, 0, 0,
	0, 0, 1143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1137, 1138, 1140, 0, 0, 0, 1139, 0, 284,
	747, 0, 0, 0, 41, 285, 306, 389, 0, 0,
	0, 0, 0, 273, 0, 1571, 0, 0, 0, 0,
	365, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 305, 299,
	300, 352, 353, 400, 401, 402, 376, 296, 0, 303,
	304, 0, 384, 0, 0, 0, 355, 0, 0, 0,
	407, 0, 0, 0, 0, 0, 0, 0, 331, 280,
	335, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	0, 0, 339, 334, 360, 362, 371, 380, 390, 397,
	373, 36, 37, 394, 383, 0, 342, 396, 310, 330,
	405, 332, 333, 368, 289, 351, 0, 327, 308, 0,
	0, 0, 313, 282, 322, 283, 311, 344, 0, 309,
	0, 385, 354, 0, 0, 0, 403, 0, 359, 0,
	0, 1146, 0, 0, 346, 387, 349, 378, 341, 369,
	298, 358, 398, 328, 364, 399, 0, 417, 0, 35,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 419,
	0, 363, 393, 324, 295, 408, 0, 367, 281, 361,
	0, 0, 287, 290, 404, 391, 318, 317, 0, 696,
	0, 1145, 1134, 1133, 0, 345, 350, 374, 338, 0,
	0, 0, 0, 1135, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 357, 0, 0, 1136, 294, 288, 0,
	343, 0, 0, 0, 297, 0, 315, 375, 0, 278,
	381, 388, 340, 0, 0, 392, 337, 336, 0, 0,
	0, 0, 0, 0, 329, 274, 38, 406, 395, 347,
	386, 312, 323, 0, 319, 0, 0, 0, 320, 321,
	356, 370, 745, 744, 0, 0, 0, 39, 377, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 279, 316, 379, 382, 302, 366, 291, 325,
	372, 326, 348, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1147, 1148, 0, 0, 0, 0, 0,
	0, 0, 0, 1143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1137, 1138, 1140, 0, 0, 0, 1139, 0,
	284, 747, 0, 0, 0, 41, 285, 306, 389, 0,
	0, 0, 0, 0, 273, 0, 1571, 0, 0, 0,
	0, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 305,
	299, 300, 352, 353, 400, 401, 402, 376, 296, 0,
	303, 304, 0, 384, 0, 0, 0, 355, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 331,
	280, 335, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 0, 0, 339, 334, 360, 362, 371, 380, 390,
	397, 373, 36, 37, 394, 383, 0, 342, 396, 310,
	330, 405, 332, 333, 368, 289, 351, 0, 327, 308,
	0, 0, 0, 313, 282, 322, 283, 311, 344, 0,
	309, 0, 385, 354, 0, 0, 0, 403, 0, 359,
	0, 0, 1146, 0, 0, 346, 387, 349, 378, 341,
	369, 298, 358, 398, 328, 364, 399, 0, 0, 0,
	35, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 393, 324, 295, 408, 0, 367, 281,
	361, 0, 0, 287, 290, 404, 391, 318, 317, 0,
	696, 0, 1145, 1134, 1133, 0, 345, 350, 374, 338,
	0, 0, 0, 0, 1135, 0, 0, 0, 0, 0,
	1669, 0, 314, 0, 357, 0, 0, 1136, 294, 288,
	0, 343, 0, 0, 0, 297, 0, 315, 375, 0,
	278, 381, 388, 340, 0, 0, 392, 337, 336, 0,
	0, 0, 0, 0, 0, 329, 274, 38, 406, 395,
	347, 386, 312, 323, 0, 319, 0, 0, 0, 320,
	321, 356, 370, 745, 744, 0, 0, 0, 39, 377,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 279, 316, 379, 382, 302, 366, 291,
	325, 372, 326, 348, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1147, 1148, 0, 0, 0, 0,
	0, 0, 0, 0, 1143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1137, 1138, 1140, 0, 0, 0, 1139,
	0, 284, 747, 0, 0, 0, 41, 285, 306, 389,
	0, 0, 0, 0, 0, 273, 0, 1610, 0, 0,
	0, 0, 365, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	305, 299, 300, 352, 353, 400, 401, 402, 376, 296,
	0, 303, 304, 0, 384, 0, 0, 0, 355, 0,
	0, 0, 407, 0, 0, 0, 0, 0, 0, 0,
	331, 280, 335, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 0, 0, 339, 334, 360, 362, 371, 380,
	390, 397, 373, 36, 37, 394, 383, 0, 342, 396,
	310, 330, 405, 332, 333, 368, 289, 351, 0, 327,
	308, 0, 0, 0, 313, 282, 322, 283, 311, 344,
	0, 309, 0, 385, 354, 0, 0, 0, 403, 0,
	359, 0, 0, 1146, 0, 0, 346, 387, 349, 378,
	341, 369, 298, 358, 398, 328, 364, 399, 0, 0,
	0, 52, 0, 55, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 393, 324, 295, 408, 0, 367,
	281, 361, 0, 0, 287, 290, 404, 391, 318, 317,
	0, 696, 0, 1145, 1134, 1133, 0, 345, 350, 374,
	338, 0, 0, 0, 0, 1135, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 357, 0, 0, 1136, 294,
	288, 0, 343, 0, 0, 0, 297, 0, 315, 375,
	0, 278, 381, 388, 340, 0, 0, 392, 337, 336,
	0, 0, 0, 0, 0, 0, 329, 274, 38, 406,
	395, 347, 386, 312, 323, 0, 319, 0, 0, 0,
	320, 321, 356, 370, 745, 744, 0, 0, 0, 39,
	377, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 279, 316, 379, 382, 302, 366,
	291, 325, 372, 326, 348, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1147, 1148, 0, 0, 0,
	0, 0, 0, 0, 0, 1143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1137, 1138, 1140, 0, 0, 0,
	1139, 0, 284, 747, 0, 0, 0, 41, 285, 306,
	389, 0, 0, 0, 0, 0, 273, 0, 1571, 0,
	0, 0, 0, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 305, 299, 300, 352, 353, 400, 401, 402, 376,
	296, 0, 303, 304, 0, 384, 0, 0, 0, 355,
	0, 0, 0, 407, 0, 0, 0, 0, 0, 0,
	0, 331, 280, 335, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 0, 0, 339, 334, 360, 362, 371,
	380, 390, 397, 373, 36, 37, 394, 383, 0, 342,
	396, 310, 330, 405, 332, 333, 368, 289, 351, 0,
	327, 308, 0, 0, 0, 313, 282, 322, 283, 311,
	344, 0, 309, 0, 385, 354, 0, 0, 0, 403,
	0, 359, 0, 0, 1146, 0, 0, 346, 387, 349,
	378, 341, 369, 298, 358, 398, 328, 364, 399, 0,
	0, 0, 35, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 363, 393, 324, 295, 408, 0,
	367, 281, 361, 0, 0, 287, 290, 404, 391, 318,
	317, 538, 696, 0, 1145, 1134, 1133, 0, 345, 350,
	374, 338, 0, 0, 0, 0, 1135, 0, 0, 0,
	0, 0, 0, 0, 314, 0, 357, 0, 0, 1136,
	294, 288, 0, 343, 0, 0, 0, 297, 0, 315,
	375, 0, 278, 381, 388, 340, 0, 0, 392, 337,
	336, 0, 0, 0, 0, 1905, 0, 329, 274, 38,
	406, 395, 347, 386, 312, 323, 0, 319, 0, 0,
	0, 320, 321, 356, 370, 0, 0, 0, 0, 0,
	39, 377, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 279, 316, 379, 382, 302,
	366, 291, 325, 372, 326, 348, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1147, 1148, 0, 0,
	0, 0, 0, 0, 0, 0, 1143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1137, 1138, 1140, 0, 0,
	0, 1139, 0, 284, 0, 0, 0, 0, 41, 285,
	306, 389, 0, 0, 0, 0, 0, 273, 0, 1907,
	0, 0, 0, 0, 365, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 305, 299, 300, 352, 353, 400, 401, 402,
	376, 296, 0, 303, 304, 0, 384, 0, 0, 0,
	355, 0, 0, 0, 407, 0, 0, 0, 0, 0,
	0, 0, 331, 280, 335, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 0, 0, 339, 334, 360, 362,
	371, 380, 390, 397, 373, 36, 37, 394, 383, 0,
	342, 396, 310, 330, 405, 332, 333, 368, 289, 351,
	0, 327, 308, 0, 0, 0, 313, 282, 322, 283,
	311, 344, 0, 309, 0, 385, 354, 0, 0, 0,
	403, 0, 359, 0, 0, 1146, 0, 0, 346, 387,
	349, 378, 341, 369, 298, 358, 398, 328, 364, 399,
	0, 0, 0, 35, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 393, 324, 295, 408,
	0, 367, 281, 361, 0, 0, 287, 290, 404, 391,
	318, 317, 696, 0, 1145, 1134, 1133, 0, 0, 345,
	350, 374, 338, 0, 0, 0, 1135, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 357, 0, 1136,
	0, 294, 288, 0, 343, 0, 0, 0, 297, 0,
	315, 375, 0, 278, 381, 388, 340, 0, 0, 392,
	337, 336, 0, 0, 0, 0, 0, 0, 329, 274,
	38, 406, 395, 347, 386, 312, 323, 0, 319, 0,
	0, 0, 320, 321, 356, 370, 0, 0, 0, 0,
	0, 39, 377, 40, 1871, 1872, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 279, 316, 379, 382,
	302, 366, 291, 325, 372, 326, 348, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1147, 1148, 0, 0,
	0, 0, 0, 0, 0, 0, 1143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1137, 1138, 1140, 0, 0,
	0, 1139, 0, 0, 284, 0, 0, 0, 0, 41,
	285, 306, 389, 0, 0, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 0, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 305, 299, 300, 352, 353, 400, 401,
	402, 376, 296, 0, 303, 304, 0, 384, 0, 0,
	0, 355, 0, 0, 0, 407, 0, 0, 0, 0,
	0, 0, 0, 331, 280, 335, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 0, 0, 339, 334, 360,
	362, 371, 380, 390, 397, 373, 36, 37, 394, 1948,
	0, 342, 396, 310, 330, 405, 332, 333, 368, 289,
	351, 0, 327, 308, 0, 0, 0, 313, 282, 322,
	283, 311, 344, 0, 309, 0, 385, 354, 0, 0,
	0, 403, 0, 359, 0, 1146, 0, 0, 0, 346,
	387, 349, 378, 341, 369, 298, 358, 398, 328, 364,
	399, 437, 0, 0, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 363, 393, 324, 295,
	408, 0, 367, 281, 361, 0, 0, 287, 290, 404,
	391, 318, 317, 696, 0, 1145, 1134, 1133, 0, 0,
	345, 350, 374, 338, 0, 0, 0, 1135, 0, 0,
	0, 0, 0, 0, 0, 0, 314, 0, 357, 0,
	1136, 0, 294, 288, 0, 343, 0, 0, 0, 297,
	0, 315, 375, 0, 278, 381, 388, 340, 0, 0,
	392, 337, 336, 0, 0, 0, 0, 0, 0, 329,
	0, 38, 406, 395, 347, 386, 312, 323, 0, 319,
	0, 0, 0, 320, 321, 356, 370, 0, 0, 0,
	0, 0, 39, 377, 40, 2036, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 279, 316, 379,
	382, 302, 366, 291, 325, 372, 326, 348, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1147, 1148, 0,
	0, 0, 0, 0, 0, 0, 0, 1143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1137, 1138, 1140, 0,
	0, 0, 1139, 0, 0, 284, 0, 0, 0, 0,
	41, 285, 306, 389, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 365, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 305, 299, 300, 352, 353, 400,
	401, 402, 376, 296, 0, 303, 304, 0, 384, 0,
	0, 0, 355, 0, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 0, 331, 280, 335, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 0, 0, 339, 334,
	360, 362, 371, 380, 390, 397, 373, 36, 37, 394,
	383, 0, 342, 396, 310, 330, 405, 332, 333, 368,
	289, 351, 0, 327, 308, 0, 0, 0, 313, 282,
	322, 283, 311, 344, 0, 309, 0, 385, 354, 0,
	0, 0, 403, 0, 359, 0, 1146, 0, 0, 0,
	346, 387, 349, 378, 341, 369, 298, 358, 398, 328,
	364, 399, 0, 0, 0, 58, 0, 55, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 393, 324,
	295, 408, 0, 367, 281, 361, 0, 0, 287, 290,
	404, 391, 318, 317, 696, 0, 1145, 1134, 1133, 0,
	0, 345, 350, 374, 338, 0, 0, 0, 1135, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 357,
	0, 1136, 0, 294, 288, 0, 343, 0, 0, 0,
	297, 0, 315, 375, 0, 278, 381, 388, 340, 0,
	0, 392, 337, 336, 0, 0, 0, 0, 0, 0,
	329, 0, 38, 406, 395, 347, 386, 312, 323, 0,
	319, 0, 0, 0, 320, 321, 356, 370, 0, 0,
	0, 0, 0, 39, 377, 40, 2020, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 279, 316,
	379, 382, 302, 366, 291, 325, 372, 326, 348, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1147, 1148,
	0, 0, 0, 0, 0, 0, 0, 0, 1143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1137, 1138, 1140,
	0, 0, 0, 1139, 0, 0, 284, 0, 0, 0,
	0, 41, 285, 306, 389, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 305, 299, 300, 352, 353,
	400, 401, 402, 376, 296, 0, 303, 304, 0, 384,
	0, 0, 0, 355, 0, 0, 0, 407, 0, 0,
	0, 0, 0, 0, 0, 331, 280, 335, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 0, 0, 339,
	334, 360, 362, 371, 380, 390, 397, 373, 36, 37,
	394, 383, 0, 342, 396, 310, 330, 405, 332, 333,
	368, 289, 351, 0, 327, 308, 0, 0, 0, 313,
	282, 322, 283, 311, 344, 0, 309, 0, 385, 354,
	0, 0, 0, 403, 0, 359, 0, 1146, 0, 0,
	0, 346, 387, 349, 378, 341, 369, 298, 358, 398,
	328, 364, 399, 0, 0, 0, 35, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 363, 393,
	324, 295, 408, 0, 367, 281, 361, 0, 0, 287,
	290, 404, 391, 318, 317, 0, 0, 0, 0, 0,
	0, 0, 345, 350, 374, 338, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 314, 0,
	357, 0, 0, 0, 294, 288, 0, 343, 0, 0,
	0, 297, 0, 315, 375, 0, 278, 381, 388, 340,
	0, 1014, 392, 337, 336, 0, 0, 0, 0, 0,
	0, 329, 0, 38, 406, 395, 347, 386, 312, 323,
	0, 319, 0, 0, 0, 320, 321, 356, 370, 0,
	0, 0, 0, 0, 39, 377, 40, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 279,
	316, 379, 382, 302, 366, 291, 325, 372, 326, 348,
	307, 0, 0, 0, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 0, 139, 1019, 0, 140, 141,
	142, 144, 143, 1023, 0, 1015, 0, 1027, 1026, 1028,
	1013, 1030, 0, 0, 0, 1034, 1031, 1033, 1032, 0,
	1029, 0, 0, 0, 0, 0, 0, 0, 0, 1020,
	1021, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1022, 1024, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 284, 0, 0,
	0, 0, 41, 285, 306, 389, 0, 0, 0, 0,
	0, 696, 0, 1145, 1134, 1133, 0, 0, 365, 0,
	0, 0, 0, 0, 0, 1135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1136, 0,
	0, 0, 0, 0, 0, 301, 305, 299, 300, 352,
	353, 400, 401, 402, 376, 296, 0, 303, 304, 0,
	384, 0, 0, 0, 355, 0, 0, 0, 407, 0,
	0, 0, 0, 0, 0, 0, 331, 280, 335, 0,
	0, 0, 0, 0, 562, 0, 292, 293, 0, 0,
	339, 334, 360, 362, 371, 380, 390, 397, 373, 36,
	37, 561, 0, 0, 0, 0, 560, 0, 0, 0,
	0, 0, 0, 606, 0, 607, 0, 0, 0, 0,
	0, 0, 0, 597, 598, 0, 0, 0, 0, 0,
	0, 0, 0, 437, 0, 0, 52, 587, 584, 585,
	589, 590, 591, 592, 1129, 0, 0, 588, 593, 477,
	478, 563, 0, 0, 1141, 0, 558, 576, 0, 0,
	605, 0, 0, 0, 0, 1147, 1148, 0, 0, 0,
	0, 0, 0, 0, 0, 1143, 0, 0, 0, 0,
	0, 0, 0, 0, 573, 574, 0, 0, 0, 0,
	622, 0, 575, 0, 0, 1012, 572, 577, 0, 0,
	0, 0, 0, 0, 1137, 1138, 1140, 0, 0, 0,
	1139, 0, 0, 696, 620, 1145, 1134, 1133, 0, 0,
	0, 0, 0, 38, 0, 0, 0, 1135, 1115, 0,
	1014, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1136, 0, 0, 0, 39, 0, 40, 0, 0, 696,
	0, 1145, 1134, 1133, 0, 583, 0, 0, 0, 0,
	0, 0, 0, 1135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2015, 0, 0, 0, 0,
	0, 0, 0, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 0, 139, 1019, 0, 140, 141, 142,
	144, 143, 1023, 0, 1015, 0, 1027, 1026, 1028, 1013,
	1030, 1781, 0, 0, 1034, 1031, 1033, 1032, 608, 1029,
	0, 0, 0, 0, 0, 0, 1129, 0, 1020, 1021,
	0, 0, 0, 0, 1146, 0, 1141, 0, 0, 0,
	624, 0, 609, 610, 0, 0, 0, 1147, 1148, 1022,
	1024, 0, 41, 0, 0, 0, 0, 1143, 0, 0,
	0, 0, 1129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1141, 595, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1147, 1148, 0, 1137, 1138, 1140, 0,
	0, 0, 1139, 1143, 0, 611, 621, 617, 618, 615,
	616, 614, 613, 612, 623, 599, 600, 601, 602, 604,
	1203, 0, 481, 480, 603, 0, 0, 0, 0, 0,
	0, 0, 1137, 1138, 1140, 0, 0, 0, 1139, 0,
	0, 0, 0, 0, 0, 0, 0, 1166, 1165, 0,
	35, 0, 1164, 0, 1167, 1168, 1169, 1170, 0, 36,
	37, 619, 1186, 0, 0, 0, 0, 0, 1189, 1188,
	1187, 0, 0, 1193, 1194, 1195, 1196, 1198, 1197, 1161,
	1162, 1163, 0, 0, 0, 0, 1191, 1192, 0, 1190,
	0, 0, 0, 0, 1158, 1157, 0, 0, 1152, 1153,
	1154, 1155, 0, 1156, 0, 1159, 0, 0, 0, 0,
	0, 0, 1160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1205,
	0, 1204, 1208, 0, 0, 0, 0, 38, 0, 1206,
	0, 0, 0, 0, 0, 0, 1146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 39, 0,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 0, 139, 0,
	0, 140, 141, 142, 144, 143, 0, 0, 0, 0,
	0, 0, 0, 1182, 1181, 0, 0, 0, 562, 0,
	0, 0, 0, 1176, 1183, 1184, 1185, 0, 1177, 1178,
	1179, 1180, 0, 0, 0, 561, 0, 0, 0, 0,
	560, 0, 0, 0, 0, 0, 0, 606, 0, 607,
	0, 0, 0, 0, 0, 0, 41, 597, 598, 0,
	0, 0, 0, 0, 0, 1837, 0, 437, 0, 0,
	52, 587, 584, 585, 589, 590, 591, 592, 0, 0,
	0, 588, 593, 477, 478, 563, 1838, 0, 0, 0,
	558, 576, 0, 696, 605, 1145, 1134, 1133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1135, 0, 1200,
	1199, 1201, 1202, 0, 0, 0, 0, 0, 573, 574,
	1136, 0, 0, 0, 622, 0, 575, 0, 0, 571,
	572, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 0, 0, 0, 0, 620, 0,
	0, 0, 0, 36, 37, 0, 1207, 38, 867, 0,
	561, 0, 0, 0, 0, 560, 0, 0, 0, 0,
	0, 0, 606, 0, 607, 0, 0, 0, 39, 0,
	40, 0, 597, 598, 0, 0, 0, 0, 0, 583,
	0, 0, 437, 0, 0, 52, 587, 584, 585, 589,
	590, 591, 592, 0, 0, 0, 588, 593, 477, 478,
	563, 0, 0, 0, 0, 558, 576, 0, 0, 605,
	0, 0, 0, 0, 0, 0, 1786, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1141, 0, 0, 0,
	0, 0, 0, 573, 574, 870, 0, 1147, 1148, 622,
	0, 575, 0, 0, 571, 572, 577, 1143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 620, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 0, 0, 0, 1137, 1138, 1140, 0,
	0, 0, 1139, 0, 624, 0, 609, 610, 0, 0,
	0, 0, 0, 39, 0, 40, 41, 0, 0, 0,
	1571, 0, 0, 0, 583, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 611,
	621, 617, 618, 615, 616, 614, 613, 612, 623, 599,
	600, 601, 602, 604, 0, 0, 481, 480, 603, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	0, 0, 0, 36, 37, 619, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 609, 610, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 0, 696, 1146, 1145, 1134, 1133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1135,
	0, 0, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 611, 621, 617, 618, 615, 616,
	614, 613, 612, 623, 599, 600, 601, 602, 604, 0,
	0, 481, 480, 603, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 561, 0, 0, 0, 0, 560, 1687, 0, 0,
	0, 0, 0, 606, 0, 607, 0, 0, 36, 37,
	619, 0, 0, 597, 598, 0, 0, 0, 0, 0,
	0, 0, 0, 437, 0, 748, 52, 587, 584, 585,
	589, 590, 591, 592, 0, 0, 0, 588, 593, 477,
	478, 563, 0, 0, 0, 0, 558, 576, 1129, 696,
	605, 1145, 1134, 1133, 0, 0, 0, 0, 1141, 0,
	0, 0, 0, 1135, 0, 0, 0, 0, 0, 1147,
	1148, 0, 0, 0, 573, 574, 1136, 0, 0, 1143,
	622, 0, 575, 0, 0, 571, 572, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	0, 0, 0, 0, 620, 0, 0, 0, 1137, 1138,
	1140, 0, 0, 38, 1139, 0, 561, 0, 0, 0,
	0, 560, 0, 0, 0, 0, 0, 0, 606, 0,
	607, 0, 0, 0, 39, 0, 40, 0, 597, 598,
	0, 0, 0, 0, 0, 583, 0, 0, 437, 0,
	0, 52, 587, 584, 585, 589, 590, 591, 592, 0,
	0, 0, 588, 593, 477, 478, 563, 0, 0, 0,
	0, 558, 576, 0, 0, 605, 0, 0, 0, 0,
	0, 0, 1129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1141, 0, 0, 0, 0, 0, 0, 573,
	574, 870, 0, 1147, 1148, 622, 0, 575, 0, 0,
	571, 572, 577, 1143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 608, 620,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 0,
	0, 0, 1137, 1138, 1140, 0, 0, 0, 1139, 0,
	624, 0, 609, 610, 0, 0, 0, 0, 1146, 39,
	0, 40, 41, 0, 0, 0, 0, 0, 0, 0,
	583, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 595, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 611, 621, 617, 618, 615,
	616, 614, 613, 612, 623, 599, 600, 601, 602, 604,
	0, 0, 481, 480, 603, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 0, 0, 0, 36,
	37, 619, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 624, 0, 609, 610, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 0,
	0, 0, 1146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	611, 621, 617, 618, 615, 616, 614, 613, 612, 623,
	599, 600, 601, 602, 604, 0, 0, 481, 480, 603,
	0, 0, 0, 0, 0, 696, 0, 0, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 561, 0, 0, 0, 0,
	560, 0, 0, 0, 36, 37, 619, 606, 0, 607,
	0, 0, 0, 0, 0, 0, 0, 597, 598, 0,
	0, 0, 0, 0, 0, 0, 0, 437, 0, 0,
	52, 587, 584, 585, 589, 590, 591, 592, 0, 0,
	0, 588, 593, 477, 478, 563, 0, 0, 0, 0,
	558, 576, 0, 0, 605, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 573, 574,
	0, 0, 0, 0, 622, 0, 575, 0, 0, 571,
	572, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 0, 0, 0, 0, 620, 0,
	0, 0, 0, 0, 0, 0, 0, 38, 0, 0,
	561, 0, 0, 0, 0, 560, 0, 0, 0, 0,
	0, 0, 606, 0, 607, 0, 0, 0, 39, 0,
	40, 0, 597, 598, 0, 0, 0, 0, 0, 583,
	0, 0, 437, 0, 0, 52, 587, 584, 585, 589,
	590, 591, 592, 0, 0, 0, 588, 593, 477, 478,
	563, 0, 0, 0, 0, 558, 576, 0, 0, 605,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 574, 0, 0, 0, 0, 622,
	0, 575, 0, 0, 571, 572, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 620, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 624, 0, 609, 610, 0, 0,
	0, 0, 0, 39, 0, 40, 41, 0, 0, 0,
	0, 0, 0, 0, 583, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 611,
	621, 617, 618, 615, 616, 614, 613, 612, 623, 599,
	600, 601, 602, 604, 0, 0, 481, 480, 603, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	0, 0, 0, 36, 37, 619, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 609, 610, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 611, 621, 617, 618, 615, 616,
	614, 613, 612, 623, 599, 600, 601, 602, 604, 0,
	0, 481, 480, 603, 960, 961, 962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 607, 0, 0, 0, 0, 0, 0,
	0, 597, 598, 0, 0, 0, 0, 0, 36, 37,
	619, 437, 0, 0, 52, 587, 584, 585, 589, 590,
	591, 592, 0, 0, 0, 588, 593, 477, 478, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 605, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 573, 574, 0, 0, 0, 0, 622, 0,
	575, 0, 0, 571, 572, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 0, 607, 0, 0, 0,
	0, 0, 620, 0, 597, 598, 0, 0, 0, 0,
	0, 38, 0, 0, 437, 0, 0, 52, 587, 584,
	585, 589, 590, 591, 592, 0, 0, 0, 588, 593,
	477, 478, 39, 0, 40, 0, 0, 0, 576, 0,
	0, 605, 0, 583, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 574, 0, 0, 0,
	0, 622, 0, 575, 0, 0, 571, 572, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 39, 608, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 624, 0,
	609, 610, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 595, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 611, 621, 617, 618, 615, 616, 614,
	613, 612, 623, 599, 600, 601, 602, 604, 0, 608,
	481, 480, 603, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 624, 0, 609, 610, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 0, 0, 0, 36, 37, 619,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 611, 621, 617, 618,
	615, 616, 614, 613, 612, 623, 599, 600, 601, 602,
	604, 35, 0, 481, 480, 603, 0, 0, 0, 606,
	0, 607, 0, 0, 0, 0, 0, 0, 0, 597,
	598, 0, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 0, 52, 587, 584, 585, 589, 590, 591, 592,
	36, 37, 619, 588, 593, 477, 478, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 605, 0, 0, 0,
	91, 0, 860, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	573, 574, 0, 0, 0, 0, 622, 0, 575, 0,
	0, 571, 572, 577, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	39, 0, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 0, 139,
	126, 0, 140, 141, 142, 144, 143, 108, 109, 110,
	114, 112, 111, 113, 85, 87, 0, 83, 86, 92,
	88, 89, 90, 104, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 105, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 0, 0, 0, 0, 859,
	0, 0, 0, 0, 608, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 624, 0, 609, 610,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 611, 621, 617, 618, 615, 616, 614, 613, 612,
	623, 599, 600, 601, 602, 604, 0, 0, 481, 480,
	603, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 37, 619,
}

var yyPact = [...]int16{
	585, -1000, -276, -1000, -1000, 1560, 747, 473, -1000, -1000,
	-1000, 2356, 555, 544, 540, 255, 497, 1002, 1962, 2366,
	557, 470, -1000, -234, -167, -1000, -99, 490, -1000, 1376,
	-1000, 4879, 4879, 4879, 4879, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 282, 1002, 1002, 470, 110, 470, 1575, 482,
	1574, 842, -1000, -1000, 654, -1000, 1684, 616, -1000, -1000,
	470, 2366, 830, -1000, -1000, -1000, -1000, 1928, 196, 4279,
	2908, -168, -2, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1443, 51, 1558, 1443, 1558,
	-1000, 1443, 1558, 45, 45, 45, 45, 45, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1557, 1556, -1000, 1443, 1443,
	1443, 1443, 1443, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1545, 1443, 1453, 76, 1459, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2908, 2908, 2908, 1552, 2366,
	1002, 1572, 1571, 2366, -247, 2366, 2366, 1743, -1000, -1000,
	-1000, 141, 2366, 1661, 6440, 4879, 8004, 2366, -1000, 1657,
	564, 2366, 5658, -1000, 1634, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1544, 919, 1002, 363, 114, 1432, 513, 640,
	493, 1056, 360, -1000, -1000, -1000, 907, -1000, 1002, -1000,
	1780, -1000, -1000, 337, -1000, 334, 794, 997, 2366, 1543,
	170, 1542, 2341, 970, -1000, -282, -1000, -7, -1000, 45,
	952, 1443, -1000, 45, 950, 45, 45, -1000, -1000, 660,
	1642, 660, 660, 660, 660, 992, 992, -129, -129, -1000,
	-1000, -1000, 969, -1000, -1000, 968, 1453, -1000, -1000, 967,
	2366, 1002, 1540, 1569, 2366, 2366, 1683, 489, -1000, -1000,
	1674, 1670, 1396, -1000, -1000, 140, -1000, -1000, 482, 1002,
	-1000, 613, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1431, -1000, 371, 560, 6831, 196, -1000, -1000,
	-1000, -1000, -1000, 516, -1000, 1776, 1704, 380, 24, -220,
	1053, -1000, -1000, 1539, -1000, -1000, 10424, -1000, 1042, 1030,
	-1000, 1022, 1009, 2, 1002, -1000, -225, 95, -9, -1000,
	-1000, 1432, -1000, 1537, 10424, 1668, -1000, 1647, 775, -1000,
	329, -1000, -255, -1000, -1000, 899, -1000, -255, -1000, -1000,
	-1000, 1432, -1000, 1536, 1525, -1000, 1523, -1000, -1000, 1432,
	1432, 1432, 610, -1000, -1000, -1000, -1000, -1000, 660, 1385,
	45, 660, 1383, 1323, 660, 660, -1000, -1000, 1007, 731,
	-1000, -1000, -1000, -1000, 1372, -1000, 1369, -1000, 69, 68,
	-1000, 1318, 1430, -1000, 1330, 1429, 1568, 690, 2366, 1519,
	1512, 1442, 470, 1442, 1701, 264, 2366, 1743, 429, 1743,
	482, 7222, 1002, 357, 1002, -1000, -1000, 496, 5267, -1000,
	-1000, 1326, -1000, 240, 1443, 10424, 623, 623, -230, 333,
	328, -220, 1432, 1511, -1000, 516, 776, -1000, 10424, 261,
	1432, 1432, 1432, 1432, 10299, -1000, -1000, 625, -1000, -1000,
	-1000, 10856, 10856, 10856, 10856, 10856, 10856, 10856, -1000, -1000,
	-1000, -1000, 13, -1000, -255, -1000, 986, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 599, 597, -1000, 1432, 1432, 1432,
	1432, 1432, 1432, 1432, 1432, 10424, 1432, 1627, 1432, 1432,
	1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 4146,
	1432, 1432, 1432, 1432, -1000, -1000, -1000, -1000, -1000, -1000,
	-220, 1507, -1000, -1000, -1000, 794, -1000, 10424, 429, 941,
	113, -1000, 1425, -1000, 961, 1306, 2882, 1302, -1000, 11150,
	-1000, -1000, -1000, 1059, -1000, 912, -1000, 911, 1286, 9464,
	9940, 9940, 7222, -1000, -1000, 660, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 45, 991, 45, -10, -15, -1000,
	960, -1000, 957, 690, 1002, 2366, 1280, 1424, -1000, 238,
	1490, 429, 516, -1000, 1716, 1785, -1000, 1442, 2366, -1000,
	487, 1692, -1000, -1000, 1700, -1000, 1423, -1000, -1000, 1328,
	1743, -1000, 1487, 1002, -1000, -1000, 373, 1002, -1000, -1000,
	-1000, -1000, -1000, 2881, 516, 1658, -1000, -1000, -1000, 882,
	863, -1000, -1000, 860, 224, 858, -1000, 1002, -220, 1485,
	10424, 516, 1317, 248, 10424, 10424, 875, -1000, -1000, 285,
	10763, 945, 766, 10856, 10856, 10856, 10856, 10856, 10856, 10856,
	10856, 10856, 10856, 10856, 10856, 10856, 10856, 10856, 978, 4097,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1005, -1000, 1442, 2326, 1059, 1059, 1059, 1315,
	10299, 502, 1221, 1221, 26, 10299, 26, 26, 26, 26,
	26, 72, -1000, -280, -1000, -1000, 6440, 7222, 9940, 9940,
	8765, 10424, 9940, 9940, 9940, 1686, 818, 502, 2326, 1699,
	1059, 1059, 1059, 1059, -1000, 1059, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 48, -1000, -1000, -1000, -1000, -1000,
	-1000, 9940, 9940, 9940, 9940, -1000, 1002, 1432, 776, 1283,
	-148, 10424, 1483, 775, -1000, -1000, 1276, -255, -1000, -1000,
	-1000, -168, -1000, -1000, -1000, -1000, 1059, 9940, 1263, -1000,
	-1000, 533, 593, 1263, 1263, 1432, -1000, 660, -1000, 660,
	-1000, -1000, 1251, 1241, 1220, 1482, 1477, -241, 952, 690,
	1275, 1272, 1694, 1713, 1442, 1673, 1618, -1000, 1059, 1667,
	1002, -1000, -1000, -1000, -1000, -1000, 202, 814, 1002, 8695,
	1382, -1000, 9089, 1462, 91, 407, 1554, 3255, 178, -1000,
	1003, 801, 990, 793, 789, 787, 786, 772, 768, 767,
	752, 726, 721, -1000, -1000, -1000, -1000, 1658, -1000, 1779,
	-1000, -1000, -1000, 1744, 1461, 1460, 516, 776, 1270, 2881,
	-1000, -109, 285, 486, -1000, -1000, 935, -1000, -1000, 2595,
	10856, 10856, 10856, -1000, -1000, -1000, -1000, 945, 10856, 10856,
	10856, 300, 2595, 2536, 93, 319, 26, 336, 336, 44,
	44, 44, 44, 44, 145, 145, -1000, -1000, -1000, -122,
	-1000, 1059, 1059, -1000, -1000, -1000, -1000, 10424, -1000, 1059,
	-1000, -255, 988, -1000, -1000, 987, 1432, -1000, 1263, 1263,
	465, 1421, 11181, 1443, -1000, 1443, 1459, 1453, -1000, 76,
	-1000, -1000, 89, 1443, 85, 1443, 1443, 1443, -1000, -1000,
	1443, 1443, -1000, 1443, 1443, 474, 1422, 1414, 1263, 9940,
	-1000, 785, -1000, 10424, 1059, 2366, -1000, -1000, -1000, -1000,
	-1000, -1000, 1263, 1059, 1420, 1263, 1263, 1267, -1000, 10424,
	248, 1565, -1000, -1000, 861, -1000, 1214, 1208, -1000, -1000,
	1263, 9940, -274, -1000, -1000, 979, -1000, -1000, 4876, -274,
	-274, 9940, -1000, -1000, -1000, -1000, -241, 690, 516, 1735,
	1458, 1180, 1735, 2881, 1655, 10424, 10424, 1716, -1000, 1442,
	-1000, -1000, 1686, -1000, -1000, 884, -1000, 1442, 1380, 192,
	105, 10424, -1000, 3484, -1000, 8695, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1716, 10424,
	-1000, -1000, -1000, -1000, -1000, 426, 4425, 1002, 1002, 1002,
	404, 10424, 1004, 10424, -1000, -1000, -1000, -1000, -1000, 2366,
	1087, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089,
	9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089,
	9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089,
	9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089,
	9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089,
	9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 516,
	516, 1457, 1456, 303, -1000, 1002, -1000, -136, 3255, 1002,
	-1000, 948, -1000, -1000, 868, 939, 868, 868, 868, 868,
	868, 207, 916, 454, -1000, 623, 623, 1002, 516, 1261,
	248, 2881, 1554, -1000, -1000, -1000, -1000, 2595, 2595, 2595,
	-1000, 300, 2595, 1143, -1000, 10856, 10856, 64, -1000, -1000,
	502, -1000, 58, -1000, -255, -1000, -1000, 8376, 978, 10424,
	-1000, 239, -1000, -1000, -1000, 1453, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 8376, 10856, 10856, 10856,
	10856, -115, 1400, 811, -1000, 10424, 702, -1000, -1000, -1000,
	-1000, -1000, -1000, 433, 1002, 776, -1000, 1774, -152, 559,
	-1000, -1000, -1000, -1000, -1000, 1432, -1000, -1000, 590, -1000,
	-1000, 1059, 1735, 1084, 1240, 2881, 10424, 429, -241, 2881,
	-1000, -1000, 1767, 684, 378, 1415, -1000, 601, 1694, 1059,
	1586, -1000, -1000, -123, 10424, 8695, 9893, 502, 9893, -1000,
	8695, 3339, 1694, 5352, 473, 449, 1749, 1411, 395, 137,
	-1000, -1000, -1000, 3703, 901, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1002, 1750, 1748, 1738, 1737, 6134, 10424, 10424, -1000, 1696,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1062, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1231,
	1213, 516, 516, 1445, 1432, 1205, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 794, 794, 1185, 1183, 2881,
	-1000, 1554, -1000, -1000, 10856, 2595, 2595, -19, -1000, 987,
	-1000, 1059, 1443, 1059, 755, -1000, -1000, -1000, 1059, 2142,
	2164, 1418, 883, 1432, -106, -1000, 502, 10424, 2366, -1000,
	248, 623, 623, -1000, -1000, -1000, 162, 802, 775, 775,
	904, 104, -1000, 1710, 491, 6049, -1000, 2881, 1735, 2881,
	1554, 502, 1091, 1735, 1554, -1000, 1625, 10424, 10424, 10424,
	-1000, 1655, -1000, 9940, -1000, -1000, -269, 502, 3484, 3788,
	-1000, -1000, 3247, 9759, -1000, 1655, 8695, 748, -1000, 807,
	-1000, 9893, 944, 2366, 1249, -1000, 1245, 1526, -1000, -1000,
	-1000, 1666, 210, 121, 1002, 151, 4879, -1000, -1000, 1695,
	1405, 4094, -58, -1000, -1000, -1000, 716, 583, 955, -1000,
	1640, -1000, -1000, 4425, 1653, -1000, -1000, -1000, -1000, -1000,
	9893, -1000, 1394, 1059, 814, 194, 9089, -1000, 246, 1082,
	1075, 516, 1002, -1000, 3255, -1000, -1000, 412, 2881, 1554,
	-1000, 2595, -1000, -1000, -1000, -1000, -1000, 10856, -1000, -1000,
	10856, -1000, 10856, -1000, 10856, -1000, 10856, 10856, 1059, 982,
	502, 1440, -1000, -1000, -1000, 775, -1000, 775, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1481, -1000, 1709, 1059, -1000,
	1554, 2881, -1000, -1000, -1000, 2881, -1000, 1621, 502, 502,
	-1000, -1000, 1296, 10424, 8933, -1000, -1000, -1000, -1000, 2318,
	9417, 456, 897, 273, 2366, -1000, 273, 1238, 1749, 2366,
	-1000, -1000, 2326, 1749, 1749, 1749, 1749, 1749, -1000, 1611,
	1603, -1000, 1600, 1588, 1607, 2366, 1073, 210, 749, 1432,
	-1000, 2366, -1000, 1666, 1693, -1000, 618, 4485, 1405, -58,
	1399, -1000, -43, -27, 9339, 7222, 660, -1000, -1000, -1000,
	-1000, -1000, 1002, 461, -1000, 103, 190, -1000, 119, -1000,
	123, 2881, 2881, 1052, 1059, -1000, 2366, 1554, -1000, 2494,
	2494, 2494, 2494, 2494, 656, -1000, -1000, 1002, -1000, -1000,
	-1000, 579, 10424, -1000, -1000, -1000, 1554, -1000, 1735, 1749,
	502, -1000, -1000, 7306, -1000, -1000, 10424, -1000, 10424, 9893,
	-1000, 1088, 1432, -1000, 1735, 1749, 1222, -1000, 1250, -1000,
	710, 1526, 1451, 1563, 1419, -1000, -1000, -1000, -1000, 1596,
	-1000, 1590, -1000, -1000, -1000, -1000, -125, 536, 514, 501,
	1002, -1000, 1442, 6916, -1000, -1000, 996, -1000, 129, -1000,
	-1000, -1000, 1399, -58, -20, -1000, -1000, -1000, -1000, 502,
	700, -1000, 1398, -1000, 9893, -1000, -1000, 122, -1000, 1554,
	1554, -1000, -1000, 1439, -1000, -1000, -1000, -1000, -1000, -1000,
	1059, 191, -140, 1048, 7222, 1046, -1000, 502, -1000, 1727,
	1397, 445, 8695, 6525, 5743, 1528, 2326, 1432, -1000, 7613,
	1002, 1716, 1222, -1000, 1735, 2326, 10424, -1000, -1000, 10424,
	1438, -1000, 10424, -1000, -1000, -1000, -1000, 1437, 1432, 1432,
	1432, 1027, -1000, -1000, -1000, 618, -1000, 4569, -1000, 980,
	-1000, -1000, -1000, -49, -35, -1000, 10424, 3169, -1000, -1000,
	-1000, -1000, 1002, -1000, 1617, -119, -157, -1000, -1000, -1000,
	1059, 10424, 1725, 1708, -1000, 304, 748, -1000, -1000, 1649,
	1068, 1387, -1000, -1000, 9815, 1059, 1041, -1000, -1000, 574,
	-1000, -1000, 1027, 1694, -1000, 1716, -1000, 502, 502, 429,
	502, -195, 429, 429, 429, 715, 1002, -1000, -1000, 2180,
	-1000, -1000, -1000, -1000, 502, 8897, 1021, -1000, 1615, -1000,
	-1000, -1000, -1000, 10424, 10424, 8088, 295, -1000, 1432, -1000,
	-1000, 1343, 8395, 1002, -1000, -1000, 1694, 1018, 1015, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1013, 1013,
	1013, 749, -1000, -1000, 7697, -1000, -1000, -124, 502, 1394,
	440, 1751, -1000, 1432, -1000, 1442, -1000, -1000, -1000, -1000,
	-1000, -195, -1000, -1000, -1000, -125, -1000, -141, -1000, 2326,
	1387, 1059, -1000, -1000, -191, 1381, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 2050, 127, 37, 2048, 2047, 2045, 2044, 2043, 2038,
	2037, 2035, 2034, 2033, 2032, 38, 26, 49, 25, 30,
	2028, 2027, 2026, 2024, 2022, 96, 2021, 2020, 2018, 2013,
	110, 2011, 1998, 1992, 1990, 72, 83, 139, 154, 1680,
	36, 31, 73, 67, 1988, 41, 1987, 1986, 58, 1985,
	47, 1984, 1983, 74, 1982, 1979, 5, 27, 103, 107,
	77, 1975, 1974, 95, 2325, 1972, 1970, 137, 1969, 1968,
	88, 23, 62, 7, 6, 10, 1961, 466, 1, 1959,
	76, 78, 1958, 1956, 1955, 134, 1954, 63, 86, 8,
	60, 1953, 13, 9, 125, 48, 17, 11, 2, 53,
	40, 1943, 21, 39, 29, 1941, 71, 1940, 111, 51,
	61, 16, 1676, 0, 46, 143, 1939, 1937, 1936, 1847,
	138, 14, 56, 68, 1935, 65, 100, 54, 99, 1934,
	1933, 1930, 1929, 57, 155, 135, 97, 1926, 1924, 1922,
	1921, 1916, 79, 1914, 478, 788, 116, 82, 42, 1908,
	1902, 93, 318, 75, 87, 335, 959, 1672, 1894, 1893,
	1892, 1891, 105, 1890, 66, 101, 28, 659, 1888, 1883,
	1882, 1872, 1871, 1870, 1868, 104, 1864, 140, 59, 295,
	121, 52, 1862, 1859, 1858, 1857, 80, 1856, 1855, 1854,
	69, 1853, 1852, 106, 81, 115, 108, 114, 1851, 1850,
	85, 84, 1842, 109, 113, 1838, 102, 98, 24, 385,
	55, 1837, 1834, 1828, 22, 1825, 1820, 1819, 3, 4,
	1818, 1817, 1816, 1815, 1813, 1809, 64, 1805, 156, 1804,
	15, 1803, 1801, 50, 1800, 1799, 1798, 1795, 1794, 795,
	1292, 1792, 1942, 122, 1791, 112,
}

var yyR1 = [...]uint8{
	0, 235, 236, 236, 1, 1, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
	21, 238, 238, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 28, 28, 7, 8, 8, 8, 241, 241,
	48, 48, 95, 95, 9, 9, 9, 9, 10, 10,
	10, 211, 211, 210, 212, 212, 213, 213, 215, 215,
	214, 214, 214, 214, 214, 214, 214, 216, 216, 216,
	216, 11, 11, 11, 11, 11, 205, 205, 205, 205,
	205, 12, 12, 208, 208, 208, 15, 15, 15, 15,
	16, 16, 17, 17, 17, 19, 19, 100, 100, 104,
	104, 104, 105, 105, 105, 105, 227, 227, 124, 124,
	237, 237, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 203, 203, 203, 203, 204, 204, 204, 204, 206,
	206, 207, 207, 207, 207, 207, 207, 209, 209, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	13, 13, 29, 29, 72, 72, 14, 110, 110, 184,
	184, 184, 185, 185, 185, 185, 185, 185, 187, 187,
	188, 188, 117, 117, 189, 189, 24, 169, 170, 170,
	170, 170, 170, 170, 170, 170, 156, 156, 156, 156,
	127, 127, 127, 127, 127, 127, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 195, 195, 195, 195, 195,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 197, 198, 199, 191, 191, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	146, 146, 146, 146, 146, 146, 190, 190, 186, 186,
	186, 186, 129, 129, 129, 129, 129, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 137, 134, 134,
	138, 135, 135, 139, 141, 142, 142, 153, 153, 154,
	154, 154, 136, 136, 140, 130, 130, 130, 130, 130,
	130, 130, 130, 128, 128, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 143, 143, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 155, 155,
	144, 144, 145, 145, 145, 152, 152, 152, 149, 149,
	150, 150, 151, 151, 151, 147, 147, 147, 148, 148,
	148, 158, 180, 180, 180, 182, 182, 183, 183, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 168, 168, 200, 200, 201, 201, 202,
	202, 179, 179, 179, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 167, 167, 177, 177, 178,
	178, 175, 175, 175, 175, 176, 162, 162, 162, 162,
	162, 163, 163, 164, 164, 164, 164, 159, 159, 160,
	160, 161, 161, 193, 193, 193, 231, 231, 231, 231,
	231, 231, 232, 232, 194, 194, 165, 165, 166, 166,
	173, 173, 173, 173, 243, 243, 171, 171, 171, 172,
	172, 172, 244, 25, 26, 26, 27, 27, 27, 32,
	32, 32, 30, 30, 31, 31, 37, 37, 36, 36,
	38, 38, 38, 38, 116, 116, 116, 115, 115, 228,
	228, 228, 228, 228, 40, 40, 41, 41, 42, 42,
	43, 43, 43, 218, 218, 217, 217, 219, 219, 219,
	219, 219, 219, 219, 219, 55, 55, 92, 92, 92,
	96, 96, 44, 44, 44, 44, 45, 45, 46, 46,
	47, 47, 122, 122, 121, 121, 121, 49, 49, 49,
	51, 50, 50, 50, 50, 52, 52, 54, 54, 53,
	53, 56, 56, 56, 56, 57, 57, 94, 94, 39,
	39, 39, 39, 39, 39, 39, 39, 107, 107, 59,
	59, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 69, 69, 69,
	69, 69, 69, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 35, 35, 70, 70, 70, 77,
	71, 71, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 67,
	67, 67, 67, 67, 67, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 245, 245,
	68, 68, 68, 68, 33, 33, 33, 33, 33, 123,
	123, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 126, 126, 126,
	126, 126, 126, 126, 126, 81, 81, 34, 34, 79,
	79, 80, 109, 109, 82, 82, 78, 78, 78, 78,
	220, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 60, 60, 83, 83, 84, 84, 229, 229, 230,
	85, 85, 86, 86, 87, 88, 88, 88, 89, 89,
	89, 89, 90, 90, 90, 62, 62, 62, 62, 62,
	62, 91, 91, 93, 93, 93, 93, 97, 97, 73,
	73, 75, 75, 74, 76, 98, 98, 102, 99, 99,
	103, 103, 103, 103, 103, 22, 23, 101, 101, 101,
	118, 118, 118, 108, 108, 106, 106, 113, 114, 114,
	114, 114, 114, 119, 119, 119, 120, 120, 221, 221,
	221, 222, 222, 222, 223, 223, 224, 225, 225, 226,
	234, 234, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 112, 112, 112, 112, 112, 112,
	239, 240,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	6, 1, 3, 3, 0, 1, 1, 1, 1, 3,
	1, 2, 3, 1, 2, 1, 1, 1, 2, 3,
	4, 2, 2, 2, 3, 5, 0, 2, 2, 2,
	2, 3, 5, 1, 2, 3, 7, 10, 1, 1,
	5, 5, 3, 5, 3, 1, 3, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	0, 3, 0, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 4, 2, 3, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 4, 1, 1, 0, 1, 2, 0, 3, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 4, 4, 0, 1,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 1, 2, 2, 3, 2,
	4, 2, 4, 2, 2, 3, 2, 3, 2, 7,
	9, 3, 3, 6, 9, 9, 6, 6, 8, 8,
	5, 8, 7, 4, 0, 2, 4, 6, 2, 4,
	2, 1, 1, 2, 1, 2, 2, 1, 1, 1,
	3, 1, 2, 1, 1, 2, 0, 4, 3, 4,
	3, 3, 3, 3, 3, 3, 3, 2, 4, 6,
	2, 3, 2, 3, 1, 3, 0, 2, 0, 2,
	2, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 3, 0, 1, 0, 5, 0,
	3, 5, 1, 1, 1, 1, 3, 3, 2, 2,
	2, 1, 1, 1, 1, 4, 5, 4, 4, 4,
	1, 2, 2, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 1, 3,
	0, 3, 0, 3, 3, 0, 3, 3, 0, 1,
	0, 1, 0, 2, 1, 0, 3, 3, 0, 1,
	2, 6, 0, 1, 4, 1, 2, 1, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 5, 3, 3, 2, 3, 2, 3,
	3, 2, 2, 3, 4, 1, 1, 1, 1, 1,
	3, 3, 2, 2, 4, 1, 2, 5, 5, 8,
	8, 13, 11, 1, 1, 2, 2, 10, 8, 9,
	7, 7, 5, 0, 1, 1, 0, 1, 1, 1,
	2, 2, 1, 2, 0, 3, 0, 1, 1, 3,
	0, 4, 1, 3, 2, 1, 1, 2, 1, 1,
	1, 1, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	3, 6, 4, 7, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 0, 4, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 8, 1, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 0, 4, 1,
	3, 3, 2, 3, 2, 1, 2, 0, 3, 1,
	1, 3, 4, 4, 4, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 4, 3, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 6, 2, 2, 2, 2, 2, 2,
	2, 3, 3, 1, 1, 1, 1, 2, 1, 4,
	5, 5, 5, 5, 6, 4, 4, 6, 6, 8,
	6, 6, 6, 8, 6, 8, 6, 8, 6, 8,
	9, 7, 5, 4, 4, 3, 3, 3, 1, 3,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 2, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 0, 2, 1, 1, 3, 5,
	3, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 0, 3, 0, 2, 1, 3, 1,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 1, 3, 1, 1, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 5, 3, 1, 3, 1, 2, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	2, 0, 2, 2, 0, 1, 4, 1, 3, 2,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -235, -1, -20, -21, -24, 126, 127, -236, 399,
	-169, 58, -231, -232, 284, -189, 135, 148, 168, 169,
	369, 133, 381, 382, 150, 384, 79, -106, 138, -170,
	-156, -113, -112, 63, 36, 61, 394, 395, 148, 169,
	171, 297, 134, 134, 134, 136, 221, 136, -113, -113,
	-78, 139, 61, -112, -119, 63, -53, -119, 61, -112,
	133, -108, 139, 384, 381, 382, 349, 133, 60, 59,
	-157, -127, -129, -128, -131, -130, -132, -113, -137, -138,
	-141, -139, -140, 257, 361, 254, 258, 255, 260, 261,
	262, 120, 259, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 263, 275, 33, 155, 247, 248,
	249, 252, 251, 253, 250, 276, 277, 278, 279, 280,
	281, 282, 283, 284, -133, -134, 240, -135, -136, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 239,
	242, 243, 244, 246, 245, -157, -157, -157, -113, 56,
	220, -113, -113, -108, 222, -108, 56, -203, 19, 193,
	194, 206, 56, 81, 123, 25, 123, -108, -53, 81,
	-53, 313, -173, -243, 364, 37, -156, -158, -162, -159,
	-160, -161, -174, -163, 142, 140, 150, 397, 144, 145,
	284, -167, 146, 134, 151, 73, 81, -195, 142, -198,
	56, 292, 298, 140, 151, 150, 397, 71, 143, 25,
	371, 373, 31, 32, -151, 400, 286, -149, 295, -144,
	58, -143, 256, -145, 58, -144, -145, -144, -145, -147,
	258, -147, -147, -147, -147, 58, 58, -144, -144, -144,
	-144, -144, 58, -144, -153, 58, -142, 241, -154, 58,
	56, 57, -53, -113, 56, 56, -53, -227, 394, 395,
	-53, -53, -206, -204, 8, 9, 10, 207, -53, 26,
	-114, -120, -113, 306, 147, -111, -112, -119, 131, 194,
	372, 80, 25, 27, 292, 298, 193, 84, 120, 16,
	85, 200, 381, 382, 119, 76, 350, 126, 52, 342,
	343, 340, 198, 352, 353, 341, 299, 205, 20, 31,
	10, 28, 153, 24, 113, 128, 195, 89, 88, 156,
	160, 161, 26, 154, 75, 201, 203, 19, 55, 146,
	11, 371, 13, 14, 386, 373, 139, 138, 100, 385,
	134, 50, 8, 122, 29, 97, 46, 151, 204, 48,
	98, 17, 344, 345, 34, 359, 162, 115, 53, 40,
	387, 81, 388, 73, 56, 313, 199, 79, 15, 51,
	163, 389, 202, 393, 99, 129, 349, 170, 49, 196,
	390, 132, 197, 6, 355, 33, 152, 47, 133, 300,
	391, 87, 137, 74, 5, 150, 9, 392, 54, 57,
	346, 347, 348, 38, 86, 12, 149, 363, 77, -127,
	-120, -111, -53, 26, 131, -53, -171, 59, -114, 71,
	-111, -112, 36, 58, -194, 56, 81, -165, -113, 151,
	-167, 61, 134, -193, 381, 382, -239, 58, -167, -167,
	61, 134, 151, 61, 151, 73, 19, -113, 9, 151,
	151, -194, 63, -53, 58, -191, 372, 16, 58, -196,
	58, -197, 63, 64, 65, 110, 66, 73, -146, 72,
	-59, 287, -67, 340, 343, 342, 288, 74, 75, -113,
	358, 357, -119, -199, 65, 401, -150, 296, -147, 65,
	-144, -147, 65, 61, -147, -147, -148, 120, 119, 33,
	-148, -148, -148, -148, -155, 63, -155, -152, 363, 364,
	-152, 65, 65, -153, 65, -53, -113, 58, 56, -53,
	-53, 25, 136, 25, -184, 25, 56, 59, 207, -203,
	-113, 123, 57, -117, 142, -162, 150, 131, 90, -114,
	-243, -178, -175, -113, 151, 58, 10, 9, 19, 146,
	140, 150, 397, -193, 61, 58, -39, -58, 81, -64,
	31, 26, 9, 76, -239, -63, -59, -78, -220, -76,
	-77, 120, 121, 109, 110, 117, 82, 122, -67, -65,
	-66, -68, -223, 180, 63, 64, -113, 62, 72, 65,
	66, 67, 68, 73, -119, 318, -74, 48, 49, 350,
	351, 352, 353, 359, 354, 85, 38, 40, 263, 287,
	288, 340, 348, 347, 346, 344, 345, 342, 343, 396,
	139, 341, 115, 349, 285, 61, 61, 61, 61, -193,
	150, -165, -113, 383, -195, 397, -146, -239, 58, -39,
	25, 31, -60, 65, 110, -196, 58, -197, -186, 396,
	65, 66, -186, -239, -144, 58, -144, 58, 58, -239,
	-239, -239, 123, -148, 60, -147, -148, 60, 60, -148,
	-148, 61, 61, 120, 60, 59, 60, 247, 247, 60,
	59, 60, 59, 58, 57, 56, -177, -178, -67, -113,
	-53, 58, 58, -2, -3, -4, 6, -239, -108, -2,
	-185, 19, 177, 178, -53, -204, -92, -113, 151, -206,
	-203, -114, -113, -238, 134, 151, -113, 142, -162, -172,
	-114, 63, 65, 60, 59, -144, -176, 290, -144, -39,
	-164, 173, 174, 33, 175, -164, 383, 151, 151, -193,
	-239, 58, -178, -240, 80, 79, 97, 208, 60, -39,
	-61, 100, 81, 98, 99, 84, 106, 105, 116, 109,
	110, 111, 112, 113, 114, 115, 107, 108, 119, 396,
	90, 91, 92, 93, 94, 95, 96, 101, 102, 103,
	104, -107, -239, -77, -239, -239, -239, -58, -2, -71,
	-239, -39, 124, 125, -64, -239, -64, -64, -64, -64,
	-64, -64, -224, 286, -186, 63, 123, 123, -239, -239,
	-239, -239, -239, -239, -239, -239, -81, -39, -239, 41,
	-239, -239, -239, -239, -245, -239, -245, -245, -245, -245,
	-245, -245, -126, 120, 258, 155, 249, -133, -128, 264,
	263, -239, -239, -239, -239, -193, 58, -194, -39, -92,
	60, 58, 373, 59, 65, 60, -196, 63, 60, 289,
	122, -127, -240, 60, 60, 60, -37, 24, -36, -38,
	111, -39, -119, -36, -36, -114, -148, -147, 63, -147,
	297, 297, 65, 65, -177, -113, -53, 60, 58, 58,
	-92, -178, -85, 15, -27, 5, -25, -244, -2, -53,
	137, 21, 6, 8, 9, 10, 19, -110, 59, 25,
	-206, -237, 58, -113, 150, -113, -180, -182, 363, -181,
	57, 147, 71, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 61, -175, -88, 27, 28, 60, -194, 56,
	73, 176, -194, 56, -165, -193, 58, -39, -178, 60,
	-190, 175, -39, -39, -69, 73, 81, 74, 75, -64,
	21, 22, 23, -70, -74, -77, 69, 100, 98, 99,
	84, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -123, 61, 63, 248,
	-126, 61, -78, -113, -240, -240, -240, 59, -240, -2,
	-63, 63, -113, -63, -113, 400, -114, -114, -36, -36,
	-39, -125, 120, 254, 155, 249, -135, -134, -136, 240,
	273, 274, 294, 247, 295, -133, 252, 251, 253, 264,
	255, 260, 262, 261, 259, -39, -38, -38, -36, -30,
	24, -79, -80, 86, -78, 19, -240, -240, -240, -240,
	-240, 256, -36, -37, -36, -36, -36, -166, -113, -239,
	-240, 60, 369, 370, -39, 58, -60, 60, -151, -240,
	-36, 59, -240, -116, -115, 25, -113, 63, 123, -240,
	-240, -239, -148, -148, 60, 60, 60, 58, 58, -94,
	385, -177, 60, 60, -89, 17, 16, -5, -3, -239,
	21, 24, -32, 44, 45, -26, -240, 25, -166, 195,
	-109, 86, -113, -207, -209, 223, -18, -15, -6, -8,
	-7, -10, -9, -11, -12, -13, -14, -22, -3, 139,
	-16, -17, -28, 10, 9, 20, 33, 199, 200, 205,
	201, 149, -29, 170, -23, 8, 349, 160, 161, 56,
	-242, -113, 109, 110, 111, 112, 114, 106, 105, 116,
	123, 90, 91, 92, 63, 59, 58, 65, 66, 67,
	68, -112, -133, -134, -135, -136, 264, 269, 270, 271,
	272, 255, 254, 265, 266, 267, 73, 81, 80, 79,
	100, 97, 98, 84, 85, 86, 87, 89, 88, 351,
	350, 352, 353, 31, 142, 140, 150, 397, 143, 58,
	58, 381, 382, 140, -179, 56, -181, 363, 58, 365,
	61, -168, 90, 63, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, -88, 9, 10, 58, 58, -178,
	-240, 60, -180, 356, 73, 74, 75, -64, -64, -64,
	-70, -64, -64, -64, -35, 156, 80, 363, -240, -240,
	-39, -240, -225, -226, 63, -240, -240, 59, 57, 59,
	-144, -144, -144, -154, -153, -142, 234, -144, 234, -144,
	-144, -144, -144, -144, -144, -144, 25, 59, 11, 59,
	11, -240, -36, -82, -80, 89, -39, -240, -119, -240,
	-240, -240, -240, 60, 59, -39, -190, 56, 60, -192,
	60, 60, -240, -38, -228, 398, -115, 111, -120, -228,
	-228, -37, -94, -177, -178, -57, 12, 58, 60, -57,
	-180, -90, 19, 34, -39, -86, -87, -39, -85, -2,
	-30, 70, -2, -187, 57, 196, 223, -39, 399, -209,
	223, -207, -85, -39, -25, -25, -25, -211, -113, -213,
	-210, 210, 211, -25, -234, -233, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	333, 334, 335, 336, 337, 338, 339, -113, -113, -113,
	-205, 40, 202, 203, 204, -39, -113, -239, -81, -53,
	60, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -178,
	-178, 58, 58, 151, -113, -183, -181, -113, 65, -200,
	56, 77, 65, -200, -200, -200, -200, -200, -201, 191,
	192, 65, -202, -201, 65, -164, -164, -166, -178, 60,
	-190, -180, -179, -35, 80, -64, -64, 247, 401, 59,
	-186, -125, 120, -123, -39, -147, 61, -153, -125, -64,
	-64, -64, -64, 360, -85, 88, -39, 87, 143, -113,
	-240, 10, 9, 369, 370, 60, 224, 375, 376, 162,
	377, 175, 378, 379, -239, 123, -240, -57, 60, 60,
	-180, -39, -92, -94, -180, 9, 100, 59, 18, 59,
	-88, -89, -240, -31, 47, -188, 363, -39, -207, -208,
	-209, -209, -207, 399, 88, -89, 87, -19, -15, -16,
	-18, 223, -106, 11, -48, -53, -41, -42, -43, -44,
	-55, -77, -239, -53, 59, -212, -122, 197, 25, 209,
	-99, -124, 225, -103, 308, 307, -114, 318, -101, 306,
	258, 305, -200, 59, -113, 11, 11, 11, 11, -209,
	223, -72, -71, -72, -110, 19, 60, 60, 60, -178,
	-178, 58, -239, 60, 59, -194, -194, 60, 60, -180,
	-179, -64, 297, -226, -240, -240, -240, 59, -240, -240,
	59, -240, 19, -240, 59, -240, 19, -239, -34, 355,
	-39, -53, -190, -164, -164, 363, -60, 16, -60, -60,
	-60, 65, 376, 162, 378, 16, -240, 163, -85, 111,
	-180, -57, -180, -179, 60, -57, -179, 42, -39, -39,
	-87, -90, -36, 397, 399, -209, 88, 88, -90, -207,
	89, 89, -208, -54, 29, -53, -53, -48, -241, 59,
	11, 57, 33, 59, -49, -51, -50, -52, 46, 50,
	52, 47, 48, 49, 53, -122, -41, -239, -121, 163,
	-119, 25, -210, -113, 198, -127, 19, 59, -99, 225,
	-100, -104, 309, 311, 90, 123, -118, -113, 63, 31,
	33, -233, 29, -208, -240, -109, 195, -242, -221, 216,
	81, 60, 60, -178, -113, -181, 143, -180, -179, -64,
	-64, -64, -64, -64, -64, -240, 63, 58, -60, -60,
	380, -119, 16, -240, -179, -180, -180, 43, -40, 11,
	-39, 88, -209, 399, -16, -19, 139, -17, 139, 399,
	88, -95, 163, -53, -95, 57, -41, -53, -98, -102,
	-78, -42, -43, -43, -42, -43, 46, 46, 46, 51,
	46, 51, 46, -50, -119, -240, -56, 54, 138, 55,
	-239, -119, 19, -215, -214, 65, 214, 213, 81, 212,
	-113, -103, -100, 59, 310, 312, 313, 56, 77, -39,
	-114, -148, -166, 88, 223, 196, -222, 217, 216, -180,
	-180, 60, -240, -53, -179, -240, -240, -240, -240, -240,
	-33, 100, 363, -166, 123, -229, -230, -39, -179, -57,
	-41, 88, 89, -39, -39, -62, 33, 38, -2, -239,
	-239, -57, -41, -57, -40, 59, 90, -46, -45, 56,
	57, -47, 56, -45, 46, 46, -218, 363, 134, 134,
	134, -96, -113, -2, -216, 59, -209, 223, 63, 41,
	215, -104, -105, 314, 311, 317, 90, -208, 219, 218,
	-179, -179, 58, -240, 361, 53, 366, 60, -114, -240,
	-85, 59, -83, 13, 139, -207, -19, -19, -97, 56,
	-98, -73, -75, -74, -239, -2, -91, -93, 6, -113,
	-111, -112, -96, -85, -57, -57, -102, -39, -39, 58,
	-39, 58, -239, -239, -239, -240, 59, -214, 88, -207,
	63, 311, 315, 316, -39, 399, -166, 43, 362, 367,
	-240, -230, -84, 14, 16, 399, 30, -97, 59, -240,
	-240, -240, 59, 123, -240, -89, -85, -92, -217, -219,
	386, 387, 388, 389, 390, 391, 392, 393, -92, -92,
	-92, -121, -113, 88, 399, 88, 60, 43, -39, -71,
	88, 151, -75, 38, -2, -239, -93, -113, -89, 60,
	60, 59, -240, -240, -240, -56, 88, 363, 139, 9,
	-73, -2, -219, -218, 366, -98, -240, 367,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 895, 1, 3,
	6, 238, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 893, 507, 508, 509, 512, 0, 0, 896, 0,
	239, 284, 284, 284, 284, 897, 1074, 1075, 1076, 1077,
	1078, 1079, 0, 0, 0, 893, 0, 893, 0, 816,
	0, 0, -2, -2, 0, 905, 0, 619, 903, 904,
	893, 0, 0, 513, 510, 511, 235, 0, 520, 0,
	246, 422, 418, 251, 252, 253, 254, 255, 332, 333,
	334, 335, 336, 373, 374, 410, 397, 412, 410, 412,
	380, 410, 412, 425, 425, 425, 425, 425, 388, 389,
	390, 391, 392, 393, 394, 0, 0, 365, 410, 410,
	410, 410, 410, 371, 372, 399, 400, 401, 402, 403,
	404, 405, 406, 0, 410, 357, 355, 359, 364, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 348,
	349, 351, 352, 362, 363, 247, 248, 249, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 181, 182,
	183, 0, 0, 0, 0, 0, 0, 0, 236, 0,
	0, 0, 237, 522, 0, 525, 240, 241, 242, 243,
	244, 245, 0, 514, 516, 0, 503, 0, 0, 0,
	0, 0, 0, 475, 476, 257, 0, 259, 0, 261,
	0, 263, 264, 0, 266, 268, 514, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 424, 420, 419, 425,
	0, 410, 398, 425, 0, 425, 425, 381, 382, 428,
	0, 428, 428, 428, 428, 0, 0, 415, 415, 368,
	369, 370, 0, 347, 350, 0, 357, 356, 353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 117,
	0, 219, 0, 189, 185, 186, 187, 184, 0, 0,
	818, 0, 898, 899, 900, -2, -2, 906, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 22,
	620, 907, 0, 894, 232, 0, 0, 0, 526, 528,
	901, 902, 524, 0, 486, 0, 0, 0, 517, 503,
	0, 471, -2, 0, 504, 505, 914, 1080, 0, 0,
	466, 468, 0, 503, 516, 258, 0, 0, 0, 265,
	267, 0, 271, 272, 914, 0, 304, 0, 0, 285,
	0, 288, -2, 291, 292, 0, 294, 328, 297, 298,
	299, 0, 301, 410, 410, 324, 0, 639, 640, 0,
	0, 0, 0, 302, 303, 423, 250, 421, 428, 0,
	425, 428, 0, 0, 428, 428, 383, 429, 0, 0,
	384, 385, 386, 387, 0, 408, 0, 366, 0, 0,
	367, 0, 0, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 893, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 29, 233, 0, 0, 527,
	523, 0, 479, 410, 410, 914, 0, 0, 0, 0,
	0, 503, 0, 0, 470, 0, 0, 629, 914, 635,
	637, 0, 0, 0, 914, 682, 683, 684, 685, 686,
	687, 914, 914, 914, 914, 914, 914, 914, 713, 714,
	715, 716, 0, 718, -2, 822, 816, 824, 825, 826,
	827, 828, 829, 830, 0, 0, 874, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 748, 758, 758, 758, 758, 758, 758, 758, 0,
	0, 0, 0, 0, 915, 464, 465, 467, 469, 473,
	503, 0, 517, 283, 260, 514, 262, 914, 0, 0,
	0, 305, 0, 831, 0, 0, 0, 0, 290, 0,
	293, 295, 296, 0, 320, 0, 322, 0, 0, -2,
	914, 914, 0, 375, 411, 428, 377, 413, 414, 378,
	379, 430, 426, 427, 425, 0, 425, 0, 0, 407,
	0, 360, 0, 0, 0, 0, 0, 477, 478, 410,
	0, 0, 0, -2, 840, 0, 532, 0, 0, -2,
	0, 0, 220, 221, 217, 190, 188, 587, 588, 0,
	0, 819, 120, 0, 31, 32, 517, 516, 30, 521,
	529, 530, 531, 432, 0, 845, 483, 485, 482, 0,
	514, 493, 494, 0, 0, 514, 515, 516, 503, 0,
	914, 0, 0, 326, 914, 914, 0, 634, 1081, 632,
	914, 0, 0, 914, 914, 914, 914, 914, 914, 914,
	914, 914, 914, 914, 914, 914, 914, 914, 0, 0,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 636, 0, 653, 0, 0, 0, 629, 36, 0,
	914, 680, 0, 0, 704, 914, 705, 706, 707, 708,
	709, 710, 717, 0, 821, 823, 0, 0, 914, 914,
	914, 914, 914, 914, 914, 542, 0, 806, 0, 0,
	0, 0, 0, 0, 750, 0, 751, 752, 753, 754,
	755, 756, 757, 797, 0, 799, 800, 801, 802, 803,
	804, 914, -2, 914, 914, 474, 0, 0, 0, 0,
	0, 914, 280, 0, 832, 286, 0, 328, 289, 329,
	330, 422, 300, 321, 323, 325, 0, 914, 0, 548,
	550, 554, 0, 0, 0, 0, 376, 428, 409, 428,
	416, 417, 0, 0, 0, 0, 0, 627, 1080, 0,
	0, 0, 848, 0, 0, 536, 539, 534, 36, 0,
	0, 223, 224, 225, 226, 227, 0, 812, 0, 0,
	0, 23, 122, 0, 0, 517, 461, 433, 0, 435,
	0, 453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 480, 481, 846, 847, 845, 487, 0,
	495, 496, 488, 0, 0, 0, 0, 0, 0, 432,
	502, 0, 630, 631, 633, 657, 0, 659, 661, 641,
	914, 914, 914, 645, 676, 677, 678, 0, 914, 914,
	914, 674, 649, 0, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 702, 769, 770, 0,
	712, 0, 0, 816, 655, 656, 679, 914, 873, 36,
	700, 328, 0, 701, 711, 0, 818, 820, 0, 0,
	0, 0, -2, 410, 774, 410, 359, 357, 778, 355,
	780, 781, 782, 410, 785, 410, 410, 410, 790, 791,
	410, 410, 794, 410, 410, 0, 0, 0, 0, 914,
	543, 814, 809, 914, 0, 0, 745, 746, 747, 749,
	759, 798, 0, 0, 547, 0, 0, 0, 518, 914,
	326, 273, 276, 277, 0, 306, 0, 0, 331, 719,
	0, 914, 559, 551, 555, 0, 557, 558, 0, 559,
	559, -2, 395, 396, 358, 361, 627, 0, 0, 625,
	0, 0, 625, 432, 852, 914, 914, 840, 38, 0,
	537, 538, 542, 540, 541, 533, 37, 0, 228, 0,
	0, 914, 589, 19, 191, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 208, 840, 914,
	98, 99, 532, 532, 532, 0, 532, 0, 0, 0,
	86, 914, 0, -2, 885, 42, 43, 212, 213, 0,
	0, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 0,
	0, 0, 0, 0, 431, 0, 436, 0, 0, 0,
	439, 0, 454, 441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 484, 0, 0, 0, 0, 0,
	326, 432, 461, 327, 658, 660, 662, 642, 643, 644,
	646, 674, 650, 0, 647, 914, 914, 0, 638, 654,
	681, -2, 0, 917, 328, 725, 726, 0, 0, 914,
	771, 425, 775, 776, 777, 357, 783, 784, 786, 787,
	788, 789, 792, 793, 795, 796, 0, 914, 914, 914,
	914, 0, 840, 0, 810, 914, 0, 743, 744, 760,
	761, 762, 763, 0, 0, 0, 269, 0, 0, 0,
	282, 287, 720, 549, 721, 0, 556, 552, 0, 722,
	723, 0, 625, 0, 0, 432, 914, 0, 627, 432,
	13, 33, 0, 0, 849, 841, 842, 845, 848, 36,
	544, 535, -2, 230, 914, 218, 0, 813, 0, 194,
	0, 0, 848, 0, 895, 0, 0, 58, -2, 0,
	61, 66, 67, 0, 0, 920, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 81, 82, 83,
	0, 0, 0, 0, 0, 0, -2, -2, 216, 217,
	121, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 0, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 0,
	0, 0, 0, 0, 462, 0, 437, 442, 440, 443,
	455, 456, 444, 445, 446, 447, 448, 449, 450, 457,
	458, 451, 452, 459, 460, 514, 514, 0, 0, 432,
	501, 461, 500, 648, 914, 675, 651, 0, 916, 0,
	919, 0, 410, 0, 0, 772, 773, 779, 0, 0,
	0, 0, 0, 0, 807, 742, 815, 914, 0, 519,
	326, 0, 0, 278, 279, 281, 0, 0, 0, 0,
	0, 0, 317, 0, 0, 0, 724, 432, 625, 432,
	461, 626, 0, 625, 461, 853, 0, 914, 914, 914,
	844, 852, 39, 914, 545, 17, 0, 229, 18, 0,
	93, 192, 0, 0, 195, 852, 0, 104, 102, 98,
	105, 0, 0, 0, 0, 50, 0, 566, 568, 569,
	570, 602, 0, 604, 0, 0, 0, 65, 603, 0,
	54, 0, 0, 878, 118, 119, 0, 0, 0, -2,
	0, 889, 886, 0, 84, 87, 88, 89, 90, 91,
	0, 210, 215, 0, 812, 0, 122, 24, 908, 0,
	0, 0, 0, 434, 0, 489, 490, 0, 432, 461,
	498, 652, 703, 918, 727, 731, 728, 914, 730, 732,
	914, 734, 914, 736, 914, 738, 914, 914, 0, 0,
	811, 0, 270, 274, 275, 0, 308, 0, 310, 311,
	312, 313, 314, 315, 316, 0, 560, 0, 0, 553,
	461, 432, 10, 8, 628, 432, 12, 0, 850, 851,
	843, 34, 564, 914, 0, 94, 196, 193, 209, 0,
	0, 0, 0, 52, 0, 618, -2, 0, 0, 0,
	48, 49, 0, 0, 0, 0, 0, 0, 607, 0,
	0, 610, 0, 0, 0, 0, 0, 0, 621, 0,
	605, 0, 62, 602, 0, 63, 0, 0, 55, 0,
	57, 107, 0, 0, 914, 0, 428, 890, 891, 892,
	888, 921, 0, 0, 211, 0, 0, 138, 911, 909,
	0, 432, 432, 0, 0, 438, 0, 461, 499, 0,
	0, 0, 0, 0, 764, 741, 808, 0, 307, 309,
	318, 0, 914, 562, 7, 11, 461, 854, 625, 0,
	231, 20, 95, 0, 100, 101, 914, 103, 914, 0,
	106, 0, 0, 617, 625, 0, 625, 51, 564, 875,
	0, 567, 598, 600, 0, 595, 608, 609, 611, 0,
	613, 0, 615, 616, 571, 572, 573, 0, 0, 0,
	0, 606, 0, 0, 68, 70, 0, 73, 0, 75,
	76, 879, 56, 0, 0, 110, 111, 880, 881, 882,
	0, 884, 85, 92, 0, 218, 26, 0, 910, 461,
	461, 25, 463, 0, 497, 729, 733, 735, 737, 739,
	0, 0, 0, 0, 0, 0, 837, 839, 9, 833,
	565, 0, 0, 0, 0, 867, 0, 0, -2, 0,
	0, 840, 625, 47, 625, 0, 914, 592, 599, 914,
	0, 593, 914, 594, 612, 614, 585, 0, 0, 0,
	0, 0, 590, -2, 60, 0, 77, 0, 71, 0,
	74, 108, 109, 0, 0, 115, 914, 0, 912, 913,
	27, 28, 0, 740, 0, 0, 0, 492, 319, 561,
	0, 914, 835, 0, 96, 0, 0, 104, 40, 0,
	867, 855, 869, 871, 914, 36, 0, 861, -2, 863,
	865, 866, 0, 848, 46, 840, 876, 877, 596, 0,
	601, 0, 0, 0, 0, 604, 0, 69, 78, 0,
	72, 112, 113, 114, 883, 0, 0, 765, 0, 768,
	563, 838, 35, 914, 914, 0, 0, 41, 0, 872,
	-2, 0, 0, 0, 53, 45, 848, 0, 0, 575,
	577, 578, 579, 580, 581, 582, 583, 584, 0, 0,
	0, 621, 591, 79, 0, 21, 491, 766, 836, 834,
	0, 0, 870, 0, -2, 0, 862, 864, 44, 597,
	574, 0, 622, 623, 624, 573, 80, 0, 97, 0,
	858, 36, 576, 586, 0, 868, -2, 767,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 399,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 400, 3, 401, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:431
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:436
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:437
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:445
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:450
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:470
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:490
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:511
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:527
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:544
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:564
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 14:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:579
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:590
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:602
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:613
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:629
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:643
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:657
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:670
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:684
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:695
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:701
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:715
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:729
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:749
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:767
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:785
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:794
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:809
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:817
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:824
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:830
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:834
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:840
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:844
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:851
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:863
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:875
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:879
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:885
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:891
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:895
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:899
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:904
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:905
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:909
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:913
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:918
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:922
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:928
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:932
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:936
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:940
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:946
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:950
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:961
		{
			yyVAL.statement = &Declare{
				Type: declareHandler,
				Handler: &HandlerDefinition{
					Action:     yyDollar[2].str,
					Conditions: yyDollar[5].handlerConditions,
					Statement:  yyDollar[6].statement,
				},
			}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:974
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:978
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:984
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:989
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:993
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:999
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1003
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1009
		{
			yyVAL.handlerConditions = []HandlerCondition{yyDollar[1].handlerCondition}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1013
		{
			yyVAL.handlerConditions = append(yyVAL.handlerConditions, yyDollar[3].handlerCondition)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1019
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionMysqlErrorCode, Value: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1023
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[2].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1027
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[3].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1031
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlwarning}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1035
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionNotFound}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1039
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlexception}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1043
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionName, Value: string(yyDollar[1].colIdent.String())}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1049
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1053
		{
			yyVAL.statement = &BeginEnd{
				Statements:        []Statement{},
				SuppressSemicolon: false,
			}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1060
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1067
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1076
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1083
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1090
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1097
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1105
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1115
		{
			yyVAL.str = ""
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1119
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1123
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1127
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1131
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1137
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1144
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1158
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1162
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1166
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 96:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1173
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 97:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1181
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1191
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1195
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1202
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1212
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1223
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1228
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1233
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1240
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1244
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1255
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1259
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1265
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1269
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1273
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1283
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1291
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1301
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1307
		{
			yyVAL.str = SessionStr
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1311
		{
			yyVAL.str = GlobalStr
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1384
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1388
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1392
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1396
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1402
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1406
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1410
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1415
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1421
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1425
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1431
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1435
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1440
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1449
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1453
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1462
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1478
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1491
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1501
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1506
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1512
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1513
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1516
		{
			yyVAL.exprs = nil
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1517
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1521
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1526
		{
			yyVAL.empty = struct{}{}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1528
		{
			yyVAL.empty = struct{}{}
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1531
		{
			yyVAL.bytes = nil
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1535
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1539
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1544
		{
			yyVAL.bytes = nil
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1548
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1552
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1556
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1560
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1564
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1569
		{
			yyVAL.expr = nil
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1573
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1578
		{
			yyVAL.expr = nil
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1582
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1587
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1591
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1596
		{
			yyVAL.bytes = nil
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1600
		{
			yyVAL.bytes = nil
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1606
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1613
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1619
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1623
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1628
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1632
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1636
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1640
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1644
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1648
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1654
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1658
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1663
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1668
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1674
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1685
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1691
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1704
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1709
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1714
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1719
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1725
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1730
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1735
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1740
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1745
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1750
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1755
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1760
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 269:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1765
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 270:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1774
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1784
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1789
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1794
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 274:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1801
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 275:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1808
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1816
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 277:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1821
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 278:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1826
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 279:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1831
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1837
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1843
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1850
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1857
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1863
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1869
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1873
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 287:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1877
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1881
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1885
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1895
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1899
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1903
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1907
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1911
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1915
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1919
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1923
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1927
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1931
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1937
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1943
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1949
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1955
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1959
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1964
		{
			yyVAL.sequence = &Sequence{}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1968
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1973
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1978
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1983
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1988
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1993
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1998
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2003
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2008
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2013
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2018
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2023
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 319:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2028
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2035
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2039
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2043
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2047
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2051
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2055
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2060
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2064
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2069
		{
			yyVAL.bytes = nil
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2097
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), DisplayWidth: yyDollar[2].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2134
		{
			yyVAL.str = ""
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2138
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2143
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 358:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2147
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2155
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2159
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2165
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2178
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2184
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2188
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2192
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2196
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2200
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2204
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2208
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2212
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2218
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2222
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2228
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2232
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2236
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2240
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2244
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2248
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2252
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2256
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2260
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2264
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2268
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2272
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2276
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2280
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2284
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2288
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2292
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2296
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2300
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2304
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 395:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2308
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 396:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2313
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2318
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2322
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2328
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2332
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2336
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2340
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2344
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2348
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2352
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2356
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2360
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2366
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2371
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2376
		{
			yyVAL.optVal = nil
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2380
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2385
		{
			yyVAL.optVal = nil
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2389
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2393
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2402
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2406
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2410
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2415
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2419
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2424
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2428
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2433
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2437
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2441
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2446
		{
			yyVAL.str = ""
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2450
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2454
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2459
		{
			yyVAL.str = ""
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2463
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2467
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2473
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2478
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2482
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2486
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2492
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2496
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2502
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2506
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2512
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2516
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2521
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2525
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2529
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2533
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2537
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2541
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2549
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2553
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2557
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2561
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2565
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2576
		{
			yyVAL.str = ""
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2580
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2586
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2590
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2596
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2600
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2606
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2610
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2616
		{
			yyVAL.indexPartition = nil
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2620
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2624
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2630
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2634
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2638
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2642
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2646
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2650
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2654
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2658
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2662
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2666
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2670
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2676
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2680
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2686
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2691
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2697
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2701
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2707
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2712
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2716
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2720
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2730
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2735
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 488:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2742
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 489:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2749
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 490:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2756
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 491:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2765
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 492:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2776
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2787
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2791
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2799
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 497:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2805
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 498:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2815
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 499:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2826
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 500:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2837
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 501:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2848
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2857
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2866
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2870
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2874
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2880
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2884
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2888
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2892
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2896
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2900
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2906
		{
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2907
		{
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2911
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2915
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2920
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2927
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2931
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2938
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2942
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2948
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2952
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2957
		{
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2958
		{
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2962
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2966
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2970
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2976
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2980
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2984
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2989
		{
			setAllowComments(yylex, true)
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2993
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2999
		{
			yyVAL.bytes2 = nil
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3003
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.str = UnionStr
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3013
		{
			yyVAL.str = UnionAllStr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3017
		{
			yyVAL.str = UnionDistinctStr
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3022
		{
			yyVAL.str = ""
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3026
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3030
		{
			yyVAL.str = SQLCacheStr
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3035
		{
			yyVAL.str = ""
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3039
		{
			yyVAL.str = DistinctStr
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3044
		{
			yyVAL.str = ""
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3048
		{
			yyVAL.str = StraightJoinHint
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3053
		{
			yyVAL.selectExprs = nil
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3057
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3063
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3067
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3073
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3077
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3081
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 553:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3085
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3090
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3094
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3098
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3110
		{
			yyVAL.overExpr = nil
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3114
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 561:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3118
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3122
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 563:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3126
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3131
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3135
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3141
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3145
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3159
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3163
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3168
		{
			yyVAL.strs = []string{}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3172
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3178
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3182
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3192
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3196
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3200
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3216
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3222
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 586:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3226
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3232
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3237
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3241
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3247
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3251
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3264
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3268
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3272
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3276
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3282
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3284
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3288
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3290
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3294
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3296
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3299
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3301
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3304
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3312
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3318
		{
			yyVAL.str = JoinStr
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3322
		{
			yyVAL.str = JoinStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3326
		{
			yyVAL.str = JoinStr
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3332
		{
			yyVAL.str = StraightJoinStr
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3338
		{
			yyVAL.str = LeftJoinStr
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3342
		{
			yyVAL.str = LeftJoinStr
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3346
		{
			yyVAL.str = RightJoinStr
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3350
		{
			yyVAL.str = RightJoinStr
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3356
		{
			yyVAL.str = NaturalJoinStr
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3360
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3370
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3374
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3380
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3384
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3389
		{
			yyVAL.indexHints = nil
		}
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3393
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3397
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 624:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3401
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3406
		{
			yyVAL.expr = nil
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3410
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3415
		{
			yyVAL.columns = nil
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3419
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3425
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3429
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3445
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3449
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3453
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3459
		{
			yyVAL.str = ""
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3469
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3473
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3479
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3483
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3487
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3491
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3495
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3499
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3503
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3507
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3511
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3515
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3519
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 652:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3523
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3527
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3532
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3536
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3540
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3546
		{
			yyVAL.str = IsNullStr
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3550
		{
			yyVAL.str = IsNotNullStr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.str = IsTrueStr
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3558
		{
			yyVAL.str = IsNotTrueStr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3562
		{
			yyVAL.str = IsFalseStr
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3566
		{
			yyVAL.str = IsNotFalseStr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3572
		{
			yyVAL.str = EqualStr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3576
		{
			yyVAL.str = LessThanStr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3580
		{
			yyVAL.str = GreaterThanStr
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3584
		{
			yyVAL.str = LessEqualStr
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3588
		{
			yyVAL.str = GreaterEqualStr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3592
		{
			yyVAL.str = NotEqualStr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3596
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3600
		{
			yyVAL.str = PosixRegexStr
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3604
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3608
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3612
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3617
		{
			yyVAL.expr = nil
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3621
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3627
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3631
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3635
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3641
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3647
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3651
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3657
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3661
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3665
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3669
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3673
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3677
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3681
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3685
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3689
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3693
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3697
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3701
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3705
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3709
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3713
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3717
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3721
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3725
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3729
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3733
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3737
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 703:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3741
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3745
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3749
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3753
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3761
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3775
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3779
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3783
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3791
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3799
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3807
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3811
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3821
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3825
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 721:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3829
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3833
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3837
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 724:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3841
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3851
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3855
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 727:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3859
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 728:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3864
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 729:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 730:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 731:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 732:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 733:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 734:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3888
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 735:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3892
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 736:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3896
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 737:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3900
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 738:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3904
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 739:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3908
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 740:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3912
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 741:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3916
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 742:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3920
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3924
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3929
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3933
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3941
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3952
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3956
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3960
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3964
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3968
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3973
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3978
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3983
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3988
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3992
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 760:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4006
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4010
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4014
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4018
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4024
		{
			yyVAL.str = ""
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4028
		{
			yyVAL.str = BooleanModeStr
		}
	case 766:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4032
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 767:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4036
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4040
		{
			yyVAL.str = QueryExpansionStr
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4046
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4050
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4056
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4060
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4064
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4068
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4072
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4076
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4082
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4088
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4092
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.convertType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4098
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4102
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4106
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4110
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4114
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4118
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4122
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4130
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4134
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4138
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4146
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4150
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4154
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4158
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4162
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4168
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4172
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4176
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4180
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4184
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4188
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4192
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4196
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.expr = nil
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4205
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4210
		{
			yyVAL.str = string("")
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4214
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4220
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4224
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 811:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4230
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 812:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4235
		{
			yyVAL.empty = struct{}{}
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4237
		{
			yyVAL.empty = struct{}{}
		}
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4240
		{
			yyVAL.expr = nil
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4244
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4250
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4254
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4258
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 819:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4262
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4268
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4274
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4278
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4283
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4288
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4292
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4296
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4300
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4304
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4308
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4312
		{
			yyVAL.expr = &NullVal{}
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4318
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4322
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4327
		{
			yyVAL.exprs = nil
		}
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4331
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4336
		{
			yyVAL.expr = nil
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4340
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4346
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4350
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4356
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4361
		{
			yyVAL.orderBy = nil
		}
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4365
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4371
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4375
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4381
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 845:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4386
		{
			yyVAL.str = AscScr
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4390
		{
			yyVAL.str = AscScr
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4394
		{
			yyVAL.str = DescScr
		}
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4399
		{
			yyVAL.limit = nil
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4403
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 850:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4407
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 851:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4411
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4416
		{
			yyVAL.str = ""
		}
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4420
		{
			yyVAL.str = ForUpdateStr
		}
	case 854:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4424
		{
			yyVAL.str = ShareModeStr
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4437
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4441
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4445
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 858:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4450
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 859:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4454
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 860:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4458
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4465
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4469
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4475
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4479
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4483
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4487
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 867:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.updateExprs = nil
		}
	case 868:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4496
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4502
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4506
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4512
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4516
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 873:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4522
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4528
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4538
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 876:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4542
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4548
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4554
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 879:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4558
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 880:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4564
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 881:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4568
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4572
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 883:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4577
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 884:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4581
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4587
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4593
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4600
		{
			yyVAL.bytes = []byte("charset")
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4607
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4611
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4615
		{
			yyVAL.expr = &Default{}
		}
	case 893:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4620
		{
			yyVAL.empty = struct{}{}
		}
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4622
		{
			yyVAL.empty = struct{}{}
		}
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4625
		{
			yyVAL.str = ""
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4627
		{
			yyVAL.str = IgnoreStr
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4631
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4638
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4642
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4646
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4650
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4656
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4660
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4665
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4672
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4678
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4682
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4686
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 911:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4692
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4696
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4700
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 914:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4706
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4710
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 916:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4717
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4724
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4728
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4735
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4741
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4745
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4922
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4931
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
