// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const LIKE_OP = 57440
const NOT_LIKE_OP = 57441
const ILIKE_OP = 57442
const NOT_ILIKE_OP = 57443
const SHIFT_LEFT = 57444
const SHIFT_RIGHT = 57445
const DIV = 57446
const MOD = 57447
const UNARY = 57448
const COLLATE = 57449
const BINARY = 57450
const UNDERSCORE_BINARY = 57451
const INTERVAL = 57452
const JSON_EXTRACT_OP = 57453
const JSON_UNQUOTE_EXTRACT_OP = 57454
const CREATE = 57455
const ALTER = 57456
const DROP = 57457
const RENAME = 57458
const ANALYZE = 57459
const ADD = 57460
const SCHEMA = 57461
const TABLE = 57462
const INDEX = 57463
const MATERIALIZED = 57464
const VIEW = 57465
const TO = 57466
const IGNORE = 57467
const IF = 57468
const PRIMARY = 57469
const COLUMN = 57470
const CONSTRAINT = 57471
const REFERENCES = 57472
const SPATIAL = 57473
const FULLTEXT = 57474
const FOREIGN = 57475
const KEY_BLOCK_SIZE = 57476
const POLICY = 57477
const WHILE = 57478
const UNIQUE = 57479
const KEY = 57480
const SHOW = 57481
const DESCRIBE = 57482
const EXPLAIN = 57483
const DATE = 57484
const ESCAPE = 57485
const REPAIR = 57486
const OPTIMIZE = 57487
const TRUNCATE = 57488
const EXEC = 57489
const EXECUTE = 57490
const CONNECT = 57491
const USAGE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const TYPE = 57500
const RETURN = 57501
const STATUS = 57502
const VARIABLES = 57503
const RESTRICT = 57504
const CASCADE = 57505
const NO = 57506
const ACTION = 57507
const PERMISSIVE = 57508
const RESTRICTIVE = 57509
const PUBLIC = 57510
const CURRENT_USER = 57511
const SESSION_USER = 57512
const PAD_INDEX = 57513
const FILLFACTOR = 57514
const IGNORE_DUP_KEY = 57515
const STATISTICS_NORECOMPUTE = 57516
const STATISTICS_INCREMENTAL = 57517
const ALLOW_ROW_LOCKS = 57518
const ALLOW_PAGE_LOCKS = 57519
const DISTANCE = 57520
const M = 57521
const EUCLIDEAN = 57522
const COSINE = 57523
const BEFORE = 57524
const AFTER = 57525
const EACH = 57526
const ROW = 57527
const SCROLL = 57528
const CURSOR = 57529
const OPEN = 57530
const CLOSE = 57531
const FETCH = 57532
const PRIOR = 57533
const FIRST = 57534
const LAST = 57535
const DEALLOCATE = 57536
const INSTEAD = 57537
const OF = 57538
const OUTPUT = 57539
const DEFERRABLE = 57540
const INITIALLY = 57541
const IMMEDIATE = 57542
const DEFERRED = 57543
const CONCURRENTLY = 57544
const SQL = 57545
const SECURITY = 57546
const EXTENSION = 57547
const GRANT = 57548
const REVOKE = 57549
const PRIVILEGES = 57550
const EXCLUDE = 57551
const GIST = 57552
const OPTION = 57553
const BEGIN = 57554
const START = 57555
const TRANSACTION = 57556
const COMMIT = 57557
const ROLLBACK = 57558
const BIT = 57559
const TINYINT = 57560
const SMALLINT = 57561
const SMALLSERIAL = 57562
const MEDIUMINT = 57563
const INT = 57564
const INTEGER = 57565
const SERIAL = 57566
const BIGINT = 57567
const BIGSERIAL = 57568
const INTNUM = 57569
const REAL = 57570
const DOUBLE = 57571
const PRECISION = 57572
const FLOAT_TYPE = 57573
const DECIMAL = 57574
const NUMERIC = 57575
const SMALLMONEY = 57576
const MONEY = 57577
const TIME = 57578
const TIMESTAMP = 57579
const TIMESTAMPTZ = 57580
const TIMETZ = 57581
const DATETIME = 57582
const YEAR = 57583
const DATETIMEOFFSET = 57584
const DATETIME2 = 57585
const SMALLDATETIME = 57586
const CHAR = 57587
const VARCHAR = 57588
const VARYING = 57589
const BOOL = 57590
const CHARACTER = 57591
const VARBINARY = 57592
const NCHAR = 57593
const NVARCHAR = 57594
const NTEXT = 57595
const UUID = 57596
const TEXT = 57597
const TINYTEXT = 57598
const MEDIUMTEXT = 57599
const LONGTEXT = 57600
const CITEXT = 57601
const BLOB = 57602
const TINYBLOB = 57603
const MEDIUMBLOB = 57604
const LONGBLOB = 57605
const JSON = 57606
const JSONB = 57607
const ENUM = 57608
const GEOMETRY = 57609
const POINT = 57610
const LINESTRING = 57611
const POLYGON = 57612
const GEOMETRYCOLLECTION = 57613
const MULTIPOINT = 57614
const MULTILINESTRING = 57615
const MULTIPOLYGON = 57616
const VECTOR = 57617
const VARIADIC = 57618
const ARRAY = 57619
const NOW = 57620
const GETDATE = 57621
const BPCHAR = 57622
const TEXT_PATTERN_OPS = 57623
const NULLX = 57624
const AUTO_INCREMENT = 57625
const APPROXNUM = 57626
const SIGNED = 57627
const UNSIGNED = 57628
const ZEROFILL = 57629
const ZONE = 57630
const AUTOINCREMENT = 57631
const DATABASES = 57632
const TABLES = 57633
const VSCHEMA_TABLES = 57634
const EXTENDED = 57635
const FULL = 57636
const PROCESSLIST = 57637
const NAMES = 57638
const CHARSET = 57639
const GLOBAL = 57640
const SESSION = 57641
const ISOLATION = 57642
const LEVEL = 57643
const READ = 57644
const WRITE = 57645
const ONLY = 57646
const REPEATABLE = 57647
const COMMITTED = 57648
const UNCOMMITTED = 57649
const SERIALIZABLE = 57650
const NEW = 57651
const CONCAT_NULL_YIELDS_NULL = 57652
const CURSOR_CLOSE_ON_COMMIT = 57653
const QUOTED_IDENTIFIER = 57654
const ARITHABORT = 57655
const FMTONLY = 57656
const NOCOUNT = 57657
const NOEXEC = 57658
const NUMERIC_ROUNDABORT = 57659
const ANSI_DEFAULTS = 57660
const ANSI_NULL_DFLT_OFF = 57661
const ANSI_NULL_DFLT_ON = 57662
const ANSI_NULLS = 57663
const ANSI_PADDING = 57664
const ANSI_WARNINGS = 57665
const FORCEPLAN = 57666
const SHOWPLAN_ALL = 57667
const SHOWPLAN_TEXT = 57668
const SHOWPLAN_XML = 57669
const IMPLICIT_TRANSACTIONS = 57670
const REMOTE_PROC_TRANSACTIONS = 57671
const XACT_ABORT = 57672
const CURRENT_TIMESTAMP = 57673
const DATABASE = 57674
const CURRENT_DATE = 57675
const CURRENT_TIME = 57676
const LOCALTIME = 57677
const LOCALTIMESTAMP = 57678
const UTC_DATE = 57679
const UTC_TIME = 57680
const UTC_TIMESTAMP = 57681
const REPLACE = 57682
const CONVERT = 57683
const CAST = 57684
const SUBSTR = 57685
const SUBSTRING = 57686
const GROUP_CONCAT = 57687
const SEPARATOR = 57688
const INHERIT = 57689
const LEAD = 57690
const LAG = 57691
const MATCH = 57692
const AGAINST = 57693
const BOOLEAN = 57694
const LANGUAGE = 57695
const WITH = 57696
const WITHOUT = 57697
const PARSER = 57698
const QUERY = 57699
const EXPANSION = 57700
const UNUSED = 57701
const VIRTUAL = 57702
const STORED = 57703
const GENERATED = 57704
const ALWAYS = 57705
const IDENTITY = 57706
const SEQUENCE = 57707
const INCREMENT = 57708
const MINVALUE = 57709
const CACHE = 57710
const CYCLE = 57711
const OWNED = 57712
const NONE = 57713
const CLUSTERED = 57714
const NONCLUSTERED = 57715
const REPLICATION = 57716
const COLUMNSTORE = 57717
const INCLUDE = 57718
const HOLDLOCK = 57719
const NOLOCK = 57720
const NOWAIT = 57721
const PAGLOCK = 57722
const ROWLOCK = 57723
const TABLOCK = 57724
const UPDLOCK = 57725
const READUNCOMMITTED = 57726
const DEFINER = 57727
const INVOKER = 57728
const TYPECAST = 57729
const CHECK = 57730
const OVER = 57731

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"LIKE_OP",
	"NOT_LIKE_OP",
	"ILIKE_OP",
	"NOT_ILIKE_OP",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"CONNECT",
	"USAGE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"EXTENSION",
	"GRANT",
	"REVOKE",
	"PRIVILEGES",
	"EXCLUDE",
	"GIST",
	"OPTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TIMETZ",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 8,
	138, 501,
	-2, 208,
	-1, 80,
	127, 930,
	-2, 924,
	-1, 81,
	127, 931,
	-2, 836,
	-1, 336,
	127, 934,
	-2, 928,
	-1, 337,
	127, 931,
	-2, 929,
	-1, 504,
	61, 450,
	-2, 447,
	-1, 537,
	127, 932,
	-2, 306,
	-1, 538,
	79, 842,
	80, 842,
	84, 842,
	91, 842,
	92, 842,
	93, 842,
	94, 842,
	95, 842,
	96, 842,
	97, 842,
	98, 842,
	99, 842,
	100, 842,
	101, 842,
	102, 842,
	103, 842,
	104, 842,
	105, 842,
	106, 842,
	107, 842,
	108, 842,
	109, 842,
	110, 842,
	111, 842,
	112, 842,
	114, 842,
	115, 842,
	116, 842,
	117, 842,
	118, 842,
	119, 842,
	120, 842,
	123, 842,
	214, 842,
	404, 842,
	-2, 270,
	-1, 539,
	79, 846,
	80, 846,
	84, 846,
	91, 846,
	92, 846,
	93, 846,
	94, 846,
	95, 846,
	96, 846,
	97, 846,
	98, 846,
	99, 846,
	100, 846,
	101, 846,
	102, 846,
	103, 846,
	104, 846,
	105, 846,
	106, 846,
	107, 846,
	108, 846,
	109, 846,
	110, 846,
	111, 846,
	112, 846,
	114, 846,
	115, 846,
	116, 846,
	117, 846,
	118, 846,
	119, 846,
	120, 846,
	123, 846,
	214, 846,
	404, 846,
	-2, 271,
	-1, 541,
	79, 847,
	80, 847,
	84, 847,
	91, 847,
	92, 847,
	93, 847,
	94, 847,
	95, 847,
	96, 847,
	97, 847,
	98, 847,
	99, 847,
	100, 847,
	101, 847,
	102, 847,
	103, 847,
	104, 847,
	105, 847,
	106, 847,
	107, 847,
	108, 847,
	109, 847,
	110, 847,
	111, 847,
	112, 847,
	114, 847,
	115, 847,
	116, 847,
	117, 847,
	118, 847,
	119, 847,
	120, 847,
	123, 847,
	214, 847,
	404, 847,
	-2, 273,
	-1, 542,
	79, 850,
	80, 850,
	84, 850,
	91, 850,
	92, 850,
	93, 850,
	94, 850,
	95, 850,
	96, 850,
	97, 850,
	98, 850,
	99, 850,
	100, 850,
	101, 850,
	102, 850,
	103, 850,
	104, 850,
	105, 850,
	106, 850,
	107, 850,
	108, 850,
	109, 850,
	110, 850,
	111, 850,
	112, 850,
	114, 850,
	115, 850,
	116, 850,
	117, 850,
	118, 850,
	119, 850,
	120, 850,
	123, 850,
	214, 850,
	-2, 306,
	-1, 543,
	79, 845,
	80, 845,
	84, 845,
	91, 845,
	92, 845,
	93, 845,
	94, 845,
	95, 845,
	96, 845,
	97, 845,
	98, 845,
	99, 845,
	100, 845,
	101, 845,
	102, 845,
	103, 845,
	104, 845,
	105, 845,
	106, 845,
	107, 845,
	108, 845,
	109, 845,
	110, 845,
	111, 845,
	112, 845,
	114, 845,
	115, 845,
	116, 845,
	117, 845,
	118, 845,
	119, 845,
	120, 845,
	123, 845,
	214, 845,
	404, 845,
	-2, 276,
	-1, 544,
	79, 686,
	80, 686,
	84, 686,
	91, 686,
	92, 686,
	93, 686,
	94, 686,
	95, 686,
	96, 686,
	97, 686,
	98, 686,
	99, 686,
	100, 686,
	101, 686,
	102, 686,
	103, 686,
	104, 686,
	105, 686,
	106, 686,
	107, 686,
	108, 686,
	109, 686,
	110, 686,
	111, 686,
	112, 686,
	114, 686,
	115, 686,
	116, 686,
	117, 686,
	118, 686,
	119, 686,
	120, 686,
	123, 686,
	214, 686,
	404, 686,
	-2, 277,
	-1, 693,
	59, 379,
	60, 379,
	-2, 1041,
	-1, 707,
	86, 824,
	-2, 985,
	-1, 711,
	298, 1096,
	-2, 769,
	-1, 712,
	298, 1095,
	-2, 769,
	-1, 713,
	298, 1094,
	-2, 769,
	-1, 714,
	298, 1046,
	-2, 769,
	-1, 715,
	298, 1047,
	-2, 769,
	-1, 716,
	298, 994,
	-2, 769,
	-1, 717,
	298, 995,
	-2, 769,
	-1, 735,
	127, 932,
	-2, 306,
	-1, 785,
	79, 841,
	80, 841,
	84, 841,
	91, 841,
	92, 841,
	93, 841,
	94, 841,
	95, 841,
	96, 841,
	97, 841,
	98, 841,
	99, 841,
	100, 841,
	101, 841,
	102, 841,
	103, 841,
	104, 841,
	105, 841,
	106, 841,
	107, 841,
	108, 841,
	109, 841,
	110, 841,
	111, 841,
	112, 841,
	114, 841,
	115, 841,
	116, 841,
	117, 841,
	118, 841,
	119, 841,
	120, 841,
	123, 841,
	214, 841,
	404, 841,
	-2, 269,
	-1, 787,
	79, 846,
	80, 846,
	84, 846,
	91, 846,
	92, 846,
	93, 846,
	94, 846,
	95, 846,
	96, 846,
	97, 846,
	98, 846,
	99, 846,
	100, 846,
	101, 846,
	102, 846,
	103, 846,
	104, 846,
	105, 846,
	106, 846,
	107, 846,
	108, 846,
	109, 846,
	110, 846,
	111, 846,
	112, 846,
	114, 846,
	115, 846,
	116, 846,
	117, 846,
	118, 846,
	119, 846,
	120, 846,
	123, 846,
	214, 846,
	404, 846,
	-2, 272,
	-1, 788,
	79, 847,
	80, 847,
	84, 847,
	91, 847,
	92, 847,
	93, 847,
	94, 847,
	95, 847,
	96, 847,
	97, 847,
	98, 847,
	99, 847,
	100, 847,
	101, 847,
	102, 847,
	103, 847,
	104, 847,
	105, 847,
	106, 847,
	107, 847,
	108, 847,
	109, 847,
	110, 847,
	111, 847,
	112, 847,
	114, 847,
	115, 847,
	116, 847,
	117, 847,
	118, 847,
	119, 847,
	120, 847,
	123, 847,
	214, 847,
	404, 847,
	-2, 274,
	-1, 923,
	60, 453,
	-2, 865,
	-1, 927,
	5, 78,
	-2, 16,
	-1, 930,
	5, 78,
	-2, 18,
	-1, 1040,
	294, 341,
	408, 341,
	-2, 308,
	-1, 1042,
	79, 758,
	80, 758,
	84, 758,
	91, 758,
	92, 758,
	93, 758,
	94, 758,
	95, 758,
	96, 758,
	97, 758,
	98, 758,
	99, 758,
	100, 758,
	101, 758,
	102, 758,
	103, 758,
	104, 758,
	105, 758,
	106, 758,
	107, 758,
	108, 758,
	109, 758,
	110, 758,
	111, 758,
	112, 758,
	114, 758,
	115, 758,
	116, 758,
	117, 758,
	118, 758,
	119, 758,
	120, 758,
	123, 758,
	214, 758,
	404, 758,
	-2, 278,
	-1, 1292,
	216, 935,
	-2, 250,
	-1, 1319,
	5, 79,
	-2, 682,
	-1, 1445,
	60, 148,
	-2, 264,
	-1, 1448,
	60, 148,
	-2, 264,
	-1, 1563,
	5, 78,
	-2, 17,
	-1, 1579,
	204, 105,
	-2, 599,
	-1, 1620,
	60, 148,
	-2, 231,
	-1, 1768,
	90, 926,
	-2, 907,
	-1, 1803,
	216, 935,
	-2, 251,
	-1, 1804,
	216, 935,
	-2, 252,
	-1, 1854,
	57, 92,
	59, 92,
	-2, 94,
	-1, 2030,
	5, 78,
	-2, 876,
	-1, 2055,
	5, 78,
	-2, 101,
	-1, 2092,
	59, 1077,
	60, 1077,
	-2, 529,
	-1, 2129,
	5, 79,
	-2, 877,
	-1, 2161,
	5, 78,
	-2, 879,
	-1, 2182,
	5, 79,
	-2, 880,
}

const yyPrivate = 57344

const yyLast = 14844

var yyAct = [...]int16{
	577, 1958, 2048, 1421, 2085, 2138, 1976, 557, 2086, 583,
	2091, 50, 50, 2082, 492, 2016, 1320, 57, 838, 1272,
	1959, 937, 2008, 76, 77, 1875, 1409, 2053, 93, 836,
	1730, 78, 1406, 1889, 2040, 1873, 1738, 1410, 1863, 1877,
	1423, 1926, 1583, 1100, 1285, 1747, 1424, 1952, 1759, 1580,
	1403, 1748, 628, 1233, 1756, 1888, 1520, 115, 121, 121,
	121, 121, 121, 1762, 1515, 1207, 479, 1638, 767, 1780,
	1461, 189, 192, 193, 1394, 34, 1619, 1647, 1104, 1269,
	921, 978, 1087, 114, 871, 742, 718, 988, 1131, 1123,
	1528, 209, 1165, 1115, 1311, 496, 1223, 332, 1111, 954,
	1218, 1168, 1047, 1338, 308, 50, 270, 1275, 499, 691,
	743, 791, 505, 122, 57, 323, 546, 117, 118, 556,
	953, 119, 116, 885, 733, 198, 534, 96, 564, 276,
	232, 324, 227, 287, 253, 236, 1345, 1382, 1381, 616,
	277, 1177, 185, 186, 187, 188, 1449, 288, 1176, 272,
	860, 14, 1529, 1841, 51, 1180, 806, 786, 571, 817,
	817, 1395, 843, 56, 1438, 1427, 1426, 809, 810, 811,
	812, 813, 806, 319, 320, 817, 1428, 804, 814, 815,
	807, 808, 809, 810, 811, 812, 813, 806, 61, 1429,
	817, 268, 314, 2139, 2140, 2141, 2142, 2143, 2144, 2145,
	2146, 194, 98, 196, 506, 507, 333, 121, 994, 754,
	751, 99, 100, 51, 531, 60, 2180, 208, 2077, 265,
	336, 2173, 472, 1673, 1674, 268, 269, 333, 2021, 814,
	815, 807, 808, 809, 810, 811, 812, 813, 806, 1022,
	500, 817, 725, 1465, 1844, 1452, 1293, 1294, 1466, 1219,
	256, 229, 726, 922, 768, 521, 278, 640, 641, 283,
	230, 509, 285, 271, 469, 263, 857, 251, 2049, 289,
	290, 291, 292, 2156, 1727, 252, 619, 2076, 277, 295,
	296, 297, 298, 299, 300, 301, 2020, 310, 503, 1177,
	249, 985, 1813, 1550, 1494, 1717, 240, 101, 239, 1422,
	244, 245, 248, 769, 64, 471, 241, 250, 2111, 1434,
	2112, 2113, 1986, 648, 761, 782, 781, 1987, 1988, 2059,
	1440, 1441, 2058, 303, 728, 2060, 1890, 65, 1891, 66,
	67, 662, 1436, 783, 1714, 1688, 1188, 1187, 259, 618,
	254, 264, 632, 633, 634, 635, 274, 639, 261, 260,
	807, 808, 809, 810, 811, 812, 813, 806, 525, 584,
	817, 1430, 1431, 1433, 1315, 504, 758, 1432, 760, 759,
	277, 288, 636, 1175, 280, 1004, 1514, 1544, 243, 69,
	913, 51, 250, 666, 912, 1571, 247, 1936, 306, 1360,
	1358, 560, 1996, 544, 1567, 1631, 805, 804, 814, 815,
	807, 808, 809, 810, 811, 812, 813, 806, 1216, 622,
	817, 1457, 621, 195, 987, 623, 986, 626, 627, 51,
	1407, 92, 660, 877, 805, 804, 814, 815, 807, 808,
	809, 810, 811, 812, 813, 806, 109, 1878, 817, 328,
	816, 816, 106, 1883, 246, 506, 507, 1254, 1253, 190,
	784, 1997, 1566, 1904, 51, 661, 816, 68, 805, 804,
	814, 815, 807, 808, 809, 810, 811, 812, 813, 806,
	59, 816, 817, 87, 1402, 1880, 667, 1219, 57, 1004,
	728, 1501, 1648, 1649, 1258, 1758, 1344, 73, 685, 333,
	1176, 933, 934, 1004, 257, 1270, 699, 816, 782, 781,
	258, 95, 472, 727, 307, 1953, 720, 2158, 1812, 1312,
	1814, 333, 744, 1439, 796, 1630, 783, 803, 720, 753,
	996, 199, 816, 818, 819, 820, 821, 822, 823, 824,
	995, 797, 802, 795, 825, 826, 827, 828, 798, 799,
	800, 801, 805, 804, 814, 815, 807, 808, 809, 810,
	811, 812, 813, 806, 62, 63, 817, 242, 1466, 840,
	1805, 1220, 1023, 1569, 64, 756, 843, 74, 1438, 1427,
	1426, 1368, 783, 266, 1009, 267, 1453, 1454, 530, 61,
	1428, 1876, 288, 1339, 1675, 686, 228, 65, 724, 66,
	67, 1314, 51, 1429, 956, 1653, 668, 1225, 1224, 262,
	782, 781, 2019, 524, 51, 108, 60, 1010, 673, 12,
	974, 105, 191, 674, 729, 1455, 506, 507, 783, 51,
	1101, 1341, 689, 523, 670, 782, 781, 752, 502, 645,
	750, 512, 513, 784, 94, 514, 692, 782, 781, 69,
	719, 816, 518, 783, 642, 979, 980, 501, 1735, 785,
	699, 1913, 719, 1667, 696, 783, 755, 840, 1937, 840,
	779, 333, 770, 1757, 333, 1004, 945, 638, 8, 9,
	57, 951, 835, 950, 899, 248, 901, 781, 955, 904,
	905, 955, 955, 927, 955, 930, 1200, 2174, 333, 784,
	948, 816, 1679, 2078, 783, 64, 1949, 782, 781, 97,
	91, 200, 201, 1422, 855, 1681, 35, 949, 1511, 959,
	991, 678, 249, 1434, 202, 783, 957, 68, 65, 816,
	66, 67, 890, 1609, 1440, 1441, 891, 1648, 1649, 250,
	680, 654, 699, 515, 75, 784, 1436, 805, 804, 814,
	815, 807, 808, 809, 810, 811, 812, 813, 806, 690,
	516, 817, 249, 816, 1676, 2052, 900, 2051, 2050, 72,
	784, 10, 11, 71, 333, 1430, 1431, 1433, 110, 250,
	69, 1432, 784, 70, 1823, 484, 111, 940, 481, 981,
	982, 223, 929, 221, 220, 1020, 217, 121, 941, 1571,
	102, 936, 1692, 677, 840, 89, 676, 477, 844, 845,
	2132, 960, 961, 2012, 963, 1048, 1893, 952, 923, 1700,
	993, 784, 771, 1342, 62, 63, 946, 772, 773, 774,
	776, 983, 972, 975, 976, 965, 778, 777, 550, 551,
	1977, 1979, 784, 1691, 1092, 859, 840, 816, 858, 997,
	663, 1091, 331, 840, 1041, 1108, 1108, 1005, 68, 487,
	275, 207, 1013, 782, 781, 1110, 989, 990, 992, 333,
	333, 59, 205, 490, 1011, 907, 1705, 1004, 775, 1099,
	1690, 783, 38, 336, 1092, 1114, 1230, 1460, 1753, 630,
	629, 1170, 964, 1351, 1028, 1350, 782, 781, 1014, 1016,
	696, 1610, 1611, 1612, 1807, 486, 779, 1848, 1027, 2061,
	2038, 768, 281, 85, 783, 782, 781, 1677, 1678, 1680,
	1682, 1683, 1892, 782, 781, 1480, 1849, 1439, 1978, 699,
	1192, 1554, 1479, 783, 1404, 1478, 333, 699, 908, 1477,
	1080, 783, 840, 1476, 891, 1076, 1475, 1474, 1077, 1075,
	1079, 1473, 1472, 768, 831, 62, 63, 1196, 1215, 1503,
	769, 1471, 1217, 1183, 1250, 1469, 835, 1552, 1198, 1169,
	955, 1162, 1163, 955, 1106, 1109, 1229, 1734, 782, 781,
	1257, 498, 699, 782, 781, 213, 843, 218, 1438, 1427,
	1426, 215, 214, 212, 333, 1002, 783, 211, 784, 224,
	1428, 783, 769, 204, 1179, 1169, 753, 1525, 1377, 1191,
	333, 744, 699, 1429, 1300, 1301, 1302, 744, 1055, 744,
	1283, 1283, 1113, 1286, 1260, 1811, 1256, 1125, 1127, 1128,
	1129, 784, 1053, 1054, 1052, 1164, 879, 880, 881, 882,
	883, 884, 816, 284, 497, 1639, 286, 520, 1772, 498,
	784, 498, 1639, 1184, 51, 1186, 1029, 1030, 784, 780,
	1178, 1021, 1181, 1182, 1248, 840, 1640, 1210, 1249, 498,
	1227, 1222, 1048, 1640, 1650, 1641, 1035, 1037, 1038, 313,
	782, 781, 1637, 317, 1036, 321, 322, 923, 620, 509,
	1221, 1247, 329, 1226, 1255, 696, 1266, 473, 783, 1259,
	1050, 519, 1271, 1297, 625, 478, 480, 1190, 624, 482,
	483, 1897, 485, 784, 1261, 1289, 1324, 1288, 784, 1262,
	620, 1189, 620, 1422, 1025, 646, 644, 1340, 1284, 1274,
	643, 615, 1088, 1434, 1089, 688, 555, 1340, 1833, 1632,
	696, 51, 1470, 1896, 1440, 1441, 879, 880, 881, 882,
	883, 884, 51, 527, 1341, 277, 1436, 741, 1303, 509,
	847, 51, 1443, 210, 857, 1307, 772, 773, 774, 776,
	696, 846, 857, 1228, 1185, 778, 777, 550, 551, 944,
	848, 1712, 1004, 847, 684, 1430, 1431, 1433, 637, 526,
	1197, 1432, 1865, 1868, 1869, 1870, 1866, 1049, 1867, 1871,
	647, 1467, 2041, 2042, 651, 652, 699, 509, 1090, 1571,
	51, 1286, 1208, 1004, 1101, 784, 1878, 775, 296, 333,
	906, 1710, 285, 2168, 2167, 1445, 299, 1208, 2166, 1005,
	955, 805, 804, 814, 815, 807, 808, 809, 810, 811,
	812, 813, 806, 2068, 2153, 817, 749, 1387, 748, 1388,
	843, 1357, 87, 747, 1880, 1401, 746, 1003, 2074, 1004,
	1004, 1361, 1004, 2110, 1004, 1267, 2131, 1004, 2068, 2067,
	971, 2001, 1353, 1355, 699, 1356, 730, 2028, 1333, 1376,
	1359, 61, 2029, 1860, 1004, 1720, 1396, 971, 1907, 971,
	1906, 1273, 1362, 1363, 517, 1463, 1364, 1365, 1857, 1366,
	1367, 1444, 509, 1927, 1450, 1101, 51, 938, 1448, 1927,
	942, 805, 804, 814, 815, 807, 808, 809, 810, 811,
	812, 813, 806, 1208, 1838, 817, 1008, 1798, 1956, 1456,
	678, 1374, 1458, 1459, 967, 1447, 1618, 1439, 1860, 840,
	971, 1796, 1481, 64, 1858, 1560, 678, 1498, 1795, 1334,
	1340, 2037, 1482, 333, 1792, 1791, 1484, 1334, 1446, 971,
	1786, 971, 1785, 1506, 923, 1523, 65, 336, 66, 67,
	679, 971, 1721, 682, 971, 1660, 1565, 1522, 1498, 508,
	1505, 1500, 1334, 1004, 1498, 1497, 1391, 2124, 1390, 1502,
	1389, 573, 1008, 1495, 971, 1492, 1298, 64, 780, 1008,
	1491, 971, 1398, 699, 699, 1208, 1397, 1097, 1004, 1290,
	938, 1208, 1292, 1510, 840, 971, 1268, 1194, 69, 1026,
	65, 914, 66, 67, 1558, 1212, 1211, 1561, 1551, 1008,
	1007, 1524, 696, 971, 970, 917, 916, 903, 1527, 1579,
	1563, 1605, 1606, 1607, 1541, 1534, 1614, 1535, 1536, 1537,
	1532, 1572, 1533, 1530, 1049, 51, 1620, 1445, 1445, 1620,
	1445, 1445, 699, 699, 910, 911, 1859, 1545, 910, 909,
	113, 112, 69, 1633, 1280, 1573, 1555, 1636, 843, 2083,
	902, 898, 2037, 1556, 1276, 1278, 1279, 1281, 1282, 1277,
	1442, 658, 1860, 659, 659, 1372, 68, 1286, 699, 1543,
	1370, 744, 2037, 2127, 1209, 1119, 1120, 843, 107, 1668,
	2160, 104, 1097, 1860, 1575, 1576, 1577, 103, 1581, 1498,
	104, 1663, 1985, 1885, 1754, 1666, 816, 1488, 572, 1635,
	509, 1616, 1693, 1621, 1622, 1623, 1624, 1625, 659, 924,
	1334, 1658, 187, 1371, 1352, 1208, 971, 935, 1369, 1695,
	68, 1642, 1643, 1644, 1645, 1646, 1024, 999, 1000, 509,
	509, 923, 696, 59, 919, 918, 2105, 958, 1652, 915,
	333, 2103, 938, 2065, 1665, 510, 511, 2041, 2042, 1661,
	1918, 1655, 1789, 1657, 277, 1719, 1662, 1629, 1628, 1559,
	1490, 1723, 333, 62, 63, 1865, 1868, 1869, 1870, 1866,
	1736, 1867, 1871, 1487, 1486, 1451, 816, 2083, 1393, 1729,
	1392, 1741, 309, 1694, 1733, 1708, 1004, 1296, 1263, 1773,
	696, 696, 1739, 1746, 1214, 1740, 1195, 1018, 1017, 1015,
	1251, 1620, 1012, 1006, 1001, 926, 925, 763, 731, 699,
	699, 664, 649, 1781, 1781, 1724, 1265, 62, 63, 304,
	532, 528, 495, 1745, 311, 312, 696, 1557, 302, 294,
	1771, 1743, 762, 293, 282, 805, 804, 814, 815, 807,
	808, 809, 810, 811, 812, 813, 806, 790, 1353, 817,
	1359, 16, 792, 665, 1462, 2044, 830, 920, 650, 832,
	833, 834, 839, 1783, 316, 1782, 315, 222, 219, 203,
	197, 54, 790, 790, 790, 790, 790, 790, 1970, 1816,
	1698, 333, 1968, 1971, 856, 1626, 1627, 1969, 1972, 2047,
	1869, 1870, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 2046, 873, 1967, 875, 876, 1966, 878, 878,
	878, 878, 878, 878, 878, 1799, 894, 895, 896, 897,
	1835, 1659, 2123, 1824, 1839, 1806, 1808, 1809, 1810, 1802,
	1819, 1793, 1800, 1794, 2075, 1882, 840, 121, 1803, 1804,
	1820, 333, 1329, 1330, 1925, 874, 494, 1898, 1895, 1516,
	1847, 631, 766, 1850, 1654, 2125, 1656, 1900, 979, 980,
	928, 476, 928, 475, 1517, 474, 330, 696, 696, 1758,
	699, 1909, 1400, 1837, 1672, 1326, 1840, 765, 1327, 1193,
	581, 1846, 657, 655, 1881, 653, 1872, 206, 1199, 1886,
	1901, 1855, 1166, 1982, 1884, 1899, 1784, 1206, 1916, 1171,
	932, 723, 1321, 2120, 83, 86, 856, 1570, 863, 864,
	865, 867, 868, 869, 1903, 873, 1928, 984, 878, 878,
	878, 878, 878, 878, 878, 1405, 1910, 1202, 1815, 1203,
	1204, 1205, 1322, 1821, 998, 1101, 2119, 2071, 1273, 1777,
	1092, 790, 1201, 325, 326, 327, 1485, 1960, 1915, 1776,
	1775, 856, 36, 1905, 1921, 1741, 1922, 698, 840, 1774,
	1911, 1912, 1787, 1788, 52, 1946, 333, 1671, 1670, 1945,
	1919, 1920, 1957, 962, 333, 683, 1948, 86, 722, 721,
	2175, 1286, 1955, 86, 1099, 1938, 1961, 1031, 681, 1964,
	1973, 86, 225, 1962, 1963, 1689, 1965, 839, 1981, 333,
	1483, 790, 1051, 522, 790, 790, 790, 790, 790, 790,
	790, 790, 790, 790, 790, 790, 790, 790, 790, 790,
	790, 790, 790, 1984, 1103, 1994, 2013, 1993, 696, 1983,
	816, 1105, 1856, 947, 1213, 13, 840, 1, 1582, 928,
	18, 17, 2015, 2014, 318, 1121, 839, 575, 558, 1751,
	2137, 1755, 1578, 1608, 1651, 2033, 614, 2035, 255, 1119,
	533, 2054, 2030, 1504, 529, 2006, 840, 790, 1731, 20,
	1732, 86, 2034, 1570, 1726, 86, 1564, 86, 86, 2045,
	2036, 931, 2007, 656, 86, 1634, 338, 1231, 338, 86,
	973, 2022, 2055, 333, 697, 237, 226, 86, 86, 2056,
	966, 86, 86, 488, 86, 55, 15, 2062, 1468, 1092,
	2084, 698, 2093, 2054, 1778, 840, 1960, 238, 1092, 2087,
	1042, 235, 234, 1908, 233, 1960, 2094, 231, 617, 273,
	757, 279, 1741, 1741, 2098, 928, 2099, 2079, 2100, 2073,
	2096, 2089, 2080, 2081, 1739, 86, 333, 1740, 305, 333,
	2063, 2064, 120, 123, 1760, 1894, 90, 2097, 671, 1337,
	829, 2057, 1093, 1094, 1095, 1096, 1098, 1767, 2116, 2090,
	2122, 1519, 1917, 2118, 2070, 1375, 1167, 559, 2126, 1034,
	574, 2027, 794, 1750, 333, 1851, 1864, 333, 333, 333,
	1862, 2151, 86, 698, 2134, 1861, 86, 86, 2043, 2039,
	1749, 943, 1716, 1172, 1173, 2136, 1174, 1935, 2147, 2148,
	2149, 1328, 2093, 2164, 840, 2150, 2159, 2087, 1697, 2155,
	1287, 1435, 2163, 2135, 1751, 1493, 2094, 1425, 1102, 1331,
	1570, 1843, 2165, 7, 1570, 1732, 1437, 2172, 1420, 6,
	2161, 5, 4, 1731, 3, 2176, 840, 80, 697, 84,
	2087, 1304, 1305, 1306, 2178, 2179, 1092, 2181, 839, 1051,
	790, 790, 790, 1960, 1004, 1419, 1418, 843, 1417, 1438,
	1427, 1426, 2177, 1416, 1414, 1415, 938, 1998, 81, 1412,
	1731, 1428, 1413, 2003, 2004, 1411, 1323, 841, 2, 0,
	0, 2010, 2011, 0, 1429, 58, 0, 0, 1765, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 1325,
	0, 0, 1252, 805, 804, 814, 815, 807, 808, 809,
	810, 811, 812, 813, 806, 0, 1343, 817, 1751, 79,
	697, 0, 1751, 1751, 1751, 1751, 1751, 0, 64, 790,
	0, 0, 0, 1943, 0, 0, 1751, 1291, 1570, 1995,
	0, 1843, 0, 0, 0, 1562, 0, 0, 0, 1299,
	0, 65, 86, 66, 67, 86, 0, 0, 338, 0,
	0, 0, 0, 0, 0, 88, 700, 0, 0, 2066,
	698, 88, 0, 0, 0, 0, 0, 0, 698, 88,
	88, 0, 58, 0, 0, 0, 0, 0, 1852, 1751,
	0, 1617, 1843, 0, 1422, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 1434, 0, 0, 942, 1316, 1317,
	0, 0, 0, 0, 0, 1440, 1441, 1319, 1751, 0,
	87, 0, 84, 698, 0, 0, 0, 1436, 0, 1332,
	0, 1335, 1336, 0, 0, 1732, 0, 0, 0, 1664,
	0, 1943, 0, 1346, 0, 1347, 1348, 1349, 1343, 0,
	0, 0, 0, 698, 0, 0, 1430, 1431, 1433, 88,
	0, 0, 1432, 88, 0, 88, 88, 1765, 0, 0,
	0, 0, 88, 0, 337, 0, 88, 88, 0, 0,
	0, 68, 1373, 0, 0, 88, 88, 1731, 1379, 88,
	88, 0, 88, 0, 82, 493, 1383, 1384, 0, 1385,
	1386, 790, 790, 790, 0, 1722, 0, 697, 1725, 790,
	790, 64, 0, 0, 0, 697, 1399, 0, 0, 0,
	700, 86, 928, 0, 0, 480, 0, 0, 39, 86,
	40, 41, 42, 88, 65, 0, 66, 67, 0, 0,
	0, 0, 790, 53, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 1843, 0, 0, 0, 0, 0, 0,
	697, 0, 0, 0, 0, 0, 790, 790, 790, 790,
	1570, 0, 0, 0, 0, 0, 0, 0, 62, 63,
	88, 0, 1489, 51, 88, 88, 69, 0, 0, 0,
	697, 0, 1765, 80, 0, 84, 0, 928, 816, 0,
	1992, 0, 700, 0, 0, 0, 1943, 1797, 1439, 0,
	0, 0, 0, 0, 0, 1732, 1801, 51, 578, 1107,
	736, 738, 739, 579, 580, 2009, 0, 0, 737, 740,
	0, 0, 1615, 0, 843, 0, 1438, 1427, 1426, 0,
	0, 0, 0, 1313, 0, 0, 0, 698, 1428, 0,
	0, 1526, 46, 0, 0, 0, 0, 0, 1950, 0,
	0, 1429, 0, 0, 68, 0, 1834, 0, 1836, 44,
	0, 0, 805, 804, 814, 815, 807, 808, 809, 810,
	811, 812, 813, 806, 64, 43, 817, 48, 47, 49,
	0, 0, 1853, 1854, 0, 0, 45, 0, 0, 0,
	0, 0, 0, 0, 83, 0, 0, 65, 790, 66,
	67, 0, 0, 0, 0, 698, 1951, 0, 0, 2069,
	0, 0, 0, 0, 0, 0, 1699, 1118, 0, 338,
	0, 0, 1118, 1118, 1118, 1118, 0, 0, 1118, 1118,
	1118, 0, 0, 1914, 83, 0, 58, 1715, 0, 0,
	88, 0, 0, 88, 0, 0, 88, 493, 0, 69,
	0, 62, 63, 0, 337, 1118, 1118, 1118, 1118, 0,
	0, 1422, 2009, 0, 1752, 2117, 0, 0, 0, 493,
	0, 1434, 1939, 0, 697, 0, 1940, 0, 0, 700,
	0, 86, 1440, 1441, 0, 0, 0, 700, 0, 0,
	86, 1954, 0, 0, 1436, 843, 0, 1438, 1427, 1426,
	938, 0, 0, 938, 938, 938, 1126, 1669, 0, 1428,
	0, 0, 0, 0, 0, 1684, 1685, 1686, 0, 0,
	1790, 0, 1429, 1430, 1431, 1433, 0, 68, 0, 1432,
	0, 1696, 700, 0, 698, 698, 0, 0, 0, 0,
	82, 1701, 697, 1999, 2000, 1702, 61, 0, 0, 1703,
	1704, 0, 2005, 1706, 1707, 1709, 1711, 1713, 0, 0,
	0, 0, 700, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 60, 0, 805, 804, 814, 815, 807,
	808, 809, 810, 811, 812, 813, 806, 0, 0, 817,
	0, 0, 790, 698, 698, 790, 0, 790, 0, 790,
	0, 790, 790, 0, 0, 0, 0, 0, 337, 88,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 493,
	0, 0, 493, 0, 62, 63, 0, 0, 58, 698,
	0, 0, 1422, 0, 0, 0, 0, 88, 0, 1874,
	0, 1744, 1434, 0, 0, 0, 493, 0, 0, 0,
	548, 0, 0, 1440, 1441, 669, 672, 816, 0, 0,
	248, 0, 64, 0, 675, 1436, 0, 0, 0, 0,
	0, 697, 697, 1118, 0, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 66, 67, 0,
	337, 87, 0, 84, 1430, 1431, 1433, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 1822, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1571, 0,
	0, 0, 493, 0, 1832, 1950, 1118, 0, 0, 0,
	697, 697, 1380, 0, 0, 0, 243, 69, 0, 0,
	0, 0, 0, 1752, 0, 0, 0, 1752, 1752, 1752,
	1752, 1752, 0, 0, 0, 0, 700, 0, 0, 0,
	0, 1874, 0, 1980, 0, 0, 697, 0, 0, 0,
	698, 698, 0, 0, 0, 536, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	1902, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 66, 67, 0,
	0, 0, 0, 0, 1752, 68, 0, 337, 493, 0,
	0, 0, 0, 0, 700, 0, 0, 0, 59, 0,
	0, 0, 1929, 0, 1930, 1931, 1932, 1933, 1934, 2031,
	2032, 0, 0, 1752, 0, 0, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 928,
	816, 0, 843, 0, 1438, 1427, 1426, 337, 0, 88,
	0, 1975, 0, 0, 493, 337, 1428, 0, 88, 0,
	0, 0, 0, 0, 0, 1118, 1944, 0, 0, 1429,
	0, 0, 0, 338, 1118, 0, 0, 697, 697, 0,
	0, 0, 62, 63, 0, 0, 2088, 2002, 928, 0,
	843, 0, 1438, 1427, 1426, 0, 0, 0, 0, 0,
	337, 698, 0, 0, 1428, 68, 0, 2106, 2107, 2108,
	843, 0, 493, 2018, 0, 0, 0, 1429, 0, 0,
	0, 0, 796, 700, 700, 803, 0, 0, 493, 0,
	337, 818, 819, 820, 821, 822, 823, 824, 0, 797,
	802, 795, 825, 826, 827, 828, 798, 799, 800, 801,
	805, 804, 814, 815, 807, 808, 809, 810, 811, 812,
	813, 806, 509, 0, 817, 87, 0, 84, 0, 0,
	87, 0, 84, 86, 0, 0, 0, 0, 0, 1422,
	0, 0, 700, 700, 2088, 732, 0, 2162, 745, 1434,
	0, 0, 0, 2072, 0, 0, 0, 0, 0, 0,
	1440, 1441, 62, 63, 0, 764, 0, 843, 0, 1438,
	1427, 1426, 1436, 0, 0, 0, 0, 2088, 700, 928,
	0, 1428, 0, 0, 793, 0, 0, 1422, 0, 0,
	0, 2109, 842, 0, 1429, 0, 0, 1434, 697, 0,
	0, 1430, 1431, 1433, 0, 0, 0, 1432, 1440, 1441,
	0, 2121, 0, 0, 509, 0, 64, 87, 0, 84,
	1436, 64, 0, 0, 0, 1571, 2128, 2129, 2130, 0,
	0, 0, 872, 0, 2133, 0, 0, 0, 0, 65,
	0, 66, 67, 0, 65, 0, 66, 67, 0, 1430,
	1431, 1433, 0, 0, 0, 1432, 0, 0, 0, 0,
	88, 0, 0, 0, 87, 0, 84, 86, 86, 0,
	87, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 337, 2169, 2170, 2171, 0, 0,
	0, 69, 0, 0, 0, 0, 69, 493, 87, 0,
	1880, 0, 0, 58, 1422, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 1434, 2182, 0, 0, 0, 700,
	700, 789, 0, 0, 0, 1440, 1441, 0, 0, 0,
	0, 65, 977, 66, 67, 0, 837, 1436, 0, 0,
	0, 0, 0, 0, 872, 0, 849, 850, 851, 852,
	853, 854, 337, 1439, 0, 64, 0, 0, 86, 0,
	0, 64, 0, 0, 33, 0, 1430, 1431, 1433, 68,
	0, 0, 1432, 0, 68, 0, 0, 0, 65, 0,
	66, 67, 0, 69, 65, 0, 66, 67, 1118, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1019,
	0, 1439, 0, 1569, 0, 816, 0, 0, 0, 0,
	0, 0, 65, 0, 66, 67, 0, 0, 1032, 1033,
	0, 26, 28, 0, 21, 0, 0, 842, 0, 0,
	69, 337, 0, 0, 86, 86, 69, 22, 0, 31,
	0, 0, 0, 86, 1879, 0, 0, 0, 0, 0,
	0, 2115, 0, 0, 0, 0, 0, 1923, 0, 23,
	24, 68, 0, 0, 69, 0, 62, 63, 0, 0,
	0, 62, 63, 0, 0, 0, 842, 0, 0, 0,
	700, 337, 337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1116, 0, 0, 0, 0, 0, 0,
	0, 0, 1130, 1161, 0, 0, 1924, 27, 68, 0,
	0, 0, 0, 886, 68, 789, 0, 0, 1439, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 58, 58, 58, 58, 58, 58,
	337, 337, 68, 86, 0, 0, 0, 86, 888, 0,
	83, 86, 86, 86, 86, 86, 0, 0, 62, 63,
	0, 0, 0, 1974, 0, 86, 0, 0, 1842, 1879,
	0, 837, 0, 0, 0, 1043, 337, 19, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 0, 0, 0,
	0, 0, 0, 0, 86, 62, 63, 0, 0, 0,
	0, 62, 63, 0, 0, 0, 0, 0, 86, 0,
	837, 0, 0, 168, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 0, 0, 1264, 0, 745, 0, 62,
	63, 1124, 0, 745, 0, 745, 889, 86, 493, 0,
	0, 0, 0, 0, 124, 887, 0, 0, 0, 1295,
	893, 892, 25, 0, 0, 88, 88, 0, 0, 0,
	493, 0, 0, 0, 29, 30, 1234, 32, 0, 0,
	1246, 0, 0, 0, 0, 1234, 0, 0, 842, 1246,
	1236, 0, 0, 843, 0, 1438, 1427, 1426, 0, 1236,
	0, 0, 0, 0, 0, 0, 0, 1428, 0, 58,
	0, 0, 0, 0, 0, 0, 0, 337, 337, 83,
	1429, 0, 0, 0, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 0, 1318, 1584, 1585, 1586, 1587, 1588,
	1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598,
	1599, 1600, 1601, 1602, 1603, 1604, 88, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 782, 781, 0, 0,
	1235, 0, 0, 0, 1737, 0, 0, 0, 843, 1235,
	1438, 1427, 1426, 0, 783, 0, 0, 0, 0, 493,
	0, 0, 1428, 0, 0, 0, 0, 0, 0, 0,
	1879, 0, 0, 0, 0, 1429, 1378, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1237, 1238, 1239, 1240,
	1241, 1242, 1243, 1244, 1245, 0, 0, 0, 0, 0,
	1422, 0, 88, 88, 1308, 1309, 1310, 0, 0, 0,
	1434, 88, 88, 0, 0, 0, 0, 0, 0, 493,
	0, 1440, 1441, 843, 0, 1438, 1427, 1426, 0, 0,
	2023, 2024, 0, 1436, 0, 0, 83, 1428, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 337, 39,
	1429, 40, 41, 42, 0, 0, 0, 0, 0, 0,
	0, 0, 1430, 1431, 1433, 0, 0, 0, 1432, 0,
	0, 784, 0, 0, 88, 0, 0, 0, 0, 0,
	1496, 0, 0, 849, 0, 1422, 1742, 0, 0, 0,
	0, 0, 0, 0, 1499, 1434, 782, 781, 0, 0,
	0, 0, 0, 0, 51, 0, 1440, 1441, 0, 0,
	0, 88, 0, 0, 783, 88, 0, 0, 1436, 88,
	88, 88, 88, 88, 0, 0, 0, 0, 1518, 1521,
	0, 88, 0, 88, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 493, 0, 0, 1430, 1431, 1433,
	0, 0, 493, 1432, 0, 0, 0, 0, 0, 1542,
	1232, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	1434, 0, 88, 46, 0, 0, 0, 493, 0, 0,
	0, 1440, 1441, 0, 1553, 0, 88, 0, 0, 0,
	44, 0, 0, 1436, 0, 0, 0, 0, 0, 843,
	0, 1438, 1427, 1426, 0, 0, 43, 0, 48, 47,
	49, 1568, 0, 1428, 1439, 88, 0, 45, 0, 0,
	0, 0, 1430, 1431, 1433, 0, 1429, 0, 1432, 1574,
	0, 784, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1613, 0, 872, 0, 0, 1742, 843, 0, 1438,
	1427, 1426, 0, 0, 0, 1507, 1508, 1509, 0, 0,
	0, 1428, 0, 1512, 1513, 0, 0, 0, 0, 0,
	0, 493, 0, 0, 1429, 0, 553, 0, 0, 0,
	0, 2157, 0, 0, 0, 0, 0, 0, 0, 0,
	2095, 0, 0, 552, 0, 0, 1124, 745, 549, 1439,
	0, 0, 0, 0, 0, 596, 0, 597, 0, 0,
	0, 0, 0, 0, 0, 587, 588, 0, 0, 0,
	1546, 1547, 1548, 1549, 493, 509, 0, 493, 80, 578,
	735, 736, 738, 739, 579, 580, 1422, 0, 0, 737,
	740, 550, 551, 554, 0, 0, 1434, 0, 547, 569,
	0, 0, 595, 0, 0, 0, 0, 1440, 1441, 0,
	0, 1718, 493, 0, 0, 493, 493, 493, 88, 1436,
	0, 0, 1728, 0, 1439, 0, 0, 0, 0, 0,
	567, 734, 0, 0, 1422, 0, 611, 0, 568, 0,
	2095, 1132, 566, 570, 1434, 0, 0, 0, 1430, 1431,
	1433, 0, 0, 0, 1432, 1440, 1441, 0, 0, 0,
	609, 0, 0, 0, 0, 0, 0, 1436, 0, 64,
	0, 842, 842, 0, 0, 0, 1134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 843, 0, 1438, 1427,
	1426, 0, 65, 0, 66, 67, 1430, 1431, 1433, 0,
	1428, 0, 1432, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 1687, 1429, 0, 0, 0, 0, 0, 0,
	1408, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 1817, 1818,
	1521, 1143, 1149, 1147, 0, 0, 1144, 0, 0, 1142,
	0, 0, 1151, 0, 0, 1150, 1136, 1146, 1148, 1145,
	1140, 563, 0, 0, 1135, 0, 1153, 1152, 1154, 1133,
	1156, 0, 0, 0, 1160, 1157, 1159, 1158, 598, 1155,
	0, 0, 0, 0, 0, 0, 0, 0, 1137, 1138,
	1439, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	613, 584, 710, 599, 0, 0, 0, 0, 0, 1139,
	1141, 0, 68, 1422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 51, 82, 0, 39, 0, 40,
	41, 42, 0, 582, 1440, 1441, 0, 0, 1439, 0,
	0, 0, 37, 0, 0, 0, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 610, 606, 607, 604,
	605, 603, 602, 601, 612, 589, 590, 591, 592, 594,
	0, 0, 586, 585, 593, 1430, 1431, 1433, 0, 0,
	0, 1432, 51, 0, 0, 0, 0, 132, 1941, 1040,
	0, 0, 0, 0, 0, 0, 1826, 0, 0, 1827,
	0, 1828, 0, 1829, 0, 1830, 1831, 0, 0, 62,
	63, 608, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 843, 0,
	1438, 1427, 1426, 0, 0, 0, 0, 0, 0, 1991,
	0, 0, 1428, 0, 0, 0, 0, 0, 0, 0,
	0, 46, 0, 0, 0, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 2017, 0, 0, 0, 0,
	0, 0, 0, 0, 43, 0, 48, 47, 49, 0,
	0, 0, 0, 0, 2025, 45, 2026, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 0, 178, 179,
	2152, 180, 181, 182, 184, 183, 149, 150, 151, 152,
	153, 157, 155, 154, 156, 126, 128, 1439, 124, 127,
	133, 129, 130, 131, 145, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 146, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 0, 0, 0, 0,
	1039, 0, 0, 0, 0, 1422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2101, 1440, 1441, 2102, 0,
	0, 2104, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2017, 0, 0, 0, 0, 0, 1430, 1431, 1433,
	0, 0, 125, 1432, 0, 842, 454, 443, 0, 402,
	456, 370, 390, 465, 392, 393, 428, 350, 411, 0,
	387, 368, 0, 0, 0, 373, 343, 382, 344, 371,
	404, 0, 369, 0, 445, 414, 2154, 842, 0, 708,
	0, 709, 0, 0, 0, 0, 0, 406, 447, 701,
	702, 401, 429, 359, 418, 458, 388, 424, 459, 695,
	0, 0, 80, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 423, 453, 384, 356, 468, 0,
	427, 342, 421, 0, 0, 348, 707, 464, 451, 378,
	377, 0, 0, 0, 0, 0, 0, 0, 405, 410,
	434, 398, 0, 0, 0, 1538, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 374, 0,
	417, 0, 0, 0, 355, 349, 0, 403, 0, 0,
	0, 358, 0, 375, 435, 0, 339, 441, 448, 400,
	1539, 0, 452, 397, 396, 0, 0, 0, 0, 1439,
	0, 389, 335, 64, 466, 455, 693, 446, 372, 383,
	0, 379, 0, 0, 0, 380, 381, 0, 0, 416,
	430, 0, 0, 0, 0, 0, 65, 437, 66, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 340, 376, 439, 442, 362, 426, 352, 385, 432,
	386, 408, 367, 0, 0, 1143, 1149, 1147, 0, 0,
	1144, 0, 0, 1142, 0, 0, 1151, 0, 69, 1150,
	1136, 1146, 1148, 1145, 1540, 0, 0, 0, 1135, 0,
	1153, 1152, 1154, 1133, 1156, 0, 0, 0, 1160, 1157,
	1159, 1158, 0, 1155, 0, 0, 0, 0, 0, 0,
	0, 0, 1137, 1138, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1139, 1141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 710, 599, 0, 0,
	0, 345, 0, 0, 0, 0, 68, 346, 366, 449,
	0, 0, 0, 0, 0, 334, 0, 0, 0, 694,
	0, 0, 425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	365, 716, 717, 714, 715, 713, 712, 711, 436, 703,
	590, 704, 705, 594, 444, 0, 586, 585, 706, 0,
	0, 0, 467, 0, 0, 0, 0, 0, 0, 0,
	391, 341, 395, 0, 0, 0, 0, 0, 0, 0,
	353, 354, 0, 0, 399, 394, 420, 422, 431, 440,
	450, 457, 433, 62, 63, 608, 454, 443, 0, 402,
	456, 370, 390, 465, 392, 393, 428, 350, 411, 0,
	387, 368, 0, 0, 0, 373, 343, 382, 344, 371,
	404, 0, 369, 0, 445, 414, 0, 0, 0, 463,
	0, 419, 0, 0, 0, 0, 0, 406, 447, 409,
	438, 401, 429, 359, 418, 458, 388, 424, 459, 0,
	0, 0, 51, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 423, 453, 384, 356, 468, 0,
	427, 342, 421, 0, 0, 348, 351, 464, 451, 378,
	377, 0, 843, 0, 1438, 1427, 1426, 0, 405, 410,
	434, 398, 0, 0, 0, 0, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 374, 1429,
	417, 0, 0, 0, 355, 349, 0, 403, 0, 0,
	0, 358, 0, 375, 435, 0, 339, 441, 448, 400,
	0, 0, 452, 397, 396, 0, 0, 0, 0, 0,
	0, 389, 335, 64, 466, 455, 407, 446, 372, 383,
	0, 379, 0, 0, 0, 380, 381, 0, 0, 416,
	430, 0, 0, 0, 1942, 0, 65, 437, 66, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 340, 376, 439, 442, 362, 426, 352, 385, 432,
	386, 408, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 1422,
	0, 0, 1761, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 0, 1769, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1430, 1431, 1433, 0, 0, 0, 1432, 0, 0,
	0, 345, 0, 0, 0, 0, 68, 346, 366, 449,
	0, 0, 0, 0, 1770, 1768, 1764, 1763, 0, 0,
	0, 0, 425, 0, 0, 0, 0, 1766, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 360, 361, 412, 413, 460, 461, 462, 436, 357,
	0, 363, 364, 0, 444, 0, 0, 0, 415, 0,
	0, 0, 467, 0, 0, 0, 0, 0, 0, 0,
	391, 341, 395, 0, 0, 0, 0, 0, 0, 0,
	353, 354, 0, 0, 399, 394, 420, 422, 431, 440,
	450, 457, 433, 62, 63, 454, 443, 0, 402, 456,
	370, 390, 465, 392, 393, 428, 350, 411, 0, 387,
	368, 0, 0, 0, 373, 343, 382, 344, 371, 404,
	0, 369, 0, 445, 414, 0, 0, 0, 463, 0,
	419, 0, 0, 1439, 0, 0, 406, 447, 409, 438,
	401, 429, 359, 418, 458, 388, 424, 459, 0, 0,
	0, 51, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 423, 453, 384, 356, 468, 0, 427,
	342, 421, 0, 0, 348, 351, 464, 451, 378, 377,
	0, 843, 0, 1438, 1427, 1426, 0, 405, 410, 434,
	398, 0, 0, 0, 0, 1428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 374, 1429, 417,
	0, 0, 0, 355, 349, 0, 403, 0, 0, 0,
	358, 0, 375, 435, 0, 339, 441, 448, 400, 0,
	0, 452, 397, 396, 0, 0, 0, 0, 0, 0,
	389, 335, 64, 466, 455, 407, 446, 372, 383, 0,
	379, 0, 0, 0, 380, 381, 0, 0, 416, 430,
	0, 0, 0, 1845, 0, 65, 437, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	340, 376, 439, 442, 362, 426, 352, 385, 432, 386,
	408, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 1422, 0,
	0, 1887, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 0, 1769, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1430, 1431, 1433, 0, 0, 0, 1432, 0, 0, 0,
	345, 0, 0, 0, 0, 68, 346, 366, 449, 0,
	0, 0, 0, 1770, 1768, 0, 0, 0, 0, 0,
	0, 425, 0, 0, 0, 0, 1766, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	360, 361, 412, 413, 460, 461, 462, 436, 357, 0,
	363, 364, 0, 444, 0, 0, 0, 415, 0, 0,
	0, 467, 0, 0, 0, 0, 0, 0, 0, 391,
	341, 395, 0, 0, 0, 0, 0, 0, 0, 353,
	354, 0, 0, 399, 394, 420, 422, 431, 440, 450,
	457, 433, 62, 63, 454, 443, 0, 402, 456, 370,
	390, 465, 392, 393, 428, 350, 411, 0, 387, 368,
	0, 0, 0, 373, 343, 382, 344, 371, 404, 0,
	369, 0, 445, 414, 0, 0, 0, 463, 0, 419,
	0, 0, 1439, 0, 0, 406, 447, 409, 438, 401,
	429, 359, 418, 458, 388, 424, 459, 0, 0, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 423, 453, 384, 356, 468, 0, 427, 342,
	421, 0, 0, 348, 351, 464, 451, 378, 377, 0,
	0, 0, 0, 0, 0, 0, 405, 410, 434, 398,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 374, 0, 417, 0,
	0, 0, 355, 349, 0, 403, 0, 0, 0, 358,
	0, 375, 435, 0, 339, 441, 448, 400, 0, 0,
	452, 397, 396, 0, 0, 0, 0, 0, 0, 389,
	335, 64, 466, 455, 407, 446, 372, 383, 0, 379,
	0, 0, 0, 380, 381, 0, 0, 416, 430, 0,
	0, 0, 0, 0, 65, 437, 66, 67, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 347, 340,
	376, 439, 442, 362, 426, 352, 385, 432, 386, 408,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1769, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 68, 346, 366, 449, 0, 0,
	0, 0, 1770, 1768, 0, 0, 0, 0, 0, 0,
	425, 0, 0, 0, 0, 1766, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 360,
	361, 412, 413, 460, 461, 462, 436, 357, 0, 363,
	364, 0, 444, 0, 0, 0, 415, 0, 0, 0,
	467, 0, 0, 0, 0, 0, 0, 0, 391, 341,
	395, 0, 0, 0, 0, 0, 0, 0, 353, 354,
	0, 0, 399, 394, 420, 422, 431, 440, 450, 457,
	433, 62, 63, 454, 443, 0, 402, 456, 370, 390,
	465, 392, 393, 428, 350, 411, 0, 387, 368, 0,
	0, 0, 373, 343, 382, 344, 371, 404, 0, 369,
	0, 445, 414, 0, 147, 0, 463, 0, 419, 0,
	0, 0, 0, 0, 406, 447, 409, 438, 401, 429,
	359, 418, 458, 388, 424, 459, 0, 0, 0, 80,
	0, 84, 51, 0, 0, 0, 0, 0, 0, 0,
	0, 423, 453, 384, 356, 468, 0, 427, 342, 421,
	0, 0, 348, 351, 464, 451, 378, 377, 0, 0,
	0, 0, 0, 0, 0, 405, 410, 434, 398, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1531, 0, 374, 0, 417, 0, 0,
	0, 355, 349, 0, 403, 132, 0, 158, 358, 0,
	375, 435, 0, 339, 441, 448, 400, 0, 0, 452,
	397, 396, 0, 0, 0, 0, 0, 0, 389, 335,
	64, 466, 455, 407, 446, 372, 383, 0, 379, 0,
	148, 0, 380, 381, 0, 0, 416, 430, 0, 0,
	0, 0, 0, 65, 437, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 340, 376,
	439, 442, 362, 426, 352, 385, 432, 386, 408, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 0, 178, 179, 0, 180,
	181, 182, 184, 183, 149, 150, 151, 152, 153, 157,
	155, 154, 156, 126, 128, 0, 124, 127, 133, 129,
	130, 131, 145, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 146, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 68, 346, 366, 449, 0, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 0, 0, 425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 365, 360, 361,
	412, 413, 460, 461, 462, 436, 357, 0, 363, 364,
	0, 444, 0, 0, 0, 415, 0, 0, 0, 467,
	125, 0, 0, 0, 0, 0, 0, 391, 341, 395,
	0, 0, 0, 0, 0, 0, 0, 353, 354, 0,
	0, 399, 394, 420, 422, 431, 440, 450, 457, 433,
	62, 63, 454, 443, 0, 402, 456, 370, 390, 465,
	392, 393, 428, 350, 411, 0, 387, 368, 0, 0,
	0, 373, 343, 382, 344, 371, 404, 0, 369, 0,
	445, 414, 0, 147, 0, 463, 0, 419, 0, 0,
	0, 0, 0, 406, 447, 409, 438, 401, 429, 359,
	418, 458, 388, 424, 459, 0, 0, 0, 51, 0,
	968, 51, 969, 0, 0, 0, 0, 0, 0, 0,
	423, 453, 384, 356, 468, 0, 427, 342, 421, 0,
	0, 348, 351, 464, 451, 378, 377, 0, 0, 0,
	0, 0, 0, 0, 405, 410, 434, 398, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 374, 0, 417, 0, 0, 0,
	355, 349, 0, 403, 132, 0, 158, 358, 0, 375,
	435, 0, 339, 441, 448, 400, 0, 0, 452, 397,
	396, 0, 0, 0, 0, 0, 0, 389, 335, 64,
	466, 455, 407, 446, 372, 383, 0, 379, 0, 148,
	0, 380, 381, 0, 0, 416, 430, 0, 0, 0,
	0, 0, 65, 437, 66, 67, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 340, 376, 439,
	442, 362, 426, 352, 385, 432, 386, 408, 367, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 0, 178, 179, 0, 180, 181,
	182, 184, 183, 149, 150, 151, 152, 153, 157, 155,
	154, 156, 126, 128, 0, 124, 127, 133, 129, 130,
	131, 145, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 470, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 0, 0, 0, 0, 345, 0, 0,
	0, 0, 68, 346, 366, 449, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 365, 360, 361, 412,
	413, 460, 461, 462, 436, 357, 0, 363, 364, 0,
	444, 0, 0, 0, 415, 0, 0, 0, 467, 125,
	0, 0, 0, 0, 0, 0, 391, 341, 395, 0,
	0, 0, 0, 0, 0, 0, 353, 354, 0, 0,
	399, 394, 420, 422, 431, 440, 450, 457, 433, 62,
	63, 454, 443, 0, 402, 456, 370, 390, 465, 392,
	393, 428, 350, 411, 0, 387, 368, 0, 0, 0,
	373, 343, 382, 344, 371, 404, 0, 369, 0, 445,
	414, 0, 147, 0, 463, 0, 419, 0, 0, 0,
	0, 0, 406, 447, 409, 438, 401, 429, 359, 418,
	458, 388, 424, 459, 0, 489, 0, 51, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 423,
	453, 384, 356, 468, 0, 427, 342, 421, 0, 0,
	348, 351, 464, 451, 378, 377, 0, 0, 0, 0,
	0, 0, 0, 405, 410, 434, 398, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 374, 0, 417, 0, 0, 0, 355,
	349, 0, 403, 1082, 0, 158, 358, 0, 375, 435,
	0, 339, 441, 448, 400, 0, 0, 452, 397, 396,
	0, 0, 0, 0, 0, 0, 389, 335, 64, 466,
	455, 407, 446, 372, 383, 0, 379, 0, 1085, 0,
	380, 381, 0, 0, 416, 430, 0, 0, 0, 0,
	0, 65, 437, 66, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 347, 340, 376, 439, 442,
	362, 426, 352, 385, 432, 386, 408, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 168, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 0, 178, 179, 0, 180, 181, 182,
	184, 183, 149, 1078, 151, 152, 1086, 157, 155, 154,
	156, 126, 128, 0, 124, 1081, 133, 129, 130, 131,
	1084, 1083, 135, 136, 137, 138, 139, 140, 141, 142,
	143, 144, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 345, 0, 0, 0,
	0, 68, 346, 366, 449, 0, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 0, 0, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 365, 360, 361, 412, 413,
	460, 461, 462, 436, 357, 0, 363, 364, 0, 444,
	0, 0, 0, 415, 0, 0, 0, 467, 125, 0,
	0, 0, 0, 0, 0, 391, 341, 395, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 0, 0, 399,
	394, 420, 422, 431, 440, 450, 457, 433, 62, 63,
	454, 443, 0, 402, 456, 370, 390, 465, 392, 393,
	428, 350, 411, 0, 387, 368, 0, 0, 0, 373,
	343, 382, 344, 371, 404, 0, 369, 0, 445, 414,
	0, 0, 0, 463, 0, 419, 0, 0, 0, 0,
	0, 406, 447, 409, 438, 401, 429, 359, 418, 458,
	388, 424, 459, 0, 0, 0, 51, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 423, 453,
	384, 356, 468, 0, 427, 342, 421, 0, 0, 348,
	351, 464, 451, 378, 377, 0, 0, 0, 0, 0,
	0, 0, 405, 410, 434, 398, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1825, 0, 374, 0, 417, 0, 0, 0, 355, 349,
	0, 403, 0, 0, 0, 358, 0, 375, 435, 0,
	339, 441, 448, 400, 0, 0, 452, 397, 396, 0,
	0, 0, 0, 0, 0, 389, 335, 64, 466, 455,
	407, 446, 372, 383, 0, 379, 0, 0, 0, 380,
	381, 0, 0, 416, 430, 0, 0, 0, 0, 0,
	65, 437, 66, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 340, 376, 439, 442, 362,
	426, 352, 385, 432, 386, 408, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	68, 346, 366, 449, 0, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 365, 360, 361, 412, 413, 460,
	461, 462, 436, 357, 0, 363, 364, 0, 444, 0,
	0, 0, 415, 0, 0, 0, 467, 0, 0, 0,
	0, 0, 0, 0, 391, 341, 395, 0, 0, 0,
	0, 0, 0, 0, 353, 354, 0, 0, 399, 394,
	420, 422, 431, 440, 450, 457, 433, 62, 63, 454,
	443, 0, 402, 456, 370, 390, 465, 392, 393, 428,
	350, 411, 0, 387, 368, 0, 0, 0, 373, 343,
	382, 344, 371, 404, 0, 369, 0, 445, 414, 0,
	0, 0, 463, 0, 419, 0, 0, 0, 0, 0,
	406, 447, 409, 438, 401, 429, 359, 418, 458, 388,
	424, 459, 0, 0, 0, 80, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 423, 453, 384,
	356, 468, 0, 427, 342, 421, 0, 0, 348, 351,
	464, 451, 378, 377, 0, 0, 0, 0, 0, 0,
	0, 405, 410, 434, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 374, 0, 417, 0, 0, 0, 355, 349, 0,
	403, 0, 0, 0, 358, 0, 375, 435, 0, 339,
	441, 448, 400, 0, 0, 452, 397, 396, 0, 0,
	0, 0, 0, 0, 389, 335, 64, 466, 455, 407,
	446, 372, 383, 0, 379, 0, 0, 0, 380, 381,
	0, 0, 416, 430, 0, 0, 0, 0, 0, 65,
	437, 66, 67, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 347, 340, 376, 439, 442, 362, 426,
	352, 385, 432, 386, 408, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 345, 0, 0, 0, 0, 68,
	346, 366, 449, 0, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 0, 0, 425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 365, 360, 361, 412, 413, 460, 461,
	462, 436, 357, 0, 363, 364, 0, 444, 0, 0,
	0, 415, 0, 0, 0, 467, 0, 0, 0, 0,
	0, 0, 0, 391, 341, 395, 0, 0, 0, 0,
	0, 0, 0, 353, 354, 0, 0, 399, 394, 420,
	422, 431, 440, 450, 457, 433, 62, 63, 454, 443,
	0, 402, 456, 370, 390, 465, 392, 393, 428, 350,
	411, 0, 387, 368, 0, 0, 0, 373, 343, 382,
	344, 371, 404, 0, 369, 0, 445, 414, 0, 0,
	0, 463, 0, 419, 0, 0, 0, 0, 0, 406,
	447, 409, 438, 401, 429, 359, 418, 458, 388, 424,
	459, 0, 0, 0, 51, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 423, 453, 384, 356,
	468, 0, 427, 342, 421, 0, 0, 348, 351, 464,
	451, 378, 377, 687, 0, 0, 0, 0, 0, 0,
	405, 410, 434, 398, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	374, 0, 417, 0, 0, 0, 355, 349, 0, 403,
	0, 0, 0, 358, 0, 375, 435, 0, 339, 441,
	448, 400, 0, 0, 452, 397, 396, 0, 0, 0,
	0, 0, 0, 389, 335, 64, 466, 455, 407, 446,
	372, 383, 0, 379, 0, 0, 0, 380, 381, 0,
	0, 416, 430, 0, 0, 0, 0, 0, 65, 437,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 340, 376, 439, 442, 362, 426, 352,
	385, 432, 386, 408, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 0, 68, 346,
	366, 449, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 365, 360, 361, 412, 413, 460, 461, 462,
	436, 357, 0, 363, 364, 0, 444, 0, 0, 0,
	415, 0, 0, 0, 467, 0, 0, 0, 0, 0,
	0, 0, 391, 341, 395, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 0, 0, 399, 394, 420, 422,
	431, 440, 450, 457, 433, 62, 63, 454, 443, 0,
	402, 456, 370, 390, 465, 392, 393, 428, 350, 411,
	0, 387, 368, 0, 0, 0, 373, 343, 382, 344,
	371, 404, 0, 369, 0, 445, 414, 0, 0, 0,
	463, 0, 419, 0, 0, 0, 0, 0, 406, 447,
	409, 438, 401, 429, 359, 418, 458, 388, 424, 459,
	0, 0, 0, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 423, 453, 384, 356, 468,
	0, 427, 342, 421, 0, 0, 348, 351, 464, 451,
	378, 377, 0, 0, 0, 0, 0, 0, 0, 405,
	410, 434, 398, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 374,
	0, 417, 0, 0, 0, 355, 349, 0, 403, 0,
	0, 0, 358, 0, 375, 435, 0, 339, 441, 448,
	400, 0, 0, 452, 397, 396, 0, 0, 0, 0,
	0, 0, 389, 335, 64, 466, 455, 939, 446, 372,
	383, 0, 379, 0, 0, 0, 380, 381, 0, 0,
	416, 430, 0, 0, 0, 0, 0, 65, 437, 66,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 347, 340, 376, 439, 442, 362, 426, 352, 385,
	432, 386, 408, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 345, 0, 0, 0, 0, 68, 346, 366,
	449, 0, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 0, 0, 425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 365, 360, 361, 412, 413, 460, 461, 462, 436,
	357, 0, 363, 364, 0, 444, 0, 0, 0, 415,
	0, 0, 0, 467, 0, 0, 0, 0, 0, 0,
	0, 391, 341, 395, 0, 0, 0, 0, 0, 0,
	0, 353, 354, 0, 0, 399, 394, 420, 422, 431,
	440, 450, 457, 433, 62, 63, 454, 443, 0, 402,
	456, 370, 390, 465, 392, 393, 428, 350, 411, 0,
	387, 368, 0, 0, 0, 373, 343, 382, 344, 371,
	404, 0, 369, 0, 445, 414, 0, 0, 0, 463,
	0, 419, 0, 0, 0, 0, 0, 406, 447, 409,
	438, 401, 429, 359, 418, 458, 388, 424, 459, 0,
	0, 0, 51, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 423, 453, 384, 356, 468, 0,
	427, 342, 421, 0, 0, 348, 351, 464, 451, 378,
	377, 0, 0, 0, 0, 0, 0, 0, 405, 410,
	434, 398, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 374, 0,
	417, 0, 0, 0, 355, 349, 0, 403, 0, 0,
	0, 358, 0, 375, 435, 0, 339, 441, 448, 400,
	0, 0, 452, 397, 396, 0, 0, 0, 0, 0,
	0, 389, 335, 64, 466, 455, 407, 446, 372, 383,
	0, 379, 0, 0, 0, 380, 381, 0, 0, 416,
	430, 0, 0, 0, 0, 0, 65, 437, 66, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 340, 376, 439, 442, 362, 426, 352, 385, 432,
	386, 408, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 345, 0, 0, 0, 0, 68, 346, 366, 449,
	0, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 360, 361, 412, 413, 460, 461, 462, 436, 357,
	0, 363, 364, 0, 444, 0, 0, 0, 415, 0,
	0, 0, 467, 0, 0, 0, 0, 0, 0, 0,
	391, 341, 395, 0, 0, 0, 0, 0, 0, 0,
	353, 354, 0, 0, 399, 394, 420, 422, 431, 440,
	450, 457, 433, 62, 63, 454, 2092, 0, 402, 456,
	370, 390, 465, 392, 393, 428, 350, 411, 0, 387,
	368, 0, 0, 0, 373, 343, 382, 344, 371, 404,
	0, 369, 0, 445, 414, 0, 0, 0, 463, 0,
	419, 0, 0, 0, 0, 0, 406, 447, 409, 438,
	401, 429, 359, 418, 458, 388, 424, 459, 509, 0,
	0, 51, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 423, 453, 384, 356, 468, 0, 427,
	342, 421, 0, 0, 348, 351, 464, 451, 378, 377,
	0, 843, 0, 1438, 1427, 1426, 0, 405, 410, 434,
	398, 0, 0, 0, 0, 1428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 374, 1429, 417,
	0, 0, 0, 355, 349, 0, 403, 0, 0, 0,
	358, 0, 375, 435, 0, 339, 441, 448, 400, 0,
	0, 452, 397, 396, 0, 0, 0, 0, 0, 0,
	389, 0, 64, 466, 455, 407, 446, 372, 383, 0,
	379, 0, 0, 0, 380, 381, 0, 0, 416, 430,
	0, 0, 0, 0, 0, 65, 437, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	340, 376, 439, 442, 362, 426, 352, 385, 432, 386,
	408, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 1947, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1430, 1431, 1433, 0, 0, 0, 1432, 0, 0, 0,
	345, 0, 0, 0, 0, 68, 346, 366, 449, 0,
	0, 0, 0, 0, 1742, 0, 0, 0, 0, 0,
	0, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	360, 361, 412, 413, 460, 461, 462, 436, 357, 0,
	363, 364, 0, 444, 0, 0, 0, 415, 0, 0,
	0, 467, 0, 0, 0, 0, 0, 0, 0, 391,
	341, 395, 0, 0, 0, 0, 0, 0, 0, 353,
	354, 0, 0, 399, 394, 420, 422, 431, 440, 450,
	457, 433, 62, 63, 454, 443, 0, 402, 456, 370,
	390, 465, 392, 393, 428, 350, 411, 0, 387, 368,
	0, 0, 0, 373, 343, 382, 344, 371, 404, 0,
	369, 0, 445, 414, 0, 0, 0, 463, 0, 419,
	0, 0, 1439, 0, 0, 406, 447, 409, 438, 401,
	429, 359, 418, 458, 388, 424, 459, 0, 0, 0,
	80, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 423, 453, 384, 356, 468, 0, 427, 342,
	421, 0, 0, 348, 351, 464, 451, 378, 377, 0,
	0, 0, 0, 0, 0, 0, 405, 410, 434, 398,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 374, 0, 417, 0,
	0, 0, 355, 349, 0, 403, 0, 0, 0, 358,
	0, 375, 435, 0, 339, 441, 448, 400, 0, 0,
	452, 397, 396, 0, 0, 0, 0, 0, 0, 389,
	0, 64, 466, 455, 407, 446, 372, 383, 0, 379,
	0, 0, 0, 380, 381, 0, 0, 416, 430, 0,
	0, 0, 0, 0, 65, 437, 66, 67, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 347, 340,
	376, 439, 442, 362, 426, 352, 385, 432, 386, 408,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 0, 68, 346, 366, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 360,
	361, 412, 413, 460, 461, 462, 436, 357, 0, 363,
	364, 0, 444, 0, 0, 0, 415, 0, 0, 0,
	467, 0, 0, 0, 0, 0, 0, 0, 391, 341,
	395, 0, 0, 0, 0, 0, 0, 0, 353, 354,
	0, 0, 399, 394, 420, 422, 431, 440, 450, 457,
	433, 62, 63, 454, 443, 0, 402, 456, 370, 390,
	465, 392, 393, 428, 350, 411, 0, 387, 368, 0,
	0, 0, 373, 343, 382, 344, 371, 404, 0, 369,
	0, 445, 414, 0, 0, 0, 463, 0, 419, 0,
	0, 0, 0, 0, 406, 447, 409, 438, 401, 429,
	359, 418, 458, 388, 424, 459, 0, 0, 0, 87,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 423, 453, 384, 356, 468, 0, 427, 342, 421,
	0, 0, 348, 351, 464, 451, 378, 377, 0, 0,
	0, 0, 0, 0, 0, 405, 410, 434, 398, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 374, 0, 417, 0, 0,
	0, 355, 349, 0, 403, 0, 0, 0, 358, 0,
	375, 435, 0, 339, 441, 448, 400, 0, 0, 452,
	397, 396, 0, 0, 0, 0, 0, 0, 389, 0,
	64, 466, 455, 407, 446, 372, 383, 0, 379, 0,
	0, 0, 380, 381, 0, 0, 416, 430, 0, 0,
	0, 0, 0, 65, 437, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 340, 376,
	439, 442, 362, 426, 352, 385, 432, 386, 408, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 0,
	0, 0, 0, 68, 346, 366, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 365, 360, 361,
	412, 413, 460, 461, 462, 436, 357, 0, 363, 364,
	0, 444, 0, 0, 0, 415, 0, 0, 0, 467,
	0, 0, 0, 0, 0, 0, 0, 391, 341, 395,
	0, 0, 0, 0, 0, 0, 0, 353, 354, 0,
	0, 399, 394, 420, 422, 431, 440, 450, 457, 433,
	62, 63, 454, 443, 0, 402, 456, 370, 390, 465,
	392, 393, 428, 350, 411, 0, 387, 368, 0, 0,
	0, 373, 343, 382, 344, 371, 404, 0, 369, 0,
	445, 414, 0, 0, 0, 463, 0, 419, 0, 0,
	0, 0, 0, 406, 447, 409, 438, 401, 429, 359,
	418, 458, 388, 424, 459, 0, 0, 0, 51, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	423, 453, 384, 356, 468, 0, 427, 342, 421, 0,
	0, 348, 351, 464, 451, 378, 377, 0, 0, 0,
	0, 0, 0, 0, 405, 410, 434, 398, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 374, 0, 417, 0, 0, 0,
	355, 349, 0, 403, 0, 0, 0, 358, 0, 375,
	435, 0, 339, 441, 448, 400, 0, 0, 452, 397,
	396, 0, 0, 0, 0, 0, 0, 389, 0, 64,
	466, 455, 407, 446, 372, 383, 0, 379, 0, 0,
	0, 380, 381, 0, 0, 416, 430, 0, 0, 0,
	0, 0, 65, 437, 66, 67, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 340, 376, 439,
	442, 362, 426, 352, 385, 432, 386, 408, 367, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 51, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 345, 0, 0,
	0, 0, 68, 346, 366, 449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	158, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 365, 360, 361, 412,
	413, 460, 461, 462, 436, 357, 64, 363, 364, 0,
	444, 0, 0, 148, 415, 0, 0, 0, 467, 0,
	0, 0, 0, 0, 0, 0, 391, 341, 395, 65,
	0, 66, 67, 0, 0, 0, 353, 354, 0, 0,
	399, 394, 420, 422, 431, 440, 450, 457, 433, 62,
	63, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 0, 178,
	179, 0, 180, 181, 182, 184, 183, 149, 150, 151,
	152, 153, 157, 155, 154, 156, 126, 128, 0, 124,
	127, 133, 129, 130, 131, 145, 134, 135, 136, 137,
	138, 139, 140, 141, 142, 143, 144, 146, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 147, 0, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 1450, 0, 51, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 62, 63, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	0, 66, 67, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 0, 178,
	179, 0, 180, 181, 182, 184, 183, 149, 150, 151,
	152, 153, 157, 155, 154, 156, 126, 128, 0, 124,
	127, 133, 129, 130, 131, 145, 134, 135, 136, 137,
	138, 139, 140, 141, 142, 143, 144, 146, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 0, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 0, 0, 843, 552, 1438, 1427, 1426, 0,
	549, 0, 59, 0, 0, 0, 0, 596, 1428, 597,
	0, 0, 0, 0, 0, 0, 0, 587, 588, 0,
	0, 1429, 0, 0, 0, 1989, 0, 509, 0, 0,
	80, 578, 735, 736, 738, 739, 579, 580, 0, 0,
	0, 737, 740, 550, 551, 554, 1990, 0, 0, 0,
	547, 569, 0, 125, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 782, 781, 0,
	0, 0, 0, 0, 0, 0, 0, 843, 0, 1438,
	1427, 1426, 567, 734, 0, 783, 62, 63, 611, 0,
	568, 1428, 0, 565, 566, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 1429, 0, 0, 0, 0, 0,
	0, 0, 609, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 561, 0,
	0, 1422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 65, 0, 66, 67, 0, 0,
	782, 781, 1440, 1441, 0, 576, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 783, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1430, 1431, 1433, 69, 0, 0, 1432,
	0, 0, 784, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 1742, 0, 0,
	0, 0, 562, 563, 1434, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1440, 1441, 0, 0, 0,
	598, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 613, 584, 710, 599, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 1430, 1431, 1433, 0,
	0, 0, 1432, 0, 0, 784, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 582, 0, 0, 0, 0,
	1779, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 610, 606,
	607, 604, 605, 603, 602, 601, 612, 589, 590, 591,
	592, 594, 0, 0, 586, 585, 593, 553, 0, 0,
	0, 0, 0, 0, 0, 1439, 0, 0, 0, 0,
	0, 0, 1112, 0, 552, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 0, 0, 596, 0, 597, 0,
	0, 62, 63, 608, 0, 0, 587, 588, 0, 0,
	0, 0, 0, 0, 0, 0, 509, 0, 0, 80,
	578, 735, 736, 738, 739, 579, 580, 0, 0, 0,
	737, 740, 550, 551, 554, 0, 0, 0, 0, 547,
	569, 0, 0, 595, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 567, 734, 1117, 0, 0, 0, 611, 0, 568,
	0, 0, 565, 566, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 0, 553, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 66, 67, 0, 0, 0,
	552, 0, 0, 0, 576, 549, 0, 0, 0, 0,
	0, 0, 596, 0, 597, 0, 0, 0, 0, 0,
	0, 0, 587, 588, 0, 0, 0, 0, 0, 0,
	0, 0, 509, 0, 1004, 80, 578, 735, 736, 738,
	739, 579, 580, 0, 0, 69, 737, 740, 550, 551,
	554, 0, 0, 0, 0, 547, 569, 0, 0, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 567, 734, 598,
	0, 0, 0, 611, 0, 568, 0, 0, 565, 566,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 613, 584, 710, 599, 0, 0, 609, 0, 0,
	0, 0, 0, 68, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 561, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 582, 0, 0, 0, 0, 65,
	0, 66, 67, 0, 0, 0, 0, 0, 0, 0,
	576, 0, 0, 0, 0, 0, 600, 610, 606, 607,
	604, 605, 603, 602, 601, 612, 589, 590, 591, 592,
	594, 0, 0, 586, 585, 593, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 63, 608, 0, 0, 0, 0, 562, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 613, 584, 710,
	599, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 610, 606, 607, 604, 605, 603, 602,
	601, 612, 589, 590, 591, 592, 594, 0, 0, 586,
	585, 593, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 552,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 596, 0, 597, 0, 0, 62, 63, 608, 0,
	0, 587, 588, 0, 0, 0, 0, 0, 0, 0,
	0, 509, 0, 0, 80, 578, 735, 736, 738, 739,
	579, 580, 0, 0, 0, 737, 740, 550, 551, 554,
	0, 0, 0, 0, 547, 569, 0, 0, 595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 567, 734, 1117, 0,
	0, 0, 611, 0, 568, 0, 0, 565, 566, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 609, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 843, 0, 0, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	66, 67, 0, 0, 0, 552, 0, 0, 0, 576,
	549, 0, 0, 0, 0, 0, 0, 596, 0, 597,
	0, 0, 0, 0, 0, 0, 0, 587, 588, 0,
	0, 0, 0, 0, 0, 0, 0, 509, 0, 0,
	80, 578, 735, 736, 738, 739, 579, 580, 0, 0,
	69, 737, 740, 550, 551, 554, 0, 0, 0, 0,
	547, 569, 0, 0, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 567, 734, 598, 0, 0, 0, 611, 0,
	568, 0, 0, 565, 566, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 613, 584, 710, 599,
	0, 0, 609, 0, 0, 0, 0, 0, 68, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 561, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 582,
	0, 0, 0, 0, 65, 0, 66, 67, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 0, 0,
	0, 600, 610, 606, 607, 604, 605, 603, 602, 601,
	612, 589, 590, 591, 592, 594, 0, 0, 586, 585,
	593, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 63, 608, 0, 0,
	0, 0, 562, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 613, 584, 710, 599, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 610, 606,
	607, 604, 605, 603, 602, 601, 612, 589, 590, 591,
	592, 594, 0, 0, 586, 585, 593, 0, 0, 0,
	596, 0, 597, 0, 0, 0, 0, 0, 0, 0,
	587, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	509, 0, 0, 80, 578, 735, 736, 738, 739, 579,
	580, 62, 63, 608, 737, 740, 550, 551, 0, 0,
	0, 0, 0, 0, 569, 0, 0, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 567, 734, 0, 0, 0,
	0, 611, 0, 568, 0, 0, 565, 566, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 66,
	67, 0, 0, 0, 0, 0, 0, 0, 576, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 613, 584, 710, 599, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 610, 606, 607, 604, 605, 603, 602, 601, 612,
	589, 590, 591, 592, 594, 0, 0, 586, 585, 593,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 552, 0, 0,
	0, 0, 549, 0, 0, 0, 0, 0, 0, 596,
	0, 597, 0, 0, 62, 63, 608, 0, 0, 587,
	588, 1122, 0, 0, 0, 0, 0, 0, 0, 509,
	0, 0, 80, 578, 735, 736, 738, 739, 579, 580,
	0, 0, 0, 737, 740, 550, 551, 554, 0, 0,
	0, 0, 547, 569, 0, 0, 595, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 567, 734, 0, 0, 0, 0,
	611, 0, 568, 0, 0, 565, 566, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 609, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	561, 0, 0, 0, 0, 0, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 66, 67,
	0, 0, 0, 552, 0, 0, 0, 576, 549, 0,
	0, 0, 0, 0, 0, 596, 0, 597, 0, 0,
	0, 0, 0, 0, 0, 587, 588, 0, 0, 0,
	0, 0, 0, 0, 0, 535, 0, 0, 80, 578,
	537, 538, 539, 541, 579, 580, 0, 0, 69, 543,
	542, 550, 551, 554, 0, 0, 0, 0, 547, 569,
	0, 0, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	567, 540, 598, 0, 0, 0, 611, 0, 568, 0,
	0, 565, 566, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 584, 710, 599, 0, 0,
	609, 0, 0, 0, 0, 0, 68, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 561, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 582, 0, 0,
	0, 0, 65, 0, 66, 67, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 0, 0, 0, 600,
	610, 606, 607, 604, 605, 603, 602, 601, 612, 589,
	590, 591, 592, 594, 0, 0, 586, 585, 593, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 63, 608, 0, 0, 0, 0,
	562, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	613, 584, 545, 599, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 610, 606, 607, 604,
	605, 603, 602, 601, 612, 589, 590, 591, 592, 594,
	0, 0, 586, 585, 593, 1044, 1045, 1046, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 597, 0, 0, 0, 0, 0,
	0, 0, 587, 588, 0, 0, 0, 0, 0, 62,
	63, 608, 509, 0, 0, 80, 578, 735, 736, 738,
	739, 579, 580, 0, 0, 0, 737, 740, 550, 551,
	0, 0, 0, 0, 0, 0, 569, 0, 0, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 567, 734, 0,
	0, 0, 0, 611, 0, 568, 0, 0, 565, 566,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 609, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	0, 66, 67, 0, 0, 0, 0, 0, 0, 0,
	576, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	597, 0, 0, 0, 0, 0, 0, 0, 587, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 509, 0,
	0, 80, 578, 735, 736, 738, 739, 579, 580, 0,
	0, 69, 737, 740, 550, 551, 0, 0, 0, 0,
	0, 0, 569, 0, 0, 595, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 567, 734, 598, 0, 0, 0, 611,
	0, 568, 0, 0, 565, 566, 570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 613, 584, 710,
	599, 0, 0, 609, 0, 0, 0, 0, 0, 68,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 561,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	582, 0, 0, 0, 0, 65, 0, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 576, 0, 0, 0,
	0, 0, 600, 610, 606, 607, 604, 605, 603, 602,
	601, 612, 589, 590, 591, 592, 594, 0, 0, 586,
	585, 593, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 62, 63, 608, 0,
	0, 0, 0, 562, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 584, 710, 599, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 582, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 610,
	606, 607, 604, 605, 603, 602, 601, 612, 589, 590,
	591, 592, 594, 0, 0, 586, 585, 593, 0, 0,
	0, 596, 0, 597, 0, 0, 0, 0, 0, 0,
	0, 587, 588, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 0, 0, 80, 578, 735, 736, 738, 739,
	579, 580, 62, 63, 608, 737, 740, 550, 551, 0,
	0, 0, 0, 0, 0, 569, 0, 0, 595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 567, 734, 0, 0,
	0, 0, 611, 0, 568, 0, 0, 565, 566, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 609, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 597,
	0, 0, 0, 0, 0, 0, 0, 587, 588, 0,
	0, 0, 0, 0, 0, 0, 0, 509, 0, 0,
	80, 578, 735, 736, 787, 788, 579, 580, 0, 0,
	69, 737, 740, 550, 551, 0, 0, 0, 0, 0,
	0, 569, 0, 0, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 567, 734, 598, 0, 0, 0, 611, 0,
	568, 0, 0, 565, 566, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 613, 584, 710, 599,
	0, 0, 609, 0, 0, 0, 0, 0, 68, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 561, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 582,
	0, 0, 0, 0, 65, 0, 66, 67, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 0, 0,
	0, 600, 610, 606, 607, 604, 605, 603, 602, 601,
	612, 589, 590, 591, 592, 594, 0, 0, 586, 585,
	593, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 63, 608, 0, 0,
	0, 0, 562, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 613, 584, 710, 599, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 610, 606,
	607, 604, 605, 603, 602, 601, 612, 589, 590, 591,
	592, 594, 0, 0, 586, 585, 593, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 63, 608,
}

var yyPact = [...]int16{
	538, -1000, -256, -1000, -1000, -1000, -1000, 1613, 3395, 564,
	4521, 2452, 1635, -1000, -1000, -1000, 543, 635, 625, 621,
	347, 594, 983, 2106, 3319, 658, 557, 358, 556, -1000,
	-190, -178, -1000, -60, 653, -1000, 1451, 386, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1442, 380, 631, 1401, -1000, 6431, 6431, 6431,
	6431, 6431, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	393, 983, 983, 556, 192, 556, 1634, 502, 1633, 912,
	-1000, -1000, -1000, 735, -1000, 1782, 724, -1000, -1000, 556,
	1090, 906, -1000, -1000, -1000, 902, 3319, 901, -1000, -1000,
	-1000, -1000, 3313, 649, 3983, 1632, 647, 646, 1631, 644,
	3319, 3319, 214, 152, 194, -145, 43, -1000, -1000, -1000,
	-1000, 723, 1516, -1000, -1000, -1000, 1516, 110, 1596, 1516,
	1596, -1000, 1516, 1596, 105, 105, 105, 105, 105, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1595, 1591, -1000, 1516,
	1516, 1516, 1516, 1516, 1516, 1516, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1590, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1581, 141,
	1581, 1544, 1544, -1000, -1000, 194, 194, 194, 194, 1588,
	3319, 983, 1630, 1628, 3319, -229, 3319, 3319, 1855, -1000,
	-1000, -1000, 226, 3319, 1760, 8024, 6830, 10418, 3319, -1000,
	-1000, 1759, 1757, -1000, 1755, 662, 3319, 3319, -1000, 641,
	3319, 3319, 638, 3319, 798, 722, 7226, -1000, 1730, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1584, 978, 983,
	492, 227, 1492, 1508, 614, 574, 595, 1223, 487, -1000,
	-1000, -1000, 1018, -1000, 983, -1000, 1914, -1000, -1000, 468,
	-1000, 448, 890, 1116, 3319, 1583, 198, 1582, 13447, 1056,
	-1000, -270, -1000, 35, -1000, 983, -1000, 1013, 105, 1516,
	-1000, 105, 1033, 105, 105, -1000, -1000, 756, 1738, 756,
	756, 756, 756, 1115, 1115, -114, -114, -1000, -1000, -1000,
	-1000, -1000, 1055, -1000, 1051, 1581, -1000, -1000, -1000, 1050,
	-1000, 3319, 983, 1574, 1622, 3319, 3319, 1780, 591, -1000,
	-1000, 1778, 1777, 1425, -1000, -1000, 209, -1000, -1000, 502,
	983, -1000, 713, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1573, -1000, -1000, 1616, -1000, 320, -1000, 2750, 661, 652,
	-1000, 3319, 589, 1897, 3319, 1884, 1111, 10019, 8423, 214,
	-1000, -1000, -1000, -1000, -1000, 4831, 437, 1889, 1802, 438,
	98, -185, 1205, -1000, -1000, 1570, -1000, -1000, 13291, -1000,
	9221, 13291, 1185, 1182, -1000, 1177, 1175, 56, 983, -1000,
	-182, 160, 18, -1000, -1000, 1492, -1000, 1569, 13291, 1772,
	-1000, 1741, 836, -1000, -1000, 754, 521, -247, -1000, -1000,
	14439, -1000, -247, -1000, -1000, 1492, -1000, 13291, 3111, 1492,
	-1000, -1000, 1492, 1492, 1492, 12599, -1000, 670, -1000, -1000,
	-1000, 1098, 1110, 1107, -1000, 13950, 13950, 13950, 13950, 13950,
	13950, -1000, -1000, -1000, -1000, 65, -1000, 1091, -1000, -1000,
	-1000, 711, 708, -1000, -258, 1492, 1492, 1492, 1492, 1492,
	1492, 1492, 1492, 1492, 1492, 13291, 1492, 1724, 1492, 1492,
	-1000, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 3499, 1492,
	1492, 1492, 1492, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1411, 756, 105, 756, 1410, 1367, 756, 756, -1000, -1000,
	1149, 804, -1000, -1000, -1000, -1000, 1399, -1000, 1395, -1000,
	131, 127, -1000, 1351, 1500, -1000, 1366, 1497, 1621, 4831,
	3319, 1568, 1567, 1491, 556, 1491, 1801, 308, 3319, 1855,
	8822, 1855, 502, 9221, 1106, 983, -1000, -1000, -1000, 543,
	-1000, 552, 983, -1000, -1000, -1000, 525, 531, 3319, 568,
	531, 531, 1882, 531, -1000, 785, 698, 6827, -1000, -1000,
	1364, -1000, 312, 1516, 1516, 13291, 1751, 1751, 1751, 1492,
	694, 1492, 1492, 1492, 1492, 1492, 1492, 13291, 1492, 1724,
	1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 200, -1000,
	199, 677, 677, -183, 375, 365, -185, 1492, 1490, 1566,
	-1000, 4831, 419, -1000, 13950, -247, -1000, -1000, -1000, -1000,
	-1000, 1565, 1360, -1000, 203, 236, -1000, -1000, -1000, -1000,
	-1000, -185, 1564, -1000, -1000, -1000, 890, -1000, 1561, 1560,
	-1000, 1559, 13291, 8822, 991, 181, -1000, 1487, -1000, 1049,
	1349, 1093, -247, -1000, -1000, 981, -1000, -247, -1000, -1000,
	1492, 13291, 13291, 993, -1000, -1000, 4463, -1000, -1000, 37,
	12599, -1000, 1190, 475, 13794, 1021, 924, 13950, 13950, 13950,
	13950, 13950, 13950, 13950, 13950, 13950, 13950, 13950, 13950, 13950,
	13950, 13950, 13950, 13950, 13950, 13950, 7229, 1061, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1137, -1000, 1491, 2462, 1190, 1190, 1190, 433, 1338, 12599,
	1840, 1939, 521, -1000, 2486, 2486, -1000, -1000, -1000, 37,
	37, 37, 37, 37, 93, -1000, 11928, -1000, 8024, 9221,
	12932, 12443, 12443, 12443, 12443, 4207, 13291, 12443, 12443, 12443,
	1788, 873, 521, 2462, 1800, 1190, 1190, -1000, 1190, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 109, -1000, -1000,
	-260, -1000, -267, -1000, 12443, 12443, 12443, 12443, -1000, -1000,
	756, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 105,
	1101, 105, 32, 31, -1000, 1046, -1000, 1032, 4831, 983,
	3319, 1347, 1477, 1751, 1558, 8822, 4831, -1000, 1491, 3319,
	-1000, 545, 1841, -1000, -1000, 1798, -1000, 1476, -1000, -1000,
	1469, 1855, -1000, 1356, -1000, 1556, -1000, 983, -1000, -1000,
	254, 983, -1000, 190, -1000, -1000, -1000, -1000, -1000, 531,
	190, 418, 531, 418, 1100, 983, -1000, -1000, -1000, -1000,
	3729, 4831, 1751, -1000, -1000, -1000, 1751, 894, -1000, -1000,
	-1000, -1000, -1000, 9221, 1190, -1000, 230, -1000, 960, -1000,
	-1000, 897, 302, 958, -1000, 983, -185, 1550, 13291, 9221,
	13291, 4831, 1346, 314, -1000, -1000, 13291, 1846, 13291, 1384,
	1384, -1000, 983, 1492, -1000, 1047, -1000, 1045, 1339, 419,
	1342, -131, 13291, 1549, 836, -1000, -1000, 1326, -1000, -1000,
	-1000, 1190, 475, 597, -1000, -1000, 931, -1000, -1000, -1000,
	-1000, -145, -1000, 2706, 1492, 1492, 1492, -1000, -1000, -1000,
	-1000, 12599, 1021, 13950, 13950, 13950, 349, 2706, 2706, 2706,
	2706, 2706, 2493, 118, 67, 37, 52, 52, 36, 36,
	36, 36, 36, 237, 237, -1000, -1000, -1000, 220, -1000,
	82, 100, 1516, -119, -1000, -1000, 1516, -1000, -1000, -1000,
	1190, 1190, -1000, -1000, -1000, -1000, -1000, 13291, -1000, 1190,
	1805, 1836, 1491, 1774, 1718, -1000, -1000, -247, 1099, -1000,
	-1000, 1190, 12443, 1313, 1338, -1000, 558, -1000, 686, 1492,
	-1000, 77, -1000, -1000, 2706, 1313, 558, 1313, 1313, 1313,
	826, 1475, 14283, 1516, 1098, 1516, 1544, -1000, -1000, 150,
	1087, 149, -1000, -1000, -1000, -1000, 1544, -1000, -1000, -1000,
	-1000, -1000, 1516, 1516, -1000, -1000, 1516, 1516, -1000, 1516,
	1516, 546, 1479, 1474, 1313, 12443, -1000, 909, -1000, 13291,
	1190, 3319, -1000, -1000, -1000, -1000, -271, -272, 1313, 1190,
	1471, 1313, 1313, -1000, 756, -1000, 756, -1000, -1000, 1320,
	1318, 1316, 1542, 1540, -232, 4831, 1336, 1332, 1190, 1767,
	983, -1000, -1000, -1000, -1000, -1000, 273, 838, 9221, 4181,
	1424, -1000, 1089, -1000, 1235, 1537, 187, 471, -1000, 531,
	188, 190, -1000, -1000, -1000, -1000, 418, -1000, -1000, 780,
	1618, 3738, 185, -1000, 1130, 865, 1069, 861, 852, 851,
	847, 846, 843, 839, 835, 832, 825, -1000, -1000, -1000,
	1751, 1492, -1000, -1000, -1000, 437, 1911, -1000, -1000, 437,
	1856, 1536, 1535, 4831, 419, 1522, 1330, 1325, 3729, -1000,
	-70, 1323, -1000, 13291, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1315, -1000, 13291, -1000, -1000,
	-1000, 314, 425, -1000, -1000, 889, -1000, 1310, 1293, -1000,
	-1000, -1000, -1000, -1000, 13950, 13950, 13950, -1000, 349, 2706,
	628, -1000, 13950, 13950, 123, -1000, -1000, -1000, 521, -1000,
	1750, 13291, 13291, 1840, -1000, 1491, -1000, -1000, 1788, -1000,
	-1000, 927, -1000, 1313, 12443, -254, -1000, -1000, -1000, 1081,
	-1000, -1000, 6428, 12443, -1000, 13950, -254, -254, -1000, -1000,
	4811, 1061, 13291, -1000, 1013, 316, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4811, 13950,
	13950, 13950, 13950, -75, 1280, 869, -1000, 13291, 834, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -232, 4831, 4831, 1846, 1521, 1275, 1846, 3729, -1000,
	1491, 1309, 250, 165, 13291, -1000, 3106, -1000, 4181, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1840, 13291, -1000, -1000, -1000, -1000, -1000, 983, 3518,
	983, 983, 983, 683, 13291, 1139, 13291, -1000, -1000, -1000,
	-1000, -1000, 3319, -1000, 1266, 11284, 1235, 1235, 11284, 1235,
	1235, 4831, 4831, 1520, 1519, 360, -1000, 167, -1000, -1000,
	1066, -1000, 983, -1000, -125, 3738, 983, -1000, 1007, -1000,
	-1000, 986, 1000, 986, 986, 986, 986, 986, 285, 999,
	530, -1000, 200, 677, 200, 677, 983, 4831, 1305, 314,
	13291, 1846, 3729, 1618, -1000, 1846, 521, 506, 983, 419,
	-1000, 1878, 200, -154, 524, -1000, -1000, 2124, 2124, 2124,
	-1000, 13950, 2706, 2706, 30, -1000, 1906, 770, 774, 1463,
	-1000, 618, 1805, 1190, 1653, -1000, -1000, -1000, -1000, 1492,
	-1000, -1000, 682, 1190, -1000, -1000, -1000, 1190, 1516, -1000,
	1516, 1190, 807, -1000, -1000, 1190, 1546, 1192, 1112, 315,
	1492, -68, -1000, 521, 13291, 1846, 1215, 1302, 3729, 8822,
	-232, 3729, -1000, -1000, -97, 13291, 4181, 4370, 521, 4370,
	-1000, 4181, 560, 1805, 3797, 564, 2870, 3266, 1455, 460,
	-1000, 5231, 979, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 983, 1868,
	1859, 1858, 1848, 11671, 13291, 13291, -1000, 1797, -1000, -1000,
	11024, -1000, -1000, -1000, -1000, -1000, 1292, 1290, 4831, 4831,
	1514, -1000, -1000, 1492, 1285, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 890, -1000, 890, 1278, 1271,
	3729, -1000, 1257, -1000, 1618, 437, -1000, 3319, -1000, 314,
	677, 677, -1000, -1000, -1000, -1000, 189, 878, 836, 836,
	950, 124, -1000, 1832, -1000, -1000, -1000, 2706, -1000, -1000,
	1657, 13291, 13291, 13291, -1000, 1750, -1000, 12443, -1000, 605,
	7625, -1000, -1000, -1000, -1000, 13950, -1000, -1000, 13950, -1000,
	13950, -1000, 13950, -1000, 13950, 13950, 1190, 1065, 521, 3729,
	1846, 3729, 1618, 1254, 1846, 1618, -1000, -252, 521, 3106,
	3271, -1000, -1000, 156, 5715, -1000, 1750, 4181, 808, -1000,
	827, -1000, 4370, 2289, 3319, 1277, 1423, 1539, -1000, -1000,
	-1000, 1764, 3174, 412, 983, 239, 6431, -1000, -1000, 1454,
	5630, 9, -1000, -1000, -1000, 822, 679, 1070, -1000, 1734,
	-1000, -1000, 3518, 1748, -1000, -1000, -1000, -1000, -1000, 4370,
	-1000, 1443, 1190, 838, 252, -1000, 437, 1220, 1218, 4831,
	983, -1000, 3738, 437, 437, 504, 3729, 1618, 1846, -1000,
	200, 1512, -1000, 437, 437, 836, -1000, 836, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3179, 1721, 521, 521, -1000,
	-1000, 1288, -1000, 1820, 1190, -1000, 2124, 2124, 2124, 2124,
	2124, 287, -1000, -1000, 1618, 3729, -1000, -1000, -1000, 3729,
	-1000, 13291, 5316, -1000, -1000, -1000, -1000, 2729, 9705, 553,
	2558, 336, 3319, -1000, 336, 1261, 3266, -1000, -1000, 2462,
	3266, 3266, 3266, 3266, 3266, -1000, 1681, 1678, -1000, 1656,
	1652, 1662, 3319, 1214, 3174, 776, 1492, -1000, 3347, -1000,
	-1000, -1000, 1764, 1794, -1000, 6029, 1454, 9, 1453, -1000,
	-6, -3, 11569, 9221, 756, -1000, -1000, -1000, -1000, -1000,
	983, 2181, -1000, 163, 249, 200, 3729, 3729, 1201, 1190,
	-1000, 200, 200, 3319, 1618, 437, -1000, -1000, 9221, 200,
	200, -1000, -1000, -1000, 676, -1000, 1846, 3266, 13291, -1000,
	-1000, -1000, -1000, -1000, -1000, 1190, 233, -146, -1000, -1000,
	1618, 521, -1000, -1000, 3882, -1000, -1000, 13291, -1000, 13291,
	4370, -1000, 1234, 1492, -1000, 1846, 3266, 1269, 1282, -1000,
	810, 1539, 1511, 1619, 1136, -1000, -1000, -1000, -1000, 1676,
	-1000, 1663, -1000, -1000, -1000, -1000, -103, 620, 619, 617,
	983, -1000, 1491, -1000, 1453, 9, 0, -1000, -1000, -1000,
	-1000, 521, 809, -1000, 1450, -1000, 4370, -1000, -1000, 1618,
	1618, -1000, -1000, -1000, -1000, 1505, -1000, 200, 1199, -1000,
	-1000, -1000, 9221, 1844, 1444, 1189, -1000, 521, -1000, 1711,
	-93, -157, -1000, 550, 4181, 3957, 11588, 1541, 2462, 1492,
	-1000, 9620, 983, 1840, 1269, -1000, 1846, 2462, 13291, -1000,
	-1000, 13291, 1503, -1000, 13291, -1000, -1000, -1000, -1000, 1498,
	1492, 1492, 1492, 1194, -1000, -1000, -1000, -1000, -11, -13,
	-1000, 13291, 3154, -1000, -1000, 9221, -1000, -1000, 9221, -1000,
	1842, 1807, -1000, 1190, 13291, -1000, 1699, -1000, -1000, 970,
	808, -1000, -1000, 1745, 1413, 1434, -1000, -1000, 12084, 1190,
	1197, -1000, -1000, 673, -1000, -1000, 1194, 1805, -1000, 1840,
	-1000, 521, 521, 8822, 521, -201, 8822, 8822, 8822, 1181,
	983, -1000, -1000, -1000, 521, 4622, 1174, -1000, -1000, 13291,
	13291, -1000, -1000, -98, 4133, 352, -1000, 1492, -1000, -1000,
	1462, 10817, 983, -1000, -1000, 1805, 1158, 1154, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1143, 1143, 1143,
	776, -1000, -1000, -1000, 521, 1443, -153, 544, 1891, -1000,
	1492, -1000, 1491, -1000, -1000, -1000, -1000, -1000, -201, -1000,
	-1000, -1000, -103, -159, -1000, 2462, 1434, 1190, -1000, -1000,
	-1000, 1433, -1000,
}

var yyPgo = [...]int16{
	0, 2208, 29, 3, 2207, 2206, 2205, 2202, 2199, 2195,
	2194, 2193, 2188, 2186, 2185, 37, 40, 46, 26, 36,
	2164, 2162, 2161, 2159, 2158, 2156, 2153, 78, 2149, 2148,
	2147, 2141, 872, 107, 92, 2138, 2131, 2127, 2122, 2121,
	94, 155, 98, 93, 2746, 41, 35, 45, 51, 2120,
	34, 2119, 2118, 66, 2115, 38, 2110, 2106, 878, 2105,
	2103, 6, 19, 116, 124, 68, 2102, 2101, 119, 2890,
	1518, 1381, 158, 2100, 2099, 102, 18, 69, 4, 9,
	8, 2097, 391, 7, 2096, 101, 84, 2095, 2094, 2093,
	43, 2091, 56, 81, 16, 64, 2089, 21, 10, 74,
	47, 27, 13, 1, 48, 55, 2087, 20, 63, 33,
	2081, 75, 2080, 96, 127, 50, 65, 14, 2198, 0,
	636, 103, 2079, 2078, 2076, 100, 2075, 1800, 97, 39,
	25, 54, 82, 2074, 88, 123, 57, 117, 113, 2073,
	122, 121, 118, 2072, 2068, 2051, 129, 902, 2050, 133,
	52, 2049, 2048, 106, 347, 323, 104, 372, 146, 83,
	2047, 2044, 2042, 2041, 135, 110, 85, 130, 2037, 87,
	108, 44, 22, 386, 2028, 2026, 2025, 2023, 2020, 2016,
	2015, 109, 2010, 80, 253, 70, 876, 53, 2007, 2005,
	2003, 2001, 111, 1996, 1994, 1989, 79, 1984, 1983, 112,
	95, 134, 126, 1980, 1978, 1976, 67, 77, 1974, 125,
	131, 1973, 115, 1872, 120, 99, 32, 30, 420, 49,
	1972, 1971, 1970, 2, 5, 1968, 86, 291, 1967, 128,
	1965, 89, 1964, 90, 1962, 15, 1961, 1960, 42, 1958,
	1957, 1955, 1954, 1953, 1126, 1247, 1952, 76, 132, 1951,
	423,
}

var yyR1 = [...]uint8{
	0, 240, 241, 241, 1, 1, 1, 1, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 22, 22, 22, 22, 22,
	22, 213, 213, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 214, 214, 215, 215, 215,
	23, 23, 23, 243, 243, 2, 2, 3, 4, 4,
	5, 5, 6, 6, 30, 30, 7, 8, 8, 8,
	246, 246, 53, 53, 100, 100, 9, 9, 9, 9,
	10, 10, 220, 220, 219, 221, 221, 11, 11, 11,
	11, 11, 211, 211, 211, 211, 211, 12, 12, 217,
	217, 217, 15, 15, 15, 15, 16, 16, 17, 17,
	17, 19, 19, 105, 105, 109, 109, 109, 110, 110,
	110, 110, 232, 232, 133, 133, 242, 242, 247, 247,
	247, 247, 247, 247, 247, 209, 209, 209, 209, 210,
	210, 210, 210, 212, 212, 216, 216, 216, 216, 216,
	216, 218, 218, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 13, 13, 31, 31, 77, 77,
	14, 116, 116, 190, 190, 190, 191, 191, 191, 191,
	191, 191, 193, 193, 194, 194, 123, 123, 195, 195,
	26, 175, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 158, 158, 158, 158, 158, 136, 136, 136, 136,
	136, 136, 136, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 201, 201, 201, 201, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 203,
	204, 205, 197, 197, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 148, 148,
	148, 148, 148, 148, 196, 196, 192, 192, 192, 192,
	140, 140, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 139, 139, 139, 139, 139, 139, 139, 144,
	144, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 137, 137, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 145, 145, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 157, 157, 146,
	146, 155, 155, 156, 156, 156, 147, 147, 147, 154,
	154, 154, 151, 151, 152, 152, 153, 153, 153, 149,
	149, 149, 150, 150, 150, 160, 186, 186, 186, 188,
	188, 189, 189, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 174, 174, 206,
	206, 207, 207, 208, 208, 185, 185, 185, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	173, 173, 183, 183, 184, 184, 181, 181, 181, 181,
	181, 181, 181, 181, 182, 167, 167, 167, 167, 167,
	168, 168, 169, 169, 169, 169, 161, 161, 162, 162,
	163, 163, 164, 164, 164, 164, 166, 166, 165, 165,
	33, 33, 33, 33, 33, 33, 33, 33, 199, 199,
	199, 236, 236, 236, 236, 236, 236, 237, 237, 200,
	200, 170, 170, 171, 171, 172, 172, 179, 179, 179,
	179, 248, 248, 177, 177, 177, 178, 178, 178, 249,
	27, 28, 28, 29, 29, 29, 36, 36, 36, 34,
	34, 35, 35, 42, 42, 41, 41, 43, 43, 43,
	43, 122, 122, 122, 121, 121, 233, 233, 233, 233,
	233, 45, 45, 46, 46, 47, 47, 48, 48, 48,
	223, 223, 222, 222, 224, 224, 224, 224, 224, 224,
	224, 224, 60, 60, 97, 97, 97, 101, 101, 49,
	49, 49, 49, 50, 50, 51, 51, 52, 52, 131,
	131, 130, 130, 130, 129, 129, 54, 54, 54, 56,
	55, 55, 55, 55, 57, 57, 59, 59, 58, 58,
	61, 61, 61, 61, 62, 62, 99, 99, 44, 44,
	44, 44, 44, 44, 44, 44, 112, 112, 64, 64,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	74, 74, 74, 74, 74, 74, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 40, 40, 75,
	75, 75, 82, 76, 76, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	72, 72, 72, 72, 72, 72, 72, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 250,
	250, 73, 73, 73, 73, 37, 37, 37, 37, 37,
	132, 132, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 86, 86, 38, 38, 84, 84,
	85, 115, 115, 87, 87, 83, 83, 83, 83, 83,
	225, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 65, 65, 88, 88, 89, 89, 234, 234, 235,
	90, 90, 91, 91, 92, 93, 93, 93, 94, 94,
	94, 94, 95, 95, 95, 67, 67, 67, 67, 67,
	67, 96, 96, 98, 98, 98, 98, 102, 102, 78,
	78, 80, 80, 79, 81, 103, 103, 107, 104, 104,
	108, 108, 108, 108, 108, 24, 25, 106, 106, 106,
	126, 126, 126, 114, 114, 124, 124, 111, 111, 113,
	113, 113, 125, 125, 119, 120, 120, 120, 120, 120,
	127, 127, 127, 128, 128, 226, 226, 226, 227, 227,
	227, 228, 228, 229, 229, 230, 230, 231, 39, 39,
	239, 239, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 118, 118, 118, 118, 118, 118, 118,
	118, 244, 245,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 2, 13,
	12, 14, 12, 13, 12, 10, 7, 10, 7, 11,
	11, 9, 13, 16, 5, 8, 8, 4, 4, 3,
	3, 3, 6, 6, 6, 7, 6, 11, 13, 13,
	14, 14, 6, 7, 6, 8, 9, 8, 8, 9,
	8, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	6, 8, 10, 1, 1, 4, 6, 10, 1, 3,
	1, 3, 7, 8, 1, 1, 9, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	2, 6, 1, 3, 3, 0, 1, 2, 2, 2,
	3, 5, 0, 2, 2, 2, 2, 3, 5, 1,
	2, 3, 7, 10, 1, 1, 5, 5, 3, 5,
	3, 1, 3, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 0, 3, 0, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 4, 2, 3,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 4, 1, 1, 0, 1,
	2, 0, 3, 0, 2, 2, 0, 2, 2, 2,
	2, 2, 0, 2, 0, 3, 0, 1, 0, 2,
	4, 4, 0, 1, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 1, 3, 2, 2, 3, 2, 4, 2, 4,
	2, 2, 3, 2, 3, 2, 7, 9, 3, 3,
	6, 9, 9, 8, 11, 11, 6, 6, 8, 8,
	5, 8, 7, 4, 0, 2, 2, 4, 6, 2,
	1, 1, 2, 1, 2, 2, 1, 1, 3, 1,
	2, 1, 1, 2, 0, 4, 3, 4, 3, 3,
	3, 3, 3, 3, 3, 2, 4, 6, 2, 3,
	2, 3, 1, 3, 0, 2, 0, 2, 2, 3,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 2, 2, 2, 1, 1, 0,
	1, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 4, 5, 4, 4, 4, 1,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 3, 0,
	3, 3, 0, 1, 0, 1, 0, 2, 1, 0,
	3, 3, 0, 1, 2, 6, 0, 1, 4, 1,
	2, 1, 3, 2, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 5, 2, 3,
	3, 2, 3, 2, 3, 3, 2, 2, 3, 4,
	1, 1, 1, 1, 1, 3, 3, 2, 3, 2,
	4, 2, 2, 2, 1, 4, 7, 7, 10, 10,
	13, 11, 1, 1, 2, 2, 10, 8, 11, 9,
	7, 5, 9, 7, 7, 5, 1, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 0, 1, 1, 1, 2, 2, 1, 2, 0,
	3, 0, 1, 1, 3, 1, 3, 0, 4, 1,
	3, 2, 1, 1, 2, 1, 1, 1, 1, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 3, 6, 4,
	7, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	0, 4, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 8, 1, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 0, 2, 0, 4, 1, 3,
	3, 2, 3, 2, 1, 2, 0, 3, 1, 1,
	3, 6, 6, 6, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 5, 6, 2, 4, 3, 3,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 6, 2, 2, 2, 2, 2, 2,
	2, 3, 3, 3, 1, 1, 1, 1, 2, 1,
	4, 5, 5, 5, 5, 6, 4, 4, 4, 6,
	6, 8, 6, 6, 6, 8, 6, 8, 6, 8,
	6, 8, 9, 7, 5, 4, 4, 3, 3, 3,
	1, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 2, 2, 1, 1, 2,
	2, 1, 2, 2, 1, 2, 1, 1, 1, 3,
	1, 1, 3, 1, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 0, 2, 1, 1, 1, 3, 5,
	3, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 0, 3, 0, 2, 1, 3, 1,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 1, 3, 1, 1, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 5, 3, 1, 3, 1, 2, 1,
	1, 1, 1, 0, 3, 0, 3, 0, 1, 0,
	1, 1, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 2, 0, 2,
	2, 0, 1, 4, 3, 1, 3, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -240, -1, -20, -21, -22, -23, -26, 130, 131,
	223, 224, 71, -241, 407, -175, 58, -236, -237, 292,
	-195, 139, 152, 174, 175, 377, 136, 222, 137, 389,
	390, 154, 392, 79, -111, 142, -213, 21, -32, 6,
	8, 9, 10, 163, 147, 174, 130, 166, 165, 167,
	-119, 61, -213, 21, 56, -176, -158, -119, -118, 318,
	63, 36, 402, 403, 152, 175, 177, 178, 305, 227,
	138, 138, 138, 140, 220, 140, -119, -119, -83, 143,
	61, -118, 318, -127, 63, -58, -127, 61, -118, 137,
	-124, 143, 63, -119, 276, 143, -114, 143, 392, 389,
	390, 357, 137, 56, 59, 225, 56, 56, 225, 56,
	137, 145, 60, 59, -159, -136, -140, -137, -142, -141,
	-143, -119, -138, -139, 265, 369, 262, 266, 263, 268,
	269, 270, 124, 267, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 271, 283, 33, 159, 253,
	254, 255, 256, 257, 260, 259, 261, 258, 126, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 245, 246,
	248, 249, 250, 252, 251, -159, -159, -159, -159, -119,
	56, 219, -119, -119, -114, 221, -114, 56, -209, 19,
	199, 200, 212, 56, 81, 127, 25, 127, -114, -119,
	63, 81, 81, -58, 81, -58, 321, 137, -32, 56,
	137, 137, 56, 137, -58, -127, -179, -248, 372, 37,
	-158, -160, -167, -161, -162, -163, -164, -180, -168, 146,
	144, 154, 405, 226, 148, 149, 292, -173, 150, 138,
	155, 73, 81, -201, 146, -204, 56, 300, 306, 144,
	155, 154, 405, 71, 147, 25, 379, 381, 31, 32,
	-153, 408, 294, -151, 303, 127, -146, 58, -146, -145,
	264, -147, 58, -146, -147, -146, -147, -149, 266, -149,
	-149, -149, -149, 58, 58, -146, -146, -146, -146, -146,
	-146, -146, 58, -155, 58, -144, 247, -155, -156, 58,
	-156, 56, 57, -58, -119, 56, 56, -58, -232, 402,
	403, -58, -58, -212, -210, 8, 9, 10, 213, -58,
	26, -120, -128, -119, 314, 151, -117, -118, -127, 135,
	200, 380, 80, 25, 27, 300, 306, 199, 84, 124,
	16, 85, 206, 389, 390, 123, 76, 358, 130, 52,
	350, 351, 204, 360, 361, 349, 307, 211, 20, 31,
	10, 28, 157, 24, 117, 132, 201, 89, 88, 160,
	164, 165, 26, 158, 75, 207, 209, 19, 55, 150,
	11, 379, 13, 14, 394, 381, 143, 142, 100, 393,
	138, 50, 8, 126, 29, 97, 46, 155, 210, 48,
	98, 17, 352, 353, 34, 367, 168, 119, 53, 40,
	395, 81, 396, 73, 56, 321, 205, 79, 15, 51,
	169, 397, 208, 401, 99, 133, 357, 176, 49, 202,
	398, 136, 203, 6, 363, 33, 156, 47, 137, 308,
	399, 87, 141, 74, 5, 154, 9, 400, 54, 57,
	354, 355, 356, 38, 86, 12, 153, 371, 77, -136,
	283, -128, -117, -58, 26, 26, 26, 135, -58, -53,
	-58, 137, -58, -58, 137, -58, 97, 127, -177, 59,
	-120, 71, -117, -118, 36, 58, -200, 56, 81, -170,
	-119, 155, -173, 61, 138, -199, 389, 390, -244, 58,
	57, 58, -173, -173, 61, 138, 155, 61, 155, 73,
	19, -119, 9, 155, 155, -200, 63, -58, 58, -197,
	380, 16, 58, -203, -202, 58, -44, 63, 64, 65,
	114, 66, 73, 72, -64, 295, -63, 81, -69, 31,
	74, 75, 26, 9, 76, -244, -68, -83, -225, -81,
	-82, 159, 253, 254, -229, 124, 125, 113, 121, 82,
	126, -72, -70, -71, -73, -228, 186, -119, 62, 67,
	68, -127, 326, -79, 294, 366, 365, 48, 49, 358,
	359, 360, 361, 367, 362, 85, 38, 40, 271, 296,
	348, 356, 355, 354, 352, 353, 350, 351, 404, 143,
	349, 119, 357, 293, -205, 65, 409, -152, 304, -119,
	65, -149, -146, -149, 65, 61, -149, -149, -150, 124,
	123, 33, -150, -150, -150, -150, -157, 63, -157, -154,
	371, 372, -154, 65, 65, -155, 65, -58, -119, 58,
	56, -58, -58, 25, 140, 25, -190, 25, 56, 59,
	213, -209, -119, 127, 58, 57, 63, -119, 276, 145,
	-158, -123, 146, -167, -164, 154, 135, 141, 59, -58,
	141, 11, -58, 11, 63, -119, -128, 90, -120, -248,
	-184, -181, -120, 155, 318, 58, -72, -70, -71, -119,
	-127, 48, 49, 358, 360, 361, 367, 85, 38, 40,
	295, 356, 355, 354, 352, 353, 350, 351, -226, 215,
	81, 10, 9, 19, 150, 144, 154, 405, 226, -199,
	61, 58, -44, -64, 114, 63, 64, 72, 65, 66,
	73, -120, -166, -165, -119, -44, 61, 61, 61, 61,
	-199, 154, -170, -119, 391, -201, 405, -148, 348, 351,
	350, 296, -244, 58, -44, 25, 31, -65, 65, 114,
	-202, 58, 63, 64, 65, 114, 66, 73, 72, -64,
	295, 80, 79, 97, 214, -192, 404, 65, 66, -69,
	-244, -192, -244, -44, -66, 100, 81, 98, 105, 106,
	107, 108, 99, 84, 110, 109, 120, 113, 114, 115,
	116, 117, 118, 119, 111, 112, 404, 123, 90, 91,
	92, 93, 94, 95, 96, 101, 102, 103, 104, -112,
	-244, -82, -244, -244, -244, -63, -2, -69, -76, -244,
	-3, -4, -44, 6, 128, 129, 63, 63, 63, -69,
	-69, -69, -69, -69, -69, -229, -244, 63, 127, 127,
	408, -244, -244, -244, -244, -244, -244, -244, -244, -244,
	-244, -86, -44, -244, 41, -244, -244, -250, -244, -250,
	-250, -250, -250, -250, -250, -135, 124, 266, 159, 257,
	-138, -137, 272, 271, -244, -244, -244, -244, 60, -150,
	-149, -150, 60, 60, -150, -150, 61, 61, 124, 60,
	59, 60, 253, 253, 60, 59, 60, 59, 58, 57,
	56, -183, -184, -72, -58, 58, 58, -2, -244, -114,
	-2, -191, 19, 183, 184, -58, -210, -97, -120, 155,
	-212, -209, -120, -39, 63, -119, -158, -243, 138, 155,
	-119, 146, -167, -214, -215, -119, 63, 185, -58, 141,
	-214, -214, 11, -214, 97, 127, -178, -120, 63, 65,
	60, 59, -146, -182, 298, -146, -146, -44, -93, 27,
	28, -93, -93, 127, -244, -227, 216, 215, -169, 179,
	180, 33, 181, -169, 391, 155, 155, -199, -244, 57,
	58, 58, -184, -245, 60, -192, 58, 60, 59, 371,
	371, -199, 58, -200, -146, 58, -146, 58, 58, -44,
	-97, 60, 58, 381, 59, 65, 60, -202, -192, 65,
	66, -244, -44, -44, -74, 73, 81, 74, 75, 297,
	126, -136, -245, -69, 21, 22, 23, -75, -79, -82,
	69, -244, 100, 98, 99, 84, -69, -69, -69, -69,
	-69, -69, -69, -69, -69, -69, -69, -69, -69, -69,
	-69, -69, -69, -69, -69, -140, -142, -141, 254, -135,
	-138, 266, 124, 272, 271, 159, 257, -132, 61, 63,
	61, -83, -119, -245, -245, -245, -245, 59, -245, -2,
	-90, 15, -29, 5, -27, -249, -68, 63, -119, -68,
	-119, -42, 24, -41, -76, -43, -44, 115, -127, -120,
	-120, -230, 409, -231, -69, -41, -44, -41, -41, -41,
	-44, -134, 124, 262, 159, 257, 249, 281, 282, 302,
	253, 303, 242, 234, 239, 252, 250, 236, 251, 235,
	248, 245, 260, 259, 261, 272, 263, 268, 270, 269,
	267, -44, -43, -43, -41, -34, 24, -84, -85, 86,
	-83, 19, -245, -245, -245, 264, 408, 408, -41, -42,
	-41, -41, -41, -150, -149, 63, -149, 305, 305, 65,
	65, -183, -119, -58, 60, 58, -97, -184, -2, -58,
	141, 21, 6, 8, 9, 10, 19, -116, 59, 25,
	-212, 60, 59, -242, 58, -119, 154, -119, -125, 59,
	371, -214, -125, -113, 180, 179, -214, -113, 63, -119,
	-186, -188, 371, -187, 57, 151, 71, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 61, -181, -93, -93,
	60, -120, -245, 218, 217, -200, 56, 73, 182, -200,
	56, -170, -199, 58, -44, -120, -166, -184, 60, -196,
	181, -166, -62, 12, -165, -33, 90, 95, 91, 92,
	80, 93, 94, -119, -33, -171, -119, -244, 60, 60,
	60, -245, 60, 377, 378, -44, 58, -65, 60, -245,
	73, 74, 75, -153, -244, -244, -244, -75, -69, -69,
	-69, -40, 160, 80, 371, 264, -245, -245, -44, -245,
	-94, 17, 16, -5, -3, -244, 21, 24, -36, 44,
	45, -28, -245, -41, 59, -245, -245, -122, -121, 25,
	-119, 63, 127, -244, 409, 59, -245, -245, -245, -245,
	59, 57, 59, -146, 58, -146, -146, -156, 240, -146,
	240, -156, -146, -146, -146, -146, -146, -146, 25, 59,
	11, 59, 11, -245, -41, -87, -85, 89, -44, -245,
	-127, 409, 409, -245, -245, -245, -245, -150, -150, 60,
	60, 60, 58, 58, -99, 393, -183, 60, 60, -245,
	25, -171, 201, -115, 86, -120, -216, -218, 229, -18,
	-15, -6, -8, -7, -10, -9, -11, -12, -13, -14,
	-24, -3, 143, -16, -17, -30, 10, 9, 20, 33,
	205, 206, 211, 207, 153, -31, 176, -25, 8, 357,
	164, 165, 56, 63, -247, -119, 113, 90, 63, -158,
	59, 58, 58, 389, 390, 144, -215, 223, -125, -113,
	97, -185, 56, -187, 371, 58, 373, 61, -174, 90,
	63, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, -93, -226, 9, -226, 10, 58, 58, -184, -245,
	58, 60, 60, -186, 364, 60, -44, 60, 59, -44,
	-196, 56, -226, 60, -198, 60, 60, -69, -69, -69,
	-40, 80, -69, -69, 253, -95, 19, 34, -44, -91,
	-92, -44, -90, -2, -34, 70, -245, -43, -233, 406,
	-121, 115, -128, -42, -231, -233, -233, -134, 124, 159,
	253, -132, -44, -149, 61, -134, -69, -69, -69, -69,
	368, -90, 88, -44, 87, -99, -183, -184, -62, 58,
	60, -62, -186, -2, -193, 57, 202, 229, -44, 407,
	-218, 229, -216, -90, -44, -27, -27, -27, -220, -119,
	-219, -27, -239, -238, 327, 328, 329, 330, 331, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, -119, -119, -119, -211, 40,
	208, 209, 210, -44, -119, -244, -86, -58, 60, -247,
	-119, -247, -247, -247, -247, -247, -184, -184, 58, 58,
	155, 228, 63, -119, -189, -187, -119, 65, -206, 56,
	77, 65, -206, -206, -206, -206, -206, -207, 197, 198,
	65, -208, -207, 65, -227, -169, -227, -169, -171, -184,
	60, -196, -166, -62, -186, -185, -62, 147, -119, -245,
	10, 9, -227, 377, 378, 60, 230, 383, 384, 168,
	385, 181, 386, 387, -245, -245, -245, -69, 305, 9,
	100, 59, 18, 59, -93, -94, -245, -35, 47, -244,
	127, -245, -245, -245, -245, 59, -245, -245, 59, -245,
	19, -245, 59, -245, 19, -244, -38, 363, -44, -62,
	60, 60, -186, -97, -99, -186, -194, 371, -44, -216,
	-217, -218, -218, -216, 407, 88, -94, 87, -19, -15,
	-16, -18, 229, -111, 11, -53, -46, -47, -48, -49,
	-60, -82, -244, -58, 59, -221, -131, 203, 25, -104,
	-133, 231, -108, 316, 315, -120, 326, -106, 314, 266,
	313, -206, 59, -119, 11, 11, 11, 11, -218, 229,
	-77, -76, -77, -116, 19, 60, 60, -184, -184, 58,
	-244, 60, 59, -200, -200, 60, 60, -186, 60, -185,
	-226, -58, -196, -169, -169, 371, -65, 16, -65, -65,
	-65, 65, 384, 168, 386, 16, 42, -44, -44, -92,
	-95, -41, -245, 169, -90, 115, -69, -69, -69, -69,
	-69, -69, -245, 63, -186, -62, -186, -185, 60, -62,
	-185, 405, 407, -218, 88, 88, -95, -216, 89, 89,
	-217, -59, 29, -58, -58, -53, -246, 11, 57, 33,
	59, -54, -56, -55, -57, 46, 50, 52, 47, 48,
	49, 53, -131, -46, -244, -130, 169, -129, 25, -127,
	63, -219, -119, 204, -136, 59, -104, 231, -105, -109,
	317, 319, 90, 127, -126, -119, 63, 31, 33, -238,
	29, -217, -245, -115, 201, -226, 60, 60, -184, -119,
	-187, -226, -226, 147, -186, -185, -62, -227, 58, -226,
	-226, -65, -65, 388, -127, 43, -45, 11, 16, -245,
	-245, -245, -245, -245, -245, -37, 100, 371, -185, -186,
	-186, -44, 88, -218, 407, -16, -19, 143, -17, 143,
	407, 88, -100, 169, -58, -100, 57, -46, -103, -107,
	-83, -47, -48, -48, -47, -48, 46, 46, 46, 51,
	46, 51, 46, -55, -127, -245, -61, 54, 142, 55,
	-244, -129, 19, -108, -105, 59, 318, 320, 321, 56,
	77, -44, -120, -150, -171, 88, 229, 202, -227, -186,
	-186, 60, -245, -227, -227, -58, -185, -226, -172, -120,
	-227, -227, 127, -62, -46, -234, -235, -44, -245, 369,
	53, 374, -185, 88, 89, -44, -44, -67, 33, 38,
	-2, -244, -244, -62, -46, -62, -45, 59, 90, -51,
	-50, 56, 57, -52, 56, -50, 46, 46, -223, 371,
	138, 138, 138, -101, -119, -2, -109, -110, 322, 319,
	325, 90, -217, -185, -185, 58, -227, 60, 59, -120,
	-88, 13, -245, -90, 59, 43, 370, 375, 143, -216,
	-19, -19, -102, 56, -103, -78, -80, -79, -244, -2,
	-96, -98, 6, -119, -117, -118, -101, -90, -62, -62,
	-107, -44, -44, 58, -44, 58, -244, -244, -244, -245,
	59, 319, 323, 324, -44, 407, -172, -120, -89, 14,
	16, -245, -235, 43, 407, 30, -102, 59, -245, -245,
	-245, 59, 127, -245, -94, -90, -97, -222, -224, 394,
	395, 396, 397, 398, 399, 400, 401, -97, -97, -97,
	-130, -119, 88, 60, -44, -76, 371, 88, 155, -80,
	38, -2, -244, -98, -119, -94, 60, 60, 59, -245,
	-245, -245, -61, 374, 143, 9, -78, -2, -224, -223,
	375, -103, -245,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 7, 0, -2, 917,
	0, 0, 0, 1, 3, 8, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 915, 0, 913, 502,
	503, 504, 507, 0, 0, 918, 0, 0, 51, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 924, 0, 0, 0, 0, 213, 264, 264, 264,
	264, 264, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	0, 0, 0, 913, 0, 913, 0, 835, 0, 0,
	-2, -2, 837, 0, 932, 0, 618, 930, 931, 913,
	0, 0, 29, 30, 31, 0, 0, 0, 508, 505,
	506, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 517, 0, 221, 396, 392, 227, 228, 229,
	230, 231, 379, 311, 342, 343, 379, 366, 386, 379,
	386, 349, 379, 386, 399, 399, 399, 399, 399, 357,
	358, 359, 360, 361, 362, 363, 0, 0, 331, 379,
	379, 379, 379, 379, 379, 379, 339, 340, 341, 368,
	369, 370, 371, 372, 373, 374, 375, 0, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 381, 329,
	381, 383, 383, 327, 328, 222, 223, 224, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	156, 157, 0, 0, 0, 0, 0, 0, 0, 27,
	28, 0, 0, 210, 0, 0, 0, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 211, 519, 0, 522,
	214, 215, 216, 217, 218, 219, 220, 0, 509, 511,
	0, 498, 0, 0, 0, 0, 0, 0, 0, 450,
	451, 234, 0, 236, 0, 238, 0, 240, 241, 0,
	243, 245, 509, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 398, 394, 393, 0, 310, 0, 399, 379,
	367, 399, 0, 399, 399, 350, 351, 402, 0, 402,
	402, 402, 402, 0, 0, 389, 389, 334, 335, 336,
	337, 338, 0, 322, 0, 381, 330, 324, 325, 0,
	326, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	143, 0, 193, 0, 163, 159, 160, 161, 158, 0,
	0, 838, 0, 925, 926, 927, -2, -2, 933, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 24,
	0, 619, 934, 0, 916, 0, 914, 206, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	523, 525, 928, 929, 521, 0, 935, 0, 0, 0,
	512, 438, 0, 446, -2, 0, 499, 500, 0, 1111,
	0, 0, 0, 0, 441, 443, 0, 498, 511, 235,
	0, 0, 0, 242, 244, 0, 248, 249, 0, 0,
	282, 0, 0, 265, 266, 1111, 279, -2, -2, -2,
	0, -2, -2, -2, -2, 0, 628, 0, 634, 636,
	638, 639, 0, 0, 0, 0, 685, 687, 688, 689,
	690, 0, 0, 0, 694, 0, 0, 0, 0, 0,
	0, 724, 725, 726, 727, 0, 729, 835, 844, 848,
	849, 0, 0, 894, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 824, 0, 0, 0, 0,
	760, 769, 769, 769, 769, 769, 769, 769, 0, 0,
	0, 0, 0, 942, 280, 281, 397, 226, 395, 232,
	0, 402, 399, 402, 0, 0, 402, 402, 352, 403,
	0, 0, 353, 354, 355, 356, 0, 377, 0, 332,
	0, 0, 333, 0, 0, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 913, 0, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 33, 34, 0,
	36, 0, 511, 42, 44, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 0, 0, 524, 520,
	0, 454, 379, -2, 379, 0, 865, 865, 865, 925,
	0, 1043, 1072, 991, 997, 998, 1049, -2, 1097, 1053,
	0, -2, -2, -2, -2, -2, -2, -2, 938, 936,
	0, 0, 0, 0, 0, 0, 498, 0, 0, 0,
	445, 0, 0, 686, 0, -2, 842, 845, 846, 847,
	850, 0, 0, 486, 835, 0, 439, 440, 442, 444,
	448, 498, 0, 512, 263, 237, 509, 239, 379, 379,
	302, 0, 0, 0, 0, 0, 283, 0, 851, 0,
	0, 0, 306, 270, 271, 0, 273, 306, 276, 277,
	0, 0, 0, 0, 633, -2, 0, -2, -2, 717,
	0, 275, 0, 631, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 666, 667,
	668, 669, 670, 671, 672, 673, 674, 675, 676, 635,
	0, 656, 0, 0, 0, 628, 78, 634, 0, 0,
	860, 0, 683, 529, 0, 0, 691, 692, 693, 714,
	715, 716, 718, 719, 720, 728, 543, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 0, 825, 0, 0, 0, 0, 761, 0, 762,
	763, 764, 765, 766, 767, 768, 814, 0, 816, 817,
	818, 820, 821, 823, 0, 543, 0, 0, 380, 344,
	402, 346, 387, 388, 347, 348, 404, 400, 401, 399,
	0, 399, 0, 0, 376, 0, 384, 0, 0, 0,
	0, 0, 452, -2, 0, 0, 0, -2, 0, 0,
	-2, 0, 0, 194, 195, 191, 164, 162, 584, 585,
	0, 0, 839, 0, 377, 146, 35, 0, 73, 74,
	512, 511, 43, 922, 65, 67, 68, 69, 93, 0,
	922, 919, 0, 919, 0, 0, 518, 526, 527, 528,
	406, 0, 865, 459, 464, 457, 865, 0, 461, 866,
	867, 462, 463, 0, 0, 465, 0, 937, 509, 472,
	473, 0, 0, 509, 510, 511, 498, 0, 0, 0,
	0, 0, 0, 304, 1112, 841, 0, 624, 0, 0,
	0, 449, 0, 0, 298, 0, 300, 0, 0, 0,
	0, 0, 0, 260, 0, 852, 267, 0, 269, 272,
	274, 0, 629, 630, 632, 660, 0, 662, 664, 307,
	-2, 396, -2, 640, 0, 0, 0, 644, 679, 680,
	681, 0, 0, 0, 0, 0, 677, 648, 649, 650,
	651, 652, 0, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 709, 710, 711, 379, 722,
	379, 366, 379, 399, 363, 331, 379, 712, 780, 781,
	0, 0, 835, 658, 659, 682, 723, 0, 893, 78,
	868, 0, 0, 533, 536, 531, 707, 306, 0, 708,
	721, 0, 0, 0, 0, 545, 551, 547, 0, 838,
	840, 0, 944, 945, 947, 0, 551, 0, 0, 0,
	0, 0, 379, 379, 785, 379, 383, 788, 789, 790,
	379, 793, 795, 796, 797, 798, 383, 800, 801, 802,
	803, 804, 379, 379, 807, 808, 379, 379, 811, 379,
	379, 0, 0, 0, 0, 0, 540, 833, 828, 0,
	0, 0, 757, 759, 770, 815, 0, 0, 0, 0,
	544, 0, 0, 345, 402, 378, 402, 390, 391, 0,
	0, 0, 0, 0, 626, 0, 0, 0, 78, 0,
	0, 197, 198, 199, 200, 201, 0, 831, 0, 0,
	0, 25, 0, 26, 148, 0, 0, 512, 45, 0,
	0, 922, 47, 48, 920, 921, 919, 50, 71, 0,
	435, 407, 0, 409, 0, 427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 455, 456, 458,
	865, 0, 758, 939, 940, 935, 0, 474, 475, 935,
	0, 0, 0, 0, 0, 0, 0, 0, 406, 481,
	0, 0, 485, 0, 487, 488, 490, 491, 492, 493,
	494, 495, 496, 497, 489, 0, 513, 0, 299, 301,
	303, 304, -2, 256, 257, 0, 284, 0, 0, 278,
	661, 663, 665, 309, 0, 0, 0, 645, 677, 653,
	0, 646, 0, 0, 0, 367, 637, 657, 684, -2,
	872, 0, 0, 860, 80, 0, 534, 535, 539, 537,
	538, 530, 730, 0, 0, 556, 736, 548, 552, 0,
	554, 555, 0, 543, 943, 0, 556, 556, 737, 738,
	0, 0, 0, 782, 1111, 399, 786, 787, 791, 792,
	794, 799, 805, 806, 809, 810, 812, 813, 0, 0,
	0, 0, 0, 0, 860, 0, 829, 0, 0, 755,
	756, 819, 822, 771, 772, 773, 774, 364, 365, 382,
	385, 626, 0, 0, 624, 0, 0, 624, 406, 79,
	0, 202, 0, 0, 0, 586, 21, 165, 0, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 860, 0, 124, 125, 529, 529, 529, 0, 529,
	0, 0, 0, 112, 0, 0, 824, 905, 84, 85,
	186, 187, 0, 949, 0, -2, 148, 148, -2, 148,
	148, 0, 0, 0, 0, 0, 66, 0, 46, 49,
	0, 405, 0, 410, 0, 0, 0, 413, 0, 428,
	415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 460, 938, 0, 938, 0, 0, 0, 0, 304,
	0, 624, 406, 435, 305, 624, 625, 0, 0, 0,
	246, 0, 938, 0, 0, 262, 268, 0, 0, 0,
	647, 0, 678, 654, 0, 75, 0, 0, 869, 861,
	862, 865, 868, 78, 541, 532, 731, 546, 732, 0,
	553, 549, 0, 0, 946, 733, 734, 0, 379, 785,
	379, 0, 0, 783, 784, 0, 0, 0, 0, 0,
	0, 826, 754, 834, 0, 624, 0, 0, 406, 0,
	626, 406, 15, -2, 204, 0, 192, 0, 832, 0,
	168, 0, 0, 868, 0, 917, 0, 0, 100, -2,
	102, 0, 0, 950, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 107, 108, 109, 0, 0,
	0, 0, 0, 0, 188, 188, 190, 191, 147, 149,
	-2, 150, 151, 152, 153, 154, 0, 0, 0, 0,
	0, 923, 72, 436, 0, 411, 416, 414, 417, 429,
	430, 418, 419, 420, 421, 422, 423, 424, 431, 432,
	425, 426, 433, 434, 466, 509, 467, 509, 0, 0,
	406, 480, 0, 483, 435, 935, 484, 0, 514, 304,
	0, 0, 253, 258, 259, 261, 0, 0, 0, 0,
	0, 0, 295, 0, 641, 642, 643, 655, 713, 873,
	0, 0, 0, 0, 864, 872, 81, 0, 542, 0,
	0, 735, 739, 743, 740, 0, 742, 744, 0, 746,
	0, 748, 0, 750, 0, 0, 0, 0, 830, 406,
	624, 406, 435, 0, 624, 435, 19, 0, 203, 20,
	0, 119, 166, 0, 0, 169, 872, 0, 130, 128,
	124, 131, 0, 0, 0, 0, 0, 563, 565, 566,
	567, 599, 0, 601, 0, 0, 0, 106, 600, 96,
	0, 0, 898, 144, 145, 0, 0, 0, -2, 0,
	909, 906, 0, 110, 113, 114, 115, 116, 117, 0,
	184, 189, 0, 831, 0, 37, 935, 0, 0, 0,
	0, 408, 0, 935, 935, 0, 406, 435, 624, 477,
	938, 0, 247, -2, -2, 0, 286, 0, 288, 289,
	290, 291, 292, 293, 294, 0, 0, 870, 871, 863,
	76, 561, 557, 0, 0, 550, 0, 0, 0, 0,
	0, 775, 753, 827, 435, 406, 12, 10, 627, 406,
	14, 0, 0, 120, 170, 167, 183, 0, 0, 0,
	0, 94, 0, 617, -2, 0, 0, 90, 91, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 609, 0,
	0, 0, 0, 0, 0, 620, 0, 602, 0, 604,
	605, 103, 599, 0, 104, 0, 97, 0, 99, 133,
	0, 0, 0, 0, 402, 910, 911, 912, 908, 951,
	0, 0, 185, 0, 0, 938, 406, 406, 0, 0,
	412, 938, 938, 0, 435, 935, 482, 479, 0, 938,
	938, 285, 287, 296, 0, 874, 624, 0, 0, 559,
	741, 745, 747, 749, 751, 0, 0, 0, 9, 13,
	435, 205, 22, 121, 0, 126, 127, 0, 129, 0,
	0, 132, 0, 0, 616, 624, 0, 624, 561, 895,
	0, 564, 595, 597, 0, 592, 607, 608, 610, 0,
	612, 0, 614, 615, 568, 569, 570, 0, 0, 0,
	0, 603, 0, 899, 98, 0, 0, 136, 137, 900,
	901, 902, 0, 904, 111, 118, 0, 192, 39, 435,
	435, 38, 437, 468, 469, 0, 476, 938, 0, 515,
	254, 255, 0, 853, 562, 0, 857, 859, 752, 0,
	0, 0, 11, 0, 0, 0, 0, 887, 0, 0,
	-2, 0, 0, 860, 624, 89, 624, 0, 0, 589,
	596, 0, 0, 590, 0, 591, 611, 613, 582, 0,
	0, 0, 0, 0, 587, -2, 134, 135, 0, 0,
	141, 0, 0, 40, 41, 0, 478, 471, 0, 297,
	855, 0, 558, 0, 0, 776, 0, 779, 122, 0,
	0, 130, 82, 0, 887, 875, 889, 891, 0, 78,
	0, 881, -2, 883, 885, 886, 0, 868, 88, 860,
	896, 897, 593, 0, 598, 0, 0, 0, 0, 601,
	0, 138, 139, 140, 903, 0, 0, 516, 77, 0,
	0, 560, 858, 777, 0, 0, 83, 0, 892, -2,
	0, 0, 0, 95, 87, 868, 0, 0, 572, 574,
	575, 576, 577, 578, 579, 580, 581, 0, 0, 0,
	620, 588, 23, 470, 856, 854, 0, 0, 0, 890,
	0, -2, 0, 882, 884, 86, 594, 571, 0, 621,
	622, 623, 570, 0, 123, 0, 878, 78, 573, 583,
	778, 888, -2,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 118, 110, 3,
	58, 60, 115, 113, 59, 114, 127, 116, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 407,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 408, 3, 409, 120, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 121,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	111, 112, 117, 119, 122, 123, 124, 125, 126, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:433
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:438
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:439
		{
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:449
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 9:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:454
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:474
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 11:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:494
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:515
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 13:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:531
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 14:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:548
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:568
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:583
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:594
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:606
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:617
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:633
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:647
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:661
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:674
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:688
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:698
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name:       yyDollar[3].tableName,
					IsEnum:     true,
					EnumValues: yyDollar[7].strs,
				},
			}
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:710
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:715
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name:        yyDollar[4].colIdent.String(),
					IfNotExists: bool(yyDollar[3].boolVal),
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:725
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name:        string(yyDollar[4].bytes),
					IfNotExists: bool(yyDollar[3].boolVal),
				},
			}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:736
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:745
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:754
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: "citext",
				},
			}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:763
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[6].bytes),
				},
			}
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:772
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:781
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: "citext",
				},
			}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:792
		{
			yyVAL.statement = &DDL{
				Action:    AddColumn,
				Table:     yyDollar[4].tableName,
				NewName:   yyDollar[4].tableName,
				ColumnDef: yyDollar[7].columnDefinition,
			}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:801
		{
			yyVAL.statement = &DDL{
				Action:    AddColumn,
				Table:     yyDollar[4].tableName,
				NewName:   yyDollar[4].tableName,
				ColumnDef: yyDollar[6].columnDefinition,
			}
		}
	case 37:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:810
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 38:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:824
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 39:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:838
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 40:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:858
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 41:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:876
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:894
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:903
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:912
		{
			yyVAL.statement = &DDL{
				Action:    AddExclusion,
				Table:     yyDollar[4].tableName,
				NewName:   yyDollar[4].tableName,
				Exclusion: yyDollar[6].exclusionDefinition,
			}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:924
		{
			if yyDollar[8].byt != 0 {
				yylex.Error("WITH GRANT OPTION is not supported yet")
				return 1
			}
			// Handle multiple tables by creating a MultiStatement
			if len(yyDollar[5].tableNames) > 1 {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, tableName := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: GrantPrivilege,
						Table:  tableName,
						Grant: &Grant{
							IsGrant:    true,
							Privileges: yyDollar[2].strs,
							TableName:  tableName,
							Grantees:   yyDollar[7].strs,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			} else {
				yyVAL.statement = &DDL{
					Action: GrantPrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:    true,
						Privileges: yyDollar[2].strs,
						TableName:  yyDollar[5].tableNames[0],
						Grantees:   yyDollar[7].strs,
					},
				}
			}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:959
		{
			if yyDollar[9].byt != 0 {
				yylex.Error("WITH GRANT OPTION is not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[6].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[6].tableName,
					Grantees:   yyDollar[8].strs,
				},
			}
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:976
		{
			if yyDollar[8].byt != 0 {
				yylex.Error("WITH GRANT OPTION is not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[5].tableName,
					Grantees:   yyDollar[7].strs,
				},
			}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:993
		{
			if yyDollar[8].str == "CASCADE" {
				yylex.Error("CASCADE/RESTRICT options are not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: yyDollar[2].strs,
					TableName:  yyDollar[5].tableName,
					Grantees:   yyDollar[7].strs,
				},
			}
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1010
		{
			if yyDollar[9].str == "CASCADE" {
				yylex.Error("CASCADE/RESTRICT options are not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[6].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[6].tableName,
					Grantees:   yyDollar[8].strs,
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1027
		{
			if yyDollar[8].str == "CASCADE" {
				yylex.Error("CASCADE/RESTRICT options are not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[5].tableName,
					Grantees:   yyDollar[7].strs,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1046
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1050
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1056
		{
			yyVAL.str = "SELECT"
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1060
		{
			yyVAL.str = "INSERT"
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1064
		{
			yyVAL.str = "UPDATE"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1068
		{
			yyVAL.str = "DELETE"
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1072
		{
			yyVAL.str = "TRUNCATE"
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1076
		{
			yyVAL.str = "REFERENCES"
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1080
		{
			yyVAL.str = "TRIGGER"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1084
		{
			yyVAL.str = "CREATE"
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1088
		{
			yyVAL.str = "CONNECT"
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1092
		{
			yyVAL.str = "EXECUTE"
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.str = "USAGE"
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1100
		{
			yyVAL.str = strings.ToUpper(yyDollar[1].colIdent.String())
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1106
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1110
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1116
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1120
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1124
		{
			yyVAL.str = "PUBLIC"
		}
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1131
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     String(yyDollar[4].tableName),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 71:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1142
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     String(TableName{Name: yyDollar[4].tableIdent}) + "." + yyDollar[6].colIdent.String(),
					Comment:    string(yyDollar[8].bytes),
				},
			}
		}
	case 72:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1153
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     String(TableName{Schema: yyDollar[4].tableIdent, Name: yyDollar[6].tableIdent}) + "." + yyDollar[8].colIdent.String(),
					Comment:    string(yyDollar[10].bytes),
				},
			}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1170
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1178
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 77:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1185
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1191
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1195
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1201
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1205
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 82:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1212
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1224
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1236
		{
			yyVAL.str = InsertStr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1240
		{
			yyVAL.str = ReplaceStr
		}
	case 86:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1246
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 87:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1252
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 88:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1256
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 89:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1260
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1265
		{
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1266
		{
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1270
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1274
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.partitions = nil
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1283
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1289
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1293
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1301
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1307
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1311
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1324
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1328
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1334
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1339
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1343
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1349
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1356
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1363
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1370
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1378
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1388
		{
			yyVAL.str = ""
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1392
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1396
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1400
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1404
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1410
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1417
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1431
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1435
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1439
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 122:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1446
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1454
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1464
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1468
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1475
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1485
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1496
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1501
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1506
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1513
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1517
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1528
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1532
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1538
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1542
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1546
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1552
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1556
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1560
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1564
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1570
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1574
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1580
		{
			yyVAL.str = SessionStr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1584
		{
			yyVAL.str = GlobalStr
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1589
		{
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1590
		{
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1594
		{
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1595
		{
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1596
		{
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1597
		{
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1598
		{
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1599
		{
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1600
		{
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1604
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1608
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1612
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1616
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1622
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1626
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1630
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1635
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1641
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1645
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1651
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1655
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1660
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1669
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1673
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1682
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1698
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1711
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1721
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1726
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1732
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1733
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1736
		{
			yyVAL.exprs = nil
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1737
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1741
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1746
		{
			yyVAL.empty = struct{}{}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1748
		{
			yyVAL.empty = struct{}{}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1751
		{
			yyVAL.bytes = nil
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1755
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1764
		{
			yyVAL.bytes = nil
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1768
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1772
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1776
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1780
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1784
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1789
		{
			yyVAL.expr = nil
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1793
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1798
		{
			yyVAL.expr = nil
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1802
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1807
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1811
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1816
		{
			yyVAL.bytes = nil
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1820
		{
			yyVAL.bytes = nil
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1826
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1833
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1839
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1843
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1848
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1852
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1856
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1860
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1864
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1868
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1872
		{
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1878
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1882
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1886
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1896
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1902
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1913
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1917
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val + "." + yyDollar[3].colIdent.val}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1923
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1936
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1941
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1946
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1951
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1957
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1962
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1967
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1972
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1977
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1982
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1987
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1992
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1997
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2006
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2016
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2021
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2026
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 251:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2033
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 252:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2040
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 253:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2048
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[7].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[8].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 254:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2056
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[10].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[11].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 255:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2065
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[10].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[11].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 256:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2075
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2080
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 258:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2085
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 259:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2090
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2096
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2102
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2109
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2116
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2122
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2128
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2132
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2136
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2140
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2146
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2150
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2154
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2158
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2162
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2166
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2170
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2174
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2178
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2182
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2188
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2194
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2200
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2206
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2210
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2215
		{
			yyVAL.sequence = &Sequence{}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2219
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2224
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2229
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2234
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2239
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2244
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2249
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2254
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2259
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2264
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2269
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2274
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2279
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2286
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2290
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2294
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2298
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2302
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2306
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2311
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2315
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2320
		{
			yyVAL.bytes = nil
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2329
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2334
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2340
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2344
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2348
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2352
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2356
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2360
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2364
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2368
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2372
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2376
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2382
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2388
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2394
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2400
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2406
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2412
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2416
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2421
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2425
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2431
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2435
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2439
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2443
		{
			yyVAL.columnType = ColumnType{Type: "timestamp", Length: yyDollar[2].optVal, Timezone: BoolVal(true)}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2447
		{
			yyVAL.columnType = ColumnType{Type: "time", Length: yyDollar[2].optVal, Timezone: BoolVal(true)}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2451
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2455
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2459
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2463
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2467
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2471
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2477
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2481
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2487
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 345:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2491
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2495
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2499
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2503
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2507
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2515
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2547
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2551
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2559
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2563
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 365:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2572
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2577
		{
			yyVAL.str = ""
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2581
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2625
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2630
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2635
		{
			yyVAL.optVal = nil
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2639
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2644
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2648
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2656
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2660
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2666
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2674
		{
			yyVAL.optVal = nil
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2678
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2682
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2691
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2695
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2699
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2704
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2708
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2713
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2717
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2722
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2726
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2730
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2735
		{
			yyVAL.str = ""
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2739
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2743
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2748
		{
			yyVAL.str = ""
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2752
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2756
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2762
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2767
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2771
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2775
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2781
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2791
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2801
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2805
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2810
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2814
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2818
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2822
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2826
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2830
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2834
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2838
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2842
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2846
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2850
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2854
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2865
		{
			yyVAL.str = ""
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2869
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2875
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2879
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2885
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2889
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2895
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2899
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2905
		{
			yyVAL.indexPartition = nil
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2909
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2913
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2919
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2923
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2927
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2931
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2935
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2939
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2943
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2947
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2951
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2955
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2959
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2963
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2969
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2973
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2979
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2984
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2994
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3000
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3005
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent("level"), Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3013
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3017
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3022
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3026
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3030
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3040
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			if bool(yyDollar[3].boolVal) || bool(yyDollar[4].boolVal) {
				yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
					Deferrable:        bool(yyDollar[3].boolVal),
					InitiallyDeferred: bool(yyDollar[4].boolVal),
				}
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 466:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3051
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			if bool(yyDollar[6].boolVal) || bool(yyDollar[7].boolVal) {
				yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
					Deferrable:        bool(yyDollar[6].boolVal),
					InitiallyDeferred: bool(yyDollar[7].boolVal),
				}
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 467:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3064
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			if bool(yyDollar[6].boolVal) || bool(yyDollar[7].boolVal) {
				yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
					Deferrable:        bool(yyDollar[6].boolVal),
					InitiallyDeferred: bool(yyDollar[7].boolVal),
				}
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 468:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3077
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			if bool(yyDollar[9].boolVal) || bool(yyDollar[10].boolVal) {
				yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
					Deferrable:        bool(yyDollar[9].boolVal),
					InitiallyDeferred: bool(yyDollar[10].boolVal),
				}
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 469:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3090
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			if bool(yyDollar[9].boolVal) || bool(yyDollar[10].boolVal) {
				yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
					Deferrable:        bool(yyDollar[9].boolVal),
					InitiallyDeferred: bool(yyDollar[10].boolVal),
				}
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 470:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 471:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3116
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3127
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3131
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3135
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3139
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 476:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3145
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 477:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 478:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3166
		{
			constraintOptions := &ConstraintOptions{
				Deferrable:        bool(yyDollar[10].boolVal),
				InitiallyDeferred: bool(yyDollar[11].boolVal),
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: constraintOptions,
			}
		}
	case 479:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3181
		{
			var constraintOptions *ConstraintOptions
			if bool(yyDollar[8].boolVal) || bool(yyDollar[9].boolVal) {
				constraintOptions = &ConstraintOptions{
					Deferrable:        bool(yyDollar[8].boolVal),
					InitiallyDeferred: bool(yyDollar[9].boolVal),
				}
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:           yyDollar[4].indexColumns,
				Options:           yyDollar[6].indexOptions,
				Partition:         yyDollar[7].indexPartition,
				ConstraintOptions: constraintOptions,
			}
		}
	case 480:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3200
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 481:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 482:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3219
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 483:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3228
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "",
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 484:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3237
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				IndexType:  yyDollar[3].colIdent.String(),
				Exclusions: yyDollar[5].exclusionPairs,
				Where:      NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3245
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				IndexType:  "",
				Exclusions: yyDollar[3].exclusionPairs,
				Where:      NewWhere(WhereStr, yyDollar[5].expr),
			}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3255
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3259
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3265
		{
			yyVAL.exclusionPair = ExclusionPair{
				Column:   yyDollar[1].colIdent,
				Operator: yyDollar[3].str,
			}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3272
		{
			yyVAL.exclusionPair = ExclusionPair{
				Column:   NewColIdent(String(yyDollar[1].expr)),
				Operator: yyDollar[3].str,
			}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3281
		{
			yyVAL.str = "="
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3285
		{
			yyVAL.str = "<>"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3289
		{
			yyVAL.str = "<"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3293
		{
			yyVAL.str = ">"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3297
		{
			yyVAL.str = "&&"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3301
		{
			yyVAL.str = "<="
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3305
		{
			yyVAL.str = ">="
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3309
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3315
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3319
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3323
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3329
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3333
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3337
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3341
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3345
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3349
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3355
		{
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3356
		{
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3360
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3364
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3369
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3376
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3380
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3386
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3390
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3397
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3401
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3407
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3411
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3416
		{
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3417
		{
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3421
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3425
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3429
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3435
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3439
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3443
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3448
		{
			setAllowComments(yylex, true)
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3452
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3458
		{
			yyVAL.bytes2 = nil
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3462
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3468
		{
			yyVAL.str = UnionStr
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3472
		{
			yyVAL.str = UnionAllStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3476
		{
			yyVAL.str = UnionDistinctStr
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3481
		{
			yyVAL.str = ""
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3485
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3489
		{
			yyVAL.str = SQLCacheStr
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3494
		{
			yyVAL.str = ""
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3498
		{
			yyVAL.str = DistinctStr
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3503
		{
			yyVAL.str = ""
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3507
		{
			yyVAL.str = StraightJoinHint
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3512
		{
			yyVAL.selectExprs = nil
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3516
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3522
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3526
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3532
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3536
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3540
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3544
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3549
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3553
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3557
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3564
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3569
		{
			yyVAL.overExpr = nil
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3573
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 558:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3577
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3581
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 560:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3585
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3590
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3594
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3600
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3604
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3614
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3618
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3622
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3627
		{
			yyVAL.strs = []string{}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3631
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3637
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3641
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3647
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3651
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3655
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3659
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3663
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3667
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3671
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3675
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3681
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 583:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3685
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3691
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3696
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3700
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3706
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3710
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3723
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3727
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3731
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3735
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3741
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3743
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3747
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3749
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3753
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3755
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3758
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3760
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3763
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3778
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3784
		{
			yyVAL.str = JoinStr
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3788
		{
			yyVAL.str = JoinStr
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3792
		{
			yyVAL.str = JoinStr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3798
		{
			yyVAL.str = StraightJoinStr
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3804
		{
			yyVAL.str = LeftJoinStr
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3808
		{
			yyVAL.str = LeftJoinStr
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3812
		{
			yyVAL.str = RightJoinStr
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3816
		{
			yyVAL.str = RightJoinStr
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3822
		{
			yyVAL.str = NaturalJoinStr
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3826
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3836
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3840
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3846
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3850
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3855
		{
			yyVAL.indexHints = nil
		}
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3859
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3863
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3867
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.expr = nil
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3881
		{
			yyVAL.columns = nil
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3885
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3891
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3895
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3899
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3903
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3907
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3911
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3915
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3925
		{
			yyVAL.str = ""
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3929
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3935
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3939
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3945
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 641:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3949
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, All: true}
		}
	case 642:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3953
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 643:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3957
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3961
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3965
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3969
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 647:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3973
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3977
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOpStr, Right: yyDollar[3].expr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3981
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOpStr, Right: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: ILikeOpStr, Right: yyDollar[3].expr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3989
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotILikeOpStr, Right: yyDollar[3].expr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3993
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3997
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 654:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4001
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 655:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4005
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4009
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4014
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4018
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4022
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4028
		{
			yyVAL.str = IsNullStr
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4032
		{
			yyVAL.str = IsNotNullStr
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4036
		{
			yyVAL.str = IsTrueStr
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4040
		{
			yyVAL.str = IsNotTrueStr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4044
		{
			yyVAL.str = IsFalseStr
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4048
		{
			yyVAL.str = IsNotFalseStr
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4054
		{
			yyVAL.str = EqualStr
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4058
		{
			yyVAL.str = LessThanStr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4062
		{
			yyVAL.str = GreaterThanStr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4066
		{
			yyVAL.str = LessEqualStr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4070
		{
			yyVAL.str = GreaterEqualStr
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4074
		{
			yyVAL.str = NotEqualStr
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4078
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4082
		{
			yyVAL.str = PosixRegexStr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4086
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4090
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4094
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4099
		{
			yyVAL.expr = nil
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4103
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4109
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4113
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4117
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4123
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4129
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4133
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4139
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4143
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4147
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4151
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4155
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4159
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.expr = &CastExpr{Expr: NewStrVal(yyDollar[2].bytes), Type: &ConvertType{Type: "date"}}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4167
		{
			yyVAL.expr = &CastExpr{Expr: NewStrVal(yyDollar[2].bytes), Type: &ConvertType{Type: "time"}}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4171
		{
			yyVAL.expr = &CastExpr{Expr: NewStrVal(yyDollar[2].bytes), Type: &ConvertType{Type: "timestamp"}}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4175
		{
			yyVAL.expr = yyDollar[1].arrayConstructor
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4179
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4183
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4187
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4191
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4195
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4199
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4203
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4207
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4219
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4223
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4227
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4231
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4235
		{
			yyVAL.expr = &CastExpr{
				Expr: yyDollar[1].expr,
				Type: &ConvertType{
					Type:   yyDollar[3].columnType.Type,
					Length: yyDollar[3].columnType.Length,
					Scale:  yyDollar[3].columnType.Scale,
				},
			}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4246
		{
			yyVAL.expr = &CastExpr{
				Expr: yyDollar[1].expr,
				Type: &ConvertType{
					Type:   yyDollar[3].columnType.Type,
					Length: yyDollar[3].columnType.Length,
				},
			}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4256
		{
			yyVAL.expr = &CastExpr{
				Expr: yyDollar[1].expr,
				Type: &ConvertType{
					Type: yyDollar[3].columnType.Type,
				},
			}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4265
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 713:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4269
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: &ConvertType{Type: string(yyDollar[3].bytes) + " WITH TIME ZONE"}}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4273
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4277
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4281
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4289
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4303
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4307
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4311
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4319
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4327
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4331
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4339
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4343
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4353
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 731:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4357
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 732:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4361
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 733:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4365
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 734:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4369
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 735:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4373
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4377
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4387
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4391
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 739:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4395
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 740:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4400
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 741:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4404
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 742:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4408
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 743:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4412
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 744:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4416
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 745:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4420
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 746:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4424
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 747:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4428
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 748:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4432
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 749:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4436
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 750:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4440
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 751:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4444
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 752:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4448
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 753:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4452
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 754:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4456
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 755:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4460
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 756:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4465
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4469
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4473
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4477
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4488
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4496
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4500
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4505
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4510
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4515
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4520
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4524
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4538
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 772:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4542
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 774:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4550
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4556
		{
			yyVAL.str = ""
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4560
		{
			yyVAL.str = BooleanModeStr
		}
	case 777:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4564
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 778:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4568
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4572
		{
			yyVAL.str = QueryExpansionStr
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4578
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4582
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4588
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4592
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4596
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4600
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4604
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4608
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4614
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4618
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4622
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4626
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4630
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4634
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4638
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4642
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4646
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4650
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4654
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4658
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4662
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4666
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4670
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4674
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4678
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4682
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4686
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4690
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4694
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4698
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4702
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4706
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4710
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4720
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4724
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4728
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4732
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4736
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4740
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type, Array: true}
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4744
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4748
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4752
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Array: true}
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4756
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4761
		{
			yyVAL.expr = nil
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4765
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4770
		{
			yyVAL.str = string("")
		}
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4774
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4780
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4784
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 830:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4790
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 831:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4795
		{
			yyVAL.empty = struct{}{}
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4797
		{
			yyVAL.empty = struct{}{}
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4800
		{
			yyVAL.expr = nil
		}
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4804
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4810
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4814
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4818
		{
			yyVAL.colName = &ColName{Name: NewColIdent("level")}
		}
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4822
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 839:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4826
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4832
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4838
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4842
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4847
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4852
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4856
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4860
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4864
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4868
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4872
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4876
		{
			yyVAL.expr = &NullVal{}
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4882
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4886
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4891
		{
			yyVAL.exprs = nil
		}
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4895
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4900
		{
			yyVAL.expr = nil
		}
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4904
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4910
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4914
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4920
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4925
		{
			yyVAL.orderBy = nil
		}
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4929
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4935
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4939
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4945
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4950
		{
			yyVAL.str = AscScr
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4954
		{
			yyVAL.str = AscScr
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4958
		{
			yyVAL.str = DescScr
		}
	case 868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4963
		{
			yyVAL.limit = nil
		}
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4967
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4971
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 871:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4975
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 872:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4980
		{
			yyVAL.str = ""
		}
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4984
		{
			yyVAL.str = ForUpdateStr
		}
	case 874:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4988
		{
			yyVAL.str = ShareModeStr
		}
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5001
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5005
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5009
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 878:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5014
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5018
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 880:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5022
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5029
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5033
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5039
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 884:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5043
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5047
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5051
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5056
		{
			yyVAL.updateExprs = nil
		}
	case 888:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5060
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5066
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5070
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5076
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5080
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5086
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5092
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5102
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5106
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5112
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5118
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5122
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5128
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5132
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5136
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 903:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5141
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5145
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5151
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5157
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5164
		{
			yyVAL.bytes = []byte("charset")
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5171
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5175
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5179
		{
			yyVAL.expr = &Default{}
		}
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5184
		{
			yyVAL.empty = struct{}{}
		}
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5186
		{
			yyVAL.empty = struct{}{}
		}
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5189
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5191
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 917:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5194
		{
			yyVAL.str = ""
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5196
		{
			yyVAL.str = IgnoreStr
		}
	case 919:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5199
		{
			yyVAL.str = ""
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5201
		{
			yyVAL.str = "CASCADE"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5203
		{
			yyVAL.str = "RESTRICT"
		}
	case 922:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5206
		{
			yyVAL.byt = 0
		}
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5208
		{
			yyVAL.byt = 1
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5212
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5219
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5223
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5227
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5231
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5237
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5241
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5246
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5253
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 935:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5259
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5263
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 937:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5267
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 938:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5273
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5277
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 940:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5281
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 941:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5287
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5291
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 943:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5298
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 944:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5302
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: nil}
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5309
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5313
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5320
		{
			// Most expressions should implement ArrayElement now
			// We use a type assertion here since value_expression returns Expr
			yyVAL.arrayElement = yyDollar[1].expr.(ArrayElement)
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5328
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 949:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5332
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5338
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5342
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5520
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5529
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
