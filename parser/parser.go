// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex any, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex any, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex any, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex any) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex any) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex any) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	statements               []Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
	handlerCondition         HandlerCondition
	handlerConditions        []HandlerCondition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const GRANT = 57457
const REVOKE = 57458
const SCHEMA = 57459
const TABLE = 57460
const INDEX = 57461
const MATERIALIZED = 57462
const VIEW = 57463
const TO = 57464
const IGNORE = 57465
const IF = 57466
const PRIMARY = 57467
const COLUMN = 57468
const CONSTRAINT = 57469
const REFERENCES = 57470
const SPATIAL = 57471
const FULLTEXT = 57472
const FOREIGN = 57473
const KEY_BLOCK_SIZE = 57474
const POLICY = 57475
const WHILE = 57476
const EXTENSION = 57477
const EXCLUDE = 57478
const UNIQUE = 57479
const KEY = 57480
const SHOW = 57481
const DESCRIBE = 57482
const EXPLAIN = 57483
const DATE = 57484
const ESCAPE = 57485
const REPAIR = 57486
const OPTIMIZE = 57487
const TRUNCATE = 57488
const EXEC = 57489
const EXECUTE = 57490
const MAXVALUE = 57491
const PARTITION = 57492
const REORGANIZE = 57493
const LESS = 57494
const THAN = 57495
const PROCEDURE = 57496
const TRIGGER = 57497
const TYPE = 57498
const RETURN = 57499
const STATUS = 57500
const VARIABLES = 57501
const RESTRICT = 57502
const CASCADE = 57503
const NO = 57504
const ACTION = 57505
const PERMISSIVE = 57506
const RESTRICTIVE = 57507
const PUBLIC = 57508
const CURRENT_USER = 57509
const SESSION_USER = 57510
const PAD_INDEX = 57511
const FILLFACTOR = 57512
const IGNORE_DUP_KEY = 57513
const STATISTICS_NORECOMPUTE = 57514
const STATISTICS_INCREMENTAL = 57515
const ALLOW_ROW_LOCKS = 57516
const ALLOW_PAGE_LOCKS = 57517
const DISTANCE = 57518
const M = 57519
const EUCLIDEAN = 57520
const COSINE = 57521
const BEFORE = 57522
const AFTER = 57523
const EACH = 57524
const ROW = 57525
const SCROLL = 57526
const CURSOR = 57527
const OPEN = 57528
const CLOSE = 57529
const FETCH = 57530
const PRIOR = 57531
const FIRST = 57532
const LAST = 57533
const DEALLOCATE = 57534
const INSTEAD = 57535
const OF = 57536
const OUTPUT = 57537
const HANDLER = 57538
const CONTINUE = 57539
const EXIT = 57540
const SQLEXCEPTION = 57541
const SQLWARNING = 57542
const SQLSTATE = 57543
const FOUND = 57544
const DEFERRABLE = 57545
const INITIALLY = 57546
const IMMEDIATE = 57547
const DEFERRED = 57548
const CONCURRENTLY = 57549
const ASYNC = 57550
const SQL = 57551
const SECURITY = 57552
const BEGIN = 57553
const START = 57554
const TRANSACTION = 57555
const COMMIT = 57556
const ROLLBACK = 57557
const BIT = 57558
const TINYINT = 57559
const SMALLINT = 57560
const SMALLSERIAL = 57561
const MEDIUMINT = 57562
const INT = 57563
const INTEGER = 57564
const SERIAL = 57565
const BIGINT = 57566
const BIGSERIAL = 57567
const INTNUM = 57568
const REAL = 57569
const DOUBLE = 57570
const PRECISION = 57571
const FLOAT_TYPE = 57572
const DECIMAL = 57573
const NUMERIC = 57574
const SMALLMONEY = 57575
const MONEY = 57576
const TIME = 57577
const TIMESTAMP = 57578
const DATETIME = 57579
const YEAR = 57580
const DATETIMEOFFSET = 57581
const DATETIME2 = 57582
const SMALLDATETIME = 57583
const CHAR = 57584
const VARCHAR = 57585
const VARYING = 57586
const BOOL = 57587
const CHARACTER = 57588
const VARBINARY = 57589
const NCHAR = 57590
const NVARCHAR = 57591
const NTEXT = 57592
const UUID = 57593
const TEXT = 57594
const TINYTEXT = 57595
const MEDIUMTEXT = 57596
const LONGTEXT = 57597
const CITEXT = 57598
const TSTZRANGE = 57599
const TSRANGE = 57600
const INT4RANGE = 57601
const INT8RANGE = 57602
const NUMRANGE = 57603
const DATERANGE = 57604
const BLOB = 57605
const TINYBLOB = 57606
const MEDIUMBLOB = 57607
const LONGBLOB = 57608
const JSON = 57609
const JSONB = 57610
const ENUM = 57611
const GEOMETRY = 57612
const POINT = 57613
const LINESTRING = 57614
const POLYGON = 57615
const GEOMETRYCOLLECTION = 57616
const MULTIPOINT = 57617
const MULTILINESTRING = 57618
const MULTIPOLYGON = 57619
const VECTOR = 57620
const VARIADIC = 57621
const ARRAY = 57622
const NOW = 57623
const GETDATE = 57624
const BPCHAR = 57625
const TEXT_PATTERN_OPS = 57626
const NULLX = 57627
const AUTO_INCREMENT = 57628
const APPROXNUM = 57629
const SIGNED = 57630
const UNSIGNED = 57631
const ZEROFILL = 57632
const ZONE = 57633
const AUTOINCREMENT = 57634
const DATABASES = 57635
const TABLES = 57636
const VSCHEMA_TABLES = 57637
const EXTENDED = 57638
const FULL = 57639
const PROCESSLIST = 57640
const NAMES = 57641
const CHARSET = 57642
const GLOBAL = 57643
const SESSION = 57644
const ISOLATION = 57645
const LEVEL = 57646
const READ = 57647
const WRITE = 57648
const ONLY = 57649
const REPEATABLE = 57650
const COMMITTED = 57651
const UNCOMMITTED = 57652
const SERIALIZABLE = 57653
const NEW = 57654
const CONCAT_NULL_YIELDS_NULL = 57655
const CURSOR_CLOSE_ON_COMMIT = 57656
const QUOTED_IDENTIFIER = 57657
const ARITHABORT = 57658
const FMTONLY = 57659
const NOCOUNT = 57660
const NOEXEC = 57661
const NUMERIC_ROUNDABORT = 57662
const ANSI_DEFAULTS = 57663
const ANSI_NULL_DFLT_OFF = 57664
const ANSI_NULL_DFLT_ON = 57665
const ANSI_NULLS = 57666
const ANSI_PADDING = 57667
const ANSI_WARNINGS = 57668
const FORCEPLAN = 57669
const SHOWPLAN_ALL = 57670
const SHOWPLAN_TEXT = 57671
const SHOWPLAN_XML = 57672
const IMPLICIT_TRANSACTIONS = 57673
const REMOTE_PROC_TRANSACTIONS = 57674
const XACT_ABORT = 57675
const CURRENT_TIMESTAMP = 57676
const DATABASE = 57677
const CURRENT_DATE = 57678
const CURRENT_TIME = 57679
const LOCALTIME = 57680
const LOCALTIMESTAMP = 57681
const UTC_DATE = 57682
const UTC_TIME = 57683
const UTC_TIMESTAMP = 57684
const REPLACE = 57685
const CONVERT = 57686
const CAST = 57687
const SUBSTR = 57688
const SUBSTRING = 57689
const GROUP_CONCAT = 57690
const SEPARATOR = 57691
const INHERIT = 57692
const LEAD = 57693
const LAG = 57694
const MATCH = 57695
const AGAINST = 57696
const BOOLEAN = 57697
const LANGUAGE = 57698
const WITH = 57699
const WITHOUT = 57700
const PARSER = 57701
const QUERY = 57702
const EXPANSION = 57703
const UNUSED = 57704
const VIRTUAL = 57705
const STORED = 57706
const GENERATED = 57707
const ALWAYS = 57708
const IDENTITY = 57709
const SEQUENCE = 57710
const INCREMENT = 57711
const MINVALUE = 57712
const CACHE = 57713
const CYCLE = 57714
const OWNED = 57715
const NONE = 57716
const CLUSTERED = 57717
const NONCLUSTERED = 57718
const REPLICATION = 57719
const COLUMNSTORE = 57720
const INCLUDE = 57721
const HOLDLOCK = 57722
const NOLOCK = 57723
const NOWAIT = 57724
const PAGLOCK = 57725
const ROWLOCK = 57726
const TABLOCK = 57727
const UPDLOCK = 57728
const READUNCOMMITTED = 57729
const DEFINER = 57730
const INVOKER = 57731
const TYPECAST = 57732
const CHECK = 57733
const OVER = 57734

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"GRANT",
	"REVOKE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"EXTENSION",
	"EXCLUDE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"HANDLER",
	"CONTINUE",
	"EXIT",
	"SQLEXCEPTION",
	"SQLWARNING",
	"SQLSTATE",
	"FOUND",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"ASYNC",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"TSTZRANGE",
	"TSRANGE",
	"INT4RANGE",
	"INT8RANGE",
	"NUMRANGE",
	"DATERANGE",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 9,
	136, 554,
	-2, 257,
	-1, 205,
	123, 972,
	-2, 966,
	-1, 206,
	123, 973,
	-2, 886,
	-1, 471,
	123, 976,
	-2, 970,
	-1, 472,
	123, 973,
	-2, 971,
	-1, 508,
	61, 523,
	-2, 520,
	-1, 538,
	123, 974,
	-2, 370,
	-1, 682,
	123, 974,
	-2, 370,
	-1, 703,
	297, 983,
	-2, 874,
	-1, 757,
	297, 983,
	-2, 602,
	-1, 793,
	5, 59,
	-2, 26,
	-1, 799,
	5, 59,
	-2, 28,
	-1, 957,
	297, 983,
	-2, 602,
	-1, 1133,
	297, 983,
	-2, 458,
	-1, 1210,
	297, 983,
	-2, 602,
	-1, 1274,
	297, 983,
	-2, 874,
	-1, 1396,
	5, 60,
	-2, 736,
	-1, 1490,
	5, 59,
	-2, 27,
	-1, 1506,
	202, 87,
	-2, 658,
	-1, 1544,
	297, 983,
	-2, 237,
	-1, 1545,
	297, 983,
	-2, 237,
	-1, 1767,
	90, 968,
	-2, 956,
	-1, 1870,
	57, 73,
	59, 73,
	-2, 75,
	-1, 2058,
	5, 59,
	-2, 925,
	-1, 2083,
	5, 59,
	-2, 82,
	-1, 2128,
	59, 1119,
	60, 1119,
	-2, 588,
	-1, 2170,
	5, 60,
	-2, 926,
	-1, 2204,
	5, 59,
	-2, 928,
	-1, 2226,
	5, 60,
	-2, 929,
}

const yyPrivate = 57344

const yyLast = 13327

var yyAct = [...]int16{
	684, 1977, 665, 2076, 2179, 2121, 1995, 694, 2127, 2122,
	806, 39, 39, 42, 1225, 1892, 2045, 2118, 191, 2003,
	1905, 1978, 2081, 1186, 201, 202, 1727, 203, 214, 216,
	896, 1957, 1761, 1880, 1247, 1261, 1248, 1904, 1735, 2068,
	1970, 1259, 785, 1262, 1746, 1241, 740, 1513, 1036, 240,
	1758, 1754, 1303, 1508, 1742, 1479, 1306, 834, 1484, 1890,
	1071, 574, 1779, 1132, 1061, 1305, 1745, 37, 1398, 1023,
	1304, 1617, 441, 668, 183, 1108, 1389, 746, 1183, 1062,
	1626, 983, 1163, 1051, 923, 443, 425, 445, 1085, 408,
	663, 655, 242, 639, 939, 618, 1244, 1012, 504, 371,
	500, 461, 617, 336, 509, 664, 219, 535, 462, 537,
	1160, 366, 1245, 544, 375, 391, 585, 582, 1654, 561,
	1008, 1126, 15, 1461, 1471, 895, 647, 410, 211, 1218,
	208, 1857, 747, 457, 458, 980, 850, 646, 648, 1219,
	406, 852, 470, 221, 1460, 728, 840, 875, 44, 731,
	1203, 1835, 1341, 852, 2227, 784, 931, 2040, 510, 511,
	676, 2159, 864, 863, 873, 874, 866, 867, 868, 869,
	870, 871, 872, 865, 865, 2224, 875, 875, 222, 223,
	1649, 1689, 1690, 1191, 1192, 533, 229, 231, 2106, 966,
	1350, 2077, 246, 246, 246, 246, 326, 330, 331, 2217,
	1349, 1724, 354, 194, 2158, 864, 863, 873, 874, 866,
	867, 868, 869, 870, 871, 872, 865, 178, 744, 875,
	385, 205, 1668, 538, 539, 540, 542, 39, 44, 741,
	193, 368, 545, 543, 553, 554, 363, 364, 362, 191,
	179, 409, 180, 1378, 302, 302, 302, 302, 306, 306,
	306, 306, 586, 587, 1818, 2105, 853, 305, 305, 305,
	305, 1179, 303, 303, 303, 303, 859, 224, 853, 862,
	541, 1345, 2152, 2153, 742, 877, 878, 879, 880, 881,
	882, 883, 552, 860, 861, 858, 884, 885, 886, 887,
	864, 863, 873, 874, 866, 867, 868, 869, 870, 871,
	872, 865, 1716, 387, 875, 332, 1906, 334, 1907, 379,
	178, 378, 2151, 382, 383, 386, 1801, 178, 2014, 2015,
	346, 380, 388, 2013, 995, 1052, 1053, 994, 563, 450,
	451, 412, 1815, 179, 549, 180, 551, 550, 910, 1661,
	179, 419, 180, 1715, 39, 246, 1002, 416, 426, 851,
	850, 1173, 427, 428, 429, 430, 418, 471, 1652, 476,
	488, 489, 1204, 851, 850, 2094, 39, 852, 2093, 776,
	775, 2095, 1834, 855, 1836, 181, 444, 851, 850, 503,
	1415, 852, 1413, 510, 511, 796, 2023, 1276, 1265, 1264,
	1813, 855, 649, 523, 474, 852, 1494, 302, 44, 1266,
	1206, 306, 190, 333, 2026, 198, 1423, 555, 1924, 507,
	305, 469, 1267, 36, 2090, 303, 851, 850, 864, 863,
	873, 874, 866, 867, 868, 869, 870, 871, 872, 865,
	2027, 2041, 875, 496, 852, 876, 864, 863, 873, 874,
	866, 867, 868, 869, 870, 871, 872, 865, 1757, 594,
	875, 854, 2099, 2098, 608, 466, 1898, 1756, 547, 552,
	851, 850, 384, 854, 876, 876, 2024, 2022, 181, 610,
	1920, 1653, 176, 177, 1493, 181, 44, 44, 852, 613,
	614, 1539, 853, 619, 508, 619, 1342, 1343, 475, 578,
	579, 580, 581, 199, 876, 39, 853, 1058, 1240, 1072,
	640, 527, 566, 388, 1627, 1628, 569, 876, 572, 573,
	853, 549, 546, 551, 550, 967, 591, 733, 1350, 1971,
	1260, 730, 802, 803, 2201, 1895, 44, 1611, 557, 556,
	1272, 868, 869, 870, 871, 872, 865, 555, 1827, 875,
	817, 426, 638, 1278, 1279, 846, 1009, 1923, 1033, 853,
	584, 588, 532, 1274, 1172, 837, 239, 517, 1405, 818,
	1404, 211, 636, 208, 1632, 176, 177, 548, 843, 367,
	1811, 609, 176, 177, 2104, 381, 518, 1392, 516, 526,
	851, 850, 1268, 1269, 1271, 626, 525, 622, 1270, 831,
	831, 855, 876, 853, 520, 387, 787, 505, 852, 620,
	625, 506, 422, 514, 515, 424, 650, 637, 1933, 807,
	651, 855, 39, 812, 388, 646, 1031, 619, 327, 729,
	808, 750, 619, 44, 727, 819, 1691, 1684, 761, 1509,
	1510, 764, 855, 1755, 767, 768, 39, 1344, 734, 732,
	353, 369, 546, 794, 743, 794, 745, 1540, 1541, 1542,
	178, 851, 850, 387, 640, 763, 864, 863, 873, 874,
	866, 867, 868, 869, 870, 871, 872, 865, 642, 852,
	875, 44, 388, 179, 185, 180, 2218, 854, 44, 811,
	873, 874, 866, 867, 868, 869, 870, 871, 872, 865,
	186, 854, 875, 2114, 1627, 1628, 848, 548, 1839, 835,
	836, 838, 839, 824, 794, 854, 1967, 796, 624, 798,
	44, 809, 386, 853, 810, 220, 805, 1016, 627, 813,
	876, 820, 234, 236, 815, 386, 184, 793, 821, 799,
	235, 616, 1695, 890, 851, 850, 482, 807, 876, 1277,
	510, 511, 1672, 602, 854, 1697, 200, 964, 246, 323,
	324, 325, 852, 844, 894, 2080, 786, 2079, 230, 513,
	911, 39, 211, 2078, 208, 641, 197, 1996, 1998, 196,
	944, 1895, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187,
	195, 228, 787, 999, 853, 213, 328, 329, 854, 1968,
	215, 787, 807, 640, 628, 1692, 485, 975, 1751, 2173,
	302, 2043, 1006, 1909, 306, 1701, 337, 211, 181, 208,
	945, 1207, 44, 305, 233, 619, 914, 1030, 303, 899,
	900, 1032, 1868, 913, 209, 990, 760, 876, 989, 640,
	611, 1809, 855, 960, 962, 1007, 982, 987, 988, 794,
	851, 850, 414, 1064, 413, 345, 662, 730, 640, 343,
	546, 178, 971, 1997, 211, 246, 208, 741, 852, 991,
	1714, 993, 576, 575, 493, 770, 1086, 853, 933, 934,
	935, 936, 937, 938, 179, 492, 180, 864, 863, 873,
	874, 866, 867, 868, 869, 870, 871, 872, 865, 2096,
	1069, 875, 232, 363, 491, 1114, 178, 1454, 2066, 1908,
	1123, 1123, 742, 1364, 1080, 176, 177, 302, 854, 1125,
	1029, 306, 1026, 1893, 39, 39, 851, 850, 1829, 179,
	305, 180, 1050, 1014, 771, 303, 363, 471, 1165, 944,
	1363, 1362, 1087, 794, 852, 1055, 44, 998, 218, 794,
	1059, 1361, 786, 178, 794, 1068, 1005, 1164, 1065, 1092,
	1432, 786, 1693, 1694, 1696, 1698, 1699, 1360, 876, 1359,
	1358, 1357, 1187, 1090, 1091, 1089, 179, 741, 180, 945,
	1146, 1112, 44, 853, 1139, 1356, 2004, 1355, 1353, 854,
	876, 1127, 1128, 1137, 338, 339, 1205, 1864, 1138, 894,
	1121, 1124, 2007, 1865, 1129, 1130, 1670, 340, 1242, 1164,
	1159, 1157, 1158, 502, 787, 787, 1076, 1078, 1079, 181,
	350, 1060, 742, 348, 1077, 1195, 217, 1187, 349, 347,
	1056, 1806, 855, 1120, 352, 1243, 355, 356, 44, 1282,
	342, 1057, 1109, 361, 1110, 1181, 502, 1184, 1185, 1489,
	1239, 851, 850, 14, 1054, 502, 1639, 1638, 632, 853,
	2150, 630, 1229, 1211, 181, 1212, 522, 1637, 633, 852,
	1199, 631, 854, 851, 850, 1197, 855, 640, 864, 863,
	873, 874, 866, 867, 868, 869, 870, 871, 872, 865,
	1833, 852, 875, 1347, 866, 867, 868, 869, 870, 871,
	872, 865, 513, 1182, 875, 748, 749, 1086, 9, 12,
	13, 181, 1941, 1088, 10, 11, 176, 177, 1822, 1373,
	521, 864, 863, 873, 874, 866, 867, 868, 869, 870,
	871, 872, 865, 1390, 965, 875, 449, 2008, 2006, 2005,
	1821, 455, 571, 459, 460, 1370, 570, 501, 1365, 1399,
	467, 1400, 1401, 851, 850, 477, 1618, 1673, 1618, 1771,
	481, 176, 177, 483, 1629, 1391, 486, 487, 1620, 1220,
	1221, 852, 502, 1087, 786, 786, 1616, 1619, 854, 1619,
	1379, 1380, 1381, 1444, 853, 1443, 1442, 1441, 1385, 876,
	864, 863, 873, 874, 866, 867, 868, 869, 870, 871,
	872, 865, 978, 1440, 875, 1439, 853, 567, 176, 177,
	911, 529, 977, 1438, 1437, 1205, 567, 567, 39, 997,
	996, 1411, 969, 592, 590, 589, 560, 787, 640, 912,
	2089, 471, 44, 1354, 1206, 1410, 1412, 992, 512, 44,
	685, 1122, 683, 687, 688, 689, 690, 634, 513, 1429,
	686, 691, 2088, 912, 854, 1431, 593, 1913, 583, 564,
	1452, 598, 599, 600, 528, 1882, 1885, 1886, 1887, 1883,
	1470, 1884, 1888, 452, 44, 2069, 2070, 1506, 44, 1535,
	1536, 1537, 794, 1351, 1544, 1127, 853, 44, 513, 1912,
	794, 44, 1459, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
	1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
	1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
	1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
	1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
	1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
	1282, 640, 640, 1499, 1488, 1468, 1467, 1612, 1477, 1486,
	1464, 1615, 1476, 1465, 1466, 1462, 1487, 1497, 44, 1546,
	615, 1502, 1503, 1504, 1490, 1511, 44, 1009, 490, 854,
	876, 1640, 1469, 640, 735, 1113, 1187, 786, 1024, 855,
	1500, 769, 876, 1607, 1608, 2211, 2210, 1024, 2209, 1450,
	2196, 854, 2146, 855, 751, 788, 789, 726, 1614, 1645,
	2172, 855, 757, 758, 759, 804, 1450, 2107, 828, 2030,
	796, 2111, 855, 876, 725, 1642, 1877, 855, 828, 1926,
	828, 1925, 1024, 1846, 1633, 1634, 1450, 1798, 822, 1621,
	1622, 1623, 1624, 1625, 724, 1644, 1641, 2056, 828, 1796,
	1874, 723, 2057, 1369, 1795, 1631, 1792, 1791, 797, 1636,
	797, 1685, 828, 1786, 828, 1785, 855, 1146, 828, 1705,
	1943, 1139, 513, 1648, 1677, 1678, 1675, 1676, 1656, 652,
	1137, 854, 828, 1643, 807, 1138, 1146, 1655, 1200, 855,
	1139, 1658, 876, 519, 1708, 1662, 1875, 1663, 1873, 1137,
	1450, 1449, 1942, 1635, 1138, 1660, 845, 828, 1376, 1369,
	1368, 1719, 828, 1224, 1958, 889, 891, 892, 893, 897,
	1024, 1223, 39, 1024, 1190, 1733, 902, 902, 902, 902,
	902, 902, 902, 2119, 513, 1820, 2065, 211, 1974, 208,
	1873, 757, 1118, 855, 828, 1070, 1738, 1737, 1736, 1772,
	828, 827, 915, 916, 917, 918, 919, 920, 921, 922,
	1669, 925, 2065, 927, 928, 929, 930, 932, 932, 932,
	932, 932, 932, 932, 1744, 956, 957, 958, 959, 1718,
	780, 779, 773, 774, 1876, 1780, 1780, 1740, 1749, 1764,
	773, 772, 1000, 1784, 1770, 238, 237, 1958, 1741, 1704,
	1726, 1683, 1682, 1703, 1681, 1730, 1472, 1015, 1680, 796,
	1877, 1711, 1679, 1674, 1709, 1710, 1009, 1728, 1781, 1729,
	640, 640, 1497, 1548, 1475, 1474, 178, 1782, 1457, 1377,
	863, 873, 874, 866, 867, 868, 869, 870, 871, 872,
	865, 2203, 1456, 875, 757, 1200, 1427, 1425, 211, 179,
	208, 180, 1222, 1877, 797, 1492, 1215, 1450, 1025, 1647,
	1200, 513, 1787, 1788, 1214, 1213, 1777, 864, 863, 873,
	874, 866, 867, 868, 869, 870, 871, 872, 865, 206,
	1280, 875, 1196, 607, 796, 1001, 979, 973, 970, 777,
	43, 43, 607, 606, 1426, 1424, 607, 192, 766, 765,
	762, 227, 2065, 2168, 226, 212, 657, 225, 1118, 1877,
	226, 1450, 39, 2012, 902, 902, 1901, 902, 902, 902,
	902, 902, 902, 902, 902, 902, 902, 902, 902, 902,
	902, 902, 1752, 1802, 1717, 1200, 513, 178, 1406, 814,
	1024, 828, 968, 778, 1793, 1794, 842, 841, 797, 1828,
	1830, 1831, 1832, 513, 897, 1825, 1826, 1824, 2141, 897,
	179, 2139, 180, 1897, 2102, 246, 782, 781, 2069, 2070,
	39, 1944, 416, 1789, 442, 1610, 1866, 1911, 1609, 811,
	1473, 1436, 446, 1478, 181, 1855, 1854, 1882, 1885, 1886,
	1887, 1883, 1375, 1884, 1888, 1282, 1372, 1371, 1340, 1862,
	640, 1928, 794, 1217, 1216, 1194, 1871, 1180, 1179, 1178,
	1856, 1889, 1177, 1176, 1899, 1917, 1896, 302, 1175, 1188,
	1902, 306, 1174, 1066, 1028, 1004, 1003, 961, 847, 1915,
	305, 1840, 792, 791, 1749, 303, 790, 1764, 1919, 1843,
	756, 1863, 1927, 755, 1847, 1848, 1210, 753, 736, 1497,
	1859, 1929, 653, 1497, 1729, 595, 534, 530, 499, 447,
	448, 612, 1728, 439, 432, 431, 420, 1230, 17, 2119,
	1346, 212, 212, 212, 212, 2072, 1453, 783, 629, 597,
	596, 176, 177, 454, 1945, 453, 1946, 363, 358, 1979,
	341, 335, 187, 1989, 2075, 181, 1722, 1987, 1990, 212,
	2074, 1728, 1988, 1986, 1985, 212, 43, 212, 212, 1738,
	1963, 2009, 39, 1964, 212, 1234, 1235, 2197, 192, 1966,
	39, 1973, 1991, 2157, 1886, 1887, 1956, 1187, 1799, 1851,
	1930, 876, 1992, 1981, 1982, 1646, 1984, 926, 498, 902,
	902, 902, 1975, 794, 2010, 1480, 902, 902, 902, 902,
	2021, 2011, 1914, 577, 1980, 1187, 1749, 1983, 739, 2166,
	1481, 1749, 1749, 1749, 1749, 1749, 1916, 1052, 1053, 876,
	480, 479, 478, 468, 360, 1749, 359, 1756, 2042, 1764,
	1238, 1961, 2020, 738, 1210, 605, 1497, 2019, 1845, 1859,
	902, 603, 176, 177, 1850, 211, 1231, 208, 1018, 1232,
	1019, 1020, 1021, 601, 344, 1161, 2001, 212, 1900, 1783,
	2082, 1226, 212, 1017, 212, 212, 1166, 1022, 801, 2064,
	645, 212, 794, 472, 212, 212, 212, 1120, 2050, 2164,
	1706, 212, 1949, 2073, 212, 1837, 1712, 212, 212, 1227,
	1859, 2, 1749, 2091, 2062, 43, 1009, 2163, 2113, 1472,
	463, 464, 465, 794, 39, 1776, 1775, 188, 1749, 1774,
	2097, 35, 1773, 1688, 1687, 644, 643, 363, 2120, 1979,
	2129, 2082, 621, 182, 484, 2123, 363, 1367, 1979, 1932,
	2219, 1713, 212, 2130, 178, 1729, 212, 797, 1366, 1547,
	524, 1961, 2049, 2132, 212, 797, 2009, 2136, 1738, 1738,
	1737, 1736, 2116, 2117, 1011, 1013, 2058, 179, 2061, 180,
	2063, 794, 1872, 1187, 816, 2147, 1027, 1, 1512, 19,
	18, 2108, 2044, 456, 1951, 2086, 1397, 212, 909, 680,
	1545, 1955, 212, 212, 212, 2025, 2156, 2083, 2161, 1922,
	666, 2178, 2084, 2002, 1507, 1753, 1728, 849, 2167, 1505,
	807, 1538, 1630, 807, 807, 807, 559, 2192, 2175, 2115,
	2177, 393, 1455, 2188, 2189, 2190, 531, 21, 1723, 829,
	1491, 2191, 800, 604, 43, 2110, 1613, 1034, 830, 376,
	365, 823, 494, 2129, 2207, 189, 2123, 16, 2202, 1352,
	377, 2206, 2133, 374, 2149, 2125, 2130, 2134, 373, 2135,
	372, 2208, 1797, 403, 370, 2199, 562, 411, 2215, 406,
	407, 417, 251, 2032, 253, 252, 212, 250, 249, 2220,
	1859, 2123, 245, 794, 243, 244, 2222, 241, 1759, 2223,
	363, 2225, 1979, 1910, 394, 2047, 2048, 623, 1497, 1202,
	888, 2092, 181, 1766, 2126, 1483, 2162, 902, 902, 401,
	2112, 389, 1430, 1162, 667, 1075, 679, 794, 678, 390,
	677, 211, 1842, 208, 1844, 2055, 2176, 857, 1748, 1867,
	1849, 1881, 1497, 1879, 1878, 212, 212, 212, 1961, 2071,
	2067, 902, 902, 902, 902, 1747, 212, 1817, 1729, 2039,
	1233, 43, 1721, 642, 1273, 1263, 205, 1010, 208, 1236,
	8, 1275, 1258, 7, 205, 6, 208, 2204, 5, 212,
	2100, 2101, 1743, 4, 1257, 43, 1256, 1729, 1700, 1255,
	397, 1254, 392, 402, 1252, 1947, 1253, 1250, 1251, 1249,
	1228, 795, 399, 398, 3, 0, 205, 0, 208, 176,
	177, 2221, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 536, 0, 0, 205, 1931, 538, 539, 540, 542,
	796, 1750, 1276, 1265, 1264, 545, 543, 553, 554, 0,
	0, 0, 0, 179, 1266, 180, 901, 903, 904, 905,
	906, 907, 908, 0, 204, 178, 211, 1267, 208, 0,
	641, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 1952, 541, 0, 0, 1953, 1954, 179, 0,
	180, 0, 0, 0, 0, 0, 179, 0, 180, 0,
	0, 0, 0, 0, 0, 178, 415, 212, 0, 421,
	0, 0, 423, 851, 850, 0, 0, 0, 0, 0,
	43, 1734, 0, 178, 0, 0, 0, 0, 179, 0,
	180, 852, 0, 0, 0, 433, 434, 435, 436, 437,
	351, 212, 438, 212, 0, 0, 179, 0, 180, 1790,
	212, 0, 440, 0, 0, 178, 0, 0, 212, 0,
	0, 395, 0, 0, 2028, 2029, 0, 396, 0, 0,
	0, 0, 0, 1823, 0, 1260, 0, 692, 179, 0,
	180, 0, 0, 0, 0, 1272, 902, 985, 181, 211,
	0, 208, 0, 194, 0, 0, 0, 0, 1278, 1279,
	0, 0, 207, 210, 357, 1816, 0, 0, 1274, 0,
	0, 0, 0, 0, 212, 0, 0, 0, 44, 0,
	193, 0, 0, 181, 0, 0, 0, 0, 0, 1869,
	1870, 181, 0, 0, 0, 0, 0, 1268, 1269, 1271,
	404, 34, 405, 1270, 1081, 0, 853, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
	1106, 1107, 1739, 181, 0, 0, 400, 568, 0, 0,
	0, 547, 552, 472, 43, 0, 0, 0, 178, 0,
	0, 181, 0, 557, 556, 176, 177, 1891, 0, 0,
	0, 0, 0, 0, 0, 0, 27, 29, 0, 22,
	0, 179, 0, 180, 0, 0, 0, 178, 0, 0,
	0, 0, 23, 181, 28, 0, 32, 0, 0, 0,
	176, 177, 0, 0, 549, 0, 551, 550, 176, 177,
	179, 0, 180, 0, 24, 25, 0, 0, 0, 0,
	0, 557, 556, 902, 0, 0, 902, 0, 902, 0,
	902, 0, 902, 902, 0, 0, 0, 1972, 0, 0,
	176, 177, 1976, 212, 212, 0, 0, 0, 0, 248,
	248, 248, 248, 0, 0, 0, 0, 0, 176, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 1302, 0,
	0, 0, 0, 0, 1277, 0, 0, 210, 0, 752,
	754, 0, 0, 210, 0, 210, 210, 0, 0, 1750,
	176, 177, 210, 207, 1750, 1750, 1750, 1750, 1750, 0,
	0, 0, 2033, 0, 0, 0, 0, 0, 1891, 0,
	1999, 0, 0, 0, 0, 0, 181, 0, 0, 0,
	0, 854, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 20, 0, 0,
	0, 0, 0, 0, 0, 181, 0, 0, 1037, 1382,
	1383, 1384, 1049, 0, 0, 0, 0, 1386, 1387, 1388,
	0, 0, 1039, 0, 1281, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 1750, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 2059, 2060, 0,
	210, 1750, 210, 210, 0, 0, 0, 0, 0, 210,
	901, 473, 248, 473, 210, 0, 212, 0, 0, 210,
	0, 0, 210, 176, 177, 210, 210, 0, 797, 0,
	0, 0, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 30, 31, 0, 33, 0, 0,
	1038, 0, 176, 177, 0, 0, 0, 472, 796, 0,
	1276, 1265, 1264, 0, 0, 0, 212, 0, 0, 976,
	210, 0, 1266, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 565, 0, 2124, 1267, 797, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2142, 2143, 2144, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	210, 210, 210, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
	654, 0, 0, 1260, 0, 2124, 0, 0, 2205, 0,
	0, 0, 0, 1272, 558, 0, 0, 0, 737, 0,
	0, 1115, 1116, 1117, 1119, 0, 1278, 1279, 0, 0,
	0, 0, 0, 0, 0, 796, 1274, 1276, 1265, 1264,
	2124, 0, 797, 0, 0, 0, 0, 0, 0, 1266,
	0, 0, 0, 0, 0, 1167, 1168, 1169, 1170, 0,
	1171, 0, 1267, 0, 0, 1268, 1269, 1271, 0, 0,
	0, 1270, 0, 558, 210, 210, 0, 1650, 1651, 0,
	0, 0, 0, 0, 210, 1035, 972, 539, 540, 542,
	1498, 1189, 0, 0, 0, 545, 543, 553, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 1198, 0,
	1201, 1664, 1665, 1666, 1667, 1208, 1209, 1969, 0, 0,
	796, 0, 1276, 1265, 1264, 0, 0, 0, 0, 0,
	833, 0, 0, 541, 1266, 0, 0, 0, 0, 0,
	0, 0, 1237, 0, 856, 0, 0, 1267, 0, 0,
	898, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 212, 0, 0, 0, 0, 0,
	1260, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 924, 0, 1278, 1279, 1374, 0, 0, 0, 0,
	0, 0, 2193, 1274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1277, 963, 0, 248, 0, 0, 0, 0,
	0, 0, 1268, 1269, 1271, 986, 986, 986, 1270, 0,
	0, 1393, 1394, 0, 0, 0, 0, 0, 1396, 0,
	0, 0, 0, 0, 0, 1260, 0, 1402, 1403, 558,
	0, 210, 0, 0, 0, 1272, 0, 0, 558, 0,
	0, 0, 2165, 0, 0, 0, 210, 0, 1278, 1279,
	0, 0, 0, 1407, 1408, 0, 1409, 1428, 1274, 0,
	0, 0, 0, 1434, 1414, 0, 1416, 1417, 1418, 0,
	0, 1419, 1420, 0, 1421, 1422, 0, 0, 0, 1445,
	1446, 0, 1447, 1448, 0, 0, 1037, 1268, 1269, 1271,
	1049, 547, 552, 1270, 0, 0, 0, 1458, 0, 1063,
	1039, 0, 248, 1067, 0, 0, 1800, 0, 1073, 1074,
	0, 0, 1498, 0, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 0, 549, 0, 551, 550, 0, 0,
	0, 0, 0, 0, 0, 898, 0, 0, 0, 1277,
	898, 473, 0, 986, 986, 0, 0, 986, 986, 986,
	212, 212, 0, 207, 0, 1131, 1156, 0, 1038, 0,
	212, 212, 0, 796, 212, 1276, 1265, 1264, 0, 43,
	0, 0, 0, 0, 0, 0, 0, 1266, 0, 796,
	0, 1276, 1265, 1264, 986, 986, 986, 986, 0, 1968,
	1267, 0, 0, 1266, 1302, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1193, 0, 1267, 0, 0, 986,
	0, 0, 796, 0, 1276, 1265, 1264, 0, 0, 0,
	0, 0, 0, 0, 1277, 0, 1266, 0, 0, 0,
	0, 558, 558, 0, 0, 0, 851, 850, 0, 1267,
	0, 0, 0, 1934, 0, 0, 1935, 212, 1936, 0,
	1937, 0, 1938, 1939, 852, 0, 0, 0, 0, 0,
	0, 1860, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2194, 0, 0, 0, 212, 0,
	0, 0, 212, 212, 0, 851, 850, 212, 212, 212,
	212, 212, 0, 0, 0, 0, 0, 0, 1260, 212,
	0, 212, 0, 852, 0, 212, 0, 0, 1272, 0,
	0, 43, 0, 0, 1260, 0, 0, 0, 0, 43,
	0, 1278, 1279, 0, 1272, 0, 0, 0, 0, 1686,
	0, 1274, 796, 0, 1276, 1265, 1264, 1278, 1279, 0,
	0, 0, 0, 212, 0, 1702, 1266, 1274, 0, 0,
	0, 0, 0, 0, 0, 0, 1395, 1272, 0, 1267,
	1268, 1269, 1271, 0, 0, 1720, 1270, 0, 212, 853,
	1278, 1279, 0, 0, 0, 0, 1268, 1269, 1271, 0,
	1274, 0, 1270, 1348, 212, 1739, 0, 0, 986, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 1498, 1433, 0, 0, 851, 850, 0, 0, 1268,
	1269, 1271, 0, 0, 0, 1270, 0, 0, 853, 0,
	0, 0, 0, 852, 0, 0, 1451, 796, 986, 1276,
	1265, 1264, 0, 0, 1739, 473, 0, 0, 986, 0,
	0, 1266, 0, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 1267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 1485, 0, 1260, 0, 2131,
	0, 0, 0, 0, 0, 0, 0, 1272, 0, 0,
	1495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1278, 1279, 0, 0, 0, 0, 0, 0, 1501, 0,
	1274, 0, 0, 0, 0, 0, 0, 0, 210, 2148,
	1543, 0, 924, 0, 0, 0, 0, 1277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1268,
	1269, 1271, 0, 1277, 1803, 1270, 1804, 1805, 853, 0,
	0, 1807, 1808, 1810, 1812, 1814, 0, 796, 0, 1276,
	1265, 1264, 0, 0, 1778, 212, 0, 1407, 0, 0,
	0, 1266, 1260, 0, 854, 0, 1277, 796, 0, 1276,
	1265, 1264, 1272, 0, 1267, 0, 0, 0, 1838, 0,
	0, 1266, 2131, 1496, 0, 1278, 1279, 0, 0, 796,
	0, 1276, 1265, 1264, 1267, 1274, 0, 0, 0, 0,
	0, 0, 0, 1266, 0, 0, 0, 1063, 0, 1063,
	0, 0, 0, 854, 0, 0, 1267, 0, 0, 0,
	0, 0, 0, 0, 1268, 1269, 1271, 0, 0, 1732,
	1270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1659, 0, 0, 0, 0, 1246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1918,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1671, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1260, 0, 0, 0, 1277, 0, 0, 0,
	0, 0, 1272, 0, 0, 1940, 0, 0, 0, 0,
	0, 0, 1260, 0, 0, 1278, 1279, 0, 0, 0,
	1707, 0, 1272, 0, 0, 1274, 0, 0, 1950, 0,
	0, 0, 0, 0, 1260, 1278, 1279, 0, 0, 0,
	1725, 210, 210, 854, 1272, 1274, 0, 0, 0, 0,
	0, 0, 0, 0, 1268, 1269, 1271, 1278, 1279, 0,
	1270, 0, 0, 0, 0, 0, 0, 1274, 0, 0,
	0, 0, 0, 0, 1268, 1269, 1271, 0, 1994, 1498,
	1270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 898, 898, 0, 0, 1268, 1269, 1271, 1498,
	0, 0, 1270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2031, 0, 0, 0,
	0, 1498, 2034, 2035, 2036, 2037, 2038, 1549, 1550, 1551,
	1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
	1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571,
	1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581,
	1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
	1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601,
	1602, 1603, 1604, 1605, 1606, 0, 796, 0, 1276, 1265,
	1264, 0, 0, 0, 796, 0, 1276, 1265, 1264, 0,
	1266, 796, 0, 1276, 1265, 1264, 0, 0, 1266, 0,
	0, 1277, 0, 1267, 0, 1266, 0, 0, 0, 0,
	1819, 1267, 210, 0, 0, 0, 0, 2103, 1267, 0,
	0, 1277, 2109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 2085, 0, 0, 0, 0, 986,
	0, 1731, 0, 1852, 1853, 1485, 0, 0, 0, 2145,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 210,
	0, 1962, 0, 0, 0, 0, 0, 0, 210, 1894,
	0, 0, 248, 0, 0, 0, 0, 0, 2160, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 2169, 2170, 2171, 0, 0, 0, 0, 0,
	2174, 1260, 0, 0, 0, 940, 0, 955, 0, 1260,
	0, 1272, 0, 0, 0, 0, 1260, 0, 0, 1272,
	0, 0, 0, 0, 1278, 1279, 1272, 0, 0, 0,
	0, 0, 1278, 1279, 1274, 0, 0, 0, 0, 1278,
	1279, 0, 1274, 0, 942, 0, 0, 0, 0, 1274,
	0, 0, 0, 0, 0, 1948, 2212, 2213, 2214, 0,
	0, 0, 0, 1268, 1269, 1271, 0, 0, 0, 1270,
	0, 1268, 1269, 1271, 0, 0, 0, 1270, 1268, 1269,
	1271, 0, 0, 0, 1270, 1959, 210, 0, 0, 2226,
	210, 210, 0, 0, 207, 210, 210, 210, 210, 210,
	0, 0, 0, 2087, 0, 0, 0, 1993, 0, 210,
	0, 0, 0, 2000, 0, 0, 0, 0, 952, 308,
	309, 310, 311, 312, 313, 314, 315, 316, 0, 0,
	0, 0, 0, 949, 948, 0, 2018, 954, 1111, 943,
	0, 0, 0, 0, 951, 950, 0, 254, 941, 0,
	0, 210, 0, 947, 946, 0, 0, 796, 0, 1276,
	1265, 1264, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1266, 0, 0, 0, 0, 210, 2046, 0, 0,
	0, 0, 0, 0, 1267, 0, 0, 0, 0, 0,
	0, 0, 210, 2053, 0, 2054, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 0, 0, 0,
	1277, 0, 0, 0, 0, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 1277, 0, 0, 0, 2051,
	2052, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2155, 0, 0, 0, 207, 0, 0, 0, 1858, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 1260, 0, 2137, 0, 0, 2138, 0, 0,
	2140, 0, 1272, 0, 0, 0, 0, 0, 0, 1921,
	0, 0, 0, 0, 0, 1278, 1279, 0, 0, 0,
	0, 0, 0, 0, 2154, 1274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2046,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 0, 1268, 1269, 1271, 0, 0, 0,
	1270, 0, 0, 1894, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 150, 0, 109, 163, 77,
	97, 172, 99, 100, 135, 56, 118, 0, 94, 75,
	0, 2198, 898, 80, 49, 89, 50, 78, 111, 0,
	76, 0, 152, 121, 0, 0, 0, 170, 0, 126,
	0, 0, 0, 0, 0, 113, 154, 116, 145, 108,
	136, 65, 125, 165, 95, 131, 166, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 130, 160, 91, 62, 175, 0, 134, 48,
	128, 0, 0, 54, 57, 171, 158, 85, 84, 796,
	0, 1276, 1265, 1264, 0, 0, 112, 117, 141, 105,
	0, 0, 0, 1266, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 124, 0, 1267, 0, 61, 55,
	0, 110, 0, 0, 0, 64, 0, 82, 142, 0,
	45, 0, 0, 148, 155, 107, 0, 0, 159, 104,
	103, 1277, 0, 0, 0, 0, 0, 96, 41, 178,
	173, 0, 0, 162, 114, 153, 79, 90, 0, 86,
	0, 0, 0, 87, 88, 123, 137, 0, 0, 0,
	0, 2216, 179, 144, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 46, 83, 146,
	149, 69, 133, 58, 92, 139, 93, 115, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1260, 0, 0, 0, 0, 1760,
	0, 0, 0, 0, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 1279, 0,
	0, 0, 0, 0, 0, 0, 0, 1274, 0, 0,
	0, 0, 1768, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1268, 1269, 1271, 0,
	0, 0, 1270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 0, 0, 181, 52, 73,
	156, 0, 0, 0, 0, 1769, 1767, 1763, 1762, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 1765, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 72, 66, 67, 119, 120, 167, 168, 169, 143,
	63, 0, 70, 71, 0, 151, 0, 0, 0, 122,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 98, 47, 102, 0, 0, 0, 0, 0, 0,
	0, 59, 60, 0, 0, 106, 101, 127, 129, 138,
	147, 157, 164, 140, 176, 177, 161, 150, 0, 109,
	163, 77, 97, 172, 99, 100, 135, 56, 118, 0,
	94, 75, 0, 0, 0, 80, 49, 89, 50, 78,
	111, 0, 76, 0, 152, 121, 0, 0, 0, 170,
	0, 126, 0, 1277, 0, 0, 0, 113, 154, 116,
	145, 108, 136, 65, 125, 165, 95, 131, 166, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 160, 91, 62, 175, 0,
	134, 48, 128, 0, 0, 54, 57, 171, 158, 85,
	84, 796, 0, 1276, 1265, 1264, 0, 0, 112, 117,
	141, 105, 0, 0, 0, 1266, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 124, 0, 1267, 0,
	61, 55, 0, 110, 0, 0, 0, 64, 0, 82,
	142, 0, 45, 0, 0, 148, 155, 107, 0, 0,
	159, 104, 103, 0, 0, 0, 0, 0, 0, 96,
	41, 178, 173, 0, 0, 162, 114, 153, 79, 90,
	0, 86, 0, 0, 0, 87, 88, 123, 137, 0,
	0, 0, 0, 2200, 179, 144, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 46,
	83, 146, 149, 69, 133, 58, 92, 139, 93, 115,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1260, 0, 0, 0,
	0, 1903, 0, 0, 0, 0, 1272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	1279, 0, 0, 0, 0, 0, 0, 0, 0, 1274,
	0, 0, 0, 0, 1768, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1268, 1269,
	1271, 0, 0, 0, 1270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 0, 0, 181,
	52, 73, 156, 0, 0, 0, 0, 1769, 1767, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	1765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 72, 66, 67, 119, 120, 167, 168,
	169, 143, 63, 0, 70, 71, 0, 151, 0, 0,
	0, 122, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 98, 47, 102, 0, 0, 0, 0,
	0, 0, 0, 59, 60, 0, 0, 106, 101, 127,
	129, 138, 147, 157, 164, 140, 176, 177, 161, 150,
	0, 109, 163, 77, 97, 172, 99, 100, 135, 56,
	118, 0, 94, 75, 0, 0, 0, 80, 49, 89,
	50, 78, 111, 0, 76, 0, 152, 121, 0, 0,
	0, 170, 0, 126, 0, 1277, 0, 0, 0, 113,
	154, 116, 145, 108, 136, 65, 125, 165, 95, 131,
	166, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 160, 91, 62,
	175, 0, 134, 48, 128, 0, 0, 54, 57, 171,
	158, 85, 84, 796, 0, 1276, 1265, 1264, 0, 0,
	112, 117, 141, 105, 0, 0, 0, 1266, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 124, 0,
	1267, 0, 61, 55, 0, 110, 0, 0, 0, 64,
	0, 82, 142, 0, 45, 0, 0, 148, 155, 107,
	0, 0, 159, 104, 103, 0, 0, 0, 0, 0,
	0, 96, 41, 178, 173, 0, 0, 162, 114, 153,
	79, 90, 0, 86, 0, 0, 0, 87, 88, 123,
	137, 0, 0, 0, 0, 2195, 179, 144, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 46, 83, 146, 149, 69, 133, 58, 92, 139,
	93, 115, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1278, 1279, 0, 0, 0, 0, 0, 0, 0,
	0, 1274, 0, 0, 0, 0, 1768, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1268, 1269, 1271, 0, 0, 0, 1270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 181, 52, 73, 156, 0, 0, 0, 0, 1769,
	1767, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 1765, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 72, 66, 67, 119, 120,
	167, 168, 169, 143, 63, 0, 70, 71, 0, 151,
	0, 0, 0, 122, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 98, 47, 102, 0, 0,
	0, 0, 0, 0, 0, 59, 60, 0, 0, 106,
	101, 127, 129, 138, 147, 157, 164, 140, 176, 177,
	161, 150, 0, 109, 163, 77, 97, 172, 99, 100,
	135, 56, 118, 0, 94, 75, 0, 0, 0, 80,
	49, 89, 50, 78, 111, 0, 76, 0, 152, 121,
	0, 0, 0, 170, 0, 126, 0, 1277, 0, 0,
	0, 113, 154, 116, 145, 108, 136, 65, 125, 165,
	95, 131, 166, 0, 0, 0, 205, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 160,
	91, 62, 175, 0, 134, 48, 128, 0, 0, 54,
	57, 171, 158, 85, 84, 796, 0, 1276, 1265, 1264,
	0, 0, 112, 117, 141, 105, 0, 0, 0, 1266,
	0, 0, 0, 0, 0, 0, 1463, 0, 81, 0,
	124, 0, 1267, 0, 61, 55, 0, 110, 940, 0,
	955, 64, 0, 82, 142, 0, 45, 0, 0, 148,
	155, 107, 0, 0, 159, 104, 103, 0, 0, 0,
	0, 0, 0, 96, 41, 178, 173, 0, 0, 162,
	114, 153, 79, 90, 0, 86, 0, 942, 0, 87,
	88, 123, 137, 0, 0, 0, 0, 0, 179, 144,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 46, 83, 146, 149, 69, 133, 58,
	92, 139, 93, 115, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1272, 952, 308, 309, 310, 311, 312, 313, 314, 315,
	316, 0, 0, 1278, 1279, 0, 949, 948, 0, 0,
	954, 953, 943, 1274, 0, 0, 0, 951, 950, 0,
	254, 941, 0, 0, 0, 0, 947, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1268, 1269, 1271, 0, 0, 0, 1270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 0, 181, 52, 73, 156, 1246, 0, 0,
	0, 0, 40, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 72, 66, 67,
	119, 120, 167, 168, 169, 143, 63, 0, 70, 71,
	0, 151, 0, 0, 0, 122, 0, 0, 0, 174,
	255, 0, 0, 0, 0, 0, 0, 98, 47, 102,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 0,
	0, 106, 101, 127, 129, 138, 147, 157, 164, 140,
	176, 177, 161, 150, 0, 109, 163, 77, 97, 172,
	99, 100, 135, 56, 118, 0, 94, 75, 0, 0,
	0, 80, 49, 89, 50, 78, 111, 0, 76, 0,
	152, 121, 0, 0, 0, 170, 0, 126, 0, 1277,
	0, 0, 0, 113, 154, 116, 145, 108, 136, 65,
	125, 165, 95, 131, 166, 0, 0, 0, 44, 0,
	825, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	130, 160, 91, 62, 175, 0, 134, 48, 128, 0,
	0, 54, 57, 171, 158, 85, 84, 796, 0, 1276,
	1265, 1264, 0, 0, 112, 117, 141, 105, 0, 0,
	0, 1266, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 124, 0, 1267, 0, 61, 55, 0, 110,
	0, 0, 0, 64, 0, 82, 142, 0, 45, 0,
	0, 148, 155, 107, 0, 0, 159, 104, 103, 0,
	0, 0, 0, 0, 0, 96, 41, 178, 173, 0,
	0, 162, 114, 153, 79, 90, 0, 86, 0, 0,
	0, 87, 88, 123, 137, 0, 0, 0, 0, 0,
	179, 144, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 46, 83, 146, 149, 69,
	133, 58, 92, 139, 93, 115, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1965, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1272, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1278, 1279, 0, 0, 0,
	0, 0, 0, 0, 0, 1274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1268, 1269, 1271, 0, 0, 0,
	1270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 0, 0, 181, 52, 73, 156, 1739,
	0, 0, 0, 0, 40, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 72,
	66, 67, 119, 120, 167, 168, 169, 143, 63, 0,
	70, 71, 0, 151, 0, 0, 0, 122, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 98,
	47, 102, 0, 0, 0, 0, 0, 0, 0, 59,
	60, 0, 0, 106, 101, 127, 129, 138, 147, 157,
	164, 140, 176, 177, 161, 150, 0, 109, 163, 77,
	97, 172, 99, 100, 135, 56, 118, 0, 94, 75,
	0, 0, 0, 80, 49, 89, 50, 78, 111, 0,
	76, 0, 152, 121, 0, 0, 0, 170, 0, 126,
	0, 1277, 0, 0, 0, 113, 154, 116, 145, 108,
	136, 65, 125, 165, 95, 131, 166, 0, 495, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	497, 0, 130, 160, 91, 62, 175, 0, 134, 48,
	128, 0, 0, 54, 57, 171, 158, 85, 84, 796,
	0, 1276, 1265, 1264, 0, 0, 112, 117, 141, 105,
	0, 0, 0, 1266, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 124, 0, 1267, 0, 61, 55,
	0, 110, 0, 0, 0, 64, 0, 82, 142, 0,
	45, 0, 0, 148, 155, 107, 0, 0, 159, 104,
	103, 0, 0, 0, 0, 0, 0, 96, 41, 178,
	173, 0, 0, 162, 114, 153, 79, 90, 0, 86,
	0, 0, 0, 87, 88, 123, 137, 0, 0, 0,
	0, 1960, 179, 144, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 46, 83, 146,
	149, 69, 133, 58, 92, 139, 93, 115, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1260, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 1279, 0,
	0, 0, 0, 0, 0, 0, 0, 1274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1268, 1269, 1271, 0,
	0, 0, 1270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 0, 0, 181, 52, 73,
	156, 0, 0, 0, 0, 0, 40, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 72, 66, 67, 119, 120, 167, 168, 169, 143,
	63, 0, 70, 71, 0, 151, 0, 0, 0, 122,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 98, 47, 102, 0, 0, 0, 0, 0, 0,
	0, 59, 60, 0, 0, 106, 101, 127, 129, 138,
	147, 157, 164, 140, 176, 177, 161, 150, 0, 109,
	163, 77, 97, 172, 99, 100, 135, 56, 118, 0,
	94, 75, 0, 0, 0, 80, 49, 89, 50, 78,
	111, 0, 76, 0, 152, 121, 0, 0, 0, 170,
	0, 126, 0, 1277, 0, 0, 0, 113, 154, 116,
	145, 108, 136, 65, 125, 165, 95, 131, 166, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 160, 91, 62, 175, 0,
	134, 48, 128, 0, 0, 54, 57, 171, 158, 85,
	84, 796, 0, 1276, 1265, 1264, 0, 0, 112, 117,
	141, 105, 0, 0, 0, 1266, 0, 0, 0, 0,
	0, 0, 1841, 0, 81, 0, 124, 0, 1267, 0,
	61, 55, 0, 110, 0, 0, 0, 64, 0, 82,
	142, 0, 45, 0, 0, 148, 155, 107, 0, 0,
	159, 104, 103, 0, 0, 0, 0, 0, 0, 96,
	41, 178, 173, 0, 0, 162, 114, 153, 79, 90,
	0, 86, 0, 0, 0, 87, 88, 123, 137, 0,
	0, 0, 0, 1861, 179, 144, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 46,
	83, 146, 149, 69, 133, 58, 92, 139, 93, 115,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	1279, 0, 0, 0, 0, 0, 0, 0, 0, 1274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1268, 1269,
	1271, 0, 0, 0, 1270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 0, 0, 181,
	52, 73, 156, 0, 0, 0, 0, 0, 40, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 72, 66, 67, 119, 120, 167, 168,
	169, 143, 63, 0, 70, 71, 0, 151, 0, 0,
	0, 122, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 98, 47, 102, 0, 0, 0, 0,
	0, 0, 0, 59, 60, 0, 0, 106, 101, 127,
	129, 138, 147, 157, 164, 140, 176, 177, 161, 150,
	0, 109, 163, 77, 97, 172, 99, 100, 135, 56,
	118, 0, 94, 75, 0, 0, 0, 80, 49, 89,
	50, 78, 111, 0, 76, 0, 152, 121, 0, 0,
	0, 170, 0, 126, 0, 1277, 0, 0, 0, 113,
	154, 116, 145, 108, 136, 65, 125, 165, 95, 131,
	166, 0, 0, 0, 205, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 160, 91, 62,
	175, 0, 134, 48, 128, 0, 0, 54, 57, 171,
	158, 85, 84, 796, 0, 1276, 1265, 1264, 0, 0,
	112, 117, 141, 105, 0, 0, 0, 1266, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 124, 0,
	1267, 0, 61, 55, 0, 110, 0, 0, 0, 64,
	0, 82, 142, 0, 45, 0, 0, 148, 155, 107,
	0, 0, 159, 104, 103, 0, 0, 0, 0, 0,
	0, 96, 41, 178, 173, 0, 0, 162, 114, 153,
	79, 90, 0, 86, 0, 0, 0, 87, 88, 123,
	137, 0, 0, 0, 0, 0, 179, 144, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 46, 83, 146, 149, 69, 133, 58, 92, 139,
	93, 115, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1278, 1279, 0, 0, 0, 0, 0, 0, 0,
	0, 1274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1268, 1269, 1271, 0, 0, 0, 1270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 181, 52, 73, 156, 0, 0, 0, 0, 0,
	40, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 72, 66, 67, 119, 120,
	167, 168, 169, 143, 63, 0, 70, 71, 0, 151,
	0, 0, 0, 122, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 98, 47, 102, 0, 0,
	0, 0, 0, 0, 0, 59, 60, 0, 0, 106,
	101, 127, 129, 138, 147, 157, 164, 140, 176, 177,
	161, 150, 0, 109, 163, 77, 97, 172, 99, 100,
	135, 56, 118, 0, 94, 75, 0, 0, 0, 80,
	49, 89, 50, 78, 111, 0, 76, 0, 152, 121,
	0, 0, 0, 170, 0, 126, 0, 1277, 0, 0,
	0, 113, 154, 116, 145, 108, 136, 65, 125, 165,
	95, 131, 166, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 160,
	91, 62, 175, 0, 134, 48, 128, 0, 0, 54,
	57, 171, 158, 85, 84, 635, 0, 0, 0, 0,
	0, 0, 112, 117, 141, 105, 0, 0, 1657, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	124, 0, 0, 0, 61, 55, 0, 110, 0, 0,
	0, 64, 0, 82, 142, 0, 45, 0, 0, 148,
	155, 107, 0, 0, 159, 104, 103, 1135, 0, 0,
	0, 0, 0, 96, 41, 178, 173, 0, 0, 162,
	114, 153, 79, 90, 0, 86, 0, 0, 0, 87,
	88, 123, 137, 0, 0, 0, 0, 0, 179, 144,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 46, 83, 146, 149, 69, 133, 58,
	92, 139, 93, 115, 74, 0, 0, 0, 0, 0,
	0, 307, 308, 309, 310, 311, 312, 313, 314, 315,
	316, 0, 317, 1140, 0, 318, 319, 320, 322, 321,
	1144, 0, 1136, 0, 1148, 1147, 1149, 1134, 1151, 0,
	0, 0, 1155, 1152, 1154, 1153, 0, 1150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1141, 1142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1143, 1145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 0, 181, 52, 73, 156, 0, 0, 0,
	0, 0, 40, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 72, 66, 67,
	119, 120, 167, 168, 169, 143, 63, 0, 70, 71,
	0, 151, 0, 0, 0, 122, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 98, 47, 102,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 0,
	0, 106, 101, 127, 129, 138, 147, 157, 164, 140,
	176, 177, 161, 150, 0, 109, 163, 77, 97, 172,
	99, 100, 135, 56, 118, 0, 94, 75, 38, 0,
	0, 80, 49, 89, 50, 78, 111, 0, 76, 0,
	152, 121, 0, 0, 0, 170, 0, 126, 0, 0,
	0, 0, 0, 113, 154, 116, 145, 108, 136, 65,
	125, 165, 95, 131, 166, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 160, 91, 62, 175, 0, 134, 48, 128, 0,
	0, 54, 57, 171, 158, 85, 84, 0, 0, 0,
	0, 0, 0, 0, 112, 117, 141, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 124, 0, 0, 0, 61, 55, 0, 110,
	0, 0, 0, 64, 0, 82, 142, 0, 45, 0,
	0, 148, 155, 107, 0, 0, 159, 104, 103, 0,
	0, 0, 0, 0, 0, 96, 41, 178, 173, 0,
	0, 162, 114, 153, 79, 90, 0, 86, 0, 0,
	0, 87, 88, 123, 137, 0, 0, 0, 0, 0,
	179, 144, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 46, 83, 146, 149, 69,
	133, 58, 92, 139, 93, 115, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 0, 0, 181, 52, 73, 156, 0,
	0, 0, 0, 0, 40, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 72,
	66, 67, 119, 120, 167, 168, 169, 143, 63, 0,
	70, 71, 0, 151, 0, 0, 0, 122, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 98,
	47, 102, 0, 0, 0, 0, 0, 0, 0, 59,
	60, 0, 0, 106, 101, 127, 129, 138, 147, 157,
	164, 140, 176, 177, 161, 150, 0, 109, 163, 77,
	97, 172, 99, 100, 135, 56, 118, 0, 94, 75,
	0, 0, 0, 80, 49, 89, 50, 78, 111, 0,
	76, 0, 152, 121, 0, 0, 0, 170, 0, 126,
	0, 0, 0, 0, 0, 113, 154, 116, 145, 108,
	136, 65, 125, 165, 95, 131, 166, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 160, 91, 62, 175, 0, 134, 48,
	128, 0, 0, 54, 57, 171, 158, 85, 84, 0,
	0, 0, 0, 0, 0, 0, 112, 117, 141, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 124, 0, 0, 0, 61, 55,
	0, 110, 0, 0, 0, 64, 0, 82, 142, 0,
	45, 0, 0, 148, 155, 107, 0, 0, 159, 104,
	103, 0, 0, 0, 0, 0, 0, 96, 41, 178,
	173, 0, 0, 162, 114, 153, 79, 90, 0, 86,
	0, 0, 0, 87, 88, 123, 137, 0, 0, 0,
	0, 0, 179, 144, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 46, 83, 146,
	149, 69, 133, 58, 92, 139, 93, 115, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 0, 0, 181, 52, 73,
	156, 0, 0, 0, 0, 0, 40, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 72, 66, 67, 119, 120, 167, 168, 169, 143,
	63, 0, 70, 71, 0, 151, 0, 0, 0, 122,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 98, 47, 102, 0, 0, 0, 0, 0, 0,
	0, 59, 60, 0, 0, 106, 101, 127, 129, 138,
	147, 157, 164, 140, 176, 177, 161, 2128, 0, 109,
	163, 77, 97, 172, 99, 100, 135, 56, 118, 0,
	94, 75, 0, 0, 0, 80, 49, 89, 50, 78,
	111, 0, 76, 0, 152, 121, 0, 0, 0, 170,
	0, 126, 0, 0, 0, 0, 0, 113, 154, 116,
	145, 108, 136, 65, 125, 165, 95, 131, 166, 513,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 160, 91, 62, 175, 0,
	134, 48, 128, 0, 0, 54, 57, 171, 158, 85,
	84, 0, 0, 0, 0, 0, 0, 0, 112, 117,
	141, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 124, 0, 0, 0,
	61, 55, 0, 110, 0, 0, 0, 64, 0, 82,
	142, 0, 45, 0, 0, 148, 155, 107, 0, 0,
	159, 104, 103, 0, 0, 0, 0, 0, 0, 96,
	0, 178, 173, 0, 0, 162, 114, 153, 79, 90,
	0, 86, 0, 0, 0, 87, 88, 123, 137, 0,
	0, 0, 0, 0, 179, 144, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 46,
	83, 146, 149, 69, 133, 58, 92, 139, 93, 115,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 0, 0, 181,
	52, 73, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 72, 66, 67, 119, 120, 167, 168,
	169, 143, 63, 0, 70, 71, 0, 151, 0, 0,
	0, 122, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 98, 47, 102, 0, 0, 0, 0,
	0, 0, 0, 59, 60, 0, 0, 106, 101, 127,
	129, 138, 147, 157, 164, 140, 176, 177, 161, 150,
	0, 109, 163, 77, 97, 172, 99, 100, 135, 56,
	118, 0, 94, 75, 0, 0, 0, 80, 49, 89,
	50, 78, 111, 0, 76, 0, 152, 121, 0, 0,
	0, 170, 0, 126, 0, 0, 0, 0, 0, 113,
	154, 116, 145, 108, 136, 65, 125, 165, 95, 131,
	166, 0, 0, 0, 211, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 160, 91, 62,
	175, 0, 134, 48, 128, 0, 0, 54, 57, 171,
	158, 85, 84, 0, 0, 0, 0, 0, 0, 0,
	112, 117, 141, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 124, 0,
	0, 0, 61, 55, 0, 110, 0, 0, 0, 64,
	0, 82, 142, 0, 45, 0, 0, 148, 155, 107,
	0, 0, 159, 104, 103, 0, 0, 0, 0, 0,
	0, 96, 0, 178, 173, 0, 0, 162, 114, 153,
	79, 90, 0, 86, 0, 0, 0, 87, 88, 123,
	137, 0, 0, 0, 0, 0, 179, 144, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 46, 83, 146, 149, 69, 133, 58, 92, 139,
	93, 115, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 181, 52, 73, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 72, 66, 67, 119, 120,
	167, 168, 169, 143, 63, 0, 70, 71, 0, 151,
	0, 0, 0, 122, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 98, 47, 102, 0, 0,
	0, 0, 0, 0, 0, 59, 60, 0, 0, 106,
	101, 127, 129, 138, 147, 157, 164, 140, 176, 177,
	161, 150, 0, 109, 163, 77, 97, 172, 99, 100,
	135, 56, 118, 0, 94, 75, 0, 0, 0, 80,
	49, 89, 50, 78, 111, 0, 76, 0, 152, 121,
	0, 0, 0, 170, 0, 126, 0, 0, 0, 0,
	0, 113, 154, 116, 145, 108, 136, 65, 125, 165,
	95, 131, 166, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 160,
	91, 62, 175, 0, 134, 48, 128, 0, 0, 54,
	57, 171, 158, 85, 84, 0, 0, 0, 0, 0,
	0, 0, 112, 117, 141, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	124, 0, 0, 0, 61, 55, 0, 110, 0, 0,
	0, 64, 0, 82, 142, 0, 45, 0, 0, 148,
	155, 107, 0, 0, 159, 104, 103, 0, 0, 0,
	0, 0, 0, 96, 0, 178, 173, 0, 0, 162,
	114, 153, 79, 90, 0, 86, 0, 0, 0, 87,
	88, 123, 137, 0, 0, 0, 0, 0, 179, 144,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 46, 83, 146, 149, 69, 133, 58,
	92, 139, 93, 115, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 0, 181, 52, 73, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 72, 66, 67,
	119, 120, 167, 168, 169, 143, 63, 0, 70, 71,
	0, 151, 0, 0, 0, 122, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 98, 47, 102,
	0, 0, 0, 0, 0, 660, 0, 59, 60, 0,
	0, 106, 101, 127, 129, 138, 147, 157, 164, 140,
	176, 177, 659, 0, 0, 0, 0, 658, 0, 0,
	0, 0, 0, 0, 704, 0, 705, 0, 0, 0,
	0, 0, 0, 0, 695, 696, 0, 0, 0, 0,
	0, 0, 0, 0, 513, 0, 0, 205, 685, 682,
	683, 687, 688, 689, 690, 0, 0, 0, 686, 691,
	553, 554, 661, 0, 0, 0, 0, 656, 674, 0,
	0, 703, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 671, 672, 0, 0, 0,
	0, 720, 0, 673, 0, 0, 1133, 670, 675, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 1135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	681, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	308, 309, 310, 311, 312, 313, 314, 315, 316, 0,
	317, 1140, 0, 318, 319, 320, 322, 321, 1144, 0,
	1136, 0, 1148, 1147, 1149, 1134, 1151, 0, 0, 0,
	1155, 1152, 1154, 1153, 706, 1150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1141, 1142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 722, 0, 707, 708, 0, 0, 0, 0,
	0, 1143, 1145, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 693, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 709, 719, 715,
	716, 713, 714, 712, 711, 710, 721, 697, 698, 699,
	700, 702, 1334, 0, 557, 556, 701, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1297,
	1296, 0, 44, 0, 1295, 0, 1298, 1299, 1300, 1301,
	0, 176, 177, 717, 1317, 0, 0, 0, 0, 0,
	1320, 1319, 1318, 0, 0, 1324, 1325, 1326, 1327, 1329,
	1328, 1292, 1293, 1294, 0, 0, 0, 0, 1322, 1323,
	0, 1321, 0, 0, 0, 0, 1289, 1288, 0, 0,
	1283, 1284, 1285, 1286, 0, 1287, 0, 1290, 0, 0,
	0, 0, 0, 0, 1291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 1335, 1339, 0, 0, 0,
	0, 178, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 308, 309, 310, 311, 312,
	313, 314, 315, 316, 205, 317, 247, 0, 318, 319,
	320, 322, 321, 0, 0, 0, 0, 0, 0, 0,
	1313, 1312, 0, 0, 0, 0, 0, 0, 0, 0,
	1307, 1314, 1315, 1316, 0, 0, 0, 0, 0, 0,
	0, 1308, 1309, 1310, 1311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 0, 292, 0, 0, 0, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 284, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 180, 0,
	0, 0, 1331, 1330, 1332, 1333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 1338,
	0, 0, 0, 0, 0, 0, 307, 308, 309, 310,
	311, 312, 313, 314, 315, 316, 0, 317, 304, 0,
	318, 319, 320, 322, 321, 285, 286, 287, 291, 289,
	288, 290, 256, 258, 0, 254, 257, 263, 259, 260,
	261, 275, 264, 265, 266, 267, 268, 277, 276, 278,
	279, 280, 281, 269, 270, 271, 272, 273, 274, 282,
	293, 294, 295, 296, 297, 298, 299, 300, 301, 283,
	0, 0, 0, 974, 0, 0, 660, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 659, 0, 0, 0, 205, 658, 247,
	0, 0, 0, 0, 0, 704, 0, 705, 0, 0,
	0, 0, 0, 0, 0, 695, 696, 0, 0, 0,
	0, 0, 0, 2016, 0, 513, 0, 0, 205, 685,
	682, 683, 687, 688, 689, 690, 0, 0, 0, 686,
	691, 553, 554, 661, 2017, 255, 0, 0, 656, 674,
	0, 0, 703, 0, 0, 0, 262, 0, 292, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 671, 672, 176, 177,
	0, 0, 720, 0, 673, 0, 178, 669, 670, 675,
	0, 0, 0, 0, 0, 284, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 179,
	0, 180, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 681, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	308, 309, 310, 311, 312, 313, 314, 315, 316, 0,
	317, 304, 0, 318, 319, 320, 322, 321, 285, 286,
	287, 291, 289, 288, 290, 256, 258, 0, 254, 257,
	263, 259, 260, 261, 275, 264, 265, 266, 267, 268,
	277, 276, 278, 279, 280, 281, 269, 270, 271, 272,
	273, 274, 282, 293, 294, 295, 296, 297, 298, 299,
	300, 301, 0, 0, 0, 706, 0, 0, 0, 0,
	0, 0, 0, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 722, 0, 707, 708, 0, 0, 0,
	0, 0, 0, 0, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 693, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 709, 719,
	715, 716, 713, 714, 712, 711, 710, 721, 697, 698,
	699, 700, 702, 0, 0, 557, 556, 701, 660, 0,
	0, 176, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 981, 0, 659, 0, 0, 0, 0,
	658, 0, 0, 0, 0, 0, 0, 704, 0, 705,
	0, 0, 176, 177, 717, 0, 0, 695, 696, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 0, 0,
	205, 685, 682, 683, 687, 688, 689, 690, 0, 0,
	0, 686, 691, 553, 554, 661, 0, 0, 0, 0,
	656, 674, 0, 0, 703, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 672,
	984, 0, 660, 0, 720, 0, 673, 0, 0, 669,
	670, 675, 0, 0, 0, 0, 0, 0, 0, 659,
	0, 0, 0, 0, 658, 0, 0, 0, 0, 0,
	718, 704, 0, 705, 0, 0, 0, 0, 0, 178,
	0, 695, 696, 0, 0, 0, 0, 0, 0, 0,
	0, 513, 0, 855, 205, 685, 682, 683, 687, 688,
	689, 690, 179, 0, 180, 686, 691, 553, 554, 661,
	0, 0, 0, 681, 656, 674, 0, 0, 703, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 672, 0, 0, 0, 0, 720, 0,
	673, 0, 0, 669, 670, 675, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 718, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 681, 0, 0,
	0, 0, 0, 0, 0, 722, 0, 707, 708, 0,
	0, 0, 0, 0, 0, 0, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 693, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	709, 719, 715, 716, 713, 714, 712, 711, 710, 721,
	697, 698, 699, 700, 702, 0, 0, 557, 556, 701,
	0, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 722,
	0, 707, 708, 0, 176, 177, 717, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 693, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 709, 719, 715, 716, 713, 714,
	712, 711, 710, 721, 697, 698, 699, 700, 702, 0,
	0, 557, 556, 701, 660, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 659, 0, 0, 0, 0, 658, 0, 0, 0,
	0, 0, 0, 704, 0, 705, 0, 0, 176, 177,
	717, 0, 0, 695, 696, 0, 0, 0, 0, 0,
	0, 0, 0, 513, 0, 0, 205, 685, 682, 683,
	687, 688, 689, 690, 0, 0, 0, 686, 691, 553,
	554, 661, 0, 0, 0, 0, 656, 674, 0, 0,
	703, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 672, 984, 0, 0, 0,
	720, 0, 673, 0, 0, 669, 670, 675, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 796,
	0, 0, 660, 0, 0, 0, 718, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 659,
	0, 0, 0, 0, 658, 0, 0, 0, 0, 0,
	0, 704, 0, 705, 0, 0, 0, 0, 179, 0,
	180, 695, 696, 0, 0, 0, 0, 0, 0, 681,
	0, 513, 0, 0, 205, 685, 682, 683, 687, 688,
	689, 690, 0, 0, 0, 686, 691, 553, 554, 661,
	0, 0, 0, 0, 656, 674, 0, 0, 703, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 672, 0, 0, 0, 0, 720, 0,
	673, 0, 0, 669, 670, 675, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 718, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 722, 0, 707, 708, 0, 179, 0, 180, 0,
	0, 0, 0, 181, 0, 0, 0, 681, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 693, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 709, 719, 715, 716,
	713, 714, 712, 711, 710, 721, 697, 698, 699, 700,
	702, 0, 0, 557, 556, 701, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 717, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 722,
	0, 707, 708, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 693, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 709, 719, 715, 716, 713, 714,
	712, 711, 710, 721, 697, 698, 699, 700, 702, 0,
	0, 557, 556, 701, 660, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 659, 0, 0, 0, 0, 658, 0, 0, 0,
	0, 0, 0, 704, 0, 705, 0, 0, 176, 177,
	717, 0, 0, 695, 696, 0, 0, 0, 0, 0,
	0, 0, 0, 513, 0, 0, 205, 685, 682, 683,
	687, 688, 689, 690, 0, 0, 0, 686, 691, 553,
	554, 661, 0, 0, 0, 0, 656, 674, 0, 0,
	703, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 672, 0, 0, 0, 0,
	720, 0, 673, 0, 0, 669, 670, 675, 0, 0,
	1082, 1083, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 718, 704, 0, 705,
	0, 0, 0, 0, 0, 178, 0, 695, 696, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 0, 0,
	205, 685, 682, 683, 687, 688, 689, 690, 179, 0,
	180, 686, 691, 553, 554, 0, 0, 0, 0, 681,
	0, 674, 0, 0, 703, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 672,
	0, 0, 0, 0, 720, 0, 673, 0, 0, 669,
	670, 675, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	718, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 681, 0, 0, 0, 0, 0, 0,
	0, 722, 0, 707, 708, 0, 0, 0, 0, 0,
	0, 0, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 693, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 709, 719, 715, 716,
	713, 714, 712, 711, 710, 721, 697, 698, 699, 700,
	702, 0, 0, 557, 556, 701, 0, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 722, 0, 707, 708, 0,
	176, 177, 717, 0, 0, 0, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 693, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	709, 719, 715, 716, 713, 714, 712, 711, 710, 721,
	697, 698, 699, 700, 702, 0, 0, 557, 556, 701,
	0, 0, 0, 704, 0, 705, 0, 0, 0, 0,
	0, 0, 0, 695, 696, 0, 0, 0, 0, 0,
	0, 0, 0, 513, 0, 0, 205, 685, 682, 683,
	687, 688, 689, 690, 176, 177, 717, 686, 691, 553,
	554, 0, 0, 0, 0, 0, 0, 674, 0, 0,
	703, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 672, 0, 0, 0, 0,
	720, 0, 673, 0, 0, 669, 670, 675, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 718, 704, 0, 705,
	0, 0, 0, 0, 0, 178, 0, 695, 696, 0,
	0, 0, 0, 0, 0, 0, 0, 1002, 0, 0,
	205, 685, 682, 683, 687, 688, 689, 690, 179, 0,
	180, 686, 691, 553, 554, 0, 0, 0, 0, 681,
	0, 674, 0, 0, 703, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 672,
	0, 0, 0, 0, 720, 0, 673, 0, 0, 669,
	670, 675, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	718, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 681, 0, 0, 0, 0, 0, 0,
	0, 722, 0, 707, 708, 0, 0, 0, 0, 0,
	0, 0, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 693, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 709, 719, 715, 716,
	713, 714, 712, 711, 710, 721, 697, 698, 699, 700,
	702, 0, 0, 557, 556, 701, 0, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 722, 0, 707, 708, 0,
	176, 177, 717, 0, 0, 0, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 693, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	709, 719, 715, 716, 713, 714, 712, 711, 710, 721,
	697, 698, 699, 700, 702, 0, 0, 557, 556, 701,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 717,
}

var yyPact = [...]int16{
	972, -1000, -1000, -288, -1000, -1000, -1000, -1000, 1800, 2472,
	8257, 8257, 586, 538, 1826, 972, -1000, 2467, 644, 633,
	630, 267, 608, 1203, 2233, 2438, 650, 649, 875, 574,
	-1000, -252, -214, -1000, -93, 1641, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1635, 646, -1000, 617, 751, 587, -1000, 1526,
	-1000, 11026, 11026, 11026, 11026, 562, 1203, 1203, 574, 176,
	574, 1825, 787, 1824, 949, -1000, -1000, 726, -1000, 1969,
	722, -1000, -1000, 574, -1000, 938, -1000, 932, -1000, 2438,
	929, -1000, -1000, -1000, -1000, 2315, 8257, 67, 2190, 1822,
	1940, -1000, 1938, -1000, 2438, 2265, 1203, 194, 167, 2168,
	-170, 25, -1000, -1000, -1000, -1000, -1000, 721, 719, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1704, 95, 1798, 1704,
	1798, -1000, 1704, 1798, 85, 85, 85, 85, 85, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1797, 1796, -1000, 1704, 1704, 1704, 1704, 1704,
	-1000, -1000, 1704, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1795, 1704, 1706, 130, 1714, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2168, 2168, 2168, 1793, 2438, 1203, 1207,
	1819, 1817, 2438, -272, 2438, 2438, 2032, -1000, -1000, -1000,
	244, 2438, 1937, 7453, 11026, 9463, 2438, 1936, 1935, -1000,
	1934, 2438, 597, -1000, 2438, 2053, 665, 2438, 2438, 1203,
	1305, 797, 778, -1000, 767, 6649, -1000, 1892, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1790, 1081, 1203, 442,
	348, 1685, 459, 517, 421, 1422, 439, -1000, -1000, -1000,
	1037, -1000, 1203, -1000, 2071, -1000, -1000, 431, -1000, 424,
	922, 1191, 2438, 1789, 169, 1788, 2283, 1151, -1000, -293,
	-1000, 21, -1000, 1186, 2438, 85, 1141, 1704, -1000, 85,
	1071, 85, 85, -1000, -1000, 743, 1910, 743, 743, 743,
	743, 1185, 1185, -122, -122, -1000, -1000, -1000, -1000, 1150,
	-1000, -1000, 1149, 1706, -1000, -1000, 1148, 2438, 1203, 1787,
	1814, 1813, 2438, 2438, 2438, 1968, 605, -1000, -1000, 1956,
	1950, 1627, -1000, -1000, 243, -1000, -1000, 787, 1203, -1000,
	707, -1000, -1000, -1000, -1000, -1000, -1000, 1794, 1203, 1297,
	-1000, 592, 416, 2051, 416, 564, 663, -1000, 1812, -1000,
	-1000, 988, 985, 1174, 7855, 194, -1000, -1000, -1000, 610,
	-1000, 2046, 1991, -16, 458, -234, 1408, -1000, -1000, 1784,
	-1000, -1000, 12375, -1000, 1380, 1373, -1000, 1353, 1336, -9,
	1203, -1000, -245, 109, -17, -1000, -1000, 1685, -1000, 1780,
	12375, 1948, -1000, 1917, 792, -1000, 160, -1000, -275, -1000,
	-1000, 1030, -1000, -275, -1000, -1000, -1000, 1685, -1000, 1779,
	1775, -1000, 1772, -1000, -1000, 1685, 1685, 1685, 703, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 743, 1630, 85, 743,
	1629, 1628, 743, 743, -1000, -1000, 1320, 804, -1000, -1000,
	-1000, -1000, 1521, -1000, 1513, -1000, 118, 117, -1000, 1619,
	1674, -1000, 1511, 1699, 1811, 2225, 2438, 2438, 1768, 1765,
	1764, 1668, 574, 1668, 1989, 341, 2438, 2032, 465, 2032,
	787, 8659, 1203, -1000, -1000, -1000, 416, 1670, -1000, -1000,
	-1000, 416, 1670, 404, 1203, -1000, -1000, -1000, 577, 2438,
	-1000, -1000, -1000, -1000, -1000, 6247, -1000, -1000, 1481, -1000,
	289, 1704, 12375, 522, 522, -248, 1679, 413, -234, 1685,
	390, 1760, -1000, 610, 572, -1000, 12375, 185, 1685, 1685,
	1685, 1685, 12013, -1000, -1000, 695, -1000, -1000, -1000, 12815,
	12815, 12815, 12815, 12815, 12815, 12815, -1000, -1000, -1000, -1000,
	41, -1000, -275, -1000, 1180, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 700, 693, -1000, 1685, 1685, 1685, 1685, 1685,
	1685, 1685, 1685, 12375, 1685, 1886, 1685, 1685, 1685, 1685,
	1685, 1685, 1685, 1685, 1685, 1685, 1685, 5848, 1685, 1685,
	1685, 1685, -1000, -1000, -1000, -1000, -1000, -1000, -234, 1759,
	-1000, -1000, -1000, 922, -1000, 12375, 465, 1064, 131, -1000,
	1673, -1000, 1147, 1618, 3033, 1617, -1000, 10763, -1000, -1000,
	-1000, 1396, -1000, 1142, -1000, 1132, 1616, 11419, 11885, 11885,
	8659, -1000, -1000, 743, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 85, 1164, 85, 19, 16, -1000, 1145, -1000,
	1144, 2225, 1203, 2438, 1615, 1672, -1000, 288, 1758, 1757,
	2225, 465, 610, -1000, 2021, 2089, -1000, 1668, 2438, -1000,
	578, 1982, -1000, -1000, 1988, -1000, 1671, -1000, -1000, 1623,
	2032, -1000, 1756, 1670, 416, 1670, 1203, -1000, -1000, 462,
	1203, -1000, -1000, -1000, -1000, -1000, -1000, 2721, 610, 1930,
	-1000, -1000, -1000, 984, 964, -1000, -1000, 958, 317, 955,
	-1000, 12375, 1203, -234, 1755, 12375, 1203, 610, 1475, 320,
	12375, 12375, 933, -1000, 11026, -1000, 44, 12479, 1034, 865,
	12815, 12815, 12815, 12815, 12815, 12815, 12815, 12815, 12815, 12815,
	12815, 12815, 12815, 12815, 12815, 971, 4155, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1314,
	-1000, 1668, 2265, 1396, 1396, 1396, 1473, 12013, 270, 1168,
	1168, 28, 12013, 28, 28, 28, 28, 28, 87, -1000,
	-290, -1000, -1000, 7453, 8659, 11885, 11885, 10246, 12375, 11885,
	11885, 11885, 1971, 913, 270, 2265, 1987, 1396, 1396, 1396,
	1396, -1000, 1396, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 293, -1000, -1000, -1000, -1000, -1000, -1000, 1754, 1750,
	1745, 1744, 1741, 1740, 1739, -1000, 11885, 11885, 11885, 11885,
	-1000, 1203, 1685, 572, 1454, -197, 12375, 1737, 792, -1000,
	-1000, 1612, -275, -1000, -1000, -170, -1000, -1000, -1000, -1000,
	1396, 11885, 1419, -1000, -1000, 337, 688, 1419, 1419, 1685,
	-1000, 743, -1000, 743, -1000, -1000, 1595, 1594, 1586, 1736,
	1735, -257, 1141, 2225, 2225, 1582, 1451, 1443, 1984, 2013,
	1668, 1965, 1861, -1000, 1396, 1945, 1203, -1000, -1000, -1000,
	-1000, -1000, 299, 912, 1203, 5929, 1614, -1000, 10581, -1000,
	1730, 94, 495, 1804, 3269, 142, -1000, 1212, 888, 1160,
	887, 885, 871, 870, 869, 867, 851, 841, 840, 813,
	-1000, -1000, -1000, -1000, 1930, -1000, 2069, -1000, -1000, -1000,
	2057, 1440, -1000, 761, 1729, 1728, 610, 572, 1724, 1438,
	2721, -1000, -124, 44, 56, -1000, -1000, 1097, -1000, -1000,
	-1000, 1552, 12815, 12815, 12815, -1000, -1000, -1000, -1000, 1034,
	12815, 12815, 12815, 963, 1552, 1075, 573, 1514, 28, 420,
	420, 58, 58, 58, 58, 58, 975, 975, -1000, -1000,
	-1000, 203, -1000, 1396, 1396, -1000, -1000, -1000, 12375, -1000,
	1396, -1000, -275, 1156, -1000, -1000, 1076, 1685, -1000, 1419,
	1419, 501, 1669, 12919, 1704, -1000, 1704, 1714, 1706, -1000,
	130, -1000, -1000, 143, 1704, 141, 1704, 1704, 1704, -1000,
	-1000, 1704, 1704, -1000, 1704, 1704, 381, 1626, 1625, 1419,
	11885, -1000, 861, -1000, 12375, 1396, 2438, -1000, -1000, -1000,
	-1000, -1000, 1713, 1139, 1138, 1130, 1128, 1112, 1111, 1110,
	1108, 1419, 1396, 1666, 1419, 1419, 1431, -1000, 12375, 320,
	1810, -1000, -1000, 837, -1000, 1572, 1558, -1000, -1000, 1419,
	11885, -286, -1000, -1000, 1161, -1000, -1000, 5845, -286, -286,
	11885, -1000, -1000, -1000, -1000, -257, 2225, 610, 2027, 1712,
	1555, 1554, -257, 2027, 2721, 1916, 12375, 12375, 2021, -1000,
	1668, -1000, -1000, 1971, -1000, -1000, 969, -1000, 1668, 1588,
	274, 168, 12375, -1000, 3843, -1000, 5929, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2021,
	12375, -1000, -1000, -1000, -1000, -1000, 415, 4136, 1203, 1203,
	1203, 441, 12375, 1220, 12375, -1000, -1000, -1000, -1000, -1000,
	2438, 1553, 10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581,
	10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581,
	10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581,
	10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581,
	10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581,
	10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581, 10581,
	610, 610, 1710, 1707, 372, -1000, 1203, -1000, -186, 3269,
	1203, -1000, 1101, -1000, -1000, 1092, 1093, 1092, 1092, 1092,
	1092, 1092, 309, 1089, 499, -1000, 522, 522, 2027, 12375,
	967, 12375, 610, 1413, 320, 1203, 2721, 1804, -1000, -1000,
	-1000, -1000, 1552, 1552, 1552, -1000, 963, 1552, 100, -1000,
	12815, 12815, 106, -1000, -1000, 270, -1000, 59, -1000, -275,
	-1000, -1000, -1000, -1000, 7838, 971, 12375, -1000, 278, -1000,
	-1000, -1000, 1706, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7838, 12815, 12815, 12815, 12815, -149, 1591,
	908, -1000, 12375, 655, -1000, -1000, 1082, 1543, 1407, 1405,
	1542, 1538, 1534, 1532, 1531, -1000, -1000, -1000, -1000, 482,
	1203, 572, -1000, 2044, -199, 566, -1000, -1000, -1000, -1000,
	-1000, 1685, -1000, -1000, 682, -1000, -1000, 1396, 2027, 1529,
	1399, 2721, 12375, 465, -257, -257, 2027, 2721, -1000, -1000,
	2062, 760, 284, 1665, -1000, 298, 1984, 1396, 1839, -1000,
	-1000, -173, 12375, 5929, 7537, 270, 7537, -1000, 5929, 3801,
	1984, 2344, 586, 1577, 1466, 1663, 432, 235, -1000, -1000,
	-1000, 4639, 1090, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1203, 2041,
	2038, 2035, 2034, 3586, 12375, 12375, -1000, 1980, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1523, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1395, 1393, 610,
	610, 1705, 1685, 1387, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 922, 922, -1000, -1000, -1000, -1000, -1000,
	-1000, 1384, 1379, 2721, -1000, 1367, 1804, -1000, -1000, 12815,
	1552, 1552, 8, -1000, 1076, -1000, 1396, 1704, 1396, 962,
	-1000, -1000, -1000, 1396, 772, 551, 331, 313, 1685, -112,
	-1000, 270, 12375, 1465, -1000, 1065, -1000, 1043, -1000, -1000,
	-1000, -1000, -1000, -1000, 2438, -1000, 320, 522, 522, -1000,
	-1000, -1000, 164, 902, 792, 792, 1015, -15, -1000, 2009,
	531, 7051, -1000, 2721, 2027, 2721, 1804, 270, 1363, 2027,
	2027, 2721, 1804, -1000, 1877, 12375, 12375, 12375, -1000, 1916,
	-1000, 11885, -1000, -1000, -277, 270, 3843, 4138, -1000, -1000,
	3433, 7135, -1000, 1916, 5929, 898, -1000, 904, -1000, 7537,
	793, 2438, 1429, -1000, 1541, 1731, -1000, -1000, -1000, 1942,
	701, 746, 1203, 254, 11026, -1000, -1000, 1979, 1647, 5041,
	-14, -1000, -1000, -1000, 809, 680, 1216, -1000, 1909, -1000,
	-1000, 4136, 1927, -1000, -1000, -1000, -1000, -1000, 7537, -1000,
	1639, 1396, 912, 271, 10581, -1000, 327, 1361, 1359, 610,
	1203, -1000, 3269, -1000, -1000, 2027, 2721, 1804, 463, -1000,
	1552, -1000, -1000, -1000, -1000, -1000, 12815, -1000, -1000, 12815,
	-1000, 12815, -1000, 12815, -1000, 12815, 12815, 1396, 1039, 270,
	-1000, 1432, 1400, 1703, -1000, -1000, -1000, 792, -1000, 792,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1924, -1000, 2006,
	1396, -1000, 1804, 2721, -1000, -1000, -1000, 2721, 2721, 1804,
	-1000, 1873, 270, 270, -1000, -1000, 1576, 12375, 6733, -1000,
	-1000, -1000, -1000, 3821, 6331, 565, 3039, 352, 2438, -1000,
	352, 1471, 1466, 2438, -1000, -1000, 2265, 1466, 1466, 1466,
	1466, 1466, -1000, 1848, 1847, -1000, 1841, 1837, 1866, 2438,
	1357, 701, 713, 1685, -1000, 2438, -1000, 1942, 1977, -1000,
	911, 5443, 1647, -14, 1644, -1000, 2, -5, 11057, 8659,
	743, -1000, -1000, -1000, -1000, -1000, 1203, 379, -1000, 158,
	266, -1000, 183, -1000, 210, 2721, 2721, 1349, 1396, -1000,
	-1000, 1804, -1000, 2438, 1006, 1006, 1006, 1006, 1006, 57,
	-1000, -1000, -1000, -1000, 1203, -1000, -1000, -1000, 678, 12375,
	-1000, -1000, -1000, 1804, 1804, -1000, -1000, 2027, 1466, 270,
	-1000, -1000, 4421, -1000, -1000, 12375, -1000, 12375, 7537, -1000,
	1404, 1685, -1000, 2027, 1466, 1584, -1000, 1493, -1000, 808,
	1731, 1702, 1809, 1209, -1000, -1000, -1000, -1000, 1844, -1000,
	1838, -1000, -1000, -1000, -1000, -183, 627, 621, 619, 1203,
	-1000, 1668, 4145, -1000, -1000, 1179, -1000, 195, -1000, -1000,
	-1000, 1644, -14, 43, -1000, -1000, -1000, -1000, 270, 799,
	-1000, 1642, -1000, 7537, -1000, -1000, 230, -1000, 1804, 1804,
	-1000, -1000, -1000, 1696, -1000, -1000, -1000, -1000, -1000, 1396,
	202, -189, 1347, 8659, 1352, -1000, 270, -1000, -1000, 2025,
	1640, 552, 5929, 3466, 3417, 1803, 2265, 1685, -1000, 9061,
	1203, 2021, 1584, -1000, 2027, 2265, 12375, -1000, -1000, 12375,
	1693, -1000, 12375, -1000, -1000, -1000, -1000, 1690, 1685, 1685,
	1685, 1333, -1000, -1000, -1000, 911, -1000, 3681, -1000, 987,
	-1000, -1000, -1000, -10, -54, -1000, 12375, 4130, -1000, -1000,
	-1000, -1000, 1203, -1000, 1870, -169, -217, -1000, -1000, -1000,
	1396, 12375, 2023, 2003, -1000, 2872, 898, -1000, -1000, 1919,
	1467, 1634, -1000, -1000, 11523, 1396, 1341, -1000, -1000, 676,
	-1000, -1000, 1333, 1984, -1000, 2021, -1000, 270, 270, 465,
	270, 375, 465, 465, 465, 500, 1203, -1000, -1000, 3124,
	-1000, -1000, -1000, -1000, 270, 5527, 1330, -1000, 1864, -1000,
	-1000, -1000, -1000, 12375, 12375, 5125, 369, -1000, 1685, -1000,
	-1000, 1593, 9865, 1203, -1000, -1000, 1984, 1328, 1326, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1319, 1319,
	1319, 713, -1000, -1000, 4723, -1000, -1000, -175, 270, 1639,
	535, 2061, -1000, 1685, -1000, 1668, -1000, -1000, -1000, -1000,
	-1000, 375, -1000, -1000, -1000, -183, -1000, -202, -1000, 2265,
	1634, 1396, -1000, -1000, -224, 1633, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 2324, 2031, 125, 41, 2321, 2320, 2319, 2318, 2317,
	2316, 2314, 2311, 2309, 2306, 2304, 36, 35, 43, 34,
	38, 2303, 2298, 2295, 2293, 2292, 2291, 2290, 97, 2289,
	2287, 2285, 2284, 110, 2282, 2280, 2279, 2277, 76, 78,
	135, 81, 2497, 31, 59, 66, 44, 2275, 39, 2270,
	2269, 54, 2264, 33, 2263, 2261, 798, 2259, 2258, 6,
	124, 91, 105, 46, 2257, 2255, 90, 1696, 2250, 2248,
	160, 2246, 2245, 88, 30, 62, 5, 7, 9, 2244,
	73, 2, 2243, 82, 84, 2242, 2240, 2236, 120, 2235,
	58, 83, 14, 55, 2234, 10, 8, 129, 40, 22,
	17, 1, 50, 37, 2233, 21, 32, 20, 2231, 74,
	2230, 106, 45, 69, 13, 1669, 0, 67, 150, 2229,
	2227, 2223, 2487, 142, 15, 51, 75, 2218, 63, 94,
	49, 92, 2217, 2215, 2214, 2212, 52, 70, 65, 56,
	2208, 2207, 2205, 2204, 2202, 85, 2201, 2159, 341, 113,
	86, 61, 2197, 2196, 89, 116, 72, 87, 117, 402,
	556, 2194, 2190, 2188, 2183, 114, 64, 79, 99, 2180,
	57, 98, 413, 95, 23, 2051, 102, 220, 2179, 2177,
	2175, 2172, 2171, 2170, 2169, 93, 2168, 155, 42, 271,
	548, 48, 2167, 2166, 2163, 2162, 77, 2160, 2158, 2157,
	60, 2156, 2152, 104, 100, 115, 107, 109, 2151, 2146,
	71, 80, 2142, 103, 108, 2141, 101, 96, 26, 112,
	53, 2139, 2135, 2134, 19, 2133, 2132, 2131, 3, 4,
	2130, 2129, 2125, 2119, 2118, 2116, 68, 2113, 144, 2112,
	16, 2110, 2109, 47, 2108, 2107, 2107, 2106, 2104, 846,
	2137, 2102, 2794, 111, 2095, 156,
}

var yyR1 = [...]uint8{
	0, 245, 2, 2, 2, 246, 246, 1, 1, 1,
	1, 24, 24, 24, 24, 24, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 22, 22, 22, 22,
	22, 22, 22, 22, 248, 248, 3, 3, 4, 5,
	5, 6, 6, 7, 7, 31, 31, 8, 9, 9,
	9, 251, 251, 51, 51, 98, 98, 10, 10, 10,
	10, 11, 11, 11, 221, 221, 220, 222, 222, 223,
	223, 225, 225, 224, 224, 224, 224, 224, 224, 224,
	226, 226, 226, 226, 12, 12, 12, 12, 12, 215,
	215, 215, 215, 215, 13, 13, 218, 218, 218, 16,
	16, 16, 16, 17, 17, 18, 18, 18, 20, 20,
	103, 103, 107, 107, 107, 108, 108, 108, 108, 237,
	237, 127, 127, 247, 247, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 213, 213, 213, 213, 214, 214,
	214, 214, 216, 216, 217, 217, 217, 217, 217, 217,
	219, 219, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 14, 14, 32, 32, 75, 75, 15,
	113, 113, 194, 194, 194, 195, 195, 195, 195, 195,
	195, 197, 197, 198, 198, 120, 120, 199, 199, 23,
	23, 23, 23, 23, 23, 23, 23, 27, 179, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 165, 165,
	166, 166, 167, 167, 167, 167, 159, 159, 159, 159,
	130, 130, 130, 130, 130, 130, 130, 130, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 205, 205, 205,
	205, 205, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 207, 208, 209, 201, 201, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 149, 149, 149, 149, 149, 149, 200, 200,
	196, 196, 196, 132, 132, 132, 132, 132, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 140, 137,
	137, 141, 138, 138, 142, 144, 145, 145, 156, 156,
	157, 157, 157, 139, 139, 143, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 131, 131, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 146, 146, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 158, 158, 147, 147,
	148, 148, 148, 155, 155, 155, 152, 152, 153, 153,
	154, 154, 154, 150, 150, 150, 151, 151, 151, 161,
	190, 190, 190, 192, 192, 193, 193, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 178, 178, 210, 210, 211, 211, 212, 212, 189,
	189, 189, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 177, 177, 187, 187, 188, 188, 185,
	185, 185, 185, 186, 168, 168, 168, 168, 168, 169,
	169, 170, 170, 170, 170, 162, 162, 163, 163, 164,
	164, 203, 203, 203, 241, 241, 241, 241, 241, 241,
	242, 242, 204, 204, 171, 171, 174, 174, 172, 172,
	175, 175, 173, 173, 176, 176, 183, 183, 183, 183,
	253, 253, 181, 181, 181, 182, 182, 182, 254, 28,
	29, 29, 30, 30, 30, 35, 35, 35, 33, 33,
	34, 34, 40, 40, 39, 39, 41, 41, 41, 41,
	119, 119, 119, 118, 118, 238, 238, 238, 238, 238,
	43, 43, 44, 44, 45, 45, 46, 46, 46, 228,
	228, 227, 227, 229, 229, 229, 229, 229, 229, 229,
	229, 58, 58, 95, 95, 95, 99, 99, 47, 47,
	47, 47, 48, 48, 49, 49, 50, 50, 125, 125,
	124, 124, 124, 52, 52, 52, 54, 53, 53, 53,
	53, 55, 55, 57, 57, 56, 56, 59, 59, 59,
	59, 60, 60, 97, 97, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 110, 110, 62, 62, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 72, 72, 72, 72, 72, 72,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 38, 38, 73, 73, 73, 80, 74, 74, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 70, 70, 70, 70,
	70, 70, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 255, 255, 71, 71, 71,
	71, 36, 36, 36, 36, 36, 126, 126, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 84, 84, 37, 37, 82, 82,
	83, 112, 112, 85, 85, 81, 81, 81, 81, 230,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	63, 63, 86, 86, 87, 87, 239, 239, 240, 88,
	88, 89, 89, 90, 91, 91, 91, 92, 92, 92,
	92, 93, 93, 93, 65, 65, 65, 65, 65, 65,
	94, 94, 96, 96, 96, 96, 100, 100, 76, 76,
	78, 78, 77, 79, 101, 101, 105, 102, 102, 106,
	106, 106, 106, 106, 25, 26, 104, 104, 104, 121,
	121, 121, 111, 111, 109, 109, 116, 117, 117, 117,
	117, 117, 122, 122, 122, 123, 123, 231, 231, 231,
	232, 232, 232, 233, 233, 234, 235, 235, 236, 236,
	236, 244, 244, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 115, 115, 115, 115, 115,
	115, 249, 250,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 2, 0, 1, 1, 1, 1,
	1, 6, 6, 6, 6, 6, 2, 13, 12, 14,
	14, 13, 12, 13, 12, 10, 7, 10, 7, 11,
	11, 9, 13, 16, 5, 8, 7, 6, 7, 6,
	3, 6, 3, 6, 3, 6, 11, 13, 13, 14,
	14, 6, 6, 7, 1, 1, 4, 6, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 1, 1, 1, 3, 0, 4, 3, 4, 5,
	4, 2, 6, 6, 1, 3, 3, 0, 1, 1,
	1, 1, 3, 1, 2, 3, 1, 2, 1, 1,
	1, 2, 3, 4, 2, 2, 2, 3, 5, 0,
	2, 2, 2, 2, 3, 5, 1, 2, 3, 7,
	10, 1, 1, 5, 5, 3, 5, 3, 1, 3,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 0, 3, 0, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 4, 2, 3, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 4, 1, 1, 0, 1, 2,
	0, 3, 0, 2, 2, 0, 2, 2, 2, 2,
	2, 0, 2, 0, 3, 0, 1, 0, 2, 3,
	5, 5, 7, 3, 5, 3, 5, 4, 4, 0,
	1, 3, 3, 3, 3, 3, 3, 3, 7, 9,
	1, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 1, 3, 3, 2, 2,
	3, 2, 4, 2, 4, 2, 2, 3, 2, 3,
	2, 7, 9, 3, 3, 6, 9, 9, 6, 6,
	8, 8, 5, 8, 7, 4, 0, 2, 4, 6,
	2, 4, 2, 1, 1, 2, 1, 2, 2, 1,
	1, 1, 3, 1, 2, 1, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 2, 3, 1, 3, 0, 2,
	0, 2, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 2, 1, 1, 2, 3, 0, 1, 0, 5,
	0, 3, 5, 1, 1, 1, 1, 3, 3, 2,
	2, 2, 1, 1, 2, 1, 1, 4, 5, 4,
	4, 4, 1, 2, 2, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 1, 3, 0, 3,
	0, 3, 3, 0, 3, 3, 0, 1, 0, 1,
	0, 2, 1, 0, 3, 3, 0, 1, 2, 6,
	0, 1, 4, 1, 2, 1, 3, 2, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 5, 3, 3, 2, 3, 2, 3, 3, 2,
	2, 3, 4, 1, 1, 1, 1, 1, 3, 3,
	2, 2, 4, 1, 2, 5, 5, 8, 8, 13,
	11, 1, 1, 2, 2, 10, 8, 9, 7, 7,
	5, 0, 1, 1, 0, 1, 1, 1, 2, 2,
	1, 2, 0, 3, 0, 1, 1, 3, 1, 1,
	1, 3, 1, 1, 1, 3, 0, 4, 1, 3,
	2, 1, 1, 2, 1, 1, 1, 1, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 3, 6, 4, 7,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 0,
	4, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 8, 1, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 0, 4, 1, 3, 3, 2, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 4,
	4, 4, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 4, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	6, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 2, 1, 4, 5, 5, 5,
	5, 6, 4, 4, 6, 6, 8, 6, 6, 6,
	8, 6, 8, 6, 8, 6, 8, 9, 7, 5,
	4, 4, 3, 3, 3, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 2, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 2, 2, 2, 1, 1, 2,
	2, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 6, 6, 4, 5, 4, 4, 4, 4,
	4, 4, 4, 1, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 0, 2, 1, 1, 3, 5, 3,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 0, 3, 0, 2, 1, 3, 1, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 1, 3, 1, 1, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 5, 3, 1, 3, 1, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 2,
	0, 2, 2, 0, 1, 4, 1, 3, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -245, -2, -1, -21, -22, -23, -24, -27, 126,
	132, 133, 127, 128, 71, 410, -179, 58, -241, -242,
	295, -199, 137, 150, 172, 173, 380, 134, 152, 135,
	392, 393, 154, 395, 79, -175, -172, -117, 21, -116,
	317, 149, -114, -115, 61, 131, 198, 383, 80, 25,
	27, 303, 309, 197, 84, 120, 16, 85, 204, 392,
	393, 119, 76, 361, 126, 52, 353, 354, 351, 202,
	363, 364, 352, 310, 209, 20, 31, 10, 28, 157,
	24, 113, 128, 199, 89, 88, 160, 164, 165, 26,
	158, 75, 205, 207, 19, 55, 148, 11, 382, 13,
	14, 397, 384, 141, 140, 100, 396, 136, 50, 8,
	122, 29, 97, 46, 155, 208, 48, 98, 17, 355,
	356, 34, 370, 166, 115, 53, 40, 398, 81, 399,
	73, 56, 324, 203, 79, 15, 51, 167, 400, 206,
	404, 99, 129, 360, 174, 49, 200, 401, 134, 201,
	6, 366, 33, 156, 47, 135, 311, 402, 87, 139,
	74, 5, 154, 9, 403, 54, 57, 357, 358, 359,
	38, 86, 12, 151, 374, 77, 405, 406, 150, 173,
	175, 308, -175, -109, 140, 136, 152, 56, -2, -180,
	-159, -116, -115, 63, 36, 136, 136, 136, 138, 226,
	138, -116, -116, -81, 141, 61, -115, -122, 63, -56,
	-122, 61, -115, 135, -116, 141, -116, 141, 63, -111,
	141, 395, 392, 393, 360, 56, 59, 56, 135, -116,
	141, -116, 141, 63, 135, 143, 136, 60, 59, -160,
	-130, -132, -131, -134, -133, -135, -116, 63, -122, -140,
	-141, -144, -142, -143, 262, 372, 259, 263, 260, 265,
	266, 267, 120, 264, 269, 270, 271, 272, 273, 280,
	281, 282, 283, 284, 285, 268, 275, 274, 276, 277,
	278, 279, 286, 33, 159, 252, 253, 254, 257, 256,
	258, 255, 122, 287, 288, 289, 290, 291, 292, 293,
	294, 295, -136, -137, 245, -138, -139, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 244, 247, 248,
	249, 251, 250, -160, -160, -160, -116, 56, 224, 225,
	-116, -116, -111, 227, -111, 56, -213, 19, 197, 198,
	210, 56, 81, 123, 25, 123, -111, 81, 81, -56,
	81, 135, -56, -172, 135, -56, -56, 324, 56, 26,
	26, -56, -81, -116, -116, -183, -253, 375, 37, -159,
	-161, -168, -162, -163, -164, -165, -184, -169, 144, 142,
	154, 408, 146, 147, 295, -177, 148, 136, 155, 73,
	81, -205, 144, -208, 56, 303, 309, 142, 155, 154,
	408, 71, 145, 25, 382, 384, 31, 32, -154, 411,
	297, -152, 306, 123, 123, -147, 58, -146, 261, -148,
	58, -147, -148, -147, -148, -150, 263, -150, -150, -150,
	-150, 58, 58, -147, -147, -147, -147, -147, -147, 58,
	-147, -156, 58, -145, 246, -157, 58, 56, 57, -56,
	-116, -116, 56, 56, 56, -56, -237, 405, 406, -56,
	-56, -216, -214, 8, 9, 10, 211, -56, 26, -117,
	-123, -114, -115, -122, -130, -123, -114, -56, 26, 26,
	26, -56, 139, -56, 11, 131, -56, -56, -116, -116,
	63, 97, 97, 97, -181, 59, -117, 71, 36, 58,
	-204, 56, 81, -116, -171, 155, -177, 61, 136, -203,
	392, 393, -249, 58, -177, -177, 61, 136, 155, 61,
	155, 73, 19, -116, 9, 155, 155, -204, 63, -56,
	58, -201, 383, 16, 58, -206, 58, -207, 63, 64,
	65, 110, 66, 73, -149, 72, -62, 298, -70, 351,
	354, 353, 299, 74, 75, -116, 369, 368, -122, -209,
	65, 412, -153, 307, 63, -122, -150, 65, -147, -150,
	65, 61, -150, -150, -151, 120, 119, 33, -151, -151,
	-151, -151, -158, 63, -158, -155, 374, 375, -155, 65,
	65, -156, 65, -56, -116, 58, 56, 56, -56, -56,
	-56, 25, 138, 25, -194, 25, 56, 59, 211, -213,
	-116, 123, 57, -116, -116, 63, 139, -176, -173, -116,
	183, 11, -176, -120, 144, -165, -168, 154, 131, 56,
	63, 73, 63, 73, 63, 90, -117, -253, -188, -185,
	-116, 155, 58, 10, 9, 19, 153, 142, 154, 408,
	148, -203, 61, 58, -42, -61, 81, -67, 31, 26,
	9, 76, -249, -66, -62, -81, -230, -79, -80, 120,
	121, 109, 110, 117, 82, 122, -70, -68, -69, -71,
	-233, 184, 63, 64, -116, 62, 72, 65, 66, 67,
	68, 73, -122, 329, -77, 48, 49, 361, 362, 363,
	364, 370, 365, 85, 38, 40, 268, 298, 299, 351,
	359, 358, 357, 355, 356, 353, 354, 407, 141, 352,
	115, 360, 296, 61, 61, 61, 61, -203, 154, -171,
	-116, 394, -205, 408, -149, -249, 58, -42, 25, 31,
	-63, 65, 110, -206, 58, -207, -196, 407, 65, 66,
	-196, -249, -147, 58, -147, 58, 58, -249, -249, -249,
	123, -151, 60, -150, -151, 60, 60, -151, -151, 61,
	61, 120, 60, 59, 60, 252, 252, 60, 59, 60,
	59, 58, 57, 56, -187, -188, -70, -116, -56, -56,
	58, 58, 58, -3, -4, -5, 6, -249, -111, -3,
	-195, 19, 181, 182, -56, -214, -95, -116, 155, -216,
	-213, -117, -116, -176, 59, -176, -248, 136, 155, -116,
	144, -168, -56, -182, -117, 63, 65, 60, 59, -147,
	-186, 301, -147, -42, -170, 177, 178, 33, 179, -170,
	394, 58, 57, 155, -203, -249, 155, 58, -188, -250,
	80, 79, 97, 212, 407, 60, -42, -64, 100, 81,
	98, 99, 84, 106, 105, 116, 109, 110, 111, 112,
	113, 114, 115, 107, 108, 119, 407, 90, 91, 92,
	93, 94, 95, 96, 101, 102, 103, 104, -110, -249,
	-80, -249, -249, -249, -61, -3, -74, -249, -42, 124,
	125, -67, -249, -67, -67, -67, -67, -67, -67, -234,
	297, -196, 63, 123, 123, -249, -249, -249, -249, -249,
	-249, -249, -249, -84, -42, -249, 41, -249, -249, -249,
	-249, -255, -249, -255, -255, -255, -255, -255, -255, -129,
	120, 263, 159, 254, -136, -131, 269, 268, 249, 248,
	260, 259, 233, 253, 252, 122, -249, -249, -249, -249,
	-203, 58, -204, -42, -95, 60, 58, 384, 59, 65,
	60, -206, 63, 60, 300, -130, -250, 60, 60, 60,
	-40, 24, -39, -41, 111, -42, -122, -39, -39, -117,
	-151, -150, 63, -150, 308, 308, 65, 65, -187, -116,
	-56, 60, 58, 58, 58, -187, -95, -188, -88, 15,
	-30, 5, -28, -254, -3, -56, 139, 21, 6, 8,
	9, 10, 19, -113, 59, 25, -216, -247, 58, -173,
	-116, 154, -116, -190, -192, 374, -191, 57, 149, 71,
	186, 187, 188, 189, 190, 191, 192, 193, 194, 61,
	-185, -91, 27, 28, 60, -204, 56, 73, 180, -204,
	56, -166, -167, -42, -116, -203, 58, -42, -171, -188,
	60, -200, 179, -42, -42, -72, 73, 81, 74, 75,
	-130, -67, 21, 22, 23, -73, -77, -80, 69, 100,
	98, 99, 84, -67, -67, -67, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -126, 61,
	63, 253, -129, 61, -81, -250, -250, -250, 59, -250,
	-3, -66, 63, -116, -66, -116, 411, -117, -117, -39,
	-39, -42, -128, 120, 259, 159, 254, -138, -137, -139,
	245, 284, 285, 305, 252, 306, -136, 257, 256, 258,
	269, 260, 265, 267, 266, 264, -42, -41, -41, -39,
	-33, 24, -82, -83, 86, -81, 19, -250, -250, -250,
	-250, -250, 261, 58, 58, 58, 58, 58, 58, 58,
	58, -39, -40, -39, -39, -39, -174, -116, -249, -250,
	60, 380, 381, -42, 58, -63, 60, -154, -250, -39,
	59, -250, -119, -118, 25, -116, 63, 123, -250, -250,
	-249, -151, -151, 60, 60, 60, 58, 58, -97, 396,
	-187, -187, 60, 60, 60, -92, 17, 16, -6, -4,
	-249, 21, 24, -35, 44, 45, -29, -250, 25, -174,
	199, -112, 86, -116, -217, -219, 228, -19, -16, -7,
	-9, -8, -11, -10, -12, -13, -14, -15, -25, -4,
	141, -17, -18, -31, 10, 9, 20, 33, 203, 204,
	209, 205, 151, -32, 174, -26, 8, 360, 164, 165,
	56, -252, -116, 109, 110, 111, 112, 114, 106, 105,
	116, 123, 90, 91, 92, 63, 59, 58, 65, 66,
	67, 68, -115, -136, -137, -138, -139, 269, 280, 281,
	282, 283, 260, 259, 270, 271, 272, 73, 81, 80,
	79, 100, 97, 98, 84, 85, 86, 87, 89, 88,
	362, 361, 363, 364, 31, 144, 142, 154, 408, 145,
	58, 58, 392, 393, 142, -189, 56, -191, 374, 58,
	376, 61, -178, 90, 63, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, -91, 9, 10, 60, 59,
	374, 58, 58, -188, -250, 58, 60, -190, 367, 73,
	74, 75, -67, -67, -67, -73, -67, -67, -67, -38,
	160, 80, 374, -250, -250, -42, -250, -235, -236, 63,
	65, 66, -250, -250, 59, 57, 59, -147, -147, -147,
	-157, -156, -145, 239, -147, 239, -147, -147, -147, -147,
	-147, -147, -147, 25, 59, 11, 59, 11, -250, -39,
	-85, -83, 89, -42, -250, -122, 58, 65, 65, 65,
	65, 65, 65, 65, 65, -250, -250, -250, -250, 60,
	59, -42, -200, 56, 60, -202, 60, 60, -250, -41,
	-238, 409, -118, 111, -123, -238, -238, -40, -97, -187,
	-188, -60, 12, 58, 60, 60, -97, -60, -190, -93,
	19, 34, -42, -89, -90, -42, -88, -3, -33, 70,
	-3, -197, 57, 200, 228, -42, 410, -219, 228, -217,
	-88, -42, -28, -28, -28, -221, -116, -223, -220, 214,
	215, -28, -244, -243, 330, 331, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 349, 350, -116, -116, -116, -215, 40,
	206, 207, 208, -42, -116, -249, -84, -56, 60, -252,
	-252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
	-252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
	-252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
	-252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
	-252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
	-252, -252, -252, -252, -252, -252, -252, -188, -188, 58,
	58, 155, -116, -193, -191, -116, 65, -210, 56, 77,
	65, -210, -210, -210, -210, -210, -211, 195, 196, 65,
	-212, -211, 65, -170, -170, -60, -167, 90, 80, 79,
	-116, -166, -188, 60, -200, -174, -190, -189, -38, 80,
	-67, -67, 252, 412, 59, -196, -128, 120, -126, -42,
	-150, 61, -156, -128, -67, -67, -67, -67, 371, -88,
	88, -42, 87, 65, 60, 59, 60, 59, 60, 60,
	60, 60, 60, 60, 145, -116, -250, 10, 9, 380,
	381, 60, 229, 386, 387, 166, 388, 179, 389, 390,
	-249, 123, -250, -60, 60, 60, -190, -42, -95, -97,
	-97, -60, -190, 9, 100, 59, 18, 59, -91, -92,
	-250, -34, 47, -198, 374, -42, -217, -218, -219, -219,
	-217, 410, 88, -92, 87, -20, -16, -17, -19, 228,
	-109, 11, -51, -56, -44, -45, -46, -47, -58, -80,
	-249, -56, 59, -222, -125, 201, 25, 213, -102, -127,
	230, -106, 319, 318, -117, 329, -104, 317, 263, 316,
	-210, 59, -116, 11, 11, 11, 11, -219, 228, -75,
	-74, -75, -113, 19, 60, 60, 60, -188, -188, 58,
	-249, 60, 59, -204, -204, 60, 60, -190, 60, -189,
	-67, 308, -236, -250, -250, -250, 59, -250, -250, 59,
	-250, 19, -250, 59, -250, 19, -249, -37, 366, -42,
	60, 65, 65, -56, -200, -170, -170, 374, -63, 16,
	-63, -63, -63, 65, 387, 166, 389, 16, -250, 167,
	-88, 111, -190, -60, -190, -189, 60, -60, -60, -190,
	-189, 42, -42, -42, -90, -93, -39, 408, 410, -219,
	88, 88, -93, -217, 89, 89, -218, -57, 29, -56,
	-56, -51, -251, 59, 11, 57, 33, 59, -52, -54,
	-53, -55, 46, 50, 52, 47, 48, 49, 53, -125,
	-44, -249, -124, 167, -122, 25, -220, -116, 202, -130,
	19, 59, -102, 230, -103, -107, 320, 322, 90, 123,
	-121, -116, 63, 31, 33, -243, 29, -218, -250, -112,
	199, -252, -231, 220, 81, 60, 60, -188, -116, -191,
	-60, -190, -189, 145, -67, -67, -67, -67, -67, -67,
	-250, 63, 60, 60, 58, -63, -63, 391, -122, 16,
	-250, -189, -190, -190, -190, -189, 43, -43, 11, -42,
	88, -219, 410, -17, -20, 141, -18, 141, 410, 88,
	-98, 167, -56, -98, 57, -44, -56, -101, -105, -81,
	-45, -46, -46, -45, -46, 46, 46, 46, 51, 46,
	51, 46, -53, -122, -250, -59, 54, 140, 55, -249,
	-122, 19, -225, -224, 65, 218, 217, 81, 216, -116,
	-106, -103, 59, 321, 323, 324, 56, 77, -42, -117,
	-151, -174, 88, 228, 200, -232, 221, 220, -190, -190,
	60, -250, -189, -56, -250, -250, -250, -250, -250, -36,
	100, 374, -174, 123, -239, -240, -42, -189, -189, -60,
	-44, 88, 89, -42, -42, -65, 33, 38, -3, -249,
	-249, -60, -44, -60, -43, 59, 90, -49, -48, 56,
	57, -50, 56, -48, 46, 46, -228, 374, 136, 136,
	136, -99, -116, -3, -226, 59, -219, 228, 63, 41,
	219, -107, -108, 325, 322, 328, 90, -218, 223, 222,
	-189, -189, 58, -250, 372, 53, 377, 60, -117, -250,
	-88, 59, -86, 13, 141, -217, -20, -20, -100, 56,
	-101, -76, -78, -77, -249, -3, -94, -96, 6, -116,
	-114, -115, -99, -88, -60, -60, -105, -42, -42, 58,
	-42, 58, -249, -249, -249, -250, 59, -224, 88, -217,
	63, 322, 326, 327, -42, 410, -174, 43, 373, 378,
	-250, -240, -87, 14, 16, 410, 30, -100, 59, -250,
	-250, -250, 59, 123, -250, -92, -88, -95, -227, -229,
	397, 398, 399, 400, 401, 402, 403, 404, -95, -95,
	-95, -124, -116, 88, 410, 88, 60, 43, -42, -74,
	88, 155, -78, 38, -3, -249, -96, -116, -92, 60,
	60, 59, -250, -250, -250, -59, 88, 374, 141, 9,
	-76, -3, -229, -228, 377, -101, -250, 378,
}

var yyDef = [...]int16{
	0, -2, 1, 2, 7, 8, 9, 10, 0, -2,
	0, 0, 964, 0, 0, 4, 16, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 962,
	555, 556, 557, 560, 0, 0, 570, 568, 569, 967,
	968, 969, 970, 971, 966, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 0, 0, 965, 0, 0, 0, 3, 0,
	270, 326, 326, 326, 326, 0, 0, 0, 962, 0,
	962, 0, 885, 0, 0, -2, -2, 0, 974, 0,
	675, 972, 973, 962, 40, 0, 42, 0, 44, 0,
	0, 561, 558, 559, 258, 0, 0, 0, 0, 259,
	0, 263, 0, 265, 0, 0, 0, 576, 0, 286,
	470, 466, 291, 292, 293, 294, 295, 0, 0, 373,
	374, 375, 376, 377, 415, 416, 458, 445, 460, 458,
	460, 422, 458, 460, 473, 473, 473, 473, 473, 430,
	431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 0, 0, 406, 458, 458, 458, 458, 458,
	412, 413, 458, 447, 448, 449, 450, 451, 452, 453,
	454, 0, 458, 398, 396, 400, 405, 378, 379, 380,
	381, 382, 383, 384, 385, 386, 387, 389, 390, 392,
	393, 403, 404, 287, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 205, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 571, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 268, 578, 0, 581, 271,
	272, 273, 274, 275, 276, 277, 0, 562, 564, 0,
	551, 0, 0, 0, 0, 0, 0, 523, 524, 299,
	0, 301, 0, 303, 0, 305, 306, 0, 308, 310,
	562, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	472, 468, 467, 0, 0, 473, 0, 458, 446, 473,
	0, 473, 473, 423, 424, 476, 0, 476, 476, 476,
	476, 0, 0, 463, 463, 409, 410, 411, 414, 0,
	388, 391, 0, 398, 397, 394, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 140, 0,
	242, 0, 212, 208, 209, 210, 207, 0, 0, 887,
	0, -2, -2, 975, 34, 676, 976, 0, 0, 0,
	963, 0, 0, 0, 0, 255, 0, 261, 260, 264,
	266, 0, 0, 0, 0, 0, 582, 584, 580, 0,
	534, 0, 0, 565, 0, 551, 0, 519, -2, 0,
	552, 553, 983, 1151, 0, 0, 514, 516, 0, 551,
	564, 300, 0, 0, 0, 307, 309, 0, 313, 314,
	983, 0, 346, 0, 0, 327, 0, 330, -2, 333,
	334, 0, 336, 370, 339, 340, 341, 0, 343, 458,
	458, 366, 0, 696, 697, 0, 0, 0, 0, 344,
	345, 471, 290, 469, 296, 297, 476, 0, 473, 476,
	0, 0, 476, 476, 425, 477, 0, 0, 426, 427,
	428, 429, 0, 456, 0, 407, 0, 0, 408, 0,
	0, 395, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 962, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 43, 45, 0, 37, 574, 572,
	573, 0, 39, 0, 564, 51, 52, 256, 0, 0,
	11, 12, 13, 14, 15, 0, 583, 579, 0, 527,
	458, 458, 983, 0, 0, 0, 0, 0, 551, 0,
	0, 0, 518, 0, 0, 685, 983, 692, 694, 0,
	0, 0, 983, 739, 740, 741, 742, 743, 744, 983,
	983, 983, 983, 983, 983, 983, 770, 771, 772, 773,
	0, 775, -2, 891, 885, 893, 894, 895, 896, 897,
	898, 899, 0, 0, 943, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 805,
	815, 815, 815, 815, 815, 815, 815, 0, 0, 0,
	0, 0, 984, 512, 513, 515, 517, 521, 551, 0,
	565, 325, 302, 562, 304, 983, 0, 0, 0, 347,
	0, 900, 0, 0, 0, 0, 332, 0, 335, 337,
	338, 0, 362, 0, 364, 0, 0, -2, 983, 983,
	0, 417, 459, 476, 419, 461, 462, 420, 421, 478,
	474, 475, 473, 0, 473, 0, 0, 455, 0, 401,
	0, 0, 0, 0, 0, 525, 526, 458, 0, 0,
	0, 0, 0, -2, 909, 0, 588, 0, 0, -2,
	0, 0, 243, 244, 240, 213, 211, 643, 644, 0,
	0, 888, 143, 36, 0, 38, 0, 54, 55, 565,
	564, 53, 262, 577, 585, 586, 587, 480, 0, 914,
	531, 533, 530, 0, 562, 541, 542, 0, 0, 562,
	563, 983, 0, 551, 0, 983, 564, 0, 0, 368,
	983, 983, 0, 690, 0, 1152, 688, 983, 0, 0,
	983, 983, 983, 983, 983, 983, 983, 983, 983, 983,
	983, 983, 983, 983, 983, 0, 0, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 693, 0,
	710, 0, 0, 0, 685, 59, 0, 983, 737, 0,
	0, 761, 983, 762, 763, 764, 765, 766, 767, 774,
	0, 890, 892, 0, 0, 983, 983, 983, 983, 983,
	983, 983, 598, 0, 875, 0, 0, 0, 0, 0,
	0, 807, 0, 808, 809, 810, 811, 812, 813, 814,
	854, 0, 856, 857, 858, 859, 860, 861, 0, 0,
	0, 0, 378, 0, 0, 873, 983, -2, 983, 983,
	522, 0, 0, 0, 0, 0, 983, 322, 0, 901,
	328, 0, 370, 331, 371, 470, 342, 363, 365, 367,
	0, 983, 0, 604, 606, 610, 0, 0, 0, 0,
	418, 476, 457, 476, 464, 465, 0, 0, 0, 0,
	0, 683, 1151, 0, 0, 0, 0, 0, 917, 0,
	0, 592, 595, 590, 59, 0, 0, 246, 247, 248,
	249, 250, 0, 881, 0, 0, 0, 35, 145, 575,
	0, 0, 565, 509, 481, 0, 483, 0, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	528, 529, 915, 916, 914, 535, 0, 543, 544, 536,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	480, 550, 0, 686, 687, 689, 714, 0, 716, 718,
	691, 698, 983, 983, 983, 702, 733, 734, 735, 0,
	983, 983, 983, 731, 706, 0, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 759, 826,
	827, 0, 769, 0, 0, 712, 713, 736, 983, 942,
	59, 757, 370, 0, 758, 768, 0, 887, 889, 0,
	0, 0, 0, -2, 458, 831, 458, 400, 398, 835,
	396, 837, 838, 839, 458, 842, 458, 458, 458, 847,
	848, 458, 458, 851, 458, 458, 0, 0, 0, 0,
	983, 599, 883, 878, 983, 0, 0, 802, 803, 804,
	806, 816, 855, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 603, 0, 0, 0, 566, 983, 368,
	315, 318, 319, 0, 348, 0, 0, 372, 776, 0,
	983, 615, 607, 611, 0, 613, 614, 0, 615, 615,
	-2, 443, 444, 399, 402, 683, 0, 0, 681, 0,
	0, 0, 683, 681, 480, 921, 983, 983, 909, 61,
	0, 593, 594, 598, 596, 597, 589, 60, 0, 251,
	0, 0, 983, 645, 31, 214, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 909,
	983, 121, 122, 588, 588, 588, 0, 588, 0, 0,
	0, 109, 983, 0, -2, 954, 65, 66, 235, 236,
	0, 0, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	0, 0, 0, 0, 0, 479, 0, 484, 0, 0,
	0, 487, 0, 502, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 532, 0, 0, 681, 983,
	0, 983, 0, 0, 368, 0, 480, 509, 369, 715,
	717, 719, 699, 700, 701, 703, 731, 707, 0, 704,
	983, 983, 0, 695, 711, 738, -2, 0, 986, 370,
	989, 990, 782, 783, 0, 0, 983, 828, 473, 832,
	833, 834, 398, 840, 841, 843, 844, 845, 846, 849,
	850, 852, 853, 0, 983, 983, 983, 983, 0, 909,
	0, 879, 983, 0, 800, 801, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 817, 818, 819, 820, 0,
	0, 0, 311, 0, 0, 0, 324, 329, 777, 605,
	778, 0, 612, 608, 0, 779, 780, 0, 681, 0,
	0, 480, 983, 0, 683, 683, 681, 480, 25, 56,
	0, 0, 918, 910, 911, 914, 917, 59, 600, 591,
	-2, 253, 983, 241, 0, 882, 0, 217, 0, 0,
	917, 0, 964, 0, 0, 81, -2, 0, 84, 89,
	90, 0, 0, 991, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 104, 105, 106, 0, 0,
	0, 0, 0, 0, -2, -2, 239, 240, 144, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 0, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 201, 202, 203, 0, 0, 0,
	0, 0, 510, 0, 485, 490, 488, 491, 503, 504,
	492, 493, 494, 495, 496, 497, 498, 505, 506, 499,
	500, 507, 508, 562, 562, 278, 281, 282, 283, 284,
	285, 0, 0, 480, 549, 0, 509, 548, 705, 983,
	732, 708, 0, 985, 0, 988, 0, 458, 0, 0,
	829, 830, 836, 0, 0, 0, 0, 0, 0, 876,
	799, 884, 983, 0, 867, 0, 869, 0, 870, 864,
	866, 868, 871, 872, 0, 567, 368, 0, 0, 320,
	321, 323, 0, 0, 0, 0, 0, 0, 359, 0,
	0, 0, 781, 480, 681, 480, 509, 682, 0, 681,
	681, 480, 509, 922, 0, 983, 983, 983, 913, 921,
	62, 983, 601, 29, 0, 252, 30, 0, 116, 215,
	0, 0, 218, 921, 0, 127, 125, 121, 128, 0,
	0, 0, 0, 73, 0, 622, 624, 625, 626, 658,
	0, 660, 0, 0, 0, 88, 659, 0, 77, 0,
	0, 947, 141, 142, 0, 0, 0, -2, 0, 958,
	955, 0, 107, 110, 111, 112, 113, 114, 0, 233,
	238, 0, 881, 0, 145, 46, 977, 0, 0, 0,
	0, 482, 0, 537, 538, 681, 480, 509, 0, 546,
	709, 760, 987, 784, 788, 785, 983, 787, 789, 983,
	791, 983, 793, 983, 795, 983, 983, 0, 0, 880,
	865, 0, 0, 0, 312, 316, 317, 0, 350, 0,
	352, 353, 354, 355, 356, 357, 358, 0, 616, 0,
	0, 609, 509, 480, 22, 18, 684, 480, 480, 509,
	24, 0, 919, 920, 912, 57, 620, 983, 0, 117,
	219, 216, 232, 0, 0, 0, 0, 75, 0, 674,
	-2, 0, 0, 0, 71, 72, 0, 0, 0, 0,
	0, 0, 663, 0, 0, 666, 0, 0, 0, 0,
	0, 0, 677, 0, 661, 0, 85, 658, 0, 86,
	0, 0, 78, 0, 80, 130, 0, 0, 983, 0,
	476, 959, 960, 961, 957, 992, 0, 0, 234, 0,
	0, 161, 980, 978, 0, 480, 480, 0, 0, 486,
	279, 509, 547, 0, 0, 0, 0, 0, 0, 821,
	798, 877, 862, 863, 0, 349, 351, 360, 0, 983,
	618, 17, 23, 509, 509, 21, 923, 681, 0, 254,
	32, 118, 0, 123, 124, 983, 126, 983, 0, 129,
	0, 0, 673, 681, 0, 681, 74, 620, 944, 0,
	623, 654, 656, 0, 651, 664, 665, 667, 0, 669,
	0, 671, 672, 627, 628, 629, 0, 0, 0, 0,
	662, 0, 0, 91, 93, 0, 96, 0, 98, 99,
	948, 79, 0, 0, 133, 134, 949, 950, 951, 0,
	953, 108, 115, 0, 241, 48, 0, 979, 509, 509,
	47, 511, 545, 0, 786, 790, 792, 794, 796, 0,
	0, 0, 0, 0, 0, 906, 908, 19, 20, 902,
	621, 0, 0, 0, 0, 936, 0, 0, -2, 0,
	0, 909, 681, 70, 681, 0, 983, 648, 655, 983,
	0, 649, 983, 650, 668, 670, 641, 0, 0, 0,
	0, 0, 646, -2, 83, 0, 100, 0, 94, 0,
	97, 131, 132, 0, 0, 138, 983, 0, 981, 982,
	49, 50, 0, 797, 0, 0, 0, 540, 361, 617,
	0, 983, 904, 0, 119, 0, 0, 127, 63, 0,
	936, 924, 938, 940, 983, 59, 0, 930, -2, 932,
	934, 935, 0, 917, 69, 909, 945, 946, 652, 0,
	657, 0, 0, 0, 0, 660, 0, 92, 101, 0,
	95, 135, 136, 137, 952, 0, 0, 822, 0, 825,
	619, 907, 58, 983, 983, 0, 0, 64, 0, 941,
	-2, 0, 0, 0, 76, 68, 917, 0, 0, 631,
	633, 634, 635, 636, 637, 638, 639, 640, 0, 0,
	0, 677, 647, 102, 0, 33, 539, 823, 905, 903,
	0, 0, 939, 0, -2, 0, 931, 933, 67, 653,
	630, 0, 678, 679, 680, 629, 103, 0, 120, 0,
	927, 59, 632, 642, 0, 937, -2, 824,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 410,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 411, 3, 412, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:440
		{
			switch len(yyDollar[1].statements) {
			case 0:
				setParseTree(yylex, nil)
			case 1:
				setParseTree(yylex, yyDollar[1].statements[0])
			default:
				setParseTree(yylex, &MultiStatement{Statements: yyDollar[1].statements})
			}
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:453
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:457
		{
			yyVAL.statements = append([]Statement{yyDollar[1].statement}, yyDollar[3].statements...)
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:461
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:466
		{
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:467
		{
		}
	case 11:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:477
		{
			tableName := ""
			if !yyDollar[4].tableName.Schema.isEmpty() {
				tableName = yyDollar[4].tableName.Schema.String() + "."
			}
			tableName += yyDollar[4].tableName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Table:  yyDollar[4].tableName,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     tableName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 12:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:494
		{
			tableName := ""
			if !yyDollar[4].tableName.Schema.isEmpty() {
				tableName = yyDollar[4].tableName.Schema.String() + "."
			}
			tableName += yyDollar[4].tableName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Table:  yyDollar[4].tableName,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     tableName,
					Comment:    "",
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:511
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:530
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    "",
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:549
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "INDEX",
					Object:     yyDollar[4].colIdent.String(),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:562
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 17:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:567
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 18:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:587
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 19:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:607
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 20:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:628
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 21:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:649
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 22:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:671
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 23:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:687
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 24:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:704
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:724
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:739
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:750
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:762
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 29:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:773
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 30:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:789
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:803
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 32:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:817
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 33:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:830
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:844
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name:       yyDollar[3].tableName,
					Type:       yyDollar[5].columnType,
					EnumValues: yyDollar[5].columnType.EnumValues,
				},
			}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:856
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:861
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:881
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[4].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:902
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:922
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[4].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:943
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:952
		{
			yyVAL.statement = &DDL{
				Action:      CreateSchema,
				IfNotExists: true,
				Schema: &Schema{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:963
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:972
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:982
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:991
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: string(yyDollar[6].bytes),
				},
			}
		}
	case 46:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1003
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 47:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1017
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 48:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1031
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 49:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1051
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 50:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1069
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1087
		{
			yyVAL.statement = &DDL{
				Action:    AddExclusion,
				Table:     yyDollar[4].tableName,
				Exclusion: yyDollar[6].exclusionDefinition,
			}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1095
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 53:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1104
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1119
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1127
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 58:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1134
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1140
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1144
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1150
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1154
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 63:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1161
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1173
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1185
		{
			yyVAL.str = InsertStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1189
		{
			yyVAL.str = ReplaceStr
		}
	case 67:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1195
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 68:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1201
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1205
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1209
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1214
		{
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1215
		{
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1219
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1223
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1228
		{
			yyVAL.partitions = nil
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1232
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1238
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1242
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1246
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1250
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1256
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1260
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1271
		{
			yyVAL.statement = &Declare{
				Type: declareHandler,
				Handler: &HandlerDefinition{
					Action:     yyDollar[2].str,
					Conditions: yyDollar[5].handlerConditions,
					Statement:  yyDollar[6].statement,
				},
			}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1284
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1288
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1294
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1299
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1303
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1309
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1313
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1319
		{
			yyVAL.handlerConditions = []HandlerCondition{yyDollar[1].handlerCondition}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1323
		{
			yyVAL.handlerConditions = append(yyVAL.handlerConditions, yyDollar[3].handlerCondition)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1329
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionMysqlErrorCode, Value: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1333
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[2].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1337
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[3].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1341
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlwarning}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1345
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionNotFound}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1349
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlexception}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1353
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionName, Value: string(yyDollar[1].colIdent.String())}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1359
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1363
		{
			yyVAL.statement = &BeginEnd{
				Statements:        []Statement{},
				SuppressSemicolon: false,
			}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1370
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1377
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1386
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1393
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1400
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1407
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1415
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1425
		{
			yyVAL.str = ""
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1429
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1433
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1437
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1441
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1447
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1454
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1468
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1472
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1476
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 119:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1483
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 120:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1491
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1501
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1505
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1512
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1522
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1533
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1538
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1543
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1550
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1554
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1565
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1569
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1575
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1579
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1583
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1589
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1593
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1597
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1601
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1607
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1611
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1617
		{
			yyVAL.str = SessionStr
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1621
		{
			yyVAL.str = GlobalStr
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1694
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1698
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1702
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1706
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1712
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1716
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1720
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1725
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1731
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1735
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1741
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1745
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1750
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1763
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1772
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1788
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1801
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1811
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1816
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1822
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1823
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1826
		{
			yyVAL.exprs = nil
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1827
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1831
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1836
		{
			yyVAL.empty = struct{}{}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1838
		{
			yyVAL.empty = struct{}{}
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1841
		{
			yyVAL.bytes = nil
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1845
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1849
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1854
		{
			yyVAL.bytes = nil
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1858
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1862
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1866
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1870
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1874
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1879
		{
			yyVAL.expr = nil
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1883
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1888
		{
			yyVAL.expr = nil
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1892
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1897
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1901
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1906
		{
			yyVAL.bytes = nil
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1910
		{
			yyVAL.bytes = nil
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1916
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1925
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1935
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				Table:  yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1945
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				Table:    yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1957
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1966
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: yyDollar[5].colIdent.String(),
				},
			}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1976
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1985
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: string(yyDollar[5].bytes),
				},
			}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1997
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2004
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2010
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2014
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2019
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2023
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2027
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2031
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2035
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2039
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2043
		{
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2049
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      NewColIdent(""), // Default index type
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 279:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2058
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent, // GIST, btree, etc.
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2069
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2073
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2079
		{
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "=",
			}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2086
		{
			// AND token represents && in the lexer
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "&&",
			}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2094
		{
			// OR token represents || in the lexer
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "||",
			}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2102
		{
			// Handle all other operators and GIST-specific operators
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   string(yyDollar[3].colIdent.val),
			}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2112
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2116
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2121
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2126
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2132
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2143
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2147
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + "." + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2151
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].tableIdent.String() + "." + yyDollar[3].tableIdent.String()}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2157
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2170
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2175
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2180
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2185
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2191
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2196
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2201
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2206
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2211
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2216
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2221
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2226
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 311:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2231
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 312:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2240
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2250
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2255
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 315:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2260
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 316:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2267
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 317:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2274
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 318:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2282
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 319:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2287
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 320:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2292
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 321:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2297
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2303
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 323:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2309
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 324:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2316
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2323
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2329
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2339
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 329:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2343
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2347
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2351
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2357
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2361
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2365
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2369
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2373
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2377
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2381
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2385
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2389
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2393
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2397
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2403
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2409
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2415
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2421
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2425
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2430
		{
			yyVAL.sequence = &Sequence{}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2434
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2439
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2444
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2449
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2454
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2459
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2464
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2469
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2474
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2479
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2484
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2489
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 361:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2494
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2501
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2505
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2509
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2513
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2517
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2521
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2526
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2530
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2535
		{
			yyVAL.bytes = nil
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), DisplayWidth: yyDollar[2].optVal}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2572
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2584
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2599
		{
			yyVAL.str = ""
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2603
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2608
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2612
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2620
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2624
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2630
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2665
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2669
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2677
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2681
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2811
		{
			yyVAL.str = ""
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2815
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2859
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2864
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2869
		{
			yyVAL.optVal = nil
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2873
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2878
		{
			yyVAL.optVal = nil
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2882
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2886
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2895
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2899
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2903
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2908
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2912
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2917
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2921
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2926
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2930
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2934
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2939
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2943
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2947
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2952
		{
			yyVAL.str = ""
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2956
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2960
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2966
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2971
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2975
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2979
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2989
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2995
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2999
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3005
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3009
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3014
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3018
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3022
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3026
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3030
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3034
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3038
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3042
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3046
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3050
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3054
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3058
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3069
		{
			yyVAL.str = ""
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3073
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3079
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3083
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3089
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3093
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3099
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3103
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3109
		{
			yyVAL.indexPartition = nil
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3113
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3117
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3123
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3127
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3131
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3135
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3139
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3143
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3147
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3151
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3159
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3163
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3169
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3173
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3179
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3184
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3190
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3194
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3200
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3205
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3223
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3228
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3235
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 537:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3242
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 538:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3249
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 539:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3258
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 540:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3269
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3280
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3284
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3288
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3292
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 545:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3298
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 547:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3319
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 548:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3330
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 549:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3341
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3350
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3359
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3363
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3367
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3373
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3377
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3381
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3385
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3389
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3393
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3399
		{
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3400
		{
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3404
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3408
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3413
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3420
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3424
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3430
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3434
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3440
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3444
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3451
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3455
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3461
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3465
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3472
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3476
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3482
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3486
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3491
		{
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3492
		{
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3496
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3500
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3504
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3510
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3514
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3518
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3523
		{
			setAllowComments(yylex, true)
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3527
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3533
		{
			yyVAL.bytes2 = nil
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3537
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3543
		{
			yyVAL.str = UnionStr
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3547
		{
			yyVAL.str = UnionAllStr
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3551
		{
			yyVAL.str = UnionDistinctStr
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3556
		{
			yyVAL.str = ""
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3560
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3564
		{
			yyVAL.str = SQLCacheStr
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3569
		{
			yyVAL.str = ""
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3573
		{
			yyVAL.str = DistinctStr
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.str = ""
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.str = StraightJoinHint
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3587
		{
			yyVAL.selectExprs = nil
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3591
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3597
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3601
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3607
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3611
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3615
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 609:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3619
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3624
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3628
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3632
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3639
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3644
		{
			yyVAL.overExpr = nil
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3648
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 617:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3652
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3656
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 619:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3660
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3665
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3669
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3675
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3679
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3689
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3693
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3697
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3702
		{
			yyVAL.strs = []string{}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3706
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3712
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3716
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3726
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3730
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3734
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3738
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3742
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3746
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3750
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3756
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 642:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3760
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3766
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3775
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3781
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3785
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3798
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3802
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3806
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3810
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3816
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3818
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3822
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3824
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3828
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3830
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3833
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3835
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3838
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3842
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3846
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3852
		{
			yyVAL.str = JoinStr
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3856
		{
			yyVAL.str = JoinStr
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3860
		{
			yyVAL.str = JoinStr
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3866
		{
			yyVAL.str = StraightJoinStr
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.str = LeftJoinStr
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.str = LeftJoinStr
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.str = RightJoinStr
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.str = RightJoinStr
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3890
		{
			yyVAL.str = NaturalJoinStr
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3894
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3904
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3908
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3914
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3918
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.indexHints = nil
		}
	case 678:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3927
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3931
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 680:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3935
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3940
		{
			yyVAL.expr = nil
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3944
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3949
		{
			yyVAL.columns = nil
		}
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3953
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3963
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3971
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3975
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3979
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3983
		{
			typeName := ""
			if yyDollar[3].columnType.Type != "" {
				typeName = yyDollar[3].columnType.Type
			}
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[1].expr, Type: &ConvertType{Type: typeName}}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3991
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4001
		{
			yyVAL.str = ""
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4005
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4011
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4015
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4021
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4025
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4029
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4033
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4037
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4045
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 705:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4049
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4053
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 708:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 709:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4069
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4074
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4078
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4082
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4088
		{
			yyVAL.str = IsNullStr
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4092
		{
			yyVAL.str = IsNotNullStr
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4096
		{
			yyVAL.str = IsTrueStr
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4100
		{
			yyVAL.str = IsNotTrueStr
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.str = IsFalseStr
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.str = IsNotFalseStr
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4114
		{
			yyVAL.str = EqualStr
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4118
		{
			yyVAL.str = LessThanStr
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4122
		{
			yyVAL.str = GreaterThanStr
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.str = LessEqualStr
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4130
		{
			yyVAL.str = GreaterEqualStr
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4134
		{
			yyVAL.str = NotEqualStr
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4138
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.str = PosixRegexStr
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4146
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4150
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4154
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4159
		{
			yyVAL.expr = nil
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4169
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4173
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4183
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4199
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4203
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4207
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4219
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4223
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4227
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4231
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4235
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4239
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4243
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4247
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4251
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4255
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4259
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4263
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4267
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4271
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4275
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4279
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 760:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4283
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4287
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4291
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4295
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4303
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4317
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4321
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4325
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4333
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4341
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4349
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4353
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4363
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 777:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4367
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 778:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4371
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 779:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4375
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 780:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4379
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 781:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4383
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 782:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4393
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4397
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 784:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4401
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 785:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4406
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 786:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4410
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 787:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4414
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 788:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4418
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 789:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4422
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 790:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4426
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 791:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4430
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 792:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4434
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 793:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4438
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 794:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4442
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 795:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4446
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 796:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4450
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 797:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4454
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 798:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4458
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 799:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4462
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 800:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4466
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 801:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4471
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4475
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4479
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4483
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4494
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4498
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4502
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4506
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4510
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4515
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4520
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4525
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4530
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4534
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 817:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4548
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 818:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4552
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 819:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4556
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 820:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4560
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4566
		{
			yyVAL.str = ""
		}
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4570
		{
			yyVAL.str = BooleanModeStr
		}
	case 823:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4574
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 824:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4578
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4582
		{
			yyVAL.str = QueryExpansionStr
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4588
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4592
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4598
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4602
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4606
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4610
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4614
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4618
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4624
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4630
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4634
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.convertType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4640
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4644
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4648
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4652
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4656
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4660
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4664
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4668
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4672
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4676
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4680
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4688
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4692
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4696
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4700
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4704
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4710
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4718
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4722
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4726
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4730
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4734
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4738
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 862:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4742
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 863:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4746
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 864:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4750
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 865:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4754
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: NewIntVal(yyDollar[4].bytes)}
		}
	case 866:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4758
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 867:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 868:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4766
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 869:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4770
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4774
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 871:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4778
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 872:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4782
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4786
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4791
		{
			yyVAL.expr = nil
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4795
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4800
		{
			yyVAL.str = string("")
		}
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4804
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4810
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4814
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 880:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4820
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 881:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4825
		{
			yyVAL.empty = struct{}{}
		}
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4827
		{
			yyVAL.empty = struct{}{}
		}
	case 883:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4830
		{
			yyVAL.expr = nil
		}
	case 884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4834
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4840
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4844
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4848
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 888:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4852
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 889:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4858
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4864
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4868
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4873
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4878
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4882
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4886
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4890
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4894
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4898
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4902
		{
			yyVAL.expr = &NullVal{}
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4908
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4912
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 902:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4917
		{
			yyVAL.exprs = nil
		}
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4921
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4926
		{
			yyVAL.expr = nil
		}
	case 905:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4930
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4936
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4940
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4946
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 909:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4951
		{
			yyVAL.orderBy = nil
		}
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4955
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4961
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4965
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4971
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 914:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4976
		{
			yyVAL.str = AscScr
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4980
		{
			yyVAL.str = AscScr
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4984
		{
			yyVAL.str = DescScr
		}
	case 917:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4989
		{
			yyVAL.limit = nil
		}
	case 918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4993
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 919:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4997
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 920:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5001
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 921:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5006
		{
			yyVAL.str = ""
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5010
		{
			yyVAL.str = ForUpdateStr
		}
	case 923:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5014
		{
			yyVAL.str = ShareModeStr
		}
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5027
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5031
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 926:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5035
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 927:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5040
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 928:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5044
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 929:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5048
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5055
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 931:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5059
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5065
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5069
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5073
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5077
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 936:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5082
		{
			yyVAL.updateExprs = nil
		}
	case 937:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5086
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5092
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 939:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5096
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5102
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5106
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5112
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5118
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5128
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5132
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5138
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5144
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 948:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5148
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 949:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5154
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 950:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5158
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5162
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 952:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5167
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5171
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5177
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5183
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 957:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5190
		{
			yyVAL.bytes = []byte("charset")
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5197
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5201
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5205
		{
			yyVAL.expr = &Default{}
		}
	case 962:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5210
		{
			yyVAL.empty = struct{}{}
		}
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5212
		{
			yyVAL.empty = struct{}{}
		}
	case 964:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5215
		{
			yyVAL.str = ""
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5217
		{
			yyVAL.str = IgnoreStr
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5221
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5228
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5232
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5236
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5240
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5246
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5250
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5255
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5262
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 977:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5268
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5272
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 979:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5276
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 980:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5282
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5286
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5290
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 983:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5296
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5300
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 985:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5307
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5314
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5318
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5325
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5329
		{
			yyVAL.arrayElement = NewIntVal(yyDollar[1].bytes)
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5333
		{
			yyVAL.arrayElement = NewFloatVal(yyDollar[1].bytes)
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5339
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5343
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5520
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5529
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
