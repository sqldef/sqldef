// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const STATUS = 57489
const VARIABLES = 57490
const RESTRICT = 57491
const CASCADE = 57492
const NO = 57493
const ACTION = 57494
const PERMISSIVE = 57495
const RESTRICTIVE = 57496
const PUBLIC = 57497
const CURRENT_USER = 57498
const SESSION_USER = 57499
const PAD_INDEX = 57500
const FILLFACTOR = 57501
const IGNORE_DUP_KEY = 57502
const STATISTICS_NORECOMPUTE = 57503
const STATISTICS_INCREMENTAL = 57504
const ALLOW_ROW_LOCKS = 57505
const ALLOW_PAGE_LOCKS = 57506
const BEFORE = 57507
const AFTER = 57508
const EACH = 57509
const ROW = 57510
const SCROLL = 57511
const CURSOR = 57512
const OPEN = 57513
const CLOSE = 57514
const FETCH = 57515
const PRIOR = 57516
const FIRST = 57517
const LAST = 57518
const DEALLOCATE = 57519
const INSTEAD = 57520
const OF = 57521
const DEFERRABLE = 57522
const INITIALLY = 57523
const IMMEDIATE = 57524
const DEFERRED = 57525
const CONCURRENTLY = 57526
const SQL = 57527
const SECURITY = 57528
const BEGIN = 57529
const START = 57530
const TRANSACTION = 57531
const COMMIT = 57532
const ROLLBACK = 57533
const BIT = 57534
const TINYINT = 57535
const SMALLINT = 57536
const SMALLSERIAL = 57537
const MEDIUMINT = 57538
const INT = 57539
const INTEGER = 57540
const SERIAL = 57541
const BIGINT = 57542
const BIGSERIAL = 57543
const INTNUM = 57544
const REAL = 57545
const DOUBLE = 57546
const PRECISION = 57547
const FLOAT_TYPE = 57548
const DECIMAL = 57549
const NUMERIC = 57550
const SMALLMONEY = 57551
const MONEY = 57552
const TIME = 57553
const TIMESTAMP = 57554
const DATETIME = 57555
const YEAR = 57556
const DATETIMEOFFSET = 57557
const DATETIME2 = 57558
const SMALLDATETIME = 57559
const CHAR = 57560
const VARCHAR = 57561
const VARYING = 57562
const BOOL = 57563
const CHARACTER = 57564
const VARBINARY = 57565
const NCHAR = 57566
const NVARCHAR = 57567
const NTEXT = 57568
const UUID = 57569
const TEXT = 57570
const TINYTEXT = 57571
const MEDIUMTEXT = 57572
const LONGTEXT = 57573
const CITEXT = 57574
const BLOB = 57575
const TINYBLOB = 57576
const MEDIUMBLOB = 57577
const LONGBLOB = 57578
const JSON = 57579
const JSONB = 57580
const ENUM = 57581
const GEOMETRY = 57582
const POINT = 57583
const LINESTRING = 57584
const POLYGON = 57585
const GEOMETRYCOLLECTION = 57586
const MULTIPOINT = 57587
const MULTILINESTRING = 57588
const MULTIPOLYGON = 57589
const VARIADIC = 57590
const ARRAY = 57591
const NOW = 57592
const GETDATE = 57593
const BPCHAR = 57594
const TEXT_PATTERN_OPS = 57595
const NULLX = 57596
const AUTO_INCREMENT = 57597
const APPROXNUM = 57598
const SIGNED = 57599
const UNSIGNED = 57600
const ZEROFILL = 57601
const ZONE = 57602
const AUTOINCREMENT = 57603
const DATABASES = 57604
const TABLES = 57605
const VSCHEMA_TABLES = 57606
const EXTENDED = 57607
const FULL = 57608
const PROCESSLIST = 57609
const NAMES = 57610
const CHARSET = 57611
const GLOBAL = 57612
const SESSION = 57613
const ISOLATION = 57614
const LEVEL = 57615
const READ = 57616
const WRITE = 57617
const ONLY = 57618
const REPEATABLE = 57619
const COMMITTED = 57620
const UNCOMMITTED = 57621
const SERIALIZABLE = 57622
const NEW = 57623
const CONCAT_NULL_YIELDS_NULL = 57624
const CURSOR_CLOSE_ON_COMMIT = 57625
const QUOTED_IDENTIFIER = 57626
const ARITHABORT = 57627
const FMTONLY = 57628
const NOCOUNT = 57629
const NOEXEC = 57630
const NUMERIC_ROUNDABORT = 57631
const ANSI_DEFAULTS = 57632
const ANSI_NULL_DFLT_OFF = 57633
const ANSI_NULL_DFLT_ON = 57634
const ANSI_NULLS = 57635
const ANSI_PADDING = 57636
const ANSI_WARNINGS = 57637
const FORCEPLAN = 57638
const SHOWPLAN_ALL = 57639
const SHOWPLAN_TEXT = 57640
const SHOWPLAN_XML = 57641
const IMPLICIT_TRANSACTIONS = 57642
const REMOTE_PROC_TRANSACTIONS = 57643
const XACT_ABORT = 57644
const CURRENT_TIMESTAMP = 57645
const DATABASE = 57646
const CURRENT_DATE = 57647
const CURRENT_TIME = 57648
const LOCALTIME = 57649
const LOCALTIMESTAMP = 57650
const UTC_DATE = 57651
const UTC_TIME = 57652
const UTC_TIMESTAMP = 57653
const REPLACE = 57654
const CONVERT = 57655
const CAST = 57656
const SUBSTR = 57657
const SUBSTRING = 57658
const GROUP_CONCAT = 57659
const SEPARATOR = 57660
const INHERIT = 57661
const LEAD = 57662
const LAG = 57663
const MATCH = 57664
const AGAINST = 57665
const BOOLEAN = 57666
const LANGUAGE = 57667
const WITH = 57668
const WITHOUT = 57669
const PARSER = 57670
const QUERY = 57671
const EXPANSION = 57672
const UNUSED = 57673
const VIRTUAL = 57674
const STORED = 57675
const GENERATED = 57676
const ALWAYS = 57677
const IDENTITY = 57678
const SEQUENCE = 57679
const INCREMENT = 57680
const MINVALUE = 57681
const CACHE = 57682
const CYCLE = 57683
const OWNED = 57684
const NONE = 57685
const CLUSTERED = 57686
const NONCLUSTERED = 57687
const REPLICATION = 57688
const COLUMNSTORE = 57689
const INCLUDE = 57690
const HOLDLOCK = 57691
const NOLOCK = 57692
const NOWAIT = 57693
const PAGLOCK = 57694
const ROWLOCK = 57695
const TABLELOCK = 57696
const DEFINER = 57697
const INVOKER = 57698
const TYPECAST = 57699
const CHECK = 57700
const OVER = 57701

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	130, 396,
	-2, 145,
	-1, 398,
	59, 366,
	-2, 363,
	-1, 426,
	119, 786,
	-2, 236,
	-1, 446,
	119, 785,
	-2, 780,
	-1, 541,
	119, 786,
	-2, 236,
	-1, 563,
	266, 795,
	-2, 693,
	-1, 611,
	266, 795,
	-2, 436,
	-1, 643,
	5, 35,
	-2, 13,
	-1, 649,
	5, 35,
	-2, 15,
	-1, 784,
	266, 795,
	-2, 436,
	-1, 934,
	119, 788,
	-2, 784,
	-1, 944,
	266, 795,
	-2, 305,
	-1, 1021,
	266, 795,
	-2, 436,
	-1, 1080,
	58, 97,
	-2, 194,
	-1, 1083,
	58, 97,
	-2, 194,
	-1, 1134,
	5, 36,
	-2, 562,
	-1, 1210,
	5, 35,
	-2, 14,
	-1, 1263,
	58, 97,
	-2, 165,
	-1, 1395,
	86, 782,
	-2, 770,
	-1, 1484,
	55, 49,
	57, 49,
	-2, 51,
	-1, 1650,
	5, 35,
	-2, 741,
	-1, 1675,
	5, 35,
	-2, 58,
	-1, 1746,
	5, 36,
	-2, 742,
	-1, 1776,
	5, 35,
	-2, 744,
	-1, 1798,
	5, 36,
	-2, 745,
}

const yyPrivate = 57344

const yyLast = 8440

var yyAct = [...]int16{
	543, 524, 1579, 1704, 1755, 1597, 1367, 1668, 1033, 746,
	656, 1705, 30, 1701, 1641, 1507, 747, 39, 40, 1673,
	1580, 553, 1063, 1392, 996, 1194, 1566, 1520, 1519, 1660,
	1509, 63, 63, 63, 1389, 125, 128, 1572, 1049, 1505,
	57, 1494, 1226, 1376, 861, 1052, 1386, 1381, 1223, 1091,
	1372, 460, 1204, 1199, 1375, 888, 30, 1130, 834, 390,
	26, 849, 678, 873, 1029, 943, 42, 638, 977, 1124,
	517, 980, 838, 387, 637, 56, 535, 807, 1014, 551,
	898, 602, 222, 188, 64, 1183, 503, 522, 204, 1368,
	933, 58, 811, 59, 774, 143, 237, 236, 43, 523,
	423, 145, 425, 153, 1279, 393, 765, 123, 124, 431,
	133, 1302, 190, 449, 47, 148, 171, 706, 707, 708,
	709, 710, 711, 712, 705, 931, 1569, 43, 228, 9,
	1184, 1476, 510, 43, 399, 708, 709, 710, 711, 712,
	705, 63, 511, 186, 705, 603, 715, 1030, 384, 1262,
	49, 129, 684, 131, 1756, 1757, 1758, 1759, 1760, 1761,
	394, 142, 589, 1439, 232, 233, 206, 207, 208, 209,
	33, 382, 1800, 411, 227, 1456, 586, 230, 1087, 234,
	235, 244, 241, 400, 401, 50, 51, 442, 1736, 44,
	376, 45, 993, 1796, 379, 793, 421, 1329, 1330, 1001,
	1002, 1693, 695, 224, 1096, 1669, 43, 1789, 150, 43,
	1095, 43, 43, 1362, 43, 247, 472, 473, 1449, 1127,
	1735, 246, 43, 1692, 189, 1318, 43, 479, 1116, 1442,
	417, 52, 245, 1679, 1727, 1728, 1678, 1608, 1609, 1680,
	415, 858, 439, 1726, 492, 704, 703, 713, 714, 706,
	707, 708, 709, 710, 711, 712, 705, 1607, 464, 465,
	466, 467, 43, 435, 1426, 1521, 445, 1522, 646, 824,
	1076, 1066, 1065, 478, 823, 1331, 32, 482, 451, 192,
	741, 44, 1067, 45, 453, 205, 433, 455, 831, 458,
	459, 1300, 990, 1068, 436, 194, 438, 437, 197, 630,
	629, 33, 220, 31, 699, 43, 702, 1312, 397, 43,
	1146, 217, 716, 717, 718, 719, 720, 721, 722, 527,
	700, 701, 698, 723, 724, 725, 726, 704, 703, 713,
	714, 706, 707, 708, 709, 710, 711, 712, 705, 1144,
	471, 446, 1731, 45, 468, 1620, 1408, 1788, 193, 1214,
	130, 36, 491, 490, 1636, 1686, 1685, 1623, 554, 704,
	703, 713, 714, 706, 707, 708, 709, 710, 711, 712,
	705, 512, 167, 1335, 135, 1455, 1624, 1457, 160, 398,
	159, 384, 163, 164, 166, 1337, 715, 242, 161, 168,
	504, 400, 401, 126, 1252, 1515, 168, 1074, 33, 1621,
	1539, 1213, 715, 879, 500, 1536, 715, 1073, 1048, 588,
	652, 653, 889, 1573, 1437, 695, 1773, 195, 135, 663,
	200, 37, 1332, 202, 646, 442, 1076, 1066, 1065, 505,
	221, 495, 33, 1301, 1273, 166, 664, 691, 1067, 497,
	212, 213, 214, 215, 216, 835, 33, 686, 685, 1068,
	1069, 1070, 1072, 134, 414, 413, 1071, 502, 704, 703,
	713, 714, 706, 707, 708, 709, 710, 711, 712, 705,
	703, 713, 714, 706, 707, 708, 709, 710, 711, 712,
	705, 640, 496, 1088, 1089, 715, 856, 205, 695, 591,
	1558, 657, 794, 643, 661, 649, 665, 501, 1448, 1096,
	384, 435, 676, 1619, 445, 616, 644, 618, 644, 676,
	621, 622, 604, 1691, 587, 146, 504, 149, 715, 1538,
	658, 402, 592, 669, 433, 599, 1510, 601, 590, 641,
	513, 476, 420, 165, 505, 408, 654, 136, 137, 395,
	127, 167, 585, 617, 509, 454, 1545, 1253, 1254, 1255,
	138, 666, 681, 1074, 474, 166, 470, 639, 168, 406,
	445, 43, 44, 1073, 1512, 1324, 1598, 1600, 43, 1090,
	683, 1730, 1333, 1334, 1336, 1338, 1339, 644, 33, 48,
	27, 136, 137, 690, 842, 484, 655, 1460, 38, 659,
	1672, 1077, 1671, 1670, 138, 657, 35, 34, 53, 648,
	715, 1637, 667, 660, 63, 791, 1069, 1070, 1072, 46,
	400, 401, 1071, 498, 378, 384, 1793, 162, 624, 444,
	443, 6, 7, 742, 731, 732, 1749, 1639, 810, 1524,
	167, 1341, 715, 1352, 1166, 640, 828, 1132, 818, 1617,
	694, 1018, 745, 657, 802, 744, 687, 168, 1599, 614,
	141, 789, 692, 833, 41, 462, 461, 840, 1681, 1658,
	1508, 1682, 779, 855, 1523, 1154, 1354, 857, 694, 819,
	644, 780, 1107, 1106, 504, 625, 1105, 767, 768, 769,
	770, 771, 772, 773, 829, 32, 588, 679, 680, 682,
	504, 814, 814, 814, 1104, 396, 841, 404, 405, 1103,
	433, 797, 1102, 874, 875, 1353, 693, 692, 1085, 827,
	33, 639, 1083, 1407, 445, 820, 43, 822, 693, 692,
	899, 787, 1101, 694, 693, 692, 1099, 1683, 43, 1646,
	1320, 715, 928, 928, 905, 694, 392, 1082, 876, 1050,
	930, 694, 715, 880, 981, 384, 384, 1077, 903, 904,
	902, 144, 139, 644, 693, 692, 1081, 886, 852, 939,
	872, 983, 982, 981, 881, 1163, 878, 1280, 932, 935,
	877, 694, 644, 1209, 593, 713, 714, 706, 707, 708,
	709, 710, 711, 712, 705, 606, 608, 1281, 392, 997,
	1138, 882, 1137, 605, 392, 1617, 1557, 695, 410, 1556,
	924, 611, 612, 613, 809, 815, 817, 921, 198, 780,
	923, 693, 692, 1016, 1454, 693, 692, 1016, 934, 926,
	929, 883, 693, 692, 246, 391, 403, 1453, 694, 1322,
	814, 814, 694, 640, 814, 814, 814, 901, 1177, 694,
	984, 729, 647, 997, 647, 1433, 695, 974, 975, 392,
	409, 1051, 1452, 674, 677, 1080, 693, 692, 1282, 1037,
	693, 692, 992, 814, 814, 814, 814, 1047, 893, 895,
	896, 688, 1022, 694, 1023, 894, 1278, 694, 805, 728,
	730, 201, 452, 452, 203, 504, 1007, 792, 814, 704,
	703, 713, 714, 706, 707, 708, 709, 710, 711, 712,
	705, 1005, 611, 804, 1093, 693, 692, 1031, 452, 639,
	826, 695, 445, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 694, 760, 899, 762, 763, 764, 766, 766,
	766, 766, 766, 766, 766, 766, 1371, 783, 784, 785,
	786, 1053, 646, 940, 941, 1117, 1118, 1119, 816, 976,
	1280, 1450, 1112, 1399, 704, 703, 713, 714, 706, 707,
	708, 709, 710, 711, 712, 705, 403, 1015, 457, 44,
	1281, 45, 456, 646, 1510, 825, 991, 598, 994, 995,
	477, 1528, 475, 1120, 44, 448, 45, 1554, 1131, 674,
	1482, 446, 403, 45, 743, 44, 33, 45, 1451, 611,
	32, 1009, 403, 33, 1079, 1017, 647, 743, 1100, 742,
	44, 33, 1512, 1527, 821, 44, 1016, 45, 900, 384,
	693, 692, 44, 403, 45, 33, 33, 31, 640, 504,
	44, 1143, 1512, 1308, 33, 1309, 1017, 694, 469, 416,
	1097, 1147, 932, 803, 850, 695, 715, 925, 1207, 1783,
	1782, 1162, 850, 1781, 695, 1175, 1210, 814, 1198, 1173,
	1769, 644, 1725, 695, 1344, 1167, 1748, 695, 1222, 644,
	1248, 1249, 1250, 1173, 1694, 673, 1627, 1491, 695, 673,
	1541, 1263, 1080, 1080, 1263, 1080, 1080, 504, 504, 647,
	814, 1191, 934, 1274, 1185, 1206, 1193, 1277, 246, 1190,
	623, 814, 1192, 1182, 639, 1188, 1189, 445, 749, 1187,
	1208, 997, 504, 33, 544, 927, 542, 546, 547, 548,
	549, 584, 1217, 583, 545, 550, 1260, 673, 1540, 1115,
	850, 1467, 1488, 384, 514, 1290, 407, 1218, 1219, 1220,
	1276, 1224, 1216, 1195, 1256, 1259, 673, 1422, 998, 1261,
	835, 1173, 1421, 1197, 1269, 1270, 1304, 1702, 43, 123,
	1657, 862, 715, 1180, 646, 1295, 1576, 384, 1487, 1293,
	1160, 1288, 1289, 1179, 1325, 864, 1489, 1021, 1487, 1291,
	1418, 1417, 673, 1412, 936, 938, 673, 1411, 1491, 25,
	1323, 1296, 1698, 695, 1775, 1038, 1026, 657, 673, 1345,
	986, 987, 988, 1305, 989, 673, 1292, 1348, 1283, 1284,
	1285, 1286, 1287, 1303, 403, 1357, 1212, 1343, 1173, 1319,
	1313, 1078, 900, 63, 489, 384, 1369, 715, 999, 1025,
	1311, 1264, 1265, 1266, 1267, 1268, 1010, 695, 1173, 1172,
	934, 1024, 20, 1006, 15, 1008, 246, 1011, 1012, 863,
	673, 1114, 1400, 1019, 830, 1020, 851, 16, 1567, 23,
	1374, 806, 1349, 1384, 1263, 850, 1032, 1373, 835, 1356,
	937, 695, 504, 504, 799, 17, 18, 796, 1045, 1370,
	1567, 865, 866, 867, 868, 869, 870, 871, 850, 1000,
	489, 1021, 620, 1140, 1141, 1158, 1142, 673, 887, 43,
	43, 1145, 646, 1365, 1657, 1496, 1499, 1500, 1501, 1497,
	1010, 1498, 1502, 1148, 1149, 1661, 1662, 1150, 1151, 1490,
	1152, 1153, 1409, 1113, 673, 672, 1010, 1648, 633, 632,
	1398, 619, 1649, 627, 628, 627, 626, 55, 54, 1413,
	1414, 1157, 384, 519, 1424, 1491, 1405, 1156, 1419, 1420,
	615, 516, 403, 403, 488, 1657, 1294, 489, 1744, 646,
	1427, 937, 1491, 1128, 1606, 1304, 1516, 595, 1382, 1355,
	1464, 1010, 1444, 1139, 850, 1468, 673, 1134, 1135, 1136,
	795, 631, 1445, 1514, 635, 634, 1720, 1718, 384, 1084,
	1446, 1447, 493, 1155, 1689, 1526, 1466, 647, 1555, 1461,
	1469, 29, 194, 644, 43, 647, 1661, 1662, 1473, 403,
	1415, 1474, 1272, 1532, 1159, 1534, 504, 1543, 1483, 1484,
	1165, 1271, 1485, 1480, 1196, 223, 1111, 1110, 1086, 1168,
	1169, 1513, 1170, 1171, 1517, 1028, 1346, 1027, 1004, 814,
	1350, 884, 1530, 854, 832, 151, 788, 1181, 1535, 860,
	43, 43, 689, 1533, 642, 610, 1477, 1479, 609, 607,
	43, 1511, 19, 1544, 594, 515, 480, 696, 218, 422,
	418, 389, 211, 1547, 21, 22, 210, 24, 1496, 1499,
	1500, 1501, 1497, 1542, 1498, 1502, 225, 226, 1360, 199,
	1702, 983, 1581, 11, 1092, 1664, 1176, 1053, 636, 481,
	229, 132, 1591, 748, 1589, 1667, 1666, 1592, 1593, 1590,
	1500, 1501, 759, 1562, 1588, 63, 939, 384, 1587, 1042,
	1043, 1770, 1575, 1734, 1565, 384, 1577, 1470, 761, 644,
	1574, 388, 1615, 1529, 1423, 1578, 1583, 1584, 1559, 1586,
	1379, 1602, 790, 1340, 1594, 1200, 1582, 1605, 1613, 1585,
	463, 1604, 1475, 597, 1531, 1384, 997, 1742, 1201, 377,
	812, 243, 43, 874, 875, 1504, 43, 43, 1571, 1046,
	984, 43, 43, 43, 43, 43, 596, 1614, 487, 1380,
	1638, 485, 1650, 1595, 483, 1463, 43, 1465, 1039, 1040,
	1511, 140, 1644, 1629, 978, 644, 1630, 1603, 1410, 985,
	848, 1653, 1674, 1655, 651, 508, 1656, 1645, 1034, 1741,
	1560, 1458, 1326, 1675, 1643, 1665, 1654, 844, 1035, 845,
	846, 847, 1479, 1216, 1479, 43, 644, 1684, 1342, 835,
	1740, 1700, 843, 1416, 1676, 1195, 1404, 885, 1403, 1402,
	384, 890, 891, 1401, 1109, 1358, 1790, 43, 1351, 983,
	1581, 1703, 1710, 1674, 1108, 1140, 43, 412, 983, 1581,
	837, 1708, 839, 1695, 1546, 238, 239, 240, 1328, 1327,
	1486, 1706, 1711, 662, 644, 1687, 1688, 1440, 1715, 853,
	1713, 8, 1714, 507, 506, 1, 1225, 13, 12, 1640,
	997, 231, 1129, 740, 539, 1622, 1537, 525, 748, 1697,
	1379, 942, 973, 1754, 1383, 1221, 1563, 1571, 1364, 1251,
	1564, 447, 1712, 1738, 1733, 173, 1178, 1743, 419, 657,
	14, 1751, 657, 657, 657, 1361, 1766, 1211, 984, 1753,
	650, 486, 1762, 1763, 1764, 1275, 859, 984, 1767, 1506,
	1765, 675, 1003, 1428, 157, 1429, 147, 668, 1430, 1778,
	1779, 1431, 1432, 1434, 1436, 1438, 1774, 1776, 1772, 380,
	28, 1780, 10, 1098, 158, 156, 1706, 155, 154, 152,
	644, 1787, 450, 1752, 1479, 191, 196, 219, 1459, 1791,
	62, 60, 1625, 1626, 61, 65, 1387, 1792, 1794, 1307,
	1503, 983, 1581, 1797, 1799, 1795, 1525, 1706, 494, 1013,
	644, 727, 1677, 1394, 1511, 1709, 1379, 1203, 1739, 1699,
	1161, 1379, 1379, 1379, 1379, 1379, 862, 758, 979, 526,
	892, 538, 1571, 537, 536, 1647, 1379, 697, 1378, 1481,
	864, 1495, 1493, 1492, 646, 183, 1076, 1066, 1065, 1663,
	1659, 186, 187, 1377, 1441, 1380, 1635, 1041, 1067, 1359,
	1380, 1380, 1380, 1380, 1380, 1064, 836, 1479, 1044, 1068,
	5, 1075, 1062, 4, 3, 1506, 174, 1601, 1061, 1060,
	984, 1059, 733, 734, 735, 736, 737, 738, 739, 1553,
	1057, 181, 1058, 169, 1055, 1056, 1133, 1379, 1054, 1036,
	170, 645, 2, 0, 0, 0, 1379, 0, 646, 1561,
	1076, 1066, 1065, 0, 863, 0, 0, 0, 0, 0,
	0, 0, 1067, 1616, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 1380, 0, 0, 0,
	1164, 1651, 1652, 0, 0, 1380, 865, 866, 867, 868,
	869, 870, 871, 1596, 0, 0, 0, 1174, 177, 0,
	172, 182, 0, 0, 0, 0, 0, 0, 179, 178,
	0, 0, 647, 1074, 0, 0, 0, 0, 646, 0,
	1076, 1066, 1065, 1073, 0, 0, 646, 0, 1076, 1066,
	1065, 1628, 1067, 1202, 1205, 0, 1631, 1632, 1633, 1634,
	1067, 0, 0, 1068, 0, 0, 0, 0, 0, 1215,
	0, 1068, 0, 798, 427, 428, 429, 0, 1707, 0,
	647, 0, 432, 430, 440, 441, 1069, 1070, 1072, 0,
	0, 0, 1071, 1258, 0, 0, 0, 1074, 0, 1721,
	1722, 1723, 0, 0, 0, 1435, 1297, 1073, 0, 0,
	0, 897, 0, 0, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 0,
	704, 703, 713, 714, 706, 707, 708, 709, 710, 711,
	712, 705, 0, 1690, 695, 0, 0, 0, 1696, 0,
	1069, 1070, 1072, 0, 175, 0, 1071, 0, 1310, 0,
	176, 0, 0, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 1707, 1094, 1074, 1777, 1073, 0, 0,
	0, 1724, 1321, 0, 0, 1073, 0, 704, 703, 713,
	714, 706, 707, 708, 709, 710, 711, 712, 705, 0,
	0, 0, 0, 0, 1707, 1737, 647, 0, 0, 0,
	0, 0, 0, 0, 1347, 1745, 1746, 1747, 0, 1750,
	1069, 1070, 1072, 0, 0, 0, 1071, 1077, 1069, 1070,
	1072, 1363, 0, 184, 1071, 185, 704, 703, 713, 714,
	706, 707, 708, 709, 710, 711, 712, 705, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1784, 1785, 1786, 0, 0, 1617, 0, 1126, 0, 434,
	439, 0, 0, 0, 0, 0, 0, 1125, 0, 0,
	0, 1077, 0, 0, 0, 0, 0, 0, 0, 0,
	1798, 704, 703, 713, 714, 706, 707, 708, 709, 710,
	711, 712, 705, 0, 0, 0, 0, 1121, 1122, 1123,
	704, 703, 713, 714, 706, 707, 708, 709, 710, 711,
	712, 705, 436, 0, 438, 437, 0, 0, 0, 1732,
	646, 1443, 1076, 1066, 1065, 521, 0, 0, 0, 0,
	520, 0, 0, 775, 1067, 0, 0, 564, 733, 565,
	0, 1077, 0, 0, 0, 1068, 0, 555, 556, 1077,
	0, 0, 1471, 1472, 1205, 0, 0, 403, 0, 0,
	446, 544, 541, 542, 546, 547, 548, 549, 777, 0,
	0, 545, 550, 440, 441, 0, 0, 0, 0, 518,
	533, 0, 563, 715, 0, 0, 0, 0, 0, 1618,
	0, 0, 0, 0, 0, 0, 0, 1478, 0, 1768,
	0, 0, 0, 0, 0, 0, 530, 531, 0, 0,
	0, 0, 580, 0, 532, 0, 0, 944, 529, 534,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 578, 0, 0, 0,
	715, 0, 0, 0, 0, 0, 0, 778, 0, 1074,
	0, 0, 946, 0, 0, 66, 776, 0, 0, 1073,
	0, 782, 781, 0, 0, 600, 0, 1257, 446, 0,
	426, 427, 428, 429, 540, 1568, 0, 0, 0, 432,
	430, 440, 441, 0, 0, 0, 0, 0, 0, 715,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1069, 1070, 1072, 0, 0, 0, 1071, 0,
	955, 961, 959, 0, 0, 956, 0, 0, 954, 1298,
	1299, 963, 1612, 0, 962, 948, 958, 960, 957, 952,
	0, 947, 0, 965, 964, 966, 945, 968, 0, 0,
	0, 972, 969, 971, 970, 566, 967, 0, 0, 1314,
	1315, 1316, 1317, 0, 715, 949, 950, 0, 67, 1642,
	0, 0, 0, 0, 0, 0, 582, 0, 567, 568,
	0, 0, 0, 715, 0, 951, 953, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 424, 0, 0, 446,
	0, 426, 427, 428, 429, 0, 0, 0, 0, 552,
	432, 430, 440, 441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 775, 0, 0, 0, 0, 0,
	0, 569, 579, 575, 576, 573, 574, 572, 571, 570,
	581, 557, 558, 559, 560, 562, 0, 0, 444, 443,
	561, 0, 0, 1077, 0, 0, 0, 0, 0, 777,
	0, 0, 0, 0, 0, 0, 0, 1716, 0, 0,
	1717, 0, 0, 1719, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 434, 439, 0, 0,
	1729, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1425, 0, 0, 0, 0, 0, 1642, 0, 0,
	0, 0, 0, 0, 0, 0, 748, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 0, 116, 117,
	0, 118, 119, 120, 122, 121, 0, 922, 778, 436,
	0, 438, 437, 0, 0, 0, 66, 776, 0, 1771,
	748, 0, 782, 781, 0, 0, 444, 443, 1227, 1228,
	1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 362,
	351, 0, 310, 364, 280, 298, 372, 300, 301, 337,
	259, 320, 0, 295, 277, 0, 283, 252, 290, 253,
	281, 312, 0, 278, 0, 353, 323, 434, 439, 0,
	370, 0, 328, 0, 0, 0, 0, 0, 315, 355,
	318, 346, 309, 338, 267, 327, 365, 296, 333, 366,
	0, 0, 0, 33, 0, 0, 0, 1548, 0, 1549,
	0, 1550, 0, 1551, 1552, 332, 360, 292, 375, 67,
	336, 251, 330, 0, 257, 260, 371, 358, 287, 288,
	436, 0, 438, 437, 0, 0, 0, 314, 319, 343,
	306, 0, 0, 0, 0, 0, 0, 444, 443, 0,
	0, 0, 0, 284, 0, 326, 0, 0, 0, 264,
	258, 0, 311, 0, 0, 0, 266, 0, 285, 344,
	0, 248, 349, 356, 308, 0, 0, 359, 305, 304,
	0, 0, 0, 0, 0, 0, 297, 386, 341, 373,
	363, 316, 354, 282, 291, 0, 289, 0, 0, 0,
	325, 339, 0, 0, 0, 0, 0, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 249, 286, 347,
	350, 271, 335, 261, 293, 342, 294, 317, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1388, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 646, 0, 1076, 1066, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 0, 0, 1396, 0, 0, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 255, 275, 357, 0, 0, 0, 0, 1397,
	1395, 1391, 1390, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 1393, 1570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 274, 268, 269, 321, 322,
	367, 368, 369, 345, 265, 0, 272, 273, 0, 352,
	0, 0, 0, 324, 0, 0, 0, 374, 0, 0,
	0, 0, 0, 1074, 0, 299, 250, 303, 0, 0,
	0, 0, 0, 1073, 0, 262, 263, 0, 0, 307,
	302, 329, 331, 340, 348, 0, 279, 313, 362, 351,
	0, 310, 364, 280, 298, 372, 300, 301, 337, 259,
	320, 0, 295, 277, 0, 283, 252, 290, 253, 281,
	312, 0, 278, 0, 353, 323, 1069, 1070, 1072, 370,
	0, 328, 1071, 0, 0, 0, 0, 315, 355, 318,
	346, 309, 338, 267, 327, 365, 296, 333, 366, 0,
	0, 0, 33, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 332, 360, 292, 375, 0, 336,
	251, 330, 0, 257, 260, 371, 358, 287, 288, 0,
	646, 0, 1076, 1066, 1065, 0, 314, 319, 343, 306,
	0, 0, 0, 0, 1067, 0, 1306, 0, 0, 0,
	0, 0, 284, 0, 326, 1068, 0, 0, 264, 258,
	0, 311, 0, 0, 0, 266, 0, 285, 344, 0,
	248, 349, 356, 308, 0, 0, 359, 305, 304, 0,
	0, 946, 0, 0, 0, 297, 386, 341, 373, 363,
	316, 354, 282, 291, 0, 289, 0, 0, 0, 325,
	339, 0, 0, 0, 0, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1077, 0, 0,
	0, 0, 0, 0, 0, 256, 249, 286, 347, 350,
	271, 335, 261, 293, 342, 294, 317, 276, 0, 955,
	961, 959, 0, 0, 956, 0, 0, 954, 0, 1518,
	963, 0, 0, 962, 948, 958, 960, 957, 952, 1074,
	947, 0, 965, 964, 966, 945, 968, 0, 0, 1073,
	972, 969, 971, 970, 0, 967, 0, 0, 0, 0,
	0, 0, 1396, 0, 949, 950, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 951, 953, 0, 0, 0, 0,
	0, 0, 1069, 1070, 1072, 254, 0, 0, 1071, 0,
	0, 255, 275, 357, 0, 0, 0, 0, 1397, 1395,
	0, 0, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 1393, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 274, 268, 269, 321, 322, 367,
	368, 369, 345, 265, 0, 272, 273, 0, 352, 0,
	0, 0, 324, 0, 0, 0, 374, 0, 0, 0,
	0, 0, 0, 0, 299, 250, 303, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 0, 0, 307, 302,
	329, 331, 340, 348, 0, 279, 313, 362, 351, 0,
	310, 364, 280, 298, 372, 300, 301, 337, 259, 320,
	0, 295, 277, 0, 283, 252, 290, 253, 281, 312,
	0, 278, 0, 353, 323, 0, 0, 0, 370, 0,
	328, 0, 0, 1077, 0, 0, 315, 355, 318, 346,
	309, 338, 267, 327, 365, 296, 333, 366, 0, 0,
	0, 33, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 360, 292, 375, 0, 336, 251,
	330, 0, 257, 260, 371, 358, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 314, 319, 343, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 284, 0, 326, 0, 0, 0, 264, 258, 0,
	311, 0, 0, 0, 266, 0, 285, 344, 0, 248,
	349, 356, 308, 0, 0, 359, 305, 304, 0, 0,
	0, 0, 0, 0, 297, 386, 341, 373, 363, 316,
	354, 282, 291, 0, 289, 0, 0, 0, 325, 339,
	0, 0, 0, 0, 0, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 249, 286, 347, 350, 271,
	335, 261, 293, 342, 294, 317, 276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1396, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	255, 275, 357, 0, 0, 0, 0, 1397, 1395, 0,
	0, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	1393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 274, 268, 269, 321, 322, 367, 368,
	369, 345, 265, 0, 272, 273, 0, 352, 0, 0,
	0, 324, 0, 0, 0, 374, 0, 0, 0, 0,
	0, 0, 0, 299, 250, 303, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 0, 0, 307, 302, 329,
	331, 340, 348, 0, 279, 313, 362, 351, 0, 310,
	364, 280, 298, 372, 300, 301, 337, 259, 320, 0,
	295, 277, 0, 283, 252, 290, 253, 281, 312, 0,
	278, 0, 353, 323, 0, 89, 0, 370, 32, 328,
	0, 0, 0, 0, 0, 315, 355, 318, 346, 309,
	338, 267, 327, 365, 296, 333, 366, 0, 0, 0,
	446, 1085, 45, 33, 0, 1083, 0, 0, 0, 0,
	0, 0, 332, 360, 292, 375, 0, 336, 251, 330,
	0, 257, 260, 371, 358, 287, 288, 0, 0, 0,
	1082, 0, 0, 0, 314, 319, 343, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1186, 1081,
	284, 0, 326, 0, 0, 0, 264, 258, 0, 311,
	74, 0, 0, 266, 0, 285, 344, 0, 248, 349,
	356, 308, 0, 0, 359, 305, 304, 0, 0, 0,
	0, 0, 0, 297, 386, 341, 373, 363, 316, 354,
	282, 291, 0, 289, 0, 90, 0, 325, 339, 0,
	0, 0, 0, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 249, 286, 347, 350, 271, 335,
	261, 293, 342, 294, 317, 276, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 0, 116, 117, 0, 118, 119, 120,
	122, 121, 91, 92, 93, 97, 95, 94, 96, 68,
	70, 0, 66, 69, 75, 71, 72, 73, 87, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	88, 98, 99, 100, 101, 102, 103, 104, 105, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 255,
	275, 357, 0, 0, 0, 0, 0, 385, 0, 0,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 274, 268, 269, 321, 322, 367, 368, 369,
	345, 265, 0, 272, 273, 0, 352, 0, 0, 0,
	324, 0, 0, 0, 374, 67, 0, 0, 0, 0,
	0, 0, 299, 250, 303, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 0, 0, 307, 302, 329, 331,
	340, 348, 0, 279, 313, 362, 351, 0, 310, 364,
	280, 298, 372, 300, 301, 337, 259, 320, 0, 295,
	277, 0, 283, 252, 290, 253, 281, 312, 0, 278,
	0, 353, 323, 0, 89, 0, 370, 0, 328, 0,
	0, 0, 0, 0, 315, 355, 318, 346, 309, 338,
	267, 327, 365, 296, 333, 366, 0, 0, 0, 33,
	0, 670, 33, 671, 0, 0, 0, 0, 0, 0,
	0, 332, 360, 292, 375, 0, 336, 251, 330, 0,
	257, 260, 371, 358, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 314, 319, 343, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 326, 0, 0, 0, 264, 258, 0, 311, 74,
	0, 0, 266, 0, 285, 344, 0, 248, 349, 356,
	308, 0, 0, 359, 305, 304, 0, 0, 0, 0,
	0, 0, 297, 386, 341, 373, 363, 316, 354, 282,
	291, 0, 289, 0, 90, 0, 325, 339, 0, 0,
	0, 0, 0, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 249, 286, 347, 350, 271, 335, 261,
	293, 342, 294, 317, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 0, 116, 117, 0, 118, 119, 120, 122,
	121, 91, 92, 93, 97, 95, 94, 96, 68, 70,
	0, 66, 69, 75, 71, 72, 73, 87, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 88,
	98, 99, 100, 101, 102, 103, 104, 105, 0, 0,
	0, 0, 254, 646, 0, 1076, 1066, 1065, 255, 275,
	357, 0, 0, 0, 0, 0, 385, 1067, 0, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 274, 268, 269, 321, 322, 367, 368, 369, 345,
	265, 0, 272, 273, 0, 352, 0, 0, 0, 324,
	0, 0, 0, 374, 67, 0, 0, 0, 0, 0,
	0, 299, 250, 303, 0, 0, 0, 0, 0, 0,
	0, 262, 263, 0, 0, 307, 302, 329, 331, 340,
	348, 0, 279, 313, 362, 351, 0, 310, 364, 280,
	298, 372, 300, 301, 337, 259, 320, 0, 295, 277,
	0, 283, 252, 290, 253, 281, 312, 0, 278, 0,
	353, 323, 1074, 0, 0, 370, 0, 328, 0, 0,
	0, 0, 1073, 315, 355, 318, 346, 309, 338, 267,
	327, 365, 296, 333, 366, 0, 381, 0, 33, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 383, 0,
	332, 360, 292, 375, 0, 336, 251, 330, 0, 257,
	260, 371, 358, 287, 288, 1069, 1070, 1072, 0, 0,
	0, 1071, 314, 319, 343, 306, 0, 0, 0, 0,
	0, 1406, 0, 0, 0, 0, 0, 0, 284, 0,
	326, 0, 0, 0, 264, 258, 0, 311, 0, 0,
	0, 266, 0, 285, 344, 0, 248, 349, 356, 308,
	0, 0, 359, 305, 304, 0, 0, 0, 0, 0,
	0, 297, 386, 341, 373, 363, 316, 354, 282, 291,
	0, 289, 0, 0, 0, 325, 339, 0, 0, 0,
	0, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 249, 286, 347, 350, 271, 335, 261, 293,
	342, 294, 317, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1077, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 646, 0, 1076, 1066, 1065, 255, 275, 357,
	0, 0, 0, 0, 0, 385, 1067, 0, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	274, 268, 269, 321, 322, 367, 368, 369, 345, 265,
	0, 272, 273, 0, 352, 0, 0, 0, 324, 0,
	0, 0, 374, 0, 0, 0, 0, 0, 0, 0,
	299, 250, 303, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 0, 0, 307, 302, 329, 331, 340, 348,
	0, 279, 313, 362, 351, 0, 310, 364, 280, 298,
	372, 300, 301, 337, 259, 320, 0, 295, 277, 0,
	283, 252, 290, 253, 281, 312, 0, 278, 0, 353,
	323, 1074, 0, 0, 370, 0, 328, 0, 0, 0,
	0, 1073, 315, 355, 318, 346, 309, 338, 267, 327,
	365, 296, 333, 366, 0, 0, 0, 33, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	360, 292, 375, 0, 336, 251, 330, 0, 257, 260,
	371, 358, 287, 288, 1069, 1070, 1072, 0, 0, 0,
	1071, 314, 319, 343, 306, 0, 0, 0, 0, 0,
	1366, 0, 0, 0, 0, 1462, 0, 284, 0, 326,
	0, 0, 0, 264, 258, 0, 311, 0, 0, 0,
	266, 0, 285, 344, 0, 248, 349, 356, 308, 0,
	0, 359, 305, 304, 0, 0, 0, 0, 0, 0,
	297, 386, 341, 373, 363, 316, 354, 282, 291, 0,
	289, 0, 0, 0, 325, 339, 0, 0, 0, 0,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 249, 286, 347, 350, 271, 335, 261, 293, 342,
	294, 317, 276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1077, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 255, 275, 357, 0,
	0, 0, 0, 0, 385, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 274,
	268, 269, 321, 322, 367, 368, 369, 345, 265, 0,
	272, 273, 0, 352, 0, 0, 0, 324, 0, 0,
	0, 374, 0, 0, 0, 0, 0, 0, 0, 299,
	250, 303, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 0, 0, 307, 302, 329, 331, 340, 348, 0,
	279, 313, 362, 351, 0, 310, 364, 280, 298, 372,
	300, 301, 337, 259, 320, 0, 295, 277, 0, 283,
	252, 290, 253, 281, 312, 0, 278, 0, 353, 323,
	0, 0, 0, 370, 0, 328, 0, 0, 0, 0,
	0, 315, 355, 318, 346, 309, 338, 267, 327, 365,
	296, 333, 366, 0, 0, 0, 446, 0, 45, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 360,
	292, 375, 0, 336, 251, 330, 0, 257, 260, 371,
	358, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	314, 319, 343, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 284, 0, 326, 0,
	0, 0, 264, 258, 0, 311, 0, 0, 0, 266,
	0, 285, 344, 0, 248, 349, 356, 308, 0, 0,
	359, 305, 304, 0, 0, 0, 0, 0, 0, 297,
	386, 341, 373, 363, 316, 354, 282, 291, 0, 289,
	0, 0, 0, 325, 339, 0, 0, 0, 0, 0,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	249, 286, 347, 350, 271, 335, 261, 293, 342, 294,
	317, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 255, 275, 357, 0, 0,
	0, 0, 0, 385, 0, 0, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 274, 268,
	269, 321, 322, 367, 368, 369, 345, 265, 0, 272,
	273, 0, 352, 0, 0, 0, 324, 0, 0, 0,
	374, 0, 0, 0, 0, 0, 0, 0, 299, 250,
	303, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	0, 0, 307, 302, 329, 331, 340, 348, 0, 279,
	313, 362, 351, 0, 310, 364, 280, 298, 372, 300,
	301, 337, 259, 320, 0, 295, 277, 0, 283, 252,
	290, 253, 281, 312, 0, 278, 0, 353, 323, 0,
	0, 0, 370, 0, 328, 0, 0, 0, 0, 0,
	315, 355, 318, 346, 309, 338, 267, 327, 365, 296,
	333, 366, 0, 0, 0, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 360, 292,
	375, 0, 336, 251, 330, 0, 257, 260, 371, 358,
	287, 288, 499, 0, 0, 0, 0, 0, 0, 314,
	319, 343, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 326, 0, 0,
	0, 264, 258, 0, 311, 0, 0, 0, 266, 0,
	285, 344, 0, 248, 349, 356, 308, 0, 0, 359,
	305, 304, 0, 0, 0, 0, 0, 0, 297, 386,
	341, 373, 363, 316, 354, 282, 291, 0, 289, 0,
	0, 0, 325, 339, 0, 0, 0, 0, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 249,
	286, 347, 350, 271, 335, 261, 293, 342, 294, 317,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 255, 275, 357, 0, 0, 0,
	0, 0, 385, 0, 0, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 274, 268, 269,
	321, 322, 367, 368, 369, 345, 265, 0, 272, 273,
	0, 352, 0, 0, 0, 324, 0, 0, 0, 374,
	0, 0, 0, 0, 0, 0, 0, 299, 250, 303,
	0, 0, 0, 0, 0, 0, 0, 262, 263, 0,
	0, 307, 302, 329, 331, 340, 348, 0, 279, 313,
	362, 351, 0, 310, 364, 280, 298, 372, 300, 301,
	337, 259, 320, 0, 295, 277, 0, 283, 252, 290,
	253, 281, 312, 0, 278, 0, 353, 323, 0, 0,
	0, 370, 0, 328, 0, 0, 0, 0, 0, 315,
	355, 318, 346, 309, 338, 267, 327, 365, 296, 333,
	366, 0, 0, 0, 33, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 360, 292, 375,
	0, 336, 251, 330, 0, 257, 260, 371, 358, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 314, 319,
	343, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 284, 0, 326, 0, 0, 0,
	264, 258, 0, 311, 0, 0, 0, 266, 0, 285,
	344, 0, 248, 349, 356, 308, 0, 0, 359, 305,
	304, 0, 0, 0, 0, 0, 0, 297, 386, 341,
	373, 363, 316, 354, 282, 291, 0, 289, 0, 0,
	0, 325, 339, 0, 0, 0, 0, 0, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 249, 286,
	347, 350, 271, 335, 261, 293, 342, 294, 317, 276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 255, 275, 357, 0, 0, 0, 0,
	0, 385, 0, 0, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 274, 268, 269, 321,
	322, 367, 368, 369, 345, 265, 0, 272, 273, 0,
	352, 0, 0, 0, 324, 0, 0, 0, 374, 0,
	0, 0, 0, 0, 0, 0, 299, 250, 303, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 0, 0,
	307, 302, 329, 331, 340, 348, 0, 279, 313, 362,
	351, 0, 310, 364, 280, 298, 372, 300, 301, 337,
	259, 320, 0, 295, 277, 0, 283, 252, 290, 253,
	281, 312, 0, 278, 0, 353, 323, 0, 0, 0,
	370, 0, 328, 0, 0, 0, 0, 0, 315, 355,
	318, 346, 309, 338, 267, 327, 365, 296, 333, 366,
	0, 0, 0, 44, 0, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 360, 292, 375, 0,
	336, 251, 330, 0, 257, 260, 371, 358, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 314, 319, 343,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 284, 0, 326, 0, 0, 0, 264,
	258, 0, 311, 0, 0, 0, 266, 0, 285, 344,
	0, 248, 349, 356, 308, 0, 0, 359, 305, 304,
	0, 0, 0, 0, 0, 0, 297, 0, 341, 373,
	363, 316, 354, 282, 291, 0, 289, 0, 0, 0,
	325, 339, 0, 0, 0, 0, 0, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 249, 286, 347,
	350, 271, 335, 261, 293, 342, 294, 317, 276, 521,
	0, 0, 0, 0, 520, 0, 0, 0, 0, 0,
	0, 564, 0, 565, 0, 0, 0, 0, 0, 0,
	0, 555, 556, 0, 0, 0, 0, 0, 0, 1610,
	0, 403, 0, 0, 446, 544, 541, 542, 546, 547,
	548, 549, 0, 0, 0, 545, 550, 440, 441, 1611,
	0, 0, 0, 518, 533, 0, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	530, 531, 255, 275, 357, 0, 580, 0, 532, 0,
	0, 528, 529, 534, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 274, 268, 269, 321, 322,
	367, 368, 369, 345, 265, 0, 272, 273, 0, 352,
	0, 0, 0, 324, 0, 0, 0, 374, 540, 0,
	0, 0, 0, 0, 0, 299, 250, 303, 0, 0,
	0, 0, 0, 0, 0, 262, 263, 0, 0, 307,
	302, 329, 331, 340, 348, 521, 279, 313, 0, 0,
	520, 0, 0, 0, 0, 0, 0, 564, 0, 565,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 403, 0, 695,
	446, 544, 541, 542, 546, 547, 548, 549, 0, 566,
	0, 545, 550, 440, 441, 0, 0, 0, 0, 518,
	533, 0, 563, 0, 0, 0, 0, 0, 0, 0,
	582, 0, 567, 568, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 531, 0, 0,
	0, 0, 580, 0, 532, 0, 0, 528, 529, 534,
	0, 0, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 579, 575, 576, 573,
	574, 572, 571, 570, 581, 557, 558, 559, 560, 562,
	0, 0, 444, 443, 561, 0, 808, 0, 521, 0,
	0, 0, 0, 520, 540, 0, 0, 0, 0, 0,
	564, 0, 565, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 0, 0, 0, 0, 0, 0, 0, 577,
	403, 0, 0, 446, 544, 541, 542, 546, 547, 548,
	549, 0, 0, 0, 545, 550, 440, 441, 0, 0,
	0, 0, 518, 533, 0, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 566, 0, 0, 0, 530,
	531, 813, 0, 0, 0, 580, 0, 532, 0, 0,
	528, 529, 534, 0, 0, 0, 582, 0, 567, 568,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 0, 0,
	0, 569, 579, 575, 576, 573, 574, 572, 571, 570,
	581, 557, 558, 559, 560, 562, 0, 0, 444, 443,
	561, 0, 0, 0, 521, 0, 0, 0, 0, 520,
	0, 0, 0, 0, 0, 0, 564, 0, 565, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 0, 0,
	0, 0, 0, 0, 0, 577, 403, 0, 0, 446,
	544, 541, 542, 546, 547, 548, 549, 0, 566, 0,
	545, 550, 440, 441, 0, 0, 0, 0, 518, 533,
	0, 563, 0, 0, 0, 0, 0, 0, 0, 582,
	0, 567, 568, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 531, 813, 0, 0,
	0, 580, 0, 532, 0, 0, 528, 529, 534, 0,
	0, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 579, 575, 576, 573, 574,
	572, 571, 570, 581, 557, 558, 559, 560, 562, 0,
	0, 444, 443, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 521, 0, 0, 0, 0, 520, 577, 0,
	0, 0, 0, 0, 564, 0, 565, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 403, 0, 0, 446, 544, 541,
	542, 546, 547, 548, 549, 0, 0, 0, 545, 550,
	440, 441, 0, 0, 566, 0, 518, 533, 0, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 0, 567, 568, 0,
	0, 0, 0, 530, 531, 0, 0, 0, 0, 580,
	0, 532, 0, 0, 528, 529, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 552, 0,
	0, 0, 0, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 579, 575, 576, 573, 574, 572, 571, 570, 581,
	557, 558, 559, 560, 562, 0, 0, 444, 443, 561,
	0, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 520, 0, 0, 0, 0, 0,
	0, 564, 0, 565, 577, 0, 0, 0, 0, 0,
	0, 555, 556, 0, 0, 0, 0, 0, 0, 0,
	0, 403, 0, 0, 446, 544, 541, 542, 546, 547,
	548, 549, 0, 0, 0, 545, 550, 440, 441, 0,
	0, 0, 566, 518, 533, 0, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 0, 567, 568, 0, 0, 0,
	530, 531, 0, 0, 0, 0, 580, 0, 532, 0,
	0, 528, 529, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 552, 0, 0, 0,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 579,
	575, 576, 573, 574, 572, 571, 570, 581, 557, 558,
	559, 560, 562, 0, 0, 444, 443, 561, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 0,
	565, 0, 577, 0, 0, 0, 0, 0, 555, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 403, 0,
	0, 446, 544, 541, 542, 546, 547, 548, 549, 0,
	0, 0, 545, 550, 440, 441, 0, 0, 0, 566,
	0, 533, 0, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 0, 567, 568, 0, 0, 0, 530, 531, 0,
	0, 0, 0, 580, 0, 532, 0, 0, 528, 529,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 552, 0, 0, 0, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 579, 575, 576, 573,
	574, 572, 571, 570, 581, 557, 558, 559, 560, 562,
	0, 0, 444, 443, 561, 540, 0, 0, 564, 0,
	565, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 403, 0,
	0, 446, 544, 541, 542, 546, 547, 548, 549, 577,
	0, 0, 545, 550, 440, 441, 0, 0, 0, 0,
	0, 533, 0, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 566, 530, 531, 0,
	0, 0, 0, 580, 0, 532, 0, 0, 528, 529,
	534, 0, 0, 0, 0, 0, 0, 582, 0, 567,
	568, 0, 0, 0, 0, 0, 0, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 540, 0, 0, 0, 0,
	0, 0, 569, 579, 575, 576, 573, 574, 572, 571,
	570, 581, 557, 558, 559, 560, 562, 0, 33, 444,
	443, 561, 0, 0, 0, 564, 0, 565, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 0, 446, 544,
	541, 542, 546, 547, 548, 549, 577, 0, 0, 545,
	550, 440, 441, 0, 0, 0, 566, 0, 533, 0,
	563, 0, 0, 0, 0, 74, 0, 801, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 0, 567,
	568, 0, 0, 0, 530, 531, 0, 0, 0, 0,
	580, 0, 532, 0, 0, 528, 529, 534, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	552, 0, 0, 0, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 579, 575, 576, 573, 574, 572, 571,
	570, 581, 557, 558, 559, 560, 562, 0, 0, 444,
	443, 561, 540, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 0, 116,
	117, 0, 118, 119, 120, 122, 121, 91, 92, 93,
	97, 95, 94, 96, 68, 70, 577, 66, 69, 75,
	71, 72, 73, 87, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 88, 98, 99, 100, 101,
	102, 103, 104, 105, 0, 0, 0, 0, 800, 0,
	0, 0, 0, 566, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 0, 567, 568, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 33, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	579, 575, 576, 573, 574, 572, 571, 570, 581, 557,
	558, 559, 560, 562, 74, 0, 444, 443, 561, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1385, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 0, 116, 117,
	0, 118, 119, 120, 122, 121, 91, 92, 93, 97,
	95, 94, 96, 68, 70, 0, 66, 69, 75, 71,
	72, 73, 87, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 88, 98, 99, 100, 101, 102,
	103, 104, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
}

var yyPact = [...]int16{
	499, -1000, -248, -1000, -1000, 1437, 1113, 446, -1000, -1000,
	-1000, 966, 467, 466, 219, 456, 937, 519, 956, 480,
	444, -1000, -214, -176, -1000, -98, 469, -1000, 1280, -1000,
	4193, 4193, 4193, -1000, 339, 937, 444, 147, 444, 1447,
	399, 674, 1568, 531, -1000, -1000, 444, 956, 673, -1000,
	-1000, -1000, -1000, 222, 173, 242, 1812, -154, 4, -1000,
	-1000, -1000, -1000, -1000, 1346, -1000, -1000, -1000, 1346, 61,
	1433, 1346, 1433, -1000, 1346, 1433, 46, 46, 46, 46,
	46, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1420, 1416,
	-1000, 1346, 1346, 1346, 1346, 1346, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1412, 80, 1412, 1369,
	1369, -1000, -1000, 1812, 1812, 1432, 956, 937, 1446, 956,
	-208, 956, 956, 1657, 956, -1000, -1000, -1000, 191, 1537,
	4193, 6404, 956, -1000, 1535, 487, 956, 4559, -1000, 1497,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1415, 771, 937,
	392, 249, 1297, 411, 500, 1077, 388, -1000, -1000, -1000,
	779, -1000, 937, -1000, 1648, -1000, -1000, 308, -1000, 307,
	658, 978, 956, 1414, 180, 1413, 2480, 922, -1000, -266,
	-1000, 2, -1000, -1000, 819, 46, 1346, -1000, 46, 909,
	46, 46, -1000, -1000, 540, 1519, 540, 540, 540, 540,
	977, 977, -127, -127, -1000, -1000, -1000, -1000, 919, 1412,
	-1000, -1000, -1000, 917, -1000, 956, 937, 1410, 1445, 956,
	1561, 453, -1000, -1000, 1558, 1555, 1300, -1000, -1000, 157,
	-1000, 355, -1000, 937, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1337, -1000, 293, 486,
	5666, 173, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 387,
	-1000, 1674, 1586, 402, -4, -178, 1075, -1000, -1000, 1409,
	-1000, -1000, 7405, -1000, 1064, 1062, -1000, 30, 937, -1000,
	-201, 114, -26, -1000, -1000, 1297, -1000, 1408, 7405, 1553,
	-1000, 1524, 914, -1000, 2359, -1000, -229, -1000, -1000, -1000,
	-229, -1000, -1000, -1000, 1297, -1000, 1403, 1402, -1000, 1399,
	-1000, -1000, 1297, 1297, 1297, 530, -1000, -1000, -1000, -1000,
	-1000, -1000, 1292, 540, 46, 540, 1273, 1234, 540, 540,
	-1000, -1000, 1041, 559, -1000, -1000, -1000, -1000, 1278, -1000,
	1276, -1000, 72, 71, -1000, 1324, -1000, 1271, 1329, 1444,
	282, 956, 1398, 1353, 444, 1353, 1585, 240, 956, 1657,
	373, 1657, 355, 937, 289, 937, -1000, -1000, 413, 4190,
	-1000, -1000, 1267, -1000, 239, 1346, 521, 521, -211, 301,
	300, -178, 1297, 1396, -1000, 387, 739, -1000, 7405, 226,
	1297, 1297, -1000, -1000, 504, -1000, -1000, -1000, 7712, 7712,
	7712, 7712, 7712, 7712, 7712, -1000, -1000, -1000, -1000, 14,
	-1000, -229, -1000, 946, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 526, 523, -1000, 7238, 1297, 1297, 1297, 1297, 1297,
	1297, 1297, 1297, 7405, 1297, 1489, 1297, 1297, 1297, 1297,
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 2167, 1297, 1297,
	1297, 1297, -1000, -1000, -1000, -1000, -178, 1390, -1000, -1000,
	-1000, 658, -1000, 7405, 373, 829, 139, -1000, 1323, 1219,
	1942, 1216, -1000, 7849, -1000, 996, -1000, 845, -1000, 820,
	1203, 6894, 7070, 7070, 6035, -1000, -1000, 540, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 46, 953, 46, -3,
	-8, 912, -1000, 847, 282, 937, 956, 1196, 1319, -1000,
	232, 1388, 373, -1000, 1614, 1655, -1000, 1353, 956, -1000,
	451, 1611, -1000, -1000, 1581, -1000, 1317, -1000, -1000, 1233,
	1657, 1387, 937, -1000, -1000, 340, 937, -1000, -1000, -1000,
	-1000, -1000, 1106, 387, 1538, -1000, -1000, -1000, 716, -1000,
	-1000, 695, 234, 710, -1000, 937, -178, 1385, 7405, 387,
	1240, 244, 7405, 7405, 797, -1000, 547, 7712, 770, 654,
	7712, 7712, 7712, 7712, 7712, 7712, 7712, 7712, 7712, 7712,
	7712, 7712, 7712, 7712, 7712, 2448, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 988, -1000,
	1353, 1054, 1054, -228, -228, -228, -228, -228, -228, 111,
	-1000, -253, -1000, -1000, 5297, 6035, 996, 1213, 784, 7238,
	7070, 7070, 2251, 7405, 7070, 7070, 7070, 1572, 662, 784,
	932, 1580, 996, 996, 996, -1000, 996, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 55, -1000, -1000, -1000,
	-1000, -1000, -1000, 7070, 7070, 7070, 7070, -1000, 937, 1297,
	739, 1231, -150, 7405, 1382, 838, -1000, 1185, -229, -1000,
	-1000, -1000, -154, -1000, -1000, -1000, -1000, 996, 7070, 1179,
	1213, -1000, 944, -1000, 522, 1179, 944, 1179, 1297, -1000,
	540, -1000, 540, -1000, -1000, 1183, 1171, 1138, 1381, 1379,
	-218, 819, 282, 1208, 1591, 1602, 1353, 1567, 1477, -1000,
	996, 1546, 937, -1000, -1000, -1000, -1000, -1000, 224, 657,
	937, 3164, 1167, -1000, 651, 1372, 122, 433, 1440, 1761,
	154, -1000, 981, 640, 947, 636, 616, 613, 608, 590,
	587, 586, -1000, -1000, -1000, -1000, -1000, 1645, -1000, -1000,
	-1000, 1634, 1371, 1370, 387, 739, 1193, 1106, -1000, -108,
	547, 575, -1000, -1000, 874, -1000, -1000, 2149, -1000, -1000,
	-1000, -1000, 770, 7712, 7712, 7712, 2065, 2149, 2130, 672,
	368, -228, 28, 28, 32, 32, 32, 32, 32, 12,
	12, -1000, -124, -1000, 1346, 996, -1000, -229, 933, -1000,
	-1000, 927, 1297, 518, -1000, -1000, -1000, 7405, -1000, 996,
	1179, 1179, 735, 1316, 7879, 1346, -1000, 1346, 1369, -1000,
	-1000, 124, 1346, 95, -1000, -1000, -1000, -1000, 1369, -1000,
	-1000, -1000, -1000, -1000, 1346, 1346, -1000, -1000, 1346, 1346,
	-1000, 1346, 1346, 642, 1336, 1284, 1179, 7070, -1000, 681,
	-1000, 7405, 996, -1000, 515, 956, -1000, -1000, -1000, -1000,
	-1000, 1179, 996, 1314, 1179, 1179, 1181, -1000, 7405, 244,
	1442, -1000, -1000, 780, -1000, 1115, 1105, -1000, -1000, 1179,
	7070, -246, -1000, -1000, -1000, 975, -1000, -1000, 3821, -246,
	-246, 7070, -1000, -1000, -1000, -1000, -218, 282, 387, 1623,
	1368, 1095, 1623, 1526, 7405, 7405, 1614, -1000, 1353, -1000,
	-1000, 1572, -1000, -1000, 705, -1000, 1353, 1161, 216, 145,
	7405, -1000, 3164, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1614, -1000, -1000, -1000, 937, 2399, 937,
	937, 937, 356, 7572, 7405, -1000, -1000, -1000, 956, 1091,
	3824, 651, 651, 3824, 651, 651, 387, 387, 1365, 1356,
	287, -1000, 937, -1000, -141, 1761, 937, -1000, 813, -1000,
	-1000, 713, 795, 713, 713, 713, 713, 713, 521, 521,
	937, 387, 1148, 244, 1106, 1440, -1000, -1000, -1000, -1000,
	-1000, 2065, 2149, 1959, -1000, 7712, 7712, 63, -1000, 54,
	-1000, -229, 6035, 784, -1000, -1000, -1000, 3070, 974, 7405,
	-1000, 248, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3070, 7712, 7712, 7712, 7712, -115,
	1253, 645, -1000, 7405, 746, -1000, 5297, -1000, -1000, -1000,
	-1000, -1000, 426, 937, 739, -1000, 1659, -152, 217, -1000,
	-1000, -1000, -1000, -1000, 1297, -1000, -1000, 512, -1000, -1000,
	996, 1623, 1006, 1141, 1106, 7405, 373, -218, 1106, -1000,
	1639, 537, 648, 1312, -1000, 678, 1591, 996, 1443, -1000,
	-1000, -130, 7405, 4826, 3164, 784, -1000, 1591, 446, 925,
	910, 1311, 8098, -1000, 2714, 896, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 937, 1632, 1628, 1627, 1625, 4457, 226, 630, 142,
	1579, -1000, -1000, 3824, -1000, -1000, -1000, -1000, -1000, 1129,
	1125, 387, 387, 1354, 1297, 1123, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 658, 658,
	1094, 1089, 1106, -1000, 1440, -1000, -1000, 7712, 2149, 2149,
	-13, -1000, 927, -1000, -1000, 996, 1346, 996, -1000, -1000,
	739, -1000, -1000, 996, 788, 2016, 357, 144, 1297, -106,
	-1000, 784, 7405, -1000, 956, -1000, 244, 521, 521, -1000,
	-1000, -1000, 155, 935, 789, 764, 751, 19, -1000, 1595,
	430, 4928, -1000, 1106, 1623, 1106, 1440, 784, 1073, 1623,
	1440, -1000, 1487, 7405, 7405, 7405, -1000, 1526, -1000, 7070,
	-1000, -1000, -244, 784, -1000, -1000, 3164, 1970, -1000, 1526,
	963, 956, 1121, -1000, 1288, 1434, -1000, -1000, -1000, 1542,
	936, 503, 937, 208, -1000, -1000, 1309, 3083, -24, -1000,
	-1000, -1000, 578, 510, 952, -1000, 1502, -1000, -1000, 2399,
	1527, -1000, -1000, -1000, -1000, -1000, 3164, 3164, 3164, 657,
	221, -1000, 322, 1070, 1022, 387, 937, -1000, 1761, -1000,
	-1000, 407, 1106, 1440, -1000, 2149, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7712, -1000, 7712, -1000, 7712, -1000, 7712,
	7712, 996, 926, 784, 1342, -1000, -1000, -1000, 736, -1000,
	733, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 130, -1000,
	1594, 996, -1000, 1440, 1106, -1000, -1000, -1000, 1106, -1000,
	1483, 784, 784, -1000, -1000, 1269, 7405, -251, 2928, -1000,
	-1000, 256, 956, -1000, 256, 1111, 910, 956, -1000, -1000,
	932, 910, 910, 910, 910, 910, -1000, 1474, 1470, -1000,
	1460, 1458, 1464, 956, -1000, 1020, 936, 514, 1297, -1000,
	971, -1000, -1000, -1000, 4193, 1578, 3452, 1309, -24, 1307,
	-1000, -33, -55, 6575, 6035, 540, -1000, -1000, -1000, -1000,
	-1000, 937, 1828, 1962, 418, 141, 214, 159, -1000, 179,
	1106, 1106, 1018, 996, -1000, 956, 1440, -1000, 853, 853,
	853, 853, 258, -1000, -1000, 937, -1000, -1000, -1000, 508,
	7405, -1000, -1000, -1000, 1440, -1000, 1623, 910, 784, 644,
	-1000, -1000, 1296, 1297, -1000, 1623, 910, 1131, -1000, 1247,
	-1000, 573, 1434, 1352, 1441, 1261, -1000, -1000, -1000, -1000,
	1462, -1000, 1461, -1000, -1000, -1000, -1000, -138, 463, 462,
	460, 937, -1000, 1353, -1000, 1307, -24, -58, -1000, -1000,
	-1000, -1000, 784, 572, -1000, -1000, -1000, 3164, 576, 643,
	3164, -1000, -1000, 156, -1000, 1440, 1440, -1000, -1000, 1338,
	-1000, -1000, -1000, -1000, -1000, 996, 172, -145, 1016, 6035,
	1135, -1000, 784, -1000, 1618, 1305, -1000, 1436, 932, 1297,
	-1000, 967, 937, 1614, 1131, -1000, 1623, 932, 7405, -1000,
	-1000, 7405, 1331, -1000, 7405, -1000, -1000, -1000, -1000, 1330,
	1297, 1297, 1297, 1005, -1000, -1000, -1000, -1000, -48, -61,
	-1000, 7405, 436, 138, 1892, -1000, -1000, -1000, -1000, 937,
	-1000, 1482, -122, -159, -1000, -1000, -1000, 996, 7405, 1616,
	1593, -1000, 1529, 1103, 1301, -1000, -1000, 6751, 996, 1009,
	507, 1005, 1591, -1000, 1614, -1000, 784, 784, 373, 784,
	-212, 373, 373, 373, 951, 937, -1000, -1000, -1000, 784,
	-1000, 3164, 2264, 1002, -1000, 1480, -1000, -1000, -1000, -1000,
	7405, 7405, 269, -1000, 1297, -1000, -1000, 1158, 937, 937,
	-1000, -1000, 1591, 995, 992, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 987, 987, 987, 514, -1000, 262, -1000, -1000,
	-136, 784, 1304, 1637, -1000, 1297, -1000, 1353, 497, -1000,
	-1000, -1000, -1000, -212, -1000, -1000, -1000, -138, -1000, -153,
	932, 1301, 996, 937, -1000, -1000, -175, 1298, -1000, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 1892, 9, 22, 1891, 1889, 1888, 1885, 1884, 1882,
	1880, 1871, 1869, 1868, 1864, 1863, 1862, 1861, 1860, 72,
	1858, 1856, 1855, 68, 1849, 1847, 1846, 1844, 69, 192,
	77, 92, 948, 26, 39, 54, 43, 1843, 29, 1840,
	1839, 50, 1833, 41, 1832, 1831, 47, 1829, 1828, 5,
	25, 70, 99, 1827, 1825, 87, 1343, 1824, 1823, 76,
	1821, 1820, 80, 16, 3, 21, 11, 1819, 319, 1,
	1818, 71, 1817, 1810, 1809, 1808, 58, 1807, 52, 63,
	8, 53, 1805, 10, 64, 37, 19, 13, 2, 46,
	28, 1803, 20, 34, 27, 1802, 60, 1801, 114, 38,
	61, 73, 0, 23, 78, 1799, 1798, 1796, 79, 90,
	30, 15, 1790, 1789, 1786, 65, 94, 40, 93, 84,
	1785, 91, 1784, 1781, 1780, 1777, 1776, 348, 808, 109,
	88, 51, 1775, 1772, 83, 340, 311, 82, 344, 1389,
	75, 1769, 1768, 1767, 1765, 103, 1764, 62, 105, 24,
	533, 1763, 1762, 1760, 1759, 1747, 1746, 1744, 86, 1741,
	74, 67, 49, 241, 44, 1736, 1735, 1731, 1730, 81,
	1727, 1725, 1720, 55, 1718, 1716, 134, 59, 116, 100,
	102, 1715, 1711, 104, 110, 96, 1709, 97, 45, 6,
	89, 1708, 48, 1705, 1704, 1703, 7, 4, 1697, 1696,
	1695, 1694, 1693, 1692, 57, 1691, 85, 1689, 14, 1688,
	1687, 42, 1686, 1685, 1681, 1679, 1673, 358, 437, 1670,
	149, 115, 1662, 106,
}

var yyR1 = [...]uint8{
	0, 213, 214, 214, 1, 1, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 15, 15, 15, 15,
	216, 216, 2, 2, 3, 4, 4, 5, 5, 6,
	6, 22, 22, 7, 8, 8, 8, 219, 219, 41,
	41, 85, 85, 9, 9, 9, 9, 10, 10, 193,
	193, 192, 194, 194, 11, 11, 11, 11, 11, 186,
	186, 186, 186, 186, 12, 12, 189, 189, 189, 13,
	13, 13, 90, 90, 94, 94, 94, 95, 95, 95,
	95, 205, 205, 114, 114, 215, 215, 220, 220, 220,
	220, 220, 220, 220, 184, 184, 184, 184, 185, 185,
	185, 185, 187, 187, 188, 188, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 191, 191, 100, 100,
	167, 167, 167, 168, 168, 168, 168, 168, 168, 170,
	170, 171, 171, 106, 106, 172, 172, 18, 152, 153,
	153, 153, 153, 153, 153, 153, 153, 139, 139, 139,
	117, 117, 117, 117, 117, 117, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 178, 178, 178, 178, 178,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 180,
	181, 182, 174, 174, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 129, 129,
	129, 129, 129, 129, 173, 173, 169, 169, 169, 169,
	121, 121, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 120, 120, 120, 120, 120, 120, 120, 125,
	125, 122, 122, 122, 122, 122, 122, 122, 122, 118,
	118, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 126, 126, 124, 124, 124, 124, 124,
	124, 124, 124, 138, 138, 127, 127, 136, 136, 137,
	137, 137, 128, 128, 128, 135, 135, 135, 132, 132,
	133, 133, 134, 134, 134, 130, 130, 130, 131, 131,
	131, 141, 163, 163, 163, 165, 165, 166, 166, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	151, 151, 183, 183, 162, 162, 162, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 150, 150, 160, 160,
	161, 161, 158, 158, 158, 159, 145, 145, 145, 145,
	145, 146, 146, 147, 147, 147, 147, 142, 142, 143,
	143, 144, 144, 176, 176, 176, 209, 209, 209, 209,
	209, 209, 210, 210, 177, 177, 148, 148, 149, 149,
	156, 156, 156, 156, 221, 221, 154, 154, 154, 155,
	155, 155, 222, 19, 20, 20, 21, 21, 21, 25,
	25, 25, 23, 23, 24, 24, 30, 30, 29, 29,
	31, 31, 31, 31, 105, 105, 105, 104, 104, 206,
	206, 206, 206, 206, 33, 33, 34, 34, 35, 35,
	36, 36, 36, 196, 196, 195, 195, 197, 197, 197,
	197, 197, 197, 48, 48, 83, 83, 83, 86, 86,
	37, 37, 37, 37, 38, 38, 39, 39, 40, 40,
	112, 112, 111, 111, 111, 110, 110, 42, 42, 42,
	44, 43, 43, 43, 43, 45, 45, 47, 47, 46,
	46, 49, 49, 49, 49, 50, 50, 84, 84, 32,
	32, 32, 32, 32, 32, 32, 97, 97, 52, 52,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	61, 61, 61, 61, 61, 61, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 28, 28, 62,
	62, 62, 68, 63, 63, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 59, 59, 59, 59, 59, 59, 59, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	223, 223, 60, 60, 60, 60, 26, 26, 26, 26,
	26, 113, 113, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 116, 116, 116, 116, 116,
	116, 116, 116, 72, 72, 27, 27, 70, 70, 71,
	99, 99, 73, 73, 69, 69, 69, 198, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 74, 74,
	75, 75, 207, 207, 208, 76, 76, 77, 77, 78,
	79, 79, 79, 80, 80, 80, 80, 81, 81, 81,
	54, 54, 54, 54, 54, 54, 82, 82, 82, 82,
	87, 87, 64, 64, 66, 66, 65, 67, 88, 88,
	92, 89, 89, 93, 93, 93, 93, 93, 16, 17,
	91, 91, 91, 107, 107, 107, 98, 98, 96, 96,
	102, 103, 103, 103, 103, 108, 108, 109, 109, 199,
	199, 199, 200, 200, 200, 201, 201, 202, 203, 203,
	204, 212, 212, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 217, 218,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 7, 10, 7, 11, 11, 9, 13,
	16, 5, 8, 11, 13, 13, 14, 14, 6, 7,
	1, 1, 4, 6, 10, 1, 3, 1, 3, 7,
	8, 1, 1, 9, 8, 7, 6, 1, 1, 1,
	3, 0, 4, 3, 4, 5, 4, 2, 6, 1,
	3, 2, 0, 1, 2, 2, 2, 3, 5, 0,
	2, 2, 2, 2, 3, 5, 1, 2, 3, 7,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 0, 3, 0, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 1, 1,
	1, 3, 1, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 1, 4, 0, 3,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 0, 3, 0, 1, 0, 2, 4, 4, 0,
	1, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	3, 1, 1, 1, 1, 1, 2, 2, 3, 2,
	4, 2, 4, 2, 2, 3, 2, 3, 2, 7,
	9, 3, 3, 6, 9, 9, 6, 6, 8, 8,
	5, 8, 7, 4, 0, 2, 4, 6, 2, 4,
	2, 1, 1, 1, 2, 1, 1, 1, 3, 1,
	2, 1, 1, 2, 0, 4, 3, 4, 3, 3,
	3, 3, 3, 3, 3, 2, 4, 6, 2, 3,
	2, 3, 1, 3, 0, 2, 0, 2, 2, 3,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 2, 2, 2, 1, 1, 0,
	1, 1, 3, 3, 2, 2, 2, 1, 1, 1,
	1, 4, 5, 4, 4, 4, 1, 2, 2, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 3, 3, 0, 3, 3, 0, 1,
	0, 1, 0, 2, 1, 0, 3, 3, 0, 1,
	2, 6, 0, 1, 4, 1, 2, 1, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 1, 1, 0, 2, 5, 2, 3, 3,
	2, 3, 2, 2, 3, 4, 1, 1, 1, 1,
	1, 3, 3, 2, 2, 1, 2, 5, 5, 8,
	8, 13, 11, 1, 1, 2, 2, 10, 8, 9,
	7, 7, 5, 0, 1, 1, 0, 1, 1, 1,
	2, 2, 1, 2, 0, 3, 0, 1, 1, 3,
	0, 4, 1, 3, 2, 1, 1, 2, 1, 1,
	1, 1, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	3, 6, 4, 7, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 0, 4, 1, 3, 1, 1, 1,
	1, 1, 1, 4, 8, 1, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 0, 4, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 6, 2, 2, 2,
	2, 2, 2, 2, 3, 3, 1, 1, 1, 1,
	2, 1, 4, 5, 5, 5, 5, 6, 4, 4,
	4, 6, 6, 6, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 9, 7, 5, 4, 4, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	2, 2, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 0, 2, 1, 3, 5, 3, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 3,
	0, 2, 1, 3, 1, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 5, 3, 1, 3,
	1, 2, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 2, 0, 2, 2, 0, 1, 4, 1, 3,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -213, -1, -14, -15, -18, 122, 123, -214, 377,
	-152, 56, -209, -210, -172, 131, 144, 162, 163, 349,
	129, 361, 362, 146, 364, 76, -96, 134, -153, -139,
	-102, 61, 34, 59, 130, 130, 132, 202, 132, -102,
	-102, 135, -46, -108, 59, 61, 129, -98, 135, 364,
	361, 362, 329, 129, 58, 57, -140, -117, -121, -118,
	-123, -122, -124, -102, -119, -120, 238, 341, 235, 239,
	236, 241, 242, 243, 116, 240, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 244, 256, 31,
	151, 228, 229, 230, 233, 232, 234, 231, 257, 258,
	259, 260, 261, 262, 263, 264, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 220, 221, 223, 224,
	225, 227, 226, -140, -140, -102, 54, 201, -102, -98,
	203, -98, 54, -184, 54, 19, 182, 183, 195, 78,
	23, 119, -98, -46, 78, -46, 293, -156, -221, 344,
	35, -139, -141, -145, -142, -143, -144, -157, -146, 138,
	136, 146, 375, 140, 141, -150, 142, 130, 147, 71,
	78, -178, 138, -181, 54, 272, 278, 136, 147, 146,
	375, 69, 139, 23, 351, 353, 29, 30, -134, 378,
	266, -132, 275, -127, 56, -127, -126, 237, -128, 56,
	-127, -128, -127, -128, -130, 239, -130, -130, -130, -130,
	56, 56, -127, -127, -127, -127, -127, -136, 56, -125,
	222, -136, -137, 56, -137, 54, 55, -46, -102, 54,
	-46, -205, 372, 373, -46, -46, -187, -185, 8, 9,
	10, -46, 196, 24, -117, -109, -108, -101, 127, 183,
	352, 77, 23, 25, 272, 278, 182, 80, 116, 16,
	81, 189, 361, 362, 115, 330, 122, 50, 322, 323,
	320, 187, 332, 333, 321, 279, 194, 20, 29, 372,
	10, 26, 149, 22, 109, 124, 184, 84, 85, 152,
	24, 150, 73, 190, 192, 19, 53, 142, 11, 351,
	13, 14, 366, 353, 135, 134, 96, 365, 130, 48,
	8, 118, 27, 373, 93, 44, 147, 193, 46, 94,
	17, 324, 325, 32, 339, 156, 111, 51, 38, 367,
	78, 368, 71, 54, 293, 188, 76, 15, 49, 157,
	369, 144, 191, 95, 125, 329, 47, 185, 370, 128,
	186, 6, 335, 31, 148, 45, 129, 280, 83, 133,
	72, 163, 5, 146, 9, 52, 55, 326, 327, 328,
	36, 82, 12, 145, 343, 74, -46, 24, 127, -46,
	-154, 57, -103, 69, -102, 286, 143, -101, 34, 56,
	-177, 54, 78, -148, -102, 147, -150, 59, 130, -176,
	361, 362, -217, 56, -150, -150, 59, 59, 147, 71,
	19, -102, 9, 147, 147, -177, 61, -46, 56, -174,
	352, 16, 56, -179, 56, -180, 61, 62, 63, 64,
	71, -129, 70, -52, 267, -59, 320, 323, 322, 268,
	72, 73, -102, 338, 337, -108, 59, -182, 63, 379,
	-133, 276, 63, -130, -127, -130, 63, 59, -130, -130,
	-131, 116, 115, 31, -131, -131, -131, -131, -138, 61,
	-138, -135, 343, 344, -135, 63, -136, 63, -46, -102,
	56, 54, -46, 23, 132, 23, -167, 23, 54, 57,
	196, -184, -102, 55, -106, 138, -145, 146, 127, 86,
	-103, -221, -161, -158, -102, 147, 10, 9, 19, 142,
	136, 146, 375, -176, 59, 56, -32, -51, 78, -56,
	29, 24, -55, -52, -69, -198, -67, -68, 116, 117,
	105, 106, 113, 79, 118, -59, -57, -58, -60, -201,
	173, 61, 62, -102, 60, 70, 63, 64, 65, 66,
	71, -108, 298, -65, -217, 46, 47, 330, 331, 332,
	333, 339, 334, 81, 36, 38, 244, 267, 268, 320,
	328, 327, 326, 324, 325, 322, 323, 374, 135, 321,
	111, 329, 265, 59, 59, -176, 146, -148, -102, 363,
	-178, 375, -129, -217, 56, -32, 23, 29, 63, -179,
	56, -180, -169, 374, -169, -217, -127, 56, -127, 56,
	56, -217, -217, -217, 119, 58, -131, -130, -131, 58,
	58, -131, -131, 59, 59, 116, 58, 57, 58, 228,
	228, 57, 58, 57, 56, 55, 54, -160, -161, -59,
	-102, -46, 56, -2, -3, -4, 6, -217, -98, -2,
	-168, 19, 170, 171, -46, -185, -83, -102, 147, -187,
	-184, -102, -216, 130, 147, -102, 138, -145, -155, -103,
	61, 63, 58, 57, -127, -159, 270, -127, -147, 166,
	167, 31, 168, -147, 363, 147, 147, -176, -217, 56,
	-161, -218, 77, 76, 93, 58, -32, -53, 96, 78,
	94, 95, 80, 102, 101, 112, 105, 106, 107, 108,
	109, 110, 111, 103, 104, 374, 86, 87, 88, 89,
	90, 91, 92, 97, 98, 99, 100, -97, -217, -68,
	-217, 120, 121, -56, -56, -56, -56, -56, -56, -56,
	-202, 266, -169, 61, 119, 119, -2, -63, -32, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -72, -32,
	-217, 39, -217, -217, -217, -223, -217, -223, -223, -223,
	-223, -223, -223, -223, -116, 116, 239, 151, 230, -119,
	-118, 245, 244, -217, -217, -217, -217, -176, 56, -177,
	-32, -83, 58, 56, 353, 57, 58, -179, 61, 58,
	269, 118, -117, -218, 58, 58, 58, -30, 22, -29,
	-63, -31, -32, 107, -108, -29, -32, -29, -103, -131,
	-130, 61, -130, 277, 277, 63, 63, -160, -102, -46,
	58, 56, 56, -83, -76, 15, -21, 5, -19, -222,
	-2, -46, 133, 21, 6, 8, 9, 10, 19, -100,
	57, 23, -187, -215, 56, -102, 146, -102, -163, -165,
	343, -164, 55, 143, 69, 175, 176, 177, 178, 179,
	180, 181, -158, -79, 25, 26, -177, 54, 71, 169,
	-177, 54, -148, -176, 56, -32, -161, 58, -173, 168,
	-32, -32, -61, 71, 78, 72, 73, -56, -62, -65,
	-68, 67, 96, 94, 95, 80, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-56, -121, 229, -116, -119, 59, -55, 61, -102, -55,
	-102, 378, -103, -109, -101, -103, -218, 57, -218, -2,
	-29, -29, -32, -115, 116, 235, 151, 230, 224, 254,
	255, 274, 228, 275, 217, 209, 214, 227, 225, 211,
	226, 210, 223, 220, 233, 232, 234, 245, 236, 241,
	243, 242, 240, -32, -31, -31, -29, -23, 22, -70,
	-71, 82, -69, -102, -108, 19, -218, -218, -218, -218,
	237, -29, -30, -29, -29, -29, -149, -102, -217, -218,
	58, 349, 350, -32, 56, 63, 58, -134, -218, -29,
	57, -218, -218, -105, -104, 23, -102, 61, 119, -218,
	-218, -217, -131, -131, 58, 58, 58, 56, 56, -84,
	365, -160, 58, -80, 17, 16, -5, -3, -217, 21,
	22, -25, 42, 43, -20, -218, 23, -149, 184, -99,
	82, -102, -188, -190, -6, -8, -7, -10, -9, -11,
	-12, -13, -16, -3, -22, 10, 9, 20, 31, 188,
	189, 194, 190, 145, 135, -17, 8, 329, 54, -220,
	-102, 105, 86, 61, -139, 57, 56, 56, 361, 362,
	136, -162, 54, -164, 343, 56, 345, 59, -151, 86,
	61, 86, 86, 86, 86, 86, 86, 86, 9, 10,
	56, 56, -161, -218, 58, -163, 336, 71, 72, 73,
	-62, -56, -56, -56, -28, 152, 77, 343, -218, -203,
	-204, 61, 119, -32, -218, -218, -218, 57, 55, 57,
	-127, -127, -127, -137, 215, -127, 215, -137, -127, -127,
	-127, -127, -127, -127, 23, 57, 11, 57, 11, -218,
	-29, -73, -71, 84, -32, -218, 119, -108, -218, -218,
	-218, -218, 58, 57, -32, -173, 54, 58, -175, 58,
	58, -218, -31, -206, 376, -104, 107, -109, -206, -206,
	-30, -84, -160, -161, -50, 12, 56, 58, -50, -81,
	19, 32, -32, -77, -78, -32, -76, -2, -23, 68,
	-2, -170, 55, 185, 204, -32, -190, -76, -19, -19,
	-19, -193, -102, -192, -19, -212, -211, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, -102, -102,
	-102, -186, 38, 191, 192, 193, -51, -56, -32, -51,
	-46, 58, -220, -102, -220, -220, -220, -220, -220, -161,
	-161, 56, 56, 147, -102, -166, -164, -102, 63, -183,
	54, 74, 63, -183, -183, -183, -183, -183, -147, -147,
	-149, -161, 58, -173, -163, -162, -28, 77, -56, -56,
	228, 379, 57, -169, -103, -115, 116, -113, 59, 61,
	-32, -130, 59, -115, -56, -56, -56, -56, 340, -76,
	85, -32, 83, -103, 139, -102, -218, 10, 9, 349,
	350, 58, 205, 355, 356, 156, 357, 168, 358, 359,
	-217, 119, -218, -50, 58, 58, -163, -32, -83, -84,
	-163, 9, 96, 57, 18, 57, -79, -80, -218, -24,
	45, -171, 343, -32, -191, -190, 204, -189, -190, -80,
	-96, 11, -41, -46, -34, -35, -36, -37, -48, -68,
	-217, -46, 57, -194, -117, 186, -89, -114, 206, -93,
	288, 287, -103, 298, -91, 286, 239, 285, -183, 57,
	-102, 11, 11, 11, 11, -190, 204, 83, 204, -100,
	19, 58, 58, -161, -161, 56, -217, 58, 57, -177,
	-177, 58, 58, -163, -162, -56, 277, -204, -218, -218,
	-218, -218, -218, 57, -218, 19, -218, 57, -218, 19,
	-217, -27, 335, -32, -46, -173, -147, -147, 343, 63,
	16, 63, 63, 63, 63, 356, 156, 358, 16, -218,
	157, -76, 107, -163, -50, -163, -162, 58, -50, -162,
	40, -32, -32, -78, -81, -29, 375, -190, 377, -190,
	-81, -47, 27, -46, -46, -41, -219, 57, 11, 55,
	31, 57, -42, -44, -43, -45, 44, 48, 50, 45,
	46, 47, 51, -112, 23, -34, -217, -111, 157, -110,
	23, -108, 61, -192, -102, 187, 57, -89, 206, -90,
	-94, 289, 291, 86, 119, -107, -102, 61, 29, 31,
	-211, 27, -189, -188, -189, -99, 184, -199, 197, 78,
	58, 58, -161, -102, -164, 139, -163, -162, -56, -56,
	-56, -56, -56, -218, 61, 56, 63, 63, 360, -108,
	16, -218, -162, -163, -163, 41, -33, 11, -32, 377,
	85, -190, -85, 157, -46, -85, 55, -34, -46, -88,
	-92, -69, -35, -36, -36, -35, -36, 44, 44, 44,
	49, 44, 49, 44, -43, -108, -218, -49, 52, 134,
	53, -217, -110, 19, -93, -90, 57, 290, 292, 293,
	54, 74, -32, -103, -131, -102, 85, 377, 377, 85,
	204, 185, -200, 198, 197, -163, -163, 58, -218, -46,
	-162, -218, -218, -218, -218, -26, 96, 343, -149, 119,
	-207, -208, -32, -162, -50, -34, 85, -54, 31, 36,
	-2, -217, -217, -50, -34, -50, -33, 57, 86, -39,
	-38, 54, 55, -40, 54, -38, 44, 44, -196, 343,
	130, 130, 130, -86, -102, -2, -94, -95, 294, 291,
	297, 86, 85, 84, -189, 200, 199, -162, -162, 56,
	-218, 341, 51, 346, 58, -103, -218, -76, 57, -74,
	13, -87, 54, -88, -64, -66, -65, -217, -2, -82,
	-102, -86, -76, -50, -50, -92, -32, -32, 56, -32,
	56, -217, -217, -217, -218, 57, 291, 295, 296, -32,
	135, 204, 377, -149, 41, 342, 347, -218, -208, -75,
	14, 16, 28, -87, 57, -218, -218, -218, 57, 119,
	-218, -80, -76, -83, -195, -197, 366, 367, 368, 369,
	370, 371, -83, -83, -83, -111, -102, -189, 85, 58,
	41, -32, -63, 147, -66, 36, -2, -217, -102, -102,
	-80, 58, 58, 57, -218, -218, -218, -49, 85, 343,
	9, -64, -2, 119, -197, -196, 346, -88, -218, -102,
	347,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 778, 1, 3,
	6, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	776, 397, 398, 399, 402, 0, 0, 779, 0, 150,
	194, 194, 194, 780, 0, 0, 776, 0, 776, 0,
	0, 0, 0, 509, 785, 786, 776, 0, 0, 403,
	400, 401, 146, 0, 410, 0, 157, 322, 318, 161,
	162, 163, 164, 165, 305, 241, 269, 270, 305, 293,
	312, 305, 312, 276, 305, 312, 325, 325, 325, 325,
	325, 284, 285, 286, 287, 288, 289, 290, 0, 0,
	261, 305, 305, 305, 305, 305, 267, 268, 295, 296,
	297, 298, 299, 300, 301, 302, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 307, 259, 307, 309,
	309, 257, 258, 158, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 148, 412, 0,
	415, 151, 152, 153, 154, 155, 156, 0, 404, 406,
	0, 393, 0, 0, 0, 0, 0, 366, 367, 167,
	0, 169, 0, 171, 0, 173, 174, 0, 176, 178,
	404, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	324, 320, 319, 240, 0, 325, 305, 294, 325, 0,
	325, 325, 277, 278, 328, 0, 328, 328, 328, 328,
	0, 0, 315, 315, 264, 265, 266, 252, 0, 307,
	260, 254, 255, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 0, 130, 0, 112, 108, 109,
	110, 0, 107, 0, 21, 510, 787, 788, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 0, 777, 143, 0,
	0, 0, 416, 418, 781, 782, 783, 784, 414, 0,
	376, 0, 0, 0, 407, 357, 0, 362, -2, 0,
	394, 395, 795, 952, 0, 0, 360, 393, 406, 168,
	0, 0, 0, 175, 177, 0, 181, 182, 795, 0,
	212, 0, 0, 195, 0, 198, -2, 201, 202, 203,
	236, 205, 206, 207, 0, 209, 305, 305, 232, 0,
	528, 529, 0, 0, 0, 0, -2, 210, 211, 323,
	160, 321, 0, 328, 325, 328, 0, 0, 328, 328,
	279, 329, 0, 0, 280, 281, 282, 283, 0, 303,
	0, 262, 0, 0, 263, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 776, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 406, 28, 144, 0, 0,
	417, 413, 0, 370, 305, 305, 0, 0, 0, 0,
	0, 393, 0, 0, 361, 0, 0, 519, 795, 524,
	526, 0, 565, 566, 567, 568, 569, 570, 795, 795,
	795, 795, 795, 795, 795, 596, 597, 598, 599, 0,
	601, -2, 709, 704, 711, 712, 713, 714, 715, 716,
	717, 0, 0, 757, 795, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 640,
	640, 640, 640, 640, 640, 640, 640, 0, 0, 0,
	0, 0, 796, 358, 359, 364, 393, 0, 407, 193,
	170, 404, 172, 795, 0, 0, 0, 213, 0, 0,
	0, 0, 200, 0, 204, 0, 228, 0, 230, 0,
	0, -2, 795, 795, 0, 306, 271, 328, 273, 313,
	314, 274, 275, 330, 326, 327, 325, 0, 325, 0,
	0, 0, 310, 0, 0, 0, 0, 0, 368, 369,
	305, 0, 0, -2, 725, 0, 422, 0, 0, -2,
	0, 0, 131, 132, 128, 113, 111, 475, 476, 0,
	0, 95, 0, 30, 31, 407, 406, 29, 411, 419,
	420, 421, 332, 0, 730, 374, 375, 373, 404, 383,
	384, 0, 0, 404, 405, 406, 393, 0, 795, 0,
	0, 234, 795, 795, 0, 953, 522, 795, 0, 0,
	795, 795, 795, 795, 795, 795, 795, 795, 795, 795,
	795, 795, 795, 795, 795, 0, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 555, 556, 525, 0, 539,
	0, 0, 0, 587, 588, 589, 590, 591, 592, 593,
	600, 0, 708, 710, 0, 0, 35, 0, 563, 795,
	795, 795, 795, 795, 795, 795, 795, 432, 0, 694,
	0, 0, 0, 0, 0, 631, 0, 632, 633, 634,
	635, 636, 637, 638, 639, 685, 0, 687, 688, 689,
	690, 691, 692, 795, -2, 795, 795, 365, 0, 0,
	0, 0, 0, 795, 190, 0, 196, 0, 236, 199,
	237, 238, 322, 208, 229, 231, 233, 0, 795, 0,
	0, 438, 444, 440, 0, 0, 444, 0, 0, 272,
	328, 304, 328, 316, 317, 0, 0, 0, 0, 0,
	517, 952, 0, 0, 733, 0, 0, 426, 429, 424,
	35, 0, 0, 134, 135, 136, 137, 138, 0, 700,
	0, 0, 0, 22, 97, 0, 0, 407, 354, 333,
	0, 335, 0, 350, 0, 0, 0, 0, 0, 0,
	0, 0, 371, 372, 731, 732, 377, 0, 385, 386,
	378, 0, 0, 0, 0, 0, 0, 332, 392, 0,
	520, 521, 523, 540, 0, 542, 544, 530, 531, 559,
	560, 561, 0, 795, 795, 795, 557, 535, 0, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 585, 0, 595, 305, 0, 583, 236, 0, 584,
	594, 0, 705, 0, -2, 707, 562, 795, 756, 35,
	0, 0, 0, 0, -2, 305, 656, 305, 309, 659,
	660, 661, 305, 664, 666, 667, 668, 669, 309, 671,
	672, 673, 674, 675, 305, 305, 678, 679, 305, 305,
	682, 305, 305, 0, 0, 0, 0, 795, 433, 702,
	697, 795, 0, 704, 0, 0, 628, 629, 630, 641,
	686, 0, 0, 437, 0, 0, 0, 408, 795, 234,
	183, 186, 187, 0, 214, 0, 0, 239, 602, 0,
	795, 449, 608, 441, 445, 0, 447, 448, 0, 449,
	449, -2, 291, 292, 308, 311, 517, 0, 0, 515,
	0, 0, 515, 737, 795, 795, 725, 37, 0, 427,
	428, 432, 430, 431, 423, 36, 0, 139, 0, 0,
	795, 477, 18, 114, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 725, 422, 422, 422, 0, 422, 0,
	0, 0, 69, 795, 795, 768, 41, 42, 0, 0,
	-2, 97, 97, -2, 97, 97, 0, 0, 0, 0,
	0, 331, 0, 336, 0, 0, 0, 339, 0, 351,
	341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 234, 332, 354, 235, 541, 543, 545,
	532, 557, 536, 0, 533, 795, 795, 0, 527, 0,
	798, 236, 0, 564, -2, 609, 610, 0, 0, 795,
	653, 325, 657, 658, 662, 663, 665, 670, 676, 677,
	680, 681, 683, 684, 0, 795, 795, 795, 795, 0,
	725, 0, 698, 795, 0, 626, 0, 627, 642, 643,
	644, 645, 0, 0, 0, 179, 0, 0, 0, 192,
	197, 603, 439, 604, 0, 446, 442, 0, 605, 606,
	0, 515, 0, 0, 332, 795, 0, 517, 332, 32,
	0, 0, 734, 726, 727, 730, 733, 35, 434, 425,
	-2, 141, 795, 129, 0, 701, 115, 733, 778, 0,
	0, 57, 62, 59, 0, 0, 801, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 64, 65,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	128, 96, 98, -2, 99, 100, 101, 102, 103, 0,
	0, 0, 0, 0, 355, 0, 337, 342, 340, 343,
	352, 353, 344, 345, 346, 347, 348, 349, 404, 404,
	0, 0, 332, 391, 354, 390, 534, 795, 558, 537,
	0, 797, 0, 800, 706, 0, 305, 0, 651, 652,
	0, 654, 655, 0, 0, 0, 0, 0, 0, 695,
	625, 703, 795, 705, 0, 409, 234, 0, 0, 188,
	189, 191, 0, 0, 0, 0, 0, 0, 225, 0,
	0, 0, 607, 332, 515, 332, 354, 516, 0, 515,
	354, 738, 0, 795, 795, 795, 729, 737, 38, 795,
	435, 16, 0, 140, 17, 126, 0, 0, 76, 737,
	0, 0, 0, 49, 0, 456, 458, 459, 460, 490,
	0, 492, 0, 0, 61, 63, 53, 0, 0, 761,
	93, 94, 0, 0, 0, -2, 0, 772, 769, 0,
	67, 70, 71, 72, 73, 74, 0, 0, 0, 700,
	0, 23, 789, 0, 0, 0, 0, 334, 0, 379,
	380, 0, 332, 354, 388, 538, 586, 799, 611, 614,
	612, 613, 615, 795, 617, 795, 619, 795, 621, 795,
	795, 0, 0, 699, 0, 180, 184, 185, 0, 216,
	0, 218, 219, 220, 221, 222, 223, 224, 0, 450,
	0, 0, 443, 354, 332, 10, 8, 518, 332, 12,
	0, 735, 736, 728, 33, 454, 795, 0, 0, 77,
	125, 51, 0, 508, -2, 0, 0, 0, 47, 48,
	0, 0, 0, 0, 0, 0, 497, 0, 0, 500,
	0, 0, 0, 0, 491, 0, 0, 511, 0, 493,
	0, 495, 496, 60, 0, 0, 0, 54, 0, 56,
	82, 0, 0, 795, 0, 328, 773, 774, 775, 771,
	802, 0, 0, 0, 0, 0, 0, 792, 790, 0,
	332, 332, 0, 0, 338, 0, 354, 389, 0, 0,
	0, 0, 646, 624, 696, 0, 215, 217, 226, 0,
	795, 452, 7, 11, 354, 739, 515, 0, 142, 0,
	19, 78, 0, 0, 507, 515, 0, 515, 50, 454,
	758, 0, 457, 486, 488, 0, 483, 498, 499, 501,
	0, 503, 0, 505, 506, 461, 462, 463, 0, 0,
	0, 0, 494, 0, 762, 55, 0, 0, 85, 86,
	763, 764, 765, 0, 767, 68, 75, 0, 0, 80,
	0, 129, 25, 0, 791, 354, 354, 24, 356, 0,
	387, 616, 618, 620, 622, 0, 0, 0, 0, 0,
	0, 722, 724, 9, 718, 455, 127, 750, 0, 0,
	-2, 0, 0, 725, 515, 46, 515, 0, 795, 480,
	487, 795, 0, 481, 795, 482, 502, 504, 473, 0,
	0, 0, 0, 0, 478, -2, 83, 84, 0, 0,
	90, 795, 0, 0, 0, 793, 794, 26, 27, 0,
	623, 0, 0, 0, 382, 227, 451, 0, 795, 720,
	0, 39, 0, 750, 740, 752, 754, 795, 35, 0,
	746, 0, 733, 45, 725, 759, 760, 484, 0, 489,
	0, 0, 0, 0, 492, 0, 87, 88, 89, 766,
	79, 0, 0, 0, 647, 0, 650, 453, 723, 34,
	795, 795, 0, 40, 0, 755, -2, 0, 0, 0,
	52, 44, 733, 0, 0, 465, 467, 468, 469, 470,
	471, 472, 0, 0, 0, 511, 479, 0, 20, 381,
	648, 721, 719, 0, 753, 0, -2, 0, 748, 747,
	43, 485, 464, 0, 512, 513, 514, 463, 81, 0,
	0, 743, 35, 0, 466, 474, 0, 751, -2, 749,
	649,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 377,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 378, 3, 379, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:406
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:411
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:412
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:420
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:425
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:445
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:465
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:486
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:502
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:519
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:538
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:549
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:561
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:572
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:588
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:602
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:616
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:629
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[6].colIdent,
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:643
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:654
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 23:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 24:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:674
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:688
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:708
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:726
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:744
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:753
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:768
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:776
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 34:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:783
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:789
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:793
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:799
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:803
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:810
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:822
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:834
		{
			yyVAL.str = InsertStr
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:838
		{
			yyVAL.str = ReplaceStr
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:844
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:850
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:854
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:858
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:863
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:864
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:868
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:872
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:877
		{
			yyVAL.partitions = nil
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:881
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:887
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:891
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:895
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:899
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:905
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:909
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:922
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:926
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:932
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:937
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:941
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:947
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:954
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:961
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:968
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:976
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:986
		{
			yyVAL.str = ""
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:990
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:994
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:998
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1002
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1008
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1015
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1025
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1029
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1033
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1040
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1049
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1057
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1068
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1072
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1078
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1082
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1086
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1092
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1100
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1104
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1110
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1114
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1120
		{
			yyVAL.str = SessionStr
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1124
		{
			yyVAL.str = GlobalStr
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1129
		{
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1130
		{
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1134
		{
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1135
		{
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1136
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1137
		{
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1138
		{
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1139
		{
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1140
		{
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1144
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1148
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1152
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1156
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1162
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1166
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1170
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1175
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1181
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1185
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1191
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1195
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1201
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1213
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1225
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1232
		{
			yyVAL.empty = struct{}{}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1234
		{
			yyVAL.empty = struct{}{}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1237
		{
			yyVAL.bytes = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1241
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1245
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1250
		{
			yyVAL.bytes = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1254
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1258
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1262
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1266
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1270
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1275
		{
			yyVAL.expr = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1284
		{
			yyVAL.expr = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1288
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1293
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1302
		{
			yyVAL.bytes = nil
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1306
		{
			yyVAL.bytes = nil
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1319
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1325
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1329
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1334
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1338
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1342
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1346
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1350
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1354
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1360
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1365
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1370
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1376
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1387
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1393
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1406
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1411
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1416
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1421
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1427
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1432
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1437
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1442
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1447
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1452
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1457
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1462
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1467
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1476
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1486
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1491
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1496
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1503
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1510
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1518
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1523
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1528
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1533
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1539
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1545
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1551
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1558
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1564
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1570
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1574
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1578
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1582
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1586
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1592
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1596
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1600
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1604
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1608
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1612
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1616
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1620
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1624
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1630
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1636
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1642
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1648
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1652
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1657
		{
			yyVAL.sequence = &Sequence{}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1661
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1666
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1671
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1676
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1681
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1686
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1691
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1696
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1701
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1706
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1711
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1716
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1721
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1728
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1732
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1736
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1740
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1744
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1748
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1753
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1757
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1762
		{
			yyVAL.bytes = nil
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1776
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1863
		{
			yyVAL.str = ""
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1867
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 292:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2002
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2007
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2011
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2033
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2051
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2056
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2061
		{
			yyVAL.optVal = nil
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2065
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2070
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2074
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2082
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2086
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2092
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2100
		{
			yyVAL.optVal = nil
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2104
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2108
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2117
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2121
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2125
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2130
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2134
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2139
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2143
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2148
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2152
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2156
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2161
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2165
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2169
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2174
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2178
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2182
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2188
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2193
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2197
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2201
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2207
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2211
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2217
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2221
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2227
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2231
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2236
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2240
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2244
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2248
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2252
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2256
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2260
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2264
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2268
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2274
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2278
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2284
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2288
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2294
		{
			yyVAL.indexPartition = nil
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2298
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2302
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2308
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2312
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2316
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2320
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2324
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2328
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2332
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2336
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2340
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2346
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2350
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2356
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2361
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2367
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2371
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2377
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2382
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2386
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2396
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2401
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2408
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 379:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2415
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 380:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2422
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 381:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2431
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 382:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2442
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2453
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2457
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2461
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2465
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 387:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2471
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 388:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2481
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 389:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2492
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:   yyDollar[6].indexColumns,
				Options:   yyDollar[8].indexOptions,
				Partition: yyDollar[9].indexPartition,
			}
		}
	case 390:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2502
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2513
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2522
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2531
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2535
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2539
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2549
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2553
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2557
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2561
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2565
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2571
		{
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2572
		{
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2576
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2580
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2585
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2592
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2596
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2603
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2607
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2613
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2617
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2622
		{
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2623
		{
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2627
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2631
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2635
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2641
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2645
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2649
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2654
		{
			setAllowComments(yylex, true)
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2658
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2664
		{
			yyVAL.bytes2 = nil
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2668
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2674
		{
			yyVAL.str = UnionStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2678
		{
			yyVAL.str = UnionAllStr
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2682
		{
			yyVAL.str = UnionDistinctStr
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2687
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2691
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2695
		{
			yyVAL.str = SQLCacheStr
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2700
		{
			yyVAL.str = ""
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2704
		{
			yyVAL.str = DistinctStr
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2709
		{
			yyVAL.str = ""
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2713
		{
			yyVAL.str = StraightJoinHint
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2718
		{
			yyVAL.selectExprs = nil
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2722
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2728
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2732
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2738
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2742
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2746
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2750
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2755
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2759
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2763
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2770
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2775
		{
			yyVAL.overExpr = nil
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2779
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2783
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2787
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 453:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2791
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2796
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2800
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2806
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2810
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2820
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2824
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2828
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2833
		{
			yyVAL.strs = []string{}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2837
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2843
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2847
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2853
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2857
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2861
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2865
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2869
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2873
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2879
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2883
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2889
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2894
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2904
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2908
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2921
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2925
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2929
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2933
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2939
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2941
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2945
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2947
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2951
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2953
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2956
		{
			yyVAL.empty = struct{}{}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2958
		{
			yyVAL.empty = struct{}{}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2965
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2969
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2976
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2982
		{
			yyVAL.str = JoinStr
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2986
		{
			yyVAL.str = JoinStr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.str = JoinStr
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2996
		{
			yyVAL.str = StraightJoinStr
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3002
		{
			yyVAL.str = LeftJoinStr
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3006
		{
			yyVAL.str = LeftJoinStr
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3010
		{
			yyVAL.str = RightJoinStr
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3014
		{
			yyVAL.str = RightJoinStr
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3020
		{
			yyVAL.str = NaturalJoinStr
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3024
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3034
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3038
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3044
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3048
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3053
		{
			yyVAL.indexHints = nil
		}
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3057
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3061
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 514:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3065
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3070
		{
			yyVAL.expr = nil
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3074
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3079
		{
			yyVAL.columns = nil
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3083
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3089
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3093
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3097
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3101
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3109
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3113
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3119
		{
			yyVAL.str = ""
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3123
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3129
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3133
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3139
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3143
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3147
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3151
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3159
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3163
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3167
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 538:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3171
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3175
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3181
		{
			yyVAL.str = IsNullStr
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3185
		{
			yyVAL.str = IsNotNullStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3189
		{
			yyVAL.str = IsTrueStr
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.str = IsNotTrueStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3197
		{
			yyVAL.str = IsFalseStr
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3201
		{
			yyVAL.str = IsNotFalseStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3207
		{
			yyVAL.str = EqualStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3211
		{
			yyVAL.str = LessThanStr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3215
		{
			yyVAL.str = GreaterThanStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3219
		{
			yyVAL.str = LessEqualStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3223
		{
			yyVAL.str = GreaterEqualStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3227
		{
			yyVAL.str = NotEqualStr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3231
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3235
		{
			yyVAL.str = PosixRegexStr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3239
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3243
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3247
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3252
		{
			yyVAL.expr = nil
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3256
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3262
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3266
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3270
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3276
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3282
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3286
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3292
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3296
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3300
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3304
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3312
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3316
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3320
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3324
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3328
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3332
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3336
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3340
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3344
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3348
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3352
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3356
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3360
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3364
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3372
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 586:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3376
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3380
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3384
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3388
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3396
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3410
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3414
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3418
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3426
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3434
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3442
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3446
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3456
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3460
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3464
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3468
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3472
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 607:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3476
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3480
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3490
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3494
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 611:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3498
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3502
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3506
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3510
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 615:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3514
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 616:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3518
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 617:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3522
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 618:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3526
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 619:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3530
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 620:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3534
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 621:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 622:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3542
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 623:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3546
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 624:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3550
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3558
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3563
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3567
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3571
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3575
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3585
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3589
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3593
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3597
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3602
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3607
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3612
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3617
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3621
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3635
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3639
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3643
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3647
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3653
		{
			yyVAL.str = ""
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3657
		{
			yyVAL.str = BooleanModeStr
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3661
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 649:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3665
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3669
		{
			yyVAL.str = QueryExpansionStr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3675
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3679
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3685
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3689
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3693
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3697
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3701
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3705
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3711
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3715
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3719
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3723
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3727
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3731
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3735
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3739
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3743
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3747
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3751
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3755
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3759
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3763
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3791
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3795
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3799
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3803
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3807
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3811
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3817
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3825
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3829
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3833
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3837
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3841
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3845
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3850
		{
			yyVAL.expr = nil
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3854
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3859
		{
			yyVAL.str = string("")
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3863
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3869
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3873
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3879
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3886
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3889
		{
			yyVAL.expr = nil
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3893
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3899
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3903
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 706:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3907
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3913
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3928
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3933
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3941
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3945
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3949
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3953
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3957
		{
			yyVAL.expr = &NullVal{}
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3962
		{
			yyVAL.exprs = nil
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3966
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3971
		{
			yyVAL.expr = nil
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3975
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3981
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3991
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3996
		{
			yyVAL.orderBy = nil
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4000
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4006
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4010
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4016
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4021
		{
			yyVAL.str = AscScr
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4025
		{
			yyVAL.str = AscScr
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4029
		{
			yyVAL.str = DescScr
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4034
		{
			yyVAL.limit = nil
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4038
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4042
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4046
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4051
		{
			yyVAL.str = ""
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4055
		{
			yyVAL.str = ForUpdateStr
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4059
		{
			yyVAL.str = ShareModeStr
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4072
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4076
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4080
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 743:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4085
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4089
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 745:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4093
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4100
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 749:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4112
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4117
		{
			yyVAL.updateExprs = nil
		}
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4121
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4127
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4131
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4137
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4141
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4147
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4153
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4167
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4173
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4179
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4183
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 766:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4202
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4206
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4212
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4218
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4225
		{
			yyVAL.bytes = []byte("charset")
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4232
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4236
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4240
		{
			yyVAL.expr = &Default{}
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4245
		{
			yyVAL.empty = struct{}{}
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4247
		{
			yyVAL.empty = struct{}{}
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4250
		{
			yyVAL.str = ""
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4252
		{
			yyVAL.str = IgnoreStr
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4256
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4263
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4267
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4271
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4277
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4282
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4289
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4295
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4299
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4303
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4309
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4313
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4317
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4323
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4327
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4334
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4341
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4345
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4352
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4358
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4362
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4528
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4537
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
