// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const GRANT = 57457
const REVOKE = 57458
const OPTION = 57459
const PRIVILEGES = 57460
const SCHEMA = 57461
const TABLE = 57462
const INDEX = 57463
const MATERIALIZED = 57464
const VIEW = 57465
const TO = 57466
const IGNORE = 57467
const IF = 57468
const PRIMARY = 57469
const COLUMN = 57470
const CONSTRAINT = 57471
const REFERENCES = 57472
const SPATIAL = 57473
const FULLTEXT = 57474
const FOREIGN = 57475
const KEY_BLOCK_SIZE = 57476
const POLICY = 57477
const WHILE = 57478
const EXCLUDE = 57479
const GIST = 57480
const UNIQUE = 57481
const KEY = 57482
const SHOW = 57483
const DESCRIBE = 57484
const EXPLAIN = 57485
const DATE = 57486
const ESCAPE = 57487
const REPAIR = 57488
const OPTIMIZE = 57489
const TRUNCATE = 57490
const EXEC = 57491
const EXECUTE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const TYPE = 57500
const RETURN = 57501
const EXTENSION = 57502
const DATA = 57503
const STATUS = 57504
const VARIABLES = 57505
const RESTRICT = 57506
const CASCADE = 57507
const NO = 57508
const ACTION = 57509
const PERMISSIVE = 57510
const RESTRICTIVE = 57511
const PUBLIC = 57512
const CURRENT_USER = 57513
const SESSION_USER = 57514
const PAD_INDEX = 57515
const FILLFACTOR = 57516
const IGNORE_DUP_KEY = 57517
const STATISTICS_NORECOMPUTE = 57518
const STATISTICS_INCREMENTAL = 57519
const ALLOW_ROW_LOCKS = 57520
const ALLOW_PAGE_LOCKS = 57521
const DISTANCE = 57522
const M = 57523
const EUCLIDEAN = 57524
const COSINE = 57525
const BEFORE = 57526
const AFTER = 57527
const EACH = 57528
const ROW = 57529
const SCROLL = 57530
const CURSOR = 57531
const OPEN = 57532
const CLOSE = 57533
const FETCH = 57534
const PRIOR = 57535
const FIRST = 57536
const LAST = 57537
const DEALLOCATE = 57538
const INSTEAD = 57539
const OF = 57540
const OUTPUT = 57541
const DEFERRABLE = 57542
const INITIALLY = 57543
const IMMEDIATE = 57544
const DEFERRED = 57545
const CONCURRENTLY = 57546
const SQL = 57547
const SECURITY = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const BIT = 57554
const TINYINT = 57555
const SMALLINT = 57556
const SMALLSERIAL = 57557
const MEDIUMINT = 57558
const INT = 57559
const INTEGER = 57560
const SERIAL = 57561
const BIGINT = 57562
const BIGSERIAL = 57563
const INTNUM = 57564
const REAL = 57565
const DOUBLE = 57566
const PRECISION = 57567
const FLOAT_TYPE = 57568
const DECIMAL = 57569
const NUMERIC = 57570
const SMALLMONEY = 57571
const MONEY = 57572
const TIME = 57573
const TIMESTAMP = 57574
const DATETIME = 57575
const YEAR = 57576
const DATETIMEOFFSET = 57577
const DATETIME2 = 57578
const SMALLDATETIME = 57579
const CHAR = 57580
const VARCHAR = 57581
const VARYING = 57582
const BOOL = 57583
const CHARACTER = 57584
const VARBINARY = 57585
const NCHAR = 57586
const NVARCHAR = 57587
const NTEXT = 57588
const UUID = 57589
const TEXT = 57590
const TINYTEXT = 57591
const MEDIUMTEXT = 57592
const LONGTEXT = 57593
const CITEXT = 57594
const BLOB = 57595
const TINYBLOB = 57596
const MEDIUMBLOB = 57597
const LONGBLOB = 57598
const JSON = 57599
const JSONB = 57600
const ENUM = 57601
const GEOMETRY = 57602
const POINT = 57603
const LINESTRING = 57604
const POLYGON = 57605
const GEOMETRYCOLLECTION = 57606
const MULTIPOINT = 57607
const MULTILINESTRING = 57608
const MULTIPOLYGON = 57609
const VECTOR = 57610
const VARIADIC = 57611
const ARRAY = 57612
const NOW = 57613
const GETDATE = 57614
const BPCHAR = 57615
const TEXT_PATTERN_OPS = 57616
const NULLX = 57617
const AUTO_INCREMENT = 57618
const APPROXNUM = 57619
const SIGNED = 57620
const UNSIGNED = 57621
const ZEROFILL = 57622
const ZONE = 57623
const AUTOINCREMENT = 57624
const DATABASES = 57625
const TABLES = 57626
const VSCHEMA_TABLES = 57627
const EXTENDED = 57628
const FULL = 57629
const PROCESSLIST = 57630
const NAMES = 57631
const CHARSET = 57632
const GLOBAL = 57633
const SESSION = 57634
const ISOLATION = 57635
const LEVEL = 57636
const READ = 57637
const WRITE = 57638
const ONLY = 57639
const REPEATABLE = 57640
const COMMITTED = 57641
const UNCOMMITTED = 57642
const SERIALIZABLE = 57643
const NEW = 57644
const CONCAT_NULL_YIELDS_NULL = 57645
const CURSOR_CLOSE_ON_COMMIT = 57646
const QUOTED_IDENTIFIER = 57647
const ARITHABORT = 57648
const FMTONLY = 57649
const NOCOUNT = 57650
const NOEXEC = 57651
const NUMERIC_ROUNDABORT = 57652
const ANSI_DEFAULTS = 57653
const ANSI_NULL_DFLT_OFF = 57654
const ANSI_NULL_DFLT_ON = 57655
const ANSI_NULLS = 57656
const ANSI_PADDING = 57657
const ANSI_WARNINGS = 57658
const FORCEPLAN = 57659
const SHOWPLAN_ALL = 57660
const SHOWPLAN_TEXT = 57661
const SHOWPLAN_XML = 57662
const IMPLICIT_TRANSACTIONS = 57663
const REMOTE_PROC_TRANSACTIONS = 57664
const XACT_ABORT = 57665
const CURRENT_TIMESTAMP = 57666
const DATABASE = 57667
const CURRENT_DATE = 57668
const CURRENT_TIME = 57669
const LOCALTIME = 57670
const LOCALTIMESTAMP = 57671
const UTC_DATE = 57672
const UTC_TIME = 57673
const UTC_TIMESTAMP = 57674
const REPLACE = 57675
const CONVERT = 57676
const CAST = 57677
const COALESCE = 57678
const SUBSTR = 57679
const SUBSTRING = 57680
const GROUP_CONCAT = 57681
const SEPARATOR = 57682
const INHERIT = 57683
const LEAD = 57684
const LAG = 57685
const MATCH = 57686
const AGAINST = 57687
const BOOLEAN = 57688
const LANGUAGE = 57689
const WITH = 57690
const WITHOUT = 57691
const PARSER = 57692
const QUERY = 57693
const EXPANSION = 57694
const UNUSED = 57695
const VIRTUAL = 57696
const STORED = 57697
const GENERATED = 57698
const ALWAYS = 57699
const IDENTITY = 57700
const SEQUENCE = 57701
const INCREMENT = 57702
const MINVALUE = 57703
const CACHE = 57704
const CYCLE = 57705
const OWNED = 57706
const NONE = 57707
const CLUSTERED = 57708
const NONCLUSTERED = 57709
const REPLICATION = 57710
const COLUMNSTORE = 57711
const INCLUDE = 57712
const HOLDLOCK = 57713
const NOLOCK = 57714
const NOWAIT = 57715
const PAGLOCK = 57716
const ROWLOCK = 57717
const TABLOCK = 57718
const UPDLOCK = 57719
const READUNCOMMITTED = 57720
const DEFINER = 57721
const INVOKER = 57722
const TYPECAST = 57723
const CHECK = 57724
const OVER = 57725

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"GRANT",
	"REVOKE",
	"OPTION",
	"PRIVILEGES",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"EXCLUDE",
	"GIST",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"EXTENSION",
	"DATA",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"COALESCE",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 7,
	138, 516,
	-2, 222,
	-1, 213,
	123, 950,
	-2, 943,
	-1, 214,
	123, 951,
	-2, 861,
	-1, 367,
	58, 513,
	-2, 1130,
	-1, 374,
	61, 462,
	-2, 1075,
	-1, 375,
	61, 463,
	-2, 1082,
	-1, 456,
	123, 954,
	-2, 948,
	-1, 457,
	123, 951,
	-2, 949,
	-1, 503,
	61, 462,
	-2, 459,
	-1, 526,
	218, 955,
	-2, 261,
	-1, 555,
	123, 952,
	-2, 865,
	-1, 675,
	138, 221,
	157, 221,
	-2, 1130,
	-1, 693,
	123, 951,
	-2, 391,
	-1, 857,
	60, 465,
	-2, 889,
	-1, 858,
	60, 466,
	-2, 889,
	-1, 859,
	60, 467,
	-2, 889,
	-1, 860,
	60, 468,
	-2, 889,
	-1, 864,
	5, 92,
	-2, 15,
	-1, 867,
	5, 92,
	-2, 17,
	-1, 1009,
	403, 834,
	-2, 391,
	-1, 1042,
	59, 967,
	123, 952,
	403, 967,
	-2, 865,
	-1, 1043,
	59, 968,
	403, 968,
	-2, 870,
	-1, 1044,
	59, 969,
	403, 969,
	-2, 871,
	-1, 1045,
	59, 970,
	403, 970,
	-2, 872,
	-1, 1046,
	59, 971,
	403, 971,
	-2, 873,
	-1, 1047,
	59, 972,
	403, 972,
	-2, 874,
	-1, 1048,
	59, 973,
	403, 973,
	-2, 651,
	-1, 1049,
	59, 974,
	403, 974,
	-2, 652,
	-1, 1145,
	119, 411,
	120, 411,
	-2, 24,
	-1, 1263,
	218, 955,
	-2, 262,
	-1, 1279,
	5, 93,
	-2, 699,
	-1, 1403,
	60, 162,
	-2, 945,
	-1, 1406,
	60, 162,
	-2, 279,
	-1, 1528,
	59, 975,
	403, 975,
	-2, 735,
	-1, 1559,
	5, 92,
	-2, 16,
	-1, 1575,
	206, 119,
	-2, 612,
	-1, 1620,
	32, 243,
	60, 162,
	71, 243,
	144, 243,
	146, 243,
	147, 243,
	287, 243,
	399, 243,
	402, 243,
	-2, 945,
	-1, 1621,
	161, 1023,
	229, 1023,
	230, 1023,
	231, 1023,
	232, 1023,
	233, 1023,
	234, 1023,
	235, 1023,
	236, 1023,
	237, 1023,
	238, 1023,
	240, 1023,
	241, 1023,
	243, 1023,
	244, 1023,
	245, 1023,
	246, 1023,
	247, 1023,
	248, 1023,
	249, 1023,
	250, 1023,
	251, 1023,
	252, 1023,
	253, 1023,
	254, 1023,
	255, 1023,
	256, 1023,
	258, 1023,
	259, 1023,
	260, 1023,
	261, 1023,
	262, 1023,
	263, 1023,
	264, 1023,
	265, 1023,
	266, 1023,
	267, 1023,
	268, 1023,
	270, 1023,
	271, 1023,
	272, 1023,
	273, 1023,
	274, 1023,
	275, 1023,
	276, 1023,
	277, 1023,
	278, 1023,
	279, 1023,
	280, 1023,
	281, 1023,
	282, 1023,
	283, 1023,
	284, 1023,
	285, 1023,
	363, 1023,
	-2, 391,
	-1, 1622,
	161, 1152,
	229, 1152,
	230, 1152,
	231, 1152,
	232, 1152,
	233, 1152,
	234, 1152,
	235, 1152,
	236, 1152,
	237, 1152,
	238, 1152,
	240, 1152,
	241, 1152,
	243, 1152,
	244, 1152,
	245, 1152,
	246, 1152,
	247, 1152,
	248, 1152,
	249, 1152,
	250, 1152,
	251, 1152,
	252, 1152,
	253, 1152,
	254, 1152,
	255, 1152,
	256, 1152,
	258, 1152,
	260, 1152,
	261, 1152,
	262, 1152,
	263, 1152,
	264, 1152,
	265, 1152,
	266, 1152,
	267, 1152,
	268, 1152,
	270, 1152,
	271, 1152,
	272, 1152,
	273, 1152,
	274, 1152,
	275, 1152,
	276, 1152,
	277, 1152,
	278, 1152,
	279, 1152,
	280, 1152,
	281, 1152,
	282, 1152,
	283, 1152,
	284, 1152,
	285, 1152,
	363, 1152,
	-2, 411,
	-1, 1624,
	161, 1078,
	229, 1078,
	230, 1078,
	231, 1078,
	232, 1078,
	233, 1078,
	234, 1078,
	235, 1078,
	236, 1078,
	237, 1078,
	238, 1078,
	240, 1078,
	241, 1078,
	243, 1078,
	244, 1078,
	245, 1078,
	246, 1078,
	247, 1078,
	248, 1078,
	249, 1078,
	250, 1078,
	251, 1078,
	252, 1078,
	253, 1078,
	254, 1078,
	255, 1078,
	256, 1078,
	258, 1078,
	259, 1078,
	260, 1078,
	261, 1078,
	262, 1078,
	263, 1078,
	264, 1078,
	265, 1078,
	266, 1078,
	267, 1078,
	268, 1078,
	270, 1078,
	271, 1078,
	272, 1078,
	273, 1078,
	274, 1078,
	275, 1078,
	276, 1078,
	277, 1078,
	278, 1078,
	279, 1078,
	280, 1078,
	281, 1078,
	282, 1078,
	283, 1078,
	284, 1078,
	285, 1078,
	363, 1078,
	-2, 353,
	-1, 1718,
	403, 845,
	-2, 726,
	-1, 1799,
	90, 946,
	-2, 931,
	-1, 1844,
	105, 742,
	106, 742,
	107, 742,
	108, 742,
	109, 742,
	110, 742,
	111, 742,
	112, 742,
	113, 742,
	114, 742,
	115, 742,
	116, 742,
	119, 742,
	398, 742,
	-2, 655,
	-1, 1845,
	105, 742,
	106, 742,
	107, 742,
	108, 742,
	109, 742,
	110, 742,
	111, 742,
	112, 742,
	113, 742,
	114, 742,
	115, 742,
	116, 742,
	119, 742,
	398, 742,
	-2, 657,
	-1, 1846,
	105, 742,
	106, 742,
	107, 742,
	108, 742,
	109, 742,
	110, 742,
	111, 742,
	112, 742,
	113, 742,
	114, 742,
	115, 742,
	116, 742,
	119, 742,
	398, 742,
	-2, 659,
	-1, 1850,
	218, 955,
	-2, 263,
	-1, 1851,
	218, 955,
	-2, 265,
	-1, 1901,
	57, 106,
	59, 106,
	-2, 108,
	-1, 2092,
	5, 92,
	-2, 900,
	-1, 2117,
	5, 92,
	-2, 115,
	-1, 2155,
	59, 1118,
	60, 1118,
	-2, 542,
	-1, 2192,
	5, 93,
	-2, 901,
	-1, 2225,
	5, 92,
	-2, 903,
	-1, 2246,
	5, 93,
	-2, 904,
}

const yyPrivate = 57344

const yyLast = 16313

var yyAct = [...]int16{
	557, 536, 2015, 773, 2201, 2033, 2110, 2148, 2154, 43,
	43, 569, 1922, 2149, 2145, 1271, 58, 2078, 700, 2016,
	2115, 775, 209, 210, 211, 1367, 1936, 1381, 1255, 1368,
	61, 1983, 1920, 1793, 1364, 1910, 2102, 931, 1769, 1924,
	1935, 1779, 1382, 2009, 1778, 745, 1761, 1181, 616, 1579,
	1790, 1576, 1787, 465, 1508, 495, 250, 250, 250, 1213,
	55, 1513, 1811, 1022, 1491, 1665, 1656, 1221, 48, 1214,
	797, 1352, 1027, 1010, 855, 1361, 251, 1290, 1114, 1092,
	245, 1057, 928, 1141, 1041, 1095, 244, 246, 431, 921,
	417, 1234, 498, 455, 874, 1521, 1379, 504, 813, 690,
	715, 1407, 1029, 358, 658, 882, 1033, 624, 533, 446,
	447, 378, 212, 805, 539, 353, 323, 54, 469, 627,
	426, 749, 748, 758, 759, 751, 752, 753, 754, 755,
	756, 757, 750, 1337, 951, 761, 1336, 222, 604, 224,
	225, 758, 759, 751, 752, 753, 754, 755, 756, 757,
	750, 1108, 1297, 761, 402, 955, 957, 1107, 963, 785,
	13, 1522, 1169, 1616, 964, 965, 966, 967, 968, 969,
	970, 44, 956, 958, 954, 959, 960, 961, 962, 749,
	748, 758, 759, 751, 752, 753, 754, 755, 756, 757,
	750, 750, 397, 761, 761, 1925, 2202, 2203, 2204, 2205,
	2206, 2207, 2208, 2209, 314, 317, 318, 888, 1888, 761,
	442, 443, 707, 329, 1353, 502, 226, 890, 393, 887,
	506, 507, 710, 58, 708, 336, 1427, 728, 937, 1152,
	731, 220, 43, 1927, 227, 228, 530, 1707, 1708, 2244,
	990, 1860, 2140, 58, 955, 957, 2237, 963, 1264, 1265,
	1365, 2083, 1444, 964, 965, 966, 967, 968, 969, 970,
	746, 956, 958, 954, 959, 960, 961, 962, 749, 748,
	758, 759, 751, 752, 753, 754, 755, 756, 757, 750,
	1443, 2111, 761, 334, 751, 752, 753, 754, 755, 756,
	757, 750, 503, 2220, 761, 1149, 509, 401, 1269, 1110,
	780, 782, 1396, 1385, 1384, 747, 220, 396, 217, 1109,
	1110, 505, 372, 1758, 1386, 628, 629, 437, 2139, 319,
	1543, 321, 197, 2082, 355, 2061, 1954, 1387, 1477, 1747,
	229, 58, 738, 250, 2121, 2174, 335, 2120, 44, 1923,
	2122, 2175, 2176, 44, 356, 198, 2044, 2045, 194, 199,
	200, 2043, 1718, 58, 412, 414, 415, 416, 1549, 44,
	1944, 456, 44, 1937, 463, 1938, 499, 1548, 1122, 753,
	754, 755, 756, 757, 750, 948, 947, 761, 1688, 1121,
	520, 606, 2052, 399, 735, 540, 737, 736, 1686, 44,
	44, 454, 1943, 949, 467, 570, 413, 197, 433, 1106,
	405, 607, 390, 915, 1537, 1170, 1507, 1553, 393, 394,
	315, 1313, 44, 491, 760, 44, 44, 1339, 1293, 460,
	198, 45, 1338, 194, 199, 200, 406, 462, 430, 847,
	429, 1685, 760, 381, 876, 1311, 636, 1380, 846, 202,
	1814, 1683, 1563, 524, 320, 471, 453, 1392, 388, 34,
	376, 1859, 929, 1861, 506, 507, 1418, 206, 377, 930,
	1398, 1399, 889, 620, 621, 622, 623, 709, 201, 58,
	1394, 661, 760, 760, 1202, 1201, 663, 664, 665, 666,
	667, 509, 58, 1217, 44, 1977, 680, 648, 760, 684,
	58, 451, 949, 1815, 609, 691, 1296, 611, 1107, 614,
	615, 1388, 1389, 1391, 1562, 1930, 1614, 1390, 760, 740,
	702, 1789, 950, 1360, 202, 1206, 324, 1961, 730, 463,
	1222, 384, 1820, 379, 389, 1666, 1667, 626, 1178, 870,
	871, 1646, 702, 386, 385, 702, 1291, 506, 507, 207,
	1423, 630, 1023, 201, 2010, 741, 659, 2222, 1648, 633,
	687, 1428, 1429, 403, 1153, 1154, 408, 991, 1425, 410,
	1852, 760, 1149, 650, 947, 660, 195, 196, 1439, 649,
	657, 1155, 44, 760, 1293, 316, 420, 421, 422, 423,
	424, 949, 685, 672, 669, 674, 733, 951, 45, 1444,
	948, 947, 1975, 45, 529, 948, 947, 827, 711, 681,
	670, 1148, 413, 1471, 939, 938, 688, 517, 949, 45,
	729, 950, 45, 949, 727, 1993, 662, 702, 1502, 523,
	749, 748, 758, 759, 751, 752, 753, 754, 755, 756,
	757, 750, 732, 2081, 761, 1671, 917, 522, 691, 45,
	45, 195, 196, 702, 1397, 864, 701, 867, 500, 875,
	706, 776, 58, 354, 881, 883, 760, 883, 833, 886,
	835, 1472, 45, 838, 839, 45, 45, 772, 701, 896,
	382, 701, 58, 818, 899, 1967, 383, 900, 901, 902,
	501, 339, 510, 512, 819, 1150, 409, 58, 903, 411,
	1697, 1788, 474, 922, 923, 2007, 1870, 1709, 325, 326,
	950, 834, 610, 1701, 807, 808, 809, 810, 811, 812,
	676, 327, 879, 475, 691, 749, 748, 758, 759, 751,
	752, 753, 754, 755, 756, 757, 750, 950, 722, 761,
	1431, 1160, 950, 1437, 45, 514, 1735, 951, 776, 1171,
	776, 875, 936, 239, 668, 948, 947, 909, 474, 1722,
	391, 240, 392, 701, 515, 866, 948, 947, 873, 877,
	880, 827, 885, 949, 1015, 1015, 47, 49, 1167, 1666,
	1667, 51, 1017, 898, 949, 897, 387, 677, 678, 701,
	1432, 1161, 1026, 904, 58, 58, 924, 925, 926, 980,
	1721, 476, 477, 2238, 780, 478, 1396, 1385, 1384, 479,
	1098, 1097, 1605, 1032, 50, 1713, 940, 513, 1386, 51,
	948, 947, 1829, 2141, 456, 2006, 1304, 892, 1303, 776,
	1715, 1387, 45, 977, 988, 216, 978, 511, 949, 1744,
	642, 948, 947, 780, 1172, 987, 1134, 1009, 948, 947,
	340, 1006, 895, 485, 1037, 1038, 505, 208, 819, 949,
	2034, 2036, 2114, 691, 1126, 2113, 949, 2112, 655, 1008,
	1031, 205, 1710, 875, 691, 1051, 1053, 1054, 1055, 1132,
	951, 1088, 1013, 1016, 1091, 776, 1891, 1433, 1162, 977,
	1994, 1173, 950, 1117, 511, 509, 204, 203, 220, 1627,
	217, 338, 691, 950, 236, 250, 1166, 223, 1168, 232,
	1089, 1090, 1409, 505, 1174, 679, 480, 1112, 1177, 1115,
	1116, 349, 893, 760, 691, 749, 748, 758, 759, 751,
	752, 753, 754, 755, 756, 757, 750, 1125, 58, 761,
	348, 1380, 1113, 951, 1118, 2195, 1120, 2074, 2035, 730,
	654, 1392, 1940, 1215, 1218, 691, 1730, 950, 924, 925,
	926, 934, 948, 947, 1398, 1399, 1294, 1130, 1111, 894,
	763, 764, 776, 1633, 1394, 927, 1235, 907, 950, 784,
	949, 783, 1606, 1607, 1608, 950, 1098, 1252, 651, 197,
	58, 1165, 948, 947, 488, 400, 1740, 1203, 1200, 914,
	918, 919, 1207, 333, 330, 1388, 1389, 1391, 618, 617,
	949, 1390, 198, 1244, 1196, 194, 199, 200, 760, 1198,
	1742, 951, 1567, 1195, 1711, 1712, 1714, 1716, 1717, 1854,
	472, 468, 470, 1720, 482, 483, 474, 951, 481, 841,
	1438, 1209, 473, 981, 983, 1292, 906, 1210, 1268, 1321,
	1256, 749, 748, 758, 759, 751, 752, 753, 754, 755,
	756, 757, 750, 1292, 487, 761, 749, 748, 758, 759,
	751, 752, 753, 754, 755, 756, 757, 750, 746, 2123,
	761, 776, 749, 748, 758, 759, 751, 752, 753, 754,
	755, 756, 757, 750, 948, 947, 761, 746, 842, 950,
	2100, 1939, 1547, 948, 947, 1895, 202, 508, 1492, 932,
	933, 935, 949, 1458, 1896, 973, 1457, 1504, 1456, 1285,
	1455, 949, 1340, 747, 342, 343, 344, 11, 341, 950,
	1454, 1275, 554, 1453, 1452, 201, 948, 947, 1451, 1450,
	691, 1449, 747, 1447, 1096, 58, 1362, 1331, 1397, 1545,
	1242, 1096, 497, 1363, 949, 1208, 1434, 331, 1403, 1647,
	1410, 1310, 691, 691, 1240, 1241, 1239, 1199, 1215, 1419,
	1163, 1314, 1518, 1359, 519, 1204, 496, 1345, 1645, 1346,
	497, 1328, 7, 10, 250, 1424, 948, 947, 8, 9,
	1330, 44, 558, 1014, 556, 560, 561, 562, 563, 1565,
	497, 497, 559, 564, 949, 1256, 1435, 1226, 1228, 1229,
	1478, 1479, 1480, 1649, 1354, 1227, 1175, 1422, 760, 682,
	1164, 1205, 691, 1650, 509, 989, 1176, 1417, 518, 683,
	1880, 950, 1461, 195, 196, 1237, 1463, 1441, 1400, 1858,
	950, 1668, 1659, 1657, 948, 947, 1118, 748, 758, 759,
	751, 752, 753, 754, 755, 756, 757, 750, 1655, 608,
	761, 1235, 949, 739, 1658, 1197, 1657, 1260, 1124, 1803,
	1436, 1258, 608, 950, 951, 951, 1259, 1123, 993, 1104,
	554, 554, 554, 554, 554, 554, 554, 1658, 634, 632,
	1516, 613, 1503, 778, 631, 612, 781, 603, 1011, 1460,
	1012, 509, 1292, 1448, 762, 58, 782, 782, 1119, 827,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 1402, 799, 950, 801, 802, 803, 804, 806, 806,
	806, 806, 806, 806, 806, 456, 828, 829, 830, 831,
	1501, 1487, 905, 625, 760, 776, 525, 1445, 1515, 1251,
	1236, 1142, 951, 2232, 2231, 1142, 2230, 1498, 2215, 760,
	840, 691, 691, 2173, 951, 1037, 1306, 1308, 726, 1309,
	1517, 725, 1559, 724, 1312, 760, 1023, 2194, 951, 1523,
	865, 950, 865, 776, 723, 1009, 1315, 1316, 1534, 1006,
	1317, 1318, 1527, 1319, 1320, 1531, 819, 1575, 1525, 1601,
	1602, 1603, 1544, 1520, 1610, 1529, 1530, 1528, 1526, 1536,
	712, 1568, 780, 1538, 1403, 1403, 1403, 1620, 1403, 1403,
	2137, 951, 1498, 2129, 691, 691, 691, 913, 2062, 1750,
	781, 1550, 1907, 951, 250, 1551, 516, 691, 691, 2090,
	1615, 45, 913, 1960, 2091, 913, 1959, 2146, 941, 942,
	2099, 1651, 1554, 1569, 1904, 1654, 1556, 972, 974, 975,
	976, 778, 913, 1957, 509, 776, 1571, 1572, 1573, 1506,
	1577, 1470, 1956, 1470, 1955, 1612, 58, 691, 1142, 1885,
	1500, 1215, 1684, 1687, 1215, 1215, 1613, 554, 554, 554,
	554, 554, 554, 554, 554, 554, 554, 554, 554, 1907,
	1905, 1653, 655, 780, 1677, 1470, 951, 913, 1838, 58,
	1674, 1459, 1676, 1498, 1837, 1834, 1833, 778, 946, 1984,
	1637, 913, 1826, 1906, 554, 913, 1825, 1349, 1660, 1661,
	1662, 1663, 1664, 1023, 1670, 2224, 1256, 913, 1819, 760,
	2013, 1725, 655, 1689, 1690, 1348, 1680, 913, 1818, 1907,
	1682, 1984, 567, 1347, 1673, 509, 1675, 913, 1817, 1672,
	913, 1751, 1261, 1696, 913, 1679, 875, 2099, 1699, 1702,
	1561, 213, 1498, 217, 1128, 215, 219, 1286, 1617, 1618,
	1619, 1625, 1626, 1470, 1634, 913, 1629, 848, 58, 776,
	1143, 776, 837, 776, 836, 1767, 1706, 913, 1628, 1286,
	219, 832, 219, 219, 865, 2099, 1772, 1760, 1771, 2190,
	1770, 1326, 1764, 1324, 1724, 1804, 1777, 1286, 951, 1020,
	1738, 951, 1498, 1497, 647, 1566, 913, 1475, 913, 1420,
	1907, 1403, 913, 1356, 878, 1236, 1776, 647, 1755, 1142,
	1355, 1498, 1812, 1812, 1020, 951, 1215, 1215, 1796, 691,
	1774, 2042, 691, 691, 856, 1802, 1932, 250, 1816, 1325,
	1754, 1323, 197, 1142, 1263, 1785, 749, 748, 758, 759,
	751, 752, 753, 754, 755, 756, 757, 750, 951, 1723,
	761, 913, 1220, 1286, 1813, 198, 844, 1145, 194, 199,
	200, 656, 554, 1238, 1305, 554, 780, 554, 554, 554,
	554, 554, 554, 913, 912, 1822, 1823, 851, 850, 844,
	845, 844, 843, 865, 242, 241, 1142, 646, 913, 1257,
	647, 1843, 992, 749, 748, 758, 759, 751, 752, 753,
	754, 755, 756, 757, 750, 233, 849, 761, 231, 655,
	1835, 58, 1836, 1830, 230, 509, 653, 231, 509, 1158,
	1157, 2168, 1850, 1851, 312, 1775, 943, 509, 2166, 1476,
	853, 852, 2127, 1276, 2103, 2104, 1853, 1855, 1856, 1857,
	1973, 1831, 419, 1557, 402, 1642, 1295, 1641, 219, 202,
	1638, 1849, 1636, 1635, 1555, 1466, 1465, 1430, 219, 219,
	1867, 1426, 219, 351, 1415, 1866, 1929, 554, 250, 1414,
	1413, 879, 58, 1871, 1351, 220, 1350, 217, 201, 1942,
	243, 432, 313, 1894, 1267, 1211, 1868, 1156, 1151, 1147,
	1129, 45, 985, 984, 1762, 982, 1763, 979, 944, 1566,
	1897, 891, 1893, 863, 862, 713, 652, 637, 427, 1902,
	1306, 531, 691, 1963, 527, 1919, 494, 1928, 434, 435,
	2146, 425, 1933, 418, 407, 1958, 15, 1440, 2106, 854,
	638, 439, 1796, 1946, 1965, 1966, 438, 1948, 219, 328,
	1809, 1950, 219, 322, 219, 219, 52, 2027, 2109, 1974,
	1976, 219, 2028, 458, 1931, 1728, 458, 1681, 219, 2025,
	776, 219, 1964, 219, 2026, 1558, 197, 2108, 2024, 554,
	219, 2029, 2023, 1916, 1917, 2186, 195, 196, 1978, 1951,
	1979, 1281, 1282, 2138, 1982, 1863, 800, 1098, 2017, 198,
	486, 493, 194, 199, 200, 1509, 1945, 619, 744, 410,
	2188, 1772, 1947, 2002, 459, 1026, 1972, 922, 923, 1295,
	1510, 1789, 219, 58, 2003, 1358, 2014, 1277, 743, 2005,
	1278, 58, 645, 643, 781, 2012, 1473, 1474, 58, 760,
	2019, 2020, 2018, 2022, 2030, 2021, 641, 332, 1749, 1782,
	1482, 1484, 1486, 1093, 2039, 2038, 2040, 778, 1238, 554,
	554, 554, 1401, 554, 58, 2041, 2051, 219, 1140, 1099,
	869, 219, 219, 1136, 705, 1137, 1138, 1139, 2068, 1272,
	2050, 2183, 1985, 1796, 1862, 1273, 1023, 2182, 1135, 2134,
	1554, 2049, 2069, 202, 1691, 865, 760, 1808, 1256, 1807,
	1806, 1566, 1890, 2092, 1805, 1566, 1763, 2076, 776, 448,
	449, 450, 1705, 1704, 1762, 2073, 554, 704, 703, 1464,
	33, 458, 201, 1025, 1256, 2239, 2071, 699, 2116, 1719,
	46, 2058, 1821, 2117, 1462, 1692, 2096, 2098, 2064, 2065,
	521, 1028, 554, 554, 554, 554, 1903, 2070, 2107, 2072,
	1146, 1762, 12, 1, 1578, 1762, 17, 16, 2077, 2118,
	1912, 1915, 1916, 1917, 1913, 58, 1914, 1918, 441, 1039,
	2103, 2104, 1752, 552, 537, 2200, 1756, 865, 1786, 1574,
	1604, 1098, 2017, 2147, 2156, 2116, 1669, 2152, 602, 380,
	1098, 2017, 1505, 2150, 528, 19, 776, 1757, 1560, 2130,
	868, 2131, 644, 1772, 1772, 2159, 1771, 1652, 1770, 2163,
	1179, 2142, 1611, 916, 2157, 363, 2143, 2144, 58, 352,
	195, 196, 908, 489, 53, 2132, 776, 14, 1446, 689,
	2000, 2136, 364, 362, 361, 1566, 360, 359, 1890, 2179,
	2180, 2128, 357, 395, 605, 2185, 2178, 398, 1882, 2160,
	554, 734, 2189, 1886, 404, 428, 249, 875, 247, 1782,
	875, 875, 875, 248, 2214, 252, 2197, 1791, 1941, 1289,
	699, 219, 971, 2119, 1798, 2213, 2153, 1512, 1256, 219,
	776, 2181, 2133, 1329, 1094, 2156, 2228, 2225, 219, 1890,
	538, 1890, 2150, 2227, 2223, 2219, 1225, 2089, 1839, 953,
	534, 778, 1781, 778, 2229, 778, 1898, 1911, 1909, 2236,
	1908, 554, 2105, 554, 2101, 2157, 2198, 1780, 1746, 1992,
	2241, 1280, 2240, 1727, 1393, 1383, 2150, 2242, 1024, 1283,
	1098, 2017, 2245, 2243, 6, 1395, 1378, 5, 1970, 1971,
	4, 1729, 1763, 3, 1377, 1376, 699, 1375, 2000, 1374,
	1842, 2199, 2216, 2217, 2210, 2211, 2212, 1372, 220, 1373,
	1927, 1370, 1745, 1371, 1369, 1274, 777, 2, 1881, 0,
	1883, 0, 1018, 1019, 1021, 0, 0, 0, 0, 1782,
	776, 0, 0, 1782, 1782, 1782, 1782, 1782, 0, 0,
	0, 0, 1783, 0, 2000, 0, 0, 1782, 0, 0,
	1100, 1101, 1102, 1103, 0, 1105, 0, 0, 0, 0,
	0, 1884, 0, 776, 1036, 1887, 458, 0, 0, 1036,
	1036, 1036, 1036, 0, 0, 1036, 1036, 1036, 1036, 0,
	0, 35, 215, 36, 37, 38, 1952, 1953, 1912, 1915,
	1916, 1917, 1913, 551, 1914, 1918, 42, 0, 945, 197,
	0, 0, 0, 2056, 2057, 0, 0, 1968, 0, 0,
	1782, 1036, 1036, 1036, 1036, 0, 0, 0, 0, 0,
	1832, 0, 198, 0, 0, 194, 199, 200, 0, 0,
	0, 2075, 0, 1566, 0, 699, 44, 219, 0, 1782,
	0, 0, 0, 0, 0, 0, 699, 509, 1969, 219,
	220, 1996, 217, 0, 0, 1997, 0, 0, 0, 0,
	2095, 219, 2097, 0, 0, 0, 554, 0, 0, 0,
	0, 0, 0, 0, 699, 0, 0, 0, 1763, 0,
	0, 0, 214, 0, 0, 0, 0, 0, 0, 0,
	1995, 0, 0, 0, 0, 0, 699, 0, 62, 0,
	0, 0, 0, 0, 554, 0, 221, 554, 0, 554,
	0, 554, 0, 554, 554, 0, 202, 0, 0, 0,
	0, 0, 40, 548, 0, 1253, 1254, 699, 2059, 2060,
	221, 0, 221, 221, 0, 1262, 0, 0, 0, 0,
	39, 197, 0, 0, 2161, 201, 2162, 1925, 1131, 41,
	0, 0, 1921, 0, 0, 0, 0, 0, 215, 0,
	0, 2054, 2055, 0, 198, 0, 0, 194, 199, 200,
	780, 0, 1396, 1385, 1384, 1279, 1159, 2067, 1284, 0,
	1287, 1288, 0, 220, 1386, 1927, 0, 0, 0, 1494,
	0, 0, 0, 0, 0, 0, 0, 1387, 0, 0,
	1299, 0, 1300, 1301, 1302, 0, 2084, 0, 0, 0,
	0, 0, 0, 1036, 749, 748, 758, 759, 751, 752,
	753, 754, 755, 756, 757, 750, 0, 0, 761, 1219,
	0, 0, 0, 0, 0, 0, 0, 1322, 0, 0,
	1327, 0, 0, 195, 196, 0, 1333, 0, 0, 0,
	550, 0, 1766, 1335, 0, 0, 0, 0, 202, 0,
	0, 1341, 1342, 0, 1343, 1344, 0, 0, 2125, 2126,
	0, 0, 1783, 0, 197, 1036, 1783, 1783, 1783, 1783,
	1783, 1357, 1334, 0, 0, 0, 45, 201, 0, 0,
	1921, 0, 2037, 0, 0, 0, 0, 198, 0, 0,
	194, 199, 200, 0, 1784, 62, 0, 1380, 221, 0,
	0, 0, 699, 0, 0, 0, 0, 1392, 221, 221,
	0, 0, 221, 221, 0, 62, 0, 0, 218, 0,
	1398, 1399, 0, 0, 699, 699, 0, 0, 0, 0,
	1394, 0, 0, 0, 0, 0, 0, 1052, 0, 0,
	0, 0, 234, 1783, 237, 238, 0, 0, 0, 0,
	0, 1468, 1469, 0, 0, 0, 0, 0, 0, 0,
	0, 1388, 1389, 1391, 0, 0, 0, 1390, 2093, 2094,
	0, 0, 1783, 0, 0, 195, 196, 0, 1567, 0,
	0, 202, 549, 0, 699, 0, 0, 0, 221, 0,
	1495, 1496, 221, 0, 221, 221, 0, 0, 865, 0,
	0, 221, 0, 457, 0, 0, 221, 0, 221, 0,
	201, 221, 0, 221, 0, 0, 0, 0, 0, 213,
	221, 217, 0, 0, 1519, 62, 1411, 1412, 749, 748,
	758, 759, 751, 752, 753, 754, 755, 756, 757, 750,
	0, 0, 761, 780, 0, 1396, 1385, 1384, 0, 0,
	2151, 0, 865, 0, 0, 0, 220, 1386, 217, 1036,
	0, 0, 221, 0, 0, 0, 0, 458, 1036, 0,
	1387, 2169, 2170, 2171, 0, 0, 0, 0, 698, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 760, 0, 0,
	0, 216, 0, 0, 1397, 0, 0, 221, 195, 196,
	197, 221, 221, 0, 0, 780, 0, 1396, 1385, 1384,
	337, 0, 0, 699, 699, 0, 0, 0, 0, 1386,
	345, 346, 0, 198, 350, 0, 194, 199, 200, 0,
	0, 62, 1387, 0, 0, 0, 0, 197, 0, 2151,
	0, 0, 2226, 0, 62, 1765, 0, 0, 0, 0,
	0, 221, 62, 0, 0, 0, 0, 693, 0, 0,
	198, 0, 0, 194, 199, 200, 0, 0, 0, 0,
	1380, 0, 0, 2151, 0, 865, 699, 699, 699, 0,
	1392, 0, 0, 0, 0, 0, 0, 2008, 0, 699,
	699, 0, 0, 1398, 1399, 0, 0, 0, 695, 0,
	436, 0, 0, 1394, 440, 1899, 444, 445, 0, 0,
	0, 860, 0, 452, 0, 0, 1552, 202, 0, 0,
	464, 0, 0, 466, 0, 466, 0, 0, 1703, 699,
	0, 0, 484, 0, 1388, 1389, 1391, 220, 0, 217,
	1390, 0, 1380, 0, 0, 1726, 201, 0, 0, 0,
	0, 1567, 1392, 0, 202, 1731, 0, 0, 1182, 45,
	1732, 0, 1194, 1733, 1734, 1398, 1399, 1736, 1737, 1739,
	1741, 1743, 1184, 0, 526, 1394, 0, 0, 1630, 1631,
	1632, 0, 0, 201, 0, 0, 0, 698, 0, 0,
	0, 1639, 1640, 0, 0, 0, 220, 0, 217, 0,
	693, 221, 0, 0, 0, 0, 1388, 1389, 1391, 221,
	0, 1298, 1390, 0, 62, 0, 0, 0, 221, 635,
	0, 0, 0, 639, 640, 697, 0, 0, 197, 0,
	0, 1678, 0, 0, 62, 219, 219, 0, 0, 0,
	0, 857, 0, 0, 195, 196, 0, 0, 0, 62,
	0, 198, 1183, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 220, 0, 217, 0, 0, 1980, 0, 0,
	0, 0, 0, 0, 0, 0, 693, 1397, 0, 0,
	0, 195, 196, 0, 0, 0, 0, 197, 0, 0,
	0, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193,
	0, 699, 0, 0, 699, 699, 0, 0, 0, 0,
	198, 0, 0, 194, 199, 200, 0, 695, 1840, 1841,
	0, 0, 1844, 1845, 1846, 0, 860, 780, 2187, 1396,
	1385, 1384, 0, 0, 0, 0, 714, 698, 0, 0,
	0, 1386, 0, 0, 0, 202, 457, 62, 0, 1397,
	0, 0, 0, 197, 1387, 742, 0, 0, 1869, 0,
	0, 0, 32, 0, 219, 698, 0, 696, 859, 0,
	0, 0, 0, 0, 201, 1879, 198, 0, 0, 194,
	199, 200, 779, 0, 0, 0, 0, 698, 0, 0,
	1036, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2007, 0, 0, 1824, 202, 0, 1827, 1828, 0, 0,
	798, 0, 0, 0, 0, 693, 0, 221, 698, 26,
	27, 0, 20, 861, 0, 0, 693, 0, 0, 221,
	0, 872, 0, 201, 0, 21, 0, 219, 219, 30,
	884, 221, 1949, 0, 697, 0, 219, 1926, 0, 347,
	0, 0, 0, 0, 693, 0, 857, 22, 23, 0,
	24, 0, 0, 0, 1380, 0, 1180, 695, 0, 0,
	202, 0, 195, 196, 1392, 0, 693, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1398, 1399, 0,
	62, 0, 0, 0, 699, 695, 0, 1394, 0, 201,
	1986, 0, 1987, 1988, 1989, 1990, 1991, 693, 0, 0,
	858, 0, 0, 0, 0, 235, 0, 695, 0, 0,
	0, 0, 920, 0, 0, 1981, 0, 0, 1388, 1389,
	1391, 195, 196, 0, 1390, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 952, 1567, 0, 0, 695, 2032,
	779, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 219, 986, 18, 215,
	219, 219, 219, 219, 219, 0, 0, 0, 0, 0,
	0, 0, 2031, 859, 219, 0, 696, 0, 1926, 0,
	0, 0, 2063, 0, 697, 0, 1962, 195, 196, 0,
	0, 0, 0, 860, 0, 0, 779, 0, 0, 1034,
	0, 0, 0, 0, 0, 0, 0, 0, 1056, 1087,
	0, 2080, 697, 0, 0, 698, 698, 0, 0, 0,
	219, 780, 0, 1396, 1385, 1384, 0, 0, 0, 1127,
	0, 0, 0, 0, 697, 1386, 0, 219, 0, 0,
	0, 1133, 0, 0, 25, 0, 0, 0, 1387, 0,
	0, 0, 221, 1144, 0, 0, 28, 29, 0, 31,
	0, 1397, 0, 1182, 0, 697, 219, 1194, 0, 0,
	0, 0, 0, 0, 0, 698, 0, 1184, 0, 0,
	0, 0, 693, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 2135, 0, 0, 0,
	62, 0, 0, 0, 693, 693, 780, 0, 1396, 1385,
	1384, 0, 2001, 0, 780, 858, 1396, 1385, 1384, 0,
	1386, 0, 0, 857, 0, 0, 696, 0, 1386, 0,
	0, 0, 0, 1387, 2172, 0, 780, 0, 1396, 1385,
	1384, 1387, 0, 215, 0, 695, 695, 0, 0, 0,
	1386, 0, 215, 0, 696, 2184, 0, 1183, 1380, 1212,
	1216, 0, 0, 1387, 693, 1223, 1224, 0, 1392, 0,
	2191, 2192, 2193, 0, 0, 0, 696, 0, 2196, 0,
	0, 1398, 1399, 0, 0, 0, 0, 0, 0, 0,
	0, 1394, 0, 0, 0, 0, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 695, 0, 696, 1266, 948,
	947, 0, 0, 0, 860, 698, 0, 0, 0, 0,
	0, 0, 1388, 1389, 1391, 1926, 0, 949, 1390, 2233,
	2234, 2235, 0, 0, 0, 0, 0, 0, 1270, 1567,
	0, 0, 0, 1380, 0, 717, 0, 457, 0, 0,
	859, 1380, 0, 1392, 0, 0, 0, 0, 0, 0,
	2246, 1392, 0, 0, 44, 0, 1398, 1399, 0, 0,
	0, 0, 697, 697, 1398, 1399, 1394, 698, 698, 698,
	0, 0, 0, 1392, 1394, 0, 0, 0, 0, 0,
	698, 698, 215, 0, 0, 0, 1398, 1399, 0, 0,
	0, 0, 0, 693, 693, 0, 1394, 1388, 1389, 1391,
	0, 0, 0, 1390, 1332, 1388, 1389, 1391, 0, 0,
	0, 1390, 0, 814, 0, 822, 0, 0, 0, 0,
	698, 0, 697, 0, 0, 0, 0, 1388, 1389, 1391,
	0, 0, 0, 1390, 857, 695, 950, 0, 0, 0,
	0, 0, 0, 0, 1773, 0, 62, 62, 62, 62,
	62, 62, 0, 0, 816, 1397, 693, 693, 693, 0,
	0, 1442, 0, 0, 1416, 1216, 0, 0, 0, 693,
	693, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 695, 695, 695,
	0, 0, 0, 0, 696, 696, 1565, 0, 62, 693,
	695, 695, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 0, 0, 0, 0, 0, 0, 0, 0,
	1397, 62, 826, 817, 0, 0, 779, 0, 1397, 0,
	695, 253, 815, 0, 0, 0, 0, 821, 820, 0,
	0, 859, 697, 0, 696, 1499, 0, 824, 825, 0,
	1397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1511, 1514, 0, 823, 0, 0, 0, 0, 0, 0,
	0, 2053, 698, 0, 0, 698, 698, 0, 0, 1889,
	0, 0, 0, 0, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 1535, 0, 221, 221, 0, 0, 0,
	62, 0, 0, 0, 697, 697, 697, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 697, 697, 1546,
	780, 0, 1396, 1385, 1384, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1386, 0, 254, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 1387, 0, 780,
	1564, 1396, 1385, 1384, 0, 0, 0, 697, 0, 0,
	0, 693, 0, 1386, 693, 693, 0, 0, 1570, 0,
	0, 0, 0, 0, 0, 0, 1387, 0, 0, 0,
	1609, 0, 798, 858, 696, 0, 0, 0, 0, 0,
	0, 0, 0, 948, 947, 0, 0, 0, 0, 0,
	0, 1768, 695, 0, 0, 695, 695, 0, 0, 532,
	0, 949, 0, 0, 0, 0, 0, 0, 1643, 0,
	0, 0, 0, 0, 221, 0, 0, 0, 0, 0,
	0, 2085, 2086, 0, 0, 0, 780, 0, 1396, 1385,
	1384, 0, 0, 0, 0, 0, 696, 696, 696, 0,
	1386, 0, 0, 62, 0, 0, 0, 1380, 1216, 696,
	696, 1216, 1216, 1387, 0, 698, 0, 1392, 0, 0,
	779, 0, 779, 0, 779, 0, 0, 0, 0, 0,
	1398, 1399, 0, 0, 0, 0, 1380, 0, 0, 0,
	1394, 0, 0, 0, 0, 0, 1392, 221, 221, 696,
	0, 0, 0, 0, 0, 0, 221, 221, 0, 1398,
	1399, 0, 0, 0, 62, 0, 0, 466, 2221, 1394,
	0, 1388, 1389, 1391, 0, 0, 0, 1390, 0, 697,
	950, 0, 697, 697, 0, 1748, 0, 0, 1773, 0,
	0, 0, 1753, 0, 0, 0, 0, 0, 0, 1759,
	1388, 1389, 1391, 0, 693, 0, 1390, 765, 766, 767,
	768, 769, 770, 771, 0, 0, 0, 0, 0, 0,
	774, 0, 0, 1380, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1392, 0, 221, 780, 0, 1396, 1385,
	1384, 0, 0, 0, 0, 695, 1398, 1399, 779, 779,
	1386, 0, 0, 0, 0, 0, 1394, 0, 0, 0,
	0, 0, 0, 1387, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 1216, 1216, 0, 221, 0, 0, 0,
	221, 221, 221, 221, 221, 0, 0, 1388, 1389, 1391,
	0, 0, 221, 1390, 221, 0, 1848, 0, 221, 0,
	0, 0, 0, 0, 44, 62, 0, 0, 0, 948,
	947, 0, 0, 62, 1397, 0, 0, 0, 0, 0,
	62, 696, 0, 0, 696, 696, 0, 949, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	221, 0, 0, 1397, 0, 0, 62, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 0, 1864,
	1865, 1514, 0, 814, 0, 822, 0, 0, 0, 1900,
	1901, 0, 697, 1380, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1392, 0, 0, 221, 0, 774, 0,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 0,
	0, 0, 0, 0, 816, 0, 1394, 0, 0, 0,
	0, 0, 0, 0, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 0, 0, 0, 0,
	1397, 0, 0, 0, 0, 0, 0, 1388, 1389, 1391,
	0, 0, 0, 1390, 774, 0, 950, 62, 0, 0,
	0, 1050, 0, 0, 1773, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2158, 0, 0, 0,
	0, 0, 295, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 0, 305, 306, 0, 307, 308, 309, 311,
	310, 0, 1007, 817, 2011, 0, 0, 0, 0, 0,
	62, 253, 815, 0, 0, 0, 0, 821, 820, 0,
	0, 0, 0, 0, 696, 0, 0, 824, 825, 0,
	0, 0, 0, 0, 0, 0, 1998, 0, 780, 0,
	1396, 1385, 1384, 823, 0, 0, 0, 0, 0, 0,
	0, 0, 1386, 0, 0, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 45, 1387, 0, 0, 0, 0,
	0, 0, 2066, 0, 0, 0, 0, 2158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2048, 0, 0,
	1397, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
	1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598,
	1599, 1600, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 720, 0, 0, 0, 0, 1230,
	0, 0, 1243, 2079, 1245, 1246, 1247, 1248, 1249, 1250,
	0, 719, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 0, 2087, 583, 2088, 584, 0, 0, 0, 0,
	0, 0, 0, 573, 574, 0, 0, 0, 0, 0,
	0, 0, 0, 509, 0, 1380, 213, 558, 555, 556,
	560, 561, 562, 563, 0, 1392, 0, 559, 564, 565,
	566, 721, 0, 0, 0, 0, 716, 546, 1398, 1399,
	582, 0, 0, 0, 0, 0, 0, 0, 1394, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 0, 0, 0, 0,
	599, 0, 545, 0, 765, 1058, 542, 547, 0, 1388,
	1389, 1391, 0, 0, 0, 1390, 0, 0, 2164, 0,
	0, 2165, 0, 0, 2167, 0, 1366, 0, 597, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	0, 2177, 0, 0, 0, 0, 1060, 0, 0, 0,
	0, 0, 0, 0, 780, 2079, 1396, 1385, 1384, 0,
	198, 0, 0, 194, 199, 200, 0, 0, 1386, 779,
	0, 0, 0, 553, 0, 0, 0, 0, 0, 0,
	0, 1387, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 276, 0, 0, 0, 0,
	2218, 779, 0, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 1069, 1075, 1073, 0, 0, 1070,
	0, 0, 1068, 44, 0, 1077, 0, 0, 1076, 1062,
	1072, 1074, 1071, 1066, 0, 1061, 2124, 1079, 1078, 1080,
	1059, 1082, 0, 0, 0, 1086, 1083, 1085, 1084, 585,
	1081, 0, 1397, 0, 202, 0, 0, 0, 0, 1063,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 570, 586, 587, 0, 0, 1481, 1483, 1485,
	1065, 1067, 261, 201, 285, 0, 1488, 1489, 1490, 0,
	1493, 1380, 0, 0, 0, 0, 45, 0, 0, 0,
	0, 1392, 0, 0, 568, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1398, 1399, 0, 0, 0, 0,
	0, 0, 0, 277, 1394, 0, 588, 598, 594, 595,
	592, 593, 591, 590, 589, 600, 575, 576, 577, 578,
	579, 581, 0, 1050, 572, 571, 580, 0, 0, 780,
	0, 1396, 1385, 1384, 0, 1388, 1389, 1391, 0, 0,
	0, 1390, 0, 1386, 0, 0, 0, 0, 0, 1539,
	1540, 1541, 1542, 0, 0, 0, 1387, 0, 0, 0,
	0, 195, 196, 596, 0, 0, 0, 0, 0, 0,
	0, 295, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 0, 305, 306, 0, 307, 308, 309, 311, 310,
	278, 279, 280, 284, 282, 281, 283, 255, 257, 0,
	253, 256, 262, 258, 259, 260, 274, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 275, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 1644, 0, 0,
	0, 0, 0, 0, 0, 0, 2004, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1392, 0, 1397, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1398,
	1399, 0, 0, 0, 0, 0, 0, 0, 0, 1394,
	0, 0, 0, 0, 0, 254, 0, 0, 1693, 0,
	1694, 0, 1695, 0, 0, 0, 0, 0, 1698, 0,
	1700, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1388, 1389, 1391, 0, 0, 0, 1390, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1773, 0, 0,
	0, 179, 168, 0, 127, 181, 95, 115, 190, 117,
	118, 153, 74, 136, 0, 112, 93, 0, 0, 0,
	98, 67, 107, 68, 96, 129, 0, 94, 0, 1623,
	139, 0, 57, 0, 188, 0, 144, 0, 0, 0,
	0, 0, 131, 172, 134, 163, 126, 154, 83, 143,
	183, 113, 149, 184, 0, 1408, 0, 44, 0, 1406,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	178, 109, 80, 193, 0, 152, 66, 146, 0, 0,
	72, 75, 189, 176, 103, 102, 1405, 0, 0, 0,
	0, 0, 0, 130, 135, 159, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 1404, 0, 0, 0, 99,
	0, 142, 0, 0, 0, 79, 1621, 0, 1624, 0,
	0, 0, 82, 1397, 100, 160, 0, 63, 0, 0,
	0, 0, 166, 173, 125, 0, 0, 177, 122, 121,
	0, 0, 0, 0, 0, 0, 114, 60, 197, 191,
	0, 0, 180, 132, 171, 97, 108, 277, 104, 0,
	0, 0, 105, 106, 141, 155, 0, 0, 0, 0,
	0, 198, 162, 1847, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 64, 101,
	164, 167, 87, 151, 76, 110, 157, 111, 133, 92,
	0, 1873, 0, 0, 1874, 0, 1875, 0, 1876, 0,
	1877, 1878, 0, 0, 0, 295, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 0, 305, 306, 0, 307,
	308, 309, 311, 310, 278, 279, 280, 284, 282, 281,
	283, 255, 257, 0, 253, 256, 262, 258, 259, 260,
	274, 263, 264, 265, 266, 1622, 268, 269, 270, 271,
	272, 273, 275, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 201, 70, 91, 174, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 45, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 90, 84,
	85, 137, 138, 185, 186, 187, 161, 81, 0, 0,
	88, 89, 0, 169, 0, 0, 0, 140, 0, 254,
	0, 192, 0, 0, 0, 0, 0, 0, 0, 116,
	65, 120, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 0, 124, 119, 145, 147, 156, 165, 175,
	182, 158, 195, 196, 179, 168, 0, 127, 181, 95,
	115, 190, 117, 118, 153, 74, 136, 0, 112, 93,
	0, 0, 0, 98, 67, 107, 68, 96, 129, 0,
	94, 0, 170, 139, 0, 57, 0, 188, 0, 144,
	0, 0, 0, 0, 0, 131, 172, 134, 163, 126,
	154, 83, 143, 183, 113, 149, 184, 0, 0, 0,
	44, 0, 56, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 178, 109, 80, 193, 0, 152, 66,
	146, 0, 0, 72, 75, 189, 176, 103, 102, 0,
	0, 0, 0, 0, 0, 0, 130, 135, 159, 123,
	0, 0, 0, 0, 0, 1532, 0, 0, 0, 0,
	0, 0, 99, 0, 142, 0, 0, 0, 79, 73,
	0, 128, 0, 0, 0, 82, 0, 100, 160, 0,
	63, 0, 0, 0, 0, 166, 173, 374, 0, 0,
	177, 122, 121, 366, 0, 365, 1533, 369, 370, 373,
	60, 197, 191, 0, 0, 367, 375, 171, 97, 108,
	0, 104, 0, 0, 0, 105, 106, 141, 155, 0,
	0, 0, 0, 0, 198, 162, 0, 194, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 64, 101, 164, 167, 87, 151, 76, 110, 157,
	111, 133, 92, 0, 1069, 1075, 1073, 0, 0, 1070,
	0, 0, 1068, 0, 0, 1077, 0, 0, 1076, 1062,
	1072, 1074, 1071, 1066, 0, 1061, 0, 1079, 1078, 1080,
	1059, 1082, 0, 0, 0, 1086, 1083, 1085, 1084, 0,
	1081, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	1064, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 1067, 0, 0, 371, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 201, 70, 91,
	174, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	45, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 90, 84, 85, 137, 138, 185, 186, 187, 161,
	81, 0, 0, 88, 89, 0, 169, 0, 0, 0,
	140, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 116, 65, 120, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 0, 124, 119, 145, 147,
	156, 165, 175, 182, 158, 195, 196, 0, 368, 179,
	168, 0, 127, 181, 95, 115, 190, 117, 118, 153,
	74, 136, 0, 112, 93, 0, 0, 0, 98, 67,
	107, 68, 96, 129, 0, 94, 0, 170, 139, 0,
	57, 0, 188, 0, 144, 0, 0, 0, 0, 0,
	131, 172, 134, 163, 126, 154, 83, 143, 183, 113,
	149, 184, 0, 1408, 0, 44, 0, 1406, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 178, 109,
	80, 193, 0, 152, 66, 146, 0, 0, 72, 75,
	189, 176, 103, 102, 1405, 0, 0, 0, 0, 0,
	0, 130, 135, 159, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 1404, 0, 0, 0, 99, 0, 142,
	0, 0, 0, 79, 73, 0, 128, 400, 0, 0,
	82, 0, 100, 160, 0, 63, 0, 0, 0, 0,
	166, 173, 125, 0, 0, 177, 122, 121, 0, 0,
	0, 0, 0, 0, 114, 60, 197, 191, 0, 0,
	180, 132, 171, 97, 108, 0, 104, 0, 0, 0,
	105, 106, 141, 155, 0, 0, 0, 0, 0, 198,
	162, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 64, 101, 164, 167,
	87, 151, 76, 110, 157, 111, 133, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 201, 70, 91, 174, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 45, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 90, 84, 85, 137,
	138, 185, 186, 187, 161, 81, 0, 0, 88, 89,
	0, 169, 0, 0, 0, 140, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 116, 65, 120,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 124, 119, 145, 147, 156, 165, 175, 182, 158,
	195, 196, 179, 168, 0, 127, 181, 95, 115, 190,
	117, 118, 153, 74, 136, 0, 112, 93, 0, 0,
	0, 98, 67, 107, 68, 96, 129, 0, 94, 0,
	170, 139, 0, 0, 0, 188, 0, 144, 0, 0,
	0, 0, 0, 131, 172, 134, 163, 126, 154, 83,
	143, 183, 113, 149, 184, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 178, 109, 80, 193, 0, 152, 66, 146, 0,
	0, 72, 75, 189, 176, 103, 102, 0, 0, 0,
	0, 0, 0, 0, 130, 135, 159, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 142, 0, 0, 0, 79, 73, 780, 128,
	1396, 1385, 1384, 82, 0, 100, 160, 0, 63, 0,
	0, 0, 1386, 166, 173, 125, 0, 0, 177, 122,
	121, 0, 0, 0, 0, 1387, 0, 114, 60, 197,
	191, 0, 0, 180, 132, 171, 97, 108, 0, 104,
	0, 0, 0, 105, 106, 141, 155, 0, 0, 0,
	0, 0, 198, 162, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 64,
	101, 164, 167, 87, 151, 76, 110, 157, 111, 133,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1792, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1380, 1800, 0, 0, 0,
	0, 0, 0, 0, 0, 1392, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1398, 1399,
	0, 0, 0, 0, 0, 0, 0, 0, 1394, 0,
	69, 0, 0, 0, 0, 201, 70, 91, 174, 0,
	0, 0, 0, 1801, 1799, 1795, 1794, 0, 45, 0,
	0, 150, 0, 0, 0, 0, 1797, 0, 0, 1388,
	1389, 1391, 0, 0, 0, 1390, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 90,
	84, 85, 137, 138, 185, 186, 187, 161, 81, 0,
	0, 88, 89, 0, 169, 0, 0, 0, 140, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	116, 65, 120, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 0, 124, 119, 145, 147, 156, 165,
	175, 182, 158, 195, 196, 179, 168, 0, 127, 181,
	95, 115, 190, 117, 118, 153, 74, 136, 0, 112,
	93, 0, 0, 0, 98, 67, 107, 68, 96, 129,
	0, 94, 0, 170, 139, 0, 57, 0, 188, 0,
	144, 0, 0, 0, 0, 0, 131, 172, 134, 163,
	126, 154, 83, 143, 183, 113, 149, 184, 0, 1408,
	0, 44, 0, 1406, 0, 0, 0, 0, 0, 0,
	0, 0, 1397, 148, 178, 109, 80, 193, 0, 152,
	66, 146, 0, 0, 72, 75, 189, 176, 103, 102,
	1405, 0, 0, 0, 0, 0, 0, 130, 135, 159,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 1404,
	0, 0, 0, 99, 0, 142, 0, 0, 0, 79,
	73, 0, 128, 0, 0, 0, 82, 0, 100, 160,
	0, 63, 0, 0, 0, 0, 166, 173, 125, 0,
	0, 177, 122, 121, 0, 0, 0, 0, 0, 0,
	114, 60, 197, 191, 0, 0, 180, 132, 171, 97,
	108, 0, 104, 0, 0, 0, 105, 106, 141, 155,
	0, 0, 0, 0, 0, 198, 162, 0, 194, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 64, 101, 164, 167, 87, 151, 76, 110,
	157, 111, 133, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 201, 70,
	91, 174, 0, 0, 0, 0, 0, 59, 0, 0,
	0, 45, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 90, 84, 85, 137, 138, 185, 186, 187,
	161, 81, 0, 0, 88, 89, 0, 169, 0, 0,
	0, 140, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 116, 65, 120, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 0, 124, 119, 145,
	147, 156, 165, 175, 182, 158, 195, 196, 179, 168,
	0, 127, 181, 95, 115, 190, 117, 118, 153, 74,
	136, 0, 112, 93, 0, 0, 0, 98, 67, 107,
	68, 96, 129, 0, 94, 0, 170, 139, 0, 0,
	0, 188, 0, 144, 0, 0, 0, 0, 0, 131,
	172, 134, 163, 126, 154, 83, 143, 183, 113, 149,
	184, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 178, 109, 80,
	193, 0, 152, 66, 146, 0, 0, 72, 75, 189,
	176, 103, 102, 0, 0, 0, 0, 0, 0, 0,
	130, 135, 159, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 142, 0,
	0, 0, 79, 73, 0, 128, 0, 0, 0, 82,
	0, 100, 160, 0, 63, 0, 0, 0, 0, 166,
	173, 125, 0, 0, 177, 122, 121, 0, 0, 0,
	0, 0, 0, 114, 60, 197, 191, 0, 0, 180,
	132, 171, 97, 108, 0, 104, 0, 0, 0, 105,
	106, 141, 155, 0, 0, 0, 0, 0, 198, 162,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 64, 101, 164, 167, 87,
	151, 76, 110, 157, 111, 133, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1934,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1800, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 201, 70, 91, 174, 0, 0, 0, 0, 1801,
	1799, 0, 0, 0, 45, 0, 0, 150, 0, 0,
	0, 0, 1797, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 90, 84, 85, 137, 138,
	185, 186, 187, 161, 81, 0, 0, 88, 89, 0,
	169, 0, 0, 0, 140, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 116, 65, 120, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 0,
	124, 119, 145, 147, 156, 165, 175, 182, 158, 195,
	196, 179, 168, 0, 127, 181, 95, 115, 190, 117,
	118, 153, 74, 136, 0, 112, 93, 0, 0, 0,
	98, 67, 107, 68, 96, 129, 0, 94, 0, 170,
	139, 0, 57, 0, 188, 0, 144, 0, 0, 0,
	0, 0, 131, 172, 134, 163, 126, 154, 83, 143,
	183, 113, 149, 184, 0, 0, 0, 44, 0, 56,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	178, 109, 80, 193, 0, 152, 66, 146, 0, 0,
	72, 75, 189, 176, 103, 102, 0, 0, 0, 0,
	0, 0, 0, 130, 135, 159, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 142, 0, 0, 0, 79, 73, 0, 128, 0,
	0, 0, 82, 0, 100, 160, 0, 63, 0, 0,
	0, 0, 166, 173, 125, 0, 0, 177, 122, 121,
	0, 671, 673, 0, 0, 0, 373, 60, 197, 191,
	0, 0, 675, 132, 171, 97, 108, 0, 104, 0,
	0, 0, 105, 106, 141, 155, 0, 0, 0, 0,
	0, 198, 162, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 64, 101,
	164, 167, 87, 151, 76, 110, 157, 111, 133, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 201, 70, 91, 174, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 45, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 90, 84,
	85, 137, 138, 185, 186, 187, 161, 81, 0, 0,
	88, 89, 0, 169, 0, 0, 0, 140, 0, 0,
	0, 192, 0, 0, 0, 0, 0, 0, 0, 116,
	65, 120, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 0, 124, 119, 145, 147, 156, 165, 175,
	182, 158, 195, 196, 179, 168, 0, 127, 181, 95,
	115, 190, 117, 118, 153, 74, 136, 0, 112, 93,
	0, 0, 0, 98, 67, 107, 68, 96, 129, 0,
	94, 0, 170, 139, 0, 0, 0, 188, 0, 144,
	0, 0, 0, 0, 0, 131, 172, 134, 163, 126,
	154, 83, 143, 183, 113, 149, 184, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 178, 109, 80, 193, 0, 152, 66,
	146, 0, 0, 72, 75, 189, 176, 103, 102, 0,
	0, 0, 0, 0, 0, 0, 130, 135, 159, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 142, 0, 0, 0, 79, 73,
	0, 128, 0, 0, 0, 82, 0, 100, 160, 0,
	63, 0, 0, 0, 0, 166, 173, 125, 0, 0,
	177, 122, 121, 0, 0, 0, 0, 0, 0, 114,
	60, 197, 191, 0, 0, 180, 132, 171, 97, 108,
	0, 104, 0, 0, 0, 105, 106, 141, 155, 0,
	0, 0, 0, 0, 198, 162, 0, 194, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 64, 101, 164, 167, 87, 151, 76, 110, 157,
	111, 133, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1800, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 201, 70, 91,
	174, 0, 0, 0, 0, 1801, 1799, 0, 0, 0,
	45, 0, 0, 150, 0, 0, 0, 0, 1797, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 90, 84, 85, 137, 138, 185, 186, 187, 161,
	81, 0, 0, 88, 89, 0, 169, 0, 0, 0,
	140, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 116, 65, 120, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 0, 124, 119, 145, 147,
	156, 165, 175, 182, 158, 195, 196, 179, 168, 0,
	127, 181, 95, 115, 190, 117, 118, 153, 74, 136,
	0, 112, 93, 0, 0, 0, 98, 67, 107, 68,
	96, 129, 0, 94, 0, 170, 139, 0, 0, 0,
	188, 0, 144, 0, 0, 0, 0, 0, 131, 172,
	134, 163, 126, 154, 83, 143, 183, 113, 149, 184,
	0, 0, 0, 213, 0, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 178, 109, 80, 193,
	0, 152, 66, 146, 0, 0, 72, 75, 189, 176,
	103, 102, 0, 0, 0, 0, 0, 0, 0, 130,
	135, 159, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1524, 0, 99, 0, 142, 0, 0,
	0, 79, 73, 0, 128, 0, 0, 0, 82, 0,
	100, 160, 0, 63, 0, 0, 0, 0, 166, 173,
	125, 0, 0, 177, 122, 121, 0, 0, 0, 0,
	0, 0, 114, 60, 197, 191, 0, 0, 180, 132,
	171, 97, 108, 0, 104, 0, 0, 0, 105, 106,
	141, 155, 0, 0, 0, 0, 0, 198, 162, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 64, 101, 164, 167, 87, 151,
	76, 110, 157, 111, 133, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	201, 70, 91, 174, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 45, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 90, 84, 85, 137, 138, 185,
	186, 187, 161, 81, 0, 0, 88, 89, 0, 169,
	0, 0, 0, 140, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 116, 65, 120, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 0, 124,
	119, 145, 147, 156, 165, 175, 182, 158, 195, 196,
	179, 168, 0, 127, 181, 95, 115, 190, 117, 118,
	153, 74, 136, 0, 112, 93, 0, 0, 0, 98,
	67, 107, 68, 96, 129, 0, 94, 0, 170, 139,
	0, 0, 0, 188, 0, 144, 0, 0, 0, 0,
	0, 131, 172, 134, 163, 126, 154, 83, 143, 183,
	113, 149, 184, 0, 0, 0, 44, 0, 910, 0,
	911, 0, 0, 0, 0, 0, 0, 0, 148, 178,
	109, 80, 193, 0, 152, 66, 146, 0, 0, 72,
	75, 189, 176, 103, 102, 0, 0, 0, 0, 0,
	0, 0, 130, 135, 159, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	142, 0, 0, 0, 79, 73, 0, 128, 0, 0,
	0, 82, 0, 100, 160, 0, 63, 0, 0, 0,
	0, 166, 173, 125, 0, 0, 177, 122, 121, 0,
	0, 0, 0, 0, 0, 114, 60, 197, 191, 0,
	0, 180, 132, 171, 97, 108, 0, 104, 0, 0,
	0, 105, 106, 141, 155, 0, 0, 0, 0, 0,
	198, 162, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 64, 101, 164,
	167, 87, 151, 76, 110, 157, 111, 133, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 201, 70, 91, 174, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 45, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 90, 84, 85,
	137, 138, 185, 186, 187, 161, 81, 0, 0, 88,
	89, 0, 169, 0, 0, 0, 140, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 116, 65,
	120, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 0, 124, 119, 145, 147, 156, 165, 175, 182,
	158, 195, 196, 179, 168, 0, 127, 181, 95, 115,
	190, 117, 118, 153, 74, 136, 0, 112, 93, 0,
	0, 0, 98, 67, 107, 68, 96, 129, 0, 94,
	0, 170, 139, 0, 57, 0, 188, 0, 144, 0,
	0, 0, 0, 0, 131, 172, 134, 163, 126, 154,
	83, 143, 183, 113, 149, 184, 0, 0, 0, 44,
	0, 56, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 178, 109, 80, 193, 0, 152, 66, 146,
	0, 0, 72, 75, 189, 176, 103, 102, 0, 0,
	0, 0, 0, 0, 0, 130, 135, 159, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 142, 0, 0, 0, 79, 73, 0,
	128, 0, 0, 0, 82, 0, 100, 160, 0, 63,
	0, 0, 0, 0, 166, 173, 125, 0, 0, 177,
	122, 121, 0, 0, 0, 0, 0, 0, 114, 60,
	197, 191, 0, 0, 180, 132, 171, 97, 108, 0,
	104, 0, 0, 0, 105, 106, 141, 155, 0, 0,
	0, 0, 0, 198, 162, 0, 194, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	64, 101, 164, 167, 87, 151, 76, 110, 157, 111,
	133, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 201, 70, 91, 174,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 45,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	90, 84, 85, 137, 138, 185, 186, 187, 161, 81,
	0, 0, 88, 89, 0, 169, 0, 0, 0, 140,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 116, 65, 120, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 0, 124, 119, 145, 147, 156,
	165, 175, 182, 158, 195, 196, 179, 168, 0, 127,
	181, 95, 115, 190, 117, 118, 153, 74, 136, 0,
	112, 93, 0, 0, 0, 98, 67, 107, 68, 96,
	129, 0, 94, 0, 170, 139, 0, 0, 0, 188,
	0, 144, 0, 0, 0, 0, 0, 131, 172, 134,
	163, 126, 154, 83, 143, 183, 113, 149, 184, 0,
	490, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 492, 0, 148, 178, 109, 80, 193, 0,
	152, 66, 146, 0, 0, 72, 75, 189, 176, 103,
	102, 0, 0, 0, 0, 0, 0, 0, 130, 135,
	159, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 142, 0, 0, 0,
	79, 73, 0, 128, 0, 0, 0, 82, 0, 100,
	160, 0, 63, 0, 0, 0, 0, 166, 173, 125,
	0, 0, 177, 122, 121, 0, 0, 0, 0, 0,
	0, 114, 60, 197, 191, 0, 0, 180, 132, 171,
	97, 108, 0, 104, 0, 0, 0, 105, 106, 141,
	155, 0, 0, 0, 0, 0, 198, 162, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 64, 101, 164, 167, 87, 151, 76,
	110, 157, 111, 133, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 201,
	70, 91, 174, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 45, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 90, 84, 85, 137, 138, 185, 186,
	187, 161, 81, 0, 0, 88, 89, 0, 169, 0,
	0, 0, 140, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 116, 65, 120, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 0, 124, 119,
	145, 147, 156, 165, 175, 182, 158, 195, 196, 179,
	168, 0, 127, 181, 95, 115, 190, 117, 118, 153,
	74, 136, 0, 112, 93, 0, 0, 0, 98, 67,
	107, 68, 96, 129, 0, 94, 0, 170, 139, 0,
	0, 0, 188, 0, 144, 0, 0, 0, 0, 0,
	131, 172, 134, 163, 126, 154, 83, 143, 183, 113,
	149, 184, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 178, 109,
	80, 193, 0, 152, 66, 146, 0, 0, 72, 75,
	189, 176, 103, 102, 0, 0, 0, 0, 0, 0,
	0, 130, 135, 159, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1872, 0, 99, 0, 142,
	0, 0, 0, 79, 73, 0, 128, 0, 0, 0,
	82, 0, 100, 160, 0, 63, 0, 0, 0, 0,
	166, 173, 125, 0, 0, 177, 122, 121, 0, 0,
	0, 0, 0, 0, 114, 60, 197, 191, 0, 0,
	180, 132, 171, 97, 108, 0, 104, 0, 0, 0,
	105, 106, 141, 155, 0, 0, 0, 0, 0, 198,
	162, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 64, 101, 164, 167,
	87, 151, 76, 110, 157, 111, 133, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 201, 70, 91, 174, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 45, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 90, 84, 85, 137,
	138, 185, 186, 187, 161, 81, 0, 0, 88, 89,
	0, 169, 0, 0, 0, 140, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 116, 65, 120,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 124, 119, 145, 147, 156, 165, 175, 182, 158,
	195, 196, 179, 168, 0, 127, 181, 95, 115, 190,
	117, 118, 153, 74, 136, 0, 112, 93, 0, 0,
	0, 98, 67, 107, 68, 96, 129, 0, 94, 0,
	170, 139, 0, 0, 0, 188, 0, 144, 0, 0,
	0, 0, 0, 131, 172, 134, 163, 126, 154, 83,
	143, 183, 113, 149, 184, 0, 0, 0, 213, 0,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 178, 109, 80, 193, 0, 152, 66, 146, 0,
	0, 72, 75, 189, 176, 103, 102, 0, 0, 0,
	0, 0, 0, 0, 130, 135, 159, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 142, 0, 0, 0, 79, 73, 0, 128,
	0, 0, 0, 82, 0, 100, 160, 0, 63, 0,
	0, 0, 0, 166, 173, 125, 0, 0, 177, 122,
	121, 0, 0, 0, 0, 0, 0, 114, 60, 197,
	191, 0, 0, 180, 132, 171, 97, 108, 0, 104,
	0, 0, 0, 105, 106, 141, 155, 0, 0, 0,
	0, 0, 198, 162, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 64,
	101, 164, 167, 87, 151, 76, 110, 157, 111, 133,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 201, 70, 91, 174, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 45, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 90,
	84, 85, 137, 138, 185, 186, 187, 161, 81, 0,
	0, 88, 89, 0, 169, 0, 0, 0, 140, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	116, 65, 120, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 0, 124, 119, 145, 147, 156, 165,
	175, 182, 158, 195, 196, 179, 168, 0, 127, 181,
	95, 115, 190, 117, 118, 153, 74, 136, 0, 112,
	93, 0, 0, 0, 98, 67, 107, 68, 96, 129,
	0, 94, 0, 170, 139, 0, 0, 0, 188, 0,
	144, 0, 0, 0, 0, 0, 131, 172, 134, 163,
	126, 154, 83, 143, 183, 113, 149, 184, 0, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 178, 109, 80, 193, 0, 152,
	66, 146, 0, 0, 72, 75, 189, 176, 103, 102,
	686, 0, 0, 0, 0, 0, 0, 130, 135, 159,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 142, 0, 0, 0, 79,
	73, 0, 128, 0, 0, 0, 82, 0, 100, 160,
	0, 63, 0, 0, 0, 0, 166, 173, 125, 0,
	0, 177, 122, 121, 0, 0, 0, 0, 0, 0,
	114, 60, 197, 191, 0, 0, 180, 132, 171, 97,
	108, 0, 104, 0, 0, 0, 105, 106, 141, 155,
	0, 0, 0, 0, 0, 198, 162, 0, 194, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 64, 101, 164, 167, 87, 151, 76, 110,
	157, 111, 133, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 201, 70,
	91, 174, 0, 0, 0, 0, 0, 59, 0, 0,
	0, 45, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 90, 84, 85, 137, 138, 185, 186, 187,
	161, 81, 0, 0, 88, 89, 0, 169, 0, 0,
	0, 140, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 116, 65, 120, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 0, 124, 119, 145,
	147, 156, 165, 175, 182, 158, 195, 196, 179, 168,
	0, 127, 181, 95, 115, 190, 117, 118, 153, 74,
	136, 0, 112, 93, 0, 0, 0, 98, 67, 107,
	68, 96, 129, 0, 94, 0, 170, 139, 0, 0,
	0, 188, 0, 144, 0, 0, 0, 0, 0, 131,
	172, 134, 163, 126, 154, 83, 143, 183, 113, 149,
	184, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 178, 109, 80,
	193, 0, 152, 66, 146, 0, 0, 72, 75, 189,
	176, 103, 102, 0, 0, 0, 0, 0, 0, 0,
	130, 135, 159, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 142, 0,
	0, 0, 79, 73, 0, 128, 0, 0, 0, 82,
	0, 100, 160, 0, 63, 0, 0, 0, 0, 166,
	173, 125, 0, 0, 177, 122, 121, 0, 0, 0,
	0, 0, 0, 114, 60, 197, 191, 0, 0, 180,
	132, 171, 97, 108, 0, 104, 0, 0, 0, 105,
	106, 141, 155, 0, 0, 0, 0, 0, 198, 162,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 64, 101, 164, 167, 87,
	151, 76, 110, 157, 111, 133, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 201, 70, 91, 174, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 45, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 90, 84, 85, 137, 138,
	185, 186, 187, 161, 81, 0, 0, 88, 89, 0,
	169, 0, 0, 0, 140, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 116, 65, 120, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 0,
	124, 119, 145, 147, 156, 165, 175, 182, 158, 195,
	196, 179, 2155, 0, 127, 181, 95, 115, 190, 117,
	118, 153, 74, 136, 0, 112, 93, 0, 0, 0,
	98, 67, 107, 68, 96, 129, 0, 94, 0, 170,
	139, 0, 0, 0, 188, 0, 144, 0, 0, 0,
	0, 0, 131, 172, 134, 163, 126, 154, 83, 143,
	183, 113, 149, 184, 509, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	178, 109, 80, 193, 0, 152, 66, 146, 0, 0,
	72, 75, 189, 176, 103, 102, 0, 0, 0, 0,
	0, 0, 0, 130, 135, 159, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 142, 0, 0, 0, 79, 73, 0, 128, 0,
	0, 0, 82, 0, 100, 160, 0, 63, 0, 0,
	0, 0, 166, 173, 125, 0, 0, 177, 122, 121,
	0, 0, 0, 0, 0, 0, 114, 0, 197, 191,
	0, 0, 180, 132, 171, 97, 108, 0, 104, 0,
	0, 0, 105, 106, 141, 155, 0, 0, 0, 0,
	0, 198, 162, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 64, 101,
	164, 167, 87, 151, 76, 110, 157, 111, 133, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 201, 70, 91, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 90, 84,
	85, 137, 138, 185, 186, 187, 161, 81, 0, 0,
	88, 89, 0, 169, 0, 0, 0, 140, 0, 0,
	0, 192, 0, 0, 0, 0, 0, 0, 0, 116,
	65, 120, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 0, 124, 119, 145, 147, 156, 165, 175,
	182, 158, 195, 196, 179, 168, 0, 127, 181, 95,
	115, 190, 117, 118, 153, 74, 136, 0, 112, 93,
	0, 0, 0, 98, 67, 107, 68, 96, 129, 0,
	94, 0, 170, 139, 0, 0, 0, 188, 0, 144,
	0, 0, 0, 0, 0, 131, 172, 134, 163, 126,
	154, 83, 143, 183, 113, 149, 184, 0, 0, 0,
	213, 0, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 178, 109, 80, 193, 0, 152, 66,
	146, 0, 0, 72, 75, 189, 176, 103, 102, 0,
	0, 0, 0, 0, 0, 0, 130, 135, 159, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 142, 0, 0, 0, 79, 73,
	0, 128, 0, 0, 0, 82, 0, 100, 160, 0,
	63, 0, 0, 0, 0, 166, 173, 125, 0, 0,
	177, 122, 121, 0, 0, 0, 0, 0, 0, 114,
	0, 197, 191, 0, 0, 180, 132, 171, 97, 108,
	0, 104, 0, 0, 0, 105, 106, 141, 155, 0,
	0, 0, 0, 0, 198, 162, 0, 194, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 64, 101, 164, 167, 87, 151, 76, 110, 157,
	111, 133, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 201, 70, 91,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	45, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 90, 84, 85, 137, 138, 185, 186, 187, 161,
	81, 0, 0, 88, 89, 0, 169, 0, 0, 0,
	140, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 116, 65, 120, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 0, 124, 119, 145, 147,
	156, 165, 175, 182, 158, 195, 196, 179, 168, 0,
	127, 181, 95, 115, 190, 117, 118, 153, 74, 136,
	0, 112, 93, 0, 0, 0, 98, 67, 107, 68,
	96, 129, 0, 94, 0, 170, 139, 0, 0, 0,
	188, 0, 144, 0, 0, 0, 0, 0, 131, 172,
	134, 163, 126, 154, 83, 143, 183, 113, 149, 184,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 178, 109, 80, 193,
	0, 152, 66, 146, 0, 0, 72, 75, 189, 176,
	103, 102, 0, 0, 0, 0, 0, 0, 0, 130,
	135, 159, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 142, 0, 0,
	0, 79, 73, 0, 128, 0, 0, 0, 82, 0,
	100, 160, 0, 63, 0, 0, 0, 0, 166, 173,
	125, 0, 0, 177, 122, 121, 0, 0, 0, 0,
	0, 0, 114, 0, 197, 191, 0, 0, 180, 132,
	171, 97, 108, 0, 104, 0, 0, 0, 105, 106,
	141, 155, 0, 0, 0, 0, 0, 198, 162, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 64, 101, 164, 167, 87, 151,
	76, 110, 157, 111, 133, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	201, 70, 91, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 90, 84, 85, 137, 138, 185,
	186, 187, 161, 81, 0, 0, 88, 89, 0, 169,
	0, 0, 0, 140, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 116, 65, 120, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 0, 124,
	119, 145, 147, 156, 165, 175, 182, 158, 195, 196,
	179, 168, 0, 127, 181, 95, 115, 190, 117, 118,
	153, 74, 136, 0, 112, 93, 0, 0, 0, 98,
	67, 107, 68, 96, 129, 0, 94, 0, 170, 139,
	0, 0, 0, 188, 0, 144, 0, 0, 0, 0,
	0, 131, 172, 134, 163, 126, 154, 83, 143, 183,
	113, 149, 184, 0, 0, 0, 220, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 178,
	109, 80, 193, 0, 152, 66, 146, 0, 0, 72,
	75, 189, 176, 103, 102, 0, 0, 0, 0, 0,
	0, 0, 130, 135, 159, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	142, 0, 0, 0, 79, 73, 0, 128, 0, 0,
	0, 82, 0, 100, 160, 0, 63, 0, 0, 0,
	0, 166, 173, 125, 0, 0, 177, 122, 121, 0,
	0, 0, 0, 0, 0, 114, 0, 197, 191, 0,
	0, 180, 132, 171, 97, 108, 0, 104, 0, 0,
	0, 105, 106, 141, 155, 0, 0, 0, 0, 0,
	198, 162, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 64, 101, 164,
	167, 87, 151, 76, 110, 157, 111, 133, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 201, 70, 91, 174, 0, 0, 780,
	0, 1396, 1385, 1384, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 1386, 0, 0, 0, 0, 0, 0,
	780, 0, 1396, 1385, 1384, 0, 1387, 0, 0, 0,
	0, 0, 0, 0, 1386, 0, 86, 90, 84, 85,
	137, 138, 185, 186, 187, 161, 81, 1387, 0, 88,
	89, 0, 169, 0, 0, 0, 140, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 276, 0, 116, 65,
	120, 0, 0, 0, 0, 0, 720, 0, 77, 78,
	0, 1999, 124, 119, 145, 147, 156, 165, 175, 182,
	158, 195, 196, 719, 44, 0, 0, 0, 718, 0,
	0, 0, 1892, 0, 0, 583, 0, 584, 0, 0,
	0, 0, 0, 0, 0, 573, 574, 0, 0, 0,
	0, 0, 0, 2046, 0, 509, 0, 0, 213, 558,
	555, 556, 560, 561, 562, 563, 1380, 0, 0, 559,
	564, 565, 566, 721, 2047, 0, 1392, 0, 716, 546,
	0, 0, 582, 261, 0, 285, 0, 1380, 0, 1398,
	1399, 0, 0, 0, 0, 0, 0, 1392, 0, 1394,
	0, 0, 0, 0, 0, 0, 543, 544, 0, 0,
	1398, 1399, 599, 0, 545, 0, 0, 541, 542, 547,
	1394, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	1388, 1389, 1391, 0, 0, 0, 1390, 0, 0, 0,
	597, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 1388, 1389, 1391, 0, 0, 0, 1390, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 553, 0, 0, 0, 0,
	0, 0, 295, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 0, 305, 306, 0, 307, 308, 309, 311,
	310, 278, 279, 280, 284, 282, 281, 283, 255, 257,
	0, 253, 256, 262, 258, 259, 260, 274, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 461,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 1397, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 570, 586, 587, 0, 0, 0,
	0, 0, 0, 0, 1397, 201, 780, 0, 1396, 1385,
	1384, 0, 0, 0, 0, 0, 0, 0, 45, 0,
	1386, 0, 0, 0, 0, 0, 568, 0, 0, 0,
	0, 0, 0, 1387, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 588, 598,
	594, 595, 592, 593, 591, 590, 589, 600, 575, 576,
	577, 578, 579, 581, 0, 0, 572, 571, 580, 720,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 948,
	947, 0, 0, 0, 1030, 0, 719, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 0, 949, 583, 0,
	584, 0, 0, 195, 196, 596, 0, 0, 573, 574,
	0, 0, 0, 0, 0, 0, 0, 0, 509, 0,
	0, 213, 558, 555, 556, 560, 561, 562, 563, 0,
	0, 0, 559, 564, 565, 566, 721, 0, 0, 0,
	0, 716, 546, 1380, 0, 582, 0, 0, 0, 0,
	0, 0, 0, 1392, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 543,
	544, 1035, 0, 0, 0, 599, 1394, 545, 0, 0,
	541, 542, 547, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 0, 0, 1388, 1389, 1391,
	0, 0, 197, 1390, 0, 0, 950, 0, 0, 0,
	720, 535, 0, 0, 1810, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 198, 0, 719, 194, 199,
	200, 0, 718, 0, 0, 0, 0, 0, 553, 583,
	0, 584, 0, 0, 0, 0, 0, 0, 0, 573,
	574, 0, 0, 0, 0, 0, 0, 0, 0, 509,
	0, 951, 213, 558, 555, 556, 560, 561, 562, 563,
	0, 0, 0, 559, 564, 565, 566, 721, 0, 0,
	0, 0, 716, 546, 0, 0, 582, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 0, 0, 585, 0, 599, 0, 545, 202,
	0, 541, 542, 547, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 570, 586, 587,
	1397, 0, 0, 0, 597, 0, 0, 0, 201, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 0, 0,
	0, 45, 535, 0, 0, 0, 0, 0, 0, 568,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 553,
	0, 588, 598, 594, 595, 592, 593, 591, 590, 589,
	600, 575, 576, 577, 578, 579, 581, 0, 0, 572,
	571, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 596, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 570, 586,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 201,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 0, 0, 0, 0,
	568, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 588, 598, 594, 595, 592, 593, 591, 590,
	589, 600, 575, 576, 577, 578, 579, 581, 0, 0,
	572, 571, 580, 720, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	719, 0, 0, 0, 0, 718, 0, 0, 0, 0,
	0, 0, 583, 0, 584, 0, 0, 195, 196, 596,
	0, 0, 573, 574, 0, 0, 0, 0, 0, 0,
	0, 0, 509, 0, 0, 213, 558, 555, 556, 560,
	561, 562, 563, 0, 0, 0, 559, 564, 565, 566,
	721, 0, 0, 0, 0, 716, 546, 0, 0, 582,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 543, 544, 1035, 0, 0, 0, 599,
	0, 545, 0, 0, 541, 542, 547, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 780, 0, 0, 720, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 719, 194, 199, 200, 0, 718, 0, 0, 0,
	0, 0, 553, 583, 0, 584, 0, 0, 0, 0,
	0, 0, 0, 573, 574, 0, 0, 0, 0, 0,
	0, 0, 0, 509, 0, 0, 213, 558, 555, 556,
	560, 561, 562, 563, 0, 0, 0, 559, 564, 565,
	566, 721, 0, 0, 0, 0, 716, 546, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 0, 0, 585, 0,
	599, 0, 545, 202, 0, 541, 542, 547, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 570, 586, 587, 0, 0, 0, 0, 597, 0,
	0, 0, 201, 0, 0, 0, 0, 197, 0, 0,
	0, 0, 0, 0, 0, 45, 535, 0, 0, 0,
	0, 0, 0, 568, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 553, 0, 588, 598, 594, 595, 592,
	593, 591, 590, 589, 600, 575, 576, 577, 578, 579,
	581, 0, 0, 572, 571, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	195, 196, 596, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 570, 586, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 0, 0, 0,
	0, 0, 0, 0, 568, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 588, 598, 594, 595,
	592, 593, 591, 590, 589, 600, 575, 576, 577, 578,
	579, 581, 0, 0, 572, 571, 580, 0, 0, 0,
	583, 0, 584, 0, 0, 0, 0, 0, 0, 0,
	573, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	509, 0, 0, 213, 558, 1042, 556, 1043, 1044, 1045,
	1046, 195, 196, 596, 559, 1047, 1048, 1049, 0, 0,
	0, 0, 0, 0, 546, 0, 0, 582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 543, 544, 0, 0, 0, 0, 599, 0, 545,
	0, 0, 541, 542, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 0, 720, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 719,
	194, 199, 200, 0, 718, 0, 0, 0, 0, 0,
	553, 583, 0, 584, 0, 0, 0, 0, 0, 0,
	0, 573, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 509, 0, 0, 213, 558, 555, 556, 560, 561,
	562, 563, 0, 0, 0, 559, 564, 565, 566, 721,
	0, 0, 0, 0, 716, 546, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 0, 0, 585, 0, 599, 0,
	545, 202, 0, 541, 542, 547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 570,
	586, 587, 0, 0, 0, 0, 597, 0, 0, 0,
	201, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	0, 0, 0, 45, 535, 0, 0, 0, 0, 0,
	0, 568, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 553, 0, 588, 598, 594, 595, 592, 593, 591,
	590, 589, 600, 575, 576, 577, 578, 579, 581, 0,
	0, 572, 571, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	596, 0, 0, 0, 0, 1040, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	570, 586, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 45, 0, 0, 0, 0, 0,
	0, 0, 568, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 588, 598, 594, 595, 592, 593,
	591, 590, 589, 600, 575, 576, 577, 578, 579, 581,
	0, 0, 572, 571, 580, 1231, 1232, 1233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 0, 584, 0, 0, 0, 0, 0,
	0, 0, 573, 574, 0, 0, 0, 0, 0, 195,
	196, 596, 509, 0, 0, 213, 558, 555, 556, 560,
	561, 562, 563, 0, 0, 0, 559, 564, 565, 566,
	0, 0, 0, 0, 0, 0, 546, 0, 0, 582,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 543, 544, 0, 0, 0, 0, 599,
	0, 545, 0, 0, 541, 542, 547, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 553, 583, 0, 584, 0, 0, 0, 0,
	0, 0, 0, 573, 574, 0, 0, 0, 0, 0,
	0, 0, 0, 509, 0, 0, 213, 558, 555, 556,
	560, 561, 562, 563, 0, 0, 0, 559, 564, 565,
	566, 0, 0, 0, 0, 0, 0, 546, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 0, 0, 585, 0,
	599, 0, 545, 202, 0, 541, 542, 547, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 570, 586, 587, 0, 0, 0, 0, 597, 0,
	0, 0, 201, 0, 0, 0, 0, 197, 0, 0,
	0, 0, 0, 0, 0, 45, 535, 0, 0, 0,
	0, 0, 0, 568, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 553, 0, 588, 598, 594, 595, 592,
	593, 591, 590, 589, 600, 575, 576, 577, 578, 579,
	581, 0, 0, 572, 571, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	195, 196, 596, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 570, 586, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 0, 0, 0,
	0, 0, 0, 0, 568, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 588, 598, 594, 595,
	592, 593, 591, 590, 589, 600, 575, 576, 577, 578,
	579, 581, 0, 0, 572, 571, 580, 0, 0, 0,
	583, 0, 584, 0, 0, 0, 0, 0, 0, 0,
	573, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	509, 0, 0, 213, 558, 1042, 556, 1043, 1044, 1045,
	1046, 195, 196, 596, 559, 1047, 1048, 1049, 0, 0,
	0, 0, 0, 0, 546, 0, 0, 582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 543, 544, 0, 0, 0, 0, 599, 0, 545,
	0, 0, 541, 542, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	553, 583, 0, 584, 0, 0, 0, 0, 0, 0,
	0, 573, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 1307, 0, 0, 213, 558, 555, 556, 560, 561,
	562, 563, 0, 0, 0, 559, 564, 565, 566, 0,
	0, 0, 0, 0, 0, 546, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 0, 0, 585, 0, 599, 0,
	545, 202, 0, 541, 542, 547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 570,
	586, 587, 0, 0, 0, 0, 597, 0, 0, 0,
	201, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	0, 0, 0, 45, 535, 0, 0, 0, 0, 0,
	0, 568, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 553, 0, 588, 598, 594, 595, 592, 593, 591,
	590, 589, 600, 575, 576, 577, 578, 579, 581, 0,
	0, 572, 571, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	596, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	570, 586, 587, 0, 0, 0, 0, 0, 0, 0,
	583, 201, 584, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 45, 0, 0, 0, 0, 0,
	509, 0, 568, 213, 558, 555, 556, 560, 561, 562,
	563, 0, 0, 0, 559, 564, 565, 566, 0, 0,
	0, 0, 0, 0, 588, 598, 594, 595, 592, 593,
	591, 590, 589, 600, 575, 576, 577, 578, 579, 581,
	0, 0, 572, 571, 580, 0, 0, 0, 0, 0,
	0, 543, 544, 0, 0, 0, 0, 599, 0, 545,
	0, 0, 541, 542, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 596, 583, 0, 584, 597, 0, 0, 0, 0,
	0, 0, 573, 574, 197, 0, 0, 0, 0, 0,
	0, 0, 694, 535, 0, 213, 0, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 582,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 599,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 692, 0, 0, 0, 0, 585, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 0, 194, 199, 200, 0, 0, 0, 601, 570,
	586, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 568, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 588, 598, 594, 595, 592, 593, 591,
	590, 589, 600, 575, 576, 577, 578, 579, 581, 0,
	0, 572, 571, 580, 0, 0, 0, 0, 585, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 587, 0, 0, 0, 0, 195, 196,
	596, 0, 201, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 588, 598, 594, 595, 592,
	593, 591, 590, 589, 600, 575, 576, 577, 578, 579,
	581, 0, 0, 572, 571, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	195, 196, 596,
}

var yyPact = [...]int16{
	1046, -1000, -241, -1000, -1000, -1000, 1788, 3163, 2335, 2335,
	629, 1810, -1000, -1000, -1000, 9188, 749, 748, 723, 317,
	707, 282, 2728, 245, 682, 760, 682, 682, -1000, -170,
	-149, -1000, -20, 1678, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 764, -1000, -1000, -1000, 1669, 3081, 757, 245,
	245, -1000, 606, 1645, -1000, 4852, 4852, 4852, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 354, 282, 282, 682, 221, 682, 1807,
	497, 1803, 282, -1000, -1000, 871, 1066, -1000, 1932, 870,
	-1000, -1000, 11153, 682, 282, 245, -1000, -1000, -1000, -1000,
	754, 2335, -1000, 703, 987, 245, 3015, 801, 780, 245,
	245, 287, 5649, 377, -95, 87, -1000, -1000, -1000, -1000,
	862, 1706, -1000, -1000, -1000, 1706, 143, 1786, 1706, 1786,
	-1000, 1706, 1786, 137, 137, 137, 137, 137, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1785, 1704, -1000, 1706, 1706,
	1706, 1706, 1706, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1783, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1770, 188, 1770, 1743, 1743,
	-1000, -1000, 377, 377, 1782, 245, 282, 1800, 1795, 245,
	-186, 245, 245, 2011, -1000, -1000, -1000, 276, 245, 497,
	10367, 1898, 13063, 12725, -1000, 245, -1000, -1000, 245, -1000,
	245, 876, 568, 646, 654, 775, 897, 245, 702, 1869,
	957, 861, 9581, -1000, 1875, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1778, 1110, 282, 491, 154, 1677, 689,
	746, 597, 1365, 450, -1000, -1000, -1000, 1145, -1000, 282,
	-1000, 2041, -1000, -1000, 480, -1000, 462, 1061, 1273, 245,
	1776, 220, 1773, 15075, 1222, -1000, -265, -1000, 84, -1000,
	282, -1000, 1184, 137, 1706, -1000, 137, 1220, 137, 137,
	-1000, -1000, 879, 1884, 879, 879, 879, 879, 1270, 1270,
	-50, -50, -1000, -1000, -1000, 1219, -1000, 1214, 1770, -1000,
	-1000, -1000, 1213, -1000, 245, 282, 1769, 1794, 245, 245,
	1931, 690, -1000, -1000, 1918, 1917, 1651, -1000, -1000, 272,
	-1000, -1000, 497, 2011, -1000, 855, -1000, -1000, -1000, -1000,
	-1000, 1768, -1000, -1000, 1679, 799, -1000, 1670, 9188, 408,
	282, -1000, 459, -1000, 450, 282, 282, 282, 282, 282,
	598, 7616, 565, 632, 774, 282, 682, 1146, 11939, 10760,
	287, -1000, -1000, -1000, 15914, 454, 2018, 1965, 500, 68,
	-163, 1339, -1000, -1000, 1767, -1000, -1000, -1000, 14583, -1000,
	1313, -1000, 1302, -1000, 1300, 1297, 71, 282, -1000, -155,
	187, 43, -1000, -1000, 1677, -1000, 451, 14583, 1913, -1000,
	1887, 1022, 16, -1000, -1000, 1231, 836, -1000, -1000, -1000,
	-1000, 15075, 15075, 15075, 15075, 15075, 15075, 15075, -1000, -1000,
	-1000, -1000, 108, -1000, 14105, -1000, -1000, 1233, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 848, 846, -1000,
	-243, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677,
	1677, 1677, 14583, 1677, 1865, 1677, 1677, 1677, 1677, 1677,
	1677, 1677, 1677, 1677, 1677, 1677, 3693, 1677, 1677, 1677,
	1677, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1531, 879,
	137, 879, 1524, 1522, 879, 879, -1000, -1000, 1289, 968,
	-1000, -1000, -1000, -1000, 1642, -1000, 1640, -1000, 190, 181,
	-1000, 1517, 1667, -1000, 1638, 1693, 1793, 15914, 245, 1766,
	1765, 1680, 682, 1680, 1961, 344, 245, 2011, 277, 2011,
	1568, 11153, 1270, 282, 282, 245, 282, -1000, 282, -1000,
	-1000, 63, 1763, 784, -1000, -1000, -1000, 701, 282, -1000,
	408, 9188, -1000, 282, -1000, -1000, 282, 282, 282, 542,
	-1000, 1269, -1000, -1000, 939, 844, 8795, -1000, -1000, 1634,
	-1000, 345, 1706, 1706, 14583, 1900, 1900, 1900, 1900, 842,
	234, -1000, 242, 918, 918, -157, 448, 447, -163, 1677,
	1689, 1760, -1000, 15914, 873, -1000, 14583, 163, 1677, 1677,
	1677, 1677, 14105, -1000, -1000, -1000, -1000, -1000, -163, 1759,
	-1000, -1000, -1000, 1061, -1000, 1757, 1755, -1000, 1754, 14583,
	277, 234, 1155, 182, -1000, 1653, -1000, 1203, 15075, 15075,
	15075, 15075, 15075, 15075, 15075, 15075, 15075, 15075, 15075, 15075,
	4313, 1227, -1000, 1120, 1120, 90, 90, 90, 90, 90,
	90, 110, -1000, 1205, 74, 1575, 1981, 2028, 14105, 516,
	-1000, 13450, -1000, 10367, 11153, 14432, 13954, 13954, 13954, 13954,
	4675, 14583, 13954, 13954, 13954, 13954, 1939, 1055, 516, 1500,
	1960, 1205, 1205, 1205, 1204, -1000, 1205, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 142, -1000, -1000, -245, -1000,
	-251, -1000, -1000, -1000, -1000, -1000, -56, 835, 13954, 13954,
	13954, 13954, -1000, -1000, 879, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 137, 1235, 137, 81, 70, -1000, 1202,
	-1000, 1193, 15914, 282, 245, 1504, 1649, 1900, 1900, 1900,
	1900, 1752, 277, 15914, -1000, 1680, 245, -1000, 695, 1977,
	-1000, -1000, 1959, -1000, 1647, -1000, -1000, 1555, 245, -1000,
	1617, 1751, 236, -1000, -1000, 503, 1750, 171, 414, 1749,
	1682, 15914, 700, 1129, 4852, 282, 624, 282, -1000, 6,
	706, -1000, -1000, 282, -1000, -1000, 1143, 282, -1000, -1000,
	-1000, -1000, 2981, 15914, 1900, 1190, -1000, -1000, -1000, 1900,
	1097, -1000, -1000, -1000, -1000, -1000, -1000, 11153, -1000, 255,
	-1000, 1109, -1000, -1000, 1138, 331, 1089, -1000, 282, -163,
	1747, 14583, 14583, 328, 15914, 1612, 337, 14583, 14583, 1124,
	-1000, -1000, 395, 14924, 1156, 1056, 15075, 905, 15075, 15812,
	15812, 15812, 15812, 15075, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1278, -1000, 1680, 1500, 1205, 1205, -1000, 11153,
	1677, -1000, 1201, -1000, 1197, 1492, 873, 1594, -1000, -123,
	14583, 1746, 1022, -1000, 34, 1131, 90, 258, 258, 75,
	75, 75, 75, 75, 175, 175, -1000, -67, -1000, 96,
	-1000, -1000, -1000, -1000, -1000, 1234, -1000, -1000, -1000, -1000,
	14583, -1000, 1972, 1979, 1680, 1916, 1205, 1857, -1000, 1205,
	13954, 1548, 1575, -1000, 511, -1000, 833, 1677, -1000, 93,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2693, 1548, 511, 1548, 1548, 1548, 759, 1625, 15553, 1706,
	1231, 1706, 1743, -1000, -1000, 200, 1706, 176, -1000, -1000,
	-1000, -1000, 1743, -1000, -1000, -1000, -1000, -1000, 1706, 1706,
	-1000, -1000, 1706, 1706, -1000, 1706, 1706, 1014, 1548, 1592,
	1590, 1548, 13954, -1000, 1048, -1000, 14583, 1205, -1000, 245,
	-1000, -1000, -1000, -1000, 1205, -1000, -1000, -267, -270, 174,
	169, 282, 1548, 1205, 1614, 1548, 1548, -1000, 879, -1000,
	879, -1000, -1000, 1483, 1475, 1457, 1738, 1736, -173, 15914,
	1570, 1563, 1205, 1910, 11153, -1000, -1000, -1000, -1000, -1000,
	310, 1050, 282, 4592, 1953, 137, -1000, 6830, 770, 282,
	-1000, 15914, 15914, 1732, 1731, 1726, 14583, 14583, 301, 1559,
	15075, 1134, 365, -1000, 1102, -1000, -1000, 401, 1723, 168,
	1719, 699, 1115, 4852, 589, -1000, -1000, 933, 1791, 3496,
	222, -1000, 1276, 1043, 1230, 1041, 1039, 1038, 1034, 1033,
	1030, 1020, 1018, 1016, 1013, -1000, -1000, 1441, -1000, 1900,
	1677, -1000, -1000, 454, 2035, -1000, -1000, 454, 2019, 1718,
	1717, 15914, 873, 1436, -1000, 238, 296, 1677, 1677, 1557,
	2981, -1000, -30, 395, 484, -1000, -1000, 1127, -1000, -1000,
	16, 15075, 15075, 15075, -1000, -1000, -1000, -1000, 14105, 1156,
	15075, 15075, 15075, 936, 15075, 16, 16, 16, 16, 16,
	2469, 1205, 1205, -1000, -1000, 1553, -1000, 14583, -1000, 1410,
	-1000, -1000, 337, 562, -1000, -1000, 1047, -1000, 1399, 158,
	516, 1896, 14583, 14583, 1981, -1000, 1680, -1000, -1000, -1000,
	1939, -1000, -1000, 1092, -1000, 1548, 13954, -239, -1000, -1000,
	-1000, 355, -1000, -1000, 8402, 13954, -1000, 15402, 4313, -239,
	-239, -1000, -1000, 5635, 1227, 14583, -1000, 1184, 343, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5635, -1000, 15075, 15075, 15075, 15075, -42, 1508, 1051,
	-1000, 14583, 1005, -1000, -1000, -1000, -1000, -1000, 69, 60,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -173,
	15914, 15914, 1988, 1716, 1386, 1988, 2981, -1000, 1680, 1503,
	300, 218, 14583, -1000, 3505, -1000, 4592, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1981,
	14583, -1000, -1000, -1000, -1000, -1000, 282, 4331, 282, 282,
	282, 762, 14583, 423, 14583, -1000, -1000, -1000, -1000, -1000,
	1050, 303, 1370, 6830, 6830, 6830, 5256, 6830, 6830, 755,
	-1000, 1528, 1516, 15914, 15914, 15914, 903, 1514, 1715, 1714,
	-1000, 16, -1000, 4852, -1000, 1712, 15914, 15914, 1709, 1707,
	14583, 15075, 1095, 356, -1000, 1076, -1000, 391, 1140, -1000,
	282, -1000, -115, 3496, 282, -1000, 1183, -1000, -1000, 1177,
	1167, 1177, 1177, 1177, 1177, 1177, 326, 1166, 570, 1900,
	-1000, 234, 918, 234, 918, 11153, 15914, 1495, 337, 1988,
	14583, 351, 298, 14583, 14583, 2981, 1791, -1000, -1000, -1000,
	-1000, 16, 14105, 16, 14105, 16, 14105, -1000, 936, 16,
	610, -1000, 15075, 936, 15075, -1000, -1000, 556, 11153, 873,
	-1000, -1000, 2013, 234, -134, 637, -1000, 54, -1000, 2030,
	923, 731, 1610, -1000, 666, 1972, 1205, 1828, -1000, -1000,
	-1000, -1000, 1677, -1000, -1000, 823, 1205, -1000, -1000, -1000,
	-1000, 1205, 1706, -1000, 1205, 677, -1000, -1000, 1205, 1551,
	967, 951, 810, 1677, -28, -1000, 516, 14583, -1000, -1000,
	1988, 1359, 1491, 2981, 14583, 277, -173, 2981, -1000, -1000,
	-52, 14583, 4592, 6552, 516, 6552, -1000, 4592, 2524, 1972,
	4034, 667, 1734, 2349, 1596, 486, -1000, 6437, 1200, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 282, 2003, 1999, 1998, 1996, 13390,
	14583, 14583, -1000, 216, 289, -1000, -1000, -1000, -1000, -1000,
	6044, 1706, 137, 1704, -1000, -1000, -1000, -1000, -1000, 454,
	1488, 1478, 1468, 339, 1988, 14583, 14583, -1000, 15914, 1456,
	1452, 15914, 15914, 752, 16, -1000, 4852, -1000, 1703, -1000,
	-1000, 1677, 1446, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1061, -1000, 1061, 1444, 1438, 2981,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1436,
	1436, 1791, 454, 74, 74, 74, -1000, 15075, 16, -1000,
	16, 245, -1000, 337, 918, 918, -1000, -1000, -1000, -1000,
	195, 1003, 1022, 1022, 1164, 73, -1000, 1978, -1000, -1000,
	1863, 14583, 14583, 14583, -1000, 1896, -1000, 13954, -1000, 527,
	9974, -1000, -1000, -1000, -1000, 15075, -1000, -1000, 15075, -1000,
	15075, -1000, 15075, -1000, 15075, 15075, 1205, 1157, 516, 2981,
	1988, 2981, 1791, 516, 1409, 1988, 1791, -1000, -191, 516,
	3505, 3598, -1000, -1000, 788, 13044, -1000, 1896, 4592, 1006,
	-1000, 1015, -1000, 6552, 2956, 245, 1433, 1480, 2302, -1000,
	-1000, -1000, 1906, 827, 170, 282, 299, 4852, -1000, -1000,
	1587, 7223, 53, -1000, -1000, -1000, 1001, 819, 329, -1000,
	1883, -1000, -1000, 4331, 1893, -1000, -1000, -1000, -1000, -1000,
	6552, -1000, 1550, 1205, 6552, -1000, 234, 2981, 2981, -1000,
	-32, -1000, 1404, 1402, 1393, -1000, 454, 1376, 1373, 334,
	-1000, 15914, 282, -1000, 3496, 454, 454, 528, 2981, 1791,
	1988, 1988, -1000, 234, -1000, -1000, -1000, 16, 1702, -1000,
	536, 429, 1022, -1000, 1022, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2765, 1861, 516, 516, -1000, -1000, 1530, -1000,
	1976, 1205, -1000, 1608, 1608, 1608, 1608, 1608, 515, -1000,
	-1000, 1791, 2981, -1000, -1000, -1000, 2981, -1000, 14583, 13023,
	-1000, -1000, -1000, -1000, 3201, 5033, 672, 2879, 375, 245,
	-1000, 375, 1473, 2349, -1000, -1000, 1500, 2349, 2349, 2349,
	2349, 2349, -1000, 1846, 1842, -1000, 1833, 1821, 1845, 245,
	1363, 827, 796, 1677, -1000, 2207, -1000, -1000, -1000, 1906,
	1945, -1000, 8009, 1587, 53, 1582, -1000, 40, 33, 13097,
	11153, 879, -1000, -1000, -1000, -1000, -1000, 11153, 294, -1000,
	3590, -1000, 1791, 1791, -1000, 1988, 1988, -1000, 234, 2981,
	2981, -33, 1358, 1205, -1000, 234, 234, 245, 1791, 454,
	-1000, -1000, -1000, 11153, 234, 2027, 234, 2015, -1000, -1000,
	-1000, 814, -1000, 1988, 2349, 14583, -1000, -1000, -1000, -1000,
	-1000, -1000, 1205, 270, -117, -1000, -1000, 1791, 516, -1000,
	-1000, 4063, -1000, -1000, 14583, -1000, 14583, 6552, -1000, 1396,
	1677, -1000, 1988, 2349, 1430, 1498, -1000, 1000, 2302, 1698,
	1792, 2024, -1000, -1000, -1000, -1000, 1841, -1000, 1822, -1000,
	-1000, -1000, -1000, -84, 719, 717, 714, 282, -1000, 1680,
	-1000, 1582, 53, 22, -1000, -1000, -1000, -1000, 516, 979,
	-1000, 1572, -1000, 4838, -1000, -1000, -1000, -1000, -1000, 1791,
	1791, -1000, -1000, -1000, -1000, -1000, 1694, -1000, 234, 1353,
	-1000, 918, -1000, 918, 11153, 1986, 1561, 1351, -1000, 516,
	-1000, 1860, -46, -127, -1000, 670, 4592, 3620, 4300, 1784,
	1500, 1677, -1000, 11546, 282, 1981, 1430, -1000, 1988, 1500,
	14583, -1000, -1000, 14583, 1690, -1000, 14583, -1000, -1000, -1000,
	-1000, 1683, 1677, 1677, 1677, 1294, -1000, -1000, -1000, -1000,
	23, 25, -1000, 14583, -1000, -1000, -1000, 11153, -1000, -1000,
	454, 454, -1000, 1983, 1975, -1000, 1205, 14583, -1000, 1852,
	-1000, -1000, 2807, 1006, -1000, -1000, 1890, 1381, 1540, -1000,
	-1000, 13601, 1205, 1308, -1000, -1000, 812, -1000, -1000, 1294,
	1972, -1000, 1981, -1000, 516, 516, 277, 516, -192, 277,
	277, 277, 2482, 282, -1000, -1000, -1000, 516, 1288, 234,
	234, -1000, 14583, 14583, -1000, -1000, -72, 4150, 390, -1000,
	1677, -1000, -1000, 1487, 12332, 282, -1000, -1000, 1972, 1286,
	1284, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1282, 1282, 1282, 796, -1000, -1000, -1000, -1000, 516, 1550,
	-122, 650, 2026, -1000, 1677, -1000, 1680, -1000, -1000, -1000,
	-1000, -1000, -192, -1000, -1000, -1000, -84, -130, -1000, 1500,
	1540, 1205, -1000, -1000, -1000, 1536, -1000,
}

var yyPgo = [...]int16{
	0, 2277, 3, 96, 2276, 2275, 2274, 2273, 2271, 2269,
	2267, 2259, 2257, 2255, 2254, 29, 27, 42, 25, 38,
	2253, 2250, 2247, 2246, 2245, 2244, 72, 2239, 2238, 2235,
	2234, 79, 2233, 2231, 2229, 2228, 64, 78, 102, 106,
	2707, 31, 32, 44, 41, 2227, 36, 2224, 2222, 53,
	2220, 35, 2218, 2217, 2664, 2216, 2212, 5, 407, 100,
	2210, 45, 2209, 2207, 108, 3735, 2752, 2610, 2483, 2353,
	2206, 91, 21, 62, 7, 11, 13, 2200, 385, 1,
	2194, 85, 70, 2193, 2192, 2191, 63, 2187, 61, 89,
	15, 54, 2186, 94, 8, 71, 43, 20, 14, 2,
	50, 40, 2184, 19, 33, 26, 2183, 68, 2182, 112,
	2182, 75, 83, 30, 2442, 0, 60, 77, 2179, 118,
	2178, 1542, 93, 39, 12, 52, 73, 2177, 81, 98,
	86, 87, 76, 2175, 80, 2173, 2168, 2166, 2165, 2164,
	297, 426, 2161, 90, 48, 2157, 2154, 2153, 119, 120,
	88, 107, 101, 1744, 2152, 2147, 2146, 2144, 2143, 69,
	59, 103, 2142, 37, 92, 28, 312, 2138, 2137, 2134,
	2133, 2132, 2129, 2125, 99, 2123, 74, 1644, 568, 528,
	47, 2120, 2117, 2112, 2110, 2110, 2108, 2107, 2105, 67,
	2104, 2102, 97, 55, 111, 2102, 2102, 2099, 2098, 66,
	65, 2096, 116, 110, 2090, 109, 34, 46, 250, 51,
	2089, 2088, 2085, 6, 4, 2084, 18, 82, 2083, 114,
	2079, 84, 2078, 95, 2068, 17, 2067, 2066, 49, 2064,
	449, 2030, 105, 2063, 2062, 2060, 104, 728, 1508, 2056,
	163, 115, 2051, 113,
}

var yyR1 = [...]uint8{
	0, 233, 234, 234, 1, 1, 1, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 22, 22, 22, 22, 22, 22, 236, 236, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 29, 29,
	7, 8, 8, 8, 239, 239, 49, 49, 96, 96,
	9, 9, 9, 9, 10, 10, 210, 210, 209, 211,
	211, 11, 11, 11, 11, 11, 204, 204, 204, 204,
	204, 12, 12, 207, 207, 207, 15, 15, 15, 15,
	16, 16, 17, 17, 17, 19, 19, 101, 101, 105,
	105, 105, 106, 106, 106, 106, 222, 222, 127, 127,
	235, 235, 240, 240, 240, 240, 240, 240, 240, 202,
	202, 202, 202, 203, 203, 203, 203, 205, 205, 206,
	206, 206, 206, 206, 206, 208, 208, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 13, 13,
	30, 30, 73, 73, 14, 112, 112, 183, 183, 183,
	184, 184, 184, 184, 184, 184, 186, 186, 187, 187,
	119, 119, 188, 188, 25, 168, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 152, 152, 152, 130, 130,
	130, 130, 130, 130, 130, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	194, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 196, 197, 198, 190, 190, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 142, 142, 142, 142, 142, 142, 142, 189, 189,
	185, 185, 185, 185, 134, 134, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 133, 133, 133, 133,
	133, 133, 133, 138, 138, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 131, 131, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 139, 139,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 151,
	151, 140, 140, 149, 149, 150, 150, 150, 141, 141,
	141, 148, 148, 148, 145, 145, 146, 146, 147, 147,
	147, 143, 143, 143, 144, 144, 144, 154, 179, 179,
	179, 181, 181, 182, 182, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 167,
	167, 199, 199, 200, 200, 201, 201, 178, 178, 178,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 166, 166, 176, 176, 176, 176, 176, 177,
	177, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 175, 161, 161, 161, 161, 161, 162, 162, 163,
	163, 163, 163, 155, 155, 156, 156, 157, 157, 158,
	158, 158, 158, 158, 158, 160, 160, 159, 159, 159,
	159, 159, 159, 192, 192, 192, 226, 226, 226, 226,
	226, 226, 227, 227, 193, 193, 164, 164, 165, 165,
	172, 172, 172, 172, 241, 241, 170, 170, 170, 171,
	171, 171, 242, 26, 27, 27, 28, 28, 28, 33,
	33, 33, 31, 31, 32, 32, 38, 38, 37, 37,
	39, 39, 39, 39, 118, 118, 118, 117, 117, 223,
	223, 223, 223, 223, 41, 41, 42, 42, 43, 43,
	44, 44, 44, 213, 213, 212, 212, 214, 214, 214,
	214, 214, 214, 214, 214, 56, 56, 93, 93, 93,
	97, 97, 45, 45, 45, 45, 46, 46, 47, 47,
	48, 48, 125, 125, 124, 124, 124, 123, 123, 50,
	50, 50, 52, 51, 51, 51, 51, 53, 53, 55,
	55, 54, 54, 57, 57, 57, 57, 58, 58, 95,
	95, 40, 40, 40, 40, 40, 40, 40, 40, 108,
	108, 60, 60, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 70, 70, 70,
	70, 70, 70, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 36, 36, 71, 71, 71, 78,
	72, 72, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 68, 68, 68, 68, 68, 68, 68,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 243, 243, 69, 69, 69,
	69, 34, 34, 34, 34, 34, 126, 126, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 82,
	82, 35, 35, 80, 80, 81, 111, 111, 83, 83,
	79, 79, 79, 79, 215, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 61, 61, 84, 84, 85,
	85, 224, 224, 225, 86, 86, 87, 87, 88, 89,
	89, 89, 90, 90, 90, 90, 91, 91, 91, 63,
	63, 63, 63, 63, 63, 92, 92, 94, 94, 94,
	94, 98, 98, 74, 74, 76, 76, 75, 77, 99,
	99, 103, 100, 100, 104, 104, 104, 104, 104, 23,
	24, 102, 102, 102, 120, 120, 120, 109, 109, 110,
	110, 107, 107, 115, 115, 116, 116, 116, 116, 116,
	121, 121, 121, 122, 122, 216, 216, 216, 217, 217,
	217, 218, 218, 219, 219, 220, 220, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 229, 229, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 231,
	231, 232, 232, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 237, 238,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 2, 13, 12,
	14, 12, 13, 12, 10, 7, 10, 7, 11, 11,
	9, 13, 14, 5, 8, 4, 8, 4, 7, 10,
	7, 8, 6, 9, 8, 9, 9, 8, 10, 10,
	11, 7, 6, 10, 9, 10, 10, 9, 11, 12,
	13, 13, 5, 12, 11, 9, 6, 13, 13, 14,
	14, 6, 7, 6, 6, 10, 12, 10, 11, 12,
	13, 12, 13, 7, 7, 11, 13, 6, 6, 8,
	7, 6, 6, 8, 8, 10, 10, 1, 1, 4,
	6, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 1, 1, 1, 3, 0, 4,
	3, 4, 5, 4, 2, 6, 1, 3, 3, 0,
	1, 2, 2, 2, 3, 5, 0, 2, 2, 2,
	2, 3, 5, 1, 2, 3, 7, 10, 1, 1,
	5, 5, 3, 5, 3, 1, 3, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	0, 3, 0, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 4, 2, 3, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 4,
	1, 1, 0, 1, 2, 0, 3, 0, 2, 2,
	0, 2, 2, 2, 2, 2, 0, 2, 0, 3,
	0, 1, 0, 2, 4, 4, 0, 1, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 3, 1,
	1, 1, 1, 1, 3, 2, 2, 3, 2, 4,
	2, 4, 2, 2, 3, 2, 3, 2, 7, 9,
	3, 3, 6, 9, 11, 9, 11, 5, 8, 14,
	14, 6, 6, 8, 8, 5, 8, 7, 4, 0,
	2, 1, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 3, 1, 2, 1, 1, 2, 0, 4, 3,
	4, 3, 3, 3, 3, 3, 3, 3, 2, 4,
	6, 2, 3, 4, 2, 3, 1, 3, 0, 2,
	0, 2, 2, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 1, 1, 0, 1, 1, 3, 3, 2, 2,
	2, 1, 1, 1, 1, 1, 4, 5, 4, 4,
	4, 1, 2, 2, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 3,
	3, 0, 3, 3, 0, 1, 0, 1, 0, 2,
	1, 0, 3, 3, 0, 1, 2, 6, 0, 1,
	4, 1, 2, 1, 3, 2, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 5,
	2, 3, 3, 2, 3, 2, 3, 3, 2, 2,
	3, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 5, 2, 2, 3, 4, 2, 2, 2,
	2, 1, 4, 7, 7, 10, 10, 13, 11, 1,
	1, 2, 2, 10, 8, 11, 9, 7, 5, 6,
	7, 8, 9, 8, 9, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 0, 1, 1, 1,
	2, 2, 1, 2, 0, 3, 0, 1, 1, 3,
	0, 4, 1, 3, 2, 1, 1, 2, 1, 1,
	1, 1, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	3, 6, 4, 7, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 0, 4, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 8, 1, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 0,
	4, 1, 3, 3, 2, 3, 2, 1, 2, 0,
	3, 1, 1, 3, 4, 6, 4, 6, 4, 6,
	3, 4, 4, 5, 5, 3, 4, 3, 3, 3,
	3, 5, 6, 2, 4, 3, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 2, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 6, 2, 2, 2,
	2, 2, 2, 2, 3, 3, 1, 1, 1, 1,
	2, 1, 3, 4, 5, 5, 5, 5, 6, 4,
	4, 4, 6, 6, 8, 6, 4, 6, 6, 8,
	6, 8, 6, 8, 6, 8, 9, 7, 5, 4,
	4, 3, 3, 3, 1, 3, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 2, 2, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 4, 4, 1, 3, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 0, 2,
	1, 1, 3, 5, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 0, 3, 0,
	2, 1, 3, 1, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 1, 3, 1,
	1, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 5, 3, 1,
	3, 1, 2, 1, 1, 1, 1, 0, 3, 0,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 2, 0, 2,
	2, 0, 1, 4, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -233, -1, -20, -21, -22, -25, 126, 132, 133,
	127, 71, -234, 401, -168, 58, -226, -227, 285, -188,
	139, 152, 174, 175, 177, 371, 136, 137, 383, 384,
	156, 386, 79, -231, -230, 6, 8, 9, 10, 165,
	147, 174, 21, -115, 61, 311, -231, 137, -107, 138,
	175, 142, 56, -169, -152, -116, 63, 36, -115, 307,
	151, -113, -114, 131, 202, 374, 80, 25, 27, 293,
	299, 201, 84, 120, 16, 85, 208, 383, 384, 119,
	76, 351, 126, 52, 343, 344, 341, 206, 354, 355,
	342, 300, 213, 20, 31, 10, 28, 159, 24, 113,
	128, 203, 89, 88, 162, 166, 167, 26, 160, 75,
	209, 211, 19, 55, 150, 11, 373, 13, 14, 388,
	375, 143, 142, 100, 387, 138, 50, 8, 122, 29,
	97, 46, 157, 212, 48, 98, 17, 345, 346, 34,
	361, 168, 115, 53, 40, 389, 81, 390, 73, 56,
	314, 207, 79, 15, 51, 169, 391, 210, 395, 99,
	129, 350, 176, 49, 204, 392, 136, 205, 6, 357,
	33, 158, 47, 137, 301, 393, 87, 141, 74, 5,
	156, 9, 394, 54, 57, 347, 348, 349, 38, 86,
	12, 153, 365, 77, 178, 396, 397, 152, 175, 179,
	180, 298, 269, 138, 138, 138, 140, 222, 140, -115,
	-115, -79, -109, 61, -114, -121, 143, 63, -54, -121,
	61, -114, -109, 137, -109, -109, 386, 383, 384, 350,
	56, 59, 135, 56, -54, 314, 137, -54, -54, 137,
	145, 60, 59, -153, -130, -134, -131, -136, -135, -137,
	-115, -132, -133, 258, 363, 255, 259, 256, 261, 262,
	263, 120, 260, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 264, 276, 33, 161, 248, 249,
	250, 253, 252, 254, 251, 122, 277, 278, 279, 280,
	281, 282, 283, 284, 285, 229, 230, 231, 232, 233,
	234, 235, 236, 237, 238, 240, 241, 243, 244, 245,
	247, 246, -153, -153, -115, 56, 221, -115, -115, -109,
	223, -109, 56, -202, 19, 201, 202, 214, 56, -115,
	123, 81, 25, 123, -116, -109, -115, -54, 137, -230,
	137, 131, 127, 128, 129, -54, -54, 314, 129, 131,
	-54, -121, -172, -241, 366, 37, -152, -154, -161, -155,
	-156, -157, -158, -173, -162, 146, 144, 156, 399, 148,
	149, 285, -166, 150, 138, 157, 73, 81, -194, 146,
	-197, 56, 293, 299, 144, 157, 156, 399, 71, 147,
	25, 373, 375, 31, 32, -147, 402, 287, -145, 296,
	123, -140, 58, -140, -139, 257, -141, 58, -140, -141,
	-140, -141, -143, 259, -143, -143, -143, -143, 58, 58,
	-140, -140, -140, -140, -140, 58, -149, 58, -138, 242,
	-149, -150, 58, -150, 56, 57, -54, -115, 56, 56,
	-54, -222, 396, 397, -54, -54, -205, -203, 8, 9,
	10, 215, -54, -202, -116, -122, -113, -114, -121, 26,
	-130, 276, -122, -113, -54, -49, -54, -49, 145, -119,
	146, -161, 144, 156, 150, 145, 145, 146, 141, 145,
	131, 131, 127, 128, -54, 141, 41, 97, 123, -170,
	59, -116, 71, 36, 58, -193, 56, 81, -164, -115,
	157, -166, 61, 138, -192, 157, 383, 384, -237, 58,
	-166, 138, -166, 61, 138, 157, 61, 157, 73, 19,
	-115, 9, 157, 157, -193, 63, -54, 58, -190, 374,
	16, 58, -65, -64, -60, 161, -79, -215, -77, -219,
	-78, 120, 121, 109, 110, 117, 82, 122, -68, -66,
	-67, -69, -218, 188, -237, 63, 64, -115, 62, 72,
	65, 66, 67, 68, 73, 74, 75, -121, 319, -75,
	287, 360, 359, 48, 49, 351, 352, 353, 354, 355,
	361, 356, 85, 38, 40, 264, 288, 289, 341, 349,
	348, 347, 345, 346, 343, 344, 398, 143, 342, 115,
	350, 286, -198, 65, 403, -146, 297, -115, 65, -143,
	-140, -143, 65, 61, -143, -143, -144, 120, 119, 33,
	-144, -144, -144, -144, -151, 63, -151, -148, 365, 366,
	-148, 65, 65, -149, 65, -54, -115, 58, 56, -54,
	-54, 25, 140, 25, -183, 25, 56, 59, 215, -202,
	-205, 123, 58, 57, 141, 59, 11, -152, -236, 138,
	157, -115, 157, -115, -115, -115, -115, -115, 146, -161,
	-119, 145, -152, 146, -161, 156, 145, 145, 146, 131,
	-115, -109, 63, 73, -115, -122, 90, -116, -241, -177,
	-174, -115, 157, -114, 58, -68, -66, -67, -69, -121,
	-216, 217, 81, 10, 9, 19, 150, 144, 156, 399,
	154, -192, 61, 58, -40, -59, 81, -65, 31, 26,
	9, 76, -237, 61, 61, 61, 61, -192, 156, -164,
	-115, 385, -194, 399, -142, 341, 344, 343, 289, -237,
	58, -216, -40, 25, 31, -61, 65, 110, 106, 105,
	116, 109, 110, 111, 112, 113, 114, 115, 107, 108,
	398, 119, 63, 124, 125, -65, -65, -65, -65, -65,
	-65, -65, -219, -2, -65, -72, -3, -4, -237, -40,
	6, -237, 63, 123, 123, 402, -237, -237, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -82, -40, -237,
	41, -237, -237, -237, -237, -243, -237, -243, -243, -243,
	-243, -243, -243, -129, 120, 259, 161, 250, -132, -131,
	265, 264, 122, 290, 274, 275, 249, -115, -237, -237,
	-237, -237, 60, -144, -143, -144, 60, 60, -144, -144,
	61, 61, 120, 60, 59, 60, 248, 248, 60, 59,
	60, 59, 58, 57, 56, -176, -177, -68, -66, -67,
	-69, -54, 58, 58, -2, -237, -109, -2, -184, 19,
	185, 186, -54, -203, -93, -115, 157, -205, 56, -116,
	-151, -115, -232, -115, -54, -232, -115, 156, 144, 399,
	154, 58, 33, 128, 175, 141, -115, -236, -152, -115,
	-115, -115, -115, 146, -161, 63, 97, 123, -171, -116,
	63, 65, 60, 59, -140, 58, -175, 291, -140, -140,
	-40, -89, 27, 28, -89, -89, -89, 123, -217, 218,
	217, -163, 181, 182, 33, 183, -163, 385, 157, 157,
	-192, -237, -237, 57, 58, -177, -238, 80, 79, 97,
	216, 60, -40, -62, 100, 81, 98, 82, 99, 101,
	102, 103, 104, 84, 90, 91, 92, 93, 94, 95,
	96, -108, -237, -78, -237, -237, -237, -59, -192, 58,
	-193, -140, 58, -140, 58, 58, -40, -93, -217, 60,
	58, 375, 59, 65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -134, 249, -129, -132,
	-126, 61, 63, -64, 63, -115, -64, -115, -238, -238,
	59, -238, -86, 15, -28, 5, -2, -26, -242, -38,
	24, -37, -72, -39, -40, 111, -121, -116, -116, -220,
	403, -221, 63, 65, 66, 67, 68, 73, 74, 75,
	-65, -37, -40, -37, -37, -37, -40, -128, 120, 255,
	161, 250, 244, 274, 275, 295, 248, 296, 237, 229,
	234, 247, 245, 231, 246, 230, 243, 240, 253, 252,
	254, 265, 256, 261, 263, 262, 260, -40, -37, -39,
	-39, -37, -31, 24, -80, -81, 86, -79, -115, 19,
	-238, -238, -238, -238, 65, -238, 257, 402, 402, 365,
	366, 123, -37, -38, -37, -37, -37, -144, -143, 63,
	-143, 298, 298, 65, 65, -176, -115, -54, 60, 58,
	-93, -177, -2, -54, 141, 21, 6, 8, 9, 10,
	19, -112, 59, 25, -54, 60, -235, 58, 365, 59,
	182, 58, 58, 383, 384, 157, 58, 58, 57, -177,
	31, 81, 178, 31, 81, -130, -115, 144, -115, 156,
	399, 33, 128, 175, -115, 63, 73, -115, -179, -181,
	365, -180, 57, 151, 71, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 61, -174, -89, 65, -89, 60,
	-116, 220, 219, -193, 56, 73, 184, -193, 56, -164,
	-192, 58, -40, -160, -159, -115, -40, 155, -115, -177,
	60, -189, 183, -40, -40, -70, 73, 81, 74, 75,
	-65, 21, 22, 23, -71, -75, -78, 69, -237, 100,
	98, 99, 84, -65, 98, -65, -65, -65, -65, -65,
	-65, 61, -79, -238, -238, -165, -116, -237, 60, 65,
	60, 60, -238, 60, 371, 372, -40, 58, -61, 365,
	-40, -90, 17, 16, -5, -3, -237, 21, 24, -238,
	-33, 44, 45, -27, -238, -37, 59, -238, -238, -118,
	-117, 25, -115, 63, 123, -237, 403, 59, 398, -238,
	-238, -238, -238, 59, 57, 59, -140, 58, -140, -140,
	-150, 235, -140, 235, -150, -140, -140, -140, -140, -140,
	-140, 25, -238, 59, 11, 59, 11, -238, -37, -83,
	-81, 89, -40, -238, -121, -238, 403, 403, 248, 248,
	-115, -238, -238, -238, -238, -144, -144, 60, 60, 60,
	58, 58, -95, 387, -176, 60, 60, -238, 25, -165,
	203, -111, 86, -115, -206, -208, 224, -18, -15, -6,
	-8, -7, -10, -9, -11, -12, -13, -14, -23, -3,
	143, -16, -17, -29, 10, 9, 20, 33, 207, 208,
	213, 209, 153, -30, 176, -24, 8, 350, 166, 167,
	-112, 19, -240, -115, 109, 90, 63, -152, 59, 132,
	-115, -177, -177, 58, 58, 58, -40, -160, 155, -115,
	60, -65, 73, 175, 73, 157, 58, 58, 383, 384,
	58, 31, 81, 178, 31, 81, -130, 144, 97, -178,
	56, -180, 365, 58, 367, 61, -167, 90, 63, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 60,
	-89, -216, 9, -216, 10, 58, 58, -177, -238, -238,
	59, 365, 365, -237, -237, 60, -179, 358, 73, 74,
	75, -65, -237, -65, -237, -65, -237, -71, -65, -65,
	-65, -36, 162, -65, 80, -238, -238, 60, 59, -40,
	60, -189, 56, -216, 60, -191, 60, 248, -91, 19,
	34, -40, -87, -88, -40, -86, -2, -31, 70, -238,
	-39, -223, 400, -117, 111, -122, -38, -221, -129, -223,
	-223, -128, 120, 161, -126, -40, -143, 61, -128, -65,
	-65, -65, -65, 362, -86, 88, -40, 87, 298, 298,
	-95, -176, -177, -58, 12, 58, 60, -58, -179, -2,
	-186, 57, 204, 224, -40, 401, -208, 224, -206, -86,
	-40, -26, -26, -26, -210, -115, -209, -26, -229, -228,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 333, 334, 335, 336, 337, 338, 339,
	340, -115, -115, -115, -204, 40, 210, 211, 212, -40,
	-115, -237, -82, -111, 203, 60, -240, -240, -240, -240,
	-115, 120, 269, 33, 122, -240, -240, 134, 60, 60,
	-177, -177, -177, 60, 60, 58, 58, -130, 58, -177,
	-177, 58, 58, -40, -65, 73, 175, 73, 157, 63,
	73, -115, -182, -180, -115, 65, -199, 56, 77, 65,
	-199, -199, -199, -199, -199, -200, 199, 200, 65, -201,
	-200, 65, -89, -217, -163, -217, -163, -165, -177, 60,
	-189, -58, -159, 90, -115, 80, 90, -115, 80, -160,
	-160, -179, -178, -65, -65, -65, -36, 80, -65, -36,
	-65, 147, -116, -238, 10, 9, -217, 371, 372, 60,
	225, 377, 378, 168, 379, 183, 380, 381, 298, 9,
	100, 59, 18, 59, -89, -90, -238, -32, 47, -237,
	123, -238, -238, -238, -238, 59, -238, -238, 59, -238,
	19, -238, 59, -238, 19, -237, -35, 357, -40, -58,
	60, 60, -179, -40, -93, -95, -179, -187, 365, -40,
	-206, -207, -208, -208, -206, 401, 88, -90, 87, -19,
	-15, -16, -18, 224, -107, 11, -49, -42, -43, -44,
	-45, -56, -78, -237, -54, 59, -211, -125, 205, 25,
	-100, -127, 226, -104, 309, 308, -116, 319, -102, 307,
	259, 306, -199, 59, -115, 11, 11, 11, 11, -208,
	224, -73, -72, -73, 224, 204, -216, 60, 60, 60,
	183, -58, -160, -160, -177, 60, 60, -177, -177, 60,
	-130, 58, -237, 60, 59, -193, -193, 60, 60, -179,
	-238, -238, -178, -216, -238, -238, -238, -65, -54, -189,
	-163, -163, 365, -61, 16, -61, -61, -61, 65, 378,
	168, 380, 16, 42, -40, -40, -88, -91, -37, -238,
	169, -86, 111, -65, -65, -65, -65, -65, -65, -238,
	63, -179, -58, -179, -178, 60, -58, -178, 399, 401,
	-208, 88, 88, -91, -206, 89, 89, -207, -55, 29,
	-54, -54, -49, -239, 11, 57, 33, 59, -50, -52,
	-51, -53, 46, 50, 52, 47, 48, 49, 53, -125,
	-42, -237, -124, 169, -123, 25, -121, 63, -209, -115,
	206, -130, 59, -100, 226, -101, -105, 310, 312, 90,
	123, -120, -115, 63, 31, 33, -228, 29, -207, -238,
	-207, -217, -179, -179, 358, 60, 60, 60, -216, 60,
	60, 183, -177, -115, -180, -216, -216, 147, -179, -178,
	-58, -58, -217, 58, -216, 56, -216, 56, -61, -61,
	382, -121, 43, -41, 11, 16, -238, -238, -238, -238,
	-238, -238, -34, 100, 365, -178, -179, -179, -40, 88,
	-208, 401, -16, -19, 143, -17, 143, 401, 88, -96,
	169, -54, -96, 57, -42, -99, -103, -79, -43, -44,
	-44, -43, -44, 46, 46, 46, 51, 46, 51, 46,
	-51, -121, -238, -57, 54, 142, 55, -237, -123, 19,
	-104, -101, 59, 311, 313, 314, 56, 77, -40, -116,
	-144, -165, 88, 401, -178, -178, -58, -58, -217, -179,
	-179, 358, 60, -238, -217, -217, -54, -178, -216, -165,
	-217, 9, -217, 10, 123, -58, -42, -224, -225, -40,
	-238, 363, 53, 368, -178, 88, 89, -40, -40, -63,
	33, 38, -2, -237, -237, -58, -42, -58, -41, 59,
	90, -47, -46, 56, 57, -48, 56, -46, 46, 46,
	-213, 365, 138, 138, 138, -97, -115, -2, -105, -106,
	315, 312, 318, 90, 88, -178, -178, 58, -217, 60,
	-163, -163, -116, -84, 13, -238, -86, 59, 43, 364,
	369, 143, -206, -19, -19, -98, 56, -99, -74, -76,
	-75, -237, -2, -92, -94, 6, -115, -113, -114, -97,
	-86, -58, -58, -103, -40, -40, 58, -40, 58, -237,
	-237, -237, -238, 59, 312, 316, 317, -40, -165, -216,
	-216, -85, 14, 16, -238, -225, 43, 401, 30, -98,
	59, -238, -238, -238, 59, 123, -238, -90, -86, -93,
	-212, -214, 388, 389, 390, 391, 392, 393, 394, 395,
	-93, -93, -93, -124, -115, 60, -217, -217, -40, -72,
	365, 88, 157, -76, 38, -2, -237, -94, -115, -90,
	60, 60, 59, -238, -238, -238, -57, 368, 143, 9,
	-74, -2, -214, -213, 369, -99, -238,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 0, -2, 0, 0,
	0, 0, 1, 3, 7, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 937, 0, 937, 937, 517, 518,
	519, 522, 0, 0, 1009, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1008, 943, 944, 0, 0, 0, 0,
	0, 942, 0, 0, 227, 279, 279, 279, 945, 946,
	947, 948, 949, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
	1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
	1150, 1151, 1152, 0, 0, 0, 937, 0, 937, 0,
	860, 0, 0, -2, -2, 0, 0, 952, 0, 631,
	950, 951, 0, 937, 0, 0, 523, 520, 521, 223,
	0, 0, 1007, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 0, 235, 408, 404, 239, 240, 241, 242,
	243, 391, 325, 354, 355, 391, 378, 398, 391, 398,
	361, 391, 398, 411, 411, 411, 411, 411, 369, 370,
	371, 372, 373, 374, 375, 0, 0, 345, 391, 391,
	391, 391, 391, 351, 352, 353, 380, 381, 382, 383,
	384, 385, 386, 387, 0, 326, 327, 328, 329, 330,
	331, 332, 333, 334, 335, 393, 343, 393, 395, 395,
	341, 342, 236, 237, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 170, 171, 0, 0, 0,
	0, 0, 0, 0, 25, 0, 27, 224, 0, 1010,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 532, 0, 535, 228, 229, 230, 231,
	232, 233, 234, 0, 524, 526, 0, -2, 0, 0,
	0, 0, 0, 1064, -2, -2, 246, 0, 248, 0,
	250, 0, 252, 253, 0, 255, 257, 524, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 410, 406, 405,
	0, 324, 0, 411, 391, 379, 411, 0, 411, 411,
	362, 363, 414, 0, 414, 414, 414, 414, 0, 0,
	401, 401, 348, 349, 350, 0, 336, 0, 393, 344,
	338, 339, 0, 340, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 157, 0, 207, 0, 177, 173, 174,
	175, 172, 0, 0, 862, 0, -2, -2, 953, 938,
	23, 0, 632, 954, 0, 0, 106, 0, 0, 0,
	526, 52, 0, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 937, 0, 0, 0,
	0, 536, 538, 534, 0, 955, 0, 0, 0, 527,
	450, 0, 458, -2, 0, 463, 514, 515, 0, 1153,
	0, 462, 0, 453, 455, 0, 513, 526, 247, 0,
	0, 0, 254, 256, 0, 260, -2, 0, 0, 295,
	0, 0, 280, 702, 703, 0, 705, 706, 707, 708,
	709, 0, 0, 0, 0, 0, 0, 0, 736, 737,
	738, 739, 0, 741, 0, -2, 866, 860, 868, 869,
	870, 871, 872, 873, 874, 651, 652, 0, 0, 918,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 849, 0, 0, 0, 0, 0, 774, 785,
	785, 785, 785, 785, 785, 785, 0, 0, 0, 0,
	0, 962, 293, 294, 409, 238, 407, 244, 0, 414,
	411, 414, 0, 0, 414, 414, 364, 415, 0, 0,
	365, 366, 367, 368, 0, 389, 0, 346, 0, 0,
	347, 0, 0, 337, 0, 0, 0, 0, 0, 0,
	0, 0, 937, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 32, 0, 87,
	88, 527, 0, 0, 63, 64, 78, 0, 526, 56,
	0, 0, 42, 526, 61, -2, 0, 0, 0, 0,
	77, 0, 81, 82, 0, 0, 0, 537, 533, 0,
	469, 391, 391, -2, 0, 889, 889, 889, 889, 0,
	958, 956, 0, 0, 0, 0, 0, 0, 513, 0,
	0, 0, 457, 0, 0, 641, 0, 647, 649, 0,
	0, 0, 0, 451, 452, 454, 456, 460, 513, 0,
	527, 278, 249, 524, 251, 391, 391, 316, 0, 0,
	0, 958, 0, 0, 296, 0, 875, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 704, 0, 0, 727, 728, 729, 730, 731,
	732, 733, 740, 92, 647, 0, 884, 0, 0, 700,
	542, 556, 867, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 552, 0, 850, 0,
	0, 0, 0, 0, 0, 777, 0, 778, 779, 780,
	781, 782, 783, 784, 830, 0, 832, 833, 834, 835,
	836, 837, 840, 841, 842, 843, 844, 847, 0, 556,
	0, 0, 392, 356, 414, 358, 399, 400, 359, 360,
	416, 412, 413, 411, 0, 411, 0, 0, 388, 0,
	396, 0, 0, 0, 0, 0, 464, -2, -2, -2,
	-2, 0, 0, 0, -2, 0, 0, -2, 0, 0,
	208, 209, 205, 178, 176, 597, 598, 0, 0, 863,
	0, 160, 28, 1011, 107, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 527, 0, 41, 527,
	0, 73, 74, 526, 62, 80, 0, 0, 531, 539,
	540, 541, 418, 0, 889, 1153, 474, 481, 473, 889,
	0, 477, 890, 891, 478, 479, 480, 0, 482, 0,
	957, 524, 489, 490, 0, 0, 524, 525, 526, 513,
	0, 0, 0, 0, 0, 0, 318, 0, 0, 0,
	646, 1154, 644, 0, 0, 0, 0, 0, 0, 690,
	691, 692, 693, 0, 683, 684, 685, 686, 687, 688,
	689, 648, 0, 673, 0, 0, 0, 641, 461, 0,
	0, 311, 0, 314, 0, 0, 0, 0, 267, 0,
	0, 275, 0, 876, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 724, 844, 735, -2,
	725, 796, 797, 722, 865, 0, 723, 734, 699, 742,
	0, 917, 892, 0, 0, 546, 92, 549, 544, 0,
	0, 0, 0, 558, 564, 560, 0, 862, 864, 0,
	964, 965, -2, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 564, 0, 0, 0, 0, 0, 391, 391,
	801, 391, 395, 804, 805, 806, 391, 809, 811, 812,
	813, 814, 395, 816, 817, 818, 819, 820, 391, 391,
	823, 824, 391, 391, 827, 391, 391, 0, 0, 0,
	0, 0, 0, 553, 858, 853, 0, 0, 860, 0,
	771, 772, 773, 775, 0, 786, 831, 0, 0, 0,
	0, 0, 0, 0, 557, 0, 0, 357, 414, 390,
	414, 402, 403, 0, 0, 0, 0, 0, 639, 0,
	0, 0, 92, 0, 0, 211, 212, 213, 214, 215,
	0, 856, 0, 0, 205, -2, 26, 162, 0, 0,
	31, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 34, 0, 37, 79, 0, 0, 0,
	0, 0, 0, 0, 527, 83, 84, 0, 447, 419,
	0, 421, 0, 439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 470, 471, 0, 475, 889,
	0, 959, 960, 955, 0, 491, 492, 955, 0, 0,
	0, 0, 0, 0, 505, 860, 0, 0, 0, 0,
	418, 498, 0, 642, 643, 645, 677, 0, 679, 681,
	653, 0, 0, 0, 660, 696, 697, 698, 0, 0,
	0, 0, 0, 694, 0, 665, 667, 668, 669, 670,
	0, 0, 0, 675, 676, 0, 528, 0, 312, 0,
	315, 317, 318, -2, 271, 272, 0, 297, 0, 0,
	701, 896, 0, 0, 884, 94, 0, 547, 548, -2,
	552, 550, 551, 543, 743, 0, 0, 569, 749, 561,
	565, 0, 567, 568, 0, 556, 963, 0, 0, 569,
	569, 750, 751, 0, 0, 0, 798, 1153, 411, 802,
	803, 807, 808, 810, 815, 821, 822, 825, 826, 828,
	829, 0, 756, 0, 0, 0, 0, 0, 884, 0,
	854, 0, 0, 769, 770, 776, 838, 839, 0, 0,
	848, 787, 788, 789, 790, 376, 377, 394, 397, 639,
	0, 0, 637, 0, 0, 637, 418, 93, 0, 216,
	0, 0, 0, 599, 20, 179, 0, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 884,
	0, 138, 139, 542, 542, 542, 0, 542, 0, 0,
	0, 126, 0, 0, 849, 929, 98, 99, 200, 201,
	856, 0, 0, -2, 162, 162, -2, 162, 162, 0,
	1012, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 33, 35, 0, 36, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 47, 0, 0, 417,
	0, 422, 0, 0, 0, 425, 0, 440, 427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 392,
	476, 958, 0, 958, 0, 0, 0, 0, 318, 499,
	0, 0, 0, 0, 0, 418, 447, 319, 678, 680,
	682, 654, 0, 656, 0, 658, 0, 661, 694, 666,
	0, 662, 0, 694, 0, 650, 674, 0, 0, 0,
	313, 258, 0, 958, 0, 0, 277, 0, 89, 0,
	0, 893, 885, 886, 889, 892, 92, 554, 545, 744,
	559, 745, 0, 566, 562, 0, 0, 966, -2, 746,
	747, 0, 391, 801, 0, 0, 799, 800, 0, 0,
	0, 0, 0, 0, 851, 768, 859, 0, 845, 846,
	637, 0, 0, 418, 0, 0, 639, 418, 14, -2,
	218, 0, 206, 0, 857, 0, 182, 0, 0, 892,
	0, 941, 0, 0, 114, -2, 116, 0, 0, 976,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 121, 122, 123, 0, 0, 0, 0, 0, 0,
	202, 202, 204, 0, 0, 161, 163, 164, 165, 166,
	-2, -2, -2, 1120, -2, 167, 168, 29, 39, 955,
	0, 0, 0, 65, 67, 0, 0, 38, 0, 0,
	0, 0, 0, 0, 43, 45, 0, 46, 0, 85,
	86, 448, 0, 423, 428, 426, 429, 441, 442, 430,
	431, 432, 433, 434, 435, 436, 443, 444, 437, 438,
	445, 446, 472, 483, 524, 484, 524, 0, 0, 418,
	497, 500, 506, 507, 508, 509, 510, 511, 512, 0,
	0, 447, 955, 647, 647, 647, 663, 0, 695, 664,
	671, 0, 529, 318, 0, 0, 268, 273, 274, 276,
	0, 0, 0, 0, 0, 0, 308, 0, -2, 897,
	0, 0, 0, 0, 888, 896, 95, 0, 555, 0,
	0, 748, 752, 757, 753, 0, 755, 758, 0, 760,
	0, 762, 0, 764, 0, 0, 0, 0, 855, 418,
	637, 418, 447, 638, 0, 637, 447, 18, 0, 217,
	19, 0, 133, 180, 0, 0, 183, 896, 0, 144,
	142, 138, 145, 0, 0, 0, 0, 0, 576, 578,
	579, 580, 612, 0, 614, 0, 0, 0, 120, 613,
	110, 0, 0, 922, 158, 159, 0, 0, 0, -2,
	0, 933, 930, 0, 124, 127, 128, 129, 130, 131,
	0, 198, 203, 0, 0, 206, 958, 418, 418, 54,
	0, 68, 0, 0, 0, 40, 955, 0, 0, 75,
	48, 0, 0, 420, 0, 955, 955, 0, 418, 447,
	501, 503, 494, 958, -2, -2, -2, 672, 0, 259,
	-2, -2, 0, 299, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 0, 894, 895, 887, 90, 574, 570,
	0, 0, 563, 0, 0, 0, 0, 0, 791, 767,
	852, 447, 418, 11, 9, 640, 418, 13, 0, 0,
	134, 184, 181, 197, 0, 0, 0, 0, 108, 0,
	630, -2, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 619, 0, 0, 622, 0, 0, 0, 0,
	0, 0, 633, 0, 615, 0, 617, 618, 117, 612,
	0, 118, 0, 111, 0, 113, 147, 0, 0, 0,
	0, 414, 934, 935, 936, 932, 977, 0, 0, 199,
	0, 49, 447, 447, 66, 69, 71, 53, 958, 418,
	418, 0, 0, 0, 424, 958, 958, 0, 447, 955,
	502, 504, 496, 0, 958, 0, 958, 0, 298, 300,
	309, 0, 898, 637, 0, 0, 572, 754, 759, 761,
	763, 765, 0, 0, 0, 8, 12, 447, 219, 21,
	135, 0, 140, 141, 0, 143, 0, 0, 146, 0,
	0, 629, 637, 0, 637, 574, 919, 0, 577, 608,
	610, 0, 605, 620, 621, 623, 0, 625, 0, 627,
	628, 581, 582, 583, 0, 0, 0, 0, 616, 0,
	923, 112, 0, 0, 150, 151, 924, 925, 926, 0,
	928, 125, 132, 0, 50, 51, 70, 72, 58, 447,
	447, 76, 57, 449, 485, 486, 0, 493, 958, 0,
	264, 0, 266, 0, 0, 877, 575, 0, 881, 883,
	766, 0, 0, 0, 10, 0, 0, 0, 0, 911,
	0, 0, -2, 0, 0, 884, 637, 103, 637, 0,
	0, 602, 609, 0, 0, 603, 0, 604, 624, 626,
	595, 0, 0, 0, 0, 0, 600, -2, 148, 149,
	0, 0, 155, 0, 22, 59, 60, 0, 495, 488,
	955, 955, 310, 879, 0, 571, 0, 0, 792, 0,
	795, 136, 0, 0, 144, 96, 0, 911, 899, 913,
	915, 0, 92, 0, 905, -2, 907, 909, 910, 0,
	892, 102, 884, 920, 921, 606, 0, 611, 0, 0,
	0, 0, 614, 0, 152, 153, 154, 927, 0, 958,
	958, 91, 0, 0, 573, 882, 793, 0, 0, 97,
	0, 916, -2, 0, 0, 0, 109, 101, 892, 0,
	0, 585, 587, 588, 589, 590, 591, 592, 593, 594,
	0, 0, 0, 633, 601, 487, 269, 270, 880, 878,
	0, 0, 0, 914, 0, -2, 0, 906, 908, 100,
	607, 584, 0, 634, 635, 636, 583, 0, 137, 0,
	902, 92, 586, 596, 794, 912, -2,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 401,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 402, 3, 403, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:432
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:437
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:438
		{
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:444
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:450
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 8:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:455
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:475
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:495
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 11:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:516
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 12:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:532
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 13:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:549
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:569
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:584
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:595
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:607
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:618
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:634
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:648
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:662
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:675
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[4].colIdent},
					TableName: yyDollar[8].tableName,
					Time:      yyDollar[5].str,
					Event:     yyDollar[6].strs,
					Body:      yyDollar[12].blockStatement,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:689
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 24:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:700
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: ColumnType{Type: "enum", EnumValues: yyDollar[7].strs},
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:711
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[4].colIdent.String(),
				},
			}
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:721
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:725
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name: yyDollar[4].colIdent.String(),
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:734
		{
			// Convert table names to multiple Grant statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: GrantPrivilege,
					Grant: &Grant{
						IsGrant:    true,
						Privileges: yyDollar[2].strs,
						TableName:  tableName,
						Grantees:   yyDollar[7].strs,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:755
		{
			// Convert table names to multiple Grant statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: GrantPrivilege,
					Grant: &Grant{
						IsGrant:         true,
						Privileges:      yyDollar[2].strs,
						TableName:       tableName,
						Grantees:        yyDollar[7].strs,
						WithGrantOption: true,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:777
		{
			// Convert table names to multiple Revoke statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: RevokePrivilege,
					Grant: &Grant{
						IsGrant:    false,
						Privileges: yyDollar[2].strs,
						TableName:  tableName,
						Grantees:   yyDollar[7].strs,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:798
		{
			// Convert table names to multiple Revoke statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: RevokePrivilege,
					Grant: &Grant{
						IsGrant:       false,
						Privileges:    yyDollar[2].strs,
						TableName:     tableName,
						Grantees:      yyDollar[7].strs,
						CascadeOption: true,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:822
		{
			yyVAL.statement = nil
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:826
		{
			yyVAL.statement = nil
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:830
		{
			yyVAL.statement = nil
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:834
		{
			yyVAL.statement = nil
		}
	case 36:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:838
		{
			yyVAL.statement = nil
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:842
		{
			yyVAL.statement = nil
		}
	case 38:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:846
		{
			yyVAL.statement = nil
		}
	case 39:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:851
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[5].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 40:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:865
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:879
		{
			yyVAL.statement = nil
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:883
		{
			yyVAL.statement = nil
		}
	case 43:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:887
		{
			yyVAL.statement = nil
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:891
		{
			yyVAL.statement = nil
		}
	case 45:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:895
		{
			yyVAL.statement = nil
		}
	case 46:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:899
		{
			yyVAL.statement = nil
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:903
		{
			yyVAL.statement = nil
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:907
		{
			yyVAL.statement = nil
		}
	case 49:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:911
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[11].boolVal),
						InitiallyDeferred: bool(yyDollar[12].boolVal),
					},
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 50:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:930
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Clustered:  true,
					Constraint: true,
					Options:    yyDollar[12].indexOptions,
					Partition:  yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 51:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:948
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Clustered:  false,
					Constraint: true,
					Options:    yyDollar[12].indexOptions,
					Partition:  yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:966
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[3].tableName,
				NewName:    yyDollar[3].tableName,
				ForeignKey: yyDollar[5].foreignKeyDefinition,
			}
		}
	case 53:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:975
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[7].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 54:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:989
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[6].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1003
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    NewColIdent(""),
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1017
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 57:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1026
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 58:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1040
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 59:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1060
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 60:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1078
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1105
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1114
		{
			yyVAL.statement = nil
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1118
		{
			yyVAL.statement = nil
		}
	case 65:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1122
		{
			yyVAL.statement = nil
		}
	case 66:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1126
		{
			yyVAL.statement = nil
		}
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1130
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					Exclusions:     yyDollar[9].exclusionPairs,
				},
			}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1142
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					Exclusions:     yyDollar[9].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 69:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1155
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      "GIST",
					Exclusions:     yyDollar[11].exclusionPairs,
				},
			}
		}
	case 70:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1168
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      "GIST",
					Exclusions:     yyDollar[11].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[13].expr),
				},
			}
		}
	case 71:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1182
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      yyDollar[9].colIdent.String(),
					Exclusions:     yyDollar[11].exclusionPairs,
				},
			}
		}
	case 72:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1195
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      yyDollar[9].colIdent.String(),
					Exclusions:     yyDollar[11].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[13].expr),
				},
			}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1209
		{
			yyVAL.statement = nil
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1213
		{
			yyVAL.statement = nil
		}
	case 75:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1217
		{
			yyVAL.statement = nil
		}
	case 76:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1221
		{
			yyVAL.statement = nil
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1225
		{
			yyVAL.statement = nil
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1229
		{
			yyVAL.statement = nil
		}
	case 79:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1233
		{
			yyVAL.statement = nil
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1237
		{
			yyVAL.statement = nil
		}
	case 81:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1243
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     String(yyDollar[4].tableName),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1254
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     String(yyDollar[4].tableName),
					Comment:    "NULL",
				},
			}
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1265
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].colIdent.String(),
					Comment:    string(yyDollar[8].bytes),
				},
			}
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1276
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].colIdent.String(),
					Comment:    "NULL",
				},
			}
		}
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].tableIdent.String() + "." + yyDollar[8].colIdent.String(),
					Comment:    string(yyDollar[10].bytes),
				},
			}
		}
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1298
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].tableIdent.String() + "." + yyDollar[8].colIdent.String(),
					Comment:    "NULL",
				},
			}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1315
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1323
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 91:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1330
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1336
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1340
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1346
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1350
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 96:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1357
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1369
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1381
		{
			yyVAL.str = InsertStr
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1385
		{
			yyVAL.str = ReplaceStr
		}
	case 100:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1391
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 101:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1397
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 102:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1401
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1405
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1410
		{
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1411
		{
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1415
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1419
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1424
		{
			yyVAL.partitions = nil
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1428
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1434
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1438
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1442
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1446
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1452
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1456
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1469
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1473
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1479
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1484
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1488
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1494
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1501
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1508
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1515
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1523
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1533
		{
			yyVAL.str = ""
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1537
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1541
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1545
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1549
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1555
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1562
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1576
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1580
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1584
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1591
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1599
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1609
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1613
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1620
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1630
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1641
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1646
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1651
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1658
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1662
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1673
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1677
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1683
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1687
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1691
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1697
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1701
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1705
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1709
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1719
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1725
		{
			yyVAL.str = SessionStr
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1729
		{
			yyVAL.str = GlobalStr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1734
		{
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1735
		{
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1739
		{
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1740
		{
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1741
		{
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1742
		{
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1743
		{
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1744
		{
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1745
		{
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1749
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1753
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1757
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1761
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1767
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1775
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1780
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1786
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1790
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1796
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1800
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1805
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1814
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1818
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1827
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1843
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1856
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1866
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1871
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1877
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1878
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1881
		{
			yyVAL.exprs = nil
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1882
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1886
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.empty = struct{}{}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1893
		{
			yyVAL.empty = struct{}{}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1896
		{
			yyVAL.bytes = nil
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1900
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1904
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1909
		{
			yyVAL.bytes = nil
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1913
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1917
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1921
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1925
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1929
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1934
		{
			yyVAL.expr = nil
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1938
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1943
		{
			yyVAL.expr = nil
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1947
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1952
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1956
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1961
		{
			yyVAL.bytes = nil
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1965
		{
			yyVAL.bytes = nil
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1971
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1978
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1984
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1988
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1993
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1997
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2001
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2005
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2009
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2013
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2017
		{
			yyVAL.TableSpec = yyDollar[1].TableSpec
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2024
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2029
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2034
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2040
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2051
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2055
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].colIdent.val) + "." + string(yyDollar[3].colIdent.val)}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2061
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2074
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2079
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2084
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2089
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2095
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2100
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2105
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2110
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2115
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2120
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2125
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2130
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2135
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 259:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2144
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2154
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2159
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2164
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 263:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2171
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 264:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2178
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[10].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[11].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 265:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2187
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 266:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2194
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[10].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[11].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2203
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[4].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[5].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 268:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2210
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[7].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[8].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 269:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:2218
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[12].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[13].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[14].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 270:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:2228
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[12].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[13].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[14].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2239
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2244
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 273:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2249
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 274:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2254
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2260
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 276:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2266
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2273
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2280
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2286
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2292
		{
			// Check if it's a simple value that should be stored as Value
			if val, ok := yyDollar[2].expr.(*SQLVal); ok {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: val}
			} else if val, ok := yyDollar[2].expr.(BoolVal); ok {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: NewBoolSQLVal(bool(val))}
			} else {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
			}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2305
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2309
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2313
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2317
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2321
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2325
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2329
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2333
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2337
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2341
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2345
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2351
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2357
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2363
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2369
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2373
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2378
		{
			yyVAL.sequence = &Sequence{}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2382
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2387
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2392
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2397
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2402
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2407
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2412
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2417
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2422
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2427
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2432
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2437
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2442
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2449
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2453
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2457
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, NewIntVal(yyDollar[3].bytes))
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2461
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2465
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2469
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2473
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2478
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2482
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2487
		{
			yyVAL.bytes = nil
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2496
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2501
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2507
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2515
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2579
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2588
		{
			yyVAL.str = ""
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2592
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2636
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2658
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2662
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2666
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2670
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2674
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2678
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 377:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2736
		{
			yyVAL.str = ""
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2740
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2784
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2789
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2794
		{
			yyVAL.optVal = nil
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2798
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2803
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2807
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2815
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2819
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2825
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2833
		{
			yyVAL.optVal = nil
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2837
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2841
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2850
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2854
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2858
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2863
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2867
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2872
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2876
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2881
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2885
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2889
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2894
		{
			yyVAL.str = ""
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2907
		{
			yyVAL.str = ""
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2911
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2915
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2921
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2926
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2930
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2934
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2940
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2944
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2950
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2954
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2960
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2964
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2969
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2973
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2977
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2981
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2989
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2993
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2997
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3001
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3005
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3013
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3024
		{
			yyVAL.str = ""
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3028
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3034
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3038
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3044
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3048
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3054
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3058
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3064
		{
			yyVAL.indexPartition = nil
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3072
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3078
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3082
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3086
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3090
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3094
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3098
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3102
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3106
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3110
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3114
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3118
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3122
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3128
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3132
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3138
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3143
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3147
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3151
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3161
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3165
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3171
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3176
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: NewIntVal(yyDollar[3].bytes), Direction: yyDollar[5].str}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3181
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3185
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3189
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3197
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3201
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3205
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3219
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[3].boolVal),
				InitiallyDeferred: bool(yyDollar[4].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 483:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3228
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[6].boolVal),
				InitiallyDeferred: bool(yyDollar[7].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 484:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3239
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[6].boolVal),
				InitiallyDeferred: bool(yyDollar[7].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 485:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3250
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[9].boolVal),
				InitiallyDeferred: bool(yyDollar[10].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 486:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3261
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[9].boolVal),
				InitiallyDeferred: bool(yyDollar[10].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 487:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3274
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 488:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3285
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3296
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3300
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3304
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 493:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3314
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 494:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3324
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 495:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3335
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:   yyDollar[6].indexColumns,
				Options:   yyDollar[8].indexOptions,
				Partition: yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{
					Deferrable:        bool(yyDollar[10].boolVal),
					InitiallyDeferred: bool(yyDollar[11].boolVal),
				},
			}
		}
	case 496:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3349
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
				ConstraintOptions: &ConstraintOptions{
					Deferrable:        bool(yyDollar[8].boolVal),
					InitiallyDeferred: bool(yyDollar[9].boolVal),
				},
			}
		}
	case 497:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3364
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 498:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3373
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 499:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3382
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Exclusions:     yyDollar[5].exclusionPairs,
			}
		}
	case 500:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3389
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 501:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3397
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "GIST",
				Exclusions:     yyDollar[7].exclusionPairs,
			}
		}
	case 502:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3405
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "GIST",
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 503:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3414
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
			}
		}
	case 504:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3422
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3443
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: "="}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3447
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: yyDollar[3].colIdent.String()}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3451
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: "&&"}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3455
		{
			// For expressions, we'll use a special column name to indicate it's an expression
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: "="}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3460
		{
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: yyDollar[3].colIdent.String()}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3464
		{
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: "&&"}
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3470
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3474
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3478
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3484
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3488
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3492
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3496
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3500
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3504
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3510
		{
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3511
		{
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3515
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3519
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3524
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3531
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3535
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3542
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3546
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3552
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3556
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3561
		{
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3562
		{
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3566
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3570
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3574
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3580
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3584
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3588
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3593
		{
			setAllowComments(yylex, true)
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3597
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3603
		{
			yyVAL.bytes2 = nil
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3607
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3613
		{
			yyVAL.str = UnionStr
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3617
		{
			yyVAL.str = UnionAllStr
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3621
		{
			yyVAL.str = UnionDistinctStr
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3626
		{
			yyVAL.str = ""
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3630
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3634
		{
			yyVAL.str = SQLCacheStr
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3639
		{
			yyVAL.str = ""
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3643
		{
			yyVAL.str = DistinctStr
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3648
		{
			yyVAL.str = ""
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3652
		{
			yyVAL.str = StraightJoinHint
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3657
		{
			yyVAL.selectExprs = nil
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3661
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3667
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3671
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3677
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3681
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3685
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3689
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3694
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3698
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3702
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3709
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3714
		{
			yyVAL.overExpr = nil
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 571:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3726
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 573:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3730
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3735
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3739
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3745
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3749
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3759
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3763
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3772
		{
			yyVAL.strs = []string{}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3776
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3782
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3786
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3792
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3796
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3800
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3804
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3808
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3812
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3816
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3820
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3826
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 596:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3830
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3836
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3841
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3845
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3851
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3855
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3886
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3888
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3892
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3894
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3898
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3900
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3903
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3905
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3908
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3912
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3916
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3929
		{
			yyVAL.str = JoinStr
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3933
		{
			yyVAL.str = JoinStr
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.str = JoinStr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3943
		{
			yyVAL.str = StraightJoinStr
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3949
		{
			yyVAL.str = LeftJoinStr
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3953
		{
			yyVAL.str = LeftJoinStr
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3957
		{
			yyVAL.str = RightJoinStr
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3961
		{
			yyVAL.str = RightJoinStr
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.str = NaturalJoinStr
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3971
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3981
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3991
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4000
		{
			yyVAL.indexHints = nil
		}
	case 634:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4004
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 635:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4008
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4012
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4017
		{
			yyVAL.expr = nil
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4021
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4026
		{
			yyVAL.columns = nil
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4030
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4036
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4040
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4044
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4048
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4052
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4056
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4060
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4064
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4070
		{
			yyVAL.str = ""
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4074
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4080
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4084
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4090
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4094
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 655:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4098
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, All: true}
		}
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4102
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 657:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4106
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4110
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 659:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4114
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4118
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4122
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 663:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4130
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 664:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4134
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4138
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4146
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixRegexStr, Right: yyDollar[3].expr}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4150
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixRegexCiStr, Right: yyDollar[3].expr}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4154
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixNotRegexStr, Right: yyDollar[3].expr}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4158
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixNotRegexCiStr, Right: yyDollar[3].expr}
		}
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4162
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 672:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4166
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4170
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4175
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4179
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4183
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.str = IsNullStr
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.str = IsNotNullStr
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.str = IsTrueStr
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.str = IsNotTrueStr
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4205
		{
			yyVAL.str = IsFalseStr
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4209
		{
			yyVAL.str = IsNotFalseStr
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.str = EqualStr
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4219
		{
			yyVAL.str = LessThanStr
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4223
		{
			yyVAL.str = GreaterThanStr
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4227
		{
			yyVAL.str = LessEqualStr
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4231
		{
			yyVAL.str = GreaterEqualStr
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4235
		{
			yyVAL.str = NotEqualStr
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4239
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4243
		{
			yyVAL.str = PosixRegexStr
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4247
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4251
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4255
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4260
		{
			yyVAL.expr = nil
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4264
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4270
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4274
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4278
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4284
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4290
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4294
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4300
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4304
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4308
		{
			// PostgreSQL date literal syntax: DATE '2022-01-01'
			// This is syntactic sugar for '2022-01-01', so just use the string value
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4314
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4318
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4322
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4326
		{
			yyVAL.expr = yyDollar[1].arrayConstructor
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4330
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4334
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4338
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4342
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4346
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4350
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4354
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4358
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4362
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4366
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4370
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4374
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4378
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4382
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4386
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4390
		{
			colType := yyDollar[3].columnType
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: &colType}
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4395
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 726:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4399
		{
			timestampType := ColumnType{Type: "timestamp", Timezone: BoolVal(true)}
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: &timestampType}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4404
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4408
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4412
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4420
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4434
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4438
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4442
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4450
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4458
		{
			// Convert ConvertType to ColumnType
			convertType := yyDollar[3].convertType
			colType := ColumnType{
				Type:    convertType.Type,
				Length:  convertType.Length,
				Scale:   convertType.Scale,
				Charset: convertType.Charset,
			}
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: &colType}
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4474
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4478
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4482
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4496
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 745:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4500
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4504
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 747:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4508
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 748:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4512
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4516
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4526
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4530
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 752:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4534
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 753:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4539
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 754:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4543
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 755:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4547
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 756:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4551
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("coalesce"), Exprs: yyDollar[3].selectExprs}
		}
	case 757:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4555
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 758:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4559
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 759:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4563
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 760:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4567
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 761:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4571
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 762:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4575
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 763:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4579
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 764:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4583
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 765:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4587
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 766:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4591
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 767:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4595
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 768:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4599
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 769:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4603
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 770:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4608
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4612
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4616
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4620
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4631
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4635
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4639
		{
			yyVAL.expr = &FuncExpr{
				Name:  NewColIdent("current_timestamp"),
				Exprs: SelectExprs{&AliasedExpr{Expr: NewIntVal(yyDollar[3].bytes)}},
			}
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4646
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4650
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4654
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4659
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4664
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4669
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4674
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4678
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 787:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4692
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4696
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4700
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 790:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4704
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4710
		{
			yyVAL.str = ""
		}
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4714
		{
			yyVAL.str = BooleanModeStr
		}
	case 793:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4718
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 794:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4722
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4726
		{
			yyVAL.str = QueryExpansionStr
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4732
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4736
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4742
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4746
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4750
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4754
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4758
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4768
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4772
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4776
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4780
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4784
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4788
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4792
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4796
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4800
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4804
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4808
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4812
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4816
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4820
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4824
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4828
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4832
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4836
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4840
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4844
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4848
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4852
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4856
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4860
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4864
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4868
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4874
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4878
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4882
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4886
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4890
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4894
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4898
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4902
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4906
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type + "[]"}
		}
	case 839:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4910
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + "[]"}
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4914
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4918
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4922
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4926
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4930
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 845:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4934
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " with time zone"}
		}
	case 846:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4938
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " without time zone"}
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4942
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].colIdent.val}
		}
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4946
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].colIdent.val) + "." + string(yyDollar[3].colIdent.val)}
		}
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4951
		{
			yyVAL.expr = nil
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4955
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4960
		{
			yyVAL.str = string("")
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4964
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4970
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4974
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 855:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4980
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4985
		{
			yyVAL.empty = struct{}{}
		}
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4987
		{
			yyVAL.empty = struct{}{}
		}
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4990
		{
			yyVAL.expr = nil
		}
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4994
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5000
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5004
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5008
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 863:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5012
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5018
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5024
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5028
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5033
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5038
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5042
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5046
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5050
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5054
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5058
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5062
		{
			yyVAL.expr = &NullVal{}
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5068
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5072
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5077
		{
			yyVAL.exprs = nil
		}
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5081
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5086
		{
			yyVAL.expr = nil
		}
	case 880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5090
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5096
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5100
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5106
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 884:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5111
		{
			yyVAL.orderBy = nil
		}
	case 885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5115
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5121
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5125
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5131
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5136
		{
			yyVAL.str = AscScr
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5140
		{
			yyVAL.str = AscScr
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5144
		{
			yyVAL.str = DescScr
		}
	case 892:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5149
		{
			yyVAL.limit = nil
		}
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5153
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 894:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5157
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 895:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5161
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5166
		{
			yyVAL.str = ""
		}
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5170
		{
			yyVAL.str = ForUpdateStr
		}
	case 898:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5174
		{
			yyVAL.str = ShareModeStr
		}
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5187
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5191
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5195
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 902:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5200
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 903:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5204
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 904:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5208
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5215
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5219
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5225
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5229
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5233
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5237
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 911:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5242
		{
			yyVAL.updateExprs = nil
		}
	case 912:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5246
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5252
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5256
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5262
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5266
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5272
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5278
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5288
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 920:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5292
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5298
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5304
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5308
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5314
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5318
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 926:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5322
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 927:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5327
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 928:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5331
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5337
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 930:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5343
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5350
		{
			yyVAL.bytes = []byte("charset")
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5357
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5361
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5365
		{
			yyVAL.expr = &Default{}
		}
	case 937:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5370
		{
			yyVAL.empty = struct{}{}
		}
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5372
		{
			yyVAL.empty = struct{}{}
		}
	case 939:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5375
		{
			yyVAL.empty = struct{}{}
		}
	case 940:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5377
		{
			yyVAL.empty = struct{}{}
		}
	case 941:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5380
		{
			yyVAL.str = ""
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5382
		{
			yyVAL.str = IgnoreStr
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5386
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5390
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5397
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5401
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5405
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5409
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5415
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5419
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5424
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5431
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5437
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5441
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 957:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5445
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 958:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5451
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 959:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5455
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 960:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5459
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 961:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5465
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5469
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 963:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5476
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5480
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: nil}
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5487
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5491
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5498
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5502
		{
			yyVAL.arrayElement = NewIntVal(yyDollar[1].bytes)
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5506
		{
			yyVAL.arrayElement = NewFloatVal(yyDollar[1].bytes)
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5510
		{
			yyVAL.arrayElement = NewHexNum(yyDollar[1].bytes)
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5514
		{
			yyVAL.arrayElement = NewValArg(yyDollar[1].bytes)
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5518
		{
			yyVAL.arrayElement = &NullVal{}
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5522
		{
			yyVAL.arrayElement = BoolVal(true)
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5526
		{
			yyVAL.arrayElement = BoolVal(false)
		}
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5530
		{
			// Convert ConvertType to ColumnType
			convertType := yyDollar[3].convertType
			colType := ColumnType{
				Type:    convertType.Type,
				Length:  convertType.Length,
				Scale:   convertType.Scale,
				Charset: convertType.Charset,
			}
			yyVAL.arrayElement = &CastExpr{Expr: yyDollar[1].expr, Type: &colType}
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5544
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 977:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5548
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5577
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5581
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5585
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5589
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5593
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5597
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5601
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5605
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 1007:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5609
		{
			yyVAL.str = "ALL PRIVILEGES"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5613
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5619
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 1010:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5623
		{
			yyVAL.strs = append(yyVAL.strs, yyDollar[3].str)
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5629
		{
			yyVAL.strs = []string{yyDollar[1].colIdent.String()}
		}
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5633
		{
			yyVAL.strs = append(yyVAL.strs, yyDollar[3].colIdent.String())
		}
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5790
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5799
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
