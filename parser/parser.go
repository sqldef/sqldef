// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const GRANT = 57457
const REVOKE = 57458
const OPTION = 57459
const PRIVILEGES = 57460
const SCHEMA = 57461
const TABLE = 57462
const INDEX = 57463
const MATERIALIZED = 57464
const VIEW = 57465
const TO = 57466
const IGNORE = 57467
const IF = 57468
const PRIMARY = 57469
const COLUMN = 57470
const CONSTRAINT = 57471
const REFERENCES = 57472
const SPATIAL = 57473
const FULLTEXT = 57474
const FOREIGN = 57475
const KEY_BLOCK_SIZE = 57476
const POLICY = 57477
const WHILE = 57478
const EXCLUDE = 57479
const GIST = 57480
const UNIQUE = 57481
const KEY = 57482
const SHOW = 57483
const DESCRIBE = 57484
const EXPLAIN = 57485
const DATE = 57486
const ESCAPE = 57487
const REPAIR = 57488
const OPTIMIZE = 57489
const TRUNCATE = 57490
const EXEC = 57491
const EXECUTE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const TYPE = 57500
const RETURN = 57501
const EXTENSION = 57502
const DATA = 57503
const STATUS = 57504
const VARIABLES = 57505
const RESTRICT = 57506
const CASCADE = 57507
const NO = 57508
const ACTION = 57509
const PERMISSIVE = 57510
const RESTRICTIVE = 57511
const PUBLIC = 57512
const CURRENT_USER = 57513
const SESSION_USER = 57514
const PAD_INDEX = 57515
const FILLFACTOR = 57516
const IGNORE_DUP_KEY = 57517
const STATISTICS_NORECOMPUTE = 57518
const STATISTICS_INCREMENTAL = 57519
const ALLOW_ROW_LOCKS = 57520
const ALLOW_PAGE_LOCKS = 57521
const DISTANCE = 57522
const M = 57523
const EUCLIDEAN = 57524
const COSINE = 57525
const BEFORE = 57526
const AFTER = 57527
const EACH = 57528
const ROW = 57529
const SCROLL = 57530
const CURSOR = 57531
const OPEN = 57532
const CLOSE = 57533
const FETCH = 57534
const PRIOR = 57535
const FIRST = 57536
const LAST = 57537
const DEALLOCATE = 57538
const INSTEAD = 57539
const OF = 57540
const OUTPUT = 57541
const DEFERRABLE = 57542
const INITIALLY = 57543
const IMMEDIATE = 57544
const DEFERRED = 57545
const CONCURRENTLY = 57546
const SQL = 57547
const SECURITY = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const BIT = 57554
const TINYINT = 57555
const SMALLINT = 57556
const SMALLSERIAL = 57557
const MEDIUMINT = 57558
const INT = 57559
const INTEGER = 57560
const SERIAL = 57561
const BIGINT = 57562
const BIGSERIAL = 57563
const INTNUM = 57564
const REAL = 57565
const DOUBLE = 57566
const PRECISION = 57567
const FLOAT_TYPE = 57568
const DECIMAL = 57569
const NUMERIC = 57570
const SMALLMONEY = 57571
const MONEY = 57572
const TIME = 57573
const TIMESTAMP = 57574
const DATETIME = 57575
const YEAR = 57576
const DATETIMEOFFSET = 57577
const DATETIME2 = 57578
const SMALLDATETIME = 57579
const CHAR = 57580
const VARCHAR = 57581
const VARYING = 57582
const BOOL = 57583
const CHARACTER = 57584
const VARBINARY = 57585
const NCHAR = 57586
const NVARCHAR = 57587
const NTEXT = 57588
const UUID = 57589
const TEXT = 57590
const TINYTEXT = 57591
const MEDIUMTEXT = 57592
const LONGTEXT = 57593
const CITEXT = 57594
const BLOB = 57595
const TINYBLOB = 57596
const MEDIUMBLOB = 57597
const LONGBLOB = 57598
const JSON = 57599
const JSONB = 57600
const ENUM = 57601
const GEOMETRY = 57602
const POINT = 57603
const LINESTRING = 57604
const POLYGON = 57605
const GEOMETRYCOLLECTION = 57606
const MULTIPOINT = 57607
const MULTILINESTRING = 57608
const MULTIPOLYGON = 57609
const VECTOR = 57610
const VARIADIC = 57611
const ARRAY = 57612
const NOW = 57613
const GETDATE = 57614
const BPCHAR = 57615
const TEXT_PATTERN_OPS = 57616
const NULLX = 57617
const AUTO_INCREMENT = 57618
const APPROXNUM = 57619
const SIGNED = 57620
const UNSIGNED = 57621
const ZEROFILL = 57622
const ZONE = 57623
const AUTOINCREMENT = 57624
const DATABASES = 57625
const TABLES = 57626
const VSCHEMA_TABLES = 57627
const EXTENDED = 57628
const FULL = 57629
const PROCESSLIST = 57630
const NAMES = 57631
const CHARSET = 57632
const GLOBAL = 57633
const SESSION = 57634
const ISOLATION = 57635
const LEVEL = 57636
const READ = 57637
const WRITE = 57638
const ONLY = 57639
const REPEATABLE = 57640
const COMMITTED = 57641
const UNCOMMITTED = 57642
const SERIALIZABLE = 57643
const NEW = 57644
const CONCAT_NULL_YIELDS_NULL = 57645
const CURSOR_CLOSE_ON_COMMIT = 57646
const QUOTED_IDENTIFIER = 57647
const ARITHABORT = 57648
const FMTONLY = 57649
const NOCOUNT = 57650
const NOEXEC = 57651
const NUMERIC_ROUNDABORT = 57652
const ANSI_DEFAULTS = 57653
const ANSI_NULL_DFLT_OFF = 57654
const ANSI_NULL_DFLT_ON = 57655
const ANSI_NULLS = 57656
const ANSI_PADDING = 57657
const ANSI_WARNINGS = 57658
const FORCEPLAN = 57659
const SHOWPLAN_ALL = 57660
const SHOWPLAN_TEXT = 57661
const SHOWPLAN_XML = 57662
const IMPLICIT_TRANSACTIONS = 57663
const REMOTE_PROC_TRANSACTIONS = 57664
const XACT_ABORT = 57665
const CURRENT_TIMESTAMP = 57666
const DATABASE = 57667
const CURRENT_DATE = 57668
const CURRENT_TIME = 57669
const LOCALTIME = 57670
const LOCALTIMESTAMP = 57671
const UTC_DATE = 57672
const UTC_TIME = 57673
const UTC_TIMESTAMP = 57674
const REPLACE = 57675
const CONVERT = 57676
const CAST = 57677
const COALESCE = 57678
const SUBSTR = 57679
const SUBSTRING = 57680
const GROUP_CONCAT = 57681
const SEPARATOR = 57682
const INHERIT = 57683
const LEAD = 57684
const LAG = 57685
const MATCH = 57686
const AGAINST = 57687
const BOOLEAN = 57688
const LANGUAGE = 57689
const WITH = 57690
const WITHOUT = 57691
const PARSER = 57692
const QUERY = 57693
const EXPANSION = 57694
const UNUSED = 57695
const VIRTUAL = 57696
const STORED = 57697
const GENERATED = 57698
const ALWAYS = 57699
const IDENTITY = 57700
const SEQUENCE = 57701
const INCREMENT = 57702
const MINVALUE = 57703
const CACHE = 57704
const CYCLE = 57705
const OWNED = 57706
const NONE = 57707
const CLUSTERED = 57708
const NONCLUSTERED = 57709
const REPLICATION = 57710
const COLUMNSTORE = 57711
const INCLUDE = 57712
const HOLDLOCK = 57713
const NOLOCK = 57714
const NOWAIT = 57715
const PAGLOCK = 57716
const ROWLOCK = 57717
const TABLOCK = 57718
const UPDLOCK = 57719
const READUNCOMMITTED = 57720
const DEFINER = 57721
const INVOKER = 57722
const TYPECAST = 57723
const CHECK = 57724
const OVER = 57725

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"GRANT",
	"REVOKE",
	"OPTION",
	"PRIVILEGES",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"EXCLUDE",
	"GIST",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"EXTENSION",
	"DATA",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"COALESCE",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 7,
	138, 517,
	-2, 222,
	-1, 212,
	123, 943,
	-2, 936,
	-1, 213,
	123, 944,
	-2, 854,
	-1, 366,
	58, 514,
	-2, 1123,
	-1, 373,
	61, 463,
	-2, 1068,
	-1, 374,
	61, 464,
	-2, 1075,
	-1, 455,
	123, 947,
	-2, 941,
	-1, 456,
	123, 944,
	-2, 942,
	-1, 502,
	61, 463,
	-2, 460,
	-1, 525,
	218, 948,
	-2, 261,
	-1, 555,
	123, 945,
	-2, 858,
	-1, 675,
	138, 221,
	157, 221,
	-2, 1123,
	-1, 693,
	123, 944,
	-2, 392,
	-1, 853,
	60, 466,
	-2, 882,
	-1, 854,
	60, 467,
	-2, 882,
	-1, 855,
	60, 468,
	-2, 882,
	-1, 856,
	60, 469,
	-2, 882,
	-1, 860,
	5, 92,
	-2, 15,
	-1, 863,
	5, 92,
	-2, 17,
	-1, 1005,
	403, 835,
	-2, 392,
	-1, 1039,
	59, 960,
	123, 945,
	403, 960,
	-2, 858,
	-1, 1040,
	59, 961,
	403, 961,
	-2, 863,
	-1, 1041,
	59, 962,
	403, 962,
	-2, 864,
	-1, 1042,
	59, 963,
	403, 963,
	-2, 865,
	-1, 1043,
	59, 964,
	403, 964,
	-2, 866,
	-1, 1044,
	59, 965,
	403, 965,
	-2, 867,
	-1, 1045,
	59, 966,
	403, 966,
	-2, 652,
	-1, 1046,
	59, 967,
	403, 967,
	-2, 653,
	-1, 1139,
	119, 412,
	120, 412,
	-2, 24,
	-1, 1257,
	218, 948,
	-2, 262,
	-1, 1273,
	5, 93,
	-2, 700,
	-1, 1394,
	60, 162,
	-2, 938,
	-1, 1397,
	60, 162,
	-2, 279,
	-1, 1519,
	59, 968,
	403, 968,
	-2, 736,
	-1, 1548,
	5, 92,
	-2, 16,
	-1, 1564,
	206, 119,
	-2, 613,
	-1, 1609,
	32, 243,
	60, 162,
	71, 243,
	144, 243,
	146, 243,
	147, 243,
	287, 243,
	399, 243,
	402, 243,
	-2, 938,
	-1, 1610,
	161, 1016,
	229, 1016,
	230, 1016,
	231, 1016,
	232, 1016,
	233, 1016,
	234, 1016,
	235, 1016,
	236, 1016,
	237, 1016,
	238, 1016,
	240, 1016,
	241, 1016,
	243, 1016,
	244, 1016,
	245, 1016,
	246, 1016,
	247, 1016,
	248, 1016,
	249, 1016,
	250, 1016,
	251, 1016,
	252, 1016,
	253, 1016,
	254, 1016,
	255, 1016,
	256, 1016,
	258, 1016,
	259, 1016,
	260, 1016,
	261, 1016,
	262, 1016,
	263, 1016,
	264, 1016,
	265, 1016,
	266, 1016,
	267, 1016,
	268, 1016,
	269, 1016,
	270, 1016,
	271, 1016,
	272, 1016,
	273, 1016,
	274, 1016,
	275, 1016,
	276, 1016,
	277, 1016,
	278, 1016,
	279, 1016,
	280, 1016,
	281, 1016,
	282, 1016,
	283, 1016,
	284, 1016,
	285, 1016,
	363, 1016,
	-2, 392,
	-1, 1612,
	161, 1071,
	229, 1071,
	230, 1071,
	231, 1071,
	232, 1071,
	233, 1071,
	234, 1071,
	235, 1071,
	236, 1071,
	237, 1071,
	238, 1071,
	240, 1071,
	241, 1071,
	243, 1071,
	244, 1071,
	245, 1071,
	246, 1071,
	247, 1071,
	248, 1071,
	249, 1071,
	250, 1071,
	251, 1071,
	252, 1071,
	253, 1071,
	254, 1071,
	255, 1071,
	256, 1071,
	258, 1071,
	259, 1071,
	260, 1071,
	261, 1071,
	262, 1071,
	263, 1071,
	264, 1071,
	265, 1071,
	266, 1071,
	267, 1071,
	268, 1071,
	269, 1071,
	270, 1071,
	271, 1071,
	272, 1071,
	273, 1071,
	274, 1071,
	275, 1071,
	276, 1071,
	277, 1071,
	278, 1071,
	279, 1071,
	280, 1071,
	281, 1071,
	282, 1071,
	283, 1071,
	284, 1071,
	285, 1071,
	363, 1071,
	-2, 354,
	-1, 1787,
	90, 939,
	-2, 924,
	-1, 1832,
	105, 743,
	106, 743,
	107, 743,
	108, 743,
	109, 743,
	110, 743,
	111, 743,
	112, 743,
	113, 743,
	114, 743,
	115, 743,
	116, 743,
	119, 743,
	398, 743,
	-2, 656,
	-1, 1833,
	105, 743,
	106, 743,
	107, 743,
	108, 743,
	109, 743,
	110, 743,
	111, 743,
	112, 743,
	113, 743,
	114, 743,
	115, 743,
	116, 743,
	119, 743,
	398, 743,
	-2, 658,
	-1, 1834,
	105, 743,
	106, 743,
	107, 743,
	108, 743,
	109, 743,
	110, 743,
	111, 743,
	112, 743,
	113, 743,
	114, 743,
	115, 743,
	116, 743,
	119, 743,
	398, 743,
	-2, 660,
	-1, 1838,
	218, 948,
	-2, 263,
	-1, 1839,
	218, 948,
	-2, 265,
	-1, 1889,
	57, 106,
	59, 106,
	-2, 108,
	-1, 2080,
	5, 92,
	-2, 893,
	-1, 2105,
	5, 92,
	-2, 115,
	-1, 2143,
	59, 1111,
	60, 1111,
	-2, 543,
	-1, 2180,
	5, 93,
	-2, 894,
	-1, 2213,
	5, 92,
	-2, 896,
	-1, 2234,
	5, 93,
	-2, 897,
}

const yyPrivate = 57344

const yyLast = 16478

var yyAct = [...]int16{
	557, 536, 2003, 2189, 2136, 61, 2098, 2021, 776, 43,
	43, 2142, 569, 2137, 1265, 870, 58, 1910, 2133, 1359,
	774, 2066, 208, 209, 210, 1249, 2004, 1430, 2090, 1924,
	2103, 1355, 1971, 1923, 1781, 616, 1898, 1912, 1372, 1373,
	1175, 1358, 1766, 1908, 745, 1749, 1019, 924, 1757, 1767,
	1108, 1568, 1772, 1778, 1565, 1997, 249, 249, 249, 1504,
	1775, 464, 1799, 1207, 1644, 48, 1482, 1499, 1208, 927,
	243, 1343, 494, 1215, 1653, 1352, 217, 1024, 1054, 851,
	1006, 244, 798, 1038, 250, 1284, 1089, 1228, 1135, 1092,
	503, 1030, 1512, 497, 700, 814, 690, 245, 357, 917,
	233, 430, 236, 237, 454, 715, 658, 1398, 624, 445,
	878, 1026, 446, 539, 533, 377, 468, 352, 1605, 211,
	627, 1331, 425, 54, 806, 322, 1330, 947, 1291, 401,
	604, 1105, 540, 1104, 786, 396, 13, 1513, 1163, 392,
	1112, 1730, 947, 884, 221, 44, 223, 224, 951, 953,
	1876, 959, 761, 886, 1344, 883, 728, 960, 961, 962,
	963, 964, 965, 966, 225, 952, 954, 950, 955, 956,
	957, 958, 749, 748, 758, 759, 751, 752, 753, 754,
	755, 756, 757, 750, 441, 442, 761, 749, 748, 758,
	759, 751, 752, 753, 754, 755, 756, 757, 750, 1418,
	933, 761, 731, 313, 316, 317, 505, 506, 529, 226,
	227, 2232, 328, 2190, 2191, 2192, 2193, 2194, 2195, 2196,
	2197, 2128, 333, 986, 335, 2225, 1848, 750, 1370, 707,
	761, 43, 1146, 371, 951, 953, 2071, 959, 1434, 710,
	1435, 708, 58, 960, 961, 962, 963, 964, 965, 966,
	395, 952, 954, 950, 955, 956, 957, 958, 749, 748,
	758, 759, 751, 752, 753, 754, 755, 756, 757, 750,
	354, 1172, 761, 501, 1695, 1696, 1143, 336, 2099, 751,
	752, 753, 754, 755, 756, 757, 750, 344, 345, 761,
	2208, 349, 749, 748, 758, 759, 751, 752, 753, 754,
	755, 756, 757, 750, 1356, 1746, 761, 753, 754, 755,
	756, 757, 750, 1258, 1259, 761, 436, 1263, 944, 943,
	2127, 746, 628, 629, 1534, 318, 2049, 320, 1942, 508,
	58, 2070, 249, 1468, 783, 455, 945, 1735, 462, 228,
	55, 2109, 334, 2162, 2108, 2032, 2033, 2110, 1706, 355,
	502, 44, 58, 2163, 2164, 2031, 606, 738, 781, 44,
	1387, 1376, 1375, 44, 1932, 498, 747, 435, 1116, 504,
	1115, 439, 1377, 443, 444, 1925, 398, 1926, 1676, 519,
	451, 1164, 911, 505, 506, 1378, 570, 463, 1674, 1528,
	465, 412, 465, 44, 44, 45, 1931, 1103, 885, 483,
	607, 466, 459, 411, 413, 414, 415, 416, 1981, 735,
	432, 737, 736, 749, 748, 758, 759, 751, 752, 753,
	754, 755, 756, 757, 750, 44, 405, 761, 314, 429,
	404, 760, 1498, 44, 44, 636, 1847, 461, 1849, 470,
	1879, 525, 843, 508, 428, 781, 44, 872, 842, 620,
	621, 622, 623, 1673, 452, 946, 1307, 1409, 1305, 523,
	44, 1802, 1287, 1671, 34, 760, 1552, 319, 58, 925,
	661, 205, 1290, 1104, 926, 663, 664, 665, 666, 667,
	760, 58, 760, 648, 709, 680, 635, 1211, 684, 58,
	639, 640, 945, 462, 691, 1371, 450, 508, 1196, 1195,
	219, 1918, 216, 1542, 1803, 1383, 1603, 733, 1551, 760,
	702, 918, 919, 1351, 1654, 1655, 1634, 730, 1389, 1390,
	1200, 722, 866, 867, 1419, 1420, 1949, 626, 1385, 748,
	758, 759, 751, 752, 753, 754, 755, 756, 757, 750,
	987, 630, 761, 609, 1965, 1216, 611, 1435, 614, 615,
	633, 760, 1594, 206, 1808, 1414, 1998, 1147, 1148, 1379,
	1380, 1382, 650, 944, 943, 1381, 528, 943, 760, 702,
	1143, 2210, 1636, 1416, 1149, 657, 1556, 649, 669, 674,
	706, 945, 1142, 1777, 945, 760, 323, 412, 672, 659,
	711, 197, 685, 315, 760, 505, 506, 670, 1685, 353,
	500, 45, 509, 511, 1463, 681, 727, 688, 660, 45,
	729, 946, 935, 45, 198, 913, 1165, 194, 199, 200,
	741, 1840, 930, 749, 748, 758, 759, 751, 752, 753,
	754, 755, 756, 757, 750, 732, 1462, 761, 691, 1732,
	934, 2069, 1963, 45, 45, 829, 701, 831, 516, 871,
	834, 835, 58, 662, 877, 879, 522, 879, 521, 882,
	499, 1493, 860, 1955, 863, 676, 773, 702, 1689, 892,
	453, 474, 58, 1982, 895, 45, 1428, 896, 897, 898,
	947, 819, 1659, 45, 45, 408, 702, 58, 410, 944,
	943, 857, 490, 1144, 820, 338, 45, 1538, 740, 868,
	946, 1161, 1388, 946, 2226, 701, 760, 945, 880, 899,
	45, 1166, 2129, 473, 691, 808, 809, 810, 811, 812,
	813, 702, 1595, 1596, 1597, 749, 748, 758, 759, 751,
	752, 753, 754, 755, 756, 757, 750, 201, 513, 761,
	1697, 871, 888, 44, 558, 1011, 556, 560, 561, 562,
	563, 830, 1710, 1554, 559, 564, 983, 514, 1167, 873,
	869, 876, 862, 1776, 1994, 1012, 1012, 881, 324, 325,
	928, 929, 931, 1014, 932, 1817, 668, 893, 900, 894,
	473, 326, 1422, 777, 215, 58, 58, 1723, 947, 984,
	455, 1029, 510, 1709, 944, 943, 920, 921, 922, 936,
	1023, 1095, 1094, 701, 51, 1154, 976, 944, 943, 944,
	943, 504, 945, 944, 943, 1913, 1654, 1655, 1128, 974,
	1020, 760, 701, 642, 512, 945, 946, 945, 973, 687,
	477, 945, 1423, 1028, 478, 195, 196, 889, 1048, 1050,
	1051, 1052, 1002, 891, 1085, 1005, 484, 1088, 1701, 691,
	1120, 219, 969, 1915, 207, 1155, 1004, 701, 820, 871,
	691, 677, 678, 1703, 942, 947, 1111, 475, 476, 219,
	777, 216, 777, 238, 1124, 1106, 655, 1109, 1110, 1010,
	1013, 239, 1126, 2102, 890, 973, 1086, 1087, 691, 507,
	2101, 249, 1160, 2100, 1162, 204, 1298, 203, 1297, 202,
	1168, 510, 339, 1121, 1171, 1698, 947, 47, 49, 337,
	691, 1615, 51, 235, 554, 1127, 760, 222, 944, 943,
	504, 2022, 2024, 231, 58, 944, 943, 1138, 1119, 1424,
	212, 946, 216, 1400, 679, 730, 945, 1107, 479, 1209,
	1212, 691, 197, 945, 946, 50, 946, 1315, 347, 348,
	946, 777, 1156, 2183, 920, 921, 922, 2062, 654, 1911,
	197, 1159, 1238, 1229, 1928, 198, 764, 765, 194, 199,
	200, 1718, 1095, 1246, 1858, 1288, 58, 1621, 923, 1495,
	481, 482, 1114, 198, 480, 903, 194, 199, 200, 785,
	1708, 784, 875, 45, 651, 487, 944, 943, 944, 943,
	1197, 944, 943, 399, 332, 1201, 1189, 329, 777, 2023,
	1190, 837, 215, 1429, 945, 1192, 945, 902, 760, 945,
	486, 197, 618, 617, 1842, 2111, 1204, 905, 1203, 746,
	2088, 1927, 1286, 1262, 758, 759, 751, 752, 753, 754,
	755, 756, 757, 750, 198, 739, 761, 194, 199, 200,
	1286, 1449, 1448, 1447, 554, 946, 1446, 1699, 1700, 1702,
	1704, 1705, 946, 554, 554, 554, 554, 554, 554, 554,
	838, 1445, 508, 746, 747, 219, 779, 216, 1279, 782,
	471, 467, 469, 1230, 1444, 1443, 473, 1442, 201, 1441,
	777, 1440, 472, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 1883, 800, 201, 802, 803, 804,
	805, 807, 807, 807, 807, 807, 807, 807, 747, 824,
	825, 826, 827, 1438, 691, 1034, 1035, 1884, 1536, 58,
	341, 342, 343, 946, 340, 946, 1353, 1354, 946, 1193,
	1322, 1093, 1394, 496, 1401, 1425, 691, 691, 1336, 1202,
	1337, 330, 1209, 1410, 1350, 11, 1645, 1093, 944, 943,
	1325, 1304, 1157, 861, 985, 861, 197, 201, 249, 1637,
	1635, 1308, 1198, 495, 496, 1645, 945, 1646, 1791, 1638,
	45, 1324, 1913, 944, 943, 518, 195, 196, 1633, 198,
	1968, 1415, 194, 199, 200, 1426, 1646, 496, 496, 777,
	1413, 945, 1199, 1345, 195, 196, 691, 1236, 1509, 1169,
	7, 10, 1158, 782, 1432, 1408, 8, 9, 219, 1170,
	1915, 1234, 1235, 1233, 1469, 1470, 1471, 1391, 1220, 1222,
	1223, 937, 938, 1846, 1656, 682, 1221, 508, 1427, 517,
	968, 970, 971, 972, 779, 683, 1229, 1254, 1231, 1252,
	1269, 947, 608, 613, 1253, 1647, 1101, 612, 1643, 608,
	1393, 1191, 1118, 1117, 1194, 195, 196, 989, 634, 632,
	554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
	554, 554, 631, 603, 1868, 1007, 1286, 1008, 1439, 58,
	763, 1507, 1452, 1451, 455, 946, 1454, 508, 783, 1113,
	901, 779, 783, 625, 524, 1020, 1436, 389, 554, 197,
	1136, 947, 201, 392, 393, 1506, 1250, 2220, 2219, 947,
	946, 1478, 1136, 2218, 1738, 760, 1489, 2203, 2161, 947,
	1492, 1245, 198, 2182, 947, 194, 199, 200, 380, 1489,
	2117, 1604, 691, 691, 909, 2050, 1895, 947, 2134, 2125,
	947, 2087, 1494, 387, 836, 375, 909, 1948, 909, 1947,
	1545, 1508, 726, 376, 909, 1945, 1230, 1461, 1944, 1535,
	1548, 1514, 1511, 725, 1002, 1518, 1522, 1005, 1564, 1525,
	1590, 1591, 1592, 861, 724, 1599, 1520, 1521, 1519, 1557,
	820, 1461, 1943, 1516, 1529, 1394, 1394, 1394, 1609, 1394,
	1394, 1517, 1892, 1136, 1873, 691, 691, 691, 781, 723,
	195, 196, 1539, 1461, 947, 249, 712, 1558, 691, 691,
	515, 1540, 909, 1826, 1489, 1825, 383, 1497, 378, 388,
	1822, 1821, 1639, 909, 1814, 2078, 1642, 1491, 385, 384,
	2079, 909, 1813, 1527, 909, 1807, 2087, 212, 1893, 216,
	655, 2178, 1560, 1561, 1562, 201, 1566, 58, 691, 1450,
	508, 777, 1209, 1672, 1675, 1209, 1209, 1602, 1601, 1250,
	1340, 554, 1232, 1339, 554, 1641, 554, 554, 554, 554,
	554, 554, 1665, 909, 1806, 1625, 1467, 909, 1805, 567,
	58, 1338, 861, 909, 1739, 1680, 1972, 1763, 1251, 777,
	1661, 1255, 1663, 909, 1667, 1461, 1622, 1648, 1649, 1650,
	1651, 1652, 214, 218, 1606, 1607, 1608, 1613, 1614, 909,
	1617, 1713, 1122, 1662, 1658, 1664, 909, 1616, 1677, 1678,
	1670, 1280, 947, 1668, 1489, 1488, 1020, 218, 197, 218,
	218, 844, 1694, 1270, 2087, 871, 1684, 219, 1285, 216,
	1660, 1687, 833, 195, 196, 781, 1289, 909, 1466, 1894,
	1742, 198, 909, 1411, 194, 199, 200, 58, 909, 1347,
	1136, 1346, 2001, 1755, 655, 381, 832, 554, 777, 1758,
	1280, 382, 828, 1748, 44, 1895, 1287, 2212, 1752, 1900,
	1903, 1904, 1905, 1901, 1792, 1902, 1906, 1017, 1759, 2091,
	2092, 1760, 944, 943, 1543, 1712, 1765, 508, 1800, 1800,
	1394, 1017, 947, 1895, 465, 1136, 1257, 1743, 1489, 1547,
	945, 909, 1214, 1764, 1209, 1209, 1762, 691, 551, 1034,
	691, 691, 1790, 840, 1139, 249, 909, 908, 197, 1015,
	1016, 1018, 847, 846, 840, 841, 840, 839, 241, 240,
	1972, 1895, 1550, 1320, 1489, 390, 1137, 391, 2030, 781,
	1555, 198, 1318, 1801, 194, 199, 200, 1097, 1098, 1099,
	1100, 874, 1102, 656, 647, 646, 554, 232, 647, 229,
	230, 386, 230, 1920, 201, 1773, 1711, 1810, 1811, 1280,
	647, 1299, 1152, 1151, 311, 1770, 1136, 45, 1280, 909,
	988, 1319, 777, 845, 777, 1818, 777, 1830, 508, 653,
	1317, 508, 1804, 2156, 218, 2154, 1289, 939, 508, 58,
	2134, 655, 849, 848, 218, 218, 2115, 1961, 218, 350,
	1819, 782, 418, 1464, 1465, 1823, 401, 1824, 1679, 946,
	852, 1630, 1836, 1841, 1843, 1844, 1845, 1473, 1475, 1477,
	242, 1629, 312, 1626, 779, 1232, 554, 554, 554, 1624,
	554, 1623, 1838, 1839, 1859, 1837, 1856, 1544, 1872, 2091,
	2092, 1854, 1875, 1457, 1917, 1831, 249, 1456, 1421, 1417,
	58, 1855, 195, 196, 201, 1406, 1405, 1930, 1882, 1404,
	1342, 1341, 861, 431, 1261, 1205, 1150, 1250, 1145, 1900,
	1903, 1904, 1905, 1901, 218, 1902, 1906, 1885, 218, 1141,
	218, 218, 1123, 554, 1740, 1888, 1889, 218, 1744, 457,
	691, 1951, 457, 1881, 218, 1890, 981, 218, 1916, 218,
	1690, 1907, 980, 1921, 45, 978, 218, 1247, 1248, 554,
	554, 554, 554, 1934, 1936, 975, 1919, 1256, 1938, 940,
	1546, 887, 1939, 859, 858, 1957, 713, 1750, 652, 1751,
	637, 426, 1555, 1952, 530, 526, 493, 433, 434, 1431,
	424, 861, 417, 548, 406, 15, 2094, 850, 218, 1960,
	638, 438, 195, 196, 437, 1966, 327, 1967, 1273, 321,
	52, 1278, 1716, 1281, 1282, 1095, 2005, 1983, 550, 2017,
	2015, 1904, 1905, 1797, 1770, 2016, 1600, 1784, 2097, 1946,
	2096, 2012, 2011, 1293, 2174, 1294, 1295, 1296, 1953, 1954,
	2126, 58, 1990, 218, 1993, 1760, 2013, 218, 218, 58,
	1023, 2014, 1991, 1962, 1964, 2002, 58, 1970, 2006, 1827,
	1999, 2009, 1851, 2018, 554, 2000, 2007, 2008, 801, 2010,
	1316, 2026, 485, 1321, 492, 2028, 2029, 1275, 1276, 1327,
	1933, 2039, 58, 1500, 1669, 2038, 1329, 619, 2042, 2043,
	744, 1332, 1333, 2176, 1334, 1335, 1935, 457, 1501, 918,
	919, 458, 1777, 699, 2055, 1349, 1271, 2057, 743, 1272,
	1090, 1348, 645, 643, 2046, 779, 641, 779, 331, 779,
	777, 2052, 2053, 549, 2027, 554, 1392, 554, 2054, 1869,
	2058, 1871, 2060, 2072, 1134, 1096, 2064, 865, 2080, 1130,
	705, 1131, 1132, 1133, 1770, 1266, 2104, 2171, 1770, 1770,
	1770, 1770, 1770, 1973, 1129, 1717, 2086, 1850, 2095, 1267,
	1020, 2170, 1770, 1737, 2122, 2084, 1543, 1796, 2105, 447,
	448, 449, 2056, 1555, 1878, 1795, 1733, 1555, 1751, 875,
	2106, 1794, 1793, 58, 1693, 1692, 1750, 704, 703, 2061,
	1455, 1459, 1460, 2227, 2059, 2113, 2114, 1940, 1941, 1095,
	2005, 2135, 2144, 2104, 1771, 33, 1707, 2145, 1095, 2005,
	1453, 520, 2138, 1022, 1025, 46, 1758, 1891, 1956, 1140,
	12, 1, 2140, 1750, 2116, 1770, 2130, 1750, 1567, 17,
	1486, 1487, 2124, 2147, 2151, 1759, 58, 1760, 1760, 16,
	1784, 2065, 698, 440, 2131, 2132, 1809, 699, 218, 2118,
	2148, 2119, 1036, 552, 1770, 537, 218, 2188, 777, 1774,
	1563, 2166, 1984, 1593, 1510, 218, 1985, 2173, 1657, 602,
	379, 1496, 527, 19, 2177, 871, 1745, 1549, 871, 871,
	871, 1820, 2202, 2185, 864, 644, 1640, 1173, 912, 362,
	2187, 351, 904, 2198, 2199, 2200, 488, 53, 2201, 14,
	2207, 1437, 1988, 2144, 2216, 363, 361, 1555, 2145, 360,
	1878, 2138, 2211, 359, 2215, 358, 356, 2186, 394, 605,
	397, 2217, 2213, 699, 734, 403, 427, 554, 248, 2224,
	246, 247, 251, 2167, 2168, 2204, 2205, 2228, 1779, 2047,
	2048, 1929, 1283, 967, 2230, 2138, 777, 2107, 1095, 2005,
	2233, 2231, 1786, 2141, 689, 2229, 1503, 2169, 2121, 1323,
	1091, 1878, 1870, 1878, 538, 554, 1219, 1874, 554, 2077,
	554, 949, 554, 534, 554, 554, 777, 1769, 1886, 1899,
	1897, 1784, 219, 1896, 216, 1887, 856, 2093, 2089, 2037,
	1768, 1734, 1033, 1980, 457, 1274, 1250, 1033, 1033, 1033,
	1033, 1715, 1384, 1033, 1033, 1033, 1033, 1374, 1021, 1277,
	214, 6, 1386, 1909, 1751, 1369, 5, 219, 4, 216,
	1988, 3, 1250, 1368, 1367, 1366, 1365, 1363, 1364, 1361,
	777, 1362, 1360, 1268, 1033, 1033, 1033, 1033, 778, 2,
	0, 0, 0, 781, 0, 1387, 1376, 1375, 0, 0,
	0, 0, 1958, 1959, 0, 0, 0, 1377, 699, 0,
	218, 0, 698, 0, 0, 0, 1988, 0, 0, 699,
	1378, 0, 218, 197, 219, 1691, 216, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 695, 0, 0,
	0, 0, 1714, 0, 0, 0, 198, 699, 0, 194,
	199, 200, 1719, 0, 0, 0, 0, 1720, 197, 0,
	1721, 1722, 697, 0, 1724, 1725, 1727, 1729, 1731, 699,
	0, 0, 0, 2120, 0, 1754, 0, 0, 0, 0,
	777, 198, 0, 1771, 194, 199, 200, 1771, 1771, 1771,
	1771, 1771, 0, 0, 0, 0, 0, 0, 0, 0,
	699, 1909, 0, 2025, 35, 1555, 36, 37, 38, 0,
	0, 0, 0, 777, 0, 197, 0, 2044, 2045, 42,
	0, 0, 0, 0, 941, 0, 1250, 0, 0, 0,
	1371, 214, 0, 0, 0, 0, 0, 1728, 198, 0,
	1383, 194, 199, 200, 0, 2063, 0, 856, 0, 0,
	1751, 0, 0, 1389, 1390, 0, 0, 0, 698, 44,
	0, 0, 0, 1385, 1771, 0, 0, 696, 0, 201,
	0, 219, 0, 216, 2083, 1049, 2085, 0, 947, 0,
	0, 853, 0, 0, 0, 346, 698, 1033, 0, 2081,
	2082, 0, 0, 1771, 1379, 1380, 1382, 0, 0, 0,
	1381, 0, 0, 0, 201, 0, 855, 0, 698, 400,
	0, 1556, 1828, 1829, 0, 0, 1832, 1833, 1834, 861,
	0, 0, 0, 749, 748, 758, 759, 751, 752, 753,
	754, 755, 756, 757, 750, 0, 0, 761, 0, 698,
	0, 0, 0, 0, 219, 40, 1915, 0, 0, 1033,
	0, 0, 1857, 0, 0, 0, 1328, 695, 2149, 0,
	2150, 201, 197, 39, 0, 0, 0, 195, 196, 1867,
	1125, 2139, 41, 861, 0, 0, 0, 234, 0, 0,
	0, 0, 697, 699, 0, 198, 0, 0, 194, 199,
	200, 0, 2157, 2158, 2159, 0, 0, 0, 1153, 0,
	0, 0, 195, 196, 213, 699, 699, 0, 0, 0,
	0, 854, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 220, 1726,
	947, 0, 0, 0, 0, 197, 1937, 1388, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1213, 220, 0, 220, 220, 32, 0, 198, 195,
	196, 194, 199, 200, 0, 699, 0, 0, 0, 0,
	2139, 0, 0, 2214, 0, 749, 748, 758, 759, 751,
	752, 753, 754, 755, 756, 757, 750, 696, 1753, 761,
	0, 0, 853, 0, 1974, 0, 1975, 1976, 1977, 1978,
	1979, 0, 0, 695, 2139, 0, 861, 0, 201, 45,
	0, 0, 0, 26, 27, 0, 20, 855, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 697, 21,
	0, 695, 0, 30, 0, 0, 0, 0, 0, 0,
	1033, 0, 0, 2020, 698, 698, 0, 0, 457, 1033,
	0, 22, 23, 695, 24, 0, 697, 0, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 407, 0, 1176,
	409, 0, 0, 1188, 0, 0, 0, 0, 697, 0,
	0, 201, 0, 1178, 695, 0, 2051, 419, 420, 421,
	422, 423, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 699, 699, 0, 698, 0, 195, 196, 0, 697,
	0, 0, 0, 0, 0, 2068, 760, 0, 0, 0,
	0, 0, 854, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 696, 0, 0, 0, 0, 0, 220,
	220, 0, 947, 220, 220, 0, 62, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1402, 1403, 0, 0,
	0, 696, 18, 1177, 699, 699, 699, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 699, 699, 195,
	196, 0, 0, 696, 0, 0, 0, 749, 748, 758,
	759, 751, 752, 753, 754, 755, 756, 757, 750, 0,
	2123, 761, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 0, 0, 610, 696, 0, 1458, 699, 0, 220,
	0, 0, 0, 220, 0, 220, 220, 0, 0, 0,
	0, 0, 220, 0, 456, 0, 0, 220, 2160, 220,
	856, 698, 220, 0, 220, 0, 0, 0, 25, 0,
	0, 220, 0, 0, 0, 0, 62, 0, 0, 2172,
	28, 29, 0, 31, 0, 0, 0, 853, 760, 0,
	0, 0, 0, 0, 2179, 2180, 2181, 0, 0, 0,
	0, 0, 2184, 714, 0, 0, 0, 0, 0, 695,
	695, 0, 855, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 742, 698, 698, 698, 0, 0, 0, 0,
	0, 0, 0, 0, 697, 697, 698, 698, 0, 0,
	0, 218, 218, 0, 0, 0, 0, 0, 0, 0,
	780, 0, 0, 2221, 2222, 2223, 0, 0, 220, 0,
	0, 0, 220, 220, 0, 0, 0, 0, 0, 695,
	0, 0, 0, 1541, 0, 0, 698, 0, 799, 0,
	0, 0, 0, 0, 2234, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 697, 0, 0, 1174, 0, 0,
	0, 0, 0, 0, 0, 62, 699, 0, 0, 699,
	699, 0, 220, 62, 0, 0, 0, 854, 693, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 717, 1618, 1619, 1620, 0, 696,
	696, 0, 0, 0, 0, 1485, 0, 0, 1627, 1628,
	749, 748, 758, 759, 751, 752, 753, 754, 755, 756,
	757, 750, 0, 0, 761, 0, 0, 0, 0, 218,
	749, 748, 758, 759, 751, 752, 753, 754, 755, 756,
	757, 750, 0, 0, 761, 0, 0, 0, 1666, 0,
	916, 0, 0, 0, 0, 1033, 0, 0, 0, 696,
	760, 0, 0, 0, 0, 853, 695, 1483, 0, 0,
	0, 0, 948, 0, 0, 1176, 0, 0, 780, 1188,
	0, 910, 914, 915, 0, 0, 0, 0, 0, 1178,
	855, 697, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 218, 218, 0, 698, 0, 0, 698, 698,
	0, 218, 1914, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 693, 220, 0, 977, 979, 0, 695, 695,
	695, 220, 0, 0, 0, 780, 62, 0, 1031, 0,
	220, 695, 695, 0, 0, 0, 0, 1053, 1084, 0,
	0, 0, 0, 697, 697, 697, 62, 0, 0, 699,
	781, 0, 1387, 1376, 1375, 0, 697, 697, 0, 1177,
	0, 62, 0, 0, 1377, 0, 0, 0, 0, 0,
	0, 695, 0, 0, 0, 0, 0, 1378, 0, 0,
	1969, 0, 0, 0, 0, 854, 696, 0, 693, 0,
	0, 0, 0, 0, 0, 0, 697, 0, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1812, 0, 0,
	1815, 1816, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 218, 0, 0, 214, 218, 218, 218, 218, 218,
	0, 0, 2040, 0, 0, 0, 0, 2019, 0, 218,
	0, 0, 0, 1914, 0, 0, 0, 0, 696, 696,
	696, 0, 0, 0, 0, 0, 0, 0, 0, 456,
	62, 696, 696, 0, 781, 0, 1387, 1376, 1375, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1377, 0,
	0, 0, 0, 1206, 1210, 218, 0, 1371, 698, 1217,
	1218, 1378, 0, 760, 0, 0, 0, 1383, 0, 0,
	0, 696, 218, 0, 0, 0, 0, 0, 0, 0,
	1389, 1390, 0, 760, 0, 0, 0, 0, 0, 0,
	1385, 0, 0, 693, 0, 220, 0, 0, 0, 0,
	0, 218, 1260, 0, 693, 0, 0, 220, 0, 0,
	695, 0, 0, 695, 695, 0, 0, 0, 0, 220,
	0, 1379, 1380, 1382, 0, 0, 0, 1381, 0, 0,
	0, 0, 693, 1264, 0, 697, 0, 0, 697, 697,
	0, 0, 0, 1433, 0, 0, 0, 531, 0, 0,
	0, 0, 0, 0, 693, 749, 748, 758, 759, 751,
	752, 753, 754, 755, 756, 757, 750, 0, 62, 761,
	1950, 1371, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 1383, 0, 0, 0, 693, 0, 214, 0, 0,
	0, 0, 0, 0, 1389, 1390, 0, 0, 0, 0,
	0, 0, 0, 0, 1385, 1300, 1302, 0, 1303, 1326,
	0, 0, 0, 1306, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 1009, 0, 1309, 1310, 0, 0, 1311,
	1312, 0, 1313, 1314, 0, 1379, 1380, 1382, 0, 0,
	696, 1381, 0, 696, 696, 0, 0, 0, 0, 0,
	0, 0, 1556, 0, 0, 0, 0, 0, 0, 0,
	1914, 0, 0, 0, 1388, 0, 1407, 1210, 749, 748,
	758, 759, 751, 752, 753, 754, 755, 756, 757, 750,
	0, 0, 761, 0, 0, 0, 0, 762, 0, 0,
	0, 0, 0, 0, 0, 0, 766, 767, 768, 769,
	770, 771, 772, 695, 0, 0, 0, 0, 0, 775,
	0, 0, 583, 0, 584, 1995, 0, 0, 0, 0,
	0, 0, 573, 574, 0, 0, 0, 214, 697, 0,
	0, 0, 694, 0, 0, 212, 0, 216, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 780, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	0, 0, 0, 0, 0, 0, 0, 1490, 693, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 1388, 0,
	0, 0, 1502, 1505, 0, 0, 62, 0, 0, 599,
	693, 693, 0, 0, 0, 0, 0, 0, 781, 0,
	1387, 1376, 1375, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1377, 0, 0, 1526, 0, 597, 0, 0,
	0, 0, 0, 0, 0, 1378, 197, 0, 0, 2175,
	0, 692, 0, 696, 0, 0, 0, 0, 0, 0,
	0, 1537, 0, 0, 0, 0, 0, 0, 1292, 198,
	693, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1553,
	0, 0, 0, 0, 0, 0, 0, 775, 0, 0,
	1996, 0, 0, 0, 0, 0, 0, 1559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1598,
	0, 799, 0, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 781, 0,
	1387, 1376, 1375, 456, 775, 1371, 0, 1631, 585, 0,
	0, 1047, 1377, 0, 0, 1383, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1378, 0, 0, 1389, 1390,
	0, 760, 586, 587, 0, 0, 0, 0, 1385, 0,
	0, 0, 201, 0, 0, 0, 0, 1210, 0, 0,
	1210, 1210, 0, 0, 0, 45, 693, 693, 0, 780,
	0, 780, 0, 780, 0, 0, 0, 0, 0, 1379,
	1380, 1382, 0, 0, 0, 1381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 588, 598, 594, 595, 592,
	593, 591, 590, 589, 600, 575, 576, 577, 578, 579,
	581, 0, 0, 572, 571, 580, 0, 0, 0, 62,
	62, 62, 62, 62, 62, 0, 0, 0, 0, 693,
	693, 693, 0, 0, 1736, 0, 0, 0, 0, 1741,
	0, 0, 693, 693, 0, 1371, 1747, 0, 0, 0,
	195, 196, 596, 1300, 0, 1383, 781, 0, 1387, 1376,
	1375, 0, 0, 0, 0, 0, 0, 0, 1389, 1390,
	1377, 0, 0, 0, 0, 0, 0, 0, 1385, 0,
	0, 62, 693, 1378, 1224, 0, 0, 1237, 0, 1239,
	1240, 1241, 1242, 1243, 1244, 780, 780, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1379,
	1380, 1382, 0, 0, 62, 1381, 0, 0, 0, 1210,
	1210, 0, 1388, 0, 0, 0, 1556, 0, 0, 0,
	781, 0, 1387, 1376, 1375, 0, 0, 0, 0, 0,
	409, 0, 0, 0, 1377, 781, 0, 1387, 1376, 1375,
	0, 0, 0, 0, 0, 0, 0, 1378, 0, 1377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1378, 1995, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 220, 0, 0,
	766, 62, 0, 1371, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1383, 0, 1852, 1853, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 1389, 1390, 0, 0,
	0, 0, 0, 0, 0, 0, 1385, 0, 0, 781,
	0, 1387, 1376, 1375, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 1377, 0, 0, 0, 0, 0, 0,
	0, 693, 1388, 0, 693, 693, 1378, 1379, 1380, 1382,
	0, 0, 0, 1381, 0, 0, 0, 1371, 815, 0,
	823, 0, 0, 0, 1556, 0, 0, 1383, 0, 0,
	0, 0, 1371, 0, 0, 0, 0, 0, 0, 1412,
	1389, 1390, 1383, 0, 0, 0, 0, 0, 0, 0,
	1385, 0, 0, 1989, 0, 1389, 1390, 0, 0, 817,
	0, 2073, 2074, 0, 220, 1385, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1379, 1380, 1382, 0, 0, 0, 1381, 0, 0,
	0, 0, 0, 62, 0, 0, 1379, 1380, 1382, 0,
	0, 0, 1381, 0, 0, 0, 0, 0, 0, 0,
	1472, 1474, 1476, 0, 0, 0, 1371, 0, 0, 1479,
	1480, 1481, 1986, 1484, 0, 0, 1383, 294, 295, 296,
	297, 298, 299, 300, 301, 302, 303, 220, 220, 1389,
	1390, 0, 0, 0, 0, 0, 220, 220, 818, 1385,
	1388, 0, 0, 0, 62, 0, 252, 816, 0, 0,
	0, 0, 822, 821, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2036, 0, 0, 1047, 0, 0, 0,
	1379, 1380, 1382, 0, 0, 0, 1381, 0, 0, 0,
	0, 0, 0, 0, 693, 0, 0, 0, 0, 0,
	0, 1554, 1530, 1531, 1532, 1533, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2067,
	0, 0, 0, 0, 1388, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2075, 1388,
	2076, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 220, 0, 0, 0, 220, 0, 0, 0,
	220, 220, 220, 220, 220, 2041, 0, 0, 0, 0,
	0, 815, 220, 823, 220, 0, 0, 0, 220, 0,
	1877, 0, 0, 0, 0, 62, 0, 781, 0, 1387,
	1376, 1375, 0, 62, 0, 0, 0, 1632, 0, 0,
	62, 1377, 0, 0, 781, 0, 1387, 1376, 1375, 0,
	0, 0, 817, 1388, 1378, 0, 0, 0, 1377, 0,
	220, 0, 0, 0, 2152, 0, 62, 2153, 0, 0,
	2155, 1378, 781, 0, 1387, 1376, 1375, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 1377, 2165, 1681, 0,
	1682, 0, 1683, 0, 0, 0, 0, 0, 1686, 1378,
	1688, 2067, 0, 0, 0, 0, 220, 0, 0, 2209,
	0, 0, 0, 0, 0, 780, 0, 0, 0, 0,
	294, 295, 296, 297, 298, 299, 300, 301, 302, 303,
	0, 304, 305, 0, 306, 307, 308, 310, 309, 0,
	1003, 818, 0, 0, 0, 0, 2206, 780, 0, 252,
	816, 0, 0, 0, 2112, 822, 821, 0, 0, 0,
	0, 0, 0, 0, 1371, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 1383, 0, 0, 0, 0, 0,
	0, 1371, 0, 0, 0, 0, 2146, 1389, 1390, 0,
	0, 1383, 0, 0, 0, 0, 0, 1385, 0, 0,
	0, 0, 0, 0, 1389, 1390, 0, 0, 0, 1371,
	0, 0, 0, 0, 1385, 0, 0, 0, 0, 1383,
	62, 0, 0, 0, 0, 0, 0, 0, 1379, 1380,
	1382, 0, 1389, 1390, 1381, 0, 0, 0, 0, 0,
	0, 0, 1385, 0, 0, 1379, 1380, 1382, 0, 0,
	0, 1381, 0, 0, 253, 0, 0, 0, 0, 0,
	0, 0, 1357, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 1379, 1380, 1382, 0, 0, 0, 1381,
	0, 0, 0, 0, 0, 0, 0, 2146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1835, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 168, 0, 127, 181, 95, 115, 190, 117,
	118, 153, 74, 136, 0, 112, 93, 0, 0, 0,
	98, 67, 107, 68, 96, 129, 0, 94, 1861, 1611,
	139, 1862, 57, 1863, 188, 1864, 144, 1865, 1866, 0,
	0, 0, 131, 172, 134, 163, 126, 154, 83, 143,
	183, 113, 149, 184, 0, 1399, 0, 44, 0, 1397,
	0, 1388, 0, 0, 0, 0, 0, 0, 0, 148,
	178, 109, 80, 193, 0, 152, 66, 146, 1388, 0,
	72, 75, 189, 176, 103, 102, 1396, 0, 0, 0,
	0, 0, 0, 130, 135, 159, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 1395, 1388, 0, 0, 99,
	0, 142, 0, 0, 0, 79, 1610, 0, 1612, 0,
	0, 0, 82, 0, 100, 160, 0, 63, 0, 0,
	0, 0, 166, 173, 125, 0, 0, 177, 122, 121,
	0, 0, 0, 0, 0, 0, 114, 60, 197, 191,
	0, 0, 180, 132, 171, 97, 108, 276, 104, 0,
	0, 0, 105, 106, 141, 155, 0, 0, 0, 0,
	0, 198, 162, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 64, 101,
	164, 167, 87, 151, 76, 110, 157, 111, 133, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	299, 300, 301, 302, 303, 0, 304, 305, 0, 306,
	307, 308, 310, 309, 277, 278, 279, 283, 281, 280,
	282, 254, 256, 0, 252, 255, 261, 257, 258, 259,
	273, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 274, 285, 286, 287, 288, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 201, 70, 91, 174, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 45, 0, 0,
	150, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
	1588, 1589, 0, 0, 0, 0, 0, 86, 90, 84,
	85, 137, 138, 185, 186, 187, 161, 81, 0, 0,
	88, 89, 0, 169, 0, 0, 0, 140, 0, 253,
	0, 192, 0, 0, 0, 0, 0, 0, 0, 116,
	65, 120, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 0, 124, 119, 145, 147, 156, 165, 175,
	182, 158, 195, 196, 179, 168, 0, 127, 181, 95,
	115, 190, 117, 118, 153, 74, 136, 0, 112, 93,
	0, 0, 0, 98, 67, 107, 68, 96, 129, 0,
	94, 0, 170, 139, 0, 57, 0, 188, 0, 144,
	0, 0, 0, 0, 0, 131, 172, 134, 163, 126,
	154, 83, 143, 183, 113, 149, 184, 0, 0, 0,
	44, 0, 56, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 178, 109, 80, 193, 0, 152, 66,
	146, 0, 0, 72, 75, 189, 176, 103, 102, 0,
	0, 0, 0, 0, 0, 0, 130, 135, 159, 123,
	0, 0, 0, 0, 0, 1523, 0, 0, 0, 0,
	0, 0, 99, 0, 142, 0, 0, 0, 79, 73,
	0, 128, 0, 0, 0, 82, 0, 100, 160, 0,
	63, 0, 0, 0, 0, 166, 173, 373, 0, 0,
	177, 122, 121, 365, 0, 364, 1524, 368, 369, 372,
	60, 197, 191, 0, 0, 366, 374, 171, 97, 108,
	0, 104, 0, 0, 0, 105, 106, 141, 155, 0,
	0, 0, 0, 0, 198, 162, 0, 194, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 64, 101, 164, 167, 87, 151, 76, 110, 157,
	111, 133, 92, 0, 1066, 1072, 1070, 0, 0, 1067,
	0, 0, 1065, 0, 0, 1074, 0, 0, 1073, 1059,
	1069, 1071, 1068, 1063, 0, 1058, 0, 1076, 1075, 1077,
	1056, 1079, 0, 0, 0, 1083, 1080, 1082, 1081, 0,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	1061, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1062, 1064, 0, 0, 370, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 201, 70, 91,
	174, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	45, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 90, 84, 85, 137, 138, 185, 186, 187, 161,
	81, 0, 0, 88, 89, 0, 169, 0, 0, 0,
	140, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 116, 65, 120, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 0, 124, 119, 145, 147,
	156, 165, 175, 182, 158, 195, 196, 0, 367, 179,
	168, 0, 127, 181, 95, 115, 190, 117, 118, 153,
	74, 136, 0, 112, 93, 0, 0, 0, 98, 67,
	107, 68, 96, 129, 0, 94, 0, 170, 139, 0,
	57, 0, 188, 0, 144, 0, 0, 0, 0, 0,
	131, 172, 134, 163, 126, 154, 83, 143, 183, 113,
	149, 184, 0, 1399, 0, 44, 0, 1397, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 178, 109,
	80, 193, 0, 152, 66, 146, 0, 0, 72, 75,
	189, 176, 103, 102, 1396, 0, 0, 0, 0, 0,
	0, 130, 135, 159, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 1395, 0, 0, 0, 99, 0, 142,
	0, 0, 0, 79, 73, 0, 128, 399, 0, 0,
	82, 0, 100, 160, 0, 63, 0, 0, 0, 0,
	166, 173, 125, 0, 0, 177, 122, 121, 0, 0,
	0, 0, 0, 0, 114, 60, 197, 191, 0, 0,
	180, 132, 171, 97, 108, 0, 104, 0, 0, 0,
	105, 106, 141, 155, 0, 0, 0, 0, 0, 198,
	162, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 64, 101, 164, 167,
	87, 151, 76, 110, 157, 111, 133, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 201, 70, 91, 174, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 45, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 90, 84, 85, 137,
	138, 185, 186, 187, 161, 81, 0, 0, 88, 89,
	0, 169, 0, 0, 0, 140, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 116, 65, 120,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 124, 119, 145, 147, 156, 165, 175, 182, 158,
	195, 196, 179, 168, 0, 127, 181, 95, 115, 190,
	117, 118, 153, 74, 136, 0, 112, 93, 0, 0,
	0, 98, 67, 107, 68, 96, 129, 0, 94, 0,
	170, 139, 0, 0, 0, 188, 0, 144, 0, 0,
	0, 0, 0, 131, 172, 134, 163, 126, 154, 83,
	143, 183, 113, 149, 184, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 178, 109, 80, 193, 0, 152, 66, 146, 0,
	0, 72, 75, 189, 176, 103, 102, 0, 0, 0,
	0, 0, 0, 0, 130, 135, 159, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 142, 0, 0, 0, 79, 73, 781, 128,
	1387, 1376, 1375, 82, 0, 100, 160, 0, 63, 0,
	0, 0, 1377, 166, 173, 125, 0, 0, 177, 122,
	121, 0, 0, 0, 0, 1378, 0, 114, 60, 197,
	191, 0, 0, 180, 132, 171, 97, 108, 0, 104,
	0, 0, 0, 105, 106, 141, 155, 0, 0, 0,
	0, 0, 198, 162, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 64,
	101, 164, 167, 87, 151, 76, 110, 157, 111, 133,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1780, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1992, 1788, 0, 0, 0,
	0, 0, 0, 0, 0, 1383, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1389, 1390,
	0, 0, 0, 0, 0, 0, 0, 0, 1385, 0,
	69, 0, 0, 0, 0, 201, 70, 91, 174, 0,
	0, 0, 0, 1789, 1787, 1783, 1782, 0, 45, 0,
	0, 150, 0, 0, 0, 0, 1785, 0, 0, 1379,
	1380, 1382, 0, 0, 0, 1381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1761, 0, 86, 90,
	84, 85, 137, 138, 185, 186, 187, 161, 81, 0,
	0, 88, 89, 0, 169, 0, 0, 0, 140, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	116, 65, 120, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 0, 124, 119, 145, 147, 156, 165,
	175, 182, 158, 195, 196, 179, 168, 0, 127, 181,
	95, 115, 190, 117, 118, 153, 74, 136, 0, 112,
	93, 0, 0, 0, 98, 67, 107, 68, 96, 129,
	0, 94, 0, 170, 139, 0, 57, 0, 188, 0,
	144, 0, 0, 0, 0, 0, 131, 172, 134, 163,
	126, 154, 83, 143, 183, 113, 149, 184, 0, 1399,
	0, 44, 0, 1397, 0, 0, 0, 0, 0, 0,
	0, 0, 1388, 148, 178, 109, 80, 193, 0, 152,
	66, 146, 0, 0, 72, 75, 189, 176, 103, 102,
	1396, 0, 0, 0, 0, 0, 0, 130, 135, 159,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 1395,
	0, 0, 0, 99, 0, 142, 0, 0, 0, 79,
	73, 781, 128, 1387, 1376, 1375, 82, 0, 100, 160,
	0, 63, 0, 0, 0, 1377, 166, 173, 125, 0,
	0, 177, 122, 121, 0, 0, 0, 0, 1378, 0,
	114, 60, 197, 191, 0, 0, 180, 132, 171, 97,
	108, 0, 104, 0, 0, 0, 105, 106, 141, 155,
	0, 0, 0, 0, 0, 198, 162, 0, 194, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 64, 101, 164, 167, 87, 151, 76, 110,
	157, 111, 133, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1371, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1383, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1389, 1390, 0, 0, 0, 0, 0, 0, 0,
	0, 1385, 0, 69, 0, 0, 0, 0, 201, 70,
	91, 174, 0, 0, 0, 0, 0, 59, 0, 0,
	0, 45, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 1379, 1380, 1382, 0, 0, 0, 1381, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 90, 84, 85, 137, 138, 185, 186, 187,
	161, 81, 0, 0, 88, 89, 0, 169, 0, 0,
	0, 140, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 116, 65, 120, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 0, 124, 119, 145,
	147, 156, 165, 175, 182, 158, 195, 196, 179, 168,
	0, 127, 181, 95, 115, 190, 117, 118, 153, 74,
	136, 0, 112, 93, 0, 0, 0, 98, 67, 107,
	68, 96, 129, 0, 94, 0, 170, 139, 0, 0,
	0, 188, 0, 144, 0, 0, 0, 0, 0, 131,
	172, 134, 163, 126, 154, 83, 143, 183, 113, 149,
	184, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1388, 148, 178, 109, 80,
	193, 0, 152, 66, 146, 0, 0, 72, 75, 189,
	176, 103, 102, 0, 0, 0, 0, 0, 0, 0,
	130, 135, 159, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 142, 0,
	0, 0, 79, 73, 0, 128, 0, 0, 0, 82,
	0, 100, 160, 0, 63, 0, 0, 0, 0, 166,
	173, 125, 0, 0, 177, 122, 121, 0, 0, 0,
	0, 0, 0, 114, 60, 197, 191, 0, 0, 180,
	132, 171, 97, 108, 0, 104, 0, 0, 0, 105,
	106, 141, 155, 0, 0, 0, 0, 0, 198, 162,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 64, 101, 164, 167, 87,
	151, 76, 110, 157, 111, 133, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1922,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1788, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 201, 70, 91, 174, 0, 0, 0, 0, 1789,
	1787, 0, 0, 0, 45, 0, 0, 150, 0, 0,
	0, 0, 1785, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 90, 84, 85, 137, 138,
	185, 186, 187, 161, 81, 0, 0, 88, 89, 0,
	169, 0, 0, 0, 140, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 116, 65, 120, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 0,
	124, 119, 145, 147, 156, 165, 175, 182, 158, 195,
	196, 179, 168, 0, 127, 181, 95, 115, 190, 117,
	118, 153, 74, 136, 0, 112, 93, 0, 0, 0,
	98, 67, 107, 68, 96, 129, 0, 94, 0, 170,
	139, 0, 57, 0, 188, 0, 144, 0, 0, 0,
	0, 0, 131, 172, 134, 163, 126, 154, 83, 143,
	183, 113, 149, 184, 0, 0, 0, 44, 0, 56,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	178, 109, 80, 193, 0, 152, 66, 146, 0, 0,
	72, 75, 189, 176, 103, 102, 0, 0, 0, 0,
	0, 0, 0, 130, 135, 159, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 142, 0, 0, 0, 79, 73, 0, 128, 0,
	0, 0, 82, 0, 100, 160, 0, 63, 0, 0,
	0, 0, 166, 173, 125, 0, 0, 177, 122, 121,
	0, 671, 673, 0, 0, 0, 372, 60, 197, 191,
	0, 0, 675, 132, 171, 97, 108, 0, 104, 0,
	0, 0, 105, 106, 141, 155, 0, 0, 0, 0,
	0, 198, 162, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 64, 101,
	164, 167, 87, 151, 76, 110, 157, 111, 133, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 201, 70, 91, 174, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 45, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 90, 84,
	85, 137, 138, 185, 186, 187, 161, 81, 0, 0,
	88, 89, 0, 169, 0, 0, 0, 140, 0, 0,
	0, 192, 0, 0, 0, 0, 0, 0, 0, 116,
	65, 120, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 0, 124, 119, 145, 147, 156, 165, 175,
	182, 158, 195, 196, 179, 168, 0, 127, 181, 95,
	115, 190, 117, 118, 153, 74, 136, 0, 112, 93,
	0, 0, 0, 98, 67, 107, 68, 96, 129, 0,
	94, 0, 170, 139, 0, 0, 0, 188, 0, 144,
	0, 0, 0, 0, 0, 131, 172, 134, 163, 126,
	154, 83, 143, 183, 113, 149, 184, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 178, 109, 80, 193, 0, 152, 66,
	146, 0, 0, 72, 75, 189, 176, 103, 102, 0,
	0, 0, 0, 0, 0, 0, 130, 135, 159, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 142, 0, 0, 0, 79, 73,
	0, 128, 0, 0, 0, 82, 0, 100, 160, 0,
	63, 0, 0, 0, 0, 166, 173, 125, 0, 0,
	177, 122, 121, 0, 0, 0, 0, 0, 0, 114,
	60, 197, 191, 0, 0, 180, 132, 171, 97, 108,
	0, 104, 0, 0, 0, 105, 106, 141, 155, 0,
	0, 0, 0, 0, 198, 162, 0, 194, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 64, 101, 164, 167, 87, 151, 76, 110, 157,
	111, 133, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1788, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 201, 70, 91,
	174, 0, 0, 0, 0, 1789, 1787, 0, 0, 0,
	45, 0, 0, 150, 0, 0, 0, 0, 1785, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 90, 84, 85, 137, 138, 185, 186, 187, 161,
	81, 0, 0, 88, 89, 0, 169, 0, 0, 0,
	140, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 116, 65, 120, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 0, 124, 119, 145, 147,
	156, 165, 175, 182, 158, 195, 196, 179, 168, 0,
	127, 181, 95, 115, 190, 117, 118, 153, 74, 136,
	0, 112, 93, 0, 0, 0, 98, 67, 107, 68,
	96, 129, 0, 94, 0, 170, 139, 0, 0, 0,
	188, 0, 144, 0, 0, 0, 0, 0, 131, 172,
	134, 163, 126, 154, 83, 143, 183, 113, 149, 184,
	0, 0, 0, 212, 0, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 178, 109, 80, 193,
	0, 152, 66, 146, 0, 0, 72, 75, 189, 176,
	103, 102, 0, 0, 0, 0, 0, 0, 0, 130,
	135, 159, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1515, 0, 99, 0, 142, 0, 0,
	0, 79, 73, 0, 128, 0, 0, 0, 82, 0,
	100, 160, 0, 63, 0, 0, 0, 0, 166, 173,
	125, 0, 0, 177, 122, 121, 0, 0, 0, 0,
	0, 0, 114, 60, 197, 191, 0, 0, 180, 132,
	171, 97, 108, 0, 104, 0, 0, 0, 105, 106,
	141, 155, 0, 0, 0, 0, 0, 198, 162, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 64, 101, 164, 167, 87, 151,
	76, 110, 157, 111, 133, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	201, 70, 91, 174, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 45, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 90, 84, 85, 137, 138, 185,
	186, 187, 161, 81, 0, 0, 88, 89, 0, 169,
	0, 0, 0, 140, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 116, 65, 120, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 0, 124,
	119, 145, 147, 156, 165, 175, 182, 158, 195, 196,
	179, 168, 0, 127, 181, 95, 115, 190, 117, 118,
	153, 74, 136, 0, 112, 93, 0, 0, 0, 98,
	67, 107, 68, 96, 129, 0, 94, 0, 170, 139,
	0, 0, 0, 188, 0, 144, 0, 0, 0, 0,
	0, 131, 172, 134, 163, 126, 154, 83, 143, 183,
	113, 149, 184, 0, 0, 0, 44, 0, 906, 0,
	907, 0, 0, 0, 0, 0, 0, 0, 148, 178,
	109, 80, 193, 0, 152, 66, 146, 0, 0, 72,
	75, 189, 176, 103, 102, 0, 0, 0, 0, 0,
	0, 0, 130, 135, 159, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	142, 0, 0, 0, 79, 73, 0, 128, 0, 0,
	0, 82, 0, 100, 160, 0, 63, 0, 0, 0,
	0, 166, 173, 125, 0, 0, 177, 122, 121, 0,
	0, 0, 0, 0, 0, 114, 60, 197, 191, 0,
	0, 180, 132, 171, 97, 108, 0, 104, 0, 0,
	0, 105, 106, 141, 155, 0, 0, 0, 0, 0,
	198, 162, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 64, 101, 164,
	167, 87, 151, 76, 110, 157, 111, 133, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 201, 70, 91, 174, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 45, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 90, 84, 85,
	137, 138, 185, 186, 187, 161, 81, 0, 0, 88,
	89, 0, 169, 0, 0, 0, 140, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 116, 65,
	120, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 0, 124, 119, 145, 147, 156, 165, 175, 182,
	158, 195, 196, 179, 168, 0, 127, 181, 95, 115,
	190, 117, 118, 153, 74, 136, 0, 112, 93, 0,
	0, 0, 98, 67, 107, 68, 96, 129, 0, 94,
	0, 170, 139, 0, 57, 0, 188, 0, 144, 0,
	0, 0, 0, 0, 131, 172, 134, 163, 126, 154,
	83, 143, 183, 113, 149, 184, 0, 0, 0, 44,
	0, 56, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 178, 109, 80, 193, 0, 152, 66, 146,
	0, 0, 72, 75, 189, 176, 103, 102, 0, 0,
	0, 0, 0, 0, 0, 130, 135, 159, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 142, 0, 0, 0, 79, 73, 0,
	128, 0, 0, 0, 82, 0, 100, 160, 0, 63,
	0, 0, 0, 0, 166, 173, 125, 0, 0, 177,
	122, 121, 0, 0, 0, 0, 0, 0, 114, 60,
	197, 191, 0, 0, 180, 132, 171, 97, 108, 0,
	104, 0, 0, 0, 105, 106, 141, 155, 0, 0,
	0, 0, 0, 198, 162, 0, 194, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	64, 101, 164, 167, 87, 151, 76, 110, 157, 111,
	133, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 201, 70, 91, 174,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 45,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	90, 84, 85, 137, 138, 185, 186, 187, 161, 81,
	0, 0, 88, 89, 0, 169, 0, 0, 0, 140,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 116, 65, 120, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 0, 124, 119, 145, 147, 156,
	165, 175, 182, 158, 195, 196, 179, 168, 0, 127,
	181, 95, 115, 190, 117, 118, 153, 74, 136, 0,
	112, 93, 0, 0, 0, 98, 67, 107, 68, 96,
	129, 0, 94, 0, 170, 139, 0, 0, 0, 188,
	0, 144, 0, 0, 0, 0, 0, 131, 172, 134,
	163, 126, 154, 83, 143, 183, 113, 149, 184, 0,
	489, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 491, 0, 148, 178, 109, 80, 193, 0,
	152, 66, 146, 0, 0, 72, 75, 189, 176, 103,
	102, 0, 0, 0, 0, 0, 0, 0, 130, 135,
	159, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 142, 0, 0, 0,
	79, 73, 0, 128, 0, 0, 0, 82, 0, 100,
	160, 0, 63, 0, 0, 0, 0, 166, 173, 125,
	0, 0, 177, 122, 121, 0, 0, 0, 0, 0,
	0, 114, 60, 197, 191, 0, 0, 180, 132, 171,
	97, 108, 0, 104, 0, 0, 0, 105, 106, 141,
	155, 0, 0, 0, 0, 0, 198, 162, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 64, 101, 164, 167, 87, 151, 76,
	110, 157, 111, 133, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 201,
	70, 91, 174, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 45, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 90, 84, 85, 137, 138, 185, 186,
	187, 161, 81, 0, 0, 88, 89, 0, 169, 0,
	0, 0, 140, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 116, 65, 120, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 0, 124, 119,
	145, 147, 156, 165, 175, 182, 158, 195, 196, 179,
	168, 0, 127, 181, 95, 115, 190, 117, 118, 153,
	74, 136, 0, 112, 93, 0, 0, 0, 98, 67,
	107, 68, 96, 129, 0, 94, 0, 170, 139, 0,
	0, 0, 188, 0, 144, 0, 0, 0, 0, 0,
	131, 172, 134, 163, 126, 154, 83, 143, 183, 113,
	149, 184, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 178, 109,
	80, 193, 0, 152, 66, 146, 0, 0, 72, 75,
	189, 176, 103, 102, 0, 0, 0, 0, 0, 0,
	0, 130, 135, 159, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1860, 0, 99, 0, 142,
	0, 0, 0, 79, 73, 0, 128, 0, 0, 0,
	82, 0, 100, 160, 0, 63, 0, 0, 0, 0,
	166, 173, 125, 0, 0, 177, 122, 121, 0, 0,
	0, 0, 0, 0, 114, 60, 197, 191, 0, 0,
	180, 132, 171, 97, 108, 0, 104, 0, 0, 0,
	105, 106, 141, 155, 0, 0, 0, 0, 0, 198,
	162, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 64, 101, 164, 167,
	87, 151, 76, 110, 157, 111, 133, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 201, 70, 91, 174, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 45, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 90, 84, 85, 137,
	138, 185, 186, 187, 161, 81, 0, 0, 88, 89,
	0, 169, 0, 0, 0, 140, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 116, 65, 120,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 124, 119, 145, 147, 156, 165, 175, 182, 158,
	195, 196, 179, 168, 0, 127, 181, 95, 115, 190,
	117, 118, 153, 74, 136, 0, 112, 93, 0, 0,
	0, 98, 67, 107, 68, 96, 129, 0, 94, 0,
	170, 139, 0, 0, 0, 188, 0, 144, 0, 0,
	0, 0, 0, 131, 172, 134, 163, 126, 154, 83,
	143, 183, 113, 149, 184, 0, 0, 0, 212, 0,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 178, 109, 80, 193, 0, 152, 66, 146, 0,
	0, 72, 75, 189, 176, 103, 102, 0, 0, 0,
	0, 0, 0, 0, 130, 135, 159, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 142, 0, 0, 0, 79, 73, 0, 128,
	0, 0, 0, 82, 0, 100, 160, 0, 63, 0,
	0, 0, 0, 166, 173, 125, 0, 0, 177, 122,
	121, 0, 0, 0, 0, 0, 0, 114, 60, 197,
	191, 0, 0, 180, 132, 171, 97, 108, 0, 104,
	0, 0, 0, 105, 106, 141, 155, 0, 0, 0,
	0, 0, 198, 162, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 64,
	101, 164, 167, 87, 151, 76, 110, 157, 111, 133,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 201, 70, 91, 174, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 45, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 90,
	84, 85, 137, 138, 185, 186, 187, 161, 81, 0,
	0, 88, 89, 0, 169, 0, 0, 0, 140, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	116, 65, 120, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 0, 124, 119, 145, 147, 156, 165,
	175, 182, 158, 195, 196, 179, 168, 0, 127, 181,
	95, 115, 190, 117, 118, 153, 74, 136, 0, 112,
	93, 0, 0, 0, 98, 67, 107, 68, 96, 129,
	0, 94, 0, 170, 139, 0, 0, 0, 188, 0,
	144, 0, 0, 0, 0, 0, 131, 172, 134, 163,
	126, 154, 83, 143, 183, 113, 149, 184, 0, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 178, 109, 80, 193, 0, 152,
	66, 146, 0, 0, 72, 75, 189, 176, 103, 102,
	686, 0, 0, 0, 0, 0, 0, 130, 135, 159,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 142, 0, 0, 0, 79,
	73, 0, 128, 0, 0, 0, 82, 0, 100, 160,
	0, 63, 0, 0, 0, 0, 166, 173, 125, 0,
	0, 177, 122, 121, 0, 0, 0, 0, 0, 0,
	114, 60, 197, 191, 0, 0, 180, 132, 171, 97,
	108, 0, 104, 0, 0, 0, 105, 106, 141, 155,
	0, 0, 0, 0, 0, 198, 162, 0, 194, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 64, 101, 164, 167, 87, 151, 76, 110,
	157, 111, 133, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 201, 70,
	91, 174, 0, 0, 0, 0, 0, 59, 0, 0,
	0, 45, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 90, 84, 85, 137, 138, 185, 186, 187,
	161, 81, 0, 0, 88, 89, 0, 169, 0, 0,
	0, 140, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 116, 65, 120, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 0, 124, 119, 145,
	147, 156, 165, 175, 182, 158, 195, 196, 179, 168,
	0, 127, 181, 95, 115, 190, 117, 118, 153, 74,
	136, 0, 112, 93, 0, 0, 0, 98, 67, 107,
	68, 96, 129, 0, 94, 0, 170, 139, 0, 0,
	0, 188, 0, 144, 0, 0, 0, 0, 0, 131,
	172, 134, 163, 126, 154, 83, 143, 183, 113, 149,
	184, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 178, 109, 80,
	193, 0, 152, 66, 146, 0, 0, 72, 75, 189,
	176, 103, 102, 0, 0, 0, 0, 0, 0, 0,
	130, 135, 159, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 142, 0,
	0, 0, 79, 73, 0, 128, 0, 0, 0, 82,
	0, 100, 160, 0, 63, 0, 0, 0, 0, 166,
	173, 125, 0, 0, 177, 122, 121, 0, 0, 0,
	0, 0, 0, 114, 60, 197, 191, 0, 0, 180,
	132, 171, 97, 108, 0, 104, 0, 0, 0, 105,
	106, 141, 155, 0, 0, 0, 0, 0, 198, 162,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 64, 101, 164, 167, 87,
	151, 76, 110, 157, 111, 133, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 201, 70, 91, 174, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 45, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 90, 84, 85, 137, 138,
	185, 186, 187, 161, 81, 0, 0, 88, 89, 0,
	169, 0, 0, 0, 140, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 116, 65, 120, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 0,
	124, 119, 145, 147, 156, 165, 175, 182, 158, 195,
	196, 179, 2143, 0, 127, 181, 95, 115, 190, 117,
	118, 153, 74, 136, 0, 112, 93, 0, 0, 0,
	98, 67, 107, 68, 96, 129, 0, 94, 0, 170,
	139, 0, 0, 0, 188, 0, 144, 0, 0, 0,
	0, 0, 131, 172, 134, 163, 126, 154, 83, 143,
	183, 113, 149, 184, 508, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	178, 109, 80, 193, 0, 152, 66, 146, 0, 0,
	72, 75, 189, 176, 103, 102, 0, 0, 0, 0,
	0, 0, 0, 130, 135, 159, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 142, 0, 0, 0, 79, 73, 0, 128, 0,
	0, 0, 82, 0, 100, 160, 0, 63, 0, 0,
	0, 0, 166, 173, 125, 0, 0, 177, 122, 121,
	0, 0, 0, 0, 0, 0, 114, 0, 197, 191,
	0, 0, 180, 132, 171, 97, 108, 0, 104, 0,
	0, 0, 105, 106, 141, 155, 0, 0, 0, 0,
	0, 198, 162, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 64, 101,
	164, 167, 87, 151, 76, 110, 157, 111, 133, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 201, 70, 91, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 90, 84,
	85, 137, 138, 185, 186, 187, 161, 81, 0, 0,
	88, 89, 0, 169, 0, 0, 0, 140, 0, 0,
	0, 192, 0, 0, 0, 0, 0, 0, 0, 116,
	65, 120, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 0, 124, 119, 145, 147, 156, 165, 175,
	182, 158, 195, 196, 179, 168, 0, 127, 181, 95,
	115, 190, 117, 118, 153, 74, 136, 0, 112, 93,
	0, 0, 0, 98, 67, 107, 68, 96, 129, 0,
	94, 0, 170, 139, 0, 0, 0, 188, 0, 144,
	0, 0, 0, 0, 0, 131, 172, 134, 163, 126,
	154, 83, 143, 183, 113, 149, 184, 0, 0, 0,
	212, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 178, 109, 80, 193, 0, 152, 66,
	146, 0, 0, 72, 75, 189, 176, 103, 102, 0,
	0, 0, 0, 0, 0, 0, 130, 135, 159, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 142, 0, 0, 0, 79, 73,
	0, 128, 0, 0, 0, 82, 0, 100, 160, 0,
	63, 0, 0, 0, 0, 166, 173, 125, 0, 0,
	177, 122, 121, 0, 0, 0, 0, 0, 0, 114,
	0, 197, 191, 0, 0, 180, 132, 171, 97, 108,
	0, 104, 0, 0, 0, 105, 106, 141, 155, 0,
	0, 0, 0, 0, 198, 162, 0, 194, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 64, 101, 164, 167, 87, 151, 76, 110, 157,
	111, 133, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 201, 70, 91,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	45, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 90, 84, 85, 137, 138, 185, 186, 187, 161,
	81, 0, 0, 88, 89, 0, 169, 0, 0, 0,
	140, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 116, 65, 120, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 0, 124, 119, 145, 147,
	156, 165, 175, 182, 158, 195, 196, 179, 168, 0,
	127, 181, 95, 115, 190, 117, 118, 153, 74, 136,
	0, 112, 93, 0, 0, 0, 98, 67, 107, 68,
	96, 129, 0, 94, 0, 170, 139, 0, 0, 0,
	188, 0, 144, 0, 0, 0, 0, 0, 131, 172,
	134, 163, 126, 154, 83, 143, 183, 113, 149, 184,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 178, 109, 80, 193,
	0, 152, 66, 146, 0, 0, 72, 75, 189, 176,
	103, 102, 0, 0, 0, 0, 0, 0, 0, 130,
	135, 159, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 142, 0, 0,
	0, 79, 73, 0, 128, 0, 0, 0, 82, 0,
	100, 160, 0, 63, 0, 0, 0, 0, 166, 173,
	125, 0, 0, 177, 122, 121, 0, 0, 0, 0,
	0, 0, 114, 0, 197, 191, 0, 0, 180, 132,
	171, 97, 108, 0, 104, 0, 0, 0, 105, 106,
	141, 155, 0, 0, 0, 0, 0, 198, 162, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 64, 101, 164, 167, 87, 151,
	76, 110, 157, 111, 133, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	201, 70, 91, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 90, 84, 85, 137, 138, 185,
	186, 187, 161, 81, 0, 0, 88, 89, 0, 169,
	0, 0, 0, 140, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 116, 65, 120, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 0, 124,
	119, 145, 147, 156, 165, 175, 182, 158, 195, 196,
	179, 168, 0, 127, 181, 95, 115, 190, 117, 118,
	153, 74, 136, 0, 112, 93, 0, 0, 0, 98,
	67, 107, 68, 96, 129, 0, 94, 0, 170, 139,
	0, 0, 0, 188, 0, 144, 0, 0, 0, 0,
	0, 131, 172, 134, 163, 126, 154, 83, 143, 183,
	113, 149, 184, 0, 0, 0, 219, 0, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 178,
	109, 80, 193, 0, 152, 66, 146, 0, 0, 72,
	75, 189, 176, 103, 102, 0, 0, 0, 0, 0,
	0, 0, 130, 135, 159, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	142, 0, 0, 0, 79, 73, 0, 128, 0, 0,
	0, 82, 0, 100, 160, 0, 63, 0, 0, 0,
	0, 166, 173, 125, 0, 0, 177, 122, 121, 0,
	0, 0, 0, 0, 0, 114, 0, 197, 191, 0,
	0, 180, 132, 171, 97, 108, 0, 104, 0, 0,
	0, 105, 106, 141, 155, 0, 0, 0, 0, 0,
	198, 162, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 64, 101, 164,
	167, 87, 151, 76, 110, 157, 111, 133, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 201, 70, 91, 174, 0, 0, 781,
	0, 1387, 1376, 1375, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 1377, 0, 0, 0, 0, 0, 0,
	781, 0, 1387, 1376, 1375, 0, 1378, 0, 0, 0,
	0, 0, 0, 0, 1377, 0, 86, 90, 84, 85,
	137, 138, 185, 186, 187, 161, 81, 1378, 0, 88,
	89, 0, 169, 0, 0, 0, 140, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 116, 65,
	120, 0, 0, 0, 0, 0, 720, 0, 77, 78,
	0, 1987, 124, 119, 145, 147, 156, 165, 175, 182,
	158, 195, 196, 719, 0, 0, 0, 0, 718, 0,
	0, 0, 1880, 0, 0, 583, 0, 584, 0, 0,
	0, 0, 0, 0, 0, 573, 574, 0, 0, 0,
	0, 0, 0, 0, 0, 508, 0, 0, 212, 558,
	555, 556, 560, 561, 562, 563, 1371, 0, 0, 559,
	564, 565, 566, 721, 0, 0, 1383, 0, 716, 546,
	0, 0, 582, 0, 0, 0, 0, 1371, 0, 1389,
	1390, 0, 0, 0, 0, 0, 0, 1383, 0, 1385,
	0, 0, 0, 0, 0, 0, 543, 544, 0, 0,
	1389, 1390, 599, 0, 545, 0, 0, 1055, 542, 547,
	1385, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1379, 1380, 1382, 0, 0, 0, 1381, 0, 0, 0,
	597, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 1379, 1380, 1382, 0, 0, 0, 1381, 1057, 0,
	0, 0, 0, 0, 0, 781, 0, 1387, 1376, 1375,
	0, 0, 198, 0, 0, 194, 199, 200, 0, 1377,
	0, 0, 0, 0, 0, 553, 0, 0, 0, 0,
	0, 0, 1378, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1066, 1072, 1070, 0,
	0, 1067, 0, 0, 1065, 0, 0, 1074, 944, 943,
	1073, 1059, 1069, 1071, 1068, 1063, 1756, 1058, 0, 1076,
	1075, 1077, 1056, 1079, 0, 0, 945, 1083, 1080, 1082,
	1081, 585, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 1060, 1061, 1388, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 570, 586, 587, 781, 0, 1387,
	1376, 1375, 1062, 1064, 1388, 201, 0, 0, 0, 0,
	0, 1377, 1371, 0, 0, 0, 0, 0, 45, 0,
	0, 0, 1383, 0, 1378, 0, 568, 0, 0, 0,
	0, 0, 0, 0, 0, 1389, 1390, 0, 0, 0,
	0, 0, 0, 0, 0, 1385, 0, 0, 588, 598,
	594, 595, 592, 593, 591, 590, 589, 600, 575, 576,
	577, 578, 579, 581, 275, 0, 572, 571, 580, 720,
	944, 943, 0, 0, 0, 0, 1379, 1380, 1382, 0,
	0, 0, 1381, 0, 0, 946, 719, 0, 945, 0,
	0, 718, 44, 1761, 0, 0, 0, 0, 583, 0,
	584, 0, 0, 195, 196, 596, 0, 0, 573, 574,
	0, 0, 0, 0, 0, 0, 2034, 0, 508, 0,
	0, 212, 558, 555, 556, 560, 561, 562, 563, 0,
	0, 0, 559, 564, 565, 566, 721, 2035, 0, 0,
	0, 716, 546, 0, 1383, 582, 0, 0, 0, 0,
	0, 260, 0, 284, 0, 0, 0, 1389, 1390, 0,
	0, 0, 0, 0, 0, 0, 0, 1385, 0, 543,
	544, 0, 0, 0, 0, 599, 0, 545, 0, 0,
	541, 542, 547, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 276, 0, 0, 0, 0, 0, 1379, 1380,
	1382, 0, 0, 597, 1381, 0, 0, 946, 0, 0,
	0, 0, 197, 0, 0, 1761, 0, 0, 0, 1388,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 194, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 295, 296, 297, 298, 299, 300, 301, 302, 303,
	0, 304, 305, 0, 306, 307, 308, 310, 309, 277,
	278, 279, 283, 281, 280, 282, 254, 256, 0, 252,
	255, 261, 257, 258, 259, 273, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 274, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 0, 0, 0, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1388, 45, 0, 0, 0, 601, 570, 586, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 781,
	0, 1387, 1376, 1375, 0, 0, 0, 0, 0, 0,
	0, 45, 0, 1377, 0, 0, 0, 0, 0, 568,
	0, 0, 0, 0, 0, 0, 1378, 0, 0, 0,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 0,
	0, 588, 598, 594, 595, 592, 593, 591, 590, 589,
	600, 575, 576, 577, 578, 579, 581, 0, 0, 572,
	571, 580, 720, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 943, 0, 0, 0, 1027, 0, 719,
	0, 0, 0, 0, 718, 0, 0, 0, 0, 0,
	945, 583, 0, 584, 0, 0, 195, 196, 596, 0,
	0, 573, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 508, 0, 0, 212, 558, 555, 556, 560, 561,
	562, 563, 0, 0, 0, 559, 564, 565, 566, 721,
	0, 0, 0, 0, 716, 546, 1371, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 1383, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1389,
	1390, 0, 543, 544, 1032, 0, 0, 0, 599, 1385,
	545, 0, 0, 541, 542, 547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 597, 0, 0, 0,
	1379, 1380, 1382, 0, 0, 197, 1381, 0, 0, 946,
	0, 0, 0, 720, 535, 0, 0, 1761, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 198, 0,
	719, 194, 199, 200, 0, 718, 0, 0, 0, 0,
	0, 553, 583, 0, 584, 0, 0, 0, 0, 0,
	0, 0, 573, 574, 0, 0, 0, 0, 0, 0,
	0, 0, 508, 0, 947, 212, 558, 555, 556, 560,
	561, 562, 563, 0, 0, 0, 559, 564, 565, 566,
	721, 0, 0, 0, 0, 716, 546, 0, 0, 582,
	0, 0, 0, 0, 0, 0, 781, 0, 1387, 1376,
	1375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1377, 0, 0, 543, 544, 0, 0, 585, 0, 599,
	0, 545, 0, 1378, 541, 542, 547, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	570, 586, 587, 1388, 0, 0, 0, 597, 0, 0,
	0, 201, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 0, 0, 0, 45, 535, 0, 0, 0, 944,
	943, 0, 568, 0, 0, 0, 0, 0, 0, 198,
	0, 0, 194, 199, 200, 0, 0, 945, 0, 0,
	0, 0, 553, 0, 588, 598, 594, 595, 592, 593,
	591, 590, 589, 600, 575, 576, 577, 578, 579, 581,
	0, 0, 572, 571, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1371, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1383, 0, 0, 0, 0, 0, 195,
	196, 596, 0, 0, 0, 0, 1389, 1390, 0, 0,
	0, 0, 0, 0, 0, 0, 1385, 0, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 570, 586, 587, 0, 0, 0, 1379, 1380, 1382,
	0, 0, 201, 1381, 0, 0, 946, 0, 0, 0,
	0, 0, 0, 0, 1798, 45, 0, 0, 0, 0,
	0, 0, 0, 568, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 588, 598, 594, 595, 592,
	593, 591, 590, 589, 600, 575, 576, 577, 578, 579,
	581, 0, 0, 572, 571, 580, 720, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 719, 0, 0, 0, 0, 718, 0,
	0, 0, 0, 0, 0, 583, 0, 584, 0, 0,
	195, 196, 596, 0, 0, 573, 574, 0, 0, 0,
	0, 0, 0, 0, 0, 508, 0, 0, 212, 558,
	555, 556, 560, 561, 562, 563, 0, 0, 0, 559,
	564, 565, 566, 721, 0, 0, 0, 0, 716, 546,
	1388, 0, 582, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 1032, 0,
	0, 0, 599, 0, 545, 0, 0, 541, 542, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	597, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 781, 0, 0, 720, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 719, 194, 199, 200, 0, 718,
	0, 0, 0, 0, 0, 553, 583, 0, 584, 0,
	0, 0, 0, 0, 0, 0, 573, 574, 0, 0,
	0, 0, 0, 0, 0, 0, 508, 0, 0, 212,
	558, 555, 556, 560, 561, 562, 563, 0, 0, 0,
	559, 564, 565, 566, 721, 0, 0, 0, 0, 716,
	546, 0, 0, 582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 544, 0,
	0, 585, 0, 599, 0, 545, 0, 0, 541, 542,
	547, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 570, 586, 587, 0, 0, 0,
	0, 597, 0, 0, 0, 201, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 0, 45, 535,
	0, 0, 0, 0, 0, 0, 568, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 194, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 553, 0, 588, 598,
	594, 595, 592, 593, 591, 590, 589, 600, 575, 576,
	577, 578, 579, 581, 0, 0, 572, 571, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 596, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 601, 570, 586, 587, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 0, 0, 568, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 588,
	598, 594, 595, 592, 593, 591, 590, 589, 600, 575,
	576, 577, 578, 579, 581, 0, 0, 572, 571, 580,
	0, 0, 0, 583, 0, 584, 0, 0, 0, 0,
	0, 0, 0, 573, 574, 0, 0, 0, 0, 0,
	0, 0, 0, 508, 0, 0, 212, 558, 1039, 556,
	1040, 1041, 1042, 1043, 195, 196, 596, 559, 1044, 1045,
	1046, 0, 0, 0, 0, 0, 0, 546, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 0, 0, 0, 0,
	599, 0, 545, 0, 0, 541, 542, 547, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 597, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	0, 0, 0, 0, 0, 720, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	198, 0, 719, 194, 199, 200, 0, 718, 0, 0,
	0, 0, 0, 553, 583, 0, 584, 0, 0, 0,
	0, 0, 0, 0, 573, 574, 0, 0, 0, 0,
	0, 0, 0, 0, 508, 0, 0, 212, 558, 555,
	556, 560, 561, 562, 563, 0, 0, 0, 559, 564,
	565, 566, 721, 0, 0, 0, 0, 716, 546, 0,
	0, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 543, 544, 0, 0, 585,
	0, 599, 0, 545, 0, 0, 541, 542, 547, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 570, 586, 587, 0, 0, 0, 0, 597,
	0, 0, 0, 201, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 0, 0, 0, 45, 535, 0, 0,
	0, 0, 0, 0, 568, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 553, 0, 588, 598, 594, 595,
	592, 593, 591, 590, 589, 600, 575, 576, 577, 578,
	579, 581, 0, 0, 572, 571, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 596, 0, 0, 0, 0, 1037, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 570, 586, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 588, 598, 594,
	595, 592, 593, 591, 590, 589, 600, 575, 576, 577,
	578, 579, 581, 0, 0, 572, 571, 580, 1225, 1226,
	1227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 0, 584, 0, 0,
	0, 0, 0, 0, 0, 573, 574, 0, 0, 0,
	0, 0, 195, 196, 596, 508, 0, 0, 212, 558,
	555, 556, 560, 561, 562, 563, 0, 0, 0, 559,
	564, 565, 566, 0, 0, 0, 0, 0, 0, 546,
	0, 0, 582, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 0, 0,
	0, 0, 599, 0, 545, 0, 0, 541, 542, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	597, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 553, 583, 0, 584, 0,
	0, 0, 0, 0, 0, 0, 573, 574, 0, 0,
	0, 0, 0, 0, 0, 0, 508, 0, 0, 212,
	558, 555, 556, 560, 561, 562, 563, 0, 0, 0,
	559, 564, 565, 566, 0, 0, 0, 0, 0, 0,
	546, 0, 0, 582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 544, 0,
	0, 585, 0, 599, 0, 545, 0, 0, 541, 542,
	547, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 570, 586, 587, 0, 0, 0,
	0, 597, 0, 0, 0, 201, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 0, 45, 535,
	0, 0, 0, 0, 0, 0, 568, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 194, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 553, 0, 588, 598,
	594, 595, 592, 593, 591, 590, 589, 600, 575, 576,
	577, 578, 579, 581, 0, 0, 572, 571, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 196, 596, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 601, 570, 586, 587, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 0, 0, 568, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 588,
	598, 594, 595, 592, 593, 591, 590, 589, 600, 575,
	576, 577, 578, 579, 581, 0, 0, 572, 571, 580,
	0, 0, 0, 583, 0, 584, 0, 0, 0, 0,
	0, 0, 0, 573, 574, 0, 0, 0, 0, 0,
	0, 0, 0, 508, 0, 0, 212, 558, 1039, 556,
	1040, 1041, 1042, 1043, 195, 196, 596, 559, 1044, 1045,
	1046, 0, 0, 0, 0, 0, 0, 546, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 0, 0, 0, 0,
	599, 0, 545, 0, 0, 541, 542, 547, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 597, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 553, 583, 0, 584, 0, 0, 0,
	0, 0, 0, 0, 573, 574, 0, 0, 0, 0,
	0, 0, 0, 0, 1301, 0, 0, 212, 558, 555,
	556, 560, 561, 562, 563, 0, 0, 0, 559, 564,
	565, 566, 0, 0, 0, 0, 0, 0, 546, 0,
	0, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 543, 544, 0, 0, 585,
	0, 599, 0, 545, 0, 0, 541, 542, 547, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 570, 586, 587, 0, 0, 0, 0, 597,
	0, 0, 0, 201, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 0, 0, 0, 45, 535, 0, 0,
	0, 0, 0, 0, 568, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 553, 0, 588, 598, 594, 595,
	592, 593, 591, 590, 589, 600, 575, 576, 577, 578,
	579, 581, 0, 0, 572, 571, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 596, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 570, 586, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 588, 598, 594,
	595, 592, 593, 591, 590, 589, 600, 575, 576, 577,
	578, 579, 581, 0, 0, 572, 571, 580, 0, 0,
	0, 583, 0, 584, 0, 0, 0, 0, 0, 0,
	0, 573, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 532, 0, 0, 212, 558, 555, 556, 560, 561,
	562, 563, 195, 196, 596, 559, 564, 565, 566, 0,
	0, 0, 0, 0, 0, 546, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 0, 0, 0, 0, 599, 0,
	545, 0, 0, 541, 542, 547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 597, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 535, 0, 0, 0, 0, 0,
	583, 0, 584, 0, 0, 0, 0, 0, 198, 0,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	508, 553, 0, 212, 558, 555, 556, 560, 561, 562,
	563, 0, 0, 0, 559, 564, 565, 566, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 543, 544, 0, 0, 0, 0, 599, 0, 545,
	0, 0, 541, 542, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 0, 0,
	0, 0, 0, 0, 0, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 601,
	570, 586, 587, 535, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 0, 0, 0, 198, 0, 0,
	194, 199, 200, 0, 45, 0, 0, 0, 0, 0,
	553, 0, 568, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 275, 0, 0,
	0, 0, 0, 0, 588, 598, 594, 595, 592, 593,
	591, 590, 589, 600, 575, 576, 577, 578, 579, 581,
	0, 0, 572, 571, 580, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 585, 0, 0, 195,
	196, 596, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 570,
	586, 587, 0, 0, 260, 0, 284, 0, 0, 0,
	201, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 568, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 276, 0, 0, 0, 0,
	0, 0, 0, 588, 598, 594, 595, 592, 593, 591,
	590, 589, 600, 575, 576, 577, 578, 579, 581, 0,
	0, 572, 571, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	596, 0, 0, 294, 295, 296, 297, 298, 299, 300,
	301, 302, 303, 0, 304, 305, 0, 306, 307, 308,
	310, 309, 277, 278, 279, 283, 281, 280, 282, 254,
	256, 0, 252, 255, 261, 257, 258, 259, 273, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	460, 285, 286, 287, 288, 289, 290, 291, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 253,
}

var yyPact = [...]int16{
	1084, -1000, -265, -1000, -1000, -1000, 1817, 2607, 2428, 2428,
	770, 1834, -1000, -1000, -1000, 8768, 761, 759, 757, 331,
	714, 364, 869, 2440, 641, 780, 641, 641, -1000, -222,
	-174, -1000, -11, 1623, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 788, -1000, -1000, -1000, 1621, 2293, 776, 2440,
	2440, -1000, 736, 1589, -1000, 13001, 13001, 13001, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 372, 364, 364, 641, 244, 641, 1833, 567,
	1830, 364, -1000, -1000, 884, 1070, -1000, 1973, 881, -1000,
	-1000, 364, 641, 364, 2440, -1000, -1000, -1000, -1000, 772,
	2428, -1000, 765, 1003, 2440, 2201, 819, 818, 2440, 2440,
	233, 5229, 1282, -152, 80, -1000, -1000, -1000, -1000, 880,
	1678, -1000, -1000, -1000, 1678, 173, 1816, 1678, 1816, -1000,
	1678, 1816, 132, 132, 132, 132, 132, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1814, 1674, -1000, 1678, 1678, 1678,
	1678, 1678, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1812, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1803, 202, 1803, 1735, 1735, -1000,
	-1000, 1282, 1282, 1811, 2440, 364, 1828, 1825, 2440, -212,
	2440, 2440, 2041, -1000, -1000, -1000, 281, 2440, 567, 9947,
	1955, 16114, 12305, -1000, 2440, -1000, -1000, 2440, -1000, 2440,
	936, 526, 722, 689, 807, 853, 2440, 705, 1911, 923,
	872, 9161, -1000, 1918, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1808, 1117, 364, 503, 212, 1650, 654, 763,
	600, 1359, 491, -1000, -1000, -1000, 1166, -1000, 364, -1000,
	2082, -1000, -1000, 501, -1000, 499, 1062, 1241, 2440, 1807,
	192, 1806, 15813, 1218, -1000, -273, -1000, 59, -1000, 364,
	-1000, 1194, 132, 1678, -1000, 132, 1192, 132, 132, -1000,
	-1000, 903, 1934, 903, 903, 903, 903, 1240, 1240, -43,
	-43, -1000, -1000, -1000, 1217, -1000, 1204, 1803, -1000, -1000,
	-1000, 1203, -1000, 2440, 364, 1802, 1824, 2440, 2440, 1971,
	683, -1000, -1000, 1968, 1967, 1619, -1000, -1000, 268, -1000,
	-1000, 567, 2041, -1000, 871, -1000, -1000, -1000, -1000, -1000,
	1800, -1000, -1000, 1652, 817, -1000, 1662, 8768, 451, 364,
	-1000, 496, -1000, 491, 364, 364, 364, 364, 364, 630,
	7196, 520, 716, 803, 364, 641, 1172, 11519, 10340, 233,
	-1000, -1000, -1000, 3664, 429, 2058, 2001, 430, 85, -177,
	1355, -1000, -1000, 1798, -1000, -1000, -1000, 14516, -1000, 1348,
	-1000, 1323, -1000, 1312, 1301, 0, 364, -1000, -183, 108,
	68, -1000, -1000, 1650, -1000, 640, 14516, 1963, -1000, 1939,
	964, 187, 15008, -1000, -1000, 1227, 842, -1000, -1000, -1000,
	-1000, 15008, 15008, 15008, 15008, 15008, 15008, 15008, -1000, -1000,
	-1000, -1000, 99, -1000, 14038, -1000, -1000, 1239, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 868, 866, -1000,
	-268, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
	1650, 1650, 14516, 1650, 1907, 1650, 1650, 1650, 1650, 1650,
	1650, 1650, 1650, 1650, 1650, 1650, 4158, 1650, 1650, 1650,
	1650, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1522, 903,
	132, 903, 1516, 1492, 903, 903, -1000, -1000, 1293, 950,
	-1000, -1000, -1000, -1000, 1587, -1000, 1585, -1000, 200, 194,
	-1000, 1481, 1644, -1000, 1583, 1665, 1821, 3664, 2440, 1796,
	1795, 1653, 641, 1653, 1998, 337, 2440, 2041, 290, 2041,
	1615, 10733, 1240, 364, 364, 2440, 364, -1000, 364, -1000,
	-1000, -1, 1793, 709, -1000, -1000, -1000, 702, 364, -1000,
	451, 8768, -1000, 364, -1000, -1000, 364, 364, 364, 563,
	-1000, 1237, -1000, -1000, 920, 862, 8375, -1000, -1000, 1577,
	-1000, 324, 1678, 1678, 14516, 1952, 1952, 1952, 1952, 855,
	251, -1000, 257, 589, 589, -185, 483, 455, -177, 1650,
	1660, 1791, -1000, 3664, 846, -1000, 14516, 153, 1650, 1650,
	1650, 1650, 14038, -1000, -1000, -1000, -1000, -1000, -177, 1787,
	-1000, -1000, -1000, 1062, -1000, 1777, 1774, -1000, 1768, 14516,
	290, 251, 1104, 165, -1000, 1641, -1000, 1202, 15008, 15008,
	15008, 15008, 15008, 15008, 15008, 15008, 15008, 15008, 15008, 15008,
	4421, 1224, 3553, -1000, 682, 682, 33, 33, 33, 33,
	33, 33, 84, -1000, 1259, 67, 1552, 2025, 2088, 14038,
	730, -1000, 13383, -1000, 9947, 10733, 14365, 13887, 13887, 13887,
	13887, 12677, 14516, 13887, 13887, 13887, 13887, 1966, 1055, 730,
	1386, 1996, 1259, 1259, 1259, 1191, -1000, 1259, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 140, -1000, -1000, -269,
	-1000, -271, -1000, -1000, 13887, 13887, 13887, 13887, -1000, -1000,
	903, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 132,
	1236, 132, 72, 70, -1000, 1198, -1000, 1197, 3664, 364,
	2440, 1462, 1640, 1952, 1952, 1952, 1952, 1754, 290, 3664,
	-1000, 1653, 2440, -1000, 677, 2013, -1000, -1000, 1995, -1000,
	1637, -1000, -1000, 1631, 2440, -1000, 1574, 1751, 217, -1000,
	-1000, 511, 1740, 174, 417, 1738, 1635, 3664, 774, 1131,
	13001, 364, 557, 364, -1000, -18, 583, -1000, -1000, 364,
	-1000, -1000, 1146, 364, -1000, -1000, -1000, -1000, 2742, 3664,
	1952, 1196, -1000, -1000, -1000, 1952, 1079, -1000, -1000, -1000,
	-1000, -1000, -1000, 10733, -1000, 279, -1000, 1116, -1000, -1000,
	1129, 336, 1093, -1000, 364, -177, 1737, 14516, 14516, 332,
	3664, 1562, 362, 14516, 14516, 1155, -1000, -1000, 395, 14857,
	1179, 1123, 15008, 864, 15008, 15942, 15942, 15942, 15942, 15008,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1270, -1000,
	1653, 1386, 1259, 1259, -1000, 10733, 1650, -1000, 1189, -1000,
	1187, 1441, 846, 1556, -1000, -58, 14516, 1736, 964, -1000,
	927, 423, 33, 196, 196, 111, 111, 111, 111, 111,
	170, 170, -1000, -48, -1000, 71, -1000, -1000, -1000, -1000,
	-1000, -1000, 1235, -1000, -1000, -1000, -1000, 14516, -1000, 2008,
	2023, 1653, 1965, 1259, 1913, -1000, 1259, 13887, 1472, 1552,
	-1000, 1523, -1000, 852, 1650, -1000, 69, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3440, 1472, 1523,
	1472, 1472, 1472, 839, 1632, 15486, 1678, 1227, 1678, 1735,
	-1000, -1000, 223, 1678, 221, -1000, -1000, -1000, -1000, 1735,
	-1000, -1000, -1000, -1000, -1000, 1678, 1678, -1000, -1000, 1678,
	1678, -1000, 1678, 1678, 922, 1472, 1651, 1642, 1472, 13887,
	-1000, 1071, -1000, 14516, 1259, -1000, 2440, -1000, -1000, -1000,
	-1000, 1259, -1000, -1000, -277, -282, 1472, 1259, 1630, 1472,
	1472, -1000, 903, -1000, 903, -1000, -1000, 1431, 1413, 1410,
	1733, 1732, -233, 3664, 1511, 1509, 1259, 1960, 10733, -1000,
	-1000, -1000, -1000, -1000, 310, 1050, 364, 4568, 1987, 132,
	-1000, 6410, 801, 364, -1000, 3664, 3664, 1731, 1728, 1727,
	14516, 14516, 302, 1503, 15008, 1127, 380, -1000, 1118, -1000,
	-1000, 416, 1721, 141, 1720, 751, 1114, 13001, 532, -1000,
	-1000, 916, 1813, 3168, 180, -1000, 1245, 1033, 1225, 1001,
	999, 997, 995, 994, 981, 966, 963, 962, 961, -1000,
	-1000, 1399, -1000, 1952, 1650, -1000, -1000, 429, 2081, -1000,
	-1000, 429, 2060, 1719, 1715, 3664, 846, 1354, -1000, 271,
	239, 1650, 1650, 1498, 2742, -1000, -25, 395, 487, -1000,
	-1000, 1151, -1000, -1000, 187, 15008, 15008, 15008, -1000, -1000,
	-1000, -1000, 14038, 1179, 15008, 15008, 15008, 3055, 15008, 187,
	187, 187, 187, 187, 3075, 1259, 1259, -1000, -1000, 1475,
	-1000, 14516, -1000, 1377, -1000, -1000, 362, 605, -1000, -1000,
	919, -1000, 1367, 184, 730, 1944, 14516, 14516, 2025, -1000,
	1653, -1000, -1000, -1000, 1966, -1000, -1000, 1138, -1000, 1472,
	13887, -263, -1000, -1000, -1000, 399, -1000, -1000, 7982, 13887,
	-1000, 15335, 4421, -263, -263, -1000, -1000, 5215, 1224, 14516,
	-1000, 1194, 328, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5215, -1000, 15008, 15008, 15008,
	15008, -38, 1521, 1040, -1000, 14516, 610, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-233, 3664, 3664, 2034, 1709, 1300, 2034, 2742, -1000, 1653,
	1595, 304, 242, 14516, -1000, 4060, -1000, 4568, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2025, 14516, -1000, -1000, -1000, -1000, -1000, 364, 4831, 364,
	364, 364, 512, 14516, 385, 14516, -1000, -1000, -1000, -1000,
	-1000, 1050, 303, 1281, 6410, 6410, 6410, 4836, 6410, 6410,
	777, -1000, 1467, 1460, 3664, 3664, 3664, 917, 1446, 1703,
	1701, -1000, 187, -1000, 13001, -1000, 1695, 3664, 3664, 1693,
	1683, 14516, 15008, 1115, 341, -1000, 1097, -1000, 415, 1106,
	-1000, 364, -1000, -127, 3168, 364, -1000, 1193, -1000, -1000,
	1100, 1190, 1100, 1100, 1100, 1100, 1100, 315, 1169, 617,
	1952, -1000, 251, 589, 251, 589, 10733, 3664, 1444, 362,
	2034, 14516, 373, 298, 14516, 14516, 2742, 1813, -1000, -1000,
	-1000, -1000, 187, 14038, 187, 14038, 187, 14038, -1000, 3055,
	187, 518, -1000, 15008, 3055, 15008, -1000, -1000, 521, 10733,
	846, -1000, -1000, 2055, 251, -97, 680, -1000, 50, -1000,
	2077, 890, 734, 1627, -1000, 484, 2008, 1259, 1845, -1000,
	-1000, -1000, -1000, 1650, -1000, -1000, 848, 1259, -1000, -1000,
	-1000, -1000, 1259, 1678, -1000, 1259, 728, -1000, -1000, 1259,
	2600, 2448, 82, 620, 1650, -20, -1000, 730, 14516, 2034,
	1264, 1434, 2742, 14516, 290, -233, 2742, -1000, -1000, -60,
	14516, 4568, 6525, 730, 6525, -1000, 4568, 2317, 2008, 12839,
	662, 1486, 1014, 1626, 558, -1000, 6017, 1119, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 364, 2051, 2050, 2044, 2036, 13620, 14516,
	14516, -1000, 237, 300, -1000, -1000, -1000, -1000, -1000, 5624,
	1678, 1674, -1000, -1000, -1000, -1000, -1000, 429, 1428, 1424,
	1385, 371, 2034, 14516, 14516, -1000, 3664, 1382, 1374, 3664,
	3664, 715, 187, -1000, 13001, -1000, 1672, -1000, -1000, 1650,
	1371, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1062, -1000, 1062, 1365, 1363, 2742, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1354, 1354, 1813,
	429, 67, 67, 67, -1000, 15008, 187, -1000, 187, 2440,
	-1000, 362, 589, 589, -1000, -1000, -1000, -1000, 256, 1008,
	964, 964, 1168, 58, -1000, 2021, -1000, -1000, 1900, 14516,
	14516, 14516, -1000, 1944, -1000, 13887, -1000, 805, 9554, -1000,
	-1000, -1000, -1000, 15008, -1000, -1000, 15008, -1000, 15008, -1000,
	15008, -1000, 15008, 15008, 1259, 1221, 730, 2742, 2034, 2742,
	1813, 730, 1344, 2034, 1813, -1000, -249, 730, 4060, 4149,
	-1000, -1000, 352, 12624, -1000, 1944, 4568, 1015, -1000, 1038,
	-1000, 6525, 2236, 2440, 1391, 1526, 1753, -1000, -1000, -1000,
	1957, 439, 790, 364, 295, 13001, -1000, -1000, 1624, 6803,
	65, -1000, -1000, -1000, 941, 841, 333, -1000, 1927, -1000,
	-1000, 4831, 1947, -1000, -1000, -1000, -1000, -1000, 6525, -1000,
	1538, 1259, 6525, -1000, 251, 2742, 2742, -1000, -30, -1000,
	1332, 1308, 1305, -1000, 429, 1299, 1297, 343, -1000, 3664,
	364, -1000, 3168, 429, 429, 516, 2742, 1813, 2034, 2034,
	-1000, 251, -1000, -1000, -1000, 187, 1669, -1000, 586, 488,
	964, -1000, 964, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	808, 1894, 730, 730, -1000, -1000, 1639, -1000, 2017, 1259,
	-1000, 2812, 2812, 2812, 2812, 2812, 308, -1000, -1000, 1813,
	2742, -1000, -1000, -1000, 2742, -1000, 14516, 12603, -1000, -1000,
	-1000, -1000, 3912, 6132, 621, 3782, 387, 2440, -1000, 387,
	1515, 1014, -1000, -1000, 1386, 1014, 1014, 1014, 1014, 1014,
	-1000, 1866, 1865, -1000, 1880, 1854, 1853, 2440, 1287, 439,
	867, 1650, -1000, 2513, -1000, -1000, -1000, 1957, 1985, -1000,
	7589, 1624, 65, 1599, -1000, 44, 32, 13030, 10733, 903,
	-1000, -1000, -1000, -1000, -1000, 10733, 3304, -1000, 4134, -1000,
	1813, 1813, -1000, 2034, 2034, -1000, 251, 2742, 2742, -32,
	1285, 1259, -1000, 251, 251, 2440, 1813, 429, -1000, -1000,
	-1000, 10733, 251, 2065, 251, 2059, -1000, -1000, -1000, 834,
	-1000, 2034, 1014, 14516, -1000, -1000, -1000, -1000, -1000, -1000,
	1259, 278, -132, -1000, -1000, 1813, 730, -1000, -1000, 4233,
	-1000, -1000, 14516, -1000, 14516, 6525, -1000, 1402, 1650, -1000,
	2034, 1014, 1592, 1485, -1000, 940, 1753, 1713, 1820, 1543,
	-1000, -1000, -1000, -1000, 1864, -1000, 1862, -1000, -1000, -1000,
	-1000, -87, 755, 752, 745, 364, -1000, 1653, -1000, 1599,
	65, 29, -1000, -1000, -1000, -1000, 730, 935, -1000, 1559,
	-1000, 4596, -1000, -1000, -1000, -1000, -1000, 1813, 1813, -1000,
	-1000, -1000, -1000, -1000, 1668, -1000, 251, 1280, -1000, 589,
	-1000, 589, 10733, 2031, 1554, 1290, -1000, 730, -1000, 1877,
	-44, -148, -1000, 569, 4568, 12961, 13323, 1664, 1386, 1650,
	-1000, 11126, 364, 2025, 1592, -1000, 2034, 1386, 14516, -1000,
	-1000, 14516, 1657, -1000, 14516, -1000, -1000, -1000, -1000, 1655,
	1650, 1650, 1650, 1269, -1000, -1000, -1000, -1000, 31, 37,
	-1000, 14516, -1000, -1000, -1000, 10733, -1000, -1000, 429, 429,
	-1000, 2027, 2011, -1000, 1259, 14516, -1000, 1871, -1000, -1000,
	3418, 1015, -1000, -1000, 1943, 1292, 1392, -1000, -1000, 13534,
	1259, 1274, -1000, -1000, 830, -1000, -1000, 1269, 2008, -1000,
	2025, -1000, 730, 730, 290, 730, -175, 290, 290, 290,
	1157, 364, -1000, -1000, -1000, 730, 1267, 251, 251, -1000,
	14516, 14516, -1000, -1000, -75, 4551, 414, -1000, 1650, -1000,
	-1000, 1549, 11912, 364, -1000, -1000, 2008, 1263, 1258, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1251, 1251,
	1251, 867, -1000, -1000, -1000, -1000, 730, 1538, -143, 561,
	2064, -1000, 1650, -1000, 1653, -1000, -1000, -1000, -1000, -1000,
	-175, -1000, -1000, -1000, -87, -158, -1000, 1386, 1392, 1259,
	-1000, -1000, -1000, 1387, -1000,
}

var yyPgo = [...]int16{
	0, 2319, 20, 228, 2318, 2313, 2312, 2311, 2309, 2308,
	2307, 2306, 2305, 2304, 2303, 19, 38, 39, 41, 48,
	2301, 2298, 2296, 2295, 2292, 2291, 77, 2289, 2288, 2287,
	2282, 86, 2281, 2275, 2273, 2271, 66, 50, 111, 91,
	2505, 32, 43, 42, 49, 2270, 28, 2268, 2267, 61,
	2263, 36, 2260, 2259, 52, 2258, 2257, 7, 503, 105,
	2253, 44, 2251, 2249, 114, 3144, 2003, 1898, 1873, 1628,
	2246, 87, 8, 62, 4, 12, 13, 2244, 132, 1,
	2240, 89, 82, 2239, 2238, 2237, 46, 2236, 59, 99,
	14, 67, 2233, 15, 11, 71, 55, 30, 18, 2,
	53, 33, 2232, 26, 34, 29, 2227, 65, 2223, 119,
	2223, 75, 88, 5, 2634, 0, 340, 85, 2222, 116,
	2221, 1489, 104, 37, 17, 60, 80, 2218, 78, 95,
	70, 97, 84, 2212, 81, 2211, 2210, 2208, 2206, 2205,
	2539, 426, 2204, 140, 35, 2200, 2199, 2198, 120, 122,
	101, 108, 107, 1694, 2196, 2195, 2193, 2189, 2186, 68,
	63, 98, 2185, 69, 93, 25, 233, 2181, 2179, 2177,
	2176, 2172, 2171, 2169, 96, 2168, 79, 1740, 27, 271,
	40, 2167, 2166, 2165, 2164, 2164, 2157, 2156, 2153, 73,
	2152, 2151, 90, 72, 115, 2151, 2151, 2150, 2149, 64,
	74, 2148, 125, 112, 2143, 109, 31, 45, 304, 54,
	2140, 2139, 2137, 6, 3, 2135, 94, 47, 2133, 113,
	2132, 83, 2123, 92, 2121, 21, 2119, 2109, 51, 2108,
	464, 2085, 110, 2101, 2100, 2099, 106, 521, 864, 2097,
	118, 117, 2094, 124,
}

var yyR1 = [...]uint8{
	0, 233, 234, 234, 1, 1, 1, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 22, 22, 22, 22, 22, 22, 236, 236, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 29, 29,
	7, 8, 8, 8, 239, 239, 49, 49, 96, 96,
	9, 9, 9, 9, 10, 10, 210, 210, 209, 211,
	211, 11, 11, 11, 11, 11, 204, 204, 204, 204,
	204, 12, 12, 207, 207, 207, 15, 15, 15, 15,
	16, 16, 17, 17, 17, 19, 19, 101, 101, 105,
	105, 105, 106, 106, 106, 106, 222, 222, 127, 127,
	235, 235, 240, 240, 240, 240, 240, 240, 240, 202,
	202, 202, 202, 203, 203, 203, 203, 205, 205, 206,
	206, 206, 206, 206, 206, 208, 208, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 13, 13,
	30, 30, 73, 73, 14, 112, 112, 183, 183, 183,
	184, 184, 184, 184, 184, 184, 186, 186, 187, 187,
	119, 119, 188, 188, 25, 168, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 152, 152, 152, 130, 130,
	130, 130, 130, 130, 130, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	194, 194, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 196, 197, 198, 190, 190, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 142, 142, 142, 142, 142, 142, 142, 189,
	189, 185, 185, 185, 185, 134, 134, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 133, 133, 133,
	133, 133, 133, 133, 138, 138, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 131, 131, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 139,
	139, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	151, 151, 140, 140, 149, 149, 150, 150, 150, 141,
	141, 141, 148, 148, 148, 145, 145, 146, 146, 147,
	147, 147, 143, 143, 143, 144, 144, 144, 154, 179,
	179, 179, 181, 181, 182, 182, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	167, 167, 199, 199, 200, 200, 201, 201, 178, 178,
	178, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 166, 166, 176, 176, 176, 176, 176,
	177, 177, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 175, 161, 161, 161, 161, 161, 162, 162,
	163, 163, 163, 163, 155, 155, 156, 156, 157, 157,
	158, 158, 158, 158, 158, 158, 160, 160, 159, 159,
	159, 159, 159, 159, 192, 192, 192, 226, 226, 226,
	226, 226, 226, 227, 227, 193, 193, 164, 164, 165,
	165, 172, 172, 172, 172, 241, 241, 170, 170, 170,
	171, 171, 171, 242, 26, 27, 27, 28, 28, 28,
	33, 33, 33, 31, 31, 32, 32, 38, 38, 37,
	37, 39, 39, 39, 39, 118, 118, 118, 117, 117,
	223, 223, 223, 223, 223, 41, 41, 42, 42, 43,
	43, 44, 44, 44, 213, 213, 212, 212, 214, 214,
	214, 214, 214, 214, 214, 214, 56, 56, 93, 93,
	93, 97, 97, 45, 45, 45, 45, 46, 46, 47,
	47, 48, 48, 125, 125, 124, 124, 124, 123, 123,
	50, 50, 50, 52, 51, 51, 51, 51, 53, 53,
	55, 55, 54, 54, 57, 57, 57, 57, 58, 58,
	95, 95, 40, 40, 40, 40, 40, 40, 40, 40,
	108, 108, 60, 60, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 70, 70,
	70, 70, 70, 70, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 36, 36, 71, 71, 71,
	78, 72, 72, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 68, 68, 68, 68, 68, 68,
	68, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 243, 243, 69, 69,
	69, 69, 34, 34, 34, 34, 34, 126, 126, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 82, 82, 35, 35, 80, 80, 81, 111,
	111, 83, 83, 79, 79, 79, 79, 215, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 61, 61,
	84, 84, 85, 85, 224, 224, 225, 86, 86, 87,
	87, 88, 89, 89, 89, 90, 90, 90, 90, 91,
	91, 91, 63, 63, 63, 63, 63, 63, 92, 92,
	94, 94, 94, 94, 98, 98, 74, 74, 76, 76,
	75, 77, 99, 99, 103, 100, 100, 104, 104, 104,
	104, 104, 23, 24, 102, 102, 102, 120, 120, 120,
	109, 109, 110, 110, 107, 107, 115, 115, 116, 116,
	116, 116, 116, 121, 121, 121, 122, 122, 216, 216,
	216, 217, 217, 217, 218, 218, 219, 219, 220, 220,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 229,
	229, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 231, 231, 232, 232, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 114, 114, 114,
	114, 114, 114, 114, 114, 237, 238,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 2, 13, 12,
	14, 12, 13, 12, 10, 7, 10, 7, 11, 11,
	9, 13, 14, 5, 8, 4, 8, 4, 7, 10,
	7, 8, 6, 9, 8, 9, 9, 8, 10, 10,
	11, 7, 6, 10, 9, 10, 10, 9, 11, 12,
	13, 13, 5, 12, 11, 9, 6, 13, 13, 14,
	14, 6, 7, 6, 6, 10, 12, 10, 11, 12,
	13, 12, 13, 7, 7, 11, 13, 6, 6, 8,
	7, 6, 6, 8, 8, 10, 10, 1, 1, 4,
	6, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 1, 1, 1, 3, 0, 4,
	3, 4, 5, 4, 2, 6, 1, 3, 3, 0,
	1, 2, 2, 2, 3, 5, 0, 2, 2, 2,
	2, 3, 5, 1, 2, 3, 7, 10, 1, 1,
	5, 5, 3, 5, 3, 1, 3, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	0, 3, 0, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 4, 2, 3, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 4,
	1, 1, 0, 1, 2, 0, 3, 0, 2, 2,
	0, 2, 2, 2, 2, 2, 0, 2, 0, 3,
	0, 1, 0, 2, 4, 4, 0, 1, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 3, 1,
	1, 1, 1, 1, 3, 2, 2, 3, 2, 4,
	2, 4, 2, 2, 3, 2, 3, 2, 7, 9,
	3, 3, 6, 9, 11, 9, 11, 5, 8, 14,
	14, 6, 6, 8, 8, 5, 8, 7, 4, 0,
	2, 4, 1, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 3, 1, 2, 1, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 4, 2, 3, 1, 3, 0,
	2, 0, 2, 2, 3, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 3, 2,
	2, 2, 1, 1, 0, 1, 1, 3, 3, 2,
	2, 2, 1, 1, 1, 1, 1, 4, 5, 4,
	4, 4, 1, 2, 2, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	3, 3, 0, 3, 3, 0, 1, 0, 1, 0,
	2, 1, 0, 3, 3, 0, 1, 2, 6, 0,
	1, 4, 1, 2, 1, 3, 2, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	5, 2, 3, 3, 2, 3, 2, 3, 3, 2,
	2, 3, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 5, 2, 2, 3, 4, 2, 2,
	2, 2, 1, 4, 7, 7, 10, 10, 13, 11,
	1, 1, 2, 2, 10, 8, 11, 9, 7, 5,
	6, 7, 8, 9, 8, 9, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 1, 0, 1, 1,
	1, 2, 2, 1, 2, 0, 3, 0, 1, 1,
	3, 0, 4, 1, 3, 2, 1, 1, 2, 1,
	1, 1, 1, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 3, 6, 4, 7, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 0, 4, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 8, 1, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	0, 4, 1, 3, 3, 2, 3, 2, 1, 2,
	0, 3, 1, 1, 3, 4, 6, 4, 6, 4,
	6, 3, 4, 4, 5, 5, 3, 4, 3, 3,
	3, 3, 5, 6, 2, 4, 3, 3, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 2, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 6, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 1, 1, 1,
	1, 2, 1, 3, 4, 5, 5, 5, 5, 6,
	4, 4, 4, 6, 6, 8, 6, 4, 6, 6,
	8, 6, 8, 6, 8, 6, 8, 9, 7, 5,
	4, 4, 3, 3, 3, 1, 3, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 2, 2, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 3,
	3, 1, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 0, 2, 1, 1, 3, 5, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	0, 3, 0, 2, 1, 3, 1, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	1, 3, 1, 1, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	5, 3, 1, 3, 1, 2, 1, 1, 1, 1,
	0, 3, 0, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	2, 0, 2, 2, 0, 1, 4, 3, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -233, -1, -20, -21, -22, -25, 126, 132, 133,
	127, 71, -234, 401, -168, 58, -226, -227, 285, -188,
	139, 152, 174, 175, 177, 371, 136, 137, 383, 384,
	156, 386, 79, -231, -230, 6, 8, 9, 10, 165,
	147, 174, 21, -115, 61, 311, -231, 137, -107, 138,
	175, 142, 56, -169, -152, -116, 63, 36, -115, 307,
	151, -113, -114, 131, 202, 374, 80, 25, 27, 293,
	299, 201, 84, 120, 16, 85, 208, 383, 384, 119,
	76, 351, 126, 52, 343, 344, 341, 206, 354, 355,
	342, 300, 213, 20, 31, 10, 28, 159, 24, 113,
	128, 203, 89, 88, 162, 166, 167, 26, 160, 75,
	209, 211, 19, 55, 150, 11, 373, 13, 14, 388,
	375, 143, 142, 100, 387, 138, 50, 8, 122, 29,
	97, 46, 157, 212, 48, 98, 17, 345, 346, 34,
	361, 168, 115, 53, 40, 389, 81, 390, 73, 56,
	314, 207, 79, 15, 51, 169, 391, 210, 395, 99,
	129, 350, 176, 49, 204, 392, 136, 205, 6, 357,
	33, 158, 47, 137, 301, 393, 87, 141, 74, 5,
	156, 9, 394, 54, 57, 347, 348, 349, 38, 86,
	12, 153, 365, 77, 178, 396, 397, 152, 175, 179,
	180, 298, 138, 138, 138, 140, 222, 140, -115, -115,
	-79, -109, 61, -114, -121, 143, 63, -54, -121, 61,
	-114, -109, 137, -109, -109, 386, 383, 384, 350, 56,
	59, 135, 56, -54, 314, 137, -54, -54, 137, 145,
	60, 59, -153, -130, -134, -131, -136, -135, -137, -115,
	-132, -133, 258, 363, 255, 259, 256, 261, 262, 263,
	120, 260, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 264, 276, 33, 161, 248, 249, 250,
	253, 252, 254, 251, 122, 277, 278, 279, 280, 281,
	282, 283, 284, 285, 229, 230, 231, 232, 233, 234,
	235, 236, 237, 238, 240, 241, 243, 244, 245, 247,
	246, -153, -153, -115, 56, 221, -115, -115, -109, 223,
	-109, 56, -202, 19, 201, 202, 214, 56, -115, 123,
	81, 25, 123, -115, -109, -115, -54, 137, -230, 137,
	131, 127, 128, 129, -54, -54, 314, 129, 131, -54,
	-121, -172, -241, 366, 37, -152, -154, -161, -155, -156,
	-157, -158, -173, -162, 146, 144, 156, 399, 148, 149,
	285, -166, 150, 138, 157, 73, 81, -194, 146, -197,
	56, 293, 299, 144, 157, 156, 399, 71, 147, 25,
	373, 375, 31, 32, -147, 402, 287, -145, 296, 123,
	-140, 58, -140, -139, 257, -141, 58, -140, -141, -140,
	-141, -143, 259, -143, -143, -143, -143, 58, 58, -140,
	-140, -140, -140, -140, 58, -149, 58, -138, 242, -149,
	-150, 58, -150, 56, 57, -54, -115, 56, 56, -54,
	-222, 396, 397, -54, -54, -205, -203, 8, 9, 10,
	215, -54, -202, -116, -122, -113, -114, -121, 26, -130,
	276, -122, -113, -54, -49, -54, -49, 145, -119, 146,
	-161, 144, 156, 150, 145, 145, 146, 141, 145, 131,
	131, 127, 128, -54, 141, 41, 97, 123, -170, 59,
	-116, 71, 36, 58, -193, 56, 81, -164, -115, 157,
	-166, 61, 138, -192, 157, 383, 384, -237, 58, -166,
	138, -166, 61, 138, 157, 61, 157, 73, 19, -115,
	9, 157, 157, -193, 63, -54, 58, -190, 374, 16,
	58, -65, 58, -64, -60, 161, -79, -215, -77, -219,
	-78, 120, 121, 109, 110, 117, 82, 122, -68, -66,
	-67, -69, -218, 188, -237, 63, 64, -115, 62, 72,
	65, 66, 67, 68, 73, 74, 75, -121, 319, -75,
	287, 360, 359, 48, 49, 351, 352, 353, 354, 355,
	361, 356, 85, 38, 40, 264, 288, 289, 341, 349,
	348, 347, 345, 346, 343, 344, 398, 143, 342, 115,
	350, 286, -198, 65, 403, -146, 297, -115, 65, -143,
	-140, -143, 65, 61, -143, -143, -144, 120, 119, 33,
	-144, -144, -144, -144, -151, 63, -151, -148, 365, 366,
	-148, 65, 65, -149, 65, -54, -115, 58, 56, -54,
	-54, 25, 140, 25, -183, 25, 56, 59, 215, -202,
	-205, 123, 58, 57, 141, 59, 11, -152, -236, 138,
	157, -115, 157, -115, -115, -115, -115, -115, 146, -161,
	-119, 145, -152, 146, -161, 156, 145, 145, 146, 131,
	-115, -109, 63, 73, -115, -122, 90, -116, -241, -177,
	-174, -115, 157, -114, 58, -68, -66, -67, -69, -121,
	-216, 217, 81, 10, 9, 19, 150, 144, 156, 399,
	154, -192, 61, 58, -40, -59, 81, -65, 31, 26,
	9, 76, -237, 61, 61, 61, 61, -192, 156, -164,
	-115, 385, -194, 399, -142, 341, 344, 343, 289, -237,
	58, -216, -40, 25, 31, -61, 65, 110, 106, 105,
	116, 109, 110, 111, 112, 113, 114, 115, 107, 108,
	398, 119, -65, 63, 124, 125, -65, -65, -65, -65,
	-65, -65, -65, -219, -2, -65, -72, -3, -4, -237,
	-40, 6, -237, 63, 123, 123, 402, -237, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, -82, -40,
	-237, 41, -237, -237, -237, -237, -243, -237, -243, -243,
	-243, -243, -243, -243, -129, 120, 259, 161, 250, -132,
	-131, 265, 264, 122, -237, -237, -237, -237, 60, -144,
	-143, -144, 60, 60, -144, -144, 61, 61, 120, 60,
	59, 60, 248, 248, 60, 59, 60, 59, 58, 57,
	56, -176, -177, -68, -66, -67, -69, -54, 58, 58,
	-2, -237, -109, -2, -184, 19, 185, 186, -54, -203,
	-93, -115, 157, -205, 56, -116, -151, -115, -232, -115,
	-54, -232, -115, 156, 144, 399, 154, 58, 33, 128,
	175, 141, -115, -236, -152, -115, -115, -115, -115, 146,
	-161, 63, 97, 123, -171, -116, 63, 65, 60, 59,
	-140, 58, -175, 291, -140, -140, -40, -89, 27, 28,
	-89, -89, -89, 123, -217, 218, 217, -163, 181, 182,
	33, 183, -163, 385, 157, 157, -192, -237, -237, 57,
	58, -177, -238, 80, 79, 97, 216, 60, -40, -62,
	100, 81, 98, 82, 99, 101, 102, 103, 104, 84,
	90, 91, 92, 93, 94, 95, 96, -108, -237, -78,
	-237, -237, -237, -59, -192, 58, -193, -140, 58, -140,
	58, 58, -40, -93, -217, 60, 58, 375, 59, 65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -134, 249, -129, -132, -126, 61, 63, 60,
	-64, 63, -115, -64, -115, -238, -238, 59, -238, -86,
	15, -28, 5, -2, -26, -242, -38, 24, -37, -72,
	-39, -40, 111, -121, -116, -116, -220, 403, -221, 63,
	65, 66, 67, 68, 73, 74, 75, -65, -37, -40,
	-37, -37, -37, -40, -128, 120, 255, 161, 250, 244,
	274, 275, 295, 248, 296, 237, 229, 234, 247, 245,
	231, 246, 230, 243, 240, 253, 252, 254, 265, 256,
	261, 263, 262, 260, -40, -37, -39, -39, -37, -31,
	24, -80, -81, 86, -79, -115, 19, -238, -238, -238,
	-238, 65, -238, 257, 402, 402, -37, -38, -37, -37,
	-37, -144, -143, 63, -143, 298, 298, 65, 65, -176,
	-115, -54, 60, 58, -93, -177, -2, -54, 141, 21,
	6, 8, 9, 10, 19, -112, 59, 25, -54, 60,
	-235, 58, 365, 59, 182, 58, 58, 383, 384, 157,
	58, 58, 57, -177, 31, 81, 178, 31, 81, -130,
	-115, 144, -115, 156, 399, 33, 128, 175, -115, 63,
	73, -115, -179, -181, 365, -180, 57, 151, 71, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 61, -174,
	-89, 65, -89, 60, -116, 220, 219, -193, 56, 73,
	184, -193, 56, -164, -192, 58, -40, -160, -159, -115,
	-40, 155, -115, -177, 60, -189, 183, -40, -40, -70,
	73, 81, 74, 75, -65, 21, 22, 23, -71, -75,
	-78, 69, -237, 100, 98, 99, 84, -65, 98, -65,
	-65, -65, -65, -65, -65, 61, -79, -238, -238, -165,
	-116, -237, 60, 65, 60, 60, -238, 60, 371, 372,
	-40, 58, -61, 365, -40, -90, 17, 16, -5, -3,
	-237, 21, 24, -238, -33, 44, 45, -27, -238, -37,
	59, -238, -238, -118, -117, 25, -115, 63, 123, -237,
	403, 59, 398, -238, -238, -238, -238, 59, 57, 59,
	-140, 58, -140, -140, -150, 235, -140, 235, -150, -140,
	-140, -140, -140, -140, -140, 25, -238, 59, 11, 59,
	11, -238, -37, -83, -81, 89, -40, -238, -121, -238,
	403, 403, -238, -238, -238, -238, -144, -144, 60, 60,
	60, 58, 58, -95, 387, -176, 60, 60, -238, 25,
	-165, 203, -111, 86, -115, -206, -208, 224, -18, -15,
	-6, -8, -7, -10, -9, -11, -12, -13, -14, -23,
	-3, 143, -16, -17, -29, 10, 9, 20, 33, 207,
	208, 213, 209, 153, -30, 176, -24, 8, 350, 166,
	167, -112, 19, -240, -115, 109, 90, 63, -152, 59,
	132, -115, -177, -177, 58, 58, 58, -40, -160, 155,
	-115, 60, -65, 73, 175, 73, 157, 58, 58, 383,
	384, 58, 31, 81, 178, 31, 81, -130, 144, 97,
	-178, 56, -180, 365, 58, 367, 61, -167, 90, 63,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	60, -89, -216, 9, -216, 10, 58, 58, -177, -238,
	-238, 59, 365, 365, -237, -237, 60, -179, 358, 73,
	74, 75, -65, -237, -65, -237, -65, -237, -71, -65,
	-65, -65, -36, 162, -65, 80, -238, -238, 60, 59,
	-40, 60, -189, 56, -216, 60, -191, 60, 248, -91,
	19, 34, -40, -87, -88, -40, -86, -2, -31, 70,
	-238, -39, -223, 400, -117, 111, -122, -38, -221, -129,
	-223, -223, -128, 120, 161, -126, -40, -143, 61, -128,
	-65, -65, -65, -65, 362, -86, 88, -40, 87, -95,
	-176, -177, -58, 12, 58, 60, -58, -179, -2, -186,
	57, 204, 224, -40, 401, -208, 224, -206, -86, -40,
	-26, -26, -26, -210, -115, -209, -26, -229, -228, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	-115, -115, -115, -204, 40, 210, 211, 212, -40, -115,
	-237, -82, -111, 203, 60, -240, -240, -240, -240, -115,
	120, 33, 122, -240, -240, 134, 60, 60, -177, -177,
	-177, 60, 60, 58, 58, -130, 58, -177, -177, 58,
	58, -40, -65, 73, 175, 73, 157, 63, 73, -115,
	-182, -180, -115, 65, -199, 56, 77, 65, -199, -199,
	-199, -199, -199, -200, 199, 200, 65, -201, -200, 65,
	-89, -217, -163, -217, -163, -165, -177, 60, -189, -58,
	-159, 90, -115, 80, 90, -115, 80, -160, -160, -179,
	-178, -65, -65, -65, -36, 80, -65, -36, -65, 147,
	-116, -238, 10, 9, -217, 371, 372, 60, 225, 377,
	378, 168, 379, 183, 380, 381, 298, 9, 100, 59,
	18, 59, -89, -90, -238, -32, 47, -237, 123, -238,
	-238, -238, -238, 59, -238, -238, 59, -238, 19, -238,
	59, -238, 19, -237, -35, 357, -40, -58, 60, 60,
	-179, -40, -93, -95, -179, -187, 365, -40, -206, -207,
	-208, -208, -206, 401, 88, -90, 87, -19, -15, -16,
	-18, 224, -107, 11, -49, -42, -43, -44, -45, -56,
	-78, -237, -54, 59, -211, -125, 205, 25, -100, -127,
	226, -104, 309, 308, -116, 319, -102, 307, 259, 306,
	-199, 59, -115, 11, 11, 11, 11, -208, 224, -73,
	-72, -73, 224, 204, -216, 60, 60, 60, 183, -58,
	-160, -160, -177, 60, 60, -177, -177, 60, -130, 58,
	-237, 60, 59, -193, -193, 60, 60, -179, -238, -238,
	-178, -216, -238, -238, -238, -65, -54, -189, -163, -163,
	365, -61, 16, -61, -61, -61, 65, 378, 168, 380,
	16, 42, -40, -40, -88, -91, -37, -238, 169, -86,
	111, -65, -65, -65, -65, -65, -65, -238, 63, -179,
	-58, -179, -178, 60, -58, -178, 399, 401, -208, 88,
	88, -91, -206, 89, 89, -207, -55, 29, -54, -54,
	-49, -239, 11, 57, 33, 59, -50, -52, -51, -53,
	46, 50, 52, 47, 48, 49, 53, -125, -42, -237,
	-124, 169, -123, 25, -121, 63, -209, -115, 206, -130,
	59, -100, 226, -101, -105, 310, 312, 90, 123, -120,
	-115, 63, 31, 33, -228, 29, -207, -238, -207, -217,
	-179, -179, 358, 60, 60, 60, -216, 60, 60, 183,
	-177, -115, -180, -216, -216, 147, -179, -178, -58, -58,
	-217, 58, -216, 56, -216, 56, -61, -61, 382, -121,
	43, -41, 11, 16, -238, -238, -238, -238, -238, -238,
	-34, 100, 365, -178, -179, -179, -40, 88, -208, 401,
	-16, -19, 143, -17, 143, 401, 88, -96, 169, -54,
	-96, 57, -42, -99, -103, -79, -43, -44, -44, -43,
	-44, 46, 46, 46, 51, 46, 51, 46, -51, -121,
	-238, -57, 54, 142, 55, -237, -123, 19, -104, -101,
	59, 311, 313, 314, 56, 77, -40, -116, -144, -165,
	88, 401, -178, -178, -58, -58, -217, -179, -179, 358,
	60, -238, -217, -217, -54, -178, -216, -165, -217, 9,
	-217, 10, 123, -58, -42, -224, -225, -40, -238, 363,
	53, 368, -178, 88, 89, -40, -40, -63, 33, 38,
	-2, -237, -237, -58, -42, -58, -41, 59, 90, -47,
	-46, 56, 57, -48, 56, -46, 46, 46, -213, 365,
	138, 138, 138, -97, -115, -2, -105, -106, 315, 312,
	318, 90, 88, -178, -178, 58, -217, 60, -163, -163,
	-116, -84, 13, -238, -86, 59, 43, 364, 369, 143,
	-206, -19, -19, -98, 56, -99, -74, -76, -75, -237,
	-2, -92, -94, 6, -115, -113, -114, -97, -86, -58,
	-58, -103, -40, -40, 58, -40, 58, -237, -237, -237,
	-238, 59, 312, 316, 317, -40, -165, -216, -216, -85,
	14, 16, -238, -225, 43, 401, 30, -98, 59, -238,
	-238, -238, 59, 123, -238, -90, -86, -93, -212, -214,
	388, 389, 390, 391, 392, 393, 394, 395, -93, -93,
	-93, -124, -115, 60, -217, -217, -40, -72, 365, 88,
	157, -76, 38, -2, -237, -94, -115, -90, 60, 60,
	59, -238, -238, -238, -57, 368, 143, 9, -74, -2,
	-214, -213, 369, -99, -238,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 0, -2, 0, 0,
	0, 0, 1, 3, 7, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 930, 0, 930, 930, 518, 519,
	520, 523, 0, 0, 1002, 992, 993, 994, 995, 996,
	997, 998, 999, 1001, 936, 937, 0, 0, 0, 0,
	0, 935, 0, 0, 227, 279, 279, 279, 938, 939,
	940, 941, 942, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 1144, 0, 0, 0, 930, 0, 930, 0, 853,
	0, 0, -2, -2, 0, 0, 945, 0, 632, 943,
	944, 0, 930, 0, 0, 524, 521, 522, 223, 0,
	0, 1000, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 0, 235, 409, 405, 239, 240, 241, 242, 243,
	392, 326, 355, 356, 392, 379, 399, 392, 399, 362,
	392, 399, 412, 412, 412, 412, 412, 370, 371, 372,
	373, 374, 375, 376, 0, 0, 346, 392, 392, 392,
	392, 392, 352, 353, 354, 381, 382, 383, 384, 385,
	386, 387, 388, 0, 327, 328, 329, 330, 331, 332,
	333, 334, 335, 336, 394, 344, 394, 396, 396, 342,
	343, 236, 237, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 170, 171, 0, 0, 0, 0,
	0, 0, 0, 25, 0, 27, 224, 0, 1003, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 533, 0, 536, 228, 229, 230, 231, 232,
	233, 234, 0, 525, 527, 0, -2, 0, 0, 0,
	0, 0, 1057, -2, -2, 246, 0, 248, 0, 250,
	0, 252, 253, 0, 255, 257, 525, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 411, 407, 406, 0,
	325, 0, 412, 392, 380, 412, 0, 412, 412, 363,
	364, 415, 0, 415, 415, 415, 415, 0, 0, 402,
	402, 349, 350, 351, 0, 337, 0, 394, 345, 339,
	340, 0, 341, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 157, 0, 207, 0, 177, 173, 174, 175,
	172, 0, 0, 855, 0, -2, -2, 946, 931, 23,
	0, 633, 947, 0, 0, 106, 0, 0, 0, 527,
	52, 0, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 930, 0, 0, 0, 0,
	537, 539, 535, 0, 948, 0, 0, 0, 528, 451,
	0, 459, -2, 0, 464, 515, 516, 0, 1145, 0,
	463, 0, 454, 456, 0, 514, 527, 247, 0, 0,
	0, 254, 256, 0, 260, -2, 0, 0, 296, 0,
	0, 280, 1145, 703, 704, 0, 706, 707, 708, 709,
	710, 0, 0, 0, 0, 0, 0, 0, 737, 738,
	739, 740, 0, 742, 0, -2, 859, 853, 861, 862,
	863, 864, 865, 866, 867, 652, 653, 0, 0, 911,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 775, 786,
	786, 786, 786, 786, 786, 786, 0, 0, 0, 0,
	0, 955, 294, 295, 410, 238, 408, 244, 0, 415,
	412, 415, 0, 0, 415, 415, 365, 416, 0, 0,
	366, 367, 368, 369, 0, 390, 0, 347, 0, 0,
	348, 0, 0, 338, 0, 0, 0, 0, 0, 0,
	0, 0, 930, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 32, 0, 87,
	88, 528, 0, 0, 63, 64, 78, 0, 527, 56,
	0, 0, 42, 527, 61, -2, 0, 0, 0, 0,
	77, 0, 81, 82, 0, 0, 0, 538, 534, 0,
	470, 392, 392, -2, 0, 882, 882, 882, 882, 0,
	951, 949, 0, 0, 0, 0, 0, 0, 514, 0,
	0, 0, 458, 0, 0, 642, 0, 648, 650, 0,
	0, 0, 0, 452, 453, 455, 457, 461, 514, 0,
	528, 278, 249, 525, 251, 392, 392, 317, 0, 0,
	0, 951, 0, 0, 297, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 705, 0, 0, 728, 729, 730, 731,
	732, 733, 734, 741, 92, 648, 0, 877, 0, 0,
	701, 543, 557, 860, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 0, 843,
	0, 0, 0, 0, 0, 0, 778, 0, 779, 780,
	781, 782, 783, 784, 785, 831, 0, 833, 834, 835,
	836, 837, 838, 841, 0, 557, 0, 0, 393, 357,
	415, 359, 400, 401, 360, 361, 417, 413, 414, 412,
	0, 412, 0, 0, 389, 0, 397, 0, 0, 0,
	0, 0, 465, -2, -2, -2, -2, 0, 0, 0,
	-2, 0, 0, -2, 0, 0, 208, 209, 205, 178,
	176, 598, 599, 0, 0, 856, 0, 160, 28, 1004,
	107, 30, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 528, 0, 41, 528, 0, 73, 74, 527,
	62, 80, 0, 0, 532, 540, 541, 542, 419, 0,
	882, 1145, 475, 482, 474, 882, 0, 478, 883, 884,
	479, 480, 481, 0, 483, 0, 950, 525, 490, 491,
	0, 0, 525, 526, 527, 514, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 647, 1146, 645, 0,
	0, 0, 0, 0, 0, 691, 692, 693, 694, 0,
	684, 685, 686, 687, 688, 689, 690, 649, 0, 674,
	0, 0, 0, 642, 462, 0, 0, 312, 0, 315,
	0, 0, 0, 0, 267, 0, 0, 275, 0, 869,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 725, 0, 736, -2, 726, 797, 798, 281,
	723, 858, 0, 724, 735, 700, 743, 0, 910, 885,
	0, 0, 547, 92, 550, 545, 0, 0, 0, 0,
	559, 565, 561, 0, 855, 857, 0, 957, 958, -2,
	-2, -2, -2, -2, -2, -2, -2, 0, 0, 565,
	0, 0, 0, 0, 0, 392, 392, 802, 392, 396,
	805, 806, 807, 392, 810, 812, 813, 814, 815, 396,
	817, 818, 819, 820, 821, 392, 392, 824, 825, 392,
	392, 828, 392, 392, 0, 0, 0, 0, 0, 0,
	554, 851, 846, 0, 0, 853, 0, 772, 773, 774,
	776, 0, 787, 832, 0, 0, 0, 0, 558, 0,
	0, 358, 415, 391, 415, 403, 404, 0, 0, 0,
	0, 0, 640, 0, 0, 0, 92, 0, 0, 211,
	212, 213, 214, 215, 0, 849, 0, 0, 205, -2,
	26, 162, 0, 0, 31, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 34, 0, 37,
	79, 0, 0, 0, 0, 0, 0, 0, 528, 83,
	84, 0, 448, 420, 0, 422, 0, 440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 471,
	472, 0, 476, 882, 0, 952, 953, 948, 0, 492,
	493, 948, 0, 0, 0, 0, 0, 0, 506, 853,
	0, 0, 0, 0, 419, 499, 0, 643, 644, 646,
	678, 0, 680, 682, 654, 0, 0, 0, 661, 697,
	698, 699, 0, 0, 0, 0, 0, 695, 0, 666,
	668, 669, 670, 671, 0, 0, 0, 676, 677, 0,
	529, 0, 313, 0, 316, 318, 319, -2, 271, 272,
	0, 298, 0, 0, 702, 889, 0, 0, 877, 94,
	0, 548, 549, -2, 553, 551, 552, 544, 744, 0,
	0, 570, 750, 562, 566, 0, 568, 569, 0, 557,
	956, 0, 0, 570, 570, 751, 752, 0, 0, 0,
	799, 1145, 412, 803, 804, 808, 809, 811, 816, 822,
	823, 826, 827, 829, 830, 0, 757, 0, 0, 0,
	0, 0, 877, 0, 847, 0, 0, 770, 771, 777,
	839, 840, 788, 789, 790, 791, 377, 378, 395, 398,
	640, 0, 0, 638, 0, 0, 638, 419, 93, 0,
	216, 0, 0, 0, 600, 20, 179, 0, 185, 186,
	187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	877, 0, 138, 139, 543, 543, 543, 0, 543, 0,
	0, 0, 126, 0, 0, 842, 922, 98, 99, 200,
	201, 849, 0, 0, -2, 162, 162, -2, 162, 162,
	0, 1005, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 33, 35, 0, 36, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 47, 0, 0,
	418, 0, 423, 0, 0, 0, 426, 0, 441, 428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	393, 477, 951, 0, 951, 0, 0, 0, 0, 319,
	500, 0, 0, 0, 0, 0, 419, 448, 320, 679,
	681, 683, 655, 0, 657, 0, 659, 0, 662, 695,
	667, 0, 663, 0, 695, 0, 651, 675, 0, 0,
	0, 314, 258, 0, 951, 0, 0, 277, 0, 89,
	0, 0, 886, 878, 879, 882, 885, 92, 555, 546,
	745, 560, 746, 0, 567, 563, 0, 0, 959, -2,
	747, 748, 0, 392, 802, 0, 0, 800, 801, 0,
	0, 0, 0, 0, 0, 844, 769, 852, 0, 638,
	0, 0, 419, 0, 0, 640, 419, 14, -2, 218,
	0, 206, 0, 850, 0, 182, 0, 0, 885, 0,
	934, 0, 0, 114, -2, 116, 0, 0, 969, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	121, 122, 123, 0, 0, 0, 0, 0, 0, 202,
	202, 204, 0, 0, 161, 163, 164, 165, 166, -2,
	-2, 1113, -2, 167, 168, 29, 39, 948, 0, 0,
	0, 65, 67, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 43, 45, 0, 46, 0, 85, 86, 449,
	0, 424, 429, 427, 430, 442, 443, 431, 432, 433,
	434, 435, 436, 437, 444, 445, 438, 439, 446, 447,
	473, 484, 525, 485, 525, 0, 0, 419, 498, 501,
	507, 508, 509, 510, 511, 512, 513, 0, 0, 448,
	948, 648, 648, 648, 664, 0, 696, 665, 672, 0,
	530, 319, 0, 0, 268, 273, 274, 276, 0, 0,
	0, 0, 0, 0, 309, 0, 727, 890, 0, 0,
	0, 0, 881, 889, 95, 0, 556, 0, 0, 749,
	753, 758, 754, 0, 756, 759, 0, 761, 0, 763,
	0, 765, 0, 0, 0, 0, 848, 419, 638, 419,
	448, 639, 0, 638, 448, 18, 0, 217, 19, 0,
	133, 180, 0, 0, 183, 889, 0, 144, 142, 138,
	145, 0, 0, 0, 0, 0, 577, 579, 580, 581,
	613, 0, 615, 0, 0, 0, 120, 614, 110, 0,
	0, 915, 158, 159, 0, 0, 0, -2, 0, 926,
	923, 0, 124, 127, 128, 129, 130, 131, 0, 198,
	203, 0, 0, 206, 951, 419, 419, 54, 0, 68,
	0, 0, 0, 40, 948, 0, 0, 75, 48, 0,
	0, 421, 0, 948, 948, 0, 419, 448, 502, 504,
	495, 951, -2, -2, -2, 673, 0, 259, -2, -2,
	0, 300, 0, 302, 303, 304, 305, 306, 307, 308,
	0, 0, 887, 888, 880, 90, 575, 571, 0, 0,
	564, 0, 0, 0, 0, 0, 792, 768, 845, 448,
	419, 11, 9, 641, 419, 13, 0, 0, 134, 184,
	181, 197, 0, 0, 0, 0, 108, 0, 631, -2,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	620, 0, 0, 623, 0, 0, 0, 0, 0, 0,
	634, 0, 616, 0, 618, 619, 117, 613, 0, 118,
	0, 111, 0, 113, 147, 0, 0, 0, 0, 415,
	927, 928, 929, 925, 970, 0, 0, 199, 0, 49,
	448, 448, 66, 69, 71, 53, 951, 419, 419, 0,
	0, 0, 425, 951, 951, 0, 448, 948, 503, 505,
	497, 0, 951, 0, 951, 0, 299, 301, 310, 0,
	891, 638, 0, 0, 573, 755, 760, 762, 764, 766,
	0, 0, 0, 8, 12, 448, 219, 21, 135, 0,
	140, 141, 0, 143, 0, 0, 146, 0, 0, 630,
	638, 0, 638, 575, 912, 0, 578, 609, 611, 0,
	606, 621, 622, 624, 0, 626, 0, 628, 629, 582,
	583, 584, 0, 0, 0, 0, 617, 0, 916, 112,
	0, 0, 150, 151, 917, 918, 919, 0, 921, 125,
	132, 0, 50, 51, 70, 72, 58, 448, 448, 76,
	57, 450, 486, 487, 0, 494, 951, 0, 264, 0,
	266, 0, 0, 870, 576, 0, 874, 876, 767, 0,
	0, 0, 10, 0, 0, 0, 0, 904, 0, 0,
	-2, 0, 0, 877, 638, 103, 638, 0, 0, 603,
	610, 0, 0, 604, 0, 605, 625, 627, 596, 0,
	0, 0, 0, 0, 601, -2, 148, 149, 0, 0,
	155, 0, 22, 59, 60, 0, 496, 489, 948, 948,
	311, 872, 0, 572, 0, 0, 793, 0, 796, 136,
	0, 0, 144, 96, 0, 904, 892, 906, 908, 0,
	92, 0, 898, -2, 900, 902, 903, 0, 885, 102,
	877, 913, 914, 607, 0, 612, 0, 0, 0, 0,
	615, 0, 152, 153, 154, 920, 0, 951, 951, 91,
	0, 0, 574, 875, 794, 0, 0, 97, 0, 909,
	-2, 0, 0, 0, 109, 101, 885, 0, 0, 586,
	588, 589, 590, 591, 592, 593, 594, 595, 0, 0,
	0, 634, 602, 488, 269, 270, 873, 871, 0, 0,
	0, 907, 0, -2, 0, 899, 901, 100, 608, 585,
	0, 635, 636, 637, 584, 0, 137, 0, 895, 92,
	587, 597, 795, 905, -2,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 401,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 402, 3, 403, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:432
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:437
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:438
		{
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:444
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:450
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 8:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:455
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:475
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:495
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 11:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:516
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 12:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:532
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 13:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:549
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:569
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:584
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:595
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:607
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:618
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:634
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:648
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:662
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:675
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[4].colIdent},
					TableName: yyDollar[8].tableName,
					Time:      yyDollar[5].str,
					Event:     yyDollar[6].strs,
					Body:      yyDollar[12].blockStatement,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:689
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 24:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:700
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: ColumnType{Type: "enum", EnumValues: yyDollar[7].strs},
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:711
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[4].colIdent.String(),
				},
			}
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:721
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:725
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name: yyDollar[4].colIdent.String(),
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:734
		{
			// Convert table names to multiple Grant statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: GrantPrivilege,
					Grant: &Grant{
						IsGrant:    true,
						Privileges: yyDollar[2].strs,
						TableName:  tableName,
						Grantees:   yyDollar[7].strs,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:755
		{
			// Convert table names to multiple Grant statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: GrantPrivilege,
					Grant: &Grant{
						IsGrant:         true,
						Privileges:      yyDollar[2].strs,
						TableName:       tableName,
						Grantees:        yyDollar[7].strs,
						WithGrantOption: true,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:777
		{
			// Convert table names to multiple Revoke statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: RevokePrivilege,
					Grant: &Grant{
						IsGrant:    false,
						Privileges: yyDollar[2].strs,
						TableName:  tableName,
						Grantees:   yyDollar[7].strs,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:798
		{
			// Convert table names to multiple Revoke statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: RevokePrivilege,
					Grant: &Grant{
						IsGrant:       false,
						Privileges:    yyDollar[2].strs,
						TableName:     tableName,
						Grantees:      yyDollar[7].strs,
						CascadeOption: true,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:822
		{
			yyVAL.statement = nil
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:826
		{
			yyVAL.statement = nil
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:830
		{
			yyVAL.statement = nil
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:834
		{
			yyVAL.statement = nil
		}
	case 36:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:838
		{
			yyVAL.statement = nil
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:842
		{
			yyVAL.statement = nil
		}
	case 38:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:846
		{
			yyVAL.statement = nil
		}
	case 39:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:851
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[5].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 40:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:865
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:879
		{
			yyVAL.statement = nil
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:883
		{
			yyVAL.statement = nil
		}
	case 43:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:887
		{
			yyVAL.statement = nil
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:891
		{
			yyVAL.statement = nil
		}
	case 45:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:895
		{
			yyVAL.statement = nil
		}
	case 46:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:899
		{
			yyVAL.statement = nil
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:903
		{
			yyVAL.statement = nil
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:907
		{
			yyVAL.statement = nil
		}
	case 49:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:911
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[11].boolVal),
						InitiallyDeferred: bool(yyDollar[12].boolVal),
					},
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 50:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:930
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Clustered:  true,
					Constraint: true,
					Options:    yyDollar[12].indexOptions,
					Partition:  yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 51:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:948
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Clustered:  false,
					Constraint: true,
					Options:    yyDollar[12].indexOptions,
					Partition:  yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:966
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[3].tableName,
				NewName:    yyDollar[3].tableName,
				ForeignKey: yyDollar[5].foreignKeyDefinition,
			}
		}
	case 53:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:975
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[7].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 54:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:989
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[6].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1003
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    NewColIdent(""),
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1017
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 57:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1026
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 58:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1040
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 59:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1060
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 60:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1078
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1105
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1114
		{
			yyVAL.statement = nil
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1118
		{
			yyVAL.statement = nil
		}
	case 65:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1122
		{
			yyVAL.statement = nil
		}
	case 66:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1126
		{
			yyVAL.statement = nil
		}
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1130
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					Exclusions:     yyDollar[9].exclusionPairs,
				},
			}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1142
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					Exclusions:     yyDollar[9].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 69:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1155
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      "GIST",
					Exclusions:     yyDollar[11].exclusionPairs,
				},
			}
		}
	case 70:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1168
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      "GIST",
					Exclusions:     yyDollar[11].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[13].expr),
				},
			}
		}
	case 71:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1182
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      yyDollar[9].colIdent.String(),
					Exclusions:     yyDollar[11].exclusionPairs,
				},
			}
		}
	case 72:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1195
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      yyDollar[9].colIdent.String(),
					Exclusions:     yyDollar[11].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[13].expr),
				},
			}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1209
		{
			yyVAL.statement = nil
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1213
		{
			yyVAL.statement = nil
		}
	case 75:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1217
		{
			yyVAL.statement = nil
		}
	case 76:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1221
		{
			yyVAL.statement = nil
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1225
		{
			yyVAL.statement = nil
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1229
		{
			yyVAL.statement = nil
		}
	case 79:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1233
		{
			yyVAL.statement = nil
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1237
		{
			yyVAL.statement = nil
		}
	case 81:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1243
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     String(yyDollar[4].tableName),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1254
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     String(yyDollar[4].tableName),
					Comment:    "NULL",
				},
			}
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1265
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].colIdent.String(),
					Comment:    string(yyDollar[8].bytes),
				},
			}
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1276
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].colIdent.String(),
					Comment:    "NULL",
				},
			}
		}
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].tableIdent.String() + "." + yyDollar[8].colIdent.String(),
					Comment:    string(yyDollar[10].bytes),
				},
			}
		}
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1298
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].tableIdent.String() + "." + yyDollar[8].colIdent.String(),
					Comment:    "NULL",
				},
			}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1315
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1323
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 91:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1330
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1336
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1340
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1346
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1350
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 96:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1357
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1369
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1381
		{
			yyVAL.str = InsertStr
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1385
		{
			yyVAL.str = ReplaceStr
		}
	case 100:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1391
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 101:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1397
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 102:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1401
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1405
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1410
		{
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1411
		{
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1415
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1419
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1424
		{
			yyVAL.partitions = nil
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1428
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1434
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1438
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1442
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1446
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1452
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1456
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1469
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1473
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1479
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1484
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1488
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1494
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1501
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1508
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1515
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1523
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1533
		{
			yyVAL.str = ""
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1537
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1541
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1545
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1549
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1555
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1562
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1576
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1580
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1584
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1591
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1599
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1609
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1613
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1620
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1630
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1641
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1646
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1651
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1658
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1662
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1673
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1677
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1683
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1687
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1691
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1697
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1701
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1705
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1709
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1719
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1725
		{
			yyVAL.str = SessionStr
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1729
		{
			yyVAL.str = GlobalStr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1734
		{
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1735
		{
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1739
		{
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1740
		{
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1741
		{
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1742
		{
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1743
		{
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1744
		{
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1745
		{
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1749
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1753
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1757
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1761
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1767
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1775
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1780
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1786
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1790
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1796
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1800
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1805
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1814
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1818
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1827
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1843
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1856
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1866
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1871
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1877
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1878
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1881
		{
			yyVAL.exprs = nil
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1882
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1886
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.empty = struct{}{}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1893
		{
			yyVAL.empty = struct{}{}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1896
		{
			yyVAL.bytes = nil
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1900
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1904
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1909
		{
			yyVAL.bytes = nil
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1913
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1917
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1921
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1925
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1929
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1934
		{
			yyVAL.expr = nil
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1938
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1943
		{
			yyVAL.expr = nil
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1947
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1952
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1956
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1961
		{
			yyVAL.bytes = nil
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1965
		{
			yyVAL.bytes = nil
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1971
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1978
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1984
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1988
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1993
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1997
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2001
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2005
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2009
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2013
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2017
		{
			yyVAL.TableSpec = yyDollar[1].TableSpec
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2024
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2029
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2034
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2040
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2051
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2055
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].colIdent.val) + "." + string(yyDollar[3].colIdent.val)}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2061
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2074
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2079
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2084
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2089
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2095
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2100
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2105
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2110
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2115
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2120
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2125
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2130
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2135
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 259:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2144
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2154
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2159
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2164
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 263:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2171
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 264:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2178
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[10].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[11].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 265:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2187
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 266:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2194
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[10].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[11].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2203
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[4].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[5].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 268:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2210
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[7].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[8].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 269:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:2218
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[12].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[13].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[14].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 270:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:2228
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[12].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[13].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[14].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2239
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2244
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 273:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2249
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 274:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2254
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2260
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 276:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2266
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2273
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2280
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2286
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2292
		{
			// Check if it's a simple value that should be stored as Value
			if val, ok := yyDollar[2].expr.(*SQLVal); ok {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: val}
			} else if val, ok := yyDollar[2].expr.(BoolVal); ok {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: NewBoolSQLVal(bool(val))}
			} else {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
			}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2303
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: &ParenExpr{Expr: yyDollar[3].expr}}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2309
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2313
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2317
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2321
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2325
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2329
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2333
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2337
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2341
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2345
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2349
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2355
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2361
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2367
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2373
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2377
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2382
		{
			yyVAL.sequence = &Sequence{}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2386
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2391
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2396
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2401
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2406
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2411
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2416
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2421
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2426
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2431
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2436
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2441
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 311:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2446
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2453
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2457
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2461
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, NewIntVal(yyDollar[3].bytes))
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2465
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2469
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2473
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2477
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2482
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2486
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2491
		{
			yyVAL.bytes = nil
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2500
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2505
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2515
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2547
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2559
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2571
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2577
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2592
		{
			yyVAL.str = ""
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2596
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 358:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2658
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2662
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2666
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2670
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2674
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2678
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 378:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2740
		{
			yyVAL.str = ""
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2744
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2788
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2793
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2798
		{
			yyVAL.optVal = nil
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2802
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2807
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2811
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2819
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2823
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2829
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2837
		{
			yyVAL.optVal = nil
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2841
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2845
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2854
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2858
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2862
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2867
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2871
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2876
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2880
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2885
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2889
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2893
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.str = ""
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2906
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2911
		{
			yyVAL.str = ""
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2915
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2919
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 418:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2925
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2930
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2934
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2938
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2944
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2948
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2954
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2958
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2964
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2968
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2973
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2977
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2981
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2989
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2993
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2997
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3001
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3005
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3013
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3017
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3028
		{
			yyVAL.str = ""
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3032
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3038
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3042
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3048
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3052
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3058
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3062
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.indexPartition = nil
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3072
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3076
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3082
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3086
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3090
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3094
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3098
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3102
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3106
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3110
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3114
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3118
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3122
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3126
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3132
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3136
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3142
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3147
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3151
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3159
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3165
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3169
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3175
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3180
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: NewIntVal(yyDollar[3].bytes), Direction: yyDollar[5].str}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3185
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3189
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3197
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3201
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3205
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3223
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[3].boolVal),
				InitiallyDeferred: bool(yyDollar[4].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 484:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3232
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[6].boolVal),
				InitiallyDeferred: bool(yyDollar[7].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 485:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3243
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[6].boolVal),
				InitiallyDeferred: bool(yyDollar[7].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 486:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3254
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[9].boolVal),
				InitiallyDeferred: bool(yyDollar[10].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 487:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3265
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[9].boolVal),
				InitiallyDeferred: bool(yyDollar[10].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 488:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3278
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 489:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3289
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3300
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3304
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3312
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 494:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3318
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 495:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3328
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 496:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3339
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:   yyDollar[6].indexColumns,
				Options:   yyDollar[8].indexOptions,
				Partition: yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{
					Deferrable:        bool(yyDollar[10].boolVal),
					InitiallyDeferred: bool(yyDollar[11].boolVal),
				},
			}
		}
	case 497:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3353
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
				ConstraintOptions: &ConstraintOptions{
					Deferrable:        bool(yyDollar[8].boolVal),
					InitiallyDeferred: bool(yyDollar[9].boolVal),
				},
			}
		}
	case 498:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3377
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3386
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Exclusions:     yyDollar[5].exclusionPairs,
			}
		}
	case 501:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3393
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3401
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "GIST",
				Exclusions:     yyDollar[7].exclusionPairs,
			}
		}
	case 503:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3409
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "GIST",
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 504:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3418
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
			}
		}
	case 505:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3426
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3447
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: "="}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3451
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: yyDollar[3].colIdent.String()}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3455
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: "&&"}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3459
		{
			// For expressions, we'll use a special column name to indicate it's an expression
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: "="}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3464
		{
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: yyDollar[3].colIdent.String()}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3468
		{
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: "&&"}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3474
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3478
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3482
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3488
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3492
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3496
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3500
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3504
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3508
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3514
		{
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3515
		{
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3519
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3523
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3528
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3535
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3539
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3546
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3550
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3556
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3560
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3565
		{
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3566
		{
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3570
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3574
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3584
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3588
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3592
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3597
		{
			setAllowComments(yylex, true)
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3601
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3607
		{
			yyVAL.bytes2 = nil
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3611
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3617
		{
			yyVAL.str = UnionStr
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3621
		{
			yyVAL.str = UnionAllStr
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3625
		{
			yyVAL.str = UnionDistinctStr
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3630
		{
			yyVAL.str = ""
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3634
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3638
		{
			yyVAL.str = SQLCacheStr
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3643
		{
			yyVAL.str = ""
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3647
		{
			yyVAL.str = DistinctStr
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3652
		{
			yyVAL.str = ""
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3656
		{
			yyVAL.str = StraightJoinHint
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3661
		{
			yyVAL.selectExprs = nil
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3665
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3671
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3675
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3681
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3685
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3689
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 564:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3693
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3698
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3702
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3706
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3713
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.overExpr = nil
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 572:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3726
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3730
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 574:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3734
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3739
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3743
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3749
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3753
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3763
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3776
		{
			yyVAL.strs = []string{}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3780
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3786
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3790
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3796
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3800
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3804
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3808
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3812
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3816
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3820
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3824
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3830
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 597:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3834
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3840
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3845
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3849
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3855
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3859
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3890
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3892
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3896
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3898
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3902
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3904
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3907
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3909
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3912
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3916
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3920
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3927
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3933
		{
			yyVAL.str = JoinStr
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.str = JoinStr
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3941
		{
			yyVAL.str = JoinStr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3947
		{
			yyVAL.str = StraightJoinStr
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3953
		{
			yyVAL.str = LeftJoinStr
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3957
		{
			yyVAL.str = LeftJoinStr
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3961
		{
			yyVAL.str = RightJoinStr
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3965
		{
			yyVAL.str = RightJoinStr
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3971
		{
			yyVAL.str = NaturalJoinStr
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3975
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3989
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4004
		{
			yyVAL.indexHints = nil
		}
	case 635:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4008
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4012
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 637:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4016
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4021
		{
			yyVAL.expr = nil
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4025
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4030
		{
			yyVAL.columns = nil
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4034
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4040
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4044
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4048
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4052
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4056
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4060
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4064
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4068
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4074
		{
			yyVAL.str = ""
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4078
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4084
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4088
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4094
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4098
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 656:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4102
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, All: true}
		}
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4106
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 658:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4110
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4114
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 660:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4118
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4122
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4130
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 664:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4134
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 665:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4138
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4146
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4150
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixRegexStr, Right: yyDollar[3].expr}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4154
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixRegexCiStr, Right: yyDollar[3].expr}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4158
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixNotRegexStr, Right: yyDollar[3].expr}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4162
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixNotRegexCiStr, Right: yyDollar[3].expr}
		}
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4166
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 673:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4170
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4174
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4179
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4183
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4187
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.str = IsNullStr
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.str = IsNotNullStr
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.str = IsTrueStr
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4205
		{
			yyVAL.str = IsNotTrueStr
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4209
		{
			yyVAL.str = IsFalseStr
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4213
		{
			yyVAL.str = IsNotFalseStr
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4219
		{
			yyVAL.str = EqualStr
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4223
		{
			yyVAL.str = LessThanStr
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4227
		{
			yyVAL.str = GreaterThanStr
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4231
		{
			yyVAL.str = LessEqualStr
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4235
		{
			yyVAL.str = GreaterEqualStr
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4239
		{
			yyVAL.str = NotEqualStr
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4243
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4247
		{
			yyVAL.str = PosixRegexStr
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4251
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4255
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4259
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4264
		{
			yyVAL.expr = nil
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4268
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4274
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4278
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4282
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4288
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4294
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4298
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4304
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4308
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4312
		{
			// PostgreSQL date literal syntax: DATE '2022-01-01'
			yyVAL.expr = NewStrVal(append([]byte("date "), yyDollar[2].bytes...))
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4317
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4321
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4325
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4329
		{
			yyVAL.expr = yyDollar[1].arrayConstructor
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4333
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4337
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4341
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4345
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4349
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4353
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4357
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4361
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4365
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4369
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4373
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4377
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4381
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4385
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4389
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4393
		{
			colType := yyDollar[3].columnType
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Type: &colType}
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4398
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 727:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4402
		{
			timestampType := ColumnType{Type: "timestamp", Timezone: BoolVal(true)}
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Type: &timestampType}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4407
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4411
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4415
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4423
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4437
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4441
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4445
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4453
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4461
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4469
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4473
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4477
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4487
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 745:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4491
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4495
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 747:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4499
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 748:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4503
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 749:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4507
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4511
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4521
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4525
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 753:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4529
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 754:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4534
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 755:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4538
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 756:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4542
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 757:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("coalesce"), Exprs: yyDollar[3].selectExprs}
		}
	case 758:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4550
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 759:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4554
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 760:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4558
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 761:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4562
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 762:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4566
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 763:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4570
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 764:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4574
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 765:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4578
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 766:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4582
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 767:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4586
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 768:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4590
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 769:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4594
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 770:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4598
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4603
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4607
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4611
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4615
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4626
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4630
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 777:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4634
		{
			yyVAL.expr = &FuncExpr{
				Name:  NewColIdent("current_timestamp"),
				Exprs: SelectExprs{&AliasedExpr{Expr: NewIntVal(yyDollar[3].bytes)}},
			}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4641
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4645
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4649
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4654
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4659
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4664
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4669
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4673
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4687
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4691
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 790:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4695
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 791:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4699
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4705
		{
			yyVAL.str = ""
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4709
		{
			yyVAL.str = BooleanModeStr
		}
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4713
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 795:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4717
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4721
		{
			yyVAL.str = QueryExpansionStr
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4727
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4731
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4741
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4745
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4749
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4753
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4757
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4763
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4767
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4771
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4787
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4791
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4795
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4799
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4803
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4807
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4811
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4815
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4819
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4823
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4827
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4831
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4835
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4839
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4843
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4847
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4851
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4855
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4859
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4863
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4869
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4873
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4877
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4881
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4885
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4889
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4893
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4897
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 839:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4901
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type + "[]"}
		}
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4905
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + "[]"}
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4909
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4914
		{
			yyVAL.expr = nil
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4918
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4923
		{
			yyVAL.str = string("")
		}
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4927
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4933
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4937
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 848:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4943
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4948
		{
			yyVAL.empty = struct{}{}
		}
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4950
		{
			yyVAL.empty = struct{}{}
		}
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4953
		{
			yyVAL.expr = nil
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4957
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4963
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4967
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4971
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 856:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4975
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4981
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4987
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4991
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4996
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5001
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5005
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5009
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5013
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5017
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5021
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5025
		{
			yyVAL.expr = &NullVal{}
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5031
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5035
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 870:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5040
		{
			yyVAL.exprs = nil
		}
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5044
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 872:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5049
		{
			yyVAL.expr = nil
		}
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5053
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5059
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5063
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5069
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5074
		{
			yyVAL.orderBy = nil
		}
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5078
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5084
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 880:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5088
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5094
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 882:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5099
		{
			yyVAL.str = AscScr
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5103
		{
			yyVAL.str = AscScr
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5107
		{
			yyVAL.str = DescScr
		}
	case 885:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5112
		{
			yyVAL.limit = nil
		}
	case 886:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5116
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 887:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5120
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 888:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5124
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5129
		{
			yyVAL.str = ""
		}
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5133
		{
			yyVAL.str = ForUpdateStr
		}
	case 891:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5137
		{
			yyVAL.str = ShareModeStr
		}
	case 892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5150
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5154
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5158
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 895:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5163
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 896:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5167
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 897:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5171
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5178
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5182
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5188
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5192
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5196
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5200
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5205
		{
			yyVAL.updateExprs = nil
		}
	case 905:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5209
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5215
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5219
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5225
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5229
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5235
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5241
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5251
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5255
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5261
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5267
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5271
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5277
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5281
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5285
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 920:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5290
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5294
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5300
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5306
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5313
		{
			yyVAL.bytes = []byte("charset")
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5320
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5324
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5328
		{
			yyVAL.expr = &Default{}
		}
	case 930:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5333
		{
			yyVAL.empty = struct{}{}
		}
	case 931:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5335
		{
			yyVAL.empty = struct{}{}
		}
	case 932:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5338
		{
			yyVAL.empty = struct{}{}
		}
	case 933:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5340
		{
			yyVAL.empty = struct{}{}
		}
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5343
		{
			yyVAL.str = ""
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5345
		{
			yyVAL.str = IgnoreStr
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5349
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5353
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5360
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5364
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5368
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5372
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5378
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5382
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5387
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5394
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 948:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5400
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5404
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 950:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5408
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 951:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5414
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 952:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5418
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 953:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5422
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 954:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5428
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5432
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 956:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5439
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5443
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: nil}
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5450
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5454
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5461
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5465
		{
			yyVAL.arrayElement = NewIntVal(yyDollar[1].bytes)
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5469
		{
			yyVAL.arrayElement = NewFloatVal(yyDollar[1].bytes)
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5473
		{
			yyVAL.arrayElement = NewHexNum(yyDollar[1].bytes)
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5477
		{
			yyVAL.arrayElement = NewValArg(yyDollar[1].bytes)
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5481
		{
			yyVAL.arrayElement = &NullVal{}
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5485
		{
			yyVAL.arrayElement = BoolVal(true)
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5489
		{
			yyVAL.arrayElement = BoolVal(false)
		}
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5493
		{
			yyVAL.arrayElement = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5499
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5503
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5532
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5536
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5540
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5544
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5548
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5552
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5556
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5560
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 1000:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5564
		{
			yyVAL.str = "ALL PRIVILEGES"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5568
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5574
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 1003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5578
		{
			yyVAL.strs = append(yyVAL.strs, yyDollar[3].str)
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5584
		{
			yyVAL.strs = []string{yyDollar[1].colIdent.String()}
		}
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5588
		{
			yyVAL.strs = append(yyVAL.strs, yyDollar[3].colIdent.String())
		}
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5744
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5753
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
