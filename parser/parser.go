// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex any, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex any, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex any, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex any) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex any) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex any) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
	handlerCondition         HandlerCondition
	handlerConditions        []HandlerCondition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const SCHEMA = 57457
const TABLE = 57458
const INDEX = 57459
const MATERIALIZED = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const PRIMARY = 57465
const COLUMN = 57466
const CONSTRAINT = 57467
const REFERENCES = 57468
const SPATIAL = 57469
const FULLTEXT = 57470
const FOREIGN = 57471
const KEY_BLOCK_SIZE = 57472
const POLICY = 57473
const WHILE = 57474
const UNIQUE = 57475
const KEY = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const EXEC = 57485
const EXECUTE = 57486
const MAXVALUE = 57487
const PARTITION = 57488
const REORGANIZE = 57489
const LESS = 57490
const THAN = 57491
const PROCEDURE = 57492
const TRIGGER = 57493
const TYPE = 57494
const RETURN = 57495
const STATUS = 57496
const VARIABLES = 57497
const RESTRICT = 57498
const CASCADE = 57499
const NO = 57500
const ACTION = 57501
const PERMISSIVE = 57502
const RESTRICTIVE = 57503
const PUBLIC = 57504
const CURRENT_USER = 57505
const SESSION_USER = 57506
const PAD_INDEX = 57507
const FILLFACTOR = 57508
const IGNORE_DUP_KEY = 57509
const STATISTICS_NORECOMPUTE = 57510
const STATISTICS_INCREMENTAL = 57511
const ALLOW_ROW_LOCKS = 57512
const ALLOW_PAGE_LOCKS = 57513
const DISTANCE = 57514
const M = 57515
const EUCLIDEAN = 57516
const COSINE = 57517
const BEFORE = 57518
const AFTER = 57519
const EACH = 57520
const ROW = 57521
const SCROLL = 57522
const CURSOR = 57523
const OPEN = 57524
const CLOSE = 57525
const FETCH = 57526
const PRIOR = 57527
const FIRST = 57528
const LAST = 57529
const DEALLOCATE = 57530
const INSTEAD = 57531
const OF = 57532
const OUTPUT = 57533
const HANDLER = 57534
const CONTINUE = 57535
const EXIT = 57536
const SQLEXCEPTION = 57537
const SQLWARNING = 57538
const SQLSTATE = 57539
const FOUND = 57540
const DEFERRABLE = 57541
const INITIALLY = 57542
const IMMEDIATE = 57543
const DEFERRED = 57544
const CONCURRENTLY = 57545
const ASYNC = 57546
const SQL = 57547
const SECURITY = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const BIT = 57554
const TINYINT = 57555
const SMALLINT = 57556
const SMALLSERIAL = 57557
const MEDIUMINT = 57558
const INT = 57559
const INTEGER = 57560
const SERIAL = 57561
const BIGINT = 57562
const BIGSERIAL = 57563
const INTNUM = 57564
const REAL = 57565
const DOUBLE = 57566
const PRECISION = 57567
const FLOAT_TYPE = 57568
const DECIMAL = 57569
const NUMERIC = 57570
const SMALLMONEY = 57571
const MONEY = 57572
const TIME = 57573
const TIMESTAMP = 57574
const DATETIME = 57575
const YEAR = 57576
const DATETIMEOFFSET = 57577
const DATETIME2 = 57578
const SMALLDATETIME = 57579
const CHAR = 57580
const VARCHAR = 57581
const VARYING = 57582
const BOOL = 57583
const CHARACTER = 57584
const VARBINARY = 57585
const NCHAR = 57586
const NVARCHAR = 57587
const NTEXT = 57588
const UUID = 57589
const TEXT = 57590
const TINYTEXT = 57591
const MEDIUMTEXT = 57592
const LONGTEXT = 57593
const CITEXT = 57594
const BLOB = 57595
const TINYBLOB = 57596
const MEDIUMBLOB = 57597
const LONGBLOB = 57598
const JSON = 57599
const JSONB = 57600
const ENUM = 57601
const GEOMETRY = 57602
const POINT = 57603
const LINESTRING = 57604
const POLYGON = 57605
const GEOMETRYCOLLECTION = 57606
const MULTIPOINT = 57607
const MULTILINESTRING = 57608
const MULTIPOLYGON = 57609
const VECTOR = 57610
const VARIADIC = 57611
const ARRAY = 57612
const NOW = 57613
const GETDATE = 57614
const BPCHAR = 57615
const TEXT_PATTERN_OPS = 57616
const NULLX = 57617
const AUTO_INCREMENT = 57618
const APPROXNUM = 57619
const SIGNED = 57620
const UNSIGNED = 57621
const ZEROFILL = 57622
const ZONE = 57623
const AUTOINCREMENT = 57624
const DATABASES = 57625
const TABLES = 57626
const VSCHEMA_TABLES = 57627
const EXTENDED = 57628
const FULL = 57629
const PROCESSLIST = 57630
const NAMES = 57631
const CHARSET = 57632
const GLOBAL = 57633
const SESSION = 57634
const ISOLATION = 57635
const LEVEL = 57636
const READ = 57637
const WRITE = 57638
const ONLY = 57639
const REPEATABLE = 57640
const COMMITTED = 57641
const UNCOMMITTED = 57642
const SERIALIZABLE = 57643
const NEW = 57644
const CONCAT_NULL_YIELDS_NULL = 57645
const CURSOR_CLOSE_ON_COMMIT = 57646
const QUOTED_IDENTIFIER = 57647
const ARITHABORT = 57648
const FMTONLY = 57649
const NOCOUNT = 57650
const NOEXEC = 57651
const NUMERIC_ROUNDABORT = 57652
const ANSI_DEFAULTS = 57653
const ANSI_NULL_DFLT_OFF = 57654
const ANSI_NULL_DFLT_ON = 57655
const ANSI_NULLS = 57656
const ANSI_PADDING = 57657
const ANSI_WARNINGS = 57658
const FORCEPLAN = 57659
const SHOWPLAN_ALL = 57660
const SHOWPLAN_TEXT = 57661
const SHOWPLAN_XML = 57662
const IMPLICIT_TRANSACTIONS = 57663
const REMOTE_PROC_TRANSACTIONS = 57664
const XACT_ABORT = 57665
const CURRENT_TIMESTAMP = 57666
const DATABASE = 57667
const CURRENT_DATE = 57668
const CURRENT_TIME = 57669
const LOCALTIME = 57670
const LOCALTIMESTAMP = 57671
const UTC_DATE = 57672
const UTC_TIME = 57673
const UTC_TIMESTAMP = 57674
const REPLACE = 57675
const CONVERT = 57676
const CAST = 57677
const SUBSTR = 57678
const SUBSTRING = 57679
const GROUP_CONCAT = 57680
const SEPARATOR = 57681
const INHERIT = 57682
const LEAD = 57683
const LAG = 57684
const MATCH = 57685
const AGAINST = 57686
const BOOLEAN = 57687
const LANGUAGE = 57688
const WITH = 57689
const WITHOUT = 57690
const PARSER = 57691
const QUERY = 57692
const EXPANSION = 57693
const UNUSED = 57694
const VIRTUAL = 57695
const STORED = 57696
const GENERATED = 57697
const ALWAYS = 57698
const IDENTITY = 57699
const SEQUENCE = 57700
const INCREMENT = 57701
const MINVALUE = 57702
const CACHE = 57703
const CYCLE = 57704
const OWNED = 57705
const NONE = 57706
const CLUSTERED = 57707
const NONCLUSTERED = 57708
const REPLICATION = 57709
const COLUMNSTORE = 57710
const INCLUDE = 57711
const HOLDLOCK = 57712
const NOLOCK = 57713
const NOWAIT = 57714
const PAGLOCK = 57715
const ROWLOCK = 57716
const TABLOCK = 57717
const UPDLOCK = 57718
const READUNCOMMITTED = 57719
const DEFINER = 57720
const INVOKER = 57721
const TYPECAST = 57722
const CHECK = 57723
const OVER = 57724

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"HANDLER",
	"CONTINUE",
	"EXIT",
	"SQLEXCEPTION",
	"SQLWARNING",
	"SQLSTATE",
	"FOUND",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"ASYNC",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	134, 508,
	-2, 236,
	-1, 52,
	123, 905,
	-2, 899,
	-1, 53,
	123, 906,
	-2, 819,
	-1, 278,
	123, 909,
	-2, 903,
	-1, 279,
	123, 906,
	-2, 904,
	-1, 435,
	61, 477,
	-2, 474,
	-1, 465,
	123, 907,
	-2, 330,
	-1, 589,
	123, 907,
	-2, 330,
	-1, 610,
	287, 916,
	-2, 807,
	-1, 664,
	287, 916,
	-2, 548,
	-1, 700,
	5, 38,
	-2, 16,
	-1, 706,
	5, 38,
	-2, 18,
	-1, 849,
	287, 916,
	-2, 548,
	-1, 1021,
	287, 916,
	-2, 412,
	-1, 1090,
	287, 916,
	-2, 548,
	-1, 1154,
	287, 916,
	-2, 807,
	-1, 1272,
	5, 39,
	-2, 681,
	-1, 1355,
	5, 38,
	-2, 17,
	-1, 1371,
	198, 66,
	-2, 604,
	-1, 1409,
	287, 916,
	-2, 216,
	-1, 1410,
	287, 916,
	-2, 216,
	-1, 1614,
	90, 901,
	-2, 889,
	-1, 1713,
	57, 52,
	59, 52,
	-2, 54,
	-1, 1898,
	5, 38,
	-2, 858,
	-1, 1923,
	5, 38,
	-2, 61,
	-1, 1968,
	59, 1050,
	60, 1050,
	-2, 534,
	-1, 2010,
	5, 39,
	-2, 859,
	-1, 2044,
	5, 38,
	-2, 861,
	-1, 2066,
	5, 39,
	-2, 862,
}

const yyPrivate = 57344

const yyLast = 11561

var yyAct = [...]int16{
	591, 572, 1916, 2019, 1961, 1817, 601, 1835, 1105, 1967,
	1958, 423, 31, 1735, 1962, 1885, 1843, 1921, 48, 49,
	50, 1818, 1127, 795, 796, 713, 1066, 1748, 1124, 1574,
	1582, 1797, 77, 77, 77, 77, 1128, 1139, 1141, 1723,
	1908, 1593, 1747, 148, 152, 153, 1733, 1810, 692, 1121,
	1611, 647, 1608, 928, 1378, 1605, 1142, 1373, 71, 499,
	1589, 1344, 1601, 959, 1186, 1349, 1274, 1626, 916, 1482,
	31, 575, 1063, 737, 27, 995, 245, 1592, 1020, 1265,
	1491, 427, 943, 823, 1051, 247, 249, 972, 215, 653,
	570, 905, 73, 1598, 562, 230, 128, 128, 128, 128,
	839, 430, 547, 571, 462, 265, 179, 158, 266, 1048,
	464, 61, 198, 56, 174, 436, 1512, 471, 773, 774,
	766, 767, 768, 769, 770, 771, 772, 765, 217, 1098,
	775, 488, 901, 583, 1225, 873, 274, 1014, 831, 1325,
	9, 1326, 703, 691, 1156, 1145, 1144, 213, 1083, 1700,
	654, 254, 255, 876, 555, 169, 1146, 154, 1099, 156,
	1221, 171, 765, 63, 556, 775, 275, 77, 775, 1147,
	35, 743, 168, 638, 275, 858, 1336, 278, 635, 414,
	261, 262, 437, 438, 64, 65, 431, 434, 1183, 460,
	232, 233, 234, 235, 768, 769, 770, 771, 772, 765,
	450, 2067, 775, 1999, 1678, 1185, 2020, 2021, 2022, 2023,
	2024, 2025, 2026, 2027, 482, 2064, 273, 1536, 1537, 1946,
	124, 124, 124, 124, 421, 412, 1071, 1072, 1230, 648,
	1917, 128, 2057, 1229, 511, 512, 1571, 127, 127, 127,
	127, 1268, 216, 253, 176, 1998, 1945, 1526, 259, 1184,
	263, 264, 1254, 519, 1664, 66, 479, 271, 1934, 1991,
	435, 1933, 415, 1749, 1935, 1750, 418, 1992, 1993, 1854,
	1855, 1853, 1647, 535, 649, 1140, 888, 195, 887, 490,
	219, 125, 125, 125, 125, 1152, 895, 221, 810, 454,
	231, 1519, 503, 504, 505, 506, 1158, 1159, 1060, 1510,
	223, 683, 682, 456, 413, 248, 1154, 510, 476, 1289,
	478, 477, 1287, 1863, 1359, 507, 491, 473, 155, 1767,
	494, 45, 497, 498, 516, 1939, 1938, 1866, 1867, 1930,
	1604, 533, 35, 1741, 270, 1148, 1149, 1151, 1864, 752,
	751, 1150, 1358, 34, 751, 518, 1763, 475, 1120, 753,
	523, 524, 525, 149, 950, 124, 159, 753, 35, 960,
	1363, 753, 1492, 1493, 709, 710, 1811, 1603, 35, 2041,
	33, 759, 127, 1476, 762, 1125, 745, 902, 744, 534,
	777, 778, 779, 780, 781, 782, 783, 453, 760, 761,
	758, 784, 785, 786, 787, 764, 763, 773, 774, 766,
	767, 768, 769, 770, 771, 772, 765, 46, 776, 775,
	437, 438, 557, 452, 447, 35, 125, 432, 923, 1677,
	275, 1679, 755, 721, 1652, 755, 554, 548, 764, 763,
	773, 774, 766, 767, 768, 769, 770, 771, 772, 765,
	722, 194, 775, 776, 752, 751, 776, 186, 637, 185,
	1224, 189, 190, 193, 1766, 38, 1773, 187, 195, 1511,
	754, 1531, 753, 703, 482, 1156, 1145, 1144, 754, 2058,
	544, 750, 754, 1404, 1954, 546, 39, 1146, 40, 1266,
	776, 1374, 1375, 724, 1222, 1223, 1157, 193, 1880, 231,
	1147, 859, 1807, 764, 763, 773, 774, 766, 767, 768,
	769, 770, 771, 772, 765, 715, 776, 775, 437, 438,
	550, 62, 28, 52, 640, 55, 909, 150, 151, 734,
	734, 694, 35, 527, 540, 1682, 1844, 47, 1670, 550,
	160, 161, 35, 1497, 714, 545, 2005, 275, 719, 1602,
	723, 1230, 1847, 162, 275, 2033, 459, 513, 558, 636,
	700, 668, 706, 509, 671, 1944, 1920, 674, 675, 1919,
	657, 548, 634, 639, 701, 1918, 701, 473, 650, 641,
	740, 44, 175, 754, 652, 763, 773, 774, 766, 767,
	768, 769, 770, 771, 772, 765, 67, 718, 775, 670,
	43, 1563, 191, 1084, 727, 60, 1140, 475, 42, 58,
	38, 55, 1561, 549, 542, 41, 1152, 701, 2013, 749,
	417, 444, 752, 751, 192, 695, 696, 1158, 1159, 1883,
	1530, 39, 549, 40, 443, 711, 742, 1154, 445, 35,
	753, 1086, 1562, 6, 7, 1405, 1406, 1407, 790, 705,
	716, 712, 539, 717, 714, 1752, 193, 752, 751, 725,
	541, 1538, 752, 751, 693, 77, 1148, 1149, 1151, 1492,
	1493, 194, 1150, 1548, 794, 753, 799, 800, 275, 856,
	753, 1087, 746, 1848, 1846, 1845, 814, 651, 195, 811,
	52, 1363, 465, 466, 467, 469, 38, 776, 813, 694,
	892, 472, 470, 480, 481, 667, 755, 194, 694, 714,
	548, 536, 36, 37, 1279, 188, 1278, 39, 167, 40,
	738, 739, 741, 868, 195, 752, 751, 845, 882, 128,
	776, 922, 854, 165, 899, 924, 752, 751, 907, 468,
	883, 1936, 548, 753, 501, 500, 677, 875, 880, 881,
	1906, 754, 701, 1672, 753, 637, 648, 1751, 900, 548,
	41, 852, 1881, 1542, 979, 473, 863, 833, 834, 835,
	836, 837, 838, 1244, 1243, 973, 1544, 38, 977, 978,
	976, 1052, 1836, 1838, 1306, 884, 754, 886, 1242, 1241,
	1240, 754, 1738, 925, 893, 776, 1239, 1238, 39, 1237,
	40, 649, 648, 1002, 1001, 678, 1297, 957, 1236, 908,
	1011, 1011, 433, 569, 441, 442, 224, 1157, 1707, 1013,
	484, 483, 1235, 844, 275, 275, 1539, 1708, 58, 947,
	55, 1008, 693, 919, 951, 278, 1002, 1053, 1233, 701,
	974, 693, 891, 1319, 942, 701, 41, 649, 1528, 946,
	701, 898, 1122, 124, 754, 1052, 953, 36, 37, 429,
	752, 751, 752, 751, 1067, 754, 1837, 2034, 752, 751,
	127, 954, 952, 170, 1015, 1016, 776, 164, 753, 845,
	753, 949, 964, 966, 967, 948, 753, 999, 449, 1085,
	965, 428, 1027, 1255, 1256, 1257, 1354, 429, 1017, 1018,
	1009, 1012, 794, 1676, 1047, 1483, 227, 694, 694, 229,
	429, 1494, 944, 945, 125, 38, 429, 474, 479, 1485,
	1067, 703, 1075, 1156, 1145, 1144, 1484, 41, 1123, 1787,
	1736, 1061, 1162, 1064, 1065, 1146, 39, 1483, 40, 30,
	1618, 440, 448, 36, 37, 1481, 1119, 492, 1147, 857,
	871, 1109, 975, 890, 1091, 492, 1092, 1079, 1484, 655,
	656, 889, 861, 26, 752, 751, 548, 1077, 752, 751,
	476, 870, 478, 477, 1756, 844, 492, 1540, 1541, 1543,
	1545, 1546, 753, 1045, 1046, 517, 753, 484, 483, 754,
	1227, 754, 496, 973, 515, 1062, 495, 754, 514, 487,
	1929, 1990, 439, 1703, 35, 996, 1755, 997, 35, 177,
	1086, 1783, 1275, 440, 1250, 812, 1034, 21, 812, 16,
	1234, 885, 1928, 508, 36, 37, 455, 902, 440, 35,
	256, 35, 17, 1025, 24, 35, 917, 755, 1717, 1245,
	693, 693, 2051, 2050, 917, 2049, 1315, 2036, 1986, 755,
	1100, 1101, 18, 19, 1140, 2012, 755, 755, 974, 1315,
	1947, 731, 1870, 1631, 1152, 41, 1231, 703, 1720, 755,
	1959, 1951, 755, 1905, 1261, 1158, 1159, 1026, 864, 466,
	467, 469, 731, 1769, 1718, 1154, 1716, 472, 470, 480,
	481, 731, 1768, 754, 1896, 1085, 1000, 754, 275, 1897,
	917, 1689, 731, 1643, 1315, 1642, 1551, 694, 548, 278,
	811, 1639, 1638, 1285, 1148, 1149, 1151, 731, 1633, 440,
	1150, 676, 1284, 633, 1286, 468, 1725, 1728, 1729, 1730,
	1726, 1303, 1727, 1731, 731, 1632, 1909, 1910, 632, 1363,
	869, 731, 1552, 1317, 1352, 1305, 731, 1502, 1015, 1080,
	755, 1413, 1355, 1315, 1314, 1340, 1335, 1371, 701, 1400,
	1401, 1402, 36, 37, 1409, 1364, 701, 731, 1252, 14,
	731, 1104, 1339, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
	1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
	1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
	1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
	1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
	1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
	1162, 548, 548, 1353, 1329, 1333, 1332, 1477, 1330, 1331,
	693, 1480, 1341, 1327, 1324, 1367, 1368, 1369, 1411, 1376,
	1334, 1351, 917, 1103, 20, 917, 1070, 1006, 755, 1067,
	548, 731, 958, 1322, 1412, 1157, 22, 23, 642, 25,
	731, 730, 687, 686, 1798, 1003, 1004, 1005, 1007, 1472,
	1473, 631, 1365, 680, 681, 1500, 680, 679, 658, 630,
	1342, 559, 446, 1479, 69, 68, 664, 665, 666, 1337,
	1798, 1719, 703, 474, 479, 1814, 902, 1716, 1501, 1055,
	1056, 1057, 1058, 1321, 1059, 1361, 1301, 1486, 1487, 1488,
	1489, 1490, 1905, 440, 1102, 1503, 1532, 1720, 1299, 1160,
	1498, 1499, 532, 1905, 2043, 1496, 1357, 1069, 1315, 2008,
	704, 1095, 704, 1094, 1093, 1076, 1720, 1006, 1080, 714,
	1080, 918, 1506, 1027, 440, 1078, 476, 1081, 478, 477,
	894, 872, 1088, 1089, 1300, 1516, 865, 1514, 862, 684,
	1566, 747, 1027, 1520, 1555, 1513, 1298, 1981, 673, 789,
	791, 792, 793, 797, 1580, 532, 1521, 275, 1518, 1117,
	802, 802, 802, 802, 802, 802, 802, 1573, 1505, 1585,
	672, 669, 1577, 531, 703, 664, 532, 1720, 1315, 1852,
	1744, 1599, 1564, 1583, 1619, 1584, 815, 816, 817, 818,
	819, 820, 821, 822, 1080, 825, 1591, 827, 828, 829,
	830, 832, 832, 832, 832, 832, 832, 832, 1251, 848,
	849, 850, 851, 1565, 1627, 1627, 1527, 1280, 917, 731,
	703, 1596, 1587, 860, 689, 688, 440, 1617, 685, 764,
	763, 773, 774, 766, 767, 768, 769, 770, 771, 772,
	765, 1979, 1590, 775, 1942, 1909, 1910, 1034, 1784, 1556,
	1557, 221, 1269, 1270, 1636, 548, 548, 246, 1628, 1475,
	1272, 1629, 1474, 1338, 1025, 250, 1034, 1959, 1249, 1276,
	1277, 1248, 440, 1220, 1097, 58, 1096, 55, 664, 1074,
	1362, 955, 921, 1025, 897, 896, 853, 748, 704, 699,
	1550, 698, 697, 663, 662, 660, 643, 560, 1558, 1302,
	520, 461, 457, 1634, 1635, 1308, 426, 243, 1026, 251,
	252, 1226, 237, 1310, 1311, 236, 1312, 1313, 766, 767,
	768, 769, 770, 771, 772, 765, 225, 1026, 775, 275,
	11, 1323, 1725, 1728, 1729, 1730, 1726, 537, 1727, 1731,
	1912, 802, 802, 1318, 802, 802, 802, 802, 802, 802,
	802, 802, 802, 802, 802, 802, 802, 802, 802, 1648,
	1640, 1641, 38, 690, 522, 1711, 521, 258, 257, 163,
	157, 1671, 1673, 1674, 1675, 704, 1569, 1667, 1915, 718,
	1740, 797, 77, 39, 1914, 40, 797, 275, 1668, 1669,
	1706, 1826, 1825, 1829, 1754, 1827, 1709, 58, 1830, 55,
	1828, 1831, 2037, 1729, 1730, 1666, 1114, 1115, 1698, 1997,
	1697, 1796, 1162, 1694, 826, 701, 425, 548, 1771, 1645,
	1757, 1699, 1705, 70, 52, 502, 55, 646, 1345, 1714,
	2006, 1759, 944, 945, 416, 1760, 272, 1739, 1068, 1732,
	1742, 1603, 1745, 1346, 1118, 1111, 128, 645, 1112, 1596,
	530, 528, 526, 1758, 166, 1049, 145, 146, 147, 1762,
	1683, 1712, 1713, 1841, 1743, 1770, 1090, 1630, 1688, 53,
	1054, 915, 708, 1772, 1693, 911, 553, 912, 913, 914,
	1106, 32, 2004, 1789, 38, 2003, 1680, 1110, 1107, 59,
	910, 902, 1953, 1337, 267, 268, 269, 906, 1623, 1622,
	1002, 1819, 1785, 1621, 1786, 39, 1620, 40, 1686, 1247,
	1585, 38, 41, 1690, 1691, 1575, 2059, 1576, 1804, 1560,
	1362, 776, 1253, 1246, 1849, 275, 1803, 1535, 1534, 552,
	551, 59, 39, 275, 40, 451, 904, 59, 1008, 32,
	1067, 1813, 1815, 1821, 1822, 1806, 1824, 1715, 720, 920,
	8, 1832, 701, 802, 802, 802, 1, 1377, 13, 1775,
	802, 802, 802, 802, 1624, 1067, 1861, 1596, 1533, 1851,
	124, 12, 1596, 1596, 1596, 1596, 1596, 1850, 1820, 1884,
	260, 1823, 1273, 1859, 1549, 1812, 1596, 127, 809, 587,
	1816, 1882, 1865, 1860, 1765, 573, 2018, 1924, 1842, 1090,
	1791, 1372, 1600, 1370, 1567, 802, 776, 1795, 1403, 36,
	37, 1495, 486, 200, 1898, 1320, 458, 15, 1570, 59,
	1922, 1356, 707, 529, 59, 1890, 59, 59, 701, 1904,
	1478, 125, 926, 59, 41, 279, 733, 59, 59, 183,
	173, 1902, 59, 424, 1913, 1923, 726, 1872, 419, 29,
	1596, 35, 592, 1010, 590, 594, 595, 596, 597, 701,
	1931, 41, 593, 598, 275, 10, 1596, 1232, 1343, 184,
	182, 181, 180, 1937, 178, 489, 218, 1002, 1819, 59,
	1969, 1922, 1960, 59, 1963, 222, 1002, 1819, 80, 1873,
	82, 1970, 81, 79, 704, 78, 1585, 1585, 1972, 76,
	74, 1955, 704, 1965, 1956, 1957, 1849, 1976, 1887, 1888,
	75, 1583, 72, 1584, 1948, 1606, 1753, 701, 538, 1082,
	788, 59, 1987, 1067, 1932, 1613, 59, 59, 59, 1362,
	1702, 36, 37, 1362, 1576, 1966, 1989, 1410, 1348, 2002,
	1952, 1304, 1575, 1050, 574, 878, 963, 2001, 586, 1996,
	585, 2007, 584, 1895, 1889, 757, 1595, 1710, 36, 37,
	714, 1724, 2015, 714, 714, 714, 1649, 2032, 1650, 1651,
	1901, 1722, 1903, 1653, 1654, 1656, 1658, 1660, 1721, 2031,
	1911, 1575, 1907, 1940, 1941, 2017, 732, 1594, 2028, 2029,
	2030, 1663, 1879, 1969, 2047, 1963, 1113, 1950, 1568, 1681,
	1153, 1143, 2046, 2042, 1970, 2048, 1738, 903, 1116, 2039,
	5, 1155, 1138, 4, 1973, 2044, 1504, 463, 3, 2055,
	52, 1137, 465, 466, 467, 469, 1136, 1135, 2060, 701,
	1963, 472, 470, 480, 481, 2062, 1134, 1132, 2063, 1133,
	1002, 1819, 58, 1130, 55, 2065, 1131, 1129, 1108, 2061,
	802, 802, 702, 2, 0, 440, 0, 1801, 58, 1974,
	55, 1975, 1362, 701, 0, 1702, 0, 0, 0, 468,
	0, 0, 220, 0, 0, 226, 0, 0, 228, 0,
	1761, 0, 802, 802, 802, 802, 0, 0, 2016, 424,
	0, 0, 0, 0, 0, 238, 239, 240, 241, 242,
	1553, 0, 0, 0, 0, 599, 1559, 38, 0, 0,
	1547, 244, 0, 0, 0, 1782, 1702, 0, 0, 0,
	0, 0, 0, 0, 54, 57, 0, 1588, 39, 38,
	40, 0, 0, 59, 703, 1790, 1156, 1145, 1144, 564,
	0, 0, 0, 0, 0, 38, 0, 0, 1146, 0,
	39, 0, 40, 1597, 0, 0, 0, 0, 1576, 0,
	0, 1147, 0, 0, 1801, 0, 39, 57, 40, 0,
	0, 0, 0, 57, 0, 0, 0, 58, 0, 55,
	0, 0, 0, 0, 0, 1834, 0, 0, 0, 0,
	59, 59, 59, 0, 0, 0, 0, 0, 1926, 0,
	0, 59, 0, 0, 0, 0, 424, 0, 0, 493,
	0, 0, 0, 424, 0, 0, 1579, 0, 0, 1575,
	0, 0, 0, 1871, 0, 0, 0, 0, 1874, 1875,
	1876, 1877, 1878, 0, 0, 0, 0, 0, 0, 58,
	0, 55, 0, 0, 0, 0, 0, 474, 479, 0,
	0, 0, 0, 0, 0, 57, 0, 41, 0, 0,
	57, 1637, 57, 57, 38, 0, 1644, 1140, 0, 57,
	0, 280, 0, 280, 57, 0, 0, 1152, 57, 41,
	703, 0, 1156, 1145, 1144, 39, 0, 40, 1158, 1159,
	0, 802, 0, 1702, 1146, 41, 0, 0, 1154, 0,
	476, 0, 478, 477, 0, 0, 0, 1147, 0, 0,
	1662, 1362, 0, 0, 1685, 57, 1687, 484, 483, 485,
	0, 0, 1692, 0, 0, 0, 38, 1148, 1149, 1151,
	0, 1943, 0, 1150, 0, 0, 1949, 424, 0, 0,
	0, 0, 0, 0, 0, 1362, 0, 39, 0, 40,
	0, 1801, 1363, 0, 36, 37, 0, 57, 59, 0,
	59, 1576, 57, 57, 57, 0, 0, 59, 0, 0,
	0, 0, 0, 1985, 0, 59, 36, 37, 52, 0,
	55, 1734, 0, 0, 703, 561, 1156, 1145, 1144, 0,
	1576, 0, 36, 37, 0, 0, 0, 0, 1146, 0,
	0, 0, 2000, 644, 0, 0, 0, 1774, 1161, 0,
	0, 1147, 0, 1140, 41, 0, 2009, 2010, 2011, 0,
	0, 0, 0, 1152, 2014, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1158, 1159, 802, 0, 0, 802,
	0, 802, 0, 802, 1154, 802, 802, 0, 0, 0,
	1792, 0, 0, 0, 1793, 1794, 51, 0, 0, 0,
	0, 0, 0, 659, 661, 38, 1862, 0, 0, 0,
	0, 0, 0, 1148, 1149, 1151, 41, 0, 1157, 1150,
	2052, 2053, 2054, 279, 424, 0, 39, 0, 40, 58,
	0, 55, 172, 0, 0, 0, 736, 0, 1363, 1597,
	0, 0, 0, 0, 1597, 1597, 1597, 1597, 1597, 756,
	0, 36, 37, 2066, 1661, 798, 0, 1140, 1734, 0,
	1839, 0, 0, 0, 0, 0, 0, 1152, 1578, 0,
	0, 0, 1868, 1869, 0, 0, 735, 0, 1158, 1159,
	0, 0, 0, 0, 0, 0, 0, 0, 1154, 0,
	0, 0, 0, 0, 0, 755, 824, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 59, 0, 485,
	0, 0, 0, 36, 37, 0, 38, 1148, 1149, 1151,
	0, 0, 1597, 1150, 0, 0, 0, 0, 855, 0,
	0, 1182, 0, 0, 1899, 1900, 0, 39, 1597, 40,
	764, 763, 773, 774, 766, 767, 768, 769, 770, 771,
	772, 765, 1659, 755, 775, 41, 0, 0, 0, 703,
	0, 1156, 1145, 1144, 1157, 704, 485, 57, 57, 0,
	0, 0, 0, 1146, 0, 0, 0, 57, 0, 0,
	0, 0, 0, 0, 0, 0, 1147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 764, 763,
	773, 774, 766, 767, 768, 769, 770, 771, 772, 765,
	0, 0, 775, 0, 1802, 0, 0, 0, 0, 0,
	0, 1964, 0, 704, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 0, 0, 0, 961, 962, 0,
	0, 1809, 1982, 1983, 1984, 0, 0, 0, 0, 0,
	0, 0, 36, 37, 0, 0, 801, 803, 804, 805,
	806, 807, 808, 0, 59, 0, 41, 0, 1157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 798, 0, 0, 0, 0, 798, 0,
	0, 0, 1140, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 1152, 1019, 1044, 0, 59, 0, 0, 0,
	879, 879, 879, 1158, 1159, 0, 0, 0, 1808, 0,
	0, 0, 0, 1154, 0, 0, 0, 0, 0, 0,
	0, 0, 1964, 0, 485, 2045, 57, 0, 0, 0,
	0, 0, 0, 485, 1073, 0, 0, 0, 0, 0,
	0, 57, 1148, 1149, 1151, 0, 0, 0, 1150, 0,
	0, 0, 0, 36, 37, 0, 0, 1964, 0, 704,
	59, 0, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
	0, 0, 776, 0, 0, 0, 0, 968, 54, 0,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 0, 0, 0, 0, 280,
	0, 879, 879, 0, 0, 879, 879, 879, 0, 0,
	0, 54, 0, 703, 0, 1156, 1145, 1144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1146, 0, 0,
	776, 0, 1271, 0, 879, 879, 879, 879, 0, 0,
	1147, 34, 0, 1157, 0, 0, 0, 0, 0, 703,
	0, 1156, 1145, 1144, 0, 0, 0, 0, 0, 0,
	879, 0, 0, 1146, 0, 0, 35, 0, 33, 0,
	0, 0, 0, 0, 0, 0, 1147, 0, 1307, 0,
	0, 0, 485, 485, 0, 0, 0, 0, 1281, 1282,
	0, 1283, 0, 1808, 1316, 0, 0, 0, 0, 1288,
	0, 1290, 1291, 1292, 0, 0, 1293, 1294, 0, 1295,
	1296, 0, 0, 0, 0, 0, 0, 0, 59, 59,
	0, 0, 0, 0, 0, 0, 424, 0, 0, 0,
	0, 0, 1347, 1350, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1140, 0, 1360, 0,
	0, 0, 0, 38, 0, 0, 1152, 0, 0, 0,
	0, 0, 0, 0, 1657, 0, 1366, 1158, 1159, 0,
	0, 0, 0, 0, 39, 0, 40, 1154, 1408, 0,
	824, 0, 1140, 0, 0, 0, 0, 0, 0, 1258,
	1259, 1260, 1152, 0, 0, 0, 0, 1262, 1263, 1264,
	0, 0, 0, 1158, 1159, 755, 1148, 1149, 1151, 0,
	0, 0, 1150, 1154, 0, 0, 0, 0, 0, 0,
	0, 0, 703, 0, 1156, 1145, 1144, 0, 0, 0,
	0, 1363, 0, 0, 879, 0, 1146, 0, 0, 0,
	1309, 801, 1148, 1149, 1151, 0, 0, 0, 1150, 1147,
	764, 763, 773, 774, 766, 767, 768, 769, 770, 771,
	772, 765, 0, 0, 775, 0, 879, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 879, 0, 0, 0,
	0, 59, 485, 0, 0, 0, 0, 0, 0, 611,
	0, 612, 0, 0, 0, 0, 0, 0, 424, 602,
	603, 0, 0, 41, 0, 0, 1517, 0, 0, 440,
	0, 0, 52, 592, 589, 590, 594, 595, 596, 597,
	0, 0, 0, 593, 598, 480, 481, 0, 0, 0,
	0, 0, 1529, 581, 0, 0, 610, 59, 59, 0,
	0, 0, 0, 0, 0, 0, 57, 59, 59, 0,
	0, 0, 0, 0, 0, 1140, 424, 1157, 0, 0,
	578, 579, 0, 1554, 0, 1152, 627, 0, 580, 0,
	0, 576, 577, 582, 0, 0, 1158, 1159, 0, 0,
	0, 1182, 0, 1572, 0, 0, 1154, 0, 0, 0,
	625, 0, 0, 1157, 0, 0, 0, 0, 0, 38,
	36, 37, 0, 0, 0, 0, 0, 1361, 0, 0,
	0, 0, 0, 0, 0, 1148, 1149, 1151, 0, 0,
	39, 1150, 40, 0, 0, 0, 0, 0, 0, 0,
	59, 588, 0, 0, 0, 798, 798, 0, 0, 0,
	0, 0, 0, 1995, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 213, 214, 0, 0,
	0, 59, 0, 0, 0, 59, 59, 0, 0, 0,
	59, 59, 59, 59, 59, 0, 0, 0, 1655, 755,
	0, 201, 59, 0, 59, 0, 1508, 1509, 59, 0,
	0, 0, 0, 929, 424, 0, 208, 941, 196, 0,
	0, 0, 424, 0, 0, 0, 197, 931, 0, 0,
	0, 0, 0, 0, 0, 613, 0, 0, 1522, 1523,
	1524, 1525, 0, 59, 764, 763, 773, 774, 766, 767,
	768, 769, 770, 771, 772, 765, 0, 629, 775, 614,
	615, 0, 776, 0, 0, 0, 0, 0, 59, 41,
	0, 0, 0, 0, 57, 57, 1665, 0, 0, 0,
	0, 0, 0, 0, 59, 204, 1157, 199, 209, 0,
	600, 0, 0, 0, 0, 206, 205, 0, 0, 0,
	0, 0, 1281, 930, 0, 0, 0, 0, 1695, 1696,
	1350, 0, 616, 626, 622, 623, 620, 621, 619, 618,
	617, 628, 604, 605, 606, 607, 609, 0, 0, 484,
	483, 608, 0, 0, 0, 0, 1701, 0, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 0, 0, 0,
	0, 0, 0, 424, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 36, 37, 624, 1971,
	0, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
	1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
	1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442,
	1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452,
	1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
	1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 0,
	0, 1507, 0, 0, 0, 0, 0, 57, 202, 0,
	0, 0, 0, 0, 203, 0, 1799, 1646, 0, 0,
	0, 0, 0, 0, 0, 59, 764, 763, 773, 774,
	766, 767, 768, 769, 770, 771, 772, 765, 0, 0,
	775, 0, 0, 0, 879, 0, 0, 0, 0, 0,
	0, 0, 1971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 57, 0, 0, 1858, 0, 0,
	0, 0, 0, 57, 1737, 0, 0, 0, 0, 755,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 212,
	927, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 929, 1886, 776, 0, 941, 0,
	0, 0, 0, 207, 0, 0, 1267, 0, 931, 0,
	0, 1893, 0, 1894, 764, 763, 773, 774, 766, 767,
	768, 769, 770, 771, 772, 765, 0, 0, 775, 0,
	0, 764, 763, 773, 774, 766, 767, 768, 769, 770,
	771, 772, 765, 0, 0, 775, 1788, 0, 0, 0,
	0, 0, 1776, 0, 0, 1777, 0, 1778, 0, 1779,
	0, 1780, 1781, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	0, 57, 57, 0, 930, 54, 57, 57, 57, 57,
	57, 0, 0, 0, 0, 0, 0, 0, 1833, 0,
	57, 0, 0, 0, 1840, 0, 0, 0, 0, 0,
	0, 0, 1977, 0, 0, 1978, 0, 0, 1980, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	0, 0, 1994, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1886, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 0, 0, 0,
	798, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 0, 0, 0, 0, 0, 0, 776, 2038,
	798, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 397, 386, 0, 345,
	399, 313, 333, 408, 335, 336, 371, 292, 354, 0,
	330, 311, 54, 0, 0, 316, 285, 325, 286, 314,
	347, 54, 312, 0, 388, 357, 0, 0, 0, 406,
	0, 362, 0, 0, 0, 0, 0, 349, 390, 352,
	381, 344, 372, 301, 361, 401, 331, 367, 402, 0,
	1764, 1228, 35, 0, 0, 0, 776, 0, 0, 0,
	0, 0, 0, 0, 366, 396, 327, 298, 411, 0,
	370, 284, 364, 776, 0, 290, 293, 407, 394, 321,
	320, 0, 0, 0, 0, 0, 0, 0, 348, 353,
	377, 341, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1737, 0, 0, 317, 0, 360, 0, 0, 0,
	297, 291, 0, 346, 840, 0, 0, 300, 0, 318,
	378, 0, 281, 384, 391, 343, 0, 0, 395, 340,
	339, 0, 0, 0, 0, 0, 0, 332, 277, 38,
	409, 398, 350, 389, 315, 326, 0, 322, 0, 842,
	0, 323, 324, 359, 373, 0, 0, 0, 0, 0,
	39, 380, 40, 840, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 282, 319, 382, 385, 305,
	369, 294, 328, 375, 329, 351, 310, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1607, 0, 0,
	0, 0, 0, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 998, 843, 0, 0, 0, 0, 0,
	1615, 0, 83, 841, 0, 0, 0, 0, 847, 846,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 0, 0, 287, 0, 0, 0, 0, 41,
	288, 309, 392, 843, 0, 0, 0, 1616, 1614, 1610,
	1609, 83, 841, 0, 0, 368, 0, 847, 846, 0,
	1612, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 308, 302, 303, 355, 356, 403, 404,
	405, 379, 299, 0, 306, 307, 0, 387, 0, 0,
	0, 358, 0, 0, 0, 410, 84, 0, 0, 0,
	0, 0, 0, 334, 283, 338, 0, 0, 0, 0,
	0, 0, 0, 295, 296, 0, 0, 342, 337, 363,
	365, 374, 383, 393, 400, 376, 36, 37, 397, 386,
	0, 345, 399, 313, 333, 408, 335, 336, 371, 292,
	354, 0, 330, 311, 0, 84, 0, 316, 285, 325,
	286, 314, 347, 0, 312, 0, 388, 357, 0, 0,
	0, 406, 0, 362, 0, 0, 0, 0, 0, 349,
	390, 352, 381, 344, 372, 301, 361, 401, 331, 367,
	402, 0, 0, 0, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 366, 396, 327, 298,
	411, 0, 370, 284, 364, 0, 0, 290, 293, 407,
	394, 321, 320, 703, 0, 1156, 1145, 1144, 0, 0,
	348, 353, 377, 341, 0, 0, 0, 1146, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 0, 360, 0,
	1147, 0, 297, 291, 0, 346, 0, 0, 0, 300,
	0, 318, 378, 0, 281, 384, 391, 343, 0, 0,
	395, 340, 339, 0, 0, 0, 0, 0, 0, 332,
	277, 38, 409, 398, 350, 389, 315, 326, 0, 322,
	0, 0, 0, 323, 324, 359, 373, 0, 0, 0,
	0, 0, 39, 380, 40, 1988, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 282, 319, 382,
	385, 305, 369, 294, 328, 375, 329, 351, 310, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1140, 0, 0, 1746,
	0, 0, 0, 0, 0, 0, 1152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1158, 1159, 0,
	0, 0, 0, 0, 0, 0, 0, 1154, 0, 0,
	0, 0, 1615, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1148, 1149, 1151, 0,
	0, 0, 1150, 0, 0, 0, 287, 0, 0, 0,
	0, 41, 288, 309, 392, 0, 0, 0, 0, 1616,
	1614, 1126, 0, 0, 0, 0, 0, 368, 0, 0,
	0, 0, 1612, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 308, 302, 303, 355, 356,
	403, 404, 405, 379, 299, 0, 306, 307, 0, 387,
	0, 0, 0, 358, 0, 0, 0, 410, 0, 0,
	0, 0, 0, 0, 0, 334, 283, 338, 0, 0,
	0, 0, 0, 0, 0, 295, 296, 0, 0, 342,
	337, 363, 365, 374, 383, 393, 400, 376, 36, 37,
	397, 386, 0, 345, 399, 313, 333, 408, 335, 336,
	371, 292, 354, 0, 330, 311, 0, 0, 0, 316,
	285, 325, 286, 314, 347, 0, 312, 0, 388, 357,
	0, 0, 0, 406, 0, 362, 0, 1157, 0, 0,
	0, 349, 390, 352, 381, 344, 372, 301, 361, 401,
	331, 367, 402, 0, 0, 0, 35, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 366, 396,
	327, 298, 411, 0, 370, 284, 364, 0, 0, 290,
	293, 407, 394, 321, 320, 703, 0, 1156, 1145, 1144,
	0, 0, 348, 353, 377, 341, 0, 0, 0, 1146,
	0, 0, 0, 0, 0, 0, 0, 0, 317, 0,
	360, 0, 1147, 0, 297, 291, 0, 346, 0, 0,
	0, 300, 0, 318, 378, 0, 281, 384, 391, 343,
	0, 0, 395, 340, 339, 0, 0, 0, 1925, 0,
	0, 332, 277, 38, 409, 398, 350, 389, 315, 326,
	0, 322, 0, 0, 0, 323, 324, 359, 373, 0,
	0, 0, 0, 0, 39, 380, 40, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 282,
	319, 382, 385, 305, 369, 294, 328, 375, 329, 351,
	310, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1158,
	1159, 0, 0, 0, 0, 0, 0, 0, 0, 1154,
	0, 0, 0, 0, 1615, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1148, 1149,
	1151, 0, 0, 0, 1150, 0, 0, 0, 287, 0,
	0, 0, 0, 41, 288, 309, 392, 0, 0, 0,
	0, 1616, 1614, 1927, 0, 0, 0, 0, 0, 368,
	0, 0, 0, 0, 1612, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 308, 302, 303,
	355, 356, 403, 404, 405, 379, 299, 0, 306, 307,
	0, 387, 0, 0, 0, 358, 0, 0, 0, 410,
	0, 0, 0, 0, 0, 0, 0, 334, 283, 338,
	0, 0, 0, 0, 0, 0, 0, 295, 296, 0,
	0, 342, 337, 363, 365, 374, 383, 393, 400, 376,
	36, 37, 397, 386, 0, 345, 399, 313, 333, 408,
	335, 336, 371, 292, 354, 0, 330, 311, 0, 0,
	0, 316, 285, 325, 286, 314, 347, 0, 312, 0,
	388, 357, 0, 106, 0, 406, 0, 362, 0, 1157,
	0, 0, 0, 349, 390, 352, 381, 344, 372, 301,
	361, 401, 331, 367, 402, 0, 0, 0, 52, 0,
	55, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	366, 396, 327, 298, 411, 0, 370, 284, 364, 0,
	0, 290, 293, 407, 394, 321, 320, 0, 0, 0,
	0, 0, 0, 0, 348, 353, 377, 341, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1328, 0,
	317, 0, 360, 0, 0, 0, 297, 291, 0, 346,
	91, 0, 0, 300, 0, 318, 378, 0, 281, 384,
	391, 343, 0, 0, 395, 340, 339, 0, 0, 0,
	0, 0, 0, 332, 277, 38, 409, 398, 350, 389,
	315, 326, 0, 322, 0, 107, 0, 323, 324, 359,
	373, 0, 0, 0, 0, 0, 39, 380, 40, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 282, 319, 382, 385, 305, 369, 294, 328, 375,
	329, 351, 310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 0,
	139, 126, 0, 140, 141, 142, 144, 143, 108, 109,
	110, 114, 112, 111, 113, 85, 87, 0, 83, 86,
	92, 88, 89, 90, 104, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 105, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 41, 288, 309, 392, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 368, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 308,
	302, 303, 355, 356, 403, 404, 405, 379, 299, 0,
	306, 307, 0, 387, 0, 0, 0, 358, 0, 0,
	0, 410, 84, 0, 0, 0, 0, 0, 0, 334,
	283, 338, 0, 0, 0, 0, 0, 0, 0, 295,
	296, 0, 0, 342, 337, 363, 365, 374, 383, 393,
	400, 376, 36, 37, 397, 386, 0, 345, 399, 313,
	333, 408, 335, 336, 371, 292, 354, 0, 330, 311,
	0, 0, 0, 316, 285, 325, 286, 314, 347, 0,
	312, 0, 388, 357, 0, 0, 0, 406, 0, 362,
	0, 0, 0, 0, 0, 349, 390, 352, 381, 344,
	372, 301, 361, 401, 331, 367, 402, 0, 0, 0,
	35, 0, 728, 0, 729, 0, 0, 0, 0, 0,
	0, 0, 366, 396, 327, 298, 411, 0, 370, 284,
	364, 0, 0, 290, 293, 407, 394, 321, 320, 703,
	0, 1156, 1145, 1144, 0, 0, 348, 353, 377, 341,
	0, 0, 0, 1146, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 360, 0, 1147, 0, 297, 291,
	0, 346, 0, 0, 0, 300, 0, 318, 378, 0,
	281, 384, 391, 343, 0, 0, 395, 340, 339, 0,
	0, 0, 0, 0, 0, 332, 277, 38, 409, 398,
	350, 389, 315, 326, 0, 322, 0, 0, 0, 323,
	324, 359, 373, 0, 0, 0, 0, 0, 39, 380,
	40, 1891, 1892, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 282, 319, 382, 385, 305, 369, 294,
	328, 375, 329, 351, 310, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1158, 1159, 0, 0, 0, 0, 0,
	0, 0, 0, 1154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1148, 1149, 1151, 0, 0, 0, 1150, 0,
	0, 0, 287, 0, 0, 0, 0, 41, 288, 309,
	392, 0, 0, 0, 0, 0, 276, 0, 0, 0,
	0, 0, 0, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 308, 302, 303, 355, 356, 403, 404, 405, 379,
	299, 0, 306, 307, 0, 387, 0, 0, 0, 358,
	0, 0, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 334, 283, 338, 0, 0, 0, 0, 0, 0,
	0, 295, 296, 0, 0, 342, 337, 363, 365, 374,
	383, 393, 400, 376, 36, 37, 397, 386, 0, 345,
	399, 313, 333, 408, 335, 336, 371, 292, 354, 0,
	330, 311, 0, 0, 0, 316, 285, 325, 286, 314,
	347, 0, 312, 0, 388, 357, 0, 0, 0, 406,
	0, 362, 0, 1157, 0, 0, 0, 349, 390, 352,
	381, 344, 372, 301, 361, 401, 331, 367, 402, 0,
	420, 0, 35, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 422, 0, 366, 396, 327, 298, 411, 0,
	370, 284, 364, 0, 0, 290, 293, 407, 394, 321,
	320, 703, 0, 1156, 1145, 1144, 0, 0, 348, 353,
	377, 341, 0, 0, 0, 1146, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 360, 0, 1147, 0,
	297, 291, 0, 346, 0, 0, 0, 300, 0, 318,
	378, 0, 281, 384, 391, 343, 0, 0, 395, 340,
	339, 0, 0, 0, 0, 0, 0, 332, 277, 38,
	409, 398, 350, 389, 315, 326, 0, 322, 0, 0,
	0, 323, 324, 359, 373, 0, 0, 0, 0, 0,
	39, 380, 40, 2056, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 282, 319, 382, 385, 305,
	369, 294, 328, 375, 329, 351, 310, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1152, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1158, 1159, 0, 0, 0,
	0, 0, 0, 0, 0, 1154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1148, 1149, 1151, 0, 0, 0,
	1150, 0, 0, 0, 287, 0, 0, 0, 0, 41,
	288, 309, 392, 0, 0, 0, 0, 0, 276, 0,
	0, 0, 0, 0, 0, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 308, 302, 303, 355, 356, 403, 404,
	405, 379, 299, 0, 306, 307, 0, 387, 0, 0,
	0, 358, 0, 0, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 334, 283, 338, 0, 0, 0, 0,
	0, 0, 0, 295, 296, 0, 0, 342, 337, 363,
	365, 374, 383, 393, 400, 376, 36, 37, 397, 386,
	0, 345, 399, 313, 333, 408, 335, 336, 371, 292,
	354, 0, 330, 311, 0, 0, 0, 316, 285, 325,
	286, 314, 347, 0, 312, 0, 388, 357, 0, 0,
	0, 406, 0, 362, 0, 1157, 0, 0, 0, 349,
	390, 352, 381, 344, 372, 301, 361, 401, 331, 367,
	402, 0, 0, 0, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 366, 396, 327, 298,
	411, 0, 370, 284, 364, 0, 0, 290, 293, 407,
	394, 321, 320, 703, 0, 1156, 1145, 1144, 0, 0,
	348, 353, 377, 341, 0, 0, 0, 1146, 0, 0,
	0, 0, 0, 0, 1684, 0, 317, 0, 360, 0,
	1147, 0, 297, 291, 0, 346, 0, 0, 0, 300,
	0, 318, 378, 0, 281, 384, 391, 343, 0, 0,
	395, 340, 339, 0, 0, 0, 0, 0, 0, 332,
	277, 38, 409, 398, 350, 389, 315, 326, 0, 322,
	0, 0, 0, 323, 324, 359, 373, 0, 0, 0,
	0, 0, 39, 380, 40, 2040, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 282, 319, 382,
	385, 305, 369, 294, 328, 375, 329, 351, 310, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1158, 1159, 0,
	0, 0, 0, 0, 0, 0, 0, 1154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1148, 1149, 1151, 0,
	0, 0, 1150, 0, 0, 0, 287, 0, 0, 0,
	0, 41, 288, 309, 392, 0, 0, 0, 0, 0,
	276, 0, 0, 0, 0, 0, 0, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 308, 302, 303, 355, 356,
	403, 404, 405, 379, 299, 0, 306, 307, 0, 387,
	0, 0, 0, 358, 0, 0, 0, 410, 0, 0,
	0, 0, 0, 0, 0, 334, 283, 338, 0, 0,
	0, 0, 0, 0, 0, 295, 296, 0, 0, 342,
	337, 363, 365, 374, 383, 393, 400, 376, 36, 37,
	397, 386, 0, 345, 399, 313, 333, 408, 335, 336,
	371, 292, 354, 0, 330, 311, 0, 0, 0, 316,
	285, 325, 286, 314, 347, 0, 312, 0, 388, 357,
	0, 0, 0, 406, 0, 362, 0, 1157, 0, 0,
	0, 349, 390, 352, 381, 344, 372, 301, 361, 401,
	331, 367, 402, 0, 0, 0, 52, 0, 55, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 366, 396,
	327, 298, 411, 0, 370, 284, 364, 0, 0, 290,
	293, 407, 394, 321, 320, 703, 0, 1156, 1145, 1144,
	0, 0, 348, 353, 377, 341, 0, 0, 0, 1146,
	0, 0, 0, 0, 0, 0, 0, 0, 317, 0,
	360, 0, 1147, 0, 297, 291, 0, 346, 0, 0,
	0, 300, 0, 318, 378, 0, 281, 384, 391, 343,
	0, 0, 395, 340, 339, 0, 0, 0, 0, 0,
	0, 332, 277, 38, 409, 398, 350, 389, 315, 326,
	0, 322, 0, 0, 0, 323, 324, 359, 373, 0,
	0, 0, 0, 0, 39, 380, 40, 2035, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 282,
	319, 382, 385, 305, 369, 294, 328, 375, 329, 351,
	310, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1158,
	1159, 0, 0, 0, 0, 0, 0, 0, 0, 1154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1148, 1149,
	1151, 0, 0, 0, 1150, 0, 0, 0, 287, 0,
	0, 0, 0, 41, 288, 309, 392, 0, 0, 0,
	0, 0, 276, 0, 0, 0, 0, 0, 0, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 308, 302, 303,
	355, 356, 403, 404, 405, 379, 299, 0, 306, 307,
	0, 387, 0, 0, 0, 358, 0, 0, 0, 410,
	0, 0, 0, 0, 0, 0, 0, 334, 283, 338,
	0, 0, 0, 0, 0, 0, 0, 295, 296, 0,
	0, 342, 337, 363, 365, 374, 383, 393, 400, 376,
	36, 37, 397, 386, 0, 345, 399, 313, 333, 408,
	335, 336, 371, 292, 354, 0, 330, 311, 0, 0,
	0, 316, 285, 325, 286, 314, 347, 0, 312, 0,
	388, 357, 0, 0, 0, 406, 0, 362, 0, 1157,
	0, 0, 0, 349, 390, 352, 381, 344, 372, 301,
	361, 401, 331, 367, 402, 0, 0, 0, 35, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	366, 396, 327, 298, 411, 0, 370, 284, 364, 0,
	0, 290, 293, 407, 394, 321, 320, 543, 703, 0,
	1156, 1145, 1144, 0, 348, 353, 377, 341, 0, 0,
	0, 0, 1146, 0, 0, 0, 0, 0, 0, 0,
	317, 0, 360, 0, 0, 1147, 297, 291, 0, 346,
	0, 0, 0, 300, 0, 318, 378, 0, 281, 384,
	391, 343, 0, 0, 395, 340, 339, 0, 0, 0,
	0, 0, 0, 332, 277, 38, 409, 398, 350, 389,
	315, 326, 0, 322, 0, 0, 0, 323, 324, 359,
	373, 0, 0, 0, 0, 0, 39, 380, 40, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 282, 319, 382, 385, 305, 369, 294, 328, 375,
	329, 351, 310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1158, 1159, 0, 0, 0, 0, 0, 0,
	0, 0, 1154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1148, 1149, 1151, 0, 0, 0, 1150, 0, 0,
	287, 0, 0, 0, 0, 41, 288, 309, 392, 0,
	0, 0, 0, 0, 276, 0, 1126, 0, 0, 0,
	0, 368, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 308,
	302, 303, 355, 356, 403, 404, 405, 379, 299, 0,
	306, 307, 0, 387, 0, 0, 0, 358, 0, 0,
	0, 410, 0, 0, 0, 0, 0, 0, 0, 334,
	283, 338, 0, 0, 0, 0, 0, 0, 0, 295,
	296, 0, 0, 342, 337, 363, 365, 374, 383, 393,
	400, 376, 36, 37, 397, 386, 0, 345, 399, 313,
	333, 408, 335, 336, 371, 292, 354, 0, 330, 311,
	0, 0, 0, 316, 285, 325, 286, 314, 347, 0,
	312, 0, 388, 357, 0, 0, 0, 406, 0, 362,
	0, 0, 1157, 0, 0, 349, 390, 352, 381, 344,
	372, 301, 361, 401, 331, 367, 402, 0, 0, 0,
	35, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 366, 396, 327, 298, 411, 0, 370, 284,
	364, 0, 0, 290, 293, 407, 394, 321, 320, 703,
	0, 1156, 1145, 1144, 0, 0, 348, 353, 377, 341,
	0, 0, 0, 1146, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 360, 0, 1147, 0, 297, 291,
	0, 346, 0, 0, 0, 300, 0, 318, 378, 0,
	281, 384, 391, 343, 0, 0, 395, 340, 339, 0,
	0, 0, 0, 0, 0, 332, 277, 38, 409, 398,
	350, 389, 315, 326, 0, 322, 0, 0, 0, 323,
	324, 359, 373, 0, 0, 0, 0, 0, 39, 380,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 282, 319, 382, 385, 305, 369, 294,
	328, 375, 329, 351, 310, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1805, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1158, 1159, 0, 0, 0, 0, 0,
	0, 0, 0, 1154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1148, 1149, 1151, 0, 0, 0, 1150, 0,
	0, 0, 287, 0, 0, 0, 0, 41, 288, 309,
	392, 0, 0, 0, 0, 0, 276, 1586, 0, 0,
	0, 0, 0, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 308, 302, 303, 355, 356, 403, 404, 405, 379,
	299, 0, 306, 307, 0, 387, 0, 0, 0, 358,
	0, 0, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 334, 283, 338, 0, 0, 0, 0, 0, 0,
	0, 295, 296, 0, 0, 342, 337, 363, 365, 374,
	383, 393, 400, 376, 36, 37, 397, 1968, 0, 345,
	399, 313, 333, 408, 335, 336, 371, 292, 354, 0,
	330, 311, 0, 0, 0, 316, 285, 325, 286, 314,
	347, 0, 312, 0, 388, 357, 0, 0, 0, 406,
	0, 362, 0, 1157, 0, 0, 0, 349, 390, 352,
	381, 344, 372, 301, 361, 401, 331, 367, 402, 440,
	0, 0, 35, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 366, 396, 327, 298, 411, 0,
	370, 284, 364, 0, 0, 290, 293, 407, 394, 321,
	320, 703, 0, 1156, 1145, 1144, 0, 0, 348, 353,
	377, 341, 0, 0, 0, 1146, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 360, 0, 1147, 0,
	297, 291, 0, 346, 0, 0, 0, 300, 0, 318,
	378, 0, 281, 384, 391, 343, 0, 0, 395, 340,
	339, 0, 0, 0, 0, 0, 0, 332, 0, 38,
	409, 398, 350, 389, 315, 326, 0, 322, 0, 0,
	0, 323, 324, 359, 373, 703, 0, 1156, 1145, 1144,
	39, 380, 40, 1800, 0, 0, 0, 0, 0, 1146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1147, 0, 289, 282, 319, 382, 385, 305,
	369, 294, 328, 375, 329, 351, 310, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1152, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1158, 1159, 1704, 0, 0,
	0, 0, 0, 0, 0, 1154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1148, 1149, 1151, 0, 0, 0,
	1150, 0, 0, 0, 287, 0, 0, 0, 1140, 41,
	288, 309, 392, 0, 0, 0, 0, 0, 1152, 0,
	0, 0, 0, 0, 0, 368, 0, 0, 0, 1158,
	1159, 0, 0, 0, 0, 0, 0, 0, 0, 1154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 308, 302, 303, 355, 356, 403, 404,
	405, 379, 299, 0, 306, 307, 0, 387, 1148, 1149,
	1151, 358, 0, 0, 1150, 410, 0, 0, 0, 0,
	0, 0, 0, 334, 283, 338, 0, 0, 0, 0,
	0, 0, 0, 295, 296, 0, 0, 342, 337, 363,
	365, 374, 383, 393, 400, 376, 36, 37, 397, 386,
	0, 345, 399, 313, 333, 408, 335, 336, 371, 292,
	354, 0, 330, 311, 0, 0, 0, 316, 285, 325,
	286, 314, 347, 0, 312, 0, 388, 357, 0, 0,
	0, 406, 0, 362, 0, 1157, 0, 0, 0, 349,
	390, 352, 381, 344, 372, 301, 361, 401, 331, 367,
	402, 0, 0, 0, 58, 0, 55, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 366, 396, 327, 298,
	411, 0, 370, 284, 364, 0, 0, 290, 293, 407,
	394, 321, 320, 703, 0, 1156, 1145, 1144, 0, 0,
	348, 353, 377, 341, 0, 0, 0, 1146, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 0, 360, 1157,
	1147, 0, 297, 291, 0, 346, 0, 0, 0, 300,
	0, 318, 378, 0, 281, 384, 391, 343, 0, 0,
	395, 340, 339, 0, 0, 0, 0, 0, 0, 332,
	0, 38, 409, 398, 350, 389, 315, 326, 0, 322,
	0, 0, 0, 323, 324, 359, 373, 0, 0, 0,
	0, 0, 39, 380, 40, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 282, 319, 382,
	385, 305, 369, 294, 328, 375, 329, 351, 310, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1158, 1159, 0,
	0, 0, 0, 0, 0, 0, 0, 1154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1148, 1149, 1151, 0,
	0, 0, 1150, 0, 0, 0, 287, 0, 0, 0,
	0, 41, 288, 309, 392, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 308, 302, 303, 355, 356,
	403, 404, 405, 379, 299, 0, 306, 307, 0, 387,
	0, 0, 0, 358, 0, 0, 0, 410, 0, 0,
	0, 0, 0, 0, 0, 334, 283, 338, 0, 0,
	0, 0, 0, 0, 0, 295, 296, 0, 0, 342,
	337, 363, 365, 374, 383, 393, 400, 376, 36, 37,
	397, 386, 0, 345, 399, 313, 333, 408, 335, 336,
	371, 292, 354, 0, 330, 311, 0, 0, 0, 316,
	285, 325, 286, 314, 347, 0, 312, 0, 388, 357,
	0, 0, 0, 406, 0, 362, 0, 1157, 0, 0,
	0, 349, 390, 352, 381, 344, 372, 301, 361, 401,
	331, 367, 402, 0, 0, 0, 35, 0, 0, 0,
	0, 0, 0, 703, 0, 1156, 1145, 1144, 366, 396,
	327, 298, 411, 0, 370, 284, 364, 1146, 0, 290,
	293, 407, 394, 321, 320, 0, 0, 0, 0, 0,
	1147, 0, 348, 353, 377, 341, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 317, 0,
	360, 0, 0, 0, 297, 291, 0, 346, 0, 0,
	0, 300, 0, 318, 378, 0, 281, 384, 391, 343,
	0, 0, 395, 340, 339, 0, 752, 751, 0, 0,
	0, 332, 0, 38, 409, 398, 350, 389, 315, 326,
	0, 322, 0, 0, 753, 323, 324, 359, 373, 0,
	0, 0, 0, 0, 39, 380, 40, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 282,
	319, 382, 385, 305, 369, 294, 328, 375, 329, 351,
	310, 0, 0, 0, 0, 0, 1152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1158, 1159, 0,
	0, 0, 0, 0, 0, 0, 0, 1154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1148, 1149, 1151, 0,
	0, 0, 1150, 0, 0, 754, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1586, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 0, 41, 288, 309, 392, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 308, 302, 303,
	355, 356, 403, 404, 405, 379, 299, 0, 306, 307,
	0, 387, 0, 0, 0, 358, 0, 0, 0, 410,
	0, 0, 0, 0, 0, 0, 0, 334, 283, 338,
	0, 0, 0, 0, 0, 567, 0, 295, 296, 0,
	0, 342, 337, 363, 365, 374, 383, 393, 400, 376,
	36, 37, 566, 0, 0, 0, 0, 565, 0, 0,
	0, 0, 0, 0, 611, 0, 612, 1157, 0, 0,
	0, 0, 0, 0, 602, 603, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 52, 592, 589,
	590, 594, 595, 596, 597, 0, 0, 0, 593, 598,
	480, 481, 568, 0, 0, 0, 0, 563, 581, 0,
	0, 610, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 579, 0, 0, 0,
	0, 627, 0, 580, 0, 0, 1021, 577, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 39, 0, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 588, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 0, 139, 1028, 0, 140,
	141, 142, 144, 143, 1032, 0, 1024, 0, 1036, 1035,
	1037, 1022, 1039, 0, 0, 0, 1043, 1040, 1042, 1041,
	613, 1038, 0, 0, 0, 0, 0, 0, 0, 0,
	1029, 1030, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 614, 615, 0, 0, 0, 0,
	0, 1031, 1033, 0, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 616, 626, 622,
	623, 620, 621, 619, 618, 617, 628, 604, 605, 606,
	607, 609, 1214, 0, 484, 483, 608, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1177,
	1176, 0, 35, 0, 1175, 0, 1178, 1179, 1180, 1181,
	0, 36, 37, 624, 1197, 0, 0, 0, 0, 0,
	1200, 1199, 1198, 0, 0, 1204, 1205, 1206, 1207, 1209,
	1208, 1172, 1173, 1174, 0, 0, 0, 0, 1202, 1203,
	0, 1201, 0, 0, 0, 0, 1169, 1168, 0, 0,
	1163, 1164, 1165, 1166, 0, 1167, 0, 1170, 0, 0,
	0, 0, 0, 0, 1171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1216, 0, 1215, 1219, 0, 0, 0, 0, 38,
	0, 1217, 567, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 566,
	39, 0, 40, 0, 565, 0, 0, 0, 0, 0,
	0, 611, 0, 612, 0, 0, 0, 0, 0, 0,
	0, 602, 603, 0, 0, 0, 0, 0, 0, 1856,
	0, 440, 0, 0, 52, 592, 589, 590, 594, 595,
	596, 597, 0, 0, 0, 593, 598, 480, 481, 568,
	1857, 0, 0, 0, 563, 581, 0, 0, 610, 0,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	0, 139, 0, 0, 140, 141, 142, 144, 143, 0,
	0, 0, 578, 579, 0, 0, 1193, 1192, 627, 0,
	580, 0, 0, 576, 577, 582, 1187, 1194, 1195, 1196,
	0, 1188, 1189, 1190, 1191, 0, 0, 0, 0, 0,
	0, 0, 625, 0, 0, 0, 0, 0, 0, 0,
	0, 38, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 567,
	0, 0, 39, 0, 40, 0, 0, 0, 0, 0,
	0, 0, 0, 588, 874, 0, 566, 0, 0, 0,
	0, 565, 0, 0, 0, 0, 0, 0, 611, 0,
	612, 0, 0, 0, 0, 0, 0, 0, 602, 603,
	0, 0, 1211, 1210, 1212, 1213, 0, 0, 440, 0,
	0, 52, 592, 589, 590, 594, 595, 596, 597, 0,
	0, 0, 593, 598, 480, 481, 568, 0, 0, 0,
	0, 563, 581, 0, 0, 610, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 36, 37, 0, 1218,
	0, 1515, 0, 0, 0, 0, 0, 613, 0, 578,
	579, 877, 0, 0, 0, 627, 0, 580, 0, 0,
	576, 577, 582, 0, 0, 0, 0, 0, 0, 629,
	0, 614, 615, 0, 0, 0, 1023, 0, 0, 625,
	0, 41, 0, 0, 0, 0, 0, 0, 38, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 0, 0, 0, 0, 0, 0, 39,
	0, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	588, 0, 0, 0, 616, 626, 622, 623, 620, 621,
	619, 618, 617, 628, 604, 605, 606, 607, 609, 0,
	0, 484, 483, 608, 0, 0, 0, 0, 0, 0,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	0, 139, 1028, 0, 140, 141, 142, 144, 143, 1032,
	0, 1024, 0, 1036, 1035, 1037, 1022, 1039, 36, 37,
	624, 1043, 1040, 1042, 1041, 0, 1038, 0, 0, 0,
	0, 0, 0, 0, 0, 1029, 1030, 0, 0, 0,
	0, 0, 0, 0, 613, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1031, 1033, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 614, 615,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 616, 626, 622, 623, 620, 621, 619, 618, 617,
	628, 604, 605, 606, 607, 609, 0, 0, 484, 483,
	608, 567, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 566, 0,
	0, 0, 0, 565, 0, 0, 0, 0, 0, 0,
	611, 0, 612, 0, 0, 36, 37, 624, 0, 0,
	602, 603, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 0, 755, 52, 592, 589, 590, 594, 595, 596,
	597, 0, 0, 0, 593, 598, 480, 481, 568, 0,
	0, 0, 0, 563, 581, 0, 0, 610, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 567, 0, 0, 0, 0, 0, 0,
	0, 578, 579, 0, 0, 0, 0, 627, 0, 580,
	566, 0, 576, 577, 582, 565, 0, 0, 0, 0,
	0, 0, 611, 0, 612, 0, 0, 0, 0, 0,
	0, 625, 602, 603, 0, 0, 0, 0, 0, 0,
	38, 0, 440, 0, 0, 52, 592, 589, 590, 594,
	595, 596, 597, 0, 0, 0, 593, 598, 480, 481,
	568, 39, 0, 40, 0, 563, 581, 0, 0, 610,
	0, 0, 588, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 578, 579, 877, 0, 0, 0, 627,
	0, 580, 0, 0, 576, 577, 582, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 39, 0, 40, 613, 0, 0, 0,
	0, 0, 0, 0, 588, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	614, 615, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 616, 626, 622, 623, 620, 621, 619,
	618, 617, 628, 604, 605, 606, 607, 609, 613, 0,
	484, 483, 608, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 614, 615, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 36, 37, 624,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 616, 626, 622, 623, 620,
	621, 619, 618, 617, 628, 604, 605, 606, 607, 609,
	0, 0, 484, 483, 608, 0, 0, 0, 0, 0,
	703, 0, 0, 567, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	566, 0, 0, 0, 0, 565, 0, 0, 0, 36,
	37, 624, 611, 0, 612, 0, 0, 0, 0, 0,
	0, 0, 602, 603, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 52, 592, 589, 590, 594,
	595, 596, 597, 0, 0, 0, 593, 598, 480, 481,
	568, 0, 0, 0, 0, 563, 581, 0, 0, 610,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 567, 0, 0, 0, 0,
	0, 0, 0, 578, 579, 0, 0, 0, 0, 627,
	0, 580, 566, 0, 576, 577, 582, 565, 0, 0,
	0, 0, 0, 0, 611, 0, 612, 0, 0, 0,
	0, 0, 0, 625, 602, 603, 0, 0, 0, 0,
	0, 0, 38, 0, 440, 0, 0, 52, 592, 589,
	590, 594, 595, 596, 597, 0, 0, 0, 593, 598,
	480, 481, 568, 39, 0, 40, 0, 563, 581, 0,
	0, 610, 0, 0, 588, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 579, 0, 0, 0,
	0, 627, 0, 580, 0, 0, 576, 577, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 703, 625, 1156, 1145, 1144, 0,
	0, 0, 0, 0, 38, 0, 0, 0, 1146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1147, 0, 0, 0, 39, 0, 40, 613, 0,
	703, 0, 1156, 1145, 1144, 0, 588, 0, 0, 0,
	0, 0, 0, 0, 1146, 0, 0, 0, 0, 0,
	629, 0, 614, 615, 0, 0, 0, 1147, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 752, 751, 0,
	0, 0, 0, 0, 0, 1581, 0, 0, 0, 0,
	0, 0, 0, 600, 0, 753, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 752, 751, 616, 626, 622, 623, 620,
	621, 619, 618, 617, 628, 604, 605, 606, 607, 609,
	613, 753, 484, 483, 608, 0, 0, 1140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1152, 0, 0,
	0, 0, 629, 0, 614, 615, 0, 0, 1158, 1159,
	0, 0, 0, 0, 41, 0, 0, 0, 1154, 36,
	37, 624, 0, 1140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1152, 0, 600, 0, 0, 0, 0,
	0, 0, 0, 0, 1158, 1159, 0, 1148, 1149, 1151,
	0, 0, 0, 1150, 1154, 0, 754, 616, 626, 622,
	623, 620, 621, 619, 618, 617, 628, 604, 605, 606,
	607, 609, 1586, 0, 484, 483, 608, 969, 970, 971,
	0, 0, 0, 1148, 1149, 1151, 0, 0, 0, 1150,
	0, 0, 754, 0, 611, 0, 612, 0, 0, 0,
	0, 0, 0, 0, 602, 603, 0, 0, 1586, 0,
	0, 36, 37, 624, 440, 0, 0, 52, 592, 589,
	590, 594, 595, 596, 597, 0, 0, 0, 593, 598,
	480, 481, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 610, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 579, 0, 0, 0,
	0, 627, 0, 580, 0, 0, 576, 577, 582, 0,
	0, 0, 0, 0, 0, 0, 611, 0, 612, 0,
	0, 0, 0, 0, 0, 625, 602, 603, 1157, 0,
	0, 0, 0, 0, 38, 0, 895, 0, 0, 52,
	592, 589, 590, 594, 595, 596, 597, 0, 0, 0,
	593, 598, 480, 481, 0, 39, 0, 40, 0, 0,
	581, 0, 0, 610, 1157, 0, 588, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 578, 579, 0,
	0, 0, 0, 627, 0, 580, 0, 0, 576, 577,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 0, 40,
	613, 0, 703, 0, 1156, 1145, 1144, 0, 588, 0,
	0, 0, 0, 0, 0, 0, 1146, 0, 0, 0,
	0, 0, 629, 0, 614, 615, 0, 0, 0, 1147,
	0, 106, 0, 0, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 0, 0, 0, 35,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 752, 751, 616, 626, 622,
	623, 620, 621, 619, 618, 617, 628, 604, 605, 606,
	607, 609, 613, 753, 484, 483, 608, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 614, 615, 91, 0,
	867, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 36, 37, 624, 0, 1140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1152, 0, 600, 0, 0,
	0, 0, 0, 107, 0, 0, 1158, 1159, 0, 0,
	0, 0, 0, 0, 0, 0, 1154, 0, 0, 616,
	626, 622, 623, 620, 621, 619, 618, 617, 628, 604,
	605, 606, 607, 609, 0, 0, 484, 483, 608, 0,
	0, 0, 0, 0, 0, 1148, 1149, 1151, 0, 0,
	0, 1150, 0, 0, 754, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1625, 0, 0, 36, 37, 624, 0, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 0, 139, 126,
	0, 140, 141, 142, 144, 143, 108, 109, 110, 114,
	112, 111, 113, 85, 87, 0, 83, 86, 92, 88,
	89, 90, 104, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 105, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 0, 0, 0, 0, 866, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84,
}

var yyPact = [...]int16{
	507, -1000, -260, -1000, -1000, 1492, 874, 374, -1000, -1000,
	-1000, 2945, 464, 456, 437, 185, 391, 958, 2337, 2448,
	462, 372, -1000, -222, -198, -1000, -95, 453, -1000, 1225,
	-1000, 5180, 5180, 5180, 5180, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 297, 958, 958, 372, 95, 372, 1534, 337,
	1533, 786, -1000, -1000, 600, -1000, 1649, 585, -1000, -1000,
	372, 2448, 782, -1000, -1000, -1000, -1000, 2198, 207, 307,
	3365, -159, -16, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1413, 43, 1488, 1413, 1488,
	-1000, 1413, 1488, 31, 31, 31, 31, 31, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1477, 1474, -1000, 1413, 1413,
	1413, 1413, 1413, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1469, 1413, 1419, 63, 1427, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3365, 3365, 3365, 1473, 2448,
	958, 964, 1532, 1531, 2448, -215, 2448, 2448, 1706, -1000,
	-1000, -1000, 127, 2448, 1630, 6745, 5180, 8313, 2448, -1000,
	1628, 479, 2448, 5961, -1000, 1600, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1468, 825, 958, 266, 126, 1255, 527,
	563, 477, 1221, 263, -1000, -1000, -1000, 859, -1000, 958,
	-1000, 1746, -1000, -1000, 262, -1000, 236, 768, 953, 2448,
	1464, 173, 1463, 1979, 924, -1000, -271, -1000, -18, -1000,
	31, 872, 1413, -1000, 31, 921, 31, 31, -1000, -1000,
	615, 1612, 615, 615, 615, 615, 950, 950, -130, -130,
	-1000, -1000, -1000, 923, -1000, -1000, 919, 1419, -1000, -1000,
	910, 2448, 958, 1462, 1530, 1528, 2448, 2448, 2448, 1647,
	387, -1000, -1000, 1646, 1645, 1337, -1000, -1000, 124, -1000,
	-1000, 337, 958, -1000, 578, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1500, -1000, 500, 473, 7137,
	207, -1000, -1000, -1000, -1000, -1000, 471, -1000, 1740, 1677,
	280, 14, -200, 1220, -1000, -1000, 1459, -1000, -1000, 10596,
	-1000, 1218, 1210, -1000, 1067, 1052, 28, 958, -1000, -211,
	116, -33, -1000, -1000, 1255, -1000, 1458, 10596, 1642, -1000,
	1616, 681, -1000, 619, -1000, -247, -1000, -1000, 884, -1000,
	-247, -1000, -1000, -1000, 1255, -1000, 1457, 1456, -1000, 1455,
	-1000, -1000, 1255, 1255, 1255, 572, -1000, -1000, -1000, -1000,
	-1000, 615, 1331, 31, 615, 1330, 1308, 615, 615, -1000,
	-1000, 1050, 675, -1000, -1000, -1000, -1000, 1217, -1000, 1214,
	-1000, 54, 53, -1000, 1299, 1389, -1000, 1203, 1387, 1527,
	452, 2448, 2448, 1454, 1453, 1451, 1388, 372, 1388, 1673,
	187, 2448, 1706, 354, 1706, 337, 7529, 958, 289, 958,
	-1000, -1000, 341, 5569, -1000, -1000, 1201, -1000, 229, 1413,
	10596, 537, 537, -213, 227, 225, -200, 1255, 1449, -1000,
	471, 636, -1000, 10596, 290, 1255, 1255, 1255, 1255, 10504,
	-1000, -1000, 542, -1000, -1000, -1000, 3191, 3191, 3191, 3191,
	3191, 3191, 3191, -1000, -1000, -1000, -1000, 1, -1000, -247,
	-1000, 945, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 565,
	553, -1000, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
	10596, 1255, 1593, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
	1255, 1255, 1255, 1255, 4053, 1255, 1255, 1255, 1255, -1000,
	-1000, -1000, -1000, -1000, -1000, -200, 1448, -1000, -1000, -1000,
	768, -1000, 10596, 354, 879, 117, -1000, 1384, -1000, 887,
	1298, 1005, 1296, -1000, 11198, -1000, -1000, -1000, 987, -1000,
	901, -1000, 880, 1291, 9700, 10144, 10144, 7529, -1000, -1000,
	615, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31,
	948, 31, -20, -22, -1000, 886, -1000, 878, 452, 958,
	2448, 1290, 1380, -1000, 228, 1447, 1446, 452, 354, 471,
	-1000, 1696, 1751, -1000, 1388, 2448, -1000, 379, 1689, -1000,
	-1000, 1672, -1000, 1379, -1000, -1000, 1316, 1706, -1000, 1444,
	958, -1000, -1000, 268, 958, -1000, -1000, -1000, -1000, -1000,
	3376, 471, 1625, -1000, -1000, -1000, 779, 819, -1000, -1000,
	798, 178, 806, -1000, 958, -200, 1443, 10596, 471, 1192,
	184, 10596, 10596, 799, -1000, -1000, 252, 10936, 873, 670,
	3191, 3191, 3191, 3191, 3191, 3191, 3191, 3191, 3191, 3191,
	3191, 3191, 3191, 3191, 3191, 934, 4004, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1025,
	-1000, 1388, 1583, 987, 987, 987, 1188, 10504, 260, 1810,
	1810, 49, 10504, 49, 49, 49, 49, 49, 109, -1000,
	-264, -1000, -1000, 6745, 7529, 10144, 10144, 9076, 10596, 10144,
	10144, 10144, 1651, 759, 260, 1583, 1671, 987, 987, 987,
	987, -1000, 987, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 41, -1000, -1000, -1000, -1000, -1000, -1000, 10144, 10144,
	10144, 10144, -1000, 958, 1255, 636, 1186, -144, 10596, 1441,
	681, -1000, -1000, 1275, -247, -1000, -1000, -1000, -159, -1000,
	-1000, -1000, -1000, 987, 10144, 1080, -1000, -1000, 568, 548,
	1080, 1080, 1255, -1000, 615, -1000, 615, -1000, -1000, 1274,
	1273, 1271, 1438, 1436, -228, 872, 452, 452, 1254, 1183,
	1101, 1683, 1692, 1388, 1644, 1582, -1000, 987, 1639, 958,
	-1000, -1000, -1000, -1000, -1000, 153, 756, 958, 7222, 1263,
	-1000, 9401, 1435, 102, 310, 1475, 3697, 175, -1000, 995,
	738, 947, 722, 708, 699, 697, 696, 690, 689, 688,
	674, 673, -1000, -1000, -1000, -1000, 1625, -1000, 1734, -1000,
	-1000, -1000, 1719, 1433, 1430, 471, 636, 1098, 3376, -1000,
	-105, 252, 264, -1000, -1000, 810, -1000, -1000, 1344, 3191,
	3191, 3191, -1000, -1000, -1000, -1000, 873, 3191, 3191, 3191,
	323, 1344, 3686, 11, 469, 49, 83, 83, 46, 46,
	46, 46, 46, 1429, 1429, -1000, -1000, -1000, -123, -1000,
	987, 987, -1000, -1000, -1000, -1000, 10596, -1000, 987, -1000,
	-247, 942, -1000, -1000, 939, 1255, -1000, 1080, 1080, 647,
	1378, 11028, 1413, -1000, 1413, 1427, 1419, -1000, 63, -1000,
	-1000, 77, 1413, 74, 1413, 1413, 1413, -1000, -1000, 1413,
	1413, -1000, 1413, 1413, 771, 1307, 1295, 1080, 10144, -1000,
	685, -1000, 10596, 987, 2448, -1000, -1000, -1000, -1000, -1000,
	-1000, 1080, 987, 1355, 1080, 1080, 1084, -1000, 10596, 184,
	1507, -1000, -1000, 773, -1000, 1243, 1193, -1000, -1000, 1080,
	10144, -258, -1000, -1000, 937, -1000, -1000, 5177, -258, -258,
	10144, -1000, -1000, -1000, -1000, -228, 452, 471, 1701, 1425,
	1102, 1085, -228, 1701, 3376, 1629, 10596, 10596, 1696, -1000,
	1388, -1000, -1000, 1651, -1000, -1000, 816, -1000, 1388, 1269,
	146, 90, 10596, -1000, 2947, -1000, 7222, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1696,
	10596, -1000, -1000, -1000, -1000, -1000, 271, 3621, 958, 958,
	958, 433, 10596, 960, 10596, -1000, -1000, -1000, -1000, -1000,
	2448, 1081, 9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401,
	9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401,
	9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401,
	9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401,
	9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401,
	9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401,
	471, 471, 1424, 1421, 222, -1000, 958, -1000, -138, 3697,
	958, -1000, 870, -1000, -1000, 839, 844, 839, 839, 839,
	839, 839, 171, 836, 468, -1000, 537, 537, 958, 471,
	1077, 184, 3376, 1475, -1000, -1000, -1000, -1000, 1344, 1344,
	1344, -1000, 323, 1344, 3571, -1000, 3191, 3191, 51, -1000,
	-1000, 260, -1000, 57, -1000, -247, -1000, -1000, 9681, 934,
	10596, -1000, 230, -1000, -1000, -1000, 1419, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 9681, 3191, 3191,
	3191, 3191, -114, 1281, 750, -1000, 10596, 533, -1000, -1000,
	-1000, -1000, -1000, -1000, 318, 958, 636, -1000, 1738, -153,
	591, -1000, -1000, -1000, -1000, -1000, 1255, -1000, -1000, 540,
	-1000, -1000, 987, 1701, 1036, 1072, 3376, 10596, 354, -228,
	-228, 1701, 3376, -1000, -1000, 1730, 502, 573, 1343, -1000,
	875, 1683, 987, 1549, -1000, -1000, -128, 10596, 7222, 8397,
	260, 8397, -1000, 7222, 2148, 1683, 10728, 374, 2136, 2017,
	1342, 342, 121, -1000, -1000, -1000, 4001, 871, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 958, 1715, 1712, 1708, 1707, 11196, 10596,
	10596, -1000, 1668, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 993,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1065, 1048, 471, 471, 1416, 1255, 1042, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 768, 768,
	1035, 1033, 3376, -1000, 1475, -1000, -1000, 3191, 1344, 1344,
	-26, -1000, 939, -1000, 987, 1413, 987, 365, -1000, -1000,
	-1000, 987, 3359, 3085, 2573, 2515, 1255, -102, -1000, 260,
	10596, 2448, -1000, 184, 537, 537, -1000, -1000, -1000, 164,
	727, 681, 681, 828, 42, -1000, 1690, 362, 6353, -1000,
	3376, 1701, 3376, 1475, 260, 1031, 1701, 1701, 3376, 1475,
	-1000, 1591, 10596, 10596, 10596, -1000, 1629, -1000, 10144, -1000,
	-1000, -249, 260, 2947, 3156, -1000, -1000, 905, 8079, -1000,
	1629, 7222, 719, -1000, 728, -1000, 8397, 1556, 2448, 1017,
	-1000, 1258, 1506, -1000, -1000, -1000, 1636, 1434, 757, 958,
	135, 5180, -1000, -1000, 1665, 1341, 4393, -47, -1000, -1000,
	-1000, 657, 522, 933, -1000, 1607, -1000, -1000, 3621, 1622,
	-1000, -1000, -1000, -1000, -1000, 8397, -1000, 1278, 987, 756,
	151, 9401, -1000, 238, 1022, 1013, 471, 958, -1000, 3697,
	-1000, -1000, 313, 3376, 1475, -1000, 1344, -1000, -1000, -1000,
	-1000, -1000, 3191, -1000, -1000, 3191, -1000, 3191, -1000, 3191,
	-1000, 3191, 3191, 987, 938, 260, 1410, -1000, -1000, -1000,
	681, -1000, 681, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	538, -1000, 1687, 987, -1000, 1475, 3376, -1000, -1000, -1000,
	3376, 3376, 1475, -1000, 1588, 260, 260, -1000, -1000, 1279,
	10596, 8005, -1000, -1000, -1000, -1000, 2294, 7613, 353, 2633,
	203, 2448, -1000, 203, 1238, 2017, 2448, -1000, -1000, 1583,
	2017, 2017, 2017, 2017, 2017, -1000, 1566, 1565, -1000, 1569,
	1567, 1575, 2448, 999, 1434, 718, 1255, -1000, 2448, -1000,
	1636, 1664, -1000, 461, 4785, 1341, -47, 1340, -1000, -40,
	-44, 9543, 7529, 615, -1000, -1000, -1000, -1000, -1000, 958,
	2398, -1000, 89, 142, -1000, 110, -1000, 112, 3376, 3376,
	992, 987, -1000, 2448, 1475, -1000, 3669, 3669, 3669, 3669,
	3669, 388, -1000, -1000, 958, -1000, -1000, -1000, 496, 10596,
	-1000, -1000, -1000, 1475, 1475, -1000, -1000, 1701, 2017, 260,
	-1000, -1000, 5653, -1000, -1000, 10596, -1000, 10596, 8397, -1000,
	1051, 1255, -1000, 1701, 2017, 1277, -1000, 1253, -1000, 650,
	1506, 1409, 1504, 1070, -1000, -1000, -1000, -1000, 1558, -1000,
	1552, -1000, -1000, -1000, -1000, -134, 431, 425, 422, 958,
	-1000, 1388, 4869, -1000, -1000, 949, -1000, 114, -1000, -1000,
	-1000, 1340, -47, -54, -1000, -1000, -1000, -1000, 260, 641,
	-1000, 1339, -1000, 8397, -1000, -1000, 107, -1000, 1475, 1475,
	-1000, -1000, 1406, -1000, -1000, -1000, -1000, -1000, -1000, 987,
	193, -148, 990, 7529, 1002, -1000, 260, -1000, -1000, 1699,
	1338, 335, 7222, 8767, 10764, 1431, 1583, 1255, -1000, 7921,
	958, 1696, 1277, -1000, 1701, 1583, 10596, -1000, -1000, 10596,
	1403, -1000, 10596, -1000, -1000, -1000, -1000, 1309, 1255, 1255,
	1255, 979, -1000, -1000, -1000, 461, -1000, 4477, -1000, 928,
	-1000, -1000, -1000, -53, -49, -1000, 10596, 2983, -1000, -1000,
	-1000, -1000, 958, -1000, 1586, -118, -165, -1000, -1000, -1000,
	987, 10596, 1691, 1686, -1000, 136, 719, -1000, -1000, 1620,
	1004, 1270, -1000, -1000, 10052, 987, 986, -1000, -1000, 485,
	-1000, -1000, 979, 1683, -1000, 1696, -1000, 260, 260, 354,
	260, -181, 354, 354, 354, 2001, 958, -1000, -1000, 457,
	-1000, -1000, -1000, -1000, 260, 6829, 977, -1000, 1579, -1000,
	-1000, -1000, -1000, 10596, 10596, 6437, 218, -1000, 1255, -1000,
	-1000, 1286, 8705, 958, -1000, -1000, 1683, 975, 973, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 967, 967,
	967, 718, -1000, -1000, 6045, -1000, -1000, -132, 260, 1278,
	330, 1727, -1000, 1255, -1000, 1388, -1000, -1000, -1000, -1000,
	-1000, -181, -1000, -1000, -1000, -134, -1000, -152, -1000, 1583,
	1270, 987, -1000, -1000, -167, 1264, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 2073, 23, 37, 2072, 2068, 2067, 2066, 2063, 2059,
	2057, 2056, 2047, 2046, 2041, 36, 38, 56, 22, 30,
	2038, 2033, 2032, 2031, 2030, 91, 2028, 2027, 2021, 2020,
	109, 2018, 2016, 2012, 2011, 79, 72, 135, 153, 1965,
	31, 46, 77, 41, 2007, 40, 2002, 2000, 60, 1998,
	39, 1991, 1981, 93, 1977, 1976, 7, 176, 94, 103,
	51, 1975, 1973, 90, 2159, 1972, 1970, 133, 1968, 1966,
	87, 24, 67, 4, 6, 14, 1964, 71, 1, 1963,
	84, 83, 1961, 1960, 1959, 132, 1958, 65, 82, 8,
	61, 1955, 25, 9, 129, 47, 17, 10, 5, 55,
	42, 1945, 21, 52, 27, 1944, 74, 1940, 111, 49,
	68, 11, 1689, 0, 50, 148, 1939, 1938, 1936, 2125,
	136, 13, 62, 75, 1935, 78, 100, 58, 92, 1932,
	1930, 1920, 1919, 188, 249, 205, 64, 1915, 1913, 1912,
	1910, 1908, 85, 1905, 2006, 806, 117, 95, 59, 1896,
	1895, 88, 307, 76, 86, 315, 929, 1643, 1894, 1892,
	1891, 1890, 106, 1889, 73, 101, 26, 614, 1887, 1885,
	1869, 1868, 1866, 1860, 1859, 102, 1856, 143, 48, 134,
	783, 53, 1852, 1850, 1843, 1842, 89, 1841, 1838, 1837,
	63, 1836, 1835, 115, 81, 112, 104, 110, 1833, 1832,
	69, 80, 1831, 107, 108, 1828, 105, 28, 29, 375,
	57, 1823, 1822, 1821, 16, 1818, 1817, 1816, 2, 3,
	1815, 1814, 1812, 1809, 1808, 1802, 66, 1800, 139, 1799,
	15, 1791, 1778, 54, 1777, 1776, 1770, 1769, 1768, 803,
	471, 1767, 2428, 114, 1717, 138,
}

var yyR1 = [...]uint8{
	0, 235, 236, 236, 1, 1, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 21, 21, 21, 21,
	21, 21, 21, 238, 238, 2, 2, 3, 4, 4,
	5, 5, 6, 6, 28, 28, 7, 8, 8, 8,
	241, 241, 48, 48, 95, 95, 9, 9, 9, 9,
	10, 10, 10, 211, 211, 210, 212, 212, 213, 213,
	215, 215, 214, 214, 214, 214, 214, 214, 214, 216,
	216, 216, 216, 11, 11, 11, 11, 11, 205, 205,
	205, 205, 205, 12, 12, 208, 208, 208, 15, 15,
	15, 15, 16, 16, 17, 17, 17, 19, 19, 100,
	100, 104, 104, 104, 105, 105, 105, 105, 227, 227,
	124, 124, 237, 237, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 203, 203, 203, 203, 204, 204, 204,
	204, 206, 206, 207, 207, 207, 207, 207, 207, 209,
	209, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 13, 13, 29, 29, 72, 72, 14, 110,
	110, 184, 184, 184, 185, 185, 185, 185, 185, 185,
	187, 187, 188, 188, 117, 117, 189, 189, 24, 169,
	170, 170, 170, 170, 170, 170, 170, 170, 156, 156,
	156, 156, 127, 127, 127, 127, 127, 127, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 195, 195, 195,
	195, 195, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 197, 198, 199, 191, 191, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 146, 146, 146, 146, 146, 146, 190, 190,
	186, 186, 186, 186, 129, 129, 129, 129, 129, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 137,
	134, 134, 138, 135, 135, 139, 141, 142, 142, 153,
	153, 154, 154, 154, 136, 136, 140, 130, 130, 130,
	130, 130, 130, 130, 130, 128, 128, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 143,
	143, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	155, 155, 144, 144, 145, 145, 145, 152, 152, 152,
	149, 149, 150, 150, 151, 151, 151, 147, 147, 147,
	148, 148, 148, 158, 180, 180, 180, 182, 182, 183,
	183, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 168, 168, 200, 200, 201,
	201, 202, 202, 179, 179, 179, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 167, 167, 177,
	177, 178, 178, 175, 175, 175, 175, 176, 162, 162,
	162, 162, 162, 163, 163, 164, 164, 164, 164, 159,
	159, 160, 160, 161, 161, 193, 193, 193, 231, 231,
	231, 231, 231, 231, 232, 232, 194, 194, 165, 165,
	166, 166, 173, 173, 173, 173, 243, 243, 171, 171,
	171, 172, 172, 172, 244, 25, 26, 26, 27, 27,
	27, 32, 32, 32, 30, 30, 31, 31, 37, 37,
	36, 36, 38, 38, 38, 38, 116, 116, 116, 115,
	115, 228, 228, 228, 228, 228, 40, 40, 41, 41,
	42, 42, 43, 43, 43, 218, 218, 217, 217, 219,
	219, 219, 219, 219, 219, 219, 219, 55, 55, 92,
	92, 92, 96, 96, 44, 44, 44, 44, 45, 45,
	46, 46, 47, 47, 122, 122, 121, 121, 121, 49,
	49, 49, 51, 50, 50, 50, 50, 52, 52, 54,
	54, 53, 53, 56, 56, 56, 56, 57, 57, 94,
	94, 39, 39, 39, 39, 39, 39, 39, 39, 107,
	107, 59, 59, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 69,
	69, 69, 69, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 35, 35, 70, 70,
	70, 77, 71, 71, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 67, 67, 67, 67, 67, 67, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	245, 245, 68, 68, 68, 68, 33, 33, 33, 33,
	33, 123, 123, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 126,
	126, 126, 126, 126, 126, 126, 126, 81, 81, 34,
	34, 79, 79, 80, 109, 109, 82, 82, 78, 78,
	78, 78, 220, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 60, 60, 83, 83, 84, 84, 229,
	229, 230, 85, 85, 86, 86, 87, 88, 88, 88,
	89, 89, 89, 89, 90, 90, 90, 62, 62, 62,
	62, 62, 62, 91, 91, 93, 93, 93, 93, 97,
	97, 73, 73, 75, 75, 74, 76, 98, 98, 102,
	99, 99, 103, 103, 103, 103, 103, 22, 23, 101,
	101, 101, 118, 118, 118, 108, 108, 106, 106, 113,
	114, 114, 114, 114, 114, 119, 119, 119, 120, 120,
	221, 221, 221, 222, 222, 222, 223, 223, 224, 225,
	225, 226, 234, 234, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 112, 112, 112, 112,
	112, 112, 239, 240,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	14, 13, 12, 13, 12, 10, 7, 10, 7, 11,
	11, 9, 13, 16, 5, 8, 11, 13, 13, 14,
	14, 6, 7, 1, 1, 4, 6, 10, 1, 3,
	1, 3, 7, 8, 1, 1, 9, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	2, 6, 6, 1, 3, 3, 0, 1, 1, 1,
	1, 3, 1, 2, 3, 1, 2, 1, 1, 1,
	2, 3, 4, 2, 2, 2, 3, 5, 0, 2,
	2, 2, 2, 3, 5, 1, 2, 3, 7, 10,
	1, 1, 5, 5, 3, 5, 3, 1, 3, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 0, 3, 0, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 4, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 4, 1, 1, 0, 1, 2, 0,
	3, 0, 2, 2, 0, 2, 2, 2, 2, 2,
	0, 2, 0, 3, 0, 1, 0, 2, 4, 4,
	0, 1, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 1, 2, 2,
	3, 2, 4, 2, 4, 2, 2, 3, 2, 3,
	2, 7, 9, 3, 3, 6, 9, 9, 6, 6,
	8, 8, 5, 8, 7, 4, 0, 2, 4, 6,
	2, 4, 2, 1, 1, 2, 1, 2, 2, 1,
	1, 1, 3, 1, 2, 1, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 2, 3, 1, 3, 0, 2,
	0, 2, 2, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 3, 0, 1, 0,
	5, 0, 3, 5, 1, 1, 1, 1, 3, 3,
	2, 2, 2, 1, 1, 1, 1, 4, 5, 4,
	4, 4, 1, 2, 2, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 3, 0, 3, 0, 3, 3, 0, 3, 3,
	0, 1, 0, 1, 0, 2, 1, 0, 3, 3,
	0, 1, 2, 6, 0, 1, 4, 1, 2, 1,
	3, 2, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 5, 3, 3, 2, 3,
	2, 3, 3, 2, 2, 3, 4, 1, 1, 1,
	1, 1, 3, 3, 2, 2, 4, 1, 2, 5,
	5, 8, 8, 13, 11, 1, 1, 2, 2, 10,
	8, 9, 7, 7, 5, 0, 1, 1, 0, 1,
	1, 1, 2, 2, 1, 2, 0, 3, 0, 1,
	1, 3, 0, 4, 1, 3, 2, 1, 1, 2,
	1, 1, 1, 1, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 3, 6, 4, 7, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 0, 4, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 8, 1,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 0,
	4, 1, 3, 3, 2, 3, 2, 1, 2, 0,
	3, 1, 1, 3, 4, 4, 4, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 4, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 6, 2, 2, 2, 2,
	2, 2, 2, 3, 3, 1, 1, 1, 1, 2,
	1, 4, 5, 5, 5, 5, 6, 4, 4, 6,
	6, 8, 6, 6, 6, 8, 6, 8, 6, 8,
	6, 8, 9, 7, 5, 4, 4, 3, 3, 3,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 2,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 2,
	2, 2, 1, 1, 2, 2, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 0, 2, 1, 1,
	3, 5, 3, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 0, 3, 0, 2, 1,
	3, 1, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 1, 3, 1, 1, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 5, 3, 1, 3, 1,
	2, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 2, 0, 2, 2, 0, 1, 4, 1,
	3, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -235, -1, -20, -21, -24, 126, 127, -236, 400,
	-169, 58, -231, -232, 285, -189, 135, 148, 168, 169,
	370, 133, 382, 383, 150, 385, 79, -106, 138, -170,
	-156, -113, -112, 63, 36, 61, 395, 396, 148, 169,
	171, 298, 134, 134, 134, 136, 222, 136, -113, -113,
	-78, 139, 61, -112, -119, 63, -53, -119, 61, -112,
	133, -108, 139, 385, 382, 383, 350, 133, 60, 59,
	-157, -127, -129, -128, -131, -130, -132, -113, -137, -138,
	-141, -139, -140, 258, 362, 255, 259, 256, 261, 262,
	263, 120, 260, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 264, 276, 33, 155, 248, 249,
	250, 253, 252, 254, 251, 277, 278, 279, 280, 281,
	282, 283, 284, 285, -133, -134, 241, -135, -136, 229,
	230, 231, 232, 233, 234, 235, 236, 237, 238, 240,
	243, 244, 245, 247, 246, -157, -157, -157, -113, 56,
	220, 221, -113, -113, -108, 223, -108, 56, -203, 19,
	193, 194, 206, 56, 81, 123, 25, 123, -108, -53,
	81, -53, 314, -173, -243, 365, 37, -156, -158, -162,
	-159, -160, -161, -174, -163, 142, 140, 150, 398, 144,
	145, 285, -167, 146, 134, 151, 73, 81, -195, 142,
	-198, 56, 293, 299, 140, 151, 150, 398, 71, 143,
	25, 372, 374, 31, 32, -151, 401, 287, -149, 296,
	-144, 58, -143, 257, -145, 58, -144, -145, -144, -145,
	-147, 259, -147, -147, -147, -147, 58, 58, -144, -144,
	-144, -144, -144, 58, -144, -153, 58, -142, 242, -154,
	58, 56, 57, -53, -113, -113, 56, 56, 56, -53,
	-227, 395, 396, -53, -53, -206, -204, 8, 9, 10,
	207, -53, 26, -114, -120, -113, 307, 147, -111, -112,
	-119, 131, 194, 373, 80, 25, 27, 293, 299, 193,
	84, 120, 16, 85, 200, 382, 383, 119, 76, 351,
	126, 52, 343, 344, 341, 198, 353, 354, 342, 300,
	205, 20, 31, 10, 28, 153, 24, 113, 128, 195,
	89, 88, 156, 160, 161, 26, 154, 75, 201, 203,
	19, 55, 146, 11, 372, 13, 14, 387, 374, 139,
	138, 100, 386, 134, 50, 8, 122, 29, 97, 46,
	151, 204, 48, 98, 17, 345, 346, 34, 360, 162,
	115, 53, 40, 388, 81, 389, 73, 56, 314, 199,
	79, 15, 51, 163, 390, 202, 394, 99, 129, 350,
	170, 49, 196, 391, 132, 197, 6, 356, 33, 152,
	47, 133, 301, 392, 87, 137, 74, 5, 150, 9,
	393, 54, 57, 347, 348, 349, 38, 86, 12, 149,
	364, 77, -127, -120, -111, -53, 26, 131, -53, -171,
	59, -114, 71, -111, -112, 36, 58, -194, 56, 81,
	-165, -113, 151, -167, 61, 134, -193, 382, 383, -239,
	58, -167, -167, 61, 134, 151, 61, 151, 73, 19,
	-113, 9, 151, 151, -194, 63, -53, 58, -191, 373,
	16, 58, -196, 58, -197, 63, 64, 65, 110, 66,
	73, -146, 72, -59, 288, -67, 341, 344, 343, 289,
	74, 75, -113, 359, 358, -119, -199, 65, 402, -150,
	297, -147, 65, -144, -147, 65, 61, -147, -147, -148,
	120, 119, 33, -148, -148, -148, -148, -155, 63, -155,
	-152, 364, 365, -152, 65, 65, -153, 65, -53, -113,
	58, 56, 56, -53, -53, -53, 25, 136, 25, -184,
	25, 56, 59, 207, -203, -113, 123, 57, -117, 142,
	-162, 150, 131, 90, -114, -243, -178, -175, -113, 151,
	58, 10, 9, 19, 146, 140, 150, 398, -193, 61,
	58, -39, -58, 81, -64, 31, 26, 9, 76, -239,
	-63, -59, -78, -220, -76, -77, 120, 121, 109, 110,
	117, 82, 122, -67, -65, -66, -68, -223, 180, 63,
	64, -113, 62, 72, 65, 66, 67, 68, 73, -119,
	319, -74, 48, 49, 351, 352, 353, 354, 360, 355,
	85, 38, 40, 264, 288, 289, 341, 349, 348, 347,
	345, 346, 343, 344, 397, 139, 342, 115, 350, 286,
	61, 61, 61, 61, -193, 150, -165, -113, 384, -195,
	398, -146, -239, 58, -39, 25, 31, -60, 65, 110,
	-196, 58, -197, -186, 397, 65, 66, -186, -239, -144,
	58, -144, 58, 58, -239, -239, -239, 123, -148, 60,
	-147, -148, 60, 60, -148, -148, 61, 61, 120, 60,
	59, 60, 248, 248, 60, 59, 60, 59, 58, 57,
	56, -177, -178, -67, -113, -53, -53, 58, 58, 58,
	-2, -3, -4, 6, -239, -108, -2, -185, 19, 177,
	178, -53, -204, -92, -113, 151, -206, -203, -114, -113,
	-238, 134, 151, -113, 142, -162, -172, -114, 63, 65,
	60, 59, -144, -176, 291, -144, -39, -164, 173, 174,
	33, 175, -164, 384, 151, 151, -193, -239, 58, -178,
	-240, 80, 79, 97, 208, 60, -39, -61, 100, 81,
	98, 99, 84, 106, 105, 116, 109, 110, 111, 112,
	113, 114, 115, 107, 108, 119, 397, 90, 91, 92,
	93, 94, 95, 96, 101, 102, 103, 104, -107, -239,
	-77, -239, -239, -239, -58, -2, -71, -239, -39, 124,
	125, -64, -239, -64, -64, -64, -64, -64, -64, -224,
	287, -186, 63, 123, 123, -239, -239, -239, -239, -239,
	-239, -239, -239, -81, -39, -239, 41, -239, -239, -239,
	-239, -245, -239, -245, -245, -245, -245, -245, -245, -126,
	120, 259, 155, 250, -133, -128, 265, 264, -239, -239,
	-239, -239, -193, 58, -194, -39, -92, 60, 58, 374,
	59, 65, 60, -196, 63, 60, 290, 122, -127, -240,
	60, 60, 60, -37, 24, -36, -38, 111, -39, -119,
	-36, -36, -114, -148, -147, 63, -147, 298, 298, 65,
	65, -177, -113, -53, 60, 58, 58, 58, -177, -92,
	-178, -85, 15, -27, 5, -25, -244, -2, -53, 137,
	21, 6, 8, 9, 10, 19, -110, 59, 25, -206,
	-237, 58, -113, 150, -113, -180, -182, 364, -181, 57,
	147, 71, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 61, -175, -88, 27, 28, 60, -194, 56, 73,
	176, -194, 56, -165, -193, 58, -39, -178, 60, -190,
	175, -39, -39, -69, 73, 81, 74, 75, -64, 21,
	22, 23, -70, -74, -77, 69, 100, 98, 99, 84,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -123, 61, 63, 249, -126,
	61, -78, -113, -240, -240, -240, 59, -240, -2, -63,
	63, -113, -63, -113, 401, -114, -114, -36, -36, -39,
	-125, 120, 255, 155, 250, -135, -134, -136, 241, 274,
	275, 295, 248, 296, -133, 253, 252, 254, 265, 256,
	261, 263, 262, 260, -39, -38, -38, -36, -30, 24,
	-79, -80, 86, -78, 19, -240, -240, -240, -240, -240,
	257, -36, -37, -36, -36, -36, -166, -113, -239, -240,
	60, 370, 371, -39, 58, -60, 60, -151, -240, -36,
	59, -240, -116, -115, 25, -113, 63, 123, -240, -240,
	-239, -148, -148, 60, 60, 60, 58, 58, -94, 386,
	-177, -177, 60, 60, 60, -89, 17, 16, -5, -3,
	-239, 21, 24, -32, 44, 45, -26, -240, 25, -166,
	195, -109, 86, -113, -207, -209, 224, -18, -15, -6,
	-8, -7, -10, -9, -11, -12, -13, -14, -22, -3,
	139, -16, -17, -28, 10, 9, 20, 33, 199, 200,
	205, 201, 149, -29, 170, -23, 8, 350, 160, 161,
	56, -242, -113, 109, 110, 111, 112, 114, 106, 105,
	116, 123, 90, 91, 92, 63, 59, 58, 65, 66,
	67, 68, -112, -133, -134, -135, -136, 265, 270, 271,
	272, 273, 256, 255, 266, 267, 268, 73, 81, 80,
	79, 100, 97, 98, 84, 85, 86, 87, 89, 88,
	352, 351, 353, 354, 31, 142, 140, 150, 398, 143,
	58, 58, 382, 383, 140, -179, 56, -181, 364, 58,
	366, 61, -168, 90, 63, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, -88, 9, 10, 58, 58,
	-178, -240, 60, -180, 357, 73, 74, 75, -64, -64,
	-64, -70, -64, -64, -64, -35, 156, 80, 364, -240,
	-240, -39, -240, -225, -226, 63, -240, -240, 59, 57,
	59, -144, -144, -144, -154, -153, -142, 235, -144, 235,
	-144, -144, -144, -144, -144, -144, -144, 25, 59, 11,
	59, 11, -240, -36, -82, -80, 89, -39, -240, -119,
	-240, -240, -240, -240, 60, 59, -39, -190, 56, 60,
	-192, 60, 60, -240, -38, -228, 399, -115, 111, -120,
	-228, -228, -37, -94, -177, -178, -57, 12, 58, 60,
	60, -94, -57, -180, -90, 19, 34, -39, -86, -87,
	-39, -85, -2, -30, 70, -2, -187, 57, 196, 224,
	-39, 400, -209, 224, -207, -85, -39, -25, -25, -25,
	-211, -113, -213, -210, 210, 211, -25, -234, -233, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	-113, -113, -113, -205, 40, 202, 203, 204, -39, -113,
	-239, -81, -53, 60, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -178, -178, 58, 58, 151, -113, -183, -181,
	-113, 65, -200, 56, 77, 65, -200, -200, -200, -200,
	-200, -201, 191, 192, 65, -202, -201, 65, -164, -164,
	-166, -178, 60, -190, -180, -179, -35, 80, -64, -64,
	248, 402, 59, -186, -125, 120, -123, -39, -147, 61,
	-153, -125, -64, -64, -64, -64, 361, -85, 88, -39,
	87, 143, -113, -240, 10, 9, 370, 371, 60, 225,
	376, 377, 162, 378, 175, 379, 380, -239, 123, -240,
	-57, 60, 60, -180, -39, -92, -94, -94, -57, -180,
	9, 100, 59, 18, 59, -88, -89, -240, -31, 47,
	-188, 364, -39, -207, -208, -209, -209, -207, 400, 88,
	-89, 87, -19, -15, -16, -18, 224, -106, 11, -48,
	-53, -41, -42, -43, -44, -55, -77, -239, -53, 59,
	-212, -122, 197, 25, 209, -99, -124, 226, -103, 309,
	308, -114, 319, -101, 307, 259, 306, -200, 59, -113,
	11, 11, 11, 11, -209, 224, -72, -71, -72, -110,
	19, 60, 60, 60, -178, -178, 58, -239, 60, 59,
	-194, -194, 60, 60, -180, -179, -64, 298, -226, -240,
	-240, -240, 59, -240, -240, 59, -240, 19, -240, 59,
	-240, 19, -239, -34, 356, -39, -53, -190, -164, -164,
	364, -60, 16, -60, -60, -60, 65, 377, 162, 379,
	16, -240, 163, -85, 111, -180, -57, -180, -179, 60,
	-57, -57, -180, -179, 42, -39, -39, -87, -90, -36,
	398, 400, -209, 88, 88, -90, -207, 89, 89, -208,
	-54, 29, -53, -53, -48, -241, 59, 11, 57, 33,
	59, -49, -51, -50, -52, 46, 50, 52, 47, 48,
	49, 53, -122, -41, -239, -121, 163, -119, 25, -210,
	-113, 198, -127, 19, 59, -99, 226, -100, -104, 310,
	312, 90, 123, -118, -113, 63, 31, 33, -233, 29,
	-208, -240, -109, 195, -242, -221, 216, 81, 60, 60,
	-178, -113, -181, 143, -180, -179, -64, -64, -64, -64,
	-64, -64, -240, 63, 58, -60, -60, 381, -119, 16,
	-240, -179, -180, -180, -180, -179, 43, -40, 11, -39,
	88, -209, 400, -16, -19, 139, -17, 139, 400, 88,
	-95, 163, -53, -95, 57, -41, -53, -98, -102, -78,
	-42, -43, -43, -42, -43, 46, 46, 46, 51, 46,
	51, 46, -50, -119, -240, -56, 54, 138, 55, -239,
	-119, 19, -215, -214, 65, 214, 213, 81, 212, -113,
	-103, -100, 59, 311, 313, 314, 56, 77, -39, -114,
	-148, -166, 88, 224, 196, -222, 217, 216, -180, -180,
	60, -240, -53, -179, -240, -240, -240, -240, -240, -33,
	100, 364, -166, 123, -229, -230, -39, -179, -179, -57,
	-41, 88, 89, -39, -39, -62, 33, 38, -2, -239,
	-239, -57, -41, -57, -40, 59, 90, -46, -45, 56,
	57, -47, 56, -45, 46, 46, -218, 364, 134, 134,
	134, -96, -113, -2, -216, 59, -209, 224, 63, 41,
	215, -104, -105, 315, 312, 318, 90, -208, 219, 218,
	-179, -179, 58, -240, 362, 53, 367, 60, -114, -240,
	-85, 59, -83, 13, 139, -207, -19, -19, -97, 56,
	-98, -73, -75, -74, -239, -2, -91, -93, 6, -113,
	-111, -112, -96, -85, -57, -57, -102, -39, -39, 58,
	-39, 58, -239, -239, -239, -240, 59, -214, 88, -207,
	63, 312, 316, 317, -39, 400, -166, 43, 363, 368,
	-240, -230, -84, 14, 16, 400, 30, -97, 59, -240,
	-240, -240, 59, 123, -240, -89, -85, -92, -217, -219,
	387, 388, 389, 390, 391, 392, 393, 394, -92, -92,
	-92, -121, -113, 88, 400, 88, 60, 43, -39, -71,
	88, 151, -75, 38, -2, -239, -93, -113, -89, 60,
	60, 59, -240, -240, -240, -56, 88, 364, 139, 9,
	-73, -2, -219, -218, 367, -98, -240, 368,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 897, 1, 3,
	6, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 895, 509, 510, 511, 514, 0, 0, 898, 0,
	241, 286, 286, 286, 286, 899, 1076, 1077, 1078, 1079,
	1080, 1081, 0, 0, 0, 895, 0, 895, 0, 818,
	0, 0, -2, -2, 0, 907, 0, 621, 905, 906,
	895, 0, 0, 515, 512, 513, 237, 0, 522, 0,
	248, 424, 420, 253, 254, 255, 256, 257, 334, 335,
	336, 337, 338, 375, 376, 412, 399, 414, 412, 414,
	382, 412, 414, 427, 427, 427, 427, 427, 390, 391,
	392, 393, 394, 395, 396, 0, 0, 367, 412, 412,
	412, 412, 412, 373, 374, 401, 402, 403, 404, 405,
	406, 407, 408, 0, 412, 359, 357, 361, 366, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 350,
	351, 353, 354, 364, 365, 249, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
	184, 185, 0, 0, 0, 0, 0, 0, 0, 238,
	0, 0, 0, 239, 524, 0, 527, 242, 243, 244,
	245, 246, 247, 0, 516, 518, 0, 505, 0, 0,
	0, 0, 0, 0, 477, 478, 259, 0, 261, 0,
	263, 0, 265, 266, 0, 268, 270, 516, 0, 0,
	0, 0, 0, 0, 0, 258, 0, 426, 422, 421,
	427, 0, 412, 400, 427, 0, 427, 427, 383, 384,
	430, 0, 430, 430, 430, 430, 0, 0, 417, 417,
	370, 371, 372, 0, 349, 352, 0, 359, 358, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 119, 0, 221, 0, 191, 187, 188, 189,
	186, 0, 0, 820, 0, 900, 901, 902, -2, -2,
	908, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 24, 622, 909, 0, 896, 234, 0, 0,
	0, 528, 530, 903, 904, 526, 0, 488, 0, 0,
	0, 519, 505, 0, 473, -2, 0, 506, 507, 916,
	1082, 0, 0, 468, 470, 0, 505, 518, 260, 0,
	0, 0, 267, 269, 0, 273, 274, 916, 0, 306,
	0, 0, 287, 0, 290, -2, 293, 294, 0, 296,
	330, 299, 300, 301, 0, 303, 412, 412, 326, 0,
	641, 642, 0, 0, 0, 0, 304, 305, 425, 252,
	423, 430, 0, 427, 430, 0, 0, 430, 430, 385,
	431, 0, 0, 386, 387, 388, 389, 0, 410, 0,
	368, 0, 0, 369, 0, 0, 356, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 895, 0, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 518,
	31, 235, 0, 0, 529, 525, 0, 481, 412, 412,
	916, 0, 0, 0, 0, 0, 505, 0, 0, 472,
	0, 0, 631, 916, 637, 639, 0, 0, 0, 916,
	684, 685, 686, 687, 688, 689, 916, 916, 916, 916,
	916, 916, 916, 715, 716, 717, 718, 0, 720, -2,
	824, 818, 826, 827, 828, 829, 830, 831, 832, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 750, 760, 760, 760,
	760, 760, 760, 760, 0, 0, 0, 0, 0, 917,
	466, 467, 469, 471, 475, 505, 0, 519, 285, 262,
	516, 264, 916, 0, 0, 0, 307, 0, 833, 0,
	0, 0, 0, 292, 0, 295, 297, 298, 0, 322,
	0, 324, 0, 0, -2, 916, 916, 0, 377, 413,
	430, 379, 415, 416, 380, 381, 432, 428, 429, 427,
	0, 427, 0, 0, 409, 0, 362, 0, 0, 0,
	0, 0, 479, 480, 412, 0, 0, 0, 0, 0,
	-2, 842, 0, 534, 0, 0, -2, 0, 0, 222,
	223, 219, 192, 190, 589, 590, 0, 0, 821, 122,
	0, 33, 34, 519, 518, 32, 523, 531, 532, 533,
	434, 0, 847, 485, 487, 484, 0, 516, 495, 496,
	0, 0, 516, 517, 518, 505, 0, 916, 0, 0,
	328, 916, 916, 0, 636, 1083, 634, 916, 0, 0,
	916, 916, 916, 916, 916, 916, 916, 916, 916, 916,
	916, 916, 916, 916, 916, 0, 0, 665, 666, 667,
	668, 669, 670, 671, 672, 673, 674, 675, 638, 0,
	655, 0, 0, 0, 631, 38, 0, 916, 682, 0,
	0, 706, 916, 707, 708, 709, 710, 711, 712, 719,
	0, 823, 825, 0, 0, 916, 916, 916, 916, 916,
	916, 916, 544, 0, 808, 0, 0, 0, 0, 0,
	0, 752, 0, 753, 754, 755, 756, 757, 758, 759,
	799, 0, 801, 802, 803, 804, 805, 806, 916, -2,
	916, 916, 476, 0, 0, 0, 0, 0, 916, 282,
	0, 834, 288, 0, 330, 291, 331, 332, 424, 302,
	323, 325, 327, 0, 916, 0, 550, 552, 556, 0,
	0, 0, 0, 378, 430, 411, 430, 418, 419, 0,
	0, 0, 0, 0, 629, 1082, 0, 0, 0, 0,
	0, 850, 0, 0, 538, 541, 536, 38, 0, 0,
	225, 226, 227, 228, 229, 0, 814, 0, 0, 0,
	25, 124, 0, 0, 519, 463, 435, 0, 437, 0,
	455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 482, 483, 848, 849, 847, 489, 0, 497,
	498, 490, 0, 0, 0, 0, 0, 0, 434, 504,
	0, 632, 633, 635, 659, 0, 661, 663, 643, 916,
	916, 916, 647, 678, 679, 680, 0, 916, 916, 916,
	676, 651, 0, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 704, 771, 772, 0, 714,
	0, 0, 818, 657, 658, 681, 916, 875, 38, 702,
	330, 0, 703, 713, 0, 820, 822, 0, 0, 0,
	0, -2, 412, 776, 412, 361, 359, 780, 357, 782,
	783, 784, 412, 787, 412, 412, 412, 792, 793, 412,
	412, 796, 412, 412, 0, 0, 0, 0, 916, 545,
	816, 811, 916, 0, 0, 747, 748, 749, 751, 761,
	800, 0, 0, 549, 0, 0, 0, 520, 916, 328,
	275, 278, 279, 0, 308, 0, 0, 333, 721, 0,
	916, 561, 553, 557, 0, 559, 560, 0, 561, 561,
	-2, 397, 398, 360, 363, 629, 0, 0, 627, 0,
	0, 0, 629, 627, 434, 854, 916, 916, 842, 40,
	0, 539, 540, 544, 542, 543, 535, 39, 0, 230,
	0, 0, 916, 591, 21, 193, 0, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 842,
	916, 100, 101, 534, 534, 534, 0, 534, 0, 0,
	0, 88, 916, 0, -2, 887, 44, 45, 214, 215,
	0, 0, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	0, 0, 0, 0, 0, 433, 0, 438, 0, 0,
	0, 441, 0, 456, 443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 486, 0, 0, 0, 0,
	0, 328, 434, 463, 329, 660, 662, 664, 644, 645,
	646, 648, 676, 652, 0, 649, 916, 916, 0, 640,
	656, 683, -2, 0, 919, 330, 727, 728, 0, 0,
	916, 773, 427, 777, 778, 779, 359, 785, 786, 788,
	789, 790, 791, 794, 795, 797, 798, 0, 916, 916,
	916, 916, 0, 842, 0, 812, 916, 0, 745, 746,
	762, 763, 764, 765, 0, 0, 0, 271, 0, 0,
	0, 284, 289, 722, 551, 723, 0, 558, 554, 0,
	724, 725, 0, 627, 0, 0, 434, 916, 0, 629,
	629, 627, 434, 15, 35, 0, 0, 851, 843, 844,
	847, 850, 38, 546, 537, -2, 232, 916, 220, 0,
	815, 0, 196, 0, 0, 850, 0, 897, 0, 0,
	60, -2, 0, 63, 68, 69, 0, 0, 922, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	83, 84, 85, 0, 0, 0, 0, 0, 0, -2,
	-2, 218, 219, 123, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 0,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 0, 0, 0, 0, 0, 464, 0, 439,
	444, 442, 445, 457, 458, 446, 447, 448, 449, 450,
	451, 452, 459, 460, 453, 454, 461, 462, 516, 516,
	0, 0, 434, 503, 463, 502, 650, 916, 677, 653,
	0, 918, 0, 921, 0, 412, 0, 0, 774, 775,
	781, 0, 0, 0, 0, 0, 0, 809, 744, 817,
	916, 0, 521, 328, 0, 0, 280, 281, 283, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 0, 726,
	434, 627, 434, 463, 628, 0, 627, 627, 434, 463,
	855, 0, 916, 916, 916, 846, 854, 41, 916, 547,
	19, 0, 231, 20, 0, 95, 194, 0, 0, 197,
	854, 0, 106, 104, 100, 107, 0, 0, 0, 0,
	52, 0, 568, 570, 571, 572, 604, 0, 606, 0,
	0, 0, 67, 605, 0, 56, 0, 0, 880, 120,
	121, 0, 0, 0, -2, 0, 891, 888, 0, 86,
	89, 90, 91, 92, 93, 0, 212, 217, 0, 814,
	0, 124, 26, 910, 0, 0, 0, 0, 436, 0,
	491, 492, 0, 434, 463, 500, 654, 705, 920, 729,
	733, 730, 916, 732, 734, 916, 736, 916, 738, 916,
	740, 916, 916, 0, 0, 813, 0, 272, 276, 277,
	0, 310, 0, 312, 313, 314, 315, 316, 317, 318,
	0, 562, 0, 0, 555, 463, 434, 12, 8, 630,
	434, 434, 463, 14, 0, 852, 853, 845, 36, 566,
	916, 0, 96, 198, 195, 211, 0, 0, 0, 0,
	54, 0, 620, -2, 0, 0, 0, 50, 51, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 612, 0,
	0, 0, 0, 0, 0, 623, 0, 607, 0, 64,
	604, 0, 65, 0, 0, 57, 0, 59, 109, 0,
	0, 916, 0, 430, 892, 893, 894, 890, 923, 0,
	0, 213, 0, 0, 140, 913, 911, 0, 434, 434,
	0, 0, 440, 0, 463, 501, 0, 0, 0, 0,
	0, 766, 743, 810, 0, 309, 311, 320, 0, 916,
	564, 7, 13, 463, 463, 11, 856, 627, 0, 233,
	22, 97, 0, 102, 103, 916, 105, 916, 0, 108,
	0, 0, 619, 627, 0, 627, 53, 566, 877, 0,
	569, 600, 602, 0, 597, 610, 611, 613, 0, 615,
	0, 617, 618, 573, 574, 575, 0, 0, 0, 0,
	608, 0, 0, 70, 72, 0, 75, 0, 77, 78,
	881, 58, 0, 0, 112, 113, 882, 883, 884, 0,
	886, 87, 94, 0, 220, 28, 0, 912, 463, 463,
	27, 465, 0, 499, 731, 735, 737, 739, 741, 0,
	0, 0, 0, 0, 0, 839, 841, 9, 10, 835,
	567, 0, 0, 0, 0, 869, 0, 0, -2, 0,
	0, 842, 627, 49, 627, 0, 916, 594, 601, 916,
	0, 595, 916, 596, 614, 616, 587, 0, 0, 0,
	0, 0, 592, -2, 62, 0, 79, 0, 73, 0,
	76, 110, 111, 0, 0, 117, 916, 0, 914, 915,
	29, 30, 0, 742, 0, 0, 0, 494, 321, 563,
	0, 916, 837, 0, 98, 0, 0, 106, 42, 0,
	869, 857, 871, 873, 916, 38, 0, 863, -2, 865,
	867, 868, 0, 850, 48, 842, 878, 879, 598, 0,
	603, 0, 0, 0, 0, 606, 0, 71, 80, 0,
	74, 114, 115, 116, 885, 0, 0, 767, 0, 770,
	565, 840, 37, 916, 916, 0, 0, 43, 0, 874,
	-2, 0, 0, 0, 55, 47, 850, 0, 0, 577,
	579, 580, 581, 582, 583, 584, 585, 586, 0, 0,
	0, 623, 593, 81, 0, 23, 493, 768, 838, 836,
	0, 0, 872, 0, -2, 0, 864, 866, 46, 599,
	576, 0, 624, 625, 626, 575, 82, 0, 99, 0,
	860, 38, 578, 588, 0, 870, -2, 769,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 400,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 401, 3, 402, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:431
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:436
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:437
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:445
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:450
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:470
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:490
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:511
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:532
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:554
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 13:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:570
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 14:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:587
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:607
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:622
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:633
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:645
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:656
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:672
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:686
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:700
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:713
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:727
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:738
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 26:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:744
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:758
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:772
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:792
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 30:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:810
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:828
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:837
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:852
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:860
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 37:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:867
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:873
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:877
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:883
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:887
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:894
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:906
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:918
		{
			yyVAL.str = InsertStr
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:922
		{
			yyVAL.str = ReplaceStr
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:928
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:934
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:938
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:942
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:947
		{
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:948
		{
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:952
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:956
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:961
		{
			yyVAL.partitions = nil
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:965
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:971
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:975
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:979
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:983
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:989
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:993
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 62:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1004
		{
			yyVAL.statement = &Declare{
				Type: declareHandler,
				Handler: &HandlerDefinition{
					Action:     yyDollar[2].str,
					Conditions: yyDollar[5].handlerConditions,
					Statement:  yyDollar[6].statement,
				},
			}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1017
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1021
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1027
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1032
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1036
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1042
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1046
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1052
		{
			yyVAL.handlerConditions = []HandlerCondition{yyDollar[1].handlerCondition}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1056
		{
			yyVAL.handlerConditions = append(yyVAL.handlerConditions, yyDollar[3].handlerCondition)
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1062
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionMysqlErrorCode, Value: string(yyDollar[1].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1066
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[2].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1070
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[3].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1074
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlwarning}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1078
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionNotFound}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1082
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlexception}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1086
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionName, Value: string(yyDollar[1].colIdent.String())}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1092
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.statement = &BeginEnd{
				Statements:        []Statement{},
				SuppressSemicolon: false,
			}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1103
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1110
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1119
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1126
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1133
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1140
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1148
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1158
		{
			yyVAL.str = ""
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1162
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1166
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1170
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1174
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1180
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1187
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1201
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1205
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1209
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 98:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1216
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 99:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1224
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1234
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1238
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1245
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1255
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1266
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1271
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1276
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1283
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1298
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1302
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1308
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1316
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1322
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1326
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1330
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1334
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1340
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1344
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1350
		{
			yyVAL.str = SessionStr
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1354
		{
			yyVAL.str = GlobalStr
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1427
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1431
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1435
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1439
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1445
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1449
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1453
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1458
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1464
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1468
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1474
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1478
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1483
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1492
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1496
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1505
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1521
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1534
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1544
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1549
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1555
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1556
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1559
		{
			yyVAL.exprs = nil
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1560
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1564
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1569
		{
			yyVAL.empty = struct{}{}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1571
		{
			yyVAL.empty = struct{}{}
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1574
		{
			yyVAL.bytes = nil
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1578
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1582
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1587
		{
			yyVAL.bytes = nil
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1591
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1595
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1599
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1603
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1607
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1612
		{
			yyVAL.expr = nil
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1616
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1621
		{
			yyVAL.expr = nil
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1625
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1630
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1634
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1639
		{
			yyVAL.bytes = nil
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1643
		{
			yyVAL.bytes = nil
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1649
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1656
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1662
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1666
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1671
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1675
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1679
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1683
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1687
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1691
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1697
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1701
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1706
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1711
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1717
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1728
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1734
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1747
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1752
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1757
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1762
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1768
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1773
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1778
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1783
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1788
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1793
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1798
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1803
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 271:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1808
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 272:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1817
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1827
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1832
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1837
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 276:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1844
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 277:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1851
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1859
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1864
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 280:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1869
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1874
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1880
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 283:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1886
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 284:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1893
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1900
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1906
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1912
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1916
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1920
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1924
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1928
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1934
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1938
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1942
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1946
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1950
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1954
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1958
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1962
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1966
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1970
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1974
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1980
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1986
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1992
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1998
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2002
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2007
		{
			yyVAL.sequence = &Sequence{}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2011
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2016
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2021
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2026
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2031
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2036
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2041
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2046
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2051
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2056
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2061
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2066
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2071
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2078
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2082
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2086
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2090
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2094
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2098
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2103
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2107
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2112
		{
			yyVAL.bytes = nil
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2140
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), DisplayWidth: yyDollar[2].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2170
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2177
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2181
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2186
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2190
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2198
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2202
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 363:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2208
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2221
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2227
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2231
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2235
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2239
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2243
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2247
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2251
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2255
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2261
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2265
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2287
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2291
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2299
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2303
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2307
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2311
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2315
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2319
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2323
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2327
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2331
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2339
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2343
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2347
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2351
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 398:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2356
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2361
		{
			yyVAL.str = ""
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2365
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2371
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2375
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2379
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2383
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2387
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2391
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2395
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2399
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2403
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2409
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2414
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2419
		{
			yyVAL.optVal = nil
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2423
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2428
		{
			yyVAL.optVal = nil
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2432
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2436
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2445
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2449
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2453
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2458
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2462
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2467
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2471
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2476
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2480
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2484
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2489
		{
			yyVAL.str = ""
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2493
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2497
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2502
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2506
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2510
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 433:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2516
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2521
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2525
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2529
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2535
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2539
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2549
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2555
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2559
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2564
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2568
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2572
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2576
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2580
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2584
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2588
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2592
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2596
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2600
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2604
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2608
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2619
		{
			yyVAL.str = ""
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2623
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2629
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2633
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2639
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2643
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2649
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2653
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2659
		{
			yyVAL.indexPartition = nil
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2663
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2667
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2673
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2677
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2681
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2685
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2689
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2693
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2697
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2701
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2705
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2709
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2713
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2719
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2723
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2729
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2734
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2740
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2744
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2750
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2755
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2759
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2763
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2773
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2778
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 490:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2785
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 491:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2792
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 492:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2799
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 493:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2808
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 494:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2819
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2830
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2834
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2838
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2842
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 499:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2848
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 500:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2858
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 501:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2869
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 502:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2880
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 503:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2891
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2900
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2909
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2913
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2917
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2923
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2927
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2931
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2935
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2939
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2943
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2949
		{
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2950
		{
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2954
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2958
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2963
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2970
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2974
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2981
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2991
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2995
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3000
		{
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3001
		{
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3005
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3013
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3019
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3023
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3027
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3032
		{
			setAllowComments(yylex, true)
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3036
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3042
		{
			yyVAL.bytes2 = nil
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3046
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3052
		{
			yyVAL.str = UnionStr
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3056
		{
			yyVAL.str = UnionAllStr
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3060
		{
			yyVAL.str = UnionDistinctStr
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3065
		{
			yyVAL.str = ""
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3069
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3073
		{
			yyVAL.str = SQLCacheStr
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3078
		{
			yyVAL.str = ""
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3082
		{
			yyVAL.str = DistinctStr
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3087
		{
			yyVAL.str = ""
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3091
		{
			yyVAL.str = StraightJoinHint
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3096
		{
			yyVAL.selectExprs = nil
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3100
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3106
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3110
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3116
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3120
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3124
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3128
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3133
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3137
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3141
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3148
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3153
		{
			yyVAL.overExpr = nil
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3157
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 563:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3161
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3165
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 565:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3169
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3174
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3178
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3184
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3188
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3198
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3202
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3206
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3211
		{
			yyVAL.strs = []string{}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3215
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3221
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3225
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3231
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3235
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3239
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3243
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3247
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3251
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3255
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3259
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3265
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 588:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3269
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3275
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3280
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3284
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3290
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3294
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3307
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3311
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3315
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3319
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3325
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3327
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3331
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3333
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3337
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3339
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3342
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3344
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3347
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3351
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3355
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3361
		{
			yyVAL.str = JoinStr
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3365
		{
			yyVAL.str = JoinStr
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3369
		{
			yyVAL.str = JoinStr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3375
		{
			yyVAL.str = StraightJoinStr
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3381
		{
			yyVAL.str = LeftJoinStr
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3385
		{
			yyVAL.str = LeftJoinStr
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3389
		{
			yyVAL.str = RightJoinStr
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3393
		{
			yyVAL.str = RightJoinStr
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3399
		{
			yyVAL.str = NaturalJoinStr
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3403
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3413
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3417
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3423
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3427
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3432
		{
			yyVAL.indexHints = nil
		}
	case 624:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3436
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3440
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 626:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3444
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3449
		{
			yyVAL.expr = nil
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3453
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3458
		{
			yyVAL.columns = nil
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3462
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3468
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3472
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3476
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3480
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3484
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3488
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3492
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3496
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3502
		{
			yyVAL.str = ""
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3506
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3512
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3516
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3522
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3526
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3530
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3534
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3542
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3546
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3550
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3558
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 653:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3562
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 654:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3566
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3570
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3575
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3579
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3583
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3589
		{
			yyVAL.str = IsNullStr
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3593
		{
			yyVAL.str = IsNotNullStr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3597
		{
			yyVAL.str = IsTrueStr
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3601
		{
			yyVAL.str = IsNotTrueStr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3605
		{
			yyVAL.str = IsFalseStr
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3609
		{
			yyVAL.str = IsNotFalseStr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3615
		{
			yyVAL.str = EqualStr
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3619
		{
			yyVAL.str = LessThanStr
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3623
		{
			yyVAL.str = GreaterThanStr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3627
		{
			yyVAL.str = LessEqualStr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3631
		{
			yyVAL.str = GreaterEqualStr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3635
		{
			yyVAL.str = NotEqualStr
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3639
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3643
		{
			yyVAL.str = PosixRegexStr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3647
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3651
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3655
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3660
		{
			yyVAL.expr = nil
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3664
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3670
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3674
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3678
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3684
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3690
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3694
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3700
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3708
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3712
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3716
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3720
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3724
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3728
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3732
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3736
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3740
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3744
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3748
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3752
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3756
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3760
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3764
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3768
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3772
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3776
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3780
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 705:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3784
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3788
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3792
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3796
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3804
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3818
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3822
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3826
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3834
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3842
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3850
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3854
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3864
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 726:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3894
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3898
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 729:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3902
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 730:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3907
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 731:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3911
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 732:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3915
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 733:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 734:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 735:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3927
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 736:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3931
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 737:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3935
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 738:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3939
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 739:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3943
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 740:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3947
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 741:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3951
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 742:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3955
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 743:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3963
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3972
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3976
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3980
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3984
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4003
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4007
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4011
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4016
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4021
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4026
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4031
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4035
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4049
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4053
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4067
		{
			yyVAL.str = ""
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4071
		{
			yyVAL.str = BooleanModeStr
		}
	case 768:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4075
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 769:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4079
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4083
		{
			yyVAL.str = QueryExpansionStr
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4089
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4093
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4099
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4103
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4107
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4111
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4115
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4119
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4125
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4131
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.convertType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4141
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4145
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4149
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4153
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4157
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4161
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4165
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4169
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4173
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4205
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4219
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4223
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4227
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4231
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4235
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4239
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4244
		{
			yyVAL.expr = nil
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4248
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 809:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4253
		{
			yyVAL.str = string("")
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4257
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4263
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4267
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 813:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4273
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4278
		{
			yyVAL.empty = struct{}{}
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4280
		{
			yyVAL.empty = struct{}{}
		}
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4283
		{
			yyVAL.expr = nil
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4287
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4293
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4297
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4301
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 821:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4305
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4311
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4317
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4321
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4326
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4331
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4335
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4339
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4343
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4347
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4351
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4355
		{
			yyVAL.expr = &NullVal{}
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4361
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4365
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4370
		{
			yyVAL.exprs = nil
		}
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4374
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4379
		{
			yyVAL.expr = nil
		}
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4383
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4389
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4393
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4399
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4404
		{
			yyVAL.orderBy = nil
		}
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4408
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4414
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4418
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4424
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4429
		{
			yyVAL.str = AscScr
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4433
		{
			yyVAL.str = AscScr
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4437
		{
			yyVAL.str = DescScr
		}
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4442
		{
			yyVAL.limit = nil
		}
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4446
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 852:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4450
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 853:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4454
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4459
		{
			yyVAL.str = ""
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4463
		{
			yyVAL.str = ForUpdateStr
		}
	case 856:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4467
		{
			yyVAL.str = ShareModeStr
		}
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4480
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4484
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4488
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 860:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4493
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 861:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4497
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 862:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4501
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4508
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4512
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4518
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4522
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4526
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4530
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 869:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4535
		{
			yyVAL.updateExprs = nil
		}
	case 870:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4539
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4545
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4549
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4555
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4559
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4565
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4571
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4581
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4585
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 879:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4591
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4597
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 881:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4601
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4607
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 883:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4611
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 884:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4615
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 885:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4620
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4624
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4630
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 888:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4636
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4643
		{
			yyVAL.bytes = []byte("charset")
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4650
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4654
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4658
		{
			yyVAL.expr = &Default{}
		}
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4663
		{
			yyVAL.empty = struct{}{}
		}
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4665
		{
			yyVAL.empty = struct{}{}
		}
	case 897:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4668
		{
			yyVAL.str = ""
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4670
		{
			yyVAL.str = IgnoreStr
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4674
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4681
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4685
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4689
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4693
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4699
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4703
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4708
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4715
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4721
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4725
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4729
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4735
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 914:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4739
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4743
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 916:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4749
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4753
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 918:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4760
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4767
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 920:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4771
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4778
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4784
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4788
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4965
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4974
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
