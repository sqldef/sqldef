// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const SCHEMA = 57457
const TABLE = 57458
const INDEX = 57459
const MATERIALIZED = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const PRIMARY = 57465
const COLUMN = 57466
const CONSTRAINT = 57467
const REFERENCES = 57468
const SPATIAL = 57469
const FULLTEXT = 57470
const FOREIGN = 57471
const KEY_BLOCK_SIZE = 57472
const POLICY = 57473
const WHILE = 57474
const UNIQUE = 57475
const KEY = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const EXEC = 57485
const EXECUTE = 57486
const CONNECT = 57487
const USAGE = 57488
const MAXVALUE = 57489
const PARTITION = 57490
const REORGANIZE = 57491
const LESS = 57492
const THAN = 57493
const PROCEDURE = 57494
const TRIGGER = 57495
const TYPE = 57496
const RETURN = 57497
const STATUS = 57498
const VARIABLES = 57499
const RESTRICT = 57500
const CASCADE = 57501
const NO = 57502
const ACTION = 57503
const PERMISSIVE = 57504
const RESTRICTIVE = 57505
const PUBLIC = 57506
const CURRENT_USER = 57507
const SESSION_USER = 57508
const PAD_INDEX = 57509
const FILLFACTOR = 57510
const IGNORE_DUP_KEY = 57511
const STATISTICS_NORECOMPUTE = 57512
const STATISTICS_INCREMENTAL = 57513
const ALLOW_ROW_LOCKS = 57514
const ALLOW_PAGE_LOCKS = 57515
const DISTANCE = 57516
const M = 57517
const EUCLIDEAN = 57518
const COSINE = 57519
const BEFORE = 57520
const AFTER = 57521
const EACH = 57522
const ROW = 57523
const SCROLL = 57524
const CURSOR = 57525
const OPEN = 57526
const CLOSE = 57527
const FETCH = 57528
const PRIOR = 57529
const FIRST = 57530
const LAST = 57531
const DEALLOCATE = 57532
const INSTEAD = 57533
const OF = 57534
const OUTPUT = 57535
const DEFERRABLE = 57536
const INITIALLY = 57537
const IMMEDIATE = 57538
const DEFERRED = 57539
const CONCURRENTLY = 57540
const SQL = 57541
const SECURITY = 57542
const EXTENSION = 57543
const GRANT = 57544
const REVOKE = 57545
const PRIVILEGES = 57546
const EXCLUDE = 57547
const GIST = 57548
const OPTION = 57549
const BEGIN = 57550
const START = 57551
const TRANSACTION = 57552
const COMMIT = 57553
const ROLLBACK = 57554
const BIT = 57555
const TINYINT = 57556
const SMALLINT = 57557
const SMALLSERIAL = 57558
const MEDIUMINT = 57559
const INT = 57560
const INTEGER = 57561
const SERIAL = 57562
const BIGINT = 57563
const BIGSERIAL = 57564
const INTNUM = 57565
const REAL = 57566
const DOUBLE = 57567
const PRECISION = 57568
const FLOAT_TYPE = 57569
const DECIMAL = 57570
const NUMERIC = 57571
const SMALLMONEY = 57572
const MONEY = 57573
const TIME = 57574
const TIMESTAMP = 57575
const TIMESTAMPTZ = 57576
const TIMETZ = 57577
const DATETIME = 57578
const YEAR = 57579
const DATETIMEOFFSET = 57580
const DATETIME2 = 57581
const SMALLDATETIME = 57582
const CHAR = 57583
const VARCHAR = 57584
const VARYING = 57585
const BOOL = 57586
const CHARACTER = 57587
const VARBINARY = 57588
const NCHAR = 57589
const NVARCHAR = 57590
const NTEXT = 57591
const UUID = 57592
const TEXT = 57593
const TINYTEXT = 57594
const MEDIUMTEXT = 57595
const LONGTEXT = 57596
const CITEXT = 57597
const BLOB = 57598
const TINYBLOB = 57599
const MEDIUMBLOB = 57600
const LONGBLOB = 57601
const JSON = 57602
const JSONB = 57603
const ENUM = 57604
const GEOMETRY = 57605
const POINT = 57606
const LINESTRING = 57607
const POLYGON = 57608
const GEOMETRYCOLLECTION = 57609
const MULTIPOINT = 57610
const MULTILINESTRING = 57611
const MULTIPOLYGON = 57612
const VECTOR = 57613
const VARIADIC = 57614
const ARRAY = 57615
const NOW = 57616
const GETDATE = 57617
const BPCHAR = 57618
const TEXT_PATTERN_OPS = 57619
const NULLX = 57620
const AUTO_INCREMENT = 57621
const APPROXNUM = 57622
const SIGNED = 57623
const UNSIGNED = 57624
const ZEROFILL = 57625
const ZONE = 57626
const AUTOINCREMENT = 57627
const DATABASES = 57628
const TABLES = 57629
const VSCHEMA_TABLES = 57630
const EXTENDED = 57631
const FULL = 57632
const PROCESSLIST = 57633
const NAMES = 57634
const CHARSET = 57635
const GLOBAL = 57636
const SESSION = 57637
const ISOLATION = 57638
const LEVEL = 57639
const READ = 57640
const WRITE = 57641
const ONLY = 57642
const REPEATABLE = 57643
const COMMITTED = 57644
const UNCOMMITTED = 57645
const SERIALIZABLE = 57646
const NEW = 57647
const CONCAT_NULL_YIELDS_NULL = 57648
const CURSOR_CLOSE_ON_COMMIT = 57649
const QUOTED_IDENTIFIER = 57650
const ARITHABORT = 57651
const FMTONLY = 57652
const NOCOUNT = 57653
const NOEXEC = 57654
const NUMERIC_ROUNDABORT = 57655
const ANSI_DEFAULTS = 57656
const ANSI_NULL_DFLT_OFF = 57657
const ANSI_NULL_DFLT_ON = 57658
const ANSI_NULLS = 57659
const ANSI_PADDING = 57660
const ANSI_WARNINGS = 57661
const FORCEPLAN = 57662
const SHOWPLAN_ALL = 57663
const SHOWPLAN_TEXT = 57664
const SHOWPLAN_XML = 57665
const IMPLICIT_TRANSACTIONS = 57666
const REMOTE_PROC_TRANSACTIONS = 57667
const XACT_ABORT = 57668
const CURRENT_TIMESTAMP = 57669
const DATABASE = 57670
const CURRENT_DATE = 57671
const CURRENT_TIME = 57672
const LOCALTIME = 57673
const LOCALTIMESTAMP = 57674
const UTC_DATE = 57675
const UTC_TIME = 57676
const UTC_TIMESTAMP = 57677
const REPLACE = 57678
const CONVERT = 57679
const CAST = 57680
const SUBSTR = 57681
const SUBSTRING = 57682
const GROUP_CONCAT = 57683
const SEPARATOR = 57684
const INHERIT = 57685
const LEAD = 57686
const LAG = 57687
const MATCH = 57688
const AGAINST = 57689
const BOOLEAN = 57690
const LANGUAGE = 57691
const WITH = 57692
const WITHOUT = 57693
const PARSER = 57694
const QUERY = 57695
const EXPANSION = 57696
const UNUSED = 57697
const VIRTUAL = 57698
const STORED = 57699
const GENERATED = 57700
const ALWAYS = 57701
const IDENTITY = 57702
const SEQUENCE = 57703
const INCREMENT = 57704
const MINVALUE = 57705
const CACHE = 57706
const CYCLE = 57707
const OWNED = 57708
const NONE = 57709
const CLUSTERED = 57710
const NONCLUSTERED = 57711
const REPLICATION = 57712
const COLUMNSTORE = 57713
const INCLUDE = 57714
const HOLDLOCK = 57715
const NOLOCK = 57716
const NOWAIT = 57717
const PAGLOCK = 57718
const ROWLOCK = 57719
const TABLOCK = 57720
const UPDLOCK = 57721
const READUNCOMMITTED = 57722
const DEFINER = 57723
const INVOKER = 57724
const TYPECAST = 57725
const CHECK = 57726
const OVER = 57727

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"CONNECT",
	"USAGE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"EXTENSION",
	"GRANT",
	"REVOKE",
	"PRIVILEGES",
	"EXCLUDE",
	"GIST",
	"OPTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TIMETZ",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 8,
	134, 498,
	-2, 208,
	-1, 80,
	123, 921,
	-2, 915,
	-1, 81,
	123, 922,
	-2, 827,
	-1, 336,
	123, 925,
	-2, 919,
	-1, 337,
	123, 922,
	-2, 920,
	-1, 504,
	61, 447,
	-2, 444,
	-1, 537,
	123, 923,
	-2, 303,
	-1, 538,
	79, 833,
	80, 833,
	84, 833,
	91, 833,
	92, 833,
	93, 833,
	94, 833,
	95, 833,
	96, 833,
	97, 833,
	98, 833,
	99, 833,
	100, 833,
	101, 833,
	102, 833,
	103, 833,
	104, 833,
	105, 833,
	106, 833,
	107, 833,
	108, 833,
	110, 833,
	111, 833,
	112, 833,
	113, 833,
	114, 833,
	115, 833,
	116, 833,
	119, 833,
	210, 833,
	400, 833,
	-2, 267,
	-1, 539,
	79, 837,
	80, 837,
	84, 837,
	91, 837,
	92, 837,
	93, 837,
	94, 837,
	95, 837,
	96, 837,
	97, 837,
	98, 837,
	99, 837,
	100, 837,
	101, 837,
	102, 837,
	103, 837,
	104, 837,
	105, 837,
	106, 837,
	107, 837,
	108, 837,
	110, 837,
	111, 837,
	112, 837,
	113, 837,
	114, 837,
	115, 837,
	116, 837,
	119, 837,
	210, 837,
	400, 837,
	-2, 268,
	-1, 541,
	79, 838,
	80, 838,
	84, 838,
	91, 838,
	92, 838,
	93, 838,
	94, 838,
	95, 838,
	96, 838,
	97, 838,
	98, 838,
	99, 838,
	100, 838,
	101, 838,
	102, 838,
	103, 838,
	104, 838,
	105, 838,
	106, 838,
	107, 838,
	108, 838,
	110, 838,
	111, 838,
	112, 838,
	113, 838,
	114, 838,
	115, 838,
	116, 838,
	119, 838,
	210, 838,
	400, 838,
	-2, 270,
	-1, 542,
	79, 841,
	80, 841,
	84, 841,
	91, 841,
	92, 841,
	93, 841,
	94, 841,
	95, 841,
	96, 841,
	97, 841,
	98, 841,
	99, 841,
	100, 841,
	101, 841,
	102, 841,
	103, 841,
	104, 841,
	105, 841,
	106, 841,
	107, 841,
	108, 841,
	110, 841,
	111, 841,
	112, 841,
	113, 841,
	114, 841,
	115, 841,
	116, 841,
	119, 841,
	210, 841,
	-2, 303,
	-1, 543,
	79, 836,
	80, 836,
	84, 836,
	91, 836,
	92, 836,
	93, 836,
	94, 836,
	95, 836,
	96, 836,
	97, 836,
	98, 836,
	99, 836,
	100, 836,
	101, 836,
	102, 836,
	103, 836,
	104, 836,
	105, 836,
	106, 836,
	107, 836,
	108, 836,
	110, 836,
	111, 836,
	112, 836,
	113, 836,
	114, 836,
	115, 836,
	116, 836,
	119, 836,
	210, 836,
	400, 836,
	-2, 273,
	-1, 544,
	79, 677,
	80, 677,
	84, 677,
	91, 677,
	92, 677,
	93, 677,
	94, 677,
	95, 677,
	96, 677,
	97, 677,
	98, 677,
	99, 677,
	100, 677,
	101, 677,
	102, 677,
	103, 677,
	104, 677,
	105, 677,
	106, 677,
	107, 677,
	108, 677,
	110, 677,
	111, 677,
	112, 677,
	113, 677,
	114, 677,
	115, 677,
	116, 677,
	119, 677,
	210, 677,
	400, 677,
	-2, 274,
	-1, 693,
	59, 376,
	60, 376,
	-2, 1032,
	-1, 707,
	86, 815,
	-2, 976,
	-1, 711,
	294, 1087,
	-2, 760,
	-1, 712,
	294, 1086,
	-2, 760,
	-1, 713,
	294, 1085,
	-2, 760,
	-1, 714,
	294, 1037,
	-2, 760,
	-1, 715,
	294, 1038,
	-2, 760,
	-1, 716,
	294, 985,
	-2, 760,
	-1, 717,
	294, 986,
	-2, 760,
	-1, 732,
	123, 923,
	-2, 303,
	-1, 782,
	79, 832,
	80, 832,
	84, 832,
	91, 832,
	92, 832,
	93, 832,
	94, 832,
	95, 832,
	96, 832,
	97, 832,
	98, 832,
	99, 832,
	100, 832,
	101, 832,
	102, 832,
	103, 832,
	104, 832,
	105, 832,
	106, 832,
	107, 832,
	108, 832,
	110, 832,
	111, 832,
	112, 832,
	113, 832,
	114, 832,
	115, 832,
	116, 832,
	119, 832,
	210, 832,
	400, 832,
	-2, 266,
	-1, 784,
	79, 837,
	80, 837,
	84, 837,
	91, 837,
	92, 837,
	93, 837,
	94, 837,
	95, 837,
	96, 837,
	97, 837,
	98, 837,
	99, 837,
	100, 837,
	101, 837,
	102, 837,
	103, 837,
	104, 837,
	105, 837,
	106, 837,
	107, 837,
	108, 837,
	110, 837,
	111, 837,
	112, 837,
	113, 837,
	114, 837,
	115, 837,
	116, 837,
	119, 837,
	210, 837,
	400, 837,
	-2, 269,
	-1, 785,
	79, 838,
	80, 838,
	84, 838,
	91, 838,
	92, 838,
	93, 838,
	94, 838,
	95, 838,
	96, 838,
	97, 838,
	98, 838,
	99, 838,
	100, 838,
	101, 838,
	102, 838,
	103, 838,
	104, 838,
	105, 838,
	106, 838,
	107, 838,
	108, 838,
	110, 838,
	111, 838,
	112, 838,
	113, 838,
	114, 838,
	115, 838,
	116, 838,
	119, 838,
	210, 838,
	400, 838,
	-2, 271,
	-1, 916,
	60, 450,
	-2, 856,
	-1, 920,
	5, 78,
	-2, 16,
	-1, 923,
	5, 78,
	-2, 18,
	-1, 1030,
	290, 338,
	404, 338,
	-2, 305,
	-1, 1032,
	79, 749,
	80, 749,
	84, 749,
	91, 749,
	92, 749,
	93, 749,
	94, 749,
	95, 749,
	96, 749,
	97, 749,
	98, 749,
	99, 749,
	100, 749,
	101, 749,
	102, 749,
	103, 749,
	104, 749,
	105, 749,
	106, 749,
	107, 749,
	108, 749,
	110, 749,
	111, 749,
	112, 749,
	113, 749,
	114, 749,
	115, 749,
	116, 749,
	119, 749,
	210, 749,
	400, 749,
	-2, 275,
	-1, 1303,
	5, 79,
	-2, 673,
	-1, 1429,
	60, 148,
	-2, 261,
	-1, 1432,
	60, 148,
	-2, 261,
	-1, 1544,
	5, 78,
	-2, 17,
	-1, 1560,
	200, 105,
	-2, 594,
	-1, 1601,
	60, 148,
	-2, 231,
	-1, 1746,
	90, 917,
	-2, 898,
	-1, 1831,
	57, 92,
	59, 92,
	-2, 94,
	-1, 2000,
	5, 78,
	-2, 867,
	-1, 2025,
	5, 78,
	-2, 101,
	-1, 2062,
	59, 1068,
	60, 1068,
	-2, 524,
	-1, 2098,
	5, 79,
	-2, 868,
	-1, 2130,
	5, 78,
	-2, 870,
	-1, 2151,
	5, 79,
	-2, 871,
}

const yyPrivate = 57344

const yyLast = 14104

var yyAct = [...]int16{
	577, 557, 2018, 2055, 2107, 1932, 583, 1950, 2061, 831,
	1852, 50, 50, 2056, 1304, 1086, 2052, 57, 1986, 930,
	1269, 2023, 1933, 76, 77, 78, 1393, 1866, 93, 1256,
	1394, 1390, 2010, 1900, 1850, 1716, 1407, 1865, 1854, 1445,
	1708, 829, 492, 1740, 1926, 1726, 1408, 1840, 1725, 1387,
	571, 1737, 1564, 1501, 1219, 479, 115, 1405, 121, 121,
	121, 121, 121, 692, 1561, 915, 978, 1758, 1193, 1734,
	34, 189, 192, 193, 628, 496, 1073, 971, 114, 1628,
	1109, 1322, 1378, 914, 864, 1496, 1097, 1117, 1101, 1253,
	1151, 209, 739, 947, 1204, 1295, 332, 1154, 1731, 1209,
	308, 1037, 1090, 788, 270, 50, 1259, 1509, 287, 740,
	499, 691, 122, 1619, 57, 546, 946, 505, 118, 556,
	323, 117, 119, 85, 116, 764, 1216, 878, 232, 730,
	198, 534, 324, 564, 96, 253, 227, 185, 186, 187,
	188, 1329, 1433, 236, 836, 1366, 1422, 1411, 1410, 1365,
	288, 836, 272, 1422, 1411, 1410, 277, 616, 1412, 56,
	1163, 1162, 870, 853, 14, 1412, 994, 1510, 268, 1818,
	1166, 1413, 799, 783, 810, 810, 51, 1379, 1413, 319,
	320, 748, 98, 506, 507, 1600, 802, 803, 804, 805,
	806, 799, 314, 722, 810, 213, 984, 1436, 751, 99,
	100, 215, 1012, 723, 531, 2149, 333, 121, 194, 224,
	196, 798, 797, 807, 808, 800, 801, 802, 803, 804,
	805, 806, 799, 2047, 208, 810, 1969, 333, 1651, 1652,
	1790, 1277, 1278, 1821, 2142, 1991, 1449, 573, 1450, 229,
	500, 765, 640, 641, 289, 290, 291, 292, 336, 509,
	472, 1205, 2019, 2125, 850, 521, 230, 277, 1705, 2046,
	1990, 1531, 1476, 469, 1695, 101, 271, 2029, 2081, 331,
	2028, 1961, 1962, 2030, 1960, 725, 619, 1406, 2082, 2083,
	758, 1666, 1174, 310, 1406, 303, 766, 1418, 1173, 313,
	490, 618, 1163, 317, 1418, 321, 322, 274, 1424, 1425,
	277, 584, 329, 288, 471, 1424, 1425, 473, 639, 1867,
	1420, 1868, 1525, 648, 636, 478, 480, 1420, 1299, 482,
	483, 1161, 485, 800, 801, 802, 803, 804, 805, 806,
	799, 662, 755, 810, 757, 756, 280, 1495, 525, 1414,
	1415, 1417, 906, 905, 560, 1416, 1414, 1415, 1417, 1344,
	779, 778, 1416, 2108, 2109, 2110, 2111, 2112, 2113, 2114,
	2115, 306, 1342, 527, 632, 633, 634, 635, 780, 195,
	1552, 51, 1970, 92, 51, 1548, 666, 1612, 1441, 1202,
	503, 2034, 2033, 73, 1973, 1974, 109, 621, 994, 106,
	623, 660, 626, 627, 247, 779, 778, 780, 544, 807,
	808, 800, 801, 802, 803, 804, 805, 806, 799, 793,
	647, 810, 796, 780, 651, 652, 506, 507, 811, 812,
	813, 814, 815, 816, 817, 61, 794, 795, 792, 818,
	819, 820, 821, 798, 797, 807, 808, 800, 801, 802,
	803, 804, 805, 806, 799, 1884, 1789, 810, 1791, 95,
	51, 725, 60, 504, 724, 809, 809, 190, 328, 1860,
	661, 265, 51, 74, 1971, 1547, 307, 268, 269, 1881,
	250, 199, 1386, 1629, 1630, 809, 667, 1242, 57, 1736,
	778, 781, 926, 927, 1254, 1927, 2127, 1328, 685, 333,
	1611, 1423, 256, 986, 12, 985, 699, 780, 1423, 1087,
	524, 941, 1162, 972, 973, 515, 809, 263, 994, 251,
	781, 333, 741, 288, 523, 809, 518, 252, 942, 750,
	501, 1013, 516, 249, 1437, 1438, 781, 779, 778, 240,
	472, 239, 721, 244, 245, 248, 967, 64, 753, 241,
	250, 1924, 1653, 1782, 994, 780, 696, 1450, 1550, 8,
	9, 108, 688, 944, 105, 779, 778, 248, 999, 1206,
	65, 690, 66, 67, 530, 51, 1298, 949, 1890, 1646,
	228, 1439, 1989, 780, 738, 1883, 259, 2143, 254, 264,
	679, 2048, 94, 682, 686, 668, 261, 260, 1910, 1923,
	1205, 645, 97, 798, 797, 807, 808, 800, 801, 802,
	803, 804, 805, 806, 799, 642, 673, 810, 1484, 638,
	781, 243, 69, 833, 809, 35, 191, 768, 91, 726,
	670, 674, 769, 770, 771, 773, 689, 779, 778, 749,
	51, 775, 774, 550, 551, 747, 502, 249, 1000, 512,
	513, 782, 10, 11, 1590, 780, 1657, 200, 201, 1800,
	699, 1186, 514, 1735, 250, 1683, 994, 752, 781, 1659,
	202, 931, 678, 952, 333, 776, 938, 767, 654, 772,
	57, 828, 110, 943, 680, 779, 778, 246, 948, 981,
	111, 948, 948, 75, 948, 950, 781, 2022, 333, 836,
	68, 1634, 809, 780, 2021, 920, 892, 923, 894, 1323,
	916, 897, 898, 59, 506, 507, 1211, 1210, 1654, 848,
	2020, 833, 72, 833, 71, 281, 779, 778, 70, 1352,
	932, 883, 484, 481, 1535, 249, 223, 935, 809, 699,
	884, 893, 257, 698, 780, 51, 676, 1325, 258, 221,
	677, 509, 250, 1391, 87, 220, 84, 217, 102, 917,
	555, 960, 89, 779, 778, 1670, 477, 928, 781, 1951,
	1953, 931, 837, 838, 2101, 872, 873, 874, 875, 876,
	877, 780, 1982, 779, 778, 974, 975, 951, 1870, 696,
	1010, 1678, 933, 1326, 121, 976, 983, 62, 63, 922,
	242, 780, 929, 934, 992, 958, 1669, 953, 954, 1038,
	956, 852, 1335, 851, 1334, 945, 781, 663, 1591, 1592,
	1593, 266, 939, 267, 487, 275, 779, 778, 207, 1629,
	1630, 979, 980, 982, 779, 778, 205, 1078, 1077, 1003,
	900, 64, 630, 629, 780, 38, 995, 262, 1094, 1094,
	1031, 987, 780, 1952, 1668, 833, 284, 781, 1096, 286,
	777, 765, 333, 333, 65, 1911, 66, 67, 1444, 1100,
	957, 1655, 1656, 1658, 1660, 1661, 1001, 1078, 1156, 486,
	2031, 2008, 1236, 1018, 1085, 872, 873, 874, 875, 876,
	877, 1869, 1464, 833, 781, 1463, 1462, 698, 809, 901,
	833, 779, 778, 1461, 336, 1784, 766, 824, 776, 1460,
	1017, 1459, 1533, 1458, 781, 1457, 69, 1456, 1455, 780,
	1045, 1453, 699, 1178, 1155, 1105, 1106, 1361, 1825, 931,
	699, 1826, 1066, 1011, 1043, 1044, 1042, 61, 1062, 1388,
	1155, 884, 1063, 498, 1061, 214, 1244, 1065, 1182, 1240,
	218, 1201, 779, 778, 765, 1203, 212, 781, 828, 1148,
	1149, 497, 51, 948, 60, 781, 948, 1092, 1095, 1215,
	780, 498, 916, 1184, 498, 699, 698, 211, 1169, 204,
	696, 769, 770, 771, 773, 1165, 498, 333, 520, 833,
	775, 774, 550, 551, 68, 1183, 750, 1241, 1620, 766,
	333, 741, 699, 508, 1506, 1177, 1788, 741, 1810, 741,
	1267, 1267, 1620, 1270, 1631, 1750, 1025, 1027, 1028, 1621,
	1622, 1170, 1179, 1172, 1026, 696, 1019, 1020, 772, 1618,
	1099, 1185, 781, 1621, 509, 1111, 1113, 1114, 1115, 1284,
	1285, 1286, 519, 1150, 625, 1040, 1273, 620, 624, 64,
	1237, 620, 696, 1234, 1176, 1272, 1175, 1235, 1208, 1038,
	620, 993, 1015, 1249, 1239, 1196, 1213, 1251, 1164, 1243,
	1167, 1168, 65, 646, 66, 67, 644, 643, 1874, 1207,
	615, 1613, 1212, 781, 277, 1074, 1233, 1075, 51, 840,
	1325, 62, 63, 1250, 1842, 1845, 1846, 1847, 1843, 1255,
	1844, 1848, 509, 1454, 2011, 2012, 1245, 850, 51, 833,
	1873, 51, 1427, 1324, 1246, 839, 850, 1268, 1258, 51,
	1214, 210, 1171, 1324, 69, 937, 841, 840, 39, 684,
	40, 41, 42, 637, 39, 1692, 40, 41, 42, 51,
	526, 1087, 509, 53, 1451, 51, 1287, 1039, 1076, 37,
	1281, 1194, 994, 994, 1291, 899, 1308, 746, 1264, 698,
	2137, 2136, 1194, 2135, 1480, 2122, 836, 698, 1260, 1262,
	1263, 1265, 1266, 1261, 2080, 994, 994, 2100, 994, 1480,
	2038, 665, 745, 51, 744, 2044, 994, 1698, 1834, 51,
	964, 1977, 699, 1998, 1837, 994, 1599, 1270, 1999, 964,
	1886, 1541, 68, 964, 1885, 1389, 743, 995, 727, 777,
	517, 1429, 698, 1194, 1815, 59, 948, 1385, 509, 1487,
	2007, 798, 797, 807, 808, 800, 801, 802, 803, 804,
	805, 806, 799, 1341, 1835, 810, 678, 998, 1776, 698,
	964, 1774, 916, 1345, 1480, 1773, 1770, 1769, 46, 964,
	1764, 964, 1763, 2053, 46, 1371, 2007, 1372, 699, 964,
	1699, 1360, 964, 1639, 1257, 44, 1318, 994, 1480, 1479,
	1486, 44, 998, 1477, 1375, 1380, 964, 1474, 572, 1317,
	1374, 43, 1447, 48, 47, 49, 759, 43, 1373, 48,
	47, 49, 45, 836, 80, 1930, 84, 678, 45, 62,
	63, 787, 998, 1473, 964, 1382, 789, 1282, 696, 1440,
	823, 1837, 1442, 825, 826, 827, 832, 1194, 1381, 1083,
	994, 1901, 1443, 1470, 1465, 2129, 787, 787, 787, 787,
	787, 787, 1358, 1503, 1324, 1194, 1276, 333, 849, 964,
	1252, 1198, 1197, 998, 997, 509, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 1546, 866, 1480, 868,
	869, 1504, 871, 871, 871, 871, 871, 871, 871, 2007,
	887, 888, 889, 890, 1274, 1482, 1836, 833, 1195, 336,
	1901, 64, 964, 963, 1532, 910, 909, 699, 699, 1475,
	903, 904, 903, 902, 113, 112, 1428, 1039, 1491, 1180,
	1105, 1016, 1837, 1356, 65, 1426, 66, 67, 659, 2096,
	1087, 1354, 659, 1505, 921, 1511, 921, 1508, 1539, 907,
	1515, 1542, 1522, 1560, 1514, 1586, 1587, 1588, 1318, 698,
	1595, 1554, 1518, 1513, 1553, 896, 1544, 916, 696, 895,
	1601, 1429, 1429, 1601, 1429, 1429, 699, 699, 1516, 1517,
	1526, 1355, 833, 1538, 1318, 1083, 69, 1614, 1524, 1353,
	849, 1617, 856, 857, 858, 860, 861, 862, 1536, 866,
	1537, 977, 871, 871, 871, 871, 871, 871, 871, 1270,
	699, 891, 1837, 741, 658, 988, 107, 659, 836, 104,
	103, 1647, 787, 104, 1480, 698, 696, 696, 1959, 1637,
	1862, 1732, 849, 1671, 1318, 1336, 1194, 581, 964, 1014,
	908, 1607, 1608, 1642, 1616, 1597, 809, 1645, 509, 1543,
	2075, 187, 1556, 1557, 1558, 1644, 1562, 2073, 1673, 2037,
	696, 83, 86, 1894, 68, 1598, 989, 990, 1021, 1767,
	509, 912, 911, 1635, 1636, 1638, 277, 82, 832, 510,
	511, 931, 787, 1041, 1633, 787, 787, 787, 787, 787,
	787, 787, 787, 787, 787, 787, 787, 787, 787, 787,
	1701, 1640, 1610, 333, 1609, 1641, 1697, 2011, 2012, 1714,
	1540, 1623, 1624, 1625, 1626, 1627, 921, 1472, 1469, 1707,
	1672, 1468, 1719, 832, 1711, 1435, 1717, 2053, 1690, 994,
	1751, 1377, 1718, 1724, 86, 1376, 309, 1280, 1247, 1200,
	86, 1643, 1601, 1181, 787, 1759, 1759, 1008, 86, 225,
	699, 699, 1007, 1723, 698, 698, 1602, 1603, 1604, 1605,
	1606, 62, 63, 1005, 1702, 1002, 1743, 1721, 996, 991,
	919, 33, 918, 760, 798, 797, 807, 808, 800, 801,
	802, 803, 804, 805, 806, 799, 728, 664, 810, 649,
	304, 1842, 1845, 1846, 1847, 1843, 480, 1844, 1848, 532,
	696, 696, 528, 1676, 1760, 495, 1700, 1761, 302, 1703,
	311, 312, 921, 698, 698, 1765, 1766, 1749, 294, 333,
	293, 282, 16, 1777, 26, 28, 1446, 21, 86, 2014,
	1483, 913, 86, 1801, 86, 86, 650, 316, 315, 222,
	22, 86, 31, 338, 219, 338, 86, 698, 203, 197,
	54, 1771, 1772, 2017, 86, 86, 1780, 1781, 86, 86,
	2016, 86, 23, 24, 1944, 1796, 1942, 1941, 1812, 1945,
	1940, 1943, 1816, 1859, 1946, 121, 1846, 1847, 1779, 333,
	1814, 2092, 935, 1817, 2045, 1778, 1872, 1824, 1313, 1314,
	1899, 1793, 867, 494, 1271, 1875, 1497, 631, 763, 1797,
	2094, 1827, 86, 1877, 697, 476, 1775, 475, 699, 1888,
	27, 1498, 972, 973, 474, 330, 1736, 1384, 1832, 762,
	1783, 1785, 1786, 1787, 657, 1288, 1289, 1290, 833, 655,
	1863, 1861, 832, 1041, 787, 787, 787, 1858, 1878, 1849,
	1823, 1310, 1743, 1876, 1311, 1152, 1893, 653, 206, 86,
	1956, 1880, 1762, 86, 86, 1892, 1192, 1157, 696, 925,
	1830, 1831, 720, 1305, 1811, 1889, 1813, 1188, 2089, 1189,
	1190, 1191, 1902, 1887, 1792, 1306, 2088, 1078, 1934, 1309,
	19, 1032, 1187, 1087, 2041, 1257, 1798, 698, 698, 1755,
	1754, 1912, 1719, 325, 326, 327, 1327, 1753, 36, 1752,
	955, 1920, 1919, 333, 1650, 1649, 719, 718, 1931, 787,
	52, 333, 683, 1922, 681, 1467, 1929, 2144, 1270, 1079,
	1080, 1081, 1082, 1084, 1936, 1937, 1935, 1939, 1667, 1938,
	1466, 522, 1089, 1085, 1955, 1270, 1947, 1091, 1968, 1833,
	940, 1891, 1958, 1729, 1199, 13, 1957, 1, 1895, 833,
	1896, 1563, 18, 17, 1985, 1981, 318, 1107, 697, 575,
	1158, 1159, 1972, 1160, 1882, 25, 1743, 558, 1928, 809,
	1983, 1980, 2106, 1733, 1966, 1559, 1984, 29, 30, 1913,
	32, 1589, 1632, 1914, 614, 255, 1967, 533, 1485, 529,
	20, 1704, 1545, 924, 1992, 2024, 656, 1615, 1217, 2003,
	966, 2005, 237, 1112, 226, 2004, 2006, 959, 2000, 488,
	55, 2015, 15, 1452, 238, 235, 234, 233, 231, 86,
	617, 273, 86, 333, 833, 338, 754, 2026, 1327, 1979,
	279, 305, 120, 700, 123, 1738, 1871, 697, 2025, 1078,
	1934, 2043, 2063, 2024, 2054, 698, 2057, 90, 1078, 1934,
	671, 2032, 1975, 1976, 833, 2035, 2036, 1321, 822, 2067,
	2027, 1745, 1719, 1719, 2066, 2060, 2049, 1717, 1500, 1238,
	2070, 2050, 2051, 1718, 2068, 2087, 2069, 2040, 1270, 787,
	787, 787, 1359, 2059, 2064, 1153, 2039, 787, 787, 559,
	1024, 1855, 574, 1997, 791, 1728, 1828, 1841, 2086, 833,
	921, 1275, 1839, 2091, 1838, 2013, 2009, 1727, 936, 1694,
	1909, 2095, 1312, 1283, 931, 1729, 1675, 931, 931, 931,
	787, 2120, 2103, 1419, 1409, 2104, 1088, 87, 1315, 1857,
	2119, 7, 1421, 2105, 1404, 6, 2116, 2117, 2118, 2124,
	5, 2063, 2133, 2057, 787, 787, 787, 787, 4, 2132,
	2128, 836, 3, 1422, 1411, 1410, 1403, 1402, 1401, 2134,
	1400, 1398, 1399, 1396, 1397, 1412, 1395, 2141, 1300, 1301,
	1307, 834, 2, 2145, 1551, 921, 2057, 1303, 1413, 0,
	0, 2130, 2147, 2064, 2148, 1078, 1934, 700, 86, 1316,
	2150, 1319, 1320, 0, 0, 0, 86, 833, 0, 0,
	0, 0, 0, 1330, 0, 1331, 1332, 1333, 0, 0,
	1596, 0, 0, 2146, 64, 0, 86, 0, 1729, 0,
	697, 0, 1729, 1729, 1729, 1729, 1729, 0, 697, 833,
	0, 1853, 0, 1713, 0, 0, 1729, 65, 0, 66,
	67, 0, 1357, 0, 0, 0, 0, 0, 1363, 0,
	0, 0, 0, 0, 0, 0, 1367, 1368, 0, 1369,
	1370, 0, 0, 0, 0, 0, 700, 0, 0, 0,
	0, 0, 536, 697, 0, 0, 1383, 0, 0, 0,
	0, 0, 0, 787, 1406, 0, 1729, 0, 0, 69,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	697, 1677, 0, 0, 0, 1424, 1425, 51, 578, 1093,
	733, 735, 736, 579, 580, 1729, 0, 1420, 734, 737,
	0, 0, 1693, 0, 1688, 0, 0, 0, 0, 0,
	0, 0, 1709, 0, 1710, 0, 0, 1551, 0, 0,
	1471, 0, 0, 0, 0, 0, 1414, 1415, 1417, 1730,
	0, 0, 1416, 0, 0, 0, 0, 509, 0, 0,
	87, 0, 84, 0, 83, 994, 0, 68, 0, 0,
	1552, 0, 0, 0, 0, 0, 0, 0, 1756, 0,
	0, 0, 0, 1686, 994, 0, 0, 1104, 0, 338,
	0, 0, 1104, 1104, 1104, 1104, 0, 0, 1104, 1104,
	1104, 0, 0, 0, 83, 1768, 0, 0, 0, 1507,
	798, 797, 807, 808, 800, 801, 802, 803, 804, 805,
	806, 799, 0, 0, 810, 1104, 1104, 1104, 1104, 798,
	797, 807, 808, 800, 801, 802, 803, 804, 805, 806,
	799, 0, 0, 810, 0, 0, 0, 64, 0, 700,
	81, 86, 0, 0, 0, 0, 0, 700, 0, 0,
	86, 0, 0, 0, 62, 63, 0, 58, 0, 0,
	65, 0, 66, 67, 787, 88, 0, 787, 0, 787,
	0, 787, 0, 787, 787, 0, 0, 0, 0, 0,
	697, 1551, 1820, 0, 0, 1551, 1710, 0, 1423, 0,
	0, 0, 700, 0, 1709, 0, 0, 0, 0, 0,
	0, 0, 729, 0, 0, 742, 0, 0, 0, 0,
	0, 1851, 69, 0, 0, 0, 0, 1855, 0, 700,
	0, 0, 761, 0, 0, 0, 0, 0, 0, 0,
	0, 1709, 0, 0, 0, 0, 0, 88, 1712, 0,
	0, 790, 0, 88, 0, 0, 697, 0, 1492, 835,
	0, 88, 88, 87, 58, 1857, 0, 0, 0, 0,
	0, 0, 0, 1648, 0, 0, 0, 0, 0, 0,
	1662, 1663, 1664, 798, 797, 807, 808, 800, 801, 802,
	803, 804, 805, 806, 799, 0, 1674, 810, 0, 865,
	68, 0, 0, 1917, 0, 0, 1679, 0, 1551, 0,
	1680, 1820, 0, 0, 1681, 1682, 0, 0, 1684, 1685,
	1687, 1689, 1691, 0, 1730, 0, 0, 0, 1730, 1730,
	1730, 1730, 1730, 0, 0, 0, 1104, 0, 0, 0,
	0, 88, 1851, 276, 1954, 88, 0, 88, 88, 548,
	64, 0, 0, 0, 88, 0, 337, 0, 88, 88,
	0, 0, 1820, 0, 0, 0, 0, 88, 88, 0,
	0, 88, 88, 65, 88, 66, 67, 493, 0, 0,
	0, 0, 0, 0, 0, 697, 697, 0, 0, 1104,
	0, 0, 1730, 0, 0, 1364, 0, 62, 63, 970,
	0, 0, 1710, 0, 0, 809, 0, 0, 1917, 0,
	0, 865, 0, 0, 0, 88, 0, 2001, 2002, 700,
	0, 1730, 0, 0, 809, 69, 0, 0, 0, 798,
	797, 807, 808, 800, 801, 802, 803, 804, 805, 806,
	799, 0, 0, 810, 697, 697, 0, 921, 87, 0,
	84, 0, 0, 0, 1709, 0, 0, 0, 0, 0,
	0, 0, 88, 1009, 0, 0, 88, 88, 0, 1799,
	278, 0, 0, 283, 0, 0, 285, 0, 697, 0,
	1296, 0, 1022, 1023, 0, 700, 1809, 0, 0, 0,
	2058, 835, 921, 295, 296, 297, 298, 299, 300, 301,
	0, 0, 0, 68, 0, 0, 0, 0, 0, 0,
	0, 2076, 2077, 2078, 0, 0, 1820, 798, 797, 807,
	808, 800, 801, 802, 803, 804, 805, 806, 799, 0,
	0, 810, 0, 1551, 0, 64, 835, 797, 807, 808,
	800, 801, 802, 803, 804, 805, 806, 799, 0, 0,
	810, 0, 1879, 1102, 0, 0, 1104, 0, 65, 0,
	66, 67, 1116, 1147, 338, 1104, 0, 0, 0, 1917,
	1829, 0, 0, 0, 0, 0, 0, 1710, 809, 0,
	0, 0, 0, 0, 0, 0, 0, 2058, 0, 0,
	2131, 0, 0, 1903, 0, 1904, 1905, 1906, 1907, 1908,
	62, 63, 87, 0, 84, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 700, 700, 0, 0, 697, 697,
	2058, 0, 921, 622, 0, 0, 0, 836, 58, 1422,
	1411, 1410, 88, 0, 0, 88, 0, 0, 88, 493,
	0, 1412, 1949, 0, 0, 0, 337, 0, 0, 0,
	0, 0, 0, 0, 1413, 0, 0, 0, 0, 0,
	0, 493, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 700, 700, 0, 0, 0, 0, 0,
	1978, 0, 0, 0, 0, 0, 0, 0, 68, 64,
	0, 0, 1248, 0, 742, 0, 0, 0, 0, 0,
	742, 1988, 742, 0, 0, 0, 0, 700, 793, 0,
	0, 796, 65, 0, 66, 67, 1279, 811, 812, 813,
	814, 815, 816, 817, 809, 794, 795, 792, 818, 819,
	820, 821, 798, 797, 807, 808, 800, 801, 802, 803,
	804, 805, 806, 799, 0, 835, 810, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1406, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	1418, 1897, 0, 0, 0, 0, 697, 2042, 0, 0,
	0, 1424, 1425, 0, 0, 62, 63, 1302, 0, 0,
	0, 0, 0, 1420, 0, 86, 86, 0, 0, 0,
	337, 88, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 809, 0, 493, 2079, 0, 0, 0, 0,
	58, 0, 1414, 1415, 1417, 0, 0, 0, 1416, 88,
	0, 809, 0, 0, 0, 2090, 1722, 0, 493, 1297,
	0, 0, 68, 0, 0, 0, 1552, 700, 700, 0,
	2097, 2098, 2099, 0, 80, 0, 84, 0, 2102, 1362,
	0, 0, 0, 0, 798, 797, 807, 808, 800, 801,
	802, 803, 804, 805, 806, 799, 0, 0, 810, 337,
	0, 0, 0, 0, 86, 0, 87, 0, 84, 0,
	786, 0, 0, 0, 39, 0, 40, 41, 42, 0,
	836, 0, 1422, 1411, 1410, 830, 0, 0, 2138, 2139,
	2140, 0, 0, 1104, 1412, 842, 843, 844, 845, 846,
	847, 0, 0, 0, 0, 0, 0, 1413, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 2151, 62,
	63, 64, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	86, 1478, 0, 0, 65, 0, 66, 67, 86, 1856,
	0, 0, 0, 64, 1423, 1481, 0, 0, 0, 0,
	0, 0, 1925, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 66, 67,
	0, 0, 337, 493, 87, 700, 84, 0, 0, 1499,
	1502, 0, 0, 0, 46, 0, 69, 0, 0, 87,
	0, 84, 0, 0, 2093, 0, 0, 809, 0, 0,
	1898, 44, 0, 1406, 0, 0, 965, 968, 969, 0,
	1523, 0, 0, 1418, 0, 0, 0, 43, 69, 48,
	47, 49, 0, 0, 1424, 1425, 0, 0, 45, 0,
	0, 0, 337, 0, 88, 1534, 1420, 86, 0, 0,
	337, 86, 0, 88, 83, 86, 86, 86, 86, 86,
	0, 786, 0, 0, 0, 0, 0, 1948, 0, 86,
	0, 64, 1549, 1856, 68, 1414, 1415, 1417, 0, 1004,
	1006, 1416, 0, 0, 0, 0, 64, 82, 0, 0,
	1555, 0, 0, 0, 65, 337, 66, 67, 0, 0,
	0, 0, 1594, 0, 865, 0, 68, 493, 86, 65,
	0, 66, 67, 0, 0, 0, 0, 830, 0, 86,
	493, 1033, 337, 0, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 809,
	0, 0, 0, 0, 0, 0, 69, 0, 86, 0,
	836, 0, 1422, 1411, 1410, 0, 742, 0, 0, 0,
	0, 69, 830, 0, 1412, 596, 0, 597, 0, 0,
	0, 62, 63, 0, 0, 587, 588, 1413, 0, 0,
	0, 0, 87, 1110, 1857, 509, 0, 0, 80, 578,
	732, 733, 735, 736, 579, 580, 0, 0, 0, 734,
	737, 550, 551, 62, 63, 0, 0, 0, 0, 569,
	0, 0, 595, 0, 0, 0, 83, 0, 0, 1696,
	0, 0, 0, 0, 68, 83, 0, 1423, 61, 0,
	1706, 0, 0, 0, 0, 0, 567, 731, 0, 68,
	216, 0, 611, 0, 568, 0, 0, 565, 566, 570,
	0, 0, 0, 51, 0, 60, 0, 836, 0, 1422,
	1411, 1410, 0, 0, 0, 0, 609, 0, 0, 64,
	0, 1412, 0, 0, 0, 64, 0, 1924, 0, 835,
	835, 0, 561, 1406, 1413, 0, 0, 0, 88, 0,
	0, 0, 65, 1418, 66, 67, 0, 1856, 65, 0,
	66, 67, 0, 0, 1424, 1425, 0, 0, 0, 576,
	0, 0, 337, 0, 0, 0, 1420, 0, 0, 0,
	0, 62, 63, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 669, 672, 0, 62, 63, 248, 0,
	64, 0, 675, 0, 69, 1414, 1415, 1417, 0, 0,
	69, 1416, 0, 1794, 1795, 1502, 0, 0, 0, 0,
	0, 0, 83, 65, 0, 66, 67, 0, 0, 1552,
	0, 0, 0, 1292, 1293, 1294, 562, 563, 337, 836,
	0, 1422, 1411, 1410, 0, 0, 0, 0, 296, 0,
	1406, 0, 285, 1412, 598, 0, 299, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 1413, 0, 0, 0,
	0, 1424, 1425, 0, 243, 69, 613, 584, 710, 599,
	0, 0, 68, 1420, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 1337, 1339, 0, 1340, 0, 0, 842, 582,
	1343, 0, 1414, 1415, 1417, 0, 0, 337, 1416, 0,
	0, 0, 1346, 1347, 0, 0, 1348, 1349, 0, 1350,
	1351, 600, 610, 606, 607, 604, 605, 603, 602, 601,
	612, 589, 590, 591, 592, 594, 0, 0, 586, 585,
	593, 0, 0, 68, 0, 0, 0, 1423, 0, 0,
	0, 0, 1915, 0, 0, 0, 59, 337, 337, 0,
	0, 0, 1406, 0, 0, 0, 0, 0, 0, 62,
	63, 0, 1418, 61, 0, 62, 63, 608, 0, 0,
	0, 0, 1108, 1424, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 1434, 1918, 51, 0,
	1432, 0, 0, 1965, 0, 0, 0, 88, 879, 0,
	58, 58, 58, 58, 58, 58, 337, 337, 836, 0,
	1422, 1411, 1410, 0, 1414, 1415, 1417, 1431, 0, 0,
	1416, 0, 1412, 0, 0, 0, 1987, 0, 0, 0,
	62, 63, 0, 881, 0, 1413, 1430, 0, 1552, 0,
	337, 0, 0, 0, 1423, 1995, 0, 1996, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1220, 1488, 1489,
	1490, 1232, 0, 0, 0, 0, 1493, 1494, 0, 0,
	0, 1222, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2085, 0, 0, 0, 65, 1110,
	66, 67, 0, 0, 0, 0, 0, 0, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 0, 0,
	0, 0, 0, 1527, 1528, 1529, 1530, 0, 88, 88,
	0, 882, 2071, 493, 0, 2072, 0, 0, 2074, 124,
	880, 1406, 0, 0, 1220, 886, 885, 1221, 1232, 0,
	69, 1418, 0, 0, 0, 2084, 0, 0, 1222, 0,
	0, 0, 1424, 1425, 0, 0, 1423, 0, 1987, 0,
	0, 0, 58, 0, 1420, 0, 0, 0, 0, 0,
	337, 337, 835, 0, 1223, 1224, 1225, 1226, 1227, 1228,
	1229, 1230, 1231, 0, 0, 0, 836, 0, 1422, 1411,
	1410, 0, 0, 1414, 1415, 1417, 0, 0, 0, 1416,
	1412, 0, 2123, 835, 0, 0, 1550, 88, 0, 0,
	0, 0, 0, 1413, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 836, 1221, 1422, 1411, 1410, 0, 0,
	0, 59, 0, 125, 0, 0, 0, 1412, 0, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1413, 0, 1665, 0, 0, 0, 0, 0, 0, 0,
	0, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	0, 0, 0, 1337, 836, 1343, 1422, 1411, 1410, 0,
	0, 0, 88, 88, 0, 0, 0, 0, 1412, 0,
	0, 88, 88, 0, 0, 0, 779, 778, 0, 493,
	0, 1413, 0, 0, 1715, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 780, 62, 63, 0, 0, 1406,
	0, 0, 0, 0, 0, 0, 0, 0, 337, 1418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1424, 1425, 0, 0, 0, 1423, 0, 779, 778, 0,
	0, 0, 1420, 88, 0, 0, 1406, 1218, 0, 0,
	0, 0, 0, 0, 0, 780, 1418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1424, 1425, 0,
	0, 1414, 1415, 1417, 0, 0, 0, 1416, 0, 1420,
	88, 0, 0, 0, 88, 1819, 0, 0, 88, 88,
	88, 88, 88, 0, 0, 1392, 0, 1406, 0, 0,
	88, 0, 88, 0, 0, 0, 88, 1418, 1414, 1415,
	1417, 0, 0, 493, 1416, 0, 0, 781, 1424, 1425,
	0, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 1720, 1803, 1448, 0, 1804, 0, 1805, 0,
	1806, 88, 1807, 1808, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 1414,
	1415, 1417, 0, 0, 0, 1416, 0, 0, 781, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 1720, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 454, 443, 0, 402, 456, 370, 390,
	465, 392, 393, 428, 350, 411, 0, 387, 368, 0,
	0, 0, 373, 343, 382, 344, 371, 404, 0, 369,
	0, 445, 414, 1423, 0, 0, 708, 0, 709, 0,
	0, 0, 0, 493, 406, 447, 701, 702, 401, 429,
	359, 418, 458, 388, 424, 459, 695, 0, 0, 80,
	0, 84, 2065, 0, 0, 0, 0, 0, 0, 0,
	1423, 423, 453, 384, 356, 468, 0, 427, 342, 421,
	0, 0, 348, 707, 464, 451, 378, 377, 0, 0,
	0, 0, 0, 0, 0, 405, 410, 434, 398, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 374, 0, 417, 0, 0, 0, 355, 349, 0,
	403, 1423, 0, 0, 358, 0, 375, 435, 0, 339,
	441, 448, 400, 0, 0, 452, 397, 396, 0, 0,
	88, 0, 0, 0, 389, 335, 64, 466, 455, 693,
	446, 372, 383, 0, 379, 0, 0, 0, 380, 381,
	0, 2065, 416, 430, 0, 0, 0, 0, 0, 65,
	437, 66, 67, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 347, 340, 376, 439, 442, 362, 426,
	352, 385, 432, 386, 408, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1583, 1584, 1585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 710,
	599, 0, 0, 0, 345, 0, 0, 0, 0, 68,
	346, 366, 449, 0, 0, 0, 0, 0, 334, 0,
	0, 0, 694, 0, 0, 425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 365, 716, 717, 714, 715, 713, 712,
	711, 436, 703, 590, 704, 705, 594, 444, 0, 586,
	585, 706, 0, 0, 0, 467, 0, 0, 0, 0,
	0, 0, 0, 391, 341, 395, 0, 0, 0, 0,
	0, 0, 0, 353, 354, 0, 0, 399, 394, 420,
	422, 431, 440, 450, 457, 433, 62, 63, 608, 454,
	443, 0, 402, 456, 370, 390, 465, 392, 393, 428,
	350, 411, 0, 387, 368, 0, 0, 0, 373, 343,
	382, 344, 371, 404, 0, 369, 0, 445, 414, 0,
	0, 0, 463, 0, 419, 0, 0, 0, 0, 0,
	406, 447, 409, 438, 401, 429, 359, 418, 458, 388,
	424, 459, 0, 0, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 423, 453, 384,
	356, 468, 0, 427, 342, 421, 0, 0, 348, 351,
	464, 451, 378, 377, 0, 836, 0, 1422, 1411, 1410,
	0, 405, 410, 434, 398, 0, 0, 0, 0, 1412,
	0, 0, 0, 0, 0, 0, 0, 374, 0, 417,
	0, 0, 1413, 355, 349, 0, 403, 0, 0, 0,
	358, 0, 375, 435, 0, 339, 441, 448, 400, 0,
	0, 452, 397, 396, 0, 0, 0, 0, 0, 0,
	389, 335, 64, 466, 455, 407, 446, 372, 383, 0,
	379, 0, 0, 0, 380, 381, 0, 0, 416, 430,
	0, 0, 0, 0, 0, 65, 437, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	340, 376, 439, 442, 362, 426, 352, 385, 432, 386,
	408, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 1406, 0,
	0, 1739, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1424,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 0, 1747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1414, 1415, 1417, 0, 0, 0, 1416, 0, 0, 0,
	345, 0, 0, 0, 0, 68, 346, 366, 449, 0,
	0, 0, 0, 1748, 1746, 1742, 1741, 0, 0, 0,
	0, 425, 0, 0, 0, 0, 1744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	360, 361, 412, 413, 460, 461, 462, 436, 357, 0,
	363, 364, 0, 444, 0, 0, 0, 415, 0, 0,
	0, 467, 0, 0, 0, 0, 0, 0, 0, 391,
	341, 395, 0, 0, 0, 0, 0, 0, 0, 353,
	354, 0, 0, 399, 394, 420, 422, 431, 440, 450,
	457, 433, 62, 63, 454, 443, 0, 402, 456, 370,
	390, 465, 392, 393, 428, 350, 411, 0, 387, 368,
	0, 0, 0, 373, 343, 382, 344, 371, 404, 0,
	369, 0, 445, 414, 0, 0, 0, 463, 0, 419,
	0, 0, 1423, 0, 0, 406, 447, 409, 438, 401,
	429, 359, 418, 458, 388, 424, 459, 0, 0, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 423, 453, 384, 356, 468, 0, 427, 342,
	421, 0, 0, 348, 351, 464, 451, 378, 377, 0,
	0, 0, 0, 0, 0, 0, 405, 410, 434, 398,
	0, 0, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 0, 374, 0, 417, 0, 0, 0, 355, 349,
	0, 403, 0, 0, 0, 358, 0, 375, 435, 0,
	339, 441, 448, 400, 0, 0, 452, 397, 396, 0,
	0, 1520, 0, 0, 0, 389, 335, 64, 466, 455,
	407, 446, 372, 383, 0, 379, 0, 0, 0, 380,
	381, 0, 0, 416, 430, 0, 0, 0, 0, 0,
	65, 437, 66, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 340, 376, 439, 442, 362,
	426, 352, 385, 432, 386, 408, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1129, 1135, 1133, 0,
	0, 1130, 69, 0, 1128, 0, 1864, 1137, 0, 0,
	1136, 1122, 1132, 1134, 1131, 1521, 0, 0, 0, 1121,
	0, 1139, 1138, 1140, 1119, 1142, 0, 0, 0, 1146,
	1143, 1145, 1144, 0, 1141, 0, 0, 0, 0, 0,
	0, 1747, 0, 1123, 1124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1125, 1127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	68, 346, 366, 449, 0, 0, 0, 0, 1748, 1746,
	0, 0, 0, 0, 0, 0, 425, 0, 0, 0,
	0, 1744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 365, 360, 361, 412, 413, 460,
	461, 462, 436, 357, 0, 363, 364, 0, 444, 0,
	0, 0, 415, 0, 0, 0, 467, 0, 0, 0,
	0, 0, 0, 0, 391, 341, 395, 0, 0, 0,
	0, 0, 0, 0, 353, 354, 0, 0, 399, 394,
	420, 422, 431, 440, 450, 457, 433, 62, 63, 454,
	443, 0, 402, 456, 370, 390, 465, 392, 393, 428,
	350, 411, 0, 387, 368, 0, 0, 0, 373, 343,
	382, 344, 371, 404, 0, 369, 0, 445, 414, 0,
	0, 0, 463, 0, 419, 0, 0, 0, 0, 0,
	406, 447, 409, 438, 401, 429, 359, 418, 458, 388,
	424, 459, 0, 0, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 423, 453, 384,
	356, 468, 0, 427, 342, 421, 0, 0, 348, 351,
	464, 451, 378, 377, 0, 0, 0, 0, 0, 0,
	0, 405, 410, 434, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 374, 0, 417,
	0, 0, 0, 355, 349, 0, 403, 0, 0, 0,
	358, 0, 375, 435, 0, 339, 441, 448, 400, 0,
	0, 452, 397, 396, 0, 0, 0, 0, 0, 0,
	389, 335, 64, 466, 455, 407, 446, 372, 383, 0,
	379, 0, 0, 0, 380, 381, 0, 0, 416, 430,
	0, 0, 0, 0, 0, 65, 437, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	340, 376, 439, 442, 362, 426, 352, 385, 432, 386,
	408, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 0, 0, 0, 0, 68, 346, 366, 449, 0,
	0, 0, 0, 1748, 1746, 0, 0, 0, 0, 0,
	0, 425, 0, 0, 0, 0, 1744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	360, 361, 412, 413, 460, 461, 462, 436, 357, 0,
	363, 364, 0, 444, 0, 0, 0, 415, 0, 0,
	0, 467, 0, 0, 0, 0, 0, 0, 0, 391,
	341, 395, 0, 0, 0, 0, 0, 0, 0, 353,
	354, 0, 0, 399, 394, 420, 422, 431, 440, 450,
	457, 433, 62, 63, 454, 443, 0, 402, 456, 370,
	390, 465, 392, 393, 428, 350, 411, 0, 387, 368,
	0, 0, 0, 373, 343, 382, 344, 371, 404, 0,
	369, 0, 445, 414, 0, 147, 0, 463, 0, 419,
	0, 0, 0, 0, 0, 406, 447, 409, 438, 401,
	429, 359, 418, 458, 388, 424, 459, 0, 0, 0,
	80, 0, 84, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 423, 453, 384, 356, 468, 0, 427, 342,
	421, 0, 0, 348, 351, 464, 451, 378, 377, 0,
	0, 0, 0, 0, 0, 0, 405, 410, 434, 398,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 374, 0, 417, 0, 0, 0, 355, 349,
	0, 403, 132, 0, 158, 358, 0, 375, 435, 0,
	339, 441, 448, 400, 0, 0, 452, 397, 396, 0,
	0, 0, 0, 0, 0, 389, 335, 64, 466, 455,
	407, 446, 372, 383, 0, 379, 0, 148, 0, 380,
	381, 0, 0, 416, 430, 0, 0, 0, 0, 0,
	65, 437, 66, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 340, 376, 439, 442, 362,
	426, 352, 385, 432, 386, 408, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 0, 178, 179, 0, 180, 181, 182, 184,
	183, 149, 150, 151, 152, 153, 157, 155, 154, 156,
	126, 128, 0, 124, 127, 133, 129, 130, 131, 145,
	134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 146, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	68, 346, 366, 449, 0, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 365, 360, 361, 412, 413, 460,
	461, 462, 436, 357, 0, 363, 364, 0, 444, 0,
	0, 0, 415, 0, 0, 0, 467, 125, 0, 0,
	0, 0, 0, 0, 391, 341, 395, 0, 0, 0,
	0, 0, 0, 0, 353, 354, 0, 0, 399, 394,
	420, 422, 431, 440, 450, 457, 433, 62, 63, 454,
	443, 0, 402, 456, 370, 390, 465, 392, 393, 428,
	350, 411, 0, 387, 368, 0, 0, 0, 373, 343,
	382, 344, 371, 404, 0, 369, 0, 445, 414, 0,
	147, 0, 463, 0, 419, 0, 0, 0, 0, 0,
	406, 447, 409, 438, 401, 429, 359, 418, 458, 388,
	424, 459, 0, 0, 0, 51, 0, 961, 51, 962,
	0, 0, 0, 0, 0, 0, 0, 423, 453, 384,
	356, 468, 0, 427, 342, 421, 0, 0, 348, 351,
	464, 451, 378, 377, 0, 0, 0, 0, 0, 0,
	0, 405, 410, 434, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 374, 0, 417,
	0, 0, 0, 355, 349, 0, 403, 132, 0, 158,
	358, 0, 375, 435, 0, 339, 441, 448, 400, 0,
	0, 452, 397, 396, 0, 0, 0, 0, 0, 0,
	389, 335, 64, 466, 455, 407, 446, 372, 383, 0,
	379, 0, 148, 0, 380, 381, 0, 0, 416, 430,
	0, 0, 0, 0, 0, 65, 437, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	340, 376, 439, 442, 362, 426, 352, 385, 432, 386,
	408, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 0, 178, 179,
	0, 180, 181, 182, 184, 183, 149, 150, 151, 152,
	153, 157, 155, 154, 156, 126, 128, 0, 124, 127,
	133, 129, 130, 131, 145, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 470, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 0, 0, 0, 0,
	345, 0, 0, 0, 0, 68, 346, 366, 449, 0,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	360, 361, 412, 413, 460, 461, 462, 436, 357, 0,
	363, 364, 0, 444, 0, 0, 0, 415, 0, 0,
	0, 467, 125, 0, 0, 0, 0, 0, 0, 391,
	341, 395, 0, 0, 0, 0, 0, 0, 0, 353,
	354, 0, 0, 399, 394, 420, 422, 431, 440, 450,
	457, 433, 62, 63, 454, 443, 0, 402, 456, 370,
	390, 465, 392, 393, 428, 350, 411, 0, 387, 368,
	0, 0, 0, 373, 343, 382, 344, 371, 404, 0,
	369, 0, 445, 414, 0, 147, 0, 463, 0, 419,
	0, 0, 0, 0, 0, 406, 447, 409, 438, 401,
	429, 359, 418, 458, 388, 424, 459, 0, 489, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 423, 453, 384, 356, 468, 0, 427, 342,
	421, 0, 0, 348, 351, 464, 451, 378, 377, 0,
	0, 0, 0, 0, 0, 0, 405, 410, 434, 398,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 374, 0, 417, 0, 0, 0, 355, 349,
	0, 403, 1068, 0, 158, 358, 0, 375, 435, 0,
	339, 441, 448, 400, 0, 0, 452, 397, 396, 0,
	0, 0, 0, 0, 0, 389, 335, 64, 466, 455,
	407, 446, 372, 383, 0, 379, 0, 1071, 0, 380,
	381, 0, 0, 416, 430, 0, 0, 0, 0, 0,
	65, 437, 66, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 340, 376, 439, 442, 362,
	426, 352, 385, 432, 386, 408, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 0, 178, 179, 0, 180, 181, 182, 184,
	183, 149, 1064, 151, 152, 1072, 157, 155, 154, 156,
	126, 128, 0, 124, 1067, 133, 129, 130, 131, 1070,
	1069, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	68, 346, 366, 449, 0, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 365, 360, 361, 412, 413, 460,
	461, 462, 436, 357, 0, 363, 364, 0, 444, 0,
	0, 0, 415, 0, 0, 0, 467, 125, 0, 0,
	0, 0, 0, 0, 391, 341, 395, 0, 0, 0,
	0, 0, 0, 0, 353, 354, 0, 0, 399, 394,
	420, 422, 431, 440, 450, 457, 433, 62, 63, 454,
	443, 0, 402, 456, 370, 390, 465, 392, 393, 428,
	350, 411, 0, 387, 368, 0, 0, 0, 373, 343,
	382, 344, 371, 404, 0, 369, 0, 445, 414, 0,
	0, 0, 463, 0, 419, 0, 0, 0, 0, 0,
	406, 447, 409, 438, 401, 429, 359, 418, 458, 388,
	424, 459, 0, 0, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 423, 453, 384,
	356, 468, 0, 427, 342, 421, 0, 0, 348, 351,
	464, 451, 378, 377, 0, 0, 0, 0, 0, 0,
	0, 405, 410, 434, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1802, 0, 374, 0, 417,
	0, 0, 0, 355, 349, 0, 403, 0, 0, 0,
	358, 0, 375, 435, 0, 339, 441, 448, 400, 0,
	0, 452, 397, 396, 0, 0, 0, 0, 0, 0,
	389, 335, 64, 466, 455, 407, 446, 372, 383, 0,
	379, 0, 0, 0, 380, 381, 0, 0, 416, 430,
	0, 0, 0, 0, 0, 65, 437, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	340, 376, 439, 442, 362, 426, 352, 385, 432, 386,
	408, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 0, 0, 0, 0, 68, 346, 366, 449, 0,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	360, 361, 412, 413, 460, 461, 462, 436, 357, 0,
	363, 364, 0, 444, 0, 0, 0, 415, 0, 0,
	0, 467, 0, 0, 0, 0, 0, 0, 0, 391,
	341, 395, 0, 0, 0, 0, 0, 0, 0, 353,
	354, 0, 0, 399, 394, 420, 422, 431, 440, 450,
	457, 433, 62, 63, 454, 443, 0, 402, 456, 370,
	390, 465, 392, 393, 428, 350, 411, 0, 387, 368,
	0, 0, 0, 373, 343, 382, 344, 371, 404, 0,
	369, 0, 445, 414, 0, 0, 0, 463, 0, 419,
	0, 0, 0, 0, 0, 406, 447, 409, 438, 401,
	429, 359, 418, 458, 388, 424, 459, 0, 0, 0,
	80, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 423, 453, 384, 356, 468, 0, 427, 342,
	421, 0, 0, 348, 351, 464, 451, 378, 377, 0,
	0, 0, 0, 0, 0, 0, 405, 410, 434, 398,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 374, 0, 417, 0, 0, 0, 355, 349,
	0, 403, 0, 0, 0, 358, 0, 375, 435, 0,
	339, 441, 448, 400, 0, 0, 452, 397, 396, 0,
	0, 0, 0, 0, 0, 389, 335, 64, 466, 455,
	407, 446, 372, 383, 0, 379, 0, 0, 0, 380,
	381, 0, 0, 416, 430, 0, 0, 0, 0, 0,
	65, 437, 66, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 340, 376, 439, 442, 362,
	426, 352, 385, 432, 386, 408, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	68, 346, 366, 449, 0, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 365, 360, 361, 412, 413, 460,
	461, 462, 436, 357, 0, 363, 364, 0, 444, 0,
	0, 0, 415, 0, 0, 0, 467, 0, 0, 0,
	0, 0, 0, 0, 391, 341, 395, 0, 0, 0,
	0, 0, 0, 0, 353, 354, 0, 0, 399, 394,
	420, 422, 431, 440, 450, 457, 433, 62, 63, 454,
	443, 0, 402, 456, 370, 390, 465, 392, 393, 428,
	350, 411, 0, 387, 368, 0, 0, 0, 373, 343,
	382, 344, 371, 404, 0, 369, 0, 445, 414, 0,
	0, 0, 463, 0, 419, 0, 0, 0, 0, 0,
	406, 447, 409, 438, 401, 429, 359, 418, 458, 388,
	424, 459, 0, 0, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 423, 453, 384,
	356, 468, 0, 427, 342, 421, 0, 0, 348, 351,
	464, 451, 378, 377, 687, 0, 0, 0, 0, 0,
	0, 405, 410, 434, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 374, 0, 417,
	0, 0, 0, 355, 349, 0, 403, 0, 0, 0,
	358, 0, 375, 435, 0, 339, 441, 448, 400, 0,
	0, 452, 397, 396, 0, 0, 0, 0, 0, 0,
	389, 335, 64, 466, 455, 407, 446, 372, 383, 0,
	379, 0, 0, 0, 380, 381, 0, 0, 416, 430,
	0, 0, 0, 0, 0, 65, 437, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	340, 376, 439, 442, 362, 426, 352, 385, 432, 386,
	408, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 0, 0, 0, 0, 68, 346, 366, 449, 0,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	360, 361, 412, 413, 460, 461, 462, 436, 357, 0,
	363, 364, 0, 444, 0, 0, 0, 415, 0, 0,
	0, 467, 0, 0, 0, 0, 0, 0, 0, 391,
	341, 395, 0, 0, 0, 0, 0, 0, 0, 353,
	354, 0, 0, 399, 394, 420, 422, 431, 440, 450,
	457, 433, 62, 63, 454, 443, 0, 402, 456, 370,
	390, 465, 392, 393, 428, 350, 411, 0, 387, 368,
	0, 0, 0, 373, 343, 382, 344, 371, 404, 0,
	369, 0, 445, 414, 0, 0, 0, 463, 0, 419,
	0, 0, 0, 0, 0, 406, 447, 409, 438, 401,
	429, 359, 418, 458, 388, 424, 459, 0, 0, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 423, 453, 384, 356, 468, 0, 427, 342,
	421, 0, 0, 348, 351, 464, 451, 378, 377, 0,
	0, 0, 0, 0, 0, 0, 405, 410, 434, 398,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 374, 0, 417, 0, 0, 0, 355, 349,
	0, 403, 0, 0, 0, 358, 0, 375, 435, 0,
	339, 441, 448, 400, 0, 0, 452, 397, 396, 0,
	0, 0, 0, 0, 0, 389, 335, 64, 466, 455,
	407, 446, 372, 383, 0, 379, 0, 0, 0, 380,
	381, 0, 0, 416, 430, 0, 0, 0, 0, 0,
	65, 437, 66, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 340, 376, 439, 442, 362,
	426, 352, 385, 432, 386, 408, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	68, 346, 366, 449, 0, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 365, 360, 361, 412, 413, 460,
	461, 462, 436, 357, 0, 363, 364, 0, 444, 0,
	0, 0, 415, 0, 0, 0, 467, 0, 0, 0,
	0, 0, 0, 0, 391, 341, 395, 0, 0, 0,
	0, 0, 0, 0, 353, 354, 0, 0, 399, 394,
	420, 422, 431, 440, 450, 457, 433, 62, 63, 454,
	2062, 0, 402, 456, 370, 390, 465, 392, 393, 428,
	350, 411, 0, 387, 368, 0, 0, 0, 373, 343,
	382, 344, 371, 404, 0, 369, 0, 445, 414, 0,
	0, 0, 463, 0, 419, 0, 0, 0, 0, 0,
	406, 447, 409, 438, 401, 429, 359, 418, 458, 388,
	424, 459, 509, 0, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 423, 453, 384,
	356, 468, 0, 427, 342, 421, 0, 0, 348, 351,
	464, 451, 378, 377, 0, 836, 0, 1422, 1411, 1410,
	0, 405, 410, 434, 398, 0, 0, 0, 0, 1412,
	0, 0, 0, 0, 0, 0, 0, 374, 0, 417,
	0, 0, 1413, 355, 349, 0, 403, 0, 0, 0,
	358, 0, 375, 435, 0, 339, 441, 448, 400, 0,
	0, 452, 397, 396, 0, 0, 0, 0, 0, 0,
	389, 0, 64, 466, 455, 407, 446, 372, 383, 0,
	379, 0, 0, 0, 380, 381, 0, 0, 416, 430,
	0, 0, 0, 0, 0, 65, 437, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	340, 376, 439, 442, 362, 426, 352, 385, 432, 386,
	408, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 1921, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1424,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1414, 1415, 1417, 0, 0, 0, 1416, 0, 0, 0,
	345, 0, 0, 0, 0, 68, 346, 366, 449, 0,
	0, 0, 0, 0, 1720, 0, 0, 0, 0, 0,
	0, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	360, 361, 412, 413, 460, 461, 462, 436, 357, 0,
	363, 364, 0, 444, 0, 0, 0, 415, 0, 0,
	0, 467, 0, 0, 0, 0, 0, 0, 0, 391,
	341, 395, 0, 0, 0, 0, 0, 0, 0, 353,
	354, 0, 0, 399, 394, 420, 422, 431, 440, 450,
	457, 433, 62, 63, 454, 443, 0, 402, 456, 370,
	390, 465, 392, 393, 428, 350, 411, 0, 387, 368,
	0, 0, 0, 373, 343, 382, 344, 371, 404, 0,
	369, 0, 445, 414, 0, 0, 0, 463, 0, 419,
	0, 0, 1423, 0, 0, 406, 447, 409, 438, 401,
	429, 359, 418, 458, 388, 424, 459, 0, 0, 0,
	80, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 423, 453, 384, 356, 468, 0, 427, 342,
	421, 0, 0, 348, 351, 464, 451, 378, 377, 0,
	0, 0, 0, 0, 0, 0, 405, 410, 434, 398,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 374, 0, 417, 0, 0, 0, 355, 349,
	0, 403, 0, 0, 0, 358, 0, 375, 435, 0,
	339, 441, 448, 400, 0, 0, 452, 397, 396, 0,
	0, 0, 0, 0, 0, 389, 0, 64, 466, 455,
	407, 446, 372, 383, 0, 379, 0, 0, 0, 380,
	381, 0, 0, 416, 430, 0, 0, 0, 0, 0,
	65, 437, 66, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 340, 376, 439, 442, 362,
	426, 352, 385, 432, 386, 408, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	68, 346, 366, 449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 365, 360, 361, 412, 413, 460,
	461, 462, 436, 357, 0, 363, 364, 0, 444, 0,
	0, 0, 415, 0, 0, 0, 467, 0, 0, 0,
	0, 0, 0, 0, 391, 341, 395, 0, 0, 0,
	0, 0, 0, 0, 353, 354, 0, 0, 399, 394,
	420, 422, 431, 440, 450, 457, 433, 62, 63, 454,
	443, 0, 402, 456, 370, 390, 465, 392, 393, 428,
	350, 411, 0, 387, 368, 0, 0, 0, 373, 343,
	382, 344, 371, 404, 0, 369, 0, 445, 414, 0,
	0, 0, 463, 0, 419, 0, 0, 0, 0, 0,
	406, 447, 409, 438, 401, 429, 359, 418, 458, 388,
	424, 459, 0, 0, 0, 87, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 423, 453, 384,
	356, 468, 0, 427, 342, 421, 0, 0, 348, 351,
	464, 451, 378, 377, 0, 0, 0, 0, 0, 0,
	0, 405, 410, 434, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 374, 0, 417,
	0, 0, 0, 355, 349, 0, 403, 0, 0, 0,
	358, 0, 375, 435, 0, 339, 441, 448, 400, 0,
	0, 452, 397, 396, 0, 0, 0, 0, 0, 0,
	389, 0, 64, 466, 455, 407, 446, 372, 383, 0,
	379, 0, 0, 0, 380, 381, 0, 0, 416, 430,
	0, 0, 0, 0, 0, 65, 437, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	340, 376, 439, 442, 362, 426, 352, 385, 432, 386,
	408, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 0, 0, 0, 0, 68, 346, 366, 449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	360, 361, 412, 413, 460, 461, 462, 436, 357, 0,
	363, 364, 0, 444, 0, 0, 0, 415, 0, 0,
	0, 467, 0, 0, 0, 0, 0, 0, 0, 391,
	341, 395, 0, 0, 0, 0, 0, 0, 0, 353,
	354, 0, 0, 399, 394, 420, 422, 431, 440, 450,
	457, 433, 62, 63, 454, 443, 0, 402, 456, 370,
	390, 465, 392, 393, 428, 350, 411, 0, 387, 368,
	0, 0, 0, 373, 343, 382, 344, 371, 404, 0,
	369, 0, 445, 414, 0, 0, 0, 463, 0, 419,
	0, 0, 0, 0, 0, 406, 447, 409, 438, 401,
	429, 359, 418, 458, 388, 424, 459, 0, 0, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 423, 453, 384, 356, 468, 0, 427, 342,
	421, 0, 0, 348, 351, 464, 451, 378, 377, 0,
	0, 0, 0, 0, 0, 0, 405, 410, 434, 398,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 374, 0, 417, 0, 0, 0, 355, 349,
	0, 403, 0, 0, 0, 358, 0, 375, 435, 0,
	339, 441, 448, 400, 0, 0, 452, 397, 396, 0,
	0, 0, 0, 0, 0, 389, 0, 64, 466, 455,
	407, 446, 372, 383, 0, 379, 0, 0, 0, 380,
	381, 0, 0, 416, 430, 0, 0, 0, 0, 0,
	65, 437, 66, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 340, 376, 439, 442, 362,
	426, 352, 385, 432, 386, 408, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 0, 0, 0, 0,
	68, 346, 366, 449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 365, 360, 361, 412, 413, 460,
	461, 462, 436, 357, 0, 363, 364, 0, 444, 0,
	0, 0, 415, 0, 0, 0, 467, 0, 0, 0,
	0, 0, 0, 0, 391, 341, 395, 0, 0, 0,
	0, 0, 553, 0, 353, 354, 0, 0, 399, 394,
	420, 422, 431, 440, 450, 457, 433, 62, 63, 552,
	0, 0, 0, 0, 549, 836, 0, 1422, 1411, 1410,
	0, 596, 0, 597, 0, 0, 0, 0, 0, 1412,
	0, 587, 588, 0, 0, 0, 0, 0, 0, 0,
	0, 509, 1413, 0, 80, 578, 732, 733, 735, 736,
	579, 580, 0, 0, 0, 734, 737, 550, 551, 554,
	0, 0, 0, 0, 547, 569, 0, 0, 595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 779, 778,
	0, 0, 567, 731, 0, 0, 0, 0, 611, 0,
	568, 0, 0, 1118, 566, 570, 780, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 609, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 1120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1406, 0,
	0, 0, 0, 0, 65, 0, 66, 67, 1418, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 0, 1424,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	1414, 1415, 1417, 1129, 1135, 1133, 1416, 0, 1130, 781,
	0, 1128, 0, 0, 1137, 0, 0, 1136, 1122, 1132,
	1134, 1131, 1126, 563, 1757, 0, 1121, 0, 1139, 1138,
	1140, 1119, 1142, 0, 0, 0, 1146, 1143, 1145, 1144,
	598, 1141, 0, 0, 0, 0, 0, 0, 0, 0,
	1123, 1124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 613, 584, 710, 599, 836, 0, 1422, 1411,
	1410, 1125, 1127, 0, 68, 147, 0, 0, 61, 0,
	1412, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 1413, 0, 582, 0, 0, 0, 0,
	0, 1434, 0, 51, 0, 1432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 610, 606,
	607, 604, 605, 603, 602, 601, 612, 589, 590, 591,
	592, 594, 1431, 0, 586, 585, 593, 0, 0, 779,
	778, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1430, 1423, 0, 0, 0, 0, 780, 0, 0,
	0, 0, 132, 0, 158, 275, 0, 0, 0, 0,
	0, 62, 63, 608, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 65, 0, 66, 67, 0, 0, 0,
	1424, 1425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1414, 1415, 1417, 0, 69, 0, 1416, 0, 0,
	781, 0, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 0, 178, 179, 1720, 180, 181, 182, 184,
	183, 149, 150, 151, 152, 153, 157, 155, 154, 156,
	126, 128, 0, 124, 127, 133, 129, 130, 131, 145,
	134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 146, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 0, 147, 0, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 1434, 0,
	51, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 1430, 0,
	0, 0, 0, 1423, 0, 0, 0, 0, 0, 132,
	0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 63, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 0, 66, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 0,
	178, 179, 0, 180, 181, 182, 184, 183, 149, 150,
	151, 152, 153, 157, 155, 154, 156, 126, 128, 0,
	124, 127, 133, 129, 130, 131, 145, 134, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 146, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 0, 0,
	0, 0, 0, 553, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	552, 0, 0, 59, 0, 549, 0, 0, 0, 0,
	0, 0, 596, 0, 597, 0, 0, 0, 0, 0,
	0, 0, 587, 588, 0, 0, 0, 0, 0, 0,
	1963, 0, 509, 0, 0, 80, 578, 732, 733, 735,
	736, 579, 580, 0, 0, 0, 734, 737, 550, 551,
	554, 1964, 0, 0, 125, 547, 569, 0, 0, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 567, 731, 0, 0, 62, 63, 611,
	0, 568, 0, 0, 565, 566, 570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 609, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 561,
	0, 0, 0, 0, 0, 0, 0, 553, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 66, 67, 0,
	0, 0, 1098, 0, 552, 0, 576, 0, 0, 549,
	0, 0, 0, 0, 0, 0, 596, 0, 597, 0,
	0, 0, 0, 0, 0, 0, 587, 588, 0, 0,
	0, 0, 0, 0, 0, 0, 509, 0, 0, 80,
	578, 732, 733, 735, 736, 579, 580, 69, 0, 0,
	734, 737, 550, 551, 554, 0, 0, 0, 0, 547,
	569, 0, 0, 595, 0, 836, 0, 1422, 1411, 1410,
	0, 0, 0, 562, 563, 0, 0, 0, 0, 1412,
	0, 0, 0, 0, 0, 0, 0, 567, 731, 1103,
	0, 598, 1413, 611, 0, 568, 0, 0, 565, 566,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 584, 710, 599, 609, 0, 0,
	0, 0, 0, 0, 0, 68, 64, 0, 0, 0,
	0, 0, 0, 561, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 582, 1993, 1994, 65,
	0, 66, 67, 0, 0, 0, 0, 0, 0, 0,
	576, 0, 0, 0, 0, 0, 0, 0, 600, 610,
	606, 607, 604, 605, 603, 602, 601, 612, 589, 590,
	591, 592, 594, 0, 0, 586, 585, 593, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1406, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1424,
	1425, 0, 62, 63, 608, 0, 0, 562, 563, 0,
	0, 1420, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1414, 1415, 1417, 0, 0, 0, 1416, 613, 584, 710,
	599, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 0, 836, 0, 1422, 1411, 1410, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 1412, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1413, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 610, 606, 607, 604, 605, 603, 602,
	601, 612, 589, 590, 591, 592, 594, 0, 0, 586,
	585, 593, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 552,
	0, 0, 0, 0, 549, 2126, 0, 0, 0, 0,
	0, 596, 0, 597, 0, 0, 62, 63, 608, 0,
	0, 587, 588, 0, 0, 0, 0, 0, 0, 0,
	0, 509, 0, 994, 80, 578, 732, 733, 735, 736,
	579, 580, 0, 0, 0, 734, 737, 550, 551, 554,
	0, 0, 1423, 0, 547, 569, 1406, 0, 595, 0,
	0, 0, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1424, 1425, 0,
	0, 0, 567, 731, 0, 0, 0, 0, 611, 1420,
	568, 0, 0, 565, 566, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 609, 0, 0, 0, 0, 0, 1414, 1415,
	1417, 64, 0, 0, 1416, 0, 0, 0, 561, 0,
	0, 0, 0, 0, 0, 0, 553, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 66, 67, 0, 0,
	0, 0, 0, 552, 0, 576, 0, 0, 549, 0,
	0, 0, 0, 0, 0, 596, 0, 597, 0, 0,
	0, 0, 0, 0, 0, 587, 588, 0, 0, 0,
	0, 0, 0, 0, 0, 509, 0, 0, 80, 578,
	732, 733, 735, 736, 579, 580, 69, 0, 0, 734,
	737, 550, 551, 554, 0, 0, 0, 0, 547, 569,
	0, 0, 595, 0, 836, 0, 1422, 1411, 1410, 0,
	0, 0, 562, 563, 0, 0, 0, 0, 1412, 0,
	0, 0, 0, 0, 0, 0, 567, 731, 1103, 0,
	598, 1413, 611, 0, 568, 0, 0, 565, 566, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 613, 584, 710, 599, 609, 0, 0, 0,
	1423, 0, 0, 0, 68, 64, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 582, 2121, 0, 65, 0,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 0, 0, 0, 0, 0, 600, 610, 606,
	607, 604, 605, 603, 602, 601, 612, 589, 590, 591,
	592, 594, 0, 0, 586, 585, 593, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1406, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1424, 1425,
	0, 62, 63, 608, 0, 0, 562, 563, 0, 0,
	1420, 836, 0, 1422, 1411, 1410, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 1412, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1413, 1414,
	1415, 1417, 0, 0, 0, 1416, 613, 584, 710, 599,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 82, 1422, 1411, 1410, 0, 0, 0, 0, 582,
	0, 0, 0, 0, 1412, 0, 0, 0, 0, 0,
	0, 0, 0, 1916, 0, 0, 0, 1413, 0, 0,
	0, 600, 610, 606, 607, 604, 605, 603, 602, 601,
	612, 589, 590, 591, 592, 594, 0, 0, 586, 585,
	593, 0, 0, 0, 0, 0, 836, 0, 0, 553,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1406, 0, 552, 0, 0, 0,
	0, 549, 1822, 0, 1418, 62, 63, 608, 596, 0,
	597, 0, 0, 0, 0, 1424, 1425, 0, 587, 588,
	0, 0, 0, 0, 0, 0, 0, 1420, 509, 0,
	0, 80, 578, 732, 733, 735, 736, 579, 580, 0,
	0, 1423, 734, 737, 550, 551, 554, 0, 0, 0,
	0, 547, 569, 1406, 0, 595, 1414, 1415, 1417, 0,
	0, 0, 1416, 1418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1424, 1425, 0, 0, 0, 567,
	731, 0, 0, 0, 0, 611, 1420, 568, 0, 0,
	565, 566, 570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 609,
	0, 0, 0, 0, 0, 1414, 1415, 1417, 64, 0,
	0, 1416, 0, 0, 0, 561, 0, 0, 0, 0,
	0, 0, 0, 553, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 66, 67, 0, 0, 0, 0, 0,
	552, 0, 576, 0, 0, 549, 0, 0, 0, 0,
	0, 0, 596, 0, 597, 0, 0, 0, 0, 0,
	0, 0, 587, 588, 0, 0, 0, 0, 0, 0,
	0, 0, 509, 0, 0, 80, 578, 732, 733, 735,
	736, 579, 580, 69, 0, 0, 734, 737, 550, 551,
	554, 0, 0, 0, 0, 547, 569, 0, 1423, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 567, 731, 0, 0, 598, 0, 611,
	0, 568, 0, 0, 565, 566, 570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 613,
	584, 710, 599, 609, 0, 0, 0, 1423, 0, 0,
	0, 68, 64, 0, 0, 0, 0, 0, 0, 561,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 582, 0, 0, 65, 0, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 576, 0, 0, 0,
	0, 0, 0, 0, 600, 610, 606, 607, 604, 605,
	603, 602, 601, 612, 589, 590, 591, 592, 594, 0,
	0, 586, 585, 593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 63,
	608, 0, 0, 562, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 584, 710, 599, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 582, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 610,
	606, 607, 604, 605, 603, 602, 601, 612, 589, 590,
	591, 592, 594, 0, 0, 586, 585, 593, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 552, 0, 0, 0, 0,
	549, 0, 0, 0, 0, 0, 0, 596, 0, 597,
	0, 0, 62, 63, 608, 0, 0, 587, 588, 0,
	0, 0, 0, 0, 0, 0, 0, 535, 0, 0,
	80, 578, 537, 538, 539, 541, 579, 580, 0, 0,
	0, 543, 542, 550, 551, 554, 0, 0, 0, 0,
	547, 569, 0, 0, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 567, 540,
	0, 0, 0, 0, 611, 0, 568, 0, 0, 565,
	566, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 609, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 561, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 0, 66, 67, 1034, 1035, 1036, 0, 0, 0,
	0, 576, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 0, 597, 0, 0, 0, 0, 0, 0,
	0, 587, 588, 0, 0, 0, 0, 0, 0, 0,
	0, 509, 0, 0, 80, 578, 732, 733, 735, 736,
	579, 580, 69, 0, 0, 734, 737, 550, 551, 0,
	0, 0, 0, 0, 0, 569, 0, 0, 595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 567, 731, 0, 0, 598, 0, 611, 0,
	568, 0, 0, 565, 566, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 584,
	545, 599, 609, 0, 0, 0, 0, 0, 0, 0,
	68, 64, 0, 0, 0, 0, 0, 0, 561, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 582, 0, 0, 65, 0, 66, 67, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 0, 0,
	0, 0, 0, 600, 610, 606, 607, 604, 605, 603,
	602, 601, 612, 589, 590, 591, 592, 594, 0, 0,
	586, 585, 593, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 63, 608,
	0, 0, 562, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 613, 584, 710, 599, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 610, 606,
	607, 604, 605, 603, 602, 601, 612, 589, 590, 591,
	592, 594, 0, 0, 586, 585, 593, 0, 0, 0,
	596, 0, 597, 0, 0, 0, 0, 0, 0, 0,
	587, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	509, 0, 0, 80, 578, 732, 733, 735, 736, 579,
	580, 62, 63, 608, 734, 737, 550, 551, 0, 0,
	0, 0, 0, 0, 569, 0, 0, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 567, 731, 0, 0, 0, 0, 611, 0, 568,
	0, 0, 565, 566, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 576, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 597, 0, 0, 0,
	0, 0, 0, 0, 587, 588, 0, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 0, 80, 578, 732,
	733, 735, 736, 579, 580, 69, 0, 0, 734, 737,
	550, 551, 0, 0, 0, 0, 0, 0, 569, 0,
	0, 595, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 567, 731, 0, 0, 598,
	0, 611, 0, 568, 0, 0, 565, 566, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 613, 584, 710, 599, 609, 0, 0, 0, 0,
	0, 0, 0, 68, 64, 0, 0, 0, 0, 0,
	0, 561, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 582, 0, 0, 65, 0, 66,
	67, 0, 0, 0, 0, 0, 0, 0, 576, 0,
	0, 0, 0, 0, 0, 0, 600, 610, 606, 607,
	604, 605, 603, 602, 601, 612, 589, 590, 591, 592,
	594, 0, 0, 586, 585, 593, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 63, 608, 0, 0, 562, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 613, 584, 710, 599, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 610, 606, 607, 604, 605, 603, 602, 601, 612,
	589, 590, 591, 592, 594, 0, 0, 586, 585, 593,
	0, 0, 0, 596, 0, 597, 0, 0, 0, 0,
	0, 0, 0, 587, 588, 0, 0, 0, 0, 0,
	0, 0, 0, 509, 0, 0, 80, 578, 732, 733,
	784, 785, 579, 580, 62, 63, 608, 734, 737, 550,
	551, 0, 0, 0, 0, 0, 0, 569, 0, 0,
	595, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 567, 731, 0, 0, 0, 0,
	611, 0, 568, 0, 0, 565, 566, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 609, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	561, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 66, 67,
	0, 0, 0, 0, 0, 0, 0, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 584, 710, 599, 132, 0,
	1030, 0, 0, 0, 0, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 582, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	610, 606, 607, 604, 605, 603, 602, 601, 612, 589,
	590, 591, 592, 594, 0, 0, 586, 585, 593, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 63, 608, 0, 0, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 0, 178,
	179, 0, 180, 181, 182, 184, 183, 149, 150, 151,
	152, 153, 157, 155, 154, 156, 126, 128, 0, 124,
	127, 133, 129, 130, 131, 145, 134, 135, 136, 137,
	138, 139, 140, 141, 142, 143, 144, 146, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 0, 0, 0,
	0, 1029, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125,
}

var yyPact = [...]int16{
	423, -1000, -239, -1000, -1000, -1000, -1000, 1624, 1552, 477,
	1118, 1112, 1654, -1000, -1000, -1000, 891, 584, 580, 578,
	247, 547, 1040, 3053, 3218, 619, 479, 310, 453, -1000,
	-206, -186, -1000, -88, 615, -1000, 1424, 333, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1420, 330, 539, 1325, -1000, 5932, 5932, 5932,
	5932, 5932, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	401, 1040, 1040, 453, 152, 453, 1653, 452, 1652, 888,
	-1000, -1000, -1000, 703, -1000, 1783, 695, -1000, -1000, 453,
	1048, 886, -1000, -1000, -1000, 865, 3218, 854, -1000, -1000,
	-1000, -1000, 3203, 614, 3148, 1648, 612, 606, 1643, 593,
	3218, 3218, 202, 389, 436, -138, -2, -1000, -1000, -1000,
	-1000, 692, 1478, -1000, -1000, -1000, 1478, 76, 1623, 1478,
	1623, -1000, 1478, 1623, 41, 41, 41, 41, 41, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1622, 1620, -1000, 1478,
	1478, 1478, 1478, 1478, 1478, 1478, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1610, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1592, 118,
	1592, 1538, 1538, -1000, -1000, 436, 436, 436, 436, 1614,
	3218, 1040, 1642, 1641, 3218, -219, 3218, 3218, 1845, -1000,
	-1000, -1000, 249, 3218, 1749, 7509, 6327, 9484, 3218, -1000,
	-1000, 1748, 1741, -1000, 1739, 625, 3218, 3218, -1000, 590,
	3218, 3218, 589, 3218, 772, 691, 6719, -1000, 1717, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1607, 895, 1040,
	369, 319, 1450, 1482, 503, 591, 371, 1139, 365, -1000,
	-1000, -1000, 959, -1000, 1040, -1000, 1882, -1000, -1000, 363,
	-1000, 349, 852, 1067, 3218, 1604, 188, 1601, 12599, 1005,
	-1000, -248, -1000, -9, -1000, 1040, -1000, 972, 41, 1478,
	-1000, 41, 973, 41, 41, -1000, -1000, 713, 1724, 713,
	713, 713, 713, 1060, 1060, -125, -125, -1000, -1000, -1000,
	-1000, -1000, 1002, -1000, 1001, 1592, -1000, -1000, -1000, 998,
	-1000, 3218, 1040, 1591, 1640, 3218, 3218, 1782, 532, -1000,
	-1000, 1764, 1759, 1418, -1000, -1000, 182, -1000, -1000, 452,
	1040, -1000, 684, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1589, -1000, -1000, 1114, -1000, 313, -1000, 3472, 605, 603,
	-1000, 3218, 537, 1863, 3218, 1861, 1056, 9089, 7904, 202,
	-1000, -1000, -1000, -1000, -1000, 4348, -1000, 1857, 1803, 386,
	53, -202, 1137, -1000, -1000, 1588, -1000, -1000, 12244, -1000,
	8299, 12244, 1135, 1113, -1000, 1111, 1086, 31, 1040, -1000,
	-189, 137, -12, -1000, -1000, 1450, -1000, 1575, 12244, 1754,
	-1000, 1727, 786, -1000, -1000, 559, 316, -227, -1000, -1000,
	13565, -1000, -227, -1000, -1000, 1450, -1000, 12244, 2887, 1450,
	-1000, -1000, 1450, 1450, 1450, 12090, -1000, 638, -1000, -1000,
	-1000, 1042, 1054, 1053, -1000, 13082, 13082, 13082, 13082, 13082,
	13082, -1000, -1000, -1000, -1000, 11, -1000, 1034, -1000, -1000,
	-1000, 680, 678, -1000, -241, 1450, 1450, 1450, 1450, 1450,
	1450, 1450, 1450, 1450, 1450, 12244, 1450, 1711, 1450, 1450,
	-1000, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 3718, 1450,
	1450, 1450, 1450, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1411, 713, 41, 713, 1369, 1365, 713, 713, -1000, -1000,
	1084, 769, -1000, -1000, -1000, -1000, 1323, -1000, 1321, -1000,
	94, 93, -1000, 1349, 1441, -1000, 1316, 1474, 1635, 4348,
	3218, 1574, 1572, 1472, 453, 1472, 1800, 303, 3218, 1845,
	569, 1845, 452, 8299, 1052, 1040, -1000, -1000, -1000, 891,
	-1000, 367, 1040, -1000, -1000, -1000, 411, 504, 3218, 526,
	504, 504, 1849, 504, -1000, 763, 672, 6324, -1000, -1000,
	1313, -1000, 242, 1478, 1478, 12244, 1745, 1745, 1745, 1450,
	662, 1450, 1450, 1450, 1450, 1450, 1450, 12244, 1450, 1711,
	1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 646, 646,
	-191, 344, 342, -202, 1450, 1469, 1571, -1000, 4348, 448,
	-1000, 13082, -227, -1000, -1000, -1000, -1000, -1000, 1570, 1274,
	-1000, 191, 271, -1000, -1000, -1000, -1000, -1000, -202, 1567,
	-1000, -1000, -1000, 852, -1000, 1565, 1554, -1000, 1549, 12244,
	569, 863, 144, -1000, 1440, -1000, 987, 1331, 908, -227,
	-1000, -1000, 951, -1000, -227, -1000, -1000, 1450, 12244, 12244,
	933, -1000, -1000, 13738, -1000, -1000, 55, 12090, -1000, 1083,
	300, 12753, 966, 826, 13082, 13082, 13082, 13082, 13082, 13082,
	13082, 13082, 13082, 13082, 13082, 13082, 13082, 13082, 13082, 6722,
	1014, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1077, -1000, 1472, 1223, 1083, 1083, 1083,
	328, 1250, 12090, 1828, 1887, 316, -1000, 2206, 2206, -1000,
	-1000, -1000, 55, 55, 55, 55, 55, 115, -1000, 11218,
	-1000, 7509, 8299, 3407, 11727, 11727, 11727, 11727, 10253, 12244,
	11727, 11727, 11727, 1781, 844, 316, 1223, 1798, 1083, 1083,
	-1000, 1083, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	61, -1000, -1000, -243, -1000, -244, -1000, 11727, 11727, 11727,
	11727, -1000, -1000, 713, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 41, 1049, 41, -13, -19, -1000, 981, -1000,
	979, 4348, 1040, 3218, 1329, 1439, 1745, 1545, 569, 4348,
	-1000, 1472, 3218, -1000, 514, 1821, -1000, -1000, 1797, -1000,
	1437, -1000, -1000, 1343, 1845, -1000, 1272, -1000, 1541, -1000,
	1040, -1000, -1000, 229, 1040, -1000, 192, -1000, -1000, -1000,
	-1000, -1000, 504, 192, 531, 504, 531, 1047, 1040, -1000,
	-1000, -1000, -1000, 3840, 4348, 1745, -1000, -1000, -1000, 1745,
	812, -1000, -1000, -1000, -1000, -1000, 8299, 1083, 883, -1000,
	-1000, 914, 299, 880, -1000, 1040, -202, 1540, 12244, 8299,
	12244, 4348, 1270, 307, -1000, -1000, 12244, 1833, 12244, 1068,
	1068, -1000, 1040, 1450, -1000, 985, -1000, 976, 1304, 448,
	1266, -142, 12244, 1539, 786, -1000, -1000, 1237, -1000, -1000,
	-1000, 1083, 300, 400, -1000, -1000, 956, -1000, -1000, -1000,
	-1000, -138, -1000, 2672, 1450, 1450, 1450, -1000, -1000, -1000,
	-1000, 12090, 966, 13082, 13082, 13082, 2584, 2672, 3019, 292,
	2691, 55, 75, 75, 56, 56, 56, 56, 56, 214,
	214, -1000, -1000, -1000, 199, -1000, 98, 58, 1478, -112,
	-1000, -1000, 1478, -1000, -1000, -1000, 1083, 1083, -1000, -1000,
	-1000, -1000, -1000, 12244, -1000, 1083, 1806, 1819, 1472, 1780,
	1704, -1000, -1000, -227, 1043, -1000, -1000, 1083, 11727, 1197,
	1250, -1000, 674, -1000, 660, 1450, -1000, 82, -1000, -1000,
	2672, 1197, 674, 1197, 1197, 1197, 745, 1436, 13236, 1478,
	1042, 1478, 1538, -1000, -1000, 126, 1016, 113, -1000, -1000,
	-1000, -1000, 1538, -1000, -1000, -1000, -1000, -1000, 1478, 1478,
	-1000, -1000, 1478, 1478, -1000, 1478, 1478, 694, 1390, 1382,
	1197, 11727, -1000, 828, -1000, 12244, 1083, 3218, -1000, -1000,
	-1000, -1000, -256, -260, 1197, 1083, 1435, 1197, 1197, -1000,
	713, -1000, 713, -1000, -1000, 1218, 1210, 1204, 1537, 1533,
	-212, 4348, 1248, 1235, 1083, 1752, 1040, -1000, -1000, -1000,
	-1000, -1000, 275, 843, 1040, 4030, 1339, -1000, 1039, -1000,
	3767, 1527, 139, 431, -1000, 504, 159, 192, -1000, -1000,
	-1000, -1000, 531, -1000, -1000, 761, 1630, 3927, 178, -1000,
	1073, 821, 1030, 818, 817, 815, 813, 811, 809, 803,
	796, 795, 792, -1000, -1000, -1000, 1745, 1450, -1000, -1000,
	1881, -1000, -1000, -1000, 1865, 1523, 1520, 4348, 448, 1519,
	1233, 1207, 3840, -1000, -98, 1203, -1000, 12244, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1199,
	-1000, 12244, -1000, -1000, -1000, 307, 1634, -1000, -1000, 548,
	-1000, 1200, 1149, -1000, -1000, -1000, -1000, -1000, 13082, 13082,
	13082, -1000, 2584, 2672, 2438, -1000, 13082, 13082, 88, -1000,
	-1000, -1000, 316, -1000, 1737, 12244, 12244, 1828, -1000, 1472,
	-1000, -1000, 1781, -1000, -1000, 924, -1000, 1197, 11727, -235,
	-1000, -1000, -1000, 1017, -1000, -1000, 5929, 11727, -1000, 13082,
	-235, -235, -1000, -1000, 5126, 1014, 12244, -1000, 972, 251,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5126, 13082, 13082, 13082, 13082, -103, 1385, 814,
	-1000, 12244, 637, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -212, 4348, 4348, 1833, 1512,
	1131, 1833, 3840, -1000, 1472, 1289, 267, 150, 12244, -1000,
	3653, -1000, 4030, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1828, 12244, -1000, -1000, -1000,
	-1000, -1000, 1040, 4249, 1040, 1040, 1040, 604, 12244, 1074,
	12244, -1000, -1000, -1000, -1000, -1000, 3218, -1000, 1126, 10779,
	3767, 3767, 10779, 3767, 3767, 4348, 4348, 1506, 1504, 339,
	-1000, 153, -1000, -1000, 1008, -1000, 1040, -1000, -131, 3927,
	1040, -1000, 954, -1000, -1000, 932, 945, 932, 932, 932,
	932, 932, 280, 939, 626, -1000, 646, 646, 1040, 4348,
	1193, 307, 12244, 1833, 3840, 1630, -1000, 1833, 316, 426,
	1040, 448, -1000, 1855, -145, 482, -1000, -1000, 106, 106,
	106, -1000, 13082, 2672, 2672, -20, -1000, 1879, 744, 737,
	1434, -1000, 476, 1806, 1083, 1616, -1000, -1000, -1000, -1000,
	1450, -1000, -1000, 658, 1083, -1000, -1000, -1000, 1083, 1478,
	-1000, 1478, 1083, 596, -1000, -1000, 1083, 2284, 2265, 1529,
	1106, 1450, -95, -1000, 316, 12244, 1833, 1117, 1190, 3840,
	569, -212, 3840, -1000, -1000, -109, 12244, 4030, 4829, 316,
	4829, -1000, 4030, 2105, 1806, 4067, 477, 3085, 2259, 1432,
	454, -1000, 4744, 946, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1040,
	1848, 1846, 1839, 1838, 10279, 12244, 12244, -1000, 1793, -1000,
	-1000, 10522, -1000, -1000, -1000, -1000, -1000, 1182, 1180, 4348,
	4348, 1471, -1000, -1000, 1450, 1177, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 852, 852, 1175, 1171, 3840,
	-1000, 1168, -1000, 1630, -1000, -1000, 3218, -1000, 307, 646,
	646, -1000, -1000, -1000, 176, 879, 786, 786, 931, 66,
	-1000, 1818, -1000, -1000, -1000, 2672, -1000, -1000, 1709, 12244,
	12244, 12244, -1000, 1737, -1000, 11727, -1000, 484, 7114, -1000,
	-1000, -1000, -1000, 13082, -1000, -1000, 13082, -1000, 13082, -1000,
	13082, -1000, 13082, 13082, 1083, 935, 316, 3840, 1833, 3840,
	1630, 1144, 1833, 1630, -1000, -232, 316, 3653, 3842, -1000,
	-1000, 145, 12034, -1000, 1737, 4030, 829, -1000, 832, -1000,
	4829, 2801, 3218, 1167, 1333, 1605, -1000, -1000, -1000, 1751,
	683, 2026, 1040, 259, 5932, -1000, -1000, 1431, 5139, -4,
	-1000, -1000, -1000, 791, 655, 1037, -1000, 1722, -1000, -1000,
	4249, 1734, -1000, -1000, -1000, -1000, -1000, 4829, -1000, 1386,
	1083, 843, 272, -1000, 364, 1134, 1130, 4348, 1040, -1000,
	3927, -1000, -1000, 425, 3840, 1630, 1833, -1000, 1465, -1000,
	-1000, -1000, 786, -1000, 786, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2647, 1707, 316, 316, -1000, -1000, 1359, -1000,
	1816, 1083, -1000, 106, 106, 106, 106, 106, 488, -1000,
	-1000, 1630, 3840, -1000, -1000, -1000, 3840, -1000, 12244, 11975,
	-1000, -1000, -1000, -1000, 3424, 8779, 450, 3154, 320, 3218,
	-1000, 320, 1228, 2259, -1000, -1000, 1223, 2259, 2259, 2259,
	2259, 2259, -1000, 1684, 1681, -1000, 1680, 1678, 1688, 3218,
	1125, 683, 705, 1450, -1000, 3401, -1000, -1000, -1000, 1751,
	1791, -1000, 5534, 1431, -4, 1429, -1000, -40, -45, 11064,
	8299, 713, -1000, -1000, -1000, -1000, -1000, 1040, 138, -1000,
	147, 266, 172, -1000, 174, 3840, 3840, 1121, 1083, -1000,
	3218, 1630, -1000, -1000, 1040, -1000, -1000, -1000, 649, -1000,
	1833, 2259, 12244, -1000, -1000, -1000, -1000, -1000, -1000, 1083,
	207, -135, -1000, -1000, 1630, 316, -1000, -1000, 11299, -1000,
	-1000, 12244, -1000, 12244, 4829, -1000, 1150, 1450, -1000, 1833,
	2259, 1242, 1300, -1000, 781, 1605, 1511, 1633, 1038, -1000,
	-1000, -1000, -1000, 1674, -1000, 1667, -1000, -1000, -1000, -1000,
	-115, 576, 560, 553, 1040, -1000, 1472, -1000, 1429, -4,
	-48, -1000, -1000, -1000, -1000, 316, 780, -1000, 1425, -1000,
	4829, -1000, -1000, 168, -1000, 1630, 1630, -1000, -1000, 1461,
	-1000, 1110, 8299, 1831, 1413, 1116, -1000, 316, -1000, 1701,
	-107, -148, -1000, 442, 4030, 10540, 4118, 1531, 1223, 1450,
	-1000, 8694, 1040, 1828, 1242, -1000, 1833, 1223, 12244, -1000,
	-1000, 12244, 1459, -1000, 12244, -1000, -1000, -1000, -1000, 1452,
	1450, 1450, 1450, 1105, -1000, -1000, -1000, -1000, -47, -41,
	-1000, 12244, 3531, -1000, -1000, -1000, -1000, 1040, -1000, -1000,
	1822, 1812, -1000, 1083, 12244, -1000, 1698, -1000, -1000, 2881,
	829, -1000, -1000, 1730, 1187, 1340, -1000, -1000, 11573, 1083,
	1108, -1000, -1000, 641, -1000, -1000, 1105, 1806, -1000, 1828,
	-1000, 316, 316, 569, 316, -37, 569, 569, 569, 2462,
	1040, -1000, -1000, -1000, 316, 11808, 1095, -1000, 12244, 12244,
	-1000, -1000, -114, 11517, 335, -1000, 1450, -1000, -1000, 1277,
	9879, 1040, -1000, -1000, 1806, 1093, 1091, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1082, 1082, 1082, 705,
	-1000, -1000, -1000, 316, 1386, -136, 438, 1868, -1000, 1450,
	-1000, 1472, -1000, -1000, -1000, -1000, -1000, -37, -1000, -1000,
	-1000, -115, -166, -1000, 1223, 1340, 1083, -1000, -1000, -1000,
	1151, -1000,
}

var yyPgo = [...]int16{
	0, 2132, 41, 57, 2131, 2130, 2126, 2124, 2123, 2122,
	2121, 2120, 2118, 2117, 2116, 30, 36, 46, 26, 35,
	2112, 2108, 2100, 2095, 2094, 2092, 2091, 102, 2088, 2086,
	2084, 2083, 835, 106, 90, 2076, 2072, 2070, 2069, 2068,
	95, 170, 86, 88, 1963, 33, 34, 48, 45, 2067,
	32, 2066, 2065, 55, 2064, 47, 2062, 2057, 98, 2056,
	2055, 7, 29, 115, 129, 125, 2054, 2053, 119, 2609,
	1268, 237, 50, 2052, 2050, 101, 9, 67, 3, 6,
	13, 2049, 344, 1, 2045, 97, 84, 2042, 2037, 2035,
	15, 2028, 53, 77, 14, 85, 2025, 19, 8, 82,
	44, 21, 16, 5, 51, 37, 2021, 22, 43, 27,
	2020, 70, 2018, 99, 134, 49, 68, 42, 2410, 0,
	63, 81, 2017, 2010, 2007, 94, 1996, 1497, 96, 38,
	10, 69, 76, 1995, 87, 127, 56, 121, 112, 1994,
	124, 122, 118, 1992, 1991, 1990, 2603, 715, 1986, 108,
	74, 1981, 1980, 104, 308, 285, 100, 314, 142, 78,
	1978, 1977, 1976, 1975, 143, 109, 92, 128, 1974, 66,
	110, 20, 394, 1973, 1972, 1970, 1969, 1967, 1964, 1962,
	111, 1960, 83, 65, 39, 126, 54, 1958, 1957, 1956,
	1953, 103, 1952, 1951, 1950, 89, 1949, 1948, 117, 75,
	135, 131, 1947, 1945, 1944, 113, 79, 1942, 130, 132,
	1941, 120, 1858, 116, 93, 31, 40, 743, 64, 1935,
	1933, 1932, 2, 4, 1927, 1924, 1922, 1919, 133, 1917,
	80, 1916, 107, 1914, 18, 1913, 1912, 52, 1911, 1907,
	1905, 1904, 1900, 750, 1051, 1899, 185, 136, 1897, 162,
}

var yyR1 = [...]uint8{
	0, 239, 240, 240, 1, 1, 1, 1, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 22, 22, 22, 22, 22,
	22, 212, 212, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 213, 213, 214, 214, 214,
	23, 23, 23, 242, 242, 2, 2, 3, 4, 4,
	5, 5, 6, 6, 30, 30, 7, 8, 8, 8,
	245, 245, 53, 53, 100, 100, 9, 9, 9, 9,
	10, 10, 219, 219, 218, 220, 220, 11, 11, 11,
	11, 11, 210, 210, 210, 210, 210, 12, 12, 216,
	216, 216, 15, 15, 15, 15, 16, 16, 17, 17,
	17, 19, 19, 105, 105, 109, 109, 109, 110, 110,
	110, 110, 231, 231, 133, 133, 241, 241, 246, 246,
	246, 246, 246, 246, 246, 208, 208, 208, 208, 209,
	209, 209, 209, 211, 211, 215, 215, 215, 215, 215,
	215, 217, 217, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 13, 13, 31, 31, 77, 77,
	14, 116, 116, 189, 189, 189, 190, 190, 190, 190,
	190, 190, 192, 192, 193, 193, 123, 123, 194, 194,
	26, 174, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 158, 158, 158, 158, 158, 136, 136, 136, 136,
	136, 136, 136, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 200, 200, 200, 200, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 202, 203, 204, 196,
	196, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 148, 148, 148, 148, 148,
	148, 195, 195, 191, 191, 191, 191, 140, 140, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 139,
	139, 139, 139, 139, 139, 139, 144, 144, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 137,
	137, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 145, 145, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 157, 157, 146, 146, 155, 155,
	156, 156, 156, 147, 147, 147, 154, 154, 154, 151,
	151, 152, 152, 153, 153, 153, 149, 149, 149, 150,
	150, 150, 160, 185, 185, 185, 187, 187, 188, 188,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 173, 173, 205, 205, 206, 206,
	207, 207, 184, 184, 184, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 172, 172, 182,
	182, 183, 183, 180, 180, 180, 180, 180, 180, 180,
	180, 181, 167, 167, 167, 167, 167, 168, 168, 169,
	169, 169, 169, 161, 161, 162, 162, 163, 163, 164,
	164, 164, 164, 166, 166, 165, 165, 33, 33, 33,
	33, 33, 33, 33, 33, 198, 198, 198, 235, 235,
	235, 235, 235, 235, 236, 236, 199, 199, 170, 170,
	171, 171, 178, 178, 178, 178, 247, 247, 176, 176,
	176, 177, 177, 177, 248, 27, 28, 28, 29, 29,
	29, 36, 36, 36, 34, 34, 35, 35, 42, 42,
	41, 41, 43, 43, 43, 43, 122, 122, 122, 121,
	121, 232, 232, 232, 232, 232, 45, 45, 46, 46,
	47, 47, 48, 48, 48, 222, 222, 221, 221, 223,
	223, 223, 223, 223, 223, 223, 223, 60, 60, 97,
	97, 97, 101, 101, 49, 49, 49, 49, 50, 50,
	51, 51, 52, 52, 131, 131, 130, 130, 130, 129,
	129, 54, 54, 54, 56, 55, 55, 55, 55, 57,
	57, 59, 59, 58, 58, 61, 61, 61, 61, 62,
	62, 99, 99, 44, 44, 44, 44, 44, 44, 44,
	44, 112, 112, 64, 64, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 74, 74, 74, 74, 74, 74, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 40, 40,
	75, 75, 75, 82, 76, 76, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 72, 72, 72, 72, 72, 72, 72, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	249, 249, 73, 73, 73, 73, 37, 37, 37, 37,
	37, 132, 132, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 86, 86, 38, 38, 84,
	84, 85, 115, 115, 87, 87, 83, 83, 83, 83,
	83, 224, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 65, 65, 88, 88, 89, 89, 233, 233,
	234, 90, 90, 91, 91, 92, 93, 93, 93, 94,
	94, 94, 94, 95, 95, 95, 67, 67, 67, 67,
	67, 67, 96, 96, 98, 98, 98, 98, 102, 102,
	78, 78, 80, 80, 79, 81, 103, 103, 107, 104,
	104, 108, 108, 108, 108, 108, 24, 25, 106, 106,
	106, 126, 126, 126, 114, 114, 124, 124, 111, 111,
	113, 113, 113, 125, 125, 119, 120, 120, 120, 120,
	120, 127, 127, 127, 128, 128, 225, 225, 225, 226,
	226, 226, 227, 227, 228, 228, 229, 229, 230, 39,
	39, 238, 238, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 118, 118, 118, 118, 118, 118,
	118, 118, 243, 244,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 2, 13,
	12, 14, 12, 13, 12, 10, 7, 10, 7, 11,
	11, 9, 13, 16, 5, 8, 8, 4, 4, 3,
	3, 3, 6, 6, 6, 7, 6, 11, 13, 13,
	14, 14, 6, 7, 6, 8, 9, 8, 8, 9,
	8, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	6, 8, 10, 1, 1, 4, 6, 10, 1, 3,
	1, 3, 7, 8, 1, 1, 9, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	2, 6, 1, 3, 3, 0, 1, 2, 2, 2,
	3, 5, 0, 2, 2, 2, 2, 3, 5, 1,
	2, 3, 7, 10, 1, 1, 5, 5, 3, 5,
	3, 1, 3, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 0, 3, 0, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 4, 2, 3,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 4, 1, 1, 0, 1,
	2, 0, 3, 0, 2, 2, 0, 2, 2, 2,
	2, 2, 0, 2, 0, 3, 0, 1, 0, 2,
	4, 4, 0, 1, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 1, 3, 2, 2, 3, 2, 4, 2, 4,
	2, 2, 3, 2, 3, 2, 7, 9, 3, 3,
	6, 9, 9, 6, 6, 8, 8, 5, 8, 7,
	4, 0, 2, 2, 4, 6, 2, 1, 1, 2,
	1, 2, 2, 1, 1, 3, 1, 2, 1, 1,
	2, 0, 4, 3, 4, 3, 3, 3, 3, 3,
	3, 3, 2, 4, 6, 2, 3, 2, 3, 1,
	3, 0, 2, 0, 2, 2, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 2, 2, 2, 1, 1, 0, 1, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 4, 5, 4, 4, 4, 1, 2, 2, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 3, 3, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 6, 0, 1, 4, 1, 2, 1, 3,
	2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 5, 2, 3, 3, 2, 3,
	2, 3, 3, 2, 2, 3, 4, 1, 1, 1,
	1, 1, 3, 3, 2, 3, 2, 4, 2, 2,
	2, 1, 2, 5, 5, 8, 8, 13, 11, 1,
	1, 2, 2, 10, 8, 9, 7, 7, 5, 9,
	7, 7, 5, 1, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 0, 1,
	1, 1, 2, 2, 1, 2, 0, 3, 0, 1,
	1, 3, 0, 4, 1, 3, 2, 1, 1, 2,
	1, 1, 1, 1, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 3, 6, 4, 7, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 0, 4, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 8, 1,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 0, 4, 1, 3, 3, 2, 3, 2, 1,
	2, 0, 3, 1, 1, 3, 6, 6, 6, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 4, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 6, 2, 2, 2, 2, 2,
	2, 2, 3, 3, 3, 1, 1, 1, 1, 2,
	1, 4, 5, 5, 5, 5, 6, 4, 4, 4,
	6, 6, 8, 6, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 9, 7, 5, 4, 4, 3, 3,
	3, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	2, 2, 1, 2, 2, 1, 2, 1, 1, 1,
	3, 1, 1, 3, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 0, 2, 1, 1, 1, 3,
	5, 3, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 0, 3, 0, 2, 1, 3,
	1, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 1, 3, 1, 1, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 5, 3, 1, 3, 1, 2,
	1, 1, 1, 1, 0, 3, 0, 3, 0, 1,
	0, 1, 1, 0, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 2, 0,
	2, 2, 0, 1, 4, 3, 1, 3, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -239, -1, -20, -21, -22, -23, -26, 126, 127,
	219, 220, 71, -240, 403, -174, 58, -235, -236, 288,
	-194, 135, 148, 170, 171, 373, 132, 218, 133, 385,
	386, 150, 388, 79, -111, 138, -212, 21, -32, 6,
	8, 9, 10, 159, 143, 170, 126, 162, 161, 163,
	-119, 61, -212, 21, 56, -175, -158, -119, -118, 314,
	63, 36, 398, 399, 148, 171, 173, 174, 301, 223,
	134, 134, 134, 136, 216, 136, -119, -119, -83, 139,
	61, -118, 314, -127, 63, -58, -127, 61, -118, 133,
	-124, 139, 63, -119, 272, 139, -114, 139, 388, 385,
	386, 353, 133, 56, 59, 221, 56, 56, 221, 56,
	133, 141, 60, 59, -159, -136, -140, -137, -142, -141,
	-143, -119, -138, -139, 261, 365, 258, 262, 259, 264,
	265, 266, 120, 263, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 267, 279, 33, 155, 249,
	250, 251, 252, 253, 256, 255, 257, 254, 122, 280,
	281, 282, 283, 284, 285, 286, 287, 288, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 241, 242,
	244, 245, 246, 248, 247, -159, -159, -159, -159, -119,
	56, 215, -119, -119, -114, 217, -114, 56, -208, 19,
	195, 196, 208, 56, 81, 123, 25, 123, -114, -119,
	63, 81, 81, -58, 81, -58, 317, 133, -32, 56,
	133, 133, 56, 133, -58, -127, -178, -247, 368, 37,
	-158, -160, -167, -161, -162, -163, -164, -179, -168, 142,
	140, 150, 401, 222, 144, 145, 288, -172, 146, 134,
	151, 73, 81, -200, 142, -203, 56, 296, 302, 140,
	151, 150, 401, 71, 143, 25, 375, 377, 31, 32,
	-153, 404, 290, -151, 299, 123, -146, 58, -146, -145,
	260, -147, 58, -146, -147, -146, -147, -149, 262, -149,
	-149, -149, -149, 58, 58, -146, -146, -146, -146, -146,
	-146, -146, 58, -155, 58, -144, 243, -155, -156, 58,
	-156, 56, 57, -58, -119, 56, 56, -58, -231, 398,
	399, -58, -58, -211, -209, 8, 9, 10, 209, -58,
	26, -120, -128, -119, 310, 147, -117, -118, -127, 131,
	196, 376, 80, 25, 27, 296, 302, 195, 84, 120,
	16, 85, 202, 385, 386, 119, 76, 354, 126, 52,
	346, 347, 200, 356, 357, 345, 303, 207, 20, 31,
	10, 28, 153, 24, 113, 128, 197, 89, 88, 156,
	160, 161, 26, 154, 75, 203, 205, 19, 55, 146,
	11, 375, 13, 14, 390, 377, 139, 138, 100, 389,
	134, 50, 8, 122, 29, 97, 46, 151, 206, 48,
	98, 17, 348, 349, 34, 363, 164, 115, 53, 40,
	391, 81, 392, 73, 56, 317, 201, 79, 15, 51,
	165, 393, 204, 397, 99, 129, 353, 172, 49, 198,
	394, 132, 199, 6, 359, 33, 152, 47, 133, 304,
	395, 87, 137, 74, 5, 150, 9, 396, 54, 57,
	350, 351, 352, 38, 86, 12, 149, 367, 77, -136,
	279, -128, -117, -58, 26, 26, 26, 131, -58, -53,
	-58, 133, -58, -58, 133, -58, 97, 123, -176, 59,
	-120, 71, -117, -118, 36, 58, -199, 56, 81, -170,
	-119, 151, -172, 61, 134, -198, 385, 386, -243, 58,
	57, 58, -172, -172, 61, 134, 151, 61, 151, 73,
	19, -119, 9, 151, 151, -199, 63, -58, 58, -196,
	376, 16, 58, -202, -201, 58, -44, 63, 64, 65,
	110, 66, 73, 72, -64, 291, -63, 81, -69, 31,
	74, 75, 26, 9, 76, -243, -68, -83, -224, -81,
	-82, 155, 249, 250, -228, 120, 121, 109, 117, 82,
	122, -72, -70, -71, -73, -227, 182, -119, 62, 67,
	68, -127, 322, -79, 290, 362, 361, 48, 49, 354,
	355, 356, 357, 363, 358, 85, 38, 40, 267, 292,
	344, 352, 351, 350, 348, 349, 346, 347, 400, 139,
	345, 115, 353, 289, -204, 65, 405, -152, 300, -119,
	65, -149, -146, -149, 65, 61, -149, -149, -150, 120,
	119, 33, -150, -150, -150, -150, -157, 63, -157, -154,
	367, 368, -154, 65, 65, -155, 65, -58, -119, 58,
	56, -58, -58, 25, 136, 25, -189, 25, 56, 59,
	209, -208, -119, 123, 58, 57, 63, -119, 272, 141,
	-158, -123, 142, -167, -164, 150, 131, 137, 59, -58,
	137, 11, -58, 11, 63, -119, -128, 90, -120, -247,
	-183, -180, -120, 151, 314, 58, -72, -70, -71, -119,
	-127, 48, 49, 354, 356, 357, 363, 85, 38, 40,
	291, 352, 351, 350, 348, 349, 346, 347, 10, 9,
	19, 146, 140, 150, 401, 222, -198, 61, 58, -44,
	-64, 110, 63, 64, 72, 65, 66, 73, -120, -166,
	-165, -119, -44, 61, 61, 61, 61, -198, 150, -170,
	-119, 387, -200, 401, -148, 344, 347, 346, 292, -243,
	58, -44, 25, 31, -65, 65, 110, -201, 58, 63,
	64, 65, 110, 66, 73, 72, -64, 291, 80, 79,
	97, 210, -191, 400, 65, 66, -69, -243, -191, -243,
	-44, -66, 100, 81, 98, 99, 84, 106, 105, 116,
	109, 110, 111, 112, 113, 114, 115, 107, 108, 400,
	119, 90, 91, 92, 93, 94, 95, 96, 101, 102,
	103, 104, -112, -243, -82, -243, -243, -243, -63, -2,
	-69, -76, -243, -3, -4, -44, 6, 124, 125, 63,
	63, 63, -69, -69, -69, -69, -69, -69, -228, -243,
	63, 123, 123, 404, -243, -243, -243, -243, -243, -243,
	-243, -243, -243, -243, -86, -44, -243, 41, -243, -243,
	-249, -243, -249, -249, -249, -249, -249, -249, -135, 120,
	262, 155, 253, -138, -137, 268, 267, -243, -243, -243,
	-243, 60, -150, -149, -150, 60, 60, -150, -150, 61,
	61, 120, 60, 59, 60, 249, 249, 60, 59, 60,
	59, 58, 57, 56, -182, -183, -72, -58, 58, 58,
	-2, -243, -114, -2, -190, 19, 179, 180, -58, -209,
	-97, -119, 151, -211, -208, -120, -39, 63, -119, -158,
	-242, 134, 151, -119, 142, -167, -213, -214, -119, 63,
	181, -58, 137, -213, -213, 11, -213, 97, 123, -177,
	-120, 63, 65, 60, 59, -146, -181, 294, -146, -146,
	-44, -93, 27, 28, -93, -93, 123, -243, -169, 175,
	176, 33, 177, -169, 387, 151, 151, -198, -243, 57,
	58, 58, -183, -244, 60, -191, 58, 60, 59, 367,
	367, -198, 58, -199, -146, 58, -146, 58, 58, -44,
	-97, 60, 58, 377, 59, 65, 60, -201, -191, 65,
	66, -243, -44, -44, -74, 73, 81, 74, 75, 293,
	122, -136, -244, -69, 21, 22, 23, -75, -79, -82,
	69, -243, 100, 98, 99, 84, -69, -69, -69, -69,
	-69, -69, -69, -69, -69, -69, -69, -69, -69, -69,
	-69, -140, -142, -141, 250, -135, -138, 262, 120, 268,
	267, 155, 253, -132, 61, 63, 61, -83, -119, -244,
	-244, -244, -244, 59, -244, -2, -90, 15, -29, 5,
	-27, -248, -68, 63, -119, -68, -119, -42, 24, -41,
	-76, -43, -44, 111, -127, -120, -120, -229, 405, -230,
	-69, -41, -44, -41, -41, -41, -44, -134, 120, 258,
	155, 253, 245, 277, 278, 298, 249, 299, 238, 230,
	235, 248, 246, 232, 247, 231, 244, 241, 256, 255,
	257, 268, 259, 264, 266, 265, 263, -44, -43, -43,
	-41, -34, 24, -84, -85, 86, -83, 19, -244, -244,
	-244, 260, 404, 404, -41, -42, -41, -41, -41, -150,
	-149, 63, -149, 301, 301, 65, 65, -182, -119, -58,
	60, 58, -97, -183, -2, -58, 137, 21, 6, 8,
	9, 10, 19, -116, 59, 25, -211, 60, 59, -241,
	58, -119, 150, -119, -125, 59, 367, -213, -125, -113,
	176, 175, -213, -113, 63, -119, -185, -187, 367, -186,
	57, 147, 71, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 61, -180, -93, -93, 60, -120, -244, -199,
	56, 73, 178, -199, 56, -170, -198, 58, -44, -120,
	-166, -183, 60, -195, 177, -166, -62, 12, -165, -33,
	90, 95, 91, 92, 80, 93, 94, -119, -33, -171,
	-119, -243, 60, 60, 60, -244, 60, 373, 374, -44,
	58, -65, 60, -244, 73, 74, 75, -153, -243, -243,
	-243, -75, -69, -69, -69, -40, 156, 80, 367, 260,
	-244, -244, -44, -244, -94, 17, 16, -5, -3, -243,
	21, 24, -36, 44, 45, -28, -244, -41, 59, -244,
	-244, -122, -121, 25, -119, 63, 123, -243, 405, 59,
	-244, -244, -244, -244, 59, 57, 59, -146, 58, -146,
	-146, -156, 236, -146, 236, -156, -146, -146, -146, -146,
	-146, -146, 25, 59, 11, 59, 11, -244, -41, -87,
	-85, 89, -44, -244, -127, 405, 405, -244, -244, -244,
	-244, -150, -150, 60, 60, 60, 58, 58, -99, 389,
	-182, 60, 60, -244, 25, -171, 197, -115, 86, -119,
	-215, -217, 225, -18, -15, -6, -8, -7, -10, -9,
	-11, -12, -13, -14, -24, -3, 139, -16, -17, -30,
	10, 9, 20, 33, 201, 202, 207, 203, 149, -31,
	172, -25, 8, 353, 160, 161, 56, 63, -246, -119,
	109, 90, 63, -158, 59, 58, 58, 385, 386, 140,
	-214, 219, -125, -113, 97, -184, 56, -186, 367, 58,
	369, 61, -173, 90, 63, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, -93, 9, 10, 58, 58,
	-183, -244, 58, 60, 60, -185, 360, 60, -44, 60,
	59, -44, -195, 56, 60, -197, 60, 60, -69, -69,
	-69, -40, 80, -69, -69, 249, -95, 19, 34, -44,
	-91, -92, -44, -90, -2, -34, 70, -244, -43, -232,
	402, -121, 111, -128, -42, -230, -232, -232, -134, 120,
	155, 249, -132, -44, -149, 61, -134, -69, -69, -69,
	-69, 364, -90, 88, -44, 87, -99, -182, -183, -62,
	58, 60, -62, -185, -2, -192, 57, 198, 225, -44,
	403, -217, 225, -215, -90, -44, -27, -27, -27, -219,
	-119, -218, -27, -238, -237, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 342, 343, -119, -119, -119, -210,
	40, 204, 205, 206, -44, -119, -243, -86, -58, 60,
	-246, -119, -246, -246, -246, -246, -246, -183, -183, 58,
	58, 151, 224, 63, -119, -188, -186, -119, 65, -205,
	56, 77, 65, -205, -205, -205, -205, -205, -206, 193,
	194, 65, -207, -206, 65, -169, -169, -171, -183, 60,
	-195, -166, -62, -185, -184, -62, 143, -119, -244, 10,
	9, 373, 374, 60, 226, 379, 380, 164, 381, 177,
	382, 383, -244, -244, -244, -69, 301, 9, 100, 59,
	18, 59, -93, -94, -244, -35, 47, -243, 123, -244,
	-244, -244, -244, 59, -244, -244, 59, -244, 19, -244,
	59, -244, 19, -243, -38, 359, -44, -62, 60, 60,
	-185, -97, -99, -185, -193, 367, -44, -215, -216, -217,
	-217, -215, 403, 88, -94, 87, -19, -15, -16, -18,
	225, -111, 11, -53, -46, -47, -48, -49, -60, -82,
	-243, -58, 59, -220, -131, 199, 25, -104, -133, 227,
	-108, 312, 311, -120, 322, -106, 310, 262, 309, -205,
	59, -119, 11, 11, 11, 11, -217, 225, -77, -76,
	-77, -116, 19, 60, 60, -183, -183, 58, -243, 60,
	59, -199, -199, 60, 60, -185, 60, -184, -58, -195,
	-169, -169, 367, -65, 16, -65, -65, -65, 65, 380,
	164, 382, 16, 42, -44, -44, -92, -95, -41, -244,
	165, -90, 111, -69, -69, -69, -69, -69, -69, -244,
	63, -185, -62, -185, -184, 60, -62, -184, 401, 403,
	-217, 88, 88, -95, -215, 89, 89, -216, -59, 29,
	-58, -58, -53, -245, 11, 57, 33, 59, -54, -56,
	-55, -57, 46, 50, 52, 47, 48, 49, 53, -131,
	-46, -243, -130, 165, -129, 25, -127, 63, -218, -119,
	200, -136, 59, -104, 227, -105, -109, 313, 315, 90,
	123, -126, -119, 63, 31, 33, -237, 29, -216, -244,
	-115, 197, -225, 211, 81, 60, 60, -183, -119, -186,
	143, -185, -184, -62, 58, -65, -65, 384, -127, 43,
	-45, 11, 16, -244, -244, -244, -244, -244, -244, -37,
	100, 367, -184, -185, -185, -44, 88, -217, 403, -16,
	-19, 139, -17, 139, 403, 88, -100, 165, -58, -100,
	57, -46, -103, -107, -83, -47, -48, -48, -47, -48,
	46, 46, 46, 51, 46, 51, 46, -55, -127, -244,
	-61, 54, 138, 55, -243, -129, 19, -108, -105, 59,
	314, 316, 317, 56, 77, -44, -120, -150, -171, 88,
	225, 198, -226, 212, 211, -185, -185, 60, -244, -58,
	-184, -171, 123, -62, -46, -233, -234, -44, -244, 365,
	53, 370, -184, 88, 89, -44, -44, -67, 33, 38,
	-2, -243, -243, -62, -46, -62, -45, 59, 90, -51,
	-50, 56, 57, -52, 56, -50, 46, 46, -222, 367,
	134, 134, 134, -101, -119, -2, -109, -110, 318, 315,
	321, 90, -216, 214, 213, -184, -184, 58, 60, -120,
	-88, 13, -244, -90, 59, 43, 366, 371, 139, -215,
	-19, -19, -102, 56, -103, -78, -80, -79, -243, -2,
	-96, -98, 6, -119, -117, -118, -101, -90, -62, -62,
	-107, -44, -44, 58, -44, 58, -243, -243, -243, -244,
	59, 315, 319, 320, -44, 403, -171, -89, 14, 16,
	-244, -234, 43, 403, 30, -102, 59, -244, -244, -244,
	59, 123, -244, -94, -90, -97, -221, -223, 390, 391,
	392, 393, 394, 395, 396, 397, -97, -97, -97, -130,
	-119, 88, 60, -44, -76, 367, 88, 151, -80, 38,
	-2, -243, -98, -119, -94, 60, 60, 59, -244, -244,
	-244, -61, 370, 139, 9, -78, -2, -223, -222, 371,
	-103, -244,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 7, 0, -2, 908,
	0, 0, 0, 1, 3, 8, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 906, 0, 904, 499,
	500, 501, 504, 0, 0, 909, 0, 0, 51, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 915, 0, 0, 0, 0, 213, 261, 261, 261,
	261, 261, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	0, 0, 0, 904, 0, 904, 0, 826, 0, 0,
	-2, -2, 828, 0, 923, 0, 613, 921, 922, 904,
	0, 0, 29, 30, 31, 0, 0, 0, 505, 502,
	503, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 0, 221, 393, 389, 227, 228, 229,
	230, 231, 376, 308, 339, 340, 376, 363, 383, 376,
	383, 346, 376, 383, 396, 396, 396, 396, 396, 354,
	355, 356, 357, 358, 359, 360, 0, 0, 328, 376,
	376, 376, 376, 376, 376, 376, 336, 337, 338, 365,
	366, 367, 368, 369, 370, 371, 372, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 378, 326,
	378, 380, 380, 324, 325, 222, 223, 224, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	156, 157, 0, 0, 0, 0, 0, 0, 0, 27,
	28, 0, 0, 210, 0, 0, 0, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 211, 514, 0, 517,
	214, 215, 216, 217, 218, 219, 220, 0, 506, 508,
	0, 495, 0, 0, 0, 0, 0, 0, 0, 447,
	448, 234, 0, 236, 0, 238, 0, 240, 241, 0,
	243, 245, 506, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 395, 391, 390, 0, 307, 0, 396, 376,
	364, 396, 0, 396, 396, 347, 348, 399, 0, 399,
	399, 399, 399, 0, 0, 386, 386, 331, 332, 333,
	334, 335, 0, 319, 0, 378, 327, 321, 322, 0,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	143, 0, 193, 0, 163, 159, 160, 161, 158, 0,
	0, 829, 0, 916, 917, 918, -2, -2, 924, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 24,
	0, 614, 925, 0, 907, 0, 905, 206, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	518, 520, 919, 920, 516, 0, 462, 0, 0, 0,
	509, 435, 0, 443, -2, 0, 496, 497, 0, 1102,
	0, 0, 0, 0, 438, 440, 0, 495, 508, 235,
	0, 0, 0, 242, 244, 0, 248, 249, 0, 0,
	279, 0, 0, 262, 263, 1102, 276, -2, -2, -2,
	0, -2, -2, -2, -2, 0, 623, 0, 629, 631,
	633, 634, 0, 0, 0, 0, 676, 678, 679, 680,
	681, 0, 0, 0, 685, 0, 0, 0, 0, 0,
	0, 715, 716, 717, 718, 0, 720, 826, 835, 839,
	840, 0, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 815, 0, 0, 0, 0,
	751, 760, 760, 760, 760, 760, 760, 760, 0, 0,
	0, 0, 0, 933, 277, 278, 394, 226, 392, 232,
	0, 399, 396, 399, 0, 0, 399, 399, 349, 400,
	0, 0, 350, 351, 352, 353, 0, 374, 0, 329,
	0, 0, 330, 0, 0, 320, 0, 0, 0, 0,
	0, 0, 0, 0, 904, 0, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 33, 34, 0,
	36, 0, 508, 42, 44, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 0, 0, 519, 515,
	0, 451, 376, -2, 376, 0, 856, 856, 856, 916,
	0, 1034, 1063, 982, 988, 989, 1040, -2, 1088, 1044,
	0, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	0, 0, 0, 495, 0, 0, 0, 442, 0, 0,
	677, 0, -2, 833, 836, 837, 838, 841, 0, 0,
	483, 826, 0, 436, 437, 439, 441, 445, 495, 0,
	509, 260, 237, 506, 239, 376, 376, 299, 0, 0,
	0, 0, 0, 280, 0, 842, 0, 0, 0, 303,
	267, 268, 0, 270, 303, 273, 274, 0, 0, 0,
	0, 628, -2, 0, -2, -2, 708, 0, 272, 0,
	626, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 630, 0, 647, 0, 0, 0, 623, 78,
	629, 0, 0, 851, 0, 674, 524, 0, 0, 682,
	683, 684, 705, 706, 707, 709, 710, 711, 719, 538,
	834, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 534, 0, 816, 0, 0, 0, 0,
	752, 0, 753, 754, 755, 756, 757, 758, 759, 805,
	0, 807, 808, 809, 811, 812, 814, 0, 538, 0,
	0, 377, 341, 399, 343, 384, 385, 344, 345, 401,
	397, 398, 396, 0, 396, 0, 0, 373, 0, 381,
	0, 0, 0, 0, 0, 449, -2, 0, 0, 0,
	-2, 0, 0, -2, 0, 0, 194, 195, 191, 164,
	162, 579, 580, 0, 0, 830, 0, 374, 146, 35,
	0, 73, 74, 509, 508, 43, 913, 65, 67, 68,
	69, 93, 0, 913, 910, 0, 910, 0, 0, 513,
	521, 522, 523, 403, 0, 856, 456, 461, 454, 856,
	0, 458, 857, 858, 459, 460, 0, 0, 506, 469,
	470, 0, 0, 506, 507, 508, 495, 0, 0, 0,
	0, 0, 0, 301, 1103, 832, 0, 619, 0, 0,
	0, 446, 0, 0, 295, 0, 297, 0, 0, 0,
	0, 0, 0, 257, 0, 843, 264, 0, 266, 269,
	271, 0, 624, 625, 627, 651, 0, 653, 655, 304,
	-2, 393, -2, 635, 0, 0, 0, 639, 670, 671,
	672, 0, 0, 0, 0, 0, 668, 643, 0, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 700, 701, 702, 376, 713, 376, 363, 376, 396,
	360, 328, 376, 703, 771, 772, 0, 0, 826, 649,
	650, 673, 714, 0, 884, 78, 859, 0, 0, 528,
	531, 526, 698, 303, 0, 699, 712, 0, 0, 0,
	0, 540, 546, 542, 0, 829, 831, 0, 935, 936,
	938, 0, 546, 0, 0, 0, 0, 0, 376, 376,
	776, 376, 380, 779, 780, 781, 376, 784, 786, 787,
	788, 789, 380, 791, 792, 793, 794, 795, 376, 376,
	798, 799, 376, 376, 802, 376, 376, 0, 0, 0,
	0, 0, 535, 824, 819, 0, 0, 0, 748, 750,
	761, 806, 0, 0, 0, 0, 539, 0, 0, 342,
	399, 375, 399, 387, 388, 0, 0, 0, 0, 0,
	621, 0, 0, 0, 78, 0, 0, 197, 198, 199,
	200, 201, 0, 822, 0, 0, 0, 25, 0, 26,
	148, 0, 0, 509, 45, 0, 0, 913, 47, 48,
	911, 912, 910, 50, 71, 0, 432, 404, 0, 406,
	0, 424, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 452, 453, 455, 856, 0, 749, 463,
	0, 471, 472, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 403, 478, 0, 0, 482, 0, 484, 485,
	487, 488, 489, 490, 491, 492, 493, 494, 486, 0,
	510, 0, 296, 298, 300, 301, 250, 253, 254, 0,
	281, 0, 0, 275, 652, 654, 656, 306, 0, 0,
	0, 640, 668, 644, 0, 641, 0, 0, 0, 364,
	632, 648, 675, -2, 863, 0, 0, 851, 80, 0,
	529, 530, 534, 532, 533, 525, 721, 0, 0, 551,
	727, 543, 547, 0, 549, 550, 0, 538, 934, 0,
	551, 551, 728, 729, 0, 0, 0, 773, 1102, 396,
	777, 778, 782, 783, 785, 790, 796, 797, 800, 801,
	803, 804, 0, 0, 0, 0, 0, 0, 851, 0,
	820, 0, 0, 746, 747, 810, 813, 762, 763, 764,
	765, 361, 362, 379, 382, 621, 0, 0, 619, 0,
	0, 619, 403, 79, 0, 202, 0, 0, 0, 581,
	21, 165, 0, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 851, 0, 124, 125, 524,
	524, 524, 0, 524, 0, 0, 0, 112, 0, 0,
	815, 896, 84, 85, 186, 187, 0, 940, 0, -2,
	148, 148, -2, 148, 148, 0, 0, 0, 0, 0,
	66, 0, 46, 49, 0, 402, 0, 407, 0, 0,
	0, 410, 0, 425, 412, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	0, 301, 0, 619, 403, 432, 302, 619, 620, 0,
	0, 0, 246, 0, 0, 0, 259, 265, 0, 0,
	0, 642, 0, 669, 645, 0, 75, 0, 0, 860,
	852, 853, 856, 859, 78, 536, 527, 722, 541, 723,
	0, 548, 544, 0, 0, 937, 724, 725, 0, 376,
	776, 376, 0, 0, 774, 775, 0, 0, 0, 0,
	0, 0, 817, 745, 825, 0, 619, 0, 0, 403,
	0, 621, 403, 15, -2, 204, 0, 192, 0, 823,
	0, 168, 0, 0, 859, 0, 908, 0, 0, 100,
	-2, 102, 0, 0, 941, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 107, 108, 109, 0,
	0, 0, 0, 0, 0, 188, 188, 190, 191, 147,
	149, -2, 150, 151, 152, 153, 154, 0, 0, 0,
	0, 0, 914, 72, 433, 0, 408, 413, 411, 414,
	426, 427, 415, 416, 417, 418, 419, 420, 421, 428,
	429, 422, 423, 430, 431, 506, 506, 0, 0, 403,
	477, 0, 480, 432, 476, 481, 0, 511, 301, 0,
	0, 255, 256, 258, 0, 0, 0, 0, 0, 0,
	292, 0, 636, 637, 638, 646, 704, 864, 0, 0,
	0, 0, 855, 863, 81, 0, 537, 0, 0, 726,
	730, 734, 731, 0, 733, 735, 0, 737, 0, 739,
	0, 741, 0, 0, 0, 0, 821, 403, 619, 403,
	432, 0, 619, 432, 19, 0, 203, 20, 0, 119,
	166, 0, 0, 169, 863, 0, 130, 128, 124, 131,
	0, 0, 0, 0, 0, 558, 560, 561, 562, 594,
	0, 596, 0, 0, 0, 106, 595, 96, 0, 0,
	889, 144, 145, 0, 0, 0, -2, 0, 900, 897,
	0, 110, 113, 114, 115, 116, 117, 0, 184, 189,
	0, 822, 0, 37, 926, 0, 0, 0, 0, 405,
	0, 465, 466, 0, 403, 432, 619, 474, 0, 247,
	251, 252, 0, 283, 0, 285, 286, 287, 288, 289,
	290, 291, 0, 0, 861, 862, 854, 76, 556, 552,
	0, 0, 545, 0, 0, 0, 0, 0, 766, 744,
	818, 432, 403, 12, 10, 622, 403, 14, 0, 0,
	120, 170, 167, 183, 0, 0, 0, 0, 94, 0,
	612, -2, 0, 0, 90, 91, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 604, 0, 0, 0, 0,
	0, 0, 615, 0, 597, 0, 599, 600, 103, 594,
	0, 104, 0, 97, 0, 99, 133, 0, 0, 0,
	0, 399, 901, 902, 903, 899, 942, 0, 0, 185,
	0, 0, 929, 927, 0, 403, 403, 0, 0, 409,
	0, 432, 475, 479, 0, 282, 284, 293, 0, 865,
	619, 0, 0, 554, 732, 736, 738, 740, 742, 0,
	0, 0, 9, 13, 432, 205, 22, 121, 0, 126,
	127, 0, 129, 0, 0, 132, 0, 0, 611, 619,
	0, 619, 556, 886, 0, 559, 590, 592, 0, 587,
	602, 603, 605, 0, 607, 0, 609, 610, 563, 564,
	565, 0, 0, 0, 0, 598, 0, 890, 98, 0,
	0, 136, 137, 891, 892, 893, 0, 895, 111, 118,
	0, 192, 39, 0, 928, 432, 432, 38, 434, 0,
	473, 0, 0, 844, 557, 0, 848, 850, 743, 0,
	0, 0, 11, 0, 0, 0, 0, 878, 0, 0,
	-2, 0, 0, 851, 619, 89, 619, 0, 0, 584,
	591, 0, 0, 585, 0, 586, 606, 608, 577, 0,
	0, 0, 0, 0, 582, -2, 134, 135, 0, 0,
	141, 0, 0, 930, 931, 40, 41, 0, 468, 294,
	846, 0, 553, 0, 0, 767, 0, 770, 122, 0,
	0, 130, 82, 0, 878, 866, 880, 882, 0, 78,
	0, 872, -2, 874, 876, 877, 0, 859, 88, 851,
	887, 888, 588, 0, 593, 0, 0, 0, 0, 596,
	0, 138, 139, 140, 894, 0, 0, 77, 0, 0,
	555, 849, 768, 0, 0, 83, 0, 883, -2, 0,
	0, 0, 95, 87, 859, 0, 0, 567, 569, 570,
	571, 572, 573, 574, 575, 576, 0, 0, 0, 615,
	583, 23, 467, 847, 845, 0, 0, 0, 881, 0,
	-2, 0, 873, 875, 86, 589, 566, 0, 616, 617,
	618, 565, 0, 123, 0, 869, 78, 568, 578, 769,
	879, -2,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 403,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 404, 3, 405, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:432
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:437
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:438
		{
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:448
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 9:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:453
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:473
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 11:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:493
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:514
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 13:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:530
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 14:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:547
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:567
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:582
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:593
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:605
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:616
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:632
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:646
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:673
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:687
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:697
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name:       yyDollar[3].tableName,
					IsEnum:     true,
					EnumValues: yyDollar[7].strs,
				},
			}
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:709
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:714
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name:        yyDollar[4].colIdent.String(),
					IfNotExists: bool(yyDollar[3].boolVal),
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:724
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name:        string(yyDollar[4].bytes),
					IfNotExists: bool(yyDollar[3].boolVal),
				},
			}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:735
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:744
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:753
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: "citext",
				},
			}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:762
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[6].bytes),
				},
			}
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:771
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:780
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: "citext",
				},
			}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:791
		{
			yyVAL.statement = &DDL{
				Action:    AddColumn,
				Table:     yyDollar[4].tableName,
				NewName:   yyDollar[4].tableName,
				ColumnDef: yyDollar[7].columnDefinition,
			}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:800
		{
			yyVAL.statement = &DDL{
				Action:    AddColumn,
				Table:     yyDollar[4].tableName,
				NewName:   yyDollar[4].tableName,
				ColumnDef: yyDollar[6].columnDefinition,
			}
		}
	case 37:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:809
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 38:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:823
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 39:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:837
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 40:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:857
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 41:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:875
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:893
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:902
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:911
		{
			yyVAL.statement = &DDL{
				Action:    AddExclusion,
				Table:     yyDollar[4].tableName,
				NewName:   yyDollar[4].tableName,
				Exclusion: yyDollar[6].exclusionDefinition,
			}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:923
		{
			if yyDollar[8].byt != 0 {
				yylex.Error("WITH GRANT OPTION is not supported yet")
				return 1
			}
			// For now, only support single table
			if len(yyDollar[5].tableNames) > 1 {
				yylex.Error("Multiple tables in GRANT are not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[5].tableNames[0],
				Grant: &Grant{
					IsGrant:    true,
					Privileges: yyDollar[2].strs,
					TableName:  yyDollar[5].tableNames[0],
					Grantees:   yyDollar[7].strs,
				},
			}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:945
		{
			if yyDollar[9].byt != 0 {
				yylex.Error("WITH GRANT OPTION is not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[6].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[6].tableName,
					Grantees:   yyDollar[8].strs,
				},
			}
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:962
		{
			if yyDollar[8].byt != 0 {
				yylex.Error("WITH GRANT OPTION is not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[5].tableName,
					Grantees:   yyDollar[7].strs,
				},
			}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:979
		{
			if yyDollar[8].str == "CASCADE" {
				yylex.Error("CASCADE/RESTRICT options are not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: yyDollar[2].strs,
					TableName:  yyDollar[5].tableName,
					Grantees:   yyDollar[7].strs,
				},
			}
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:996
		{
			if yyDollar[9].str == "CASCADE" {
				yylex.Error("CASCADE/RESTRICT options are not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[6].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[6].tableName,
					Grantees:   yyDollar[8].strs,
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1013
		{
			if yyDollar[8].str == "CASCADE" {
				yylex.Error("CASCADE/RESTRICT options are not supported yet")
				return 1
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: []string{"ALL"},
					TableName:  yyDollar[5].tableName,
					Grantees:   yyDollar[7].strs,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1032
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1036
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1042
		{
			yyVAL.str = "SELECT"
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1046
		{
			yyVAL.str = "INSERT"
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1050
		{
			yyVAL.str = "UPDATE"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1054
		{
			yyVAL.str = "DELETE"
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1058
		{
			yyVAL.str = "TRUNCATE"
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1062
		{
			yyVAL.str = "REFERENCES"
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1066
		{
			yyVAL.str = "TRIGGER"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1070
		{
			yyVAL.str = "CREATE"
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1074
		{
			yyVAL.str = "CONNECT"
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1078
		{
			yyVAL.str = "EXECUTE"
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1082
		{
			yyVAL.str = "USAGE"
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1086
		{
			yyVAL.str = strings.ToUpper(yyDollar[1].colIdent.String())
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1092
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1102
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1106
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1110
		{
			yyVAL.str = "PUBLIC"
		}
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1117
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     String(yyDollar[4].tableName),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 71:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1128
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     String(TableName{Name: yyDollar[4].tableIdent}) + "." + yyDollar[6].colIdent.String(),
					Comment:    string(yyDollar[8].bytes),
				},
			}
		}
	case 72:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1139
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     String(TableName{Schema: yyDollar[4].tableIdent, Name: yyDollar[6].tableIdent}) + "." + yyDollar[8].colIdent.String(),
					Comment:    string(yyDollar[10].bytes),
				},
			}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1156
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1164
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 77:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1171
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1177
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1181
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1187
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1191
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 82:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1198
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1210
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1222
		{
			yyVAL.str = InsertStr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1226
		{
			yyVAL.str = ReplaceStr
		}
	case 86:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1232
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 87:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1238
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 88:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1242
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 89:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1246
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1251
		{
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1252
		{
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1256
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1260
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1265
		{
			yyVAL.partitions = nil
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1269
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1275
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1283
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1293
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1310
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1314
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1320
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1325
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1329
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1335
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1342
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1349
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1356
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1364
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1374
		{
			yyVAL.str = ""
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1378
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1382
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1386
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1390
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1396
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1403
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1417
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1421
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1425
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 122:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1432
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1440
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1450
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1454
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1461
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1471
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1482
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1487
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1492
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1499
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1503
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1514
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1518
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1524
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1528
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1532
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1538
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1542
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1546
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1550
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1556
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1560
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1566
		{
			yyVAL.str = SessionStr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1570
		{
			yyVAL.str = GlobalStr
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1575
		{
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1576
		{
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1580
		{
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1581
		{
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1582
		{
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1583
		{
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1584
		{
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1585
		{
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1586
		{
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1590
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1594
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1598
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1602
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1608
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1612
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1616
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1621
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1627
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1631
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1637
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1641
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1646
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1655
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1659
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1668
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1684
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1697
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1707
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1712
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1718
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1719
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1722
		{
			yyVAL.exprs = nil
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1723
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1727
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1732
		{
			yyVAL.empty = struct{}{}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1734
		{
			yyVAL.empty = struct{}{}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1737
		{
			yyVAL.bytes = nil
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1741
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1745
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1750
		{
			yyVAL.bytes = nil
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1754
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1758
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1762
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1766
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1770
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1775
		{
			yyVAL.expr = nil
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1779
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1784
		{
			yyVAL.expr = nil
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1788
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1793
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1797
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1802
		{
			yyVAL.bytes = nil
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1806
		{
			yyVAL.bytes = nil
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1812
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1819
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1825
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1829
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1834
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1838
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1842
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1846
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1850
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1854
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1858
		{
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1864
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1868
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1872
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1877
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1882
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1888
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1899
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1903
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val + "." + yyDollar[3].colIdent.val}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1909
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1922
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1927
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1932
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1937
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1943
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1948
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1953
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1958
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1963
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1968
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1973
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1978
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1983
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1992
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2002
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2007
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2012
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 251:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2019
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 252:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2026
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2034
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 254:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2039
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 255:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2044
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 256:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2049
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2055
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 258:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2061
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 259:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2068
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2075
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2081
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2087
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2091
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2095
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2099
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2105
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2109
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2113
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2117
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2121
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2125
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2129
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2133
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2137
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2141
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2147
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2153
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2159
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2165
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2169
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2174
		{
			yyVAL.sequence = &Sequence{}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2178
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2183
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2188
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2193
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2198
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2203
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2208
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2213
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2218
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2223
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2228
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2233
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 294:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2238
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2245
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2249
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2253
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2257
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2261
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2265
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2270
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2274
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2279
		{
			yyVAL.bytes = nil
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2288
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2293
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2299
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2303
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2307
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2311
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2315
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2319
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2323
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2327
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2331
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2341
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2347
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2353
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2359
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2365
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2371
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2375
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2380
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2384
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2390
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2394
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2398
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2402
		{
			yyVAL.columnType = ColumnType{Type: "timestamp", Length: yyDollar[2].optVal, Timezone: BoolVal(true)}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2406
		{
			yyVAL.columnType = ColumnType{Type: "time", Length: yyDollar[2].optVal, Timezone: BoolVal(true)}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2410
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2414
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2418
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2422
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2426
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2430
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2436
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2440
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2446
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2450
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2458
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2462
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2474
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2514
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 362:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2536
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2540
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2546
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2584
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2589
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2594
		{
			yyVAL.optVal = nil
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2598
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2603
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2607
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2615
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2619
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2625
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2633
		{
			yyVAL.optVal = nil
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2637
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2641
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2650
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2654
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2658
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2663
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2667
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2672
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2676
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2681
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2685
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2689
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2694
		{
			yyVAL.str = ""
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2698
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2702
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2707
		{
			yyVAL.str = ""
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2711
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2715
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2721
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2726
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2730
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2734
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2740
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2744
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2750
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2754
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2760
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2764
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2773
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2777
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2781
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2789
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2793
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2797
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2801
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2805
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2809
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2813
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2824
		{
			yyVAL.str = ""
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2828
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2834
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2838
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2844
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2848
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2854
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2858
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2864
		{
			yyVAL.indexPartition = nil
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2868
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2872
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2878
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2882
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2886
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2890
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2894
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2906
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2910
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2914
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2918
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2922
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2928
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2932
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2938
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2943
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2949
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2953
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2959
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2964
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2968
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent("level"), Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2972
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2976
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2981
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2989
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2999
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3004
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3011
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 465:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3018
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 466:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3025
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 467:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3034
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 468:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3045
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3056
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3060
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3064
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 473:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3074
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3084
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 475:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3095
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 476:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3106
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 477:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3117
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 478:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3126
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 479:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3136
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 480:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3145
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "",
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3154
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				IndexType:  yyDollar[3].colIdent.String(),
				Exclusions: yyDollar[5].exclusionPairs,
				Where:      NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3162
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				IndexType:  "",
				Exclusions: yyDollar[3].exclusionPairs,
				Where:      NewWhere(WhereStr, yyDollar[5].expr),
			}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3172
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3176
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3182
		{
			yyVAL.exclusionPair = ExclusionPair{
				Column:   yyDollar[1].colIdent,
				Operator: yyDollar[3].str,
			}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3189
		{
			yyVAL.exclusionPair = ExclusionPair{
				Column:   NewColIdent(String(yyDollar[1].expr)),
				Operator: yyDollar[3].str,
			}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3198
		{
			yyVAL.str = "="
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3202
		{
			yyVAL.str = "<>"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3206
		{
			yyVAL.str = "<"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3210
		{
			yyVAL.str = ">"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3214
		{
			yyVAL.str = "&&"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3218
		{
			yyVAL.str = "<="
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3222
		{
			yyVAL.str = ">="
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3226
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3232
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3236
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3240
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3246
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3250
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3254
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3258
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3262
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3266
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3272
		{
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3273
		{
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3277
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3281
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3286
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3293
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3297
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3304
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3314
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3318
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3323
		{
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3324
		{
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3328
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3332
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3336
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3342
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3346
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3350
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3355
		{
			setAllowComments(yylex, true)
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3359
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3365
		{
			yyVAL.bytes2 = nil
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3369
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3375
		{
			yyVAL.str = UnionStr
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3379
		{
			yyVAL.str = UnionAllStr
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3383
		{
			yyVAL.str = UnionDistinctStr
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3388
		{
			yyVAL.str = ""
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3392
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3396
		{
			yyVAL.str = SQLCacheStr
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3401
		{
			yyVAL.str = ""
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3405
		{
			yyVAL.str = DistinctStr
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3410
		{
			yyVAL.str = ""
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3414
		{
			yyVAL.str = StraightJoinHint
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3419
		{
			yyVAL.selectExprs = nil
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3423
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3429
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3439
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3443
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3447
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3451
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3456
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3460
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3464
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3476
		{
			yyVAL.overExpr = nil
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3480
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 553:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3484
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3488
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 555:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3492
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3497
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3501
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3507
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3511
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3521
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3525
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3529
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3534
		{
			yyVAL.strs = []string{}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3544
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3548
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3558
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3562
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3566
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3570
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3574
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3588
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 578:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3592
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3598
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3603
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3607
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3613
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3617
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3630
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3634
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3638
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3642
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3648
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3650
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3654
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3656
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3660
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3662
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3665
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3667
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3670
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3674
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3678
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3685
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3691
		{
			yyVAL.str = JoinStr
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3695
		{
			yyVAL.str = JoinStr
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3699
		{
			yyVAL.str = JoinStr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3705
		{
			yyVAL.str = StraightJoinStr
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3711
		{
			yyVAL.str = LeftJoinStr
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3715
		{
			yyVAL.str = LeftJoinStr
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3719
		{
			yyVAL.str = RightJoinStr
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3723
		{
			yyVAL.str = RightJoinStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3729
		{
			yyVAL.str = NaturalJoinStr
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3733
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3743
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3747
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3753
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3757
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3762
		{
			yyVAL.indexHints = nil
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3766
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3770
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3774
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3779
		{
			yyVAL.expr = nil
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3783
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3788
		{
			yyVAL.columns = nil
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3792
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3798
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3802
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3806
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3810
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3814
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3818
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3822
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3826
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3832
		{
			yyVAL.str = ""
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3836
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3842
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3846
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3852
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 636:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3856
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, All: true}
		}
	case 637:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3860
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 638:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3864
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3888
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3892
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 646:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3896
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3900
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3905
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3909
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3913
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.str = IsNullStr
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.str = IsNotNullStr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3927
		{
			yyVAL.str = IsTrueStr
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3931
		{
			yyVAL.str = IsNotTrueStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3935
		{
			yyVAL.str = IsFalseStr
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3939
		{
			yyVAL.str = IsNotFalseStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3945
		{
			yyVAL.str = EqualStr
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3949
		{
			yyVAL.str = LessThanStr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3953
		{
			yyVAL.str = GreaterThanStr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3957
		{
			yyVAL.str = LessEqualStr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3961
		{
			yyVAL.str = GreaterEqualStr
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3965
		{
			yyVAL.str = NotEqualStr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3969
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3973
		{
			yyVAL.str = PosixRegexStr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3977
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3981
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3990
		{
			yyVAL.expr = nil
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3994
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4000
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4004
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4008
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4014
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4020
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4024
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4030
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4034
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4038
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4042
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4046
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4050
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4054
		{
			yyVAL.expr = &CastExpr{Expr: NewStrVal(yyDollar[2].bytes), Type: &ConvertType{Type: "date"}}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4058
		{
			yyVAL.expr = &CastExpr{Expr: NewStrVal(yyDollar[2].bytes), Type: &ConvertType{Type: "time"}}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4062
		{
			yyVAL.expr = &CastExpr{Expr: NewStrVal(yyDollar[2].bytes), Type: &ConvertType{Type: "timestamp"}}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4066
		{
			yyVAL.expr = yyDollar[1].arrayConstructor
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4070
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4074
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4078
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4082
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4086
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4090
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4094
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4098
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4102
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4106
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4110
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4114
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4118
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4122
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.expr = &CastExpr{
				Expr: yyDollar[1].expr,
				Type: &ConvertType{
					Type:   yyDollar[3].columnType.Type,
					Length: yyDollar[3].columnType.Length,
					Scale:  yyDollar[3].columnType.Scale,
				},
			}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4137
		{
			yyVAL.expr = &CastExpr{
				Expr: yyDollar[1].expr,
				Type: &ConvertType{
					Type:   yyDollar[3].columnType.Type,
					Length: yyDollar[3].columnType.Length,
				},
			}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4147
		{
			yyVAL.expr = &CastExpr{
				Expr: yyDollar[1].expr,
				Type: &ConvertType{
					Type: yyDollar[3].columnType.Type,
				},
			}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4156
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 704:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4160
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: &ConvertType{Type: string(yyDollar[3].bytes) + " WITH TIME ZONE"}}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4164
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4168
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4172
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4180
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4194
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4198
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4202
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4210
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4218
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4222
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4230
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4234
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4244
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4248
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4252
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4256
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4260
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 726:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4264
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4268
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4278
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 729:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4282
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 730:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4286
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 731:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4291
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 732:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4295
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 733:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4299
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 734:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4303
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 735:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4307
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 736:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4311
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 737:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4315
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 738:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4319
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 739:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4323
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 740:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4327
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 741:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4331
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 742:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4335
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 743:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4339
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 744:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4343
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 745:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4347
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4351
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4356
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4360
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4364
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4368
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4379
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4383
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4387
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4391
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4396
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4401
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4406
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4411
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4415
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4429
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4433
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4437
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4441
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4447
		{
			yyVAL.str = ""
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4451
		{
			yyVAL.str = BooleanModeStr
		}
	case 768:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4455
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 769:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4459
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4463
		{
			yyVAL.str = QueryExpansionStr
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4469
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4473
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4479
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4483
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4487
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4491
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4495
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4499
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4505
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4509
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4513
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4517
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4521
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4525
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4529
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4533
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4537
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4541
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4545
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4549
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4553
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4557
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4561
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4565
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4569
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4573
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4577
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4581
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4585
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4589
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4593
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4597
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4601
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4605
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4611
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4615
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4619
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4627
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4631
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type, Array: true}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4635
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4639
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4643
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Array: true}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4647
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4652
		{
			yyVAL.expr = nil
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4656
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4661
		{
			yyVAL.str = string("")
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4665
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4671
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4675
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 821:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4681
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4686
		{
			yyVAL.empty = struct{}{}
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4688
		{
			yyVAL.empty = struct{}{}
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4691
		{
			yyVAL.expr = nil
		}
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4695
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4701
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4705
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4709
		{
			yyVAL.colName = &ColName{Name: NewColIdent("level")}
		}
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4713
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 830:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4717
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4723
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4729
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4733
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4738
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4743
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4747
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4751
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4755
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4759
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4763
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4767
		{
			yyVAL.expr = &NullVal{}
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4773
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4777
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4782
		{
			yyVAL.exprs = nil
		}
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4786
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4791
		{
			yyVAL.expr = nil
		}
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4795
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4801
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4805
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4811
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4816
		{
			yyVAL.orderBy = nil
		}
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4820
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4826
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4830
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4836
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4841
		{
			yyVAL.str = AscScr
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4845
		{
			yyVAL.str = AscScr
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4849
		{
			yyVAL.str = DescScr
		}
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4854
		{
			yyVAL.limit = nil
		}
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4858
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 861:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4862
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 862:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4866
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4871
		{
			yyVAL.str = ""
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4875
		{
			yyVAL.str = ForUpdateStr
		}
	case 865:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4879
		{
			yyVAL.str = ShareModeStr
		}
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4892
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4896
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4900
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 869:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4905
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4909
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 871:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4913
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4920
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 873:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4924
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4930
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4934
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4938
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4942
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4947
		{
			yyVAL.updateExprs = nil
		}
	case 879:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4951
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4957
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 881:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4961
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4967
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4971
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 884:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4977
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4983
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4993
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4997
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 888:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5003
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5009
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5013
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 891:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5019
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5023
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5027
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 894:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5032
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5036
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5042
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5048
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5055
		{
			yyVAL.bytes = []byte("charset")
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5062
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5066
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5070
		{
			yyVAL.expr = &Default{}
		}
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5075
		{
			yyVAL.empty = struct{}{}
		}
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5077
		{
			yyVAL.empty = struct{}{}
		}
	case 906:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5080
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5082
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5085
		{
			yyVAL.str = ""
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5087
		{
			yyVAL.str = IgnoreStr
		}
	case 910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5090
		{
			yyVAL.str = ""
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5092
		{
			yyVAL.str = "CASCADE"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5094
		{
			yyVAL.str = "RESTRICT"
		}
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5097
		{
			yyVAL.byt = 0
		}
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5099
		{
			yyVAL.byt = 1
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5103
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5110
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5114
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5118
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5122
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5128
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5132
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5137
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5144
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5150
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5154
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5158
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 929:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5164
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5168
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5172
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 932:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5178
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5182
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 934:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5189
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5193
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: nil}
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5200
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5204
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5211
		{
			// Most expressions should implement ArrayElement now
			// We use a type assertion here since value_expression returns Expr
			yyVAL.arrayElement = yyDollar[1].expr.(ArrayElement)
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5219
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 940:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5223
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5229
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5233
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5411
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5420
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
