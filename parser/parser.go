// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const VINDEX = 57489
const VINDEXES = 57490
const STATUS = 57491
const VARIABLES = 57492
const RESTRICT = 57493
const CASCADE = 57494
const NO = 57495
const ACTION = 57496
const PERMISSIVE = 57497
const RESTRICTIVE = 57498
const PUBLIC = 57499
const CURRENT_USER = 57500
const SESSION_USER = 57501
const PAD_INDEX = 57502
const FILLFACTOR = 57503
const IGNORE_DUP_KEY = 57504
const STATISTICS_NORECOMPUTE = 57505
const STATISTICS_INCREMENTAL = 57506
const ALLOW_ROW_LOCKS = 57507
const ALLOW_PAGE_LOCKS = 57508
const BEFORE = 57509
const AFTER = 57510
const EACH = 57511
const ROW = 57512
const SCROLL = 57513
const CURSOR = 57514
const OPEN = 57515
const CLOSE = 57516
const FETCH = 57517
const PRIOR = 57518
const FIRST = 57519
const LAST = 57520
const DEALLOCATE = 57521
const INSTEAD = 57522
const OF = 57523
const DEFERRABLE = 57524
const INITIALLY = 57525
const IMMEDIATE = 57526
const DEFERRED = 57527
const CONCURRENTLY = 57528
const SQL = 57529
const SECURITY = 57530
const BEGIN = 57531
const START = 57532
const TRANSACTION = 57533
const COMMIT = 57534
const ROLLBACK = 57535
const BIT = 57536
const TINYINT = 57537
const SMALLINT = 57538
const SMALLSERIAL = 57539
const MEDIUMINT = 57540
const INT = 57541
const INTEGER = 57542
const SERIAL = 57543
const BIGINT = 57544
const BIGSERIAL = 57545
const INTNUM = 57546
const REAL = 57547
const DOUBLE = 57548
const PRECISION = 57549
const FLOAT_TYPE = 57550
const DECIMAL = 57551
const NUMERIC = 57552
const SMALLMONEY = 57553
const MONEY = 57554
const TIME = 57555
const TIMESTAMP = 57556
const DATETIME = 57557
const YEAR = 57558
const DATETIMEOFFSET = 57559
const DATETIME2 = 57560
const SMALLDATETIME = 57561
const CHAR = 57562
const VARCHAR = 57563
const VARYING = 57564
const BOOL = 57565
const CHARACTER = 57566
const VARBINARY = 57567
const NCHAR = 57568
const NVARCHAR = 57569
const NTEXT = 57570
const UUID = 57571
const TEXT = 57572
const TINYTEXT = 57573
const MEDIUMTEXT = 57574
const LONGTEXT = 57575
const CITEXT = 57576
const BLOB = 57577
const TINYBLOB = 57578
const MEDIUMBLOB = 57579
const LONGBLOB = 57580
const JSON = 57581
const JSONB = 57582
const ENUM = 57583
const GEOMETRY = 57584
const POINT = 57585
const LINESTRING = 57586
const POLYGON = 57587
const GEOMETRYCOLLECTION = 57588
const MULTIPOINT = 57589
const MULTILINESTRING = 57590
const MULTIPOLYGON = 57591
const VARIADIC = 57592
const ARRAY = 57593
const NOW = 57594
const GETDATE = 57595
const BPCHAR = 57596
const TEXT_PATTERN_OPS = 57597
const NULLX = 57598
const AUTO_INCREMENT = 57599
const APPROXNUM = 57600
const SIGNED = 57601
const UNSIGNED = 57602
const ZEROFILL = 57603
const ZONE = 57604
const AUTOINCREMENT = 57605
const DATABASES = 57606
const TABLES = 57607
const VITESS_KEYSPACES = 57608
const VITESS_SHARDS = 57609
const VITESS_TABLETS = 57610
const VSCHEMA_TABLES = 57611
const EXTENDED = 57612
const FULL = 57613
const PROCESSLIST = 57614
const NAMES = 57615
const CHARSET = 57616
const GLOBAL = 57617
const SESSION = 57618
const ISOLATION = 57619
const LEVEL = 57620
const READ = 57621
const WRITE = 57622
const ONLY = 57623
const REPEATABLE = 57624
const COMMITTED = 57625
const UNCOMMITTED = 57626
const SERIALIZABLE = 57627
const NEW = 57628
const CONCAT_NULL_YIELDS_NULL = 57629
const CURSOR_CLOSE_ON_COMMIT = 57630
const QUOTED_IDENTIFIER = 57631
const ARITHABORT = 57632
const FMTONLY = 57633
const NOCOUNT = 57634
const NOEXEC = 57635
const NUMERIC_ROUNDABORT = 57636
const ANSI_DEFAULTS = 57637
const ANSI_NULL_DFLT_OFF = 57638
const ANSI_NULL_DFLT_ON = 57639
const ANSI_NULLS = 57640
const ANSI_PADDING = 57641
const ANSI_WARNINGS = 57642
const FORCEPLAN = 57643
const SHOWPLAN_ALL = 57644
const SHOWPLAN_TEXT = 57645
const SHOWPLAN_XML = 57646
const IMPLICIT_TRANSACTIONS = 57647
const REMOTE_PROC_TRANSACTIONS = 57648
const XACT_ABORT = 57649
const CURRENT_TIMESTAMP = 57650
const DATABASE = 57651
const CURRENT_DATE = 57652
const CURRENT_TIME = 57653
const LOCALTIME = 57654
const LOCALTIMESTAMP = 57655
const UTC_DATE = 57656
const UTC_TIME = 57657
const UTC_TIMESTAMP = 57658
const REPLACE = 57659
const CONVERT = 57660
const CAST = 57661
const SUBSTR = 57662
const SUBSTRING = 57663
const GROUP_CONCAT = 57664
const SEPARATOR = 57665
const INHERIT = 57666
const LEAD = 57667
const LAG = 57668
const MATCH = 57669
const AGAINST = 57670
const BOOLEAN = 57671
const LANGUAGE = 57672
const WITH = 57673
const WITHOUT = 57674
const PARSER = 57675
const QUERY = 57676
const EXPANSION = 57677
const UNUSED = 57678
const VIRTUAL = 57679
const STORED = 57680
const GENERATED = 57681
const ALWAYS = 57682
const IDENTITY = 57683
const SEQUENCE = 57684
const INCREMENT = 57685
const MINVALUE = 57686
const CACHE = 57687
const CYCLE = 57688
const OWNED = 57689
const NONE = 57690
const CLUSTERED = 57691
const NONCLUSTERED = 57692
const REPLICATION = 57693
const COLUMNSTORE = 57694
const INCLUDE = 57695
const HOLDLOCK = 57696
const NOLOCK = 57697
const NOWAIT = 57698
const PAGLOCK = 57699
const ROWLOCK = 57700
const TABLELOCK = 57701
const DEFINER = 57702
const INVOKER = 57703
const TYPECAST = 57704
const CHECK = 57705
const OVER = 57706

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 26,
	-2, 4,
	-1, 29,
	130, 404,
	-2, 160,
	-1, 35,
	166, 512,
	167, 512,
	-2, 502,
	-1, 281,
	119, 900,
	-2, 896,
	-1, 282,
	119, 901,
	-2, 897,
	-1, 283,
	119, 902,
	-2, 246,
	-1, 325,
	268, 911,
	-2, 791,
	-1, 359,
	86, 1152,
	-2, 85,
	-1, 360,
	86, 1102,
	-2, 86,
	-1, 366,
	86, 1081,
	-2, 869,
	-1, 368,
	86, 1126,
	-2, 871,
	-1, 629,
	268, 911,
	-2, 540,
	-1, 679,
	268, 911,
	-2, 540,
	-1, 709,
	55, 40,
	57, 40,
	-2, 42,
	-1, 741,
	116, 1076,
	251, 1076,
	257, 1076,
	-2, 283,
	-1, 742,
	116, 1077,
	251, 1077,
	257, 1077,
	-2, 284,
	-1, 743,
	251, 1079,
	257, 1079,
	-2, 318,
	-1, 744,
	251, 1080,
	257, 1080,
	-2, 318,
	-1, 745,
	251, 1181,
	257, 1181,
	-2, 325,
	-1, 746,
	251, 1127,
	257, 1127,
	-2, 318,
	-1, 747,
	251, 1132,
	257, 1132,
	-2, 325,
	-1, 748,
	116, 1130,
	251, 1130,
	257, 1130,
	-2, 290,
	-1, 750,
	116, 1180,
	251, 1180,
	257, 1180,
	-2, 325,
	-1, 751,
	251, 1166,
	257, 1166,
	-2, 338,
	-1, 752,
	251, 1172,
	257, 1172,
	-2, 338,
	-1, 753,
	251, 1120,
	257, 1120,
	-2, 338,
	-1, 754,
	251, 1116,
	257, 1116,
	-2, 338,
	-1, 756,
	116, 1075,
	251, 1075,
	257, 1075,
	-2, 299,
	-1, 757,
	116, 1170,
	251, 1170,
	257, 1170,
	-2, 300,
	-1, 758,
	116, 1118,
	251, 1118,
	257, 1118,
	-2, 301,
	-1, 759,
	116, 1115,
	251, 1115,
	257, 1115,
	-2, 302,
	-1, 760,
	116, 1107,
	251, 1107,
	257, 1107,
	-2, 303,
	-1, 762,
	116, 1179,
	251, 1179,
	257, 1179,
	-2, 305,
	-1, 765,
	116, 1088,
	251, 1088,
	257, 1088,
	-2, 275,
	-1, 766,
	116, 1168,
	251, 1168,
	257, 1168,
	-2, 318,
	-1, 767,
	116, 1169,
	251, 1169,
	257, 1169,
	-2, 318,
	-1, 768,
	116, 1089,
	251, 1089,
	257, 1089,
	-2, 318,
	-1, 769,
	116, 1090,
	251, 1090,
	257, 1090,
	-2, 318,
	-1, 770,
	116, 1091,
	251, 1091,
	257, 1091,
	-2, 318,
	-1, 771,
	116, 1159,
	251, 1159,
	257, 1159,
	-2, 281,
	-1, 772,
	116, 1193,
	251, 1193,
	257, 1193,
	-2, 282,
	-1, 773,
	116, 1099,
	251, 1099,
	257, 1099,
	-2, 308,
	-1, 774,
	116, 1136,
	251, 1136,
	257, 1136,
	-2, 309,
	-1, 775,
	116, 1114,
	251, 1114,
	257, 1114,
	-2, 310,
	-1, 776,
	116, 1137,
	251, 1137,
	257, 1137,
	-2, 311,
	-1, 777,
	116, 1100,
	251, 1100,
	257, 1100,
	-2, 312,
	-1, 778,
	116, 1124,
	251, 1124,
	257, 1124,
	-2, 313,
	-1, 779,
	116, 1123,
	251, 1123,
	257, 1123,
	-2, 314,
	-1, 780,
	116, 1125,
	251, 1125,
	257, 1125,
	-2, 315,
	-1, 781,
	116, 1074,
	251, 1074,
	257, 1074,
	-2, 257,
	-1, 782,
	116, 1171,
	251, 1171,
	257, 1171,
	-2, 258,
	-1, 783,
	116, 1160,
	251, 1160,
	257, 1160,
	-2, 259,
	-1, 784,
	116, 1162,
	251, 1162,
	257, 1162,
	-2, 260,
	-1, 785,
	116, 1119,
	251, 1119,
	257, 1119,
	-2, 261,
	-1, 786,
	116, 1104,
	251, 1104,
	257, 1104,
	-2, 262,
	-1, 787,
	116, 1105,
	251, 1105,
	257, 1105,
	-2, 263,
	-1, 788,
	116, 1153,
	251, 1153,
	257, 1153,
	-2, 264,
	-1, 789,
	116, 1072,
	251, 1072,
	257, 1072,
	-2, 265,
	-1, 790,
	116, 1073,
	251, 1073,
	257, 1073,
	-2, 266,
	-1, 791,
	116, 1144,
	251, 1144,
	257, 1144,
	-2, 320,
	-1, 792,
	116, 1093,
	251, 1093,
	257, 1093,
	-2, 320,
	-1, 793,
	116, 1097,
	251, 1097,
	257, 1097,
	-2, 320,
	-1, 794,
	116, 1092,
	251, 1092,
	257, 1092,
	-2, 322,
	-1, 795,
	116, 1131,
	251, 1131,
	257, 1131,
	-2, 322,
	-1, 796,
	116, 1122,
	251, 1122,
	257, 1122,
	-2, 273,
	-1, 797,
	116, 1161,
	251, 1161,
	257, 1161,
	-2, 274,
	-1, 874,
	119, 904,
	-2, 899,
	-1, 918,
	116, 338,
	268, 338,
	383, 338,
	-2, 251,
	-1, 919,
	268, 303,
	383, 303,
	-2, 252,
	-1, 920,
	268, 304,
	383, 304,
	-2, 253,
	-1, 943,
	268, 911,
	-2, 318,
	-1, 944,
	57, 318,
	59, 318,
	241, 318,
	-2, 1079,
	-1, 945,
	57, 753,
	-2, 1088,
	-1, 946,
	57, 318,
	-2, 1089,
	-1, 947,
	57, 322,
	-2, 1092,
	-1, 948,
	57, 756,
	-2, 1107,
	-1, 950,
	57, 318,
	-2, 1127,
	-1, 951,
	57, 759,
	-2, 1158,
	-1, 952,
	57, 318,
	-2, 1168,
	-1, 953,
	57, 762,
	-2, 1177,
	-1, 954,
	57, 764,
	-2, 1072,
	-1, 955,
	57, 765,
	-2, 1074,
	-1, 956,
	57, 766,
	-2, 1104,
	-1, 957,
	57, 767,
	-2, 1122,
	-1, 958,
	57, 322,
	-2, 1131,
	-1, 959,
	57, 769,
	-2, 1160,
	-1, 960,
	57, 770,
	-2, 1161,
	-1, 961,
	57, 771,
	-2, 1171,
	-1, 962,
	57, 772,
	-2, 1097,
	-1, 963,
	57, 773,
	-2, 1144,
	-1, 964,
	57, 318,
	-2, 1090,
	-1, 965,
	57, 318,
	-2, 1091,
	-1, 966,
	57, 776,
	-2, 1159,
	-1, 967,
	57, 777,
	-2, 1166,
	-1, 968,
	57, 318,
	-2, 1181,
	-1, 969,
	57, 780,
	-2, 1130,
	-1, 970,
	57, 318,
	-2, 1132,
	-1, 971,
	57, 318,
	-2, 1180,
	-1, 1047,
	142, 414,
	-2, 1086,
	-1, 1173,
	268, 911,
	-2, 540,
	-1, 1183,
	116, 318,
	268, 318,
	383, 318,
	-2, 247,
	-1, 1197,
	5, 27,
	-2, 666,
	-1, 1240,
	5, 26,
	-2, 840,
	-1, 1289,
	59, 379,
	-2, 376,
	-1, 1306,
	119, 902,
	-2, 246,
	-1, 1571,
	5, 26,
	-2, 94,
	-1, 1573,
	5, 26,
	-2, 96,
	-1, 1626,
	5, 27,
	-2, 841,
	-1, 1696,
	5, 26,
	-2, 95,
	-1, 1730,
	5, 26,
	-2, 843,
	-1, 1811,
	58, 107,
	-2, 179,
	-1, 1814,
	58, 107,
	-2, 179,
	-1, 1886,
	189, 53,
	-2, 179,
	-1, 1925,
	58, 107,
	-2, 178,
	-1, 1950,
	5, 27,
	-2, 844,
	-1, 2109,
	5, 26,
	-2, 49,
}

const yyPrivate = 57344

const yyLast = 21797

var yyAct = [...]int16{
	370, 2066, 2065, 732, 1935, 1745, 1786, 1566, 1943, 1842,
	1121, 1887, 632, 3, 1889, 1659, 1789, 807, 560, 731,
	1565, 1865, 287, 633, 1924, 995, 1782, 1636, 315, 1632,
	1476, 1519, 298, 1256, 95, 265, 1278, 95, 277, 1281,
	21, 857, 701, 1507, 1649, 1013, 286, 1359, 1477, 1304,
	1473, 703, 1042, 1129, 1107, 53, 1189, 1130, 282, 1036,
	264, 95, 95, 1311, 996, 1243, 1057, 1261, 942, 290,
	813, 614, 899, 1102, 1742, 95, 544, 365, 1184, 932,
	1178, 1052, 719, 928, 95, 542, 95, 1342, 258, 1248,
	1957, 566, 95, 981, 1073, 876, 269, 510, 1083, 1815,
	718, 358, 992, 344, 705, 285, 690, 346, 1422, 849,
	733, 1324, 1075, 657, 927, 345, 739, 1033, 1166, 734,
	575, 2090, 52, 1071, 46, 1427, 48, 25, 26, 1514,
	349, 259, 260, 261, 262, 2057, 615, 273, 1801, 361,
	1637, 1638, 1639, 1640, 1641, 1642, 989, 1536, 351, 1802,
	1089, 589, 1783, 279, 599, 590, 591, 592, 593, 594,
	595, 596, 589, 599, 500, 599, 1520, 1616, 559, 512,
	1118, 1119, 518, 1665, 517, 1521, 1522, 355, 1833, 1523,
	519, 520, 92, 588, 587, 597, 598, 590, 591, 592,
	593, 594, 595, 596, 589, 1673, 2115, 599, 559, 592,
	593, 594, 595, 596, 589, 1975, 1976, 599, 1302, 558,
	354, 588, 587, 597, 598, 590, 591, 592, 593, 594,
	595, 596, 589, 515, 353, 599, 2121, 1074, 2028, 2047,
	1948, 1846, 523, 1847, 524, 1185, 1186, 95, 1079, 1039,
	531, 588, 587, 597, 598, 590, 591, 592, 593, 594,
	595, 596, 589, 1808, 2102, 599, 1122, 1994, 1257, 1181,
	2027, 1468, 1972, 1807, 1620, 521, 2040, 282, 282, 1500,
	1501, 1027, 1028, 1617, 1947, 1527, 1499, 552, 1269, 282,
	720, 1268, 721, 569, 1270, 1026, 1605, 1604, 1603, 1326,
	1077, 628, 282, 282, 282, 282, 282, 282, 282, 846,
	90, 86, 87, 1090, 88, 1204, 847, 1079, 1803, 1804,
	1806, 1079, 1460, 1079, 1805, 986, 1420, 282, 1419, 1418,
	1211, 1209, 257, 2119, 568, 1103, 282, 545, 546, 547,
	1316, 550, 1318, 1317, 2015, 805, 2113, 2112, 554, 2071,
	1135, 2098, 2099, 2062, 95, 505, 1882, 1788, 1578, 1579,
	1761, 95, 95, 95, 616, 588, 587, 597, 598, 590,
	591, 592, 593, 594, 595, 596, 589, 1866, 2114, 599,
	2100, 548, 549, 1515, 1936, 1400, 993, 1937, 54, 1727,
	1585, 1667, 583, 1666, 586, 533, 1521, 1522, 1288, 1296,
	601, 602, 603, 604, 605, 606, 607, 1586, 584, 585,
	582, 608, 609, 610, 611, 588, 587, 597, 598, 590,
	591, 592, 593, 594, 595, 596, 589, 507, 600, 599,
	349, 559, 1053, 1295, 1283, 1710, 1513, 600, 2080, 600,
	1834, 1595, 1821, 361, 2046, 1421, 2048, 2118, 511, 1054,
	526, 84, 1014, 1016, 1699, 620, 621, 622, 623, 624,
	625, 626, 49, 662, 1613, 83, 663, 84, 1614, 1289,
	2070, 600, 804, 1662, 1286, 825, 508, 1260, 1259, 1258,
	504, 600, 503, 522, 1525, 516, 1054, 588, 587, 597,
	598, 590, 591, 592, 593, 594, 595, 596, 589, 600,
	1183, 599, 685, 1104, 1090, 815, 1082, 1674, 89, 236,
	2095, 709, 588, 587, 597, 598, 590, 591, 592, 593,
	594, 595, 596, 589, 85, 1401, 599, 2106, 95, 600,
	1719, 1657, 798, 95, 1015, 1847, 95, 1657, 1179, 95,
	1185, 1186, 1415, 95, 716, 1053, 588, 587, 597, 598,
	590, 591, 592, 593, 594, 595, 596, 589, 1397, 1301,
	599, 2039, 1054, 1038, 95, 1838, 588, 587, 597, 598,
	590, 591, 592, 593, 594, 595, 596, 589, 1629, 1946,
	599, 95, 1915, 282, 282, 1544, 1410, 710, 618, 619,
	282, 1224, 282, 1172, 855, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	1660, 1661, 1663, 803, 860, 723, 806, 631, 579, 824,
	834, 877, 532, 852, 820, 1035, 1034, 1405, 1977, 921,
	835, 836, 837, 838, 839, 840, 841, 842, 572, 1554,
	282, 537, 574, 600, 843, 844, 282, 282, 282, 282,
	282, 282, 282, 282, 574, 1858, 1159, 282, 938, 559,
	1857, 832, 878, 931, 1856, 1398, 873, 874, 1396, 1855,
	816, 817, 1854, 973, 975, 1853, 821, 573, 572, 983,
	815, 822, 1399, 818, 826, 1852, 648, 829, 1850, 282,
	282, 282, 282, 600, 574, 95, 1555, 282, 95, 95,
	95, 95, 95, 1575, 1271, 1246, 722, 870, 872, 1404,
	95, 539, 848, 95, 541, 814, 2110, 95, 934, 997,
	1220, 902, 95, 95, 904, 938, 1981, 905, 2108, 862,
	663, 1218, 1470, 282, 922, 925, 2111, 1916, 1917, 1918,
	1983, 1160, 982, 538, 540, 875, 1280, 810, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 979, 1021, 600, 1219, 349, 349, 349,
	349, 349, 682, 988, 1746, 573, 572, 1978, 982, 1763,
	1229, 883, 349, 1760, 573, 572, 930, 50, 1748, 861,
	600, 349, 574, 939, 940, 881, 882, 880, 879, 978,
	1958, 574, 361, 1280, 974, 1292, 999, 1000, 1759, 1002,
	1032, 95, 2083, 998, 95, 1010, 1001, 95, 1279, 2082,
	1959, 1018, 1019, 95, 600, 95, 2045, 1023, 1024, 618,
	619, 95, 1280, 1136, 95, 987, 95, 990, 991, 95,
	1040, 1851, 1280, 994, 600, 816, 817, 2044, 525, 1169,
	1170, 1171, 935, 937, 2043, 1868, 1086, 1291, 818, 1088,
	1109, 1960, 1747, 1681, 282, 282, 282, 282, 1327, 985,
	854, 1022, 1956, 573, 572, 2041, 1105, 1106, 587, 597,
	598, 590, 591, 592, 593, 594, 595, 596, 589, 1168,
	574, 599, 282, 282, 282, 1773, 1749, 1750, 1751, 1752,
	1753, 1754, 1755, 573, 572, 1125, 1680, 1127, 536, 853,
	2014, 1327, 1116, 1091, 1092, 1093, 1094, 1689, 1688, 877,
	574, 1012, 2042, 1532, 1327, 1157, 858, 859, 573, 572,
	1979, 1980, 1982, 1984, 1985, 1349, 304, 528, 529, 530,
	282, 1958, 873, 874, 2006, 574, 1347, 282, 1333, 573,
	572, 1323, 1332, 900, 282, 901, 1472, 1726, 1167, 1112,
	878, 1959, 1115, 50, 1686, 1120, 574, 1201, 630, 1200,
	1190, 1128, 1597, 1134, 1343, 1109, 1298, 573, 572, 1137,
	630, 1848, 1154, 82, 1155, 1518, 1174, 1156, 573, 572,
	282, 1105, 1106, 282, 574, 95, 866, 868, 869, 364,
	1517, 501, 1516, 867, 1221, 574, 509, 1880, 2126, 513,
	514, 1377, 1207, 1654, 2101, 1240, 650, 651, 652, 653,
	654, 655, 656, 1212, 1734, 2054, 1187, 1654, 2035, 1880,
	2034, 95, 597, 598, 590, 591, 592, 593, 594, 595,
	596, 589, 54, 343, 599, 1175, 1176, 1177, 588, 587,
	597, 598, 590, 591, 592, 593, 594, 595, 596, 589,
	2031, 2030, 599, 2020, 559, 1654, 2017, 1744, 1654, 2016,
	1654, 1988, 559, 1264, 1734, 1933, 1734, 1785, 1987, 95,
	1734, 1770, 282, 1290, 1228, 559, 1192, 1272, 1378, 1374,
	1369, 1124, 1379, 1376, 1375, 1263, 913, 1265, 1373, 831,
	349, 1253, 1734, 559, 1737, 1736, 1923, 620, 830, 1380,
	1734, 1735, 1877, 1297, 1315, 811, 1372, 809, 1266, 1654,
	1653, 95, 713, 1274, 46, 95, 534, 95, 1313, 1496,
	559, 1628, 559, 1182, 1561, 1560, 1226, 1557, 1558, 1557,
	1556, 1284, 1285, 1287, 1193, 559, 936, 559, 1191, 1238,
	1194, 1195, 687, 559, 1239, 600, 730, 729, 1197, 1198,
	1199, 527, 1881, 1871, 1880, 1706, 714, 275, 712, 936,
	95, 95, 282, 1870, 50, 1779, 46, 364, 364, 364,
	364, 1778, 364, 1777, 282, 1774, 1345, 1346, 1348, 364,
	282, 282, 1693, 1682, 1344, 1676, 1551, 1474, 1225, 1364,
	1244, 54, 1370, 1231, 282, 1600, 1729, 1233, 1234, 1360,
	1235, 1236, 577, 282, 1550, 1365, 1545, 1336, 1244, 1338,
	1339, 1340, 1341, 1245, 1223, 1363, 50, 1299, 1364, 2025,
	282, 282, 282, 282, 282, 282, 1245, 1367, 46, 686,
	282, 1328, 1329, 1193, 1331, 2001, 1334, 1335, 1020, 282,
	712, 1193, 1402, 1624, 687, 282, 282, 282, 1654, 1412,
	282, 1675, 1574, 282, 1480, 687, 1414, 1413, 687, 1350,
	1222, 997, 1423, 1354, 1475, 1356, 1559, 997, 1478, 1428,
	1275, 1244, 282, 1425, 1457, 1563, 1562, 50, 50, 2116,
	1071, 1072, 1469, 364, 1025, 1506, 1193, 1461, 1202, 715,
	725, 856, 2022, 1876, 1862, 1861, 1818, 1817, 600, 1484,
	1781, 1467, 874, 1780, 1772, 1060, 282, 808, 1408, 1485,
	1483, 1711, 1708, 1694, 1543, 1079, 600, 1746, 1366, 1497,
	1067, 1108, 1055, 1570, 1542, 1540, 1529, 1491, 1489, 1056,
	1498, 1748, 1352, 1416, 1417, 1505, 1103, 1303, 1315, 692,
	695, 696, 697, 693, 1277, 694, 698, 1249, 1250, 1162,
	1504, 1843, 1313, 282, 95, 1533, 1459, 1096, 1526, 1095,
	1524, 1110, 1111, 1255, 95, 1084, 64, 1867, 1571, 1564,
	1573, 1474, 1353, 1462, 1463, 1464, 1465, 1466, 1535, 1252,
	1114, 828, 1537, 812, 553, 1567, 1007, 1063, 1005, 1058,
	1068, 1008, 1254, 1006, 1004, 95, 1003, 1065, 1064, 2077,
	2026, 1009, 1424, 696, 697, 1747, 282, 692, 695, 696,
	697, 693, 1409, 694, 698, 1163, 282, 1249, 1250, 1582,
	556, 557, 1581, 647, 563, 567, 2074, 1276, 738, 738,
	799, 802, 1337, 728, 535, 561, 580, 1531, 1622, 1749,
	1750, 1751, 1752, 1753, 1754, 1755, 1546, 1547, 562, 1549,
	364, 2064, 1552, 1553, 1596, 858, 859, 1126, 1712, 827,
	1588, 364, 364, 364, 364, 364, 364, 364, 364, 1572,
	1590, 1495, 1530, 282, 634, 364, 364, 1362, 1357, 1606,
	282, 1548, 1355, 645, 1593, 819, 700, 1412, 1207, 62,
	271, 272, 850, 2091, 1148, 1705, 95, 1577, 1212, 1512,
	984, 266, 1569, 577, 2049, 1940, 364, 1827, 1147, 267,
	54, 1939, 1580, 57, 59, 60, 61, 1823, 1245, 2011,
	1631, 2010, 1643, 1644, 1645, 1061, 1623, 1664, 2009, 282,
	2008, 1062, 570, 1648, 1860, 282, 263, 1859, 1152, 1835,
	921, 1294, 738, 1592, 851, 924, 924, 1646, 1146, 1131,
	1132, 1133, 1669, 926, 1974, 1973, 1511, 1510, 364, 1672,
	56, 58, 1670, 282, 1371, 95, 1584, 1315, 976, 1602,
	1795, 8, 1701, 976, 1702, 1703, 1704, 1037, 316, 47,
	1650, 1313, 1274, 1690, 1677, 1696, 1707, 1700, 1792, 7,
	1793, 6, 1791, 5, 711, 1567, 51, 1, 1888, 66,
	1695, 95, 1143, 1140, 1141, 65, 1139, 1069, 1942, 1070,
	1845, 1717, 1426, 976, 282, 282, 506, 282, 282, 282,
	1698, 1683, 1697, 1601, 1117, 1188, 47, 627, 302, 2097,
	2069, 1066, 288, 1635, 270, 2002, 1150, 1153, 1608, 350,
	1730, 1885, 364, 1715, 1997, 1914, 1322, 1059, 1869, 1300,
	364, 1360, 1650, 1478, 67, 1993, 1879, 501, 1576, 1361,
	1381, 1123, 1358, 1718, 1142, 1714, 1684, 1609, 1610, 282,
	349, 1611, 1612, 1728, 282, 1615, 1934, 1953, 1743, 1656,
	1045, 1273, 499, 63, 1849, 1046, 1044, 1043, 1041, 1625,
	1626, 1627, 1741, 1630, 1325, 282, 1758, 1757, 1756, 1766,
	1076, 1762, 737, 735, 736, 740, 1764, 1685, 1790, 1687,
	244, 356, 699, 1692, 724, 1784, 1368, 571, 1395, 1394,
	1145, 1138, 1403, 845, 1158, 551, 246, 1567, 1113, 612,
	863, 864, 1267, 1810, 363, 1481, 364, 565, 364, 1938,
	1822, 1819, 1227, 644, 1837, 980, 738, 1800, 1679, 1844,
	289, 865, 301, 1144, 300, 299, 364, 1237, 1478, 581,
	1836, 348, 683, 691, 689, 1840, 688, 1720, 1721, 282,
	1722, 1723, 1724, 1825, 1251, 1841, 1247, 347, 1599, 1619,
	1832, 282, 364, 555, 1161, 24, 55, 933, 342, 1874,
	19, 1883, 18, 634, 17, 20, 941, 972, 16, 15,
	14, 1873, 28, 1775, 1809, 1776, 1872, 1799, 282, 282,
	13, 12, 11, 1567, 1149, 10, 9, 1716, 1798, 543,
	543, 543, 543, 1797, 543, 1931, 1932, 1796, 282, 1725,
	1800, 543, 1151, 1794, 798, 4, 282, 1926, 1927, 1928,
	1929, 1930, 268, 22, 2, 0, 1919, 1922, 1875, 47,
	0, 1878, 1954, 1738, 1739, 1740, 1884, 0, 997, 613,
	577, 1949, 0, 617, 0, 0, 0, 0, 1968, 0,
	1969, 0, 0, 0, 0, 1966, 1967, 0, 0, 0,
	1031, 1769, 282, 629, 1998, 1970, 0, 0, 0, 0,
	2003, 0, 0, 0, 0, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 1991, 646, 1990, 649, 649, 649,
	649, 649, 649, 649, 649, 0, 678, 679, 680, 681,
	2000, 2012, 0, 1800, 0, 0, 0, 1824, 1826, 702,
	1828, 1829, 1830, 1831, 0, 0, 0, 0, 1986, 0,
	282, 282, 0, 0, 1262, 1961, 1962, 1963, 1964, 1965,
	1989, 2018, 0, 1992, 0, 0, 0, 0, 0, 0,
	1800, 1920, 0, 364, 2024, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1282, 0, 0, 1863, 0, 2005,
	0, 0, 0, 0, 0, 1293, 0, 0, 0, 2037,
	2038, 0, 0, 2036, 0, 0, 0, 0, 1320, 2053,
	0, 2058, 2056, 2032, 2033, 0, 0, 0, 0, 0,
	0, 1164, 1165, 2060, 567, 0, 1790, 0, 2068, 2059,
	0, 2063, 0, 0, 0, 2073, 282, 0, 0, 2072,
	2075, 2067, 0, 0, 2076, 1941, 0, 2079, 1351, 0,
	1800, 0, 1945, 0, 0, 0, 0, 1950, 0, 364,
	95, 0, 0, 2051, 1800, 1800, 1800, 2055, 282, 0,
	2086, 2050, 0, 2052, 0, 2003, 0, 2094, 0, 1883,
	2094, 0, 0, 0, 1971, 0, 0, 0, 0, 0,
	0, 95, 0, 364, 0, 0, 81, 0, 0, 0,
	0, 2105, 0, 0, 1196, 0, 0, 0, 2107, 364,
	0, 0, 543, 0, 2109, 0, 1800, 1387, 1800, 1800,
	2081, 0, 0, 543, 543, 543, 543, 543, 543, 543,
	543, 282, 2123, 2122, 0, 2094, 2087, 543, 543, 0,
	2088, 0, 0, 0, 1078, 0, 0, 0, 71, 76,
	1230, 68, 0, 0, 2019, 0, 0, 0, 0, 0,
	0, 364, 0, 0, 72, 0, 79, 0, 0, 0,
	1800, 0, 0, 0, 1800, 976, 0, 0, 1482, 1262,
	0, 976, 73, 74, 69, 0, 0, 0, 1388, 0,
	0, 0, 0, 2117, 1390, 1383, 1384, 0, 1391, 1386,
	1385, 0, 1180, 0, 1393, 1389, 47, 0, 0, 0,
	364, 0, 0, 0, 1508, 1392, 0, 0, 0, 0,
	0, 0, 1382, 0, 635, 658, 588, 587, 597, 598,
	590, 591, 592, 593, 594, 595, 596, 589, 0, 2104,
	599, 0, 1320, 0, 588, 587, 597, 598, 590, 591,
	592, 593, 594, 595, 596, 589, 0, 0, 599, 0,
	660, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 350, 350, 350, 350,
	350, 0, 0, 0, 2124, 0, 0, 0, 0, 1568,
	0, 702, 0, 1017, 0, 0, 0, 0, 2103, 0,
	350, 0, 0, 1583, 0, 0, 1587, 0, 0, 1589,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1591,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	0, 0, 0, 0, 0, 0, 0, 1594, 0, 0,
	0, 661, 0, 0, 2128, 2129, 70, 364, 0, 676,
	659, 0, 0, 0, 0, 665, 664, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 0, 75, 0, 0, 46, 0, 48,
	25, 26, 0, 0, 0, 0, 77, 78, 0, 80,
	0, 1801, 0, 0, 0, 0, 0, 1471, 543, 0,
	543, 0, 1802, 0, 0, 0, 0, 46, 23, 48,
	25, 26, 0, 1486, 1487, 0, 0, 1488, 543, 0,
	1490, 0, 0, 0, 0, 0, 1633, 41, 0, 1633,
	1633, 1633, 27, 1647, 0, 0, 0, 0, 0, 1502,
	364, 0, 364, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 36, 0, 677, 564, 50, 0, 0,
	0, 0, 1173, 0, 0, 0, 1633, 0, 0, 0,
	0, 1320, 0, 1678, 0, 0, 0, 0, 0, 0,
	0, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 256, 46, 0, 48, 25, 26, 1568,
	1691, 0, 0, 0, 600, 0, 1808, 1633, 1801, 0,
	0, 364, 364, 0, 276, 0, 1807, 93, 93, 1802,
	0, 1709, 600, 29, 30, 32, 31, 34, 0, 0,
	0, 93, 1713, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 93, 0, 0, 0, 0, 0, 93, 35,
	42, 43, 0, 0, 44, 45, 33, 658, 0, 0,
	0, 1803, 1804, 1806, 0, 1732, 1733, 1805, 0, 0,
	0, 0, 46, 1598, 48, 25, 26, 2013, 0, 0,
	0, 1241, 1242, 0, 0, 0, 1801, 0, 0, 0,
	0, 1508, 660, 0, 0, 0, 0, 1802, 0, 0,
	0, 0, 0, 1765, 0, 0, 0, 37, 38, 350,
	39, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1808, 0, 0, 0, 0, 0, 0,
	0, 1568, 0, 1807, 0, 0, 1787, 0, 0, 0,
	1621, 0, 0, 0, 0, 1811, 0, 634, 1633, 0,
	0, 2127, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 0, 906, 907, 0, 908, 909, 910, 912,
	911, 1839, 903, 661, 0, 0, 0, 0, 1803, 1804,
	1806, 676, 659, 0, 1805, 0, 0, 665, 664, 0,
	0, 0, 0, 93, 1999, 46, 1671, 48, 25, 26,
	0, 1808, 0, 0, 0, 49, 0, 0, 0, 1801,
	0, 1807, 0, 0, 0, 0, 0, 1568, 1508, 0,
	1802, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 1886, 0,
	1911, 1912, 1913, 0, 0, 543, 0, 0, 1925, 1811,
	1811, 1925, 1811, 1811, 1508, 1508, 1803, 1804, 1806, 0,
	0, 0, 1805, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 0, 2096, 1951, 0, 0, 0, 0,
	1952, 0, 0, 0, 1955, 0, 0, 677, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1787, 1508,
	93, 0, 46, 0, 48, 25, 26, 93, 707, 93,
	0, 0, 0, 1633, 0, 0, 1801, 1995, 0, 0,
	0, 0, 49, 738, 1808, 0, 0, 1802, 1479, 0,
	47, 0, 0, 0, 1807, 0, 1767, 0, 0, 0,
	0, 1771, 0, 0, 0, 0, 0, 1492, 1493, 1494,
	0, 2007, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1925, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 242, 2021, 0, 0, 0, 0, 0, 1803,
	1804, 1806, 0, 0, 0, 1805, 1528, 0, 1080, 1081,
	0, 1085, 0, 46, 1087, 48, 25, 26, 252, 0,
	49, 0, 0, 1538, 0, 0, 0, 1801, 0, 629,
	0, 1097, 1098, 1099, 1100, 1101, 0, 0, 1802, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1808, 0, 0, 0, 0, 1864, 0, 2061, 0,
	0, 1807, 0, 0, 47, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 237, 0, 0, 0, 1508,
	0, 239, 0, 0, 0, 0, 2078, 0, 245, 241,
	0, 0, 2093, 0, 93, 0, 1921, 0, 0, 93,
	0, 0, 93, 0, 0, 93, 1803, 1804, 1806, 833,
	0, 0, 1805, 0, 0, 1944, 0, 0, 738, 0,
	243, 2092, 0, 0, 247, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 1607, 0, 0, 0,
	0, 0, 1808, 49, 0, 0, 0, 93, 0, 0,
	0, 0, 1807, 0, 0, 0, 833, 0, 0, 0,
	0, 0, 0, 364, 0, 0, 0, 0, 0, 1996,
	0, 0, 0, 1787, 0, 0, 0, 1618, 0, 1081,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1803, 1804, 1806,
	238, 0, 0, 1805, 0, 0, 276, 0, 1203, 1205,
	0, 1206, 0, 276, 276, 1208, 0, 1210, 977, 276,
	0, 0, 0, 977, 1668, 0, 0, 2023, 634, 1213,
	1214, 0, 0, 1215, 0, 1216, 1217, 0, 0, 0,
	240, 0, 248, 249, 250, 251, 255, 0, 0, 0,
	49, 254, 253, 0, 0, 276, 276, 276, 276, 0,
	0, 93, 0, 977, 93, 93, 93, 93, 93, 0,
	0, 0, 0, 0, 0, 0, 1011, 629, 0, 93,
	0, 47, 0, 707, 0, 0, 0, 0, 93, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 350,
	0, 0, 0, 1944, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1479, 0, 0, 1731, 0, 0, 0,
	0, 49, 0, 0, 0, 2089, 0, 1330, 1890, 1891,
	1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1429,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 1768,
	93, 0, 0, 93, 0, 0, 0, 0, 0, 93,
	0, 93, 1173, 0, 0, 0, 0, 93, 0, 0,
	93, 0, 93, 0, 1431, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1820, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 0, 0, 1479, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1440, 1446, 1444, 0, 0, 1441,
	0, 0, 1439, 0, 0, 1448, 0, 0, 1447, 1433,
	1443, 1445, 1442, 1437, 0, 1432, 0, 1450, 1449, 1451,
	1430, 1453, 0, 0, 0, 1456, 1435, 1455, 1454, 0,
	1452, 0, 0, 0, 0, 0, 276, 0, 0, 1434,
	949, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 276, 0, 0, 0,
	0, 1232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1539, 1541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 1321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2029, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 93, 0, 93, 1203, 1205, 0, 1206, 0, 0,
	1208, 0, 1210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1213, 1214, 0, 0, 1215, 0,
	1216, 1217, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1406, 1407, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	276, 0, 0, 1655, 1658, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 833, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 977, 0, 0, 0, 0,
	0, 977, 0, 2120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1655, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1321,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 707, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1321,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 0, 485,
	474, 0, 433, 487, 403, 421, 495, 423, 424, 460,
	382, 443, 162, 418, 400, 99, 406, 375, 413, 376,
	404, 435, 123, 401, 0, 476, 446, 137, 232, 233,
	493, 140, 451, 0, 186, 150, 0, 0, 438, 478,
	441, 469, 432, 461, 390, 450, 488, 419, 456, 489,
	0, 0, 977, 369, 0, 1651, 0, 1652, 0, 0,
	0, 0, 0, 112, 0, 455, 483, 415, 498, 0,
	459, 374, 453, 0, 380, 383, 494, 481, 410, 411,
	0, 0, 0, 0, 0, 0, 0, 437, 442, 466,
	429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 407, 0, 449, 0, 0, 0, 387,
	381, 0, 434, 0, 0, 0, 389, 0, 408, 467,
	0, 371, 472, 479, 431, 146, 213, 482, 428, 427,
	169, 0, 115, 0, 192, 127, 420, 138, 464, 496,
	486, 439, 477, 405, 414, 117, 412, 176, 163, 204,
	448, 462, 174, 141, 196, 170, 203, 484, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 379, 372,
	409, 470, 473, 394, 458, 384, 416, 465, 417, 440,
	399, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 2085, 0, 377, 0,
	187, 206, 223, 224, 378, 398, 480, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 457, 177, 114, 205, 183, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 393,
	397, 391, 392, 444, 445, 490, 491, 492, 468, 388,
	0, 395, 396, 0, 475, 132, 234, 235, 447, 98,
	106, 139, 497, 220, 0, 171, 125, 207, 0, 0,
	422, 373, 426, 0, 0, 0, 0, 0, 0, 0,
	385, 386, 178, 0, 430, 425, 452, 454, 463, 471,
	0, 402, 436, 0, 111, 485, 474, 0, 433, 487,
	403, 421, 495, 423, 424, 460, 382, 443, 162, 418,
	400, 99, 406, 375, 413, 376, 404, 435, 123, 401,
	0, 476, 446, 137, 232, 233, 493, 140, 451, 0,
	186, 150, 0, 0, 438, 478, 441, 469, 432, 461,
	390, 450, 488, 419, 456, 489, 0, 0, 0, 281,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 455, 483, 415, 498, 0, 459, 374, 453, 0,
	380, 383, 494, 481, 410, 411, 0, 0, 0, 0,
	0, 0, 0, 437, 442, 466, 429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 871, 0, 407,
	0, 449, 0, 0, 0, 387, 381, 0, 434, 0,
	0, 0, 389, 0, 408, 467, 0, 371, 472, 479,
	431, 146, 213, 482, 428, 427, 169, 0, 115, 0,
	192, 127, 420, 138, 464, 496, 486, 439, 477, 405,
	414, 117, 412, 176, 163, 204, 448, 462, 174, 141,
	196, 170, 203, 484, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 379, 372, 409, 470, 473, 394,
	458, 384, 416, 465, 417, 440, 399, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 377, 0, 187, 206, 223, 224,
	378, 398, 480, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 457, 177,
	114, 205, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 393, 397, 391, 392, 444,
	445, 490, 491, 492, 468, 388, 0, 395, 396, 0,
	475, 132, 234, 235, 447, 98, 106, 139, 497, 220,
	0, 171, 125, 207, 0, 0, 422, 373, 426, 0,
	0, 0, 0, 0, 0, 0, 385, 386, 178, 0,
	430, 425, 452, 454, 463, 471, 0, 402, 436, 0,
	111, 485, 474, 0, 433, 487, 403, 421, 495, 423,
	424, 460, 382, 443, 162, 418, 400, 99, 406, 375,
	413, 376, 404, 435, 123, 401, 0, 476, 446, 137,
	232, 233, 493, 140, 451, 0, 186, 150, 0, 0,
	438, 478, 441, 469, 432, 461, 390, 450, 488, 419,
	456, 489, 0, 0, 0, 369, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 455, 483, 415,
	498, 0, 459, 374, 453, 0, 380, 383, 494, 481,
	410, 411, 1503, 0, 0, 0, 0, 0, 0, 437,
	442, 466, 429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 407, 0, 449, 0, 0,
	0, 387, 381, 0, 434, 0, 0, 0, 389, 0,
	408, 467, 0, 371, 472, 479, 431, 146, 213, 482,
	428, 427, 169, 0, 115, 0, 192, 127, 420, 138,
	464, 496, 486, 439, 477, 405, 414, 117, 412, 176,
	163, 204, 448, 462, 174, 141, 196, 170, 203, 484,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	379, 372, 409, 470, 473, 394, 458, 384, 416, 465,
	417, 440, 399, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	377, 0, 187, 206, 223, 224, 378, 398, 480, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 457, 177, 114, 205, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 393, 397, 391, 392, 444, 445, 490, 491, 492,
	468, 388, 0, 395, 396, 0, 475, 132, 234, 235,
	447, 98, 106, 139, 497, 220, 0, 171, 125, 207,
	0, 0, 422, 373, 426, 0, 0, 0, 0, 0,
	0, 0, 385, 386, 178, 0, 430, 425, 452, 454,
	463, 471, 0, 402, 436, 0, 111, 485, 474, 0,
	433, 487, 403, 421, 495, 423, 424, 460, 382, 443,
	162, 418, 400, 99, 406, 375, 413, 376, 404, 435,
	123, 401, 0, 476, 446, 137, 232, 233, 493, 140,
	451, 0, 186, 150, 0, 0, 438, 478, 441, 469,
	432, 461, 390, 450, 488, 419, 456, 489, 0, 0,
	0, 281, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 455, 483, 415, 498, 0, 459, 374,
	453, 0, 380, 383, 494, 481, 410, 411, 0, 0,
	0, 0, 0, 0, 0, 437, 442, 466, 429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 407, 0, 449, 0, 0, 0, 387, 381, 0,
	434, 0, 0, 0, 389, 0, 408, 467, 0, 371,
	472, 479, 431, 146, 213, 482, 428, 427, 169, 0,
	115, 0, 192, 127, 420, 138, 464, 496, 486, 439,
	477, 405, 414, 117, 412, 176, 163, 204, 448, 462,
	174, 141, 196, 170, 203, 484, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 379, 372, 409, 470,
	473, 394, 458, 384, 416, 465, 417, 440, 399, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 377, 0, 187, 206,
	223, 224, 378, 398, 480, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	457, 177, 114, 205, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 393, 397, 391,
	392, 444, 445, 490, 491, 492, 468, 388, 0, 395,
	396, 0, 475, 132, 234, 235, 447, 98, 106, 139,
	497, 220, 0, 171, 125, 207, 0, 0, 422, 373,
	426, 0, 0, 0, 0, 0, 0, 0, 385, 386,
	178, 0, 430, 425, 452, 454, 463, 471, 0, 402,
	436, 0, 111, 485, 474, 0, 433, 487, 403, 421,
	495, 423, 424, 460, 382, 443, 162, 418, 400, 99,
	406, 375, 413, 376, 404, 435, 123, 401, 0, 476,
	446, 137, 232, 233, 493, 140, 451, 0, 186, 150,
	0, 0, 438, 478, 441, 469, 432, 461, 390, 450,
	488, 419, 456, 489, 0, 0, 0, 369, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 455,
	483, 415, 498, 0, 459, 374, 453, 0, 380, 383,
	494, 481, 410, 411, 0, 0, 0, 0, 0, 0,
	0, 437, 442, 466, 429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1411, 0, 407, 0, 449,
	0, 0, 0, 387, 381, 0, 434, 0, 0, 0,
	389, 0, 408, 467, 0, 371, 472, 479, 431, 146,
	213, 482, 428, 427, 169, 0, 115, 0, 192, 127,
	420, 138, 464, 496, 486, 439, 477, 405, 414, 117,
	412, 176, 163, 204, 448, 462, 174, 141, 196, 170,
	203, 484, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 379, 372, 409, 470, 473, 394, 458, 384,
	416, 465, 417, 440, 399, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 377, 0, 187, 206, 223, 224, 378, 398,
	480, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 457, 177, 114, 205,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 393, 397, 391, 392, 444, 445, 490,
	491, 492, 468, 388, 0, 395, 396, 0, 475, 132,
	234, 235, 447, 98, 106, 139, 497, 220, 0, 171,
	125, 207, 0, 0, 422, 373, 426, 0, 0, 0,
	0, 0, 0, 0, 385, 386, 178, 0, 430, 425,
	452, 454, 463, 471, 0, 402, 436, 0, 111, 485,
	474, 0, 433, 487, 403, 421, 495, 423, 424, 460,
	382, 443, 162, 418, 400, 99, 406, 375, 413, 376,
	404, 435, 123, 401, 0, 476, 446, 137, 232, 233,
	493, 140, 451, 0, 186, 150, 0, 0, 438, 478,
	441, 469, 432, 461, 390, 450, 488, 419, 456, 489,
	50, 0, 0, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 455, 483, 415, 498, 0,
	459, 374, 453, 0, 380, 383, 494, 481, 410, 411,
	0, 0, 0, 0, 0, 0, 0, 437, 442, 466,
	429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 407, 0, 449, 0, 0, 0, 387,
	381, 0, 434, 0, 0, 0, 389, 0, 408, 467,
	0, 371, 472, 479, 431, 146, 213, 482, 428, 427,
	169, 0, 115, 0, 192, 127, 420, 138, 464, 496,
	486, 439, 477, 405, 414, 117, 412, 176, 163, 204,
	448, 462, 174, 141, 196, 170, 203, 484, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 379, 372,
	409, 470, 473, 394, 458, 384, 416, 465, 417, 440,
	399, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 377, 0,
	187, 206, 223, 224, 378, 398, 480, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 457, 177, 114, 205, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 393,
	397, 391, 392, 444, 445, 490, 491, 492, 468, 388,
	0, 395, 396, 0, 475, 132, 234, 235, 447, 98,
	106, 139, 497, 220, 0, 171, 125, 207, 0, 0,
	422, 373, 426, 0, 0, 0, 0, 0, 0, 0,
	385, 386, 178, 0, 430, 425, 452, 454, 463, 471,
	0, 402, 436, 0, 111, 485, 474, 0, 433, 487,
	403, 421, 495, 423, 424, 460, 382, 443, 162, 418,
	400, 99, 406, 375, 413, 376, 404, 435, 123, 401,
	0, 476, 446, 137, 232, 233, 493, 140, 451, 0,
	186, 150, 0, 0, 438, 478, 441, 469, 432, 461,
	390, 450, 488, 419, 456, 489, 0, 0, 0, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 455, 483, 415, 498, 0, 459, 374, 453, 0,
	380, 383, 494, 481, 410, 411, 0, 0, 0, 0,
	0, 0, 0, 437, 442, 466, 429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 407,
	0, 449, 0, 0, 0, 387, 381, 0, 434, 0,
	0, 0, 389, 0, 408, 467, 0, 371, 472, 479,
	431, 146, 213, 482, 428, 427, 169, 0, 115, 0,
	192, 127, 420, 138, 464, 496, 486, 439, 477, 405,
	414, 117, 412, 176, 163, 204, 448, 462, 174, 141,
	196, 170, 203, 484, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 379, 372, 409, 470, 473, 394,
	458, 384, 416, 465, 417, 440, 399, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 367, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 377, 0, 187, 206, 223, 224,
	378, 398, 480, 216, 217, 218, 219, 0, 0, 0,
	368, 366, 131, 181, 135, 142, 172, 221, 457, 177,
	114, 205, 183, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 393, 397, 391, 392, 444,
	445, 490, 491, 492, 468, 388, 0, 395, 396, 0,
	475, 132, 234, 235, 447, 98, 106, 139, 497, 220,
	0, 171, 125, 207, 0, 0, 422, 373, 426, 0,
	0, 0, 0, 0, 0, 0, 385, 386, 178, 0,
	430, 425, 452, 454, 463, 471, 0, 402, 436, 0,
	111, 485, 474, 0, 433, 487, 403, 421, 495, 423,
	424, 460, 382, 443, 162, 418, 400, 99, 406, 375,
	413, 376, 404, 435, 123, 401, 0, 476, 446, 137,
	232, 233, 493, 140, 451, 0, 186, 150, 0, 0,
	438, 478, 441, 469, 432, 461, 390, 450, 488, 419,
	456, 489, 0, 0, 0, 94, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 455, 483, 415,
	498, 0, 459, 374, 453, 0, 380, 383, 494, 481,
	410, 411, 0, 0, 0, 0, 0, 0, 0, 437,
	442, 466, 429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 407, 0, 449, 0, 0,
	0, 387, 381, 0, 434, 0, 0, 0, 389, 0,
	408, 467, 0, 371, 472, 479, 431, 146, 213, 482,
	428, 427, 169, 0, 115, 0, 192, 127, 420, 138,
	464, 496, 486, 439, 477, 405, 414, 117, 412, 176,
	163, 204, 448, 462, 174, 141, 196, 170, 203, 484,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	379, 372, 409, 470, 473, 394, 458, 384, 416, 465,
	417, 440, 399, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	377, 0, 187, 206, 223, 224, 378, 398, 480, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 457, 177, 114, 205, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 393, 397, 391, 392, 444, 445, 490, 491, 492,
	468, 388, 0, 395, 396, 0, 475, 132, 234, 235,
	447, 98, 106, 139, 497, 220, 0, 171, 125, 207,
	0, 0, 422, 373, 426, 0, 0, 0, 0, 0,
	0, 0, 385, 386, 178, 0, 430, 425, 452, 454,
	463, 471, 0, 402, 436, 0, 111, 485, 474, 0,
	433, 487, 403, 421, 495, 423, 424, 460, 382, 443,
	162, 418, 400, 99, 406, 375, 413, 376, 404, 435,
	123, 401, 0, 476, 446, 137, 232, 233, 493, 140,
	451, 0, 186, 150, 0, 0, 438, 478, 441, 469,
	432, 461, 390, 450, 488, 419, 456, 489, 0, 0,
	0, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 455, 483, 415, 498, 0, 459, 374,
	453, 0, 380, 383, 494, 481, 410, 411, 0, 0,
	0, 0, 0, 0, 0, 437, 442, 466, 429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 407, 0, 449, 0, 0, 0, 387, 381, 0,
	434, 0, 0, 0, 389, 0, 408, 467, 0, 371,
	472, 479, 431, 146, 213, 482, 428, 427, 169, 0,
	115, 0, 192, 127, 420, 138, 464, 496, 486, 439,
	477, 405, 414, 117, 412, 176, 163, 204, 448, 462,
	174, 141, 196, 170, 203, 484, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 379, 372, 409, 470,
	473, 394, 458, 384, 416, 465, 417, 440, 399, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	717, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 367, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 377, 0, 187, 206,
	223, 224, 378, 398, 480, 216, 217, 218, 219, 0,
	0, 0, 368, 366, 131, 181, 135, 142, 172, 221,
	457, 177, 114, 205, 183, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 393, 397, 391,
	392, 444, 445, 490, 491, 492, 468, 388, 0, 395,
	396, 0, 475, 132, 234, 235, 447, 98, 106, 139,
	497, 220, 0, 171, 125, 207, 0, 0, 422, 373,
	426, 0, 0, 0, 0, 0, 0, 0, 385, 386,
	178, 0, 430, 425, 452, 454, 463, 471, 0, 402,
	436, 0, 111, 485, 474, 0, 433, 487, 403, 421,
	495, 423, 424, 460, 382, 443, 162, 418, 400, 99,
	406, 375, 413, 376, 404, 435, 123, 401, 0, 476,
	446, 137, 232, 233, 493, 140, 451, 0, 186, 150,
	0, 0, 438, 478, 441, 469, 432, 461, 390, 450,
	488, 419, 456, 489, 0, 0, 0, 369, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 455,
	483, 415, 498, 0, 459, 374, 453, 0, 380, 383,
	494, 481, 410, 411, 0, 0, 0, 0, 0, 0,
	0, 437, 442, 466, 429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 407, 0, 449,
	0, 0, 0, 387, 381, 0, 434, 0, 0, 0,
	389, 0, 408, 467, 0, 371, 472, 479, 431, 146,
	213, 482, 428, 427, 169, 0, 115, 0, 192, 127,
	420, 138, 464, 496, 486, 439, 477, 405, 414, 117,
	412, 176, 163, 204, 448, 462, 174, 141, 196, 170,
	203, 484, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 379, 372, 409, 470, 473, 394, 458, 384,
	416, 465, 417, 440, 399, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 357, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 367,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 377, 0, 187, 206, 223, 224, 378, 398,
	480, 216, 217, 218, 219, 0, 0, 0, 368, 366,
	360, 359, 135, 142, 172, 221, 457, 177, 114, 205,
	183, 362, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 393, 397, 391, 392, 444, 445, 490,
	491, 492, 468, 388, 0, 395, 396, 0, 475, 132,
	234, 235, 447, 98, 106, 139, 497, 220, 0, 171,
	125, 207, 0, 0, 422, 373, 426, 0, 0, 0,
	0, 0, 0, 0, 385, 386, 178, 0, 430, 425,
	452, 454, 463, 471, 0, 402, 436, 0, 111, 485,
	474, 0, 433, 487, 403, 421, 495, 423, 424, 460,
	382, 443, 162, 418, 400, 99, 406, 375, 413, 376,
	404, 435, 123, 401, 0, 476, 446, 137, 232, 233,
	493, 140, 451, 0, 186, 150, 0, 0, 438, 478,
	441, 469, 432, 461, 390, 450, 488, 419, 456, 489,
	0, 0, 0, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 455, 483, 415, 498, 0,
	459, 374, 453, 0, 380, 383, 494, 481, 410, 411,
	0, 0, 0, 0, 0, 0, 0, 437, 442, 466,
	429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 407, 0, 449, 0, 0, 0, 387,
	381, 0, 434, 0, 0, 0, 389, 0, 408, 467,
	0, 371, 472, 479, 431, 146, 213, 482, 428, 427,
	169, 0, 115, 0, 192, 127, 420, 138, 464, 496,
	486, 439, 477, 405, 414, 117, 412, 176, 163, 204,
	448, 462, 174, 141, 196, 170, 203, 484, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 379, 372,
	409, 470, 473, 394, 458, 384, 416, 465, 417, 440,
	399, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 377, 0,
	187, 206, 223, 224, 378, 398, 480, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 457, 177, 114, 205, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 393,
	397, 391, 392, 444, 445, 490, 491, 492, 468, 388,
	0, 395, 396, 0, 475, 132, 234, 235, 447, 98,
	106, 139, 497, 220, 0, 171, 125, 207, 0, 0,
	422, 373, 426, 0, 0, 0, 0, 0, 0, 0,
	385, 386, 178, 0, 430, 425, 452, 454, 463, 471,
	162, 402, 436, 99, 111, 0, 284, 0, 0, 0,
	123, 280, 0, 0, 0, 137, 232, 233, 326, 140,
	327, 0, 186, 150, 0, 0, 0, 0, 317, 318,
	0, 0, 0, 0, 0, 0, 1029, 0, 50, 0,
	0, 281, 305, 283, 303, 307, 308, 309, 310, 0,
	0, 112, 306, 311, 312, 313, 1030, 0, 0, 0,
	278, 296, 0, 325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 0,
	0, 0, 0, 339, 0, 295, 0, 0, 291, 292,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 337, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 341,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 338, 334,
	335, 332, 333, 331, 330, 329, 340, 319, 320, 321,
	322, 324, 0, 132, 234, 235, 323, 98, 106, 139,
	0, 220, 0, 171, 125, 207, 162, 0, 0, 99,
	929, 0, 284, 0, 0, 0, 123, 280, 0, 0,
	178, 137, 232, 233, 326, 140, 327, 0, 186, 150,
	0, 336, 111, 0, 317, 318, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 281, 305, 283,
	303, 307, 308, 309, 310, 0, 0, 112, 306, 311,
	312, 313, 0, 0, 0, 0, 278, 296, 0, 325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 274, 0, 0, 0, 339,
	0, 295, 0, 0, 291, 292, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 337, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 341, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 338, 334, 335, 332, 333, 331,
	330, 329, 340, 319, 320, 321, 322, 324, 0, 132,
	234, 235, 323, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 162, 0, 0, 99, 0, 0, 284, 0,
	0, 0, 123, 280, 0, 0, 178, 137, 232, 233,
	326, 140, 327, 0, 186, 150, 0, 336, 111, 0,
	317, 318, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 559, 281, 305, 283, 303, 307, 308, 309,
	310, 0, 0, 112, 306, 311, 312, 313, 0, 0,
	0, 0, 278, 296, 0, 325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 0, 0, 0, 0, 339, 0, 295, 0, 0,
	291, 292, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 337,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 341, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	338, 334, 335, 332, 333, 331, 330, 329, 340, 319,
	320, 321, 322, 324, 0, 132, 234, 235, 323, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 162, 0,
	0, 99, 0, 0, 284, 0, 0, 0, 123, 280,
	0, 0, 178, 137, 232, 233, 326, 140, 327, 0,
	186, 150, 0, 336, 111, 0, 317, 318, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 281,
	305, 283, 303, 307, 308, 309, 310, 0, 0, 112,
	306, 311, 312, 313, 0, 0, 0, 0, 278, 296,
	0, 325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 274, 0, 0,
	0, 339, 0, 295, 0, 0, 291, 292, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 337, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 341, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 338, 334, 335, 332,
	333, 331, 330, 329, 340, 319, 320, 321, 322, 324,
	0, 132, 234, 235, 323, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 162, 0, 0, 99, 0, 0,
	284, 0, 0, 0, 123, 280, 0, 0, 178, 137,
	232, 233, 326, 140, 327, 0, 186, 150, 0, 336,
	111, 0, 317, 318, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 281, 305, 283, 303, 307,
	308, 309, 310, 0, 0, 112, 306, 311, 312, 313,
	0, 0, 0, 0, 278, 296, 0, 325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 339, 0, 295,
	0, 0, 943, 292, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 337, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 945, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 955, 961, 959,
	191, 148, 956, 134, 182, 954, 102, 0, 963, 122,
	167, 962, 947, 958, 960, 957, 952, 198, 946, 222,
	965, 964, 966, 944, 968, 211, 105, 109, 971, 950,
	970, 969, 208, 967, 201, 149, 145, 0, 104, 199,
	147, 144, 948, 949, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 341, 0, 158, 130, 0, 0, 0,
	0, 0, 951, 953, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 338, 334, 335, 332, 333, 331, 330, 329,
	340, 319, 320, 321, 322, 324, 0, 132, 234, 235,
	323, 98, 106, 139, 0, 220, 0, 171, 125, 207,
	46, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 178, 99, 0, 0, 284, 0,
	0, 0, 123, 280, 0, 336, 111, 137, 232, 233,
	326, 140, 327, 0, 186, 150, 0, 0, 0, 0,
	317, 318, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 281, 305, 283, 303, 307, 308, 309,
	310, 0, 0, 112, 306, 311, 312, 313, 0, 0,
	0, 0, 278, 296, 0, 325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 0, 0, 0, 0, 339, 0, 295, 0, 0,
	291, 292, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 337,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 341, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	338, 334, 335, 332, 333, 331, 330, 329, 340, 319,
	320, 321, 322, 324, 0, 132, 234, 235, 323, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 162, 0,
	0, 99, 0, 0, 284, 0, 0, 0, 123, 280,
	0, 0, 178, 137, 232, 233, 326, 140, 327, 0,
	186, 150, 0, 336, 111, 0, 317, 318, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 281,
	305, 283, 303, 307, 308, 309, 310, 0, 0, 112,
	306, 311, 312, 313, 0, 0, 0, 0, 278, 296,
	0, 325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 0, 0, 0,
	0, 339, 0, 295, 0, 0, 291, 292, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 337, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 341, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 338, 334, 335, 332,
	333, 331, 330, 329, 340, 319, 320, 321, 322, 324,
	0, 132, 234, 235, 323, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 178, 137,
	232, 233, 326, 140, 327, 0, 186, 150, 0, 336,
	111, 0, 317, 318, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 281, 305, 283, 303, 307,
	308, 309, 310, 0, 0, 112, 306, 311, 312, 313,
	0, 0, 0, 0, 0, 296, 0, 325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 339, 0, 295,
	0, 0, 291, 292, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 337, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 2125, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 341, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 338, 334, 335, 332, 333, 331, 330, 329,
	340, 319, 320, 321, 322, 324, 0, 132, 234, 235,
	323, 98, 106, 139, 0, 220, 0, 171, 125, 207,
	162, 0, 0, 99, 0, 0, 284, 0, 0, 0,
	123, 0, 0, 0, 178, 137, 232, 233, 326, 140,
	327, 0, 186, 150, 0, 336, 111, 0, 317, 318,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 281, 305, 283, 303, 307, 308, 309, 310, 0,
	0, 112, 306, 311, 312, 313, 0, 0, 0, 0,
	0, 296, 0, 325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 0,
	0, 0, 0, 339, 0, 295, 0, 0, 291, 292,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 337, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 341,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 338, 334,
	335, 332, 333, 331, 330, 329, 340, 319, 320, 321,
	322, 324, 0, 132, 234, 235, 323, 98, 106, 139,
	0, 220, 0, 171, 125, 207, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	178, 137, 232, 233, 326, 140, 327, 0, 186, 150,
	0, 336, 111, 0, 317, 318, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 281, 305, 283,
	303, 307, 308, 309, 310, 0, 0, 112, 306, 311,
	312, 313, 0, 0, 0, 0, 0, 296, 0, 325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 0, 0, 0, 0, 339,
	0, 295, 0, 0, 291, 292, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 337, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 341, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 338, 334, 335, 332, 333, 331,
	330, 329, 340, 319, 320, 321, 322, 324, 0, 132,
	234, 235, 323, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 178, 137, 232, 233,
	326, 140, 327, 0, 186, 150, 0, 336, 111, 0,
	317, 318, 0, 0, 0, 0, 0, 0, 0, 0,
	1204, 0, 0, 281, 305, 283, 303, 307, 308, 309,
	310, 0, 0, 112, 306, 311, 312, 313, 0, 0,
	0, 0, 0, 296, 0, 325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 0, 0, 0, 0, 339, 0, 295, 0, 0,
	291, 292, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 337,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 341, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	338, 334, 335, 332, 333, 331, 330, 329, 340, 319,
	320, 321, 322, 324, 0, 132, 234, 235, 323, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 178, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 336, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1534, 0, 0, 281,
	0, 1306, 1307, 1308, 1309, 0, 0, 0, 0, 112,
	1312, 1310, 312, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 1314,
	1319, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1316, 0, 1318, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 234, 235, 0, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 178, 137,
	232, 233, 0, 140, 0, 0, 186, 150, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1305, 0, 0, 281, 0, 1306, 1307, 1308,
	1309, 0, 0, 0, 0, 112, 1312, 1310, 312, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 0, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 1314, 1319, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1316, 0, 1318, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 234, 235,
	0, 98, 106, 139, 0, 220, 0, 171, 125, 207,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 178, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 0, 1306, 1307, 1308, 1309, 0, 0, 0,
	0, 112, 1312, 1310, 312, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 1314, 1319, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 1316, 0, 1318,
	1317, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 132, 234, 235, 0, 98, 106, 139,
	0, 220, 0, 171, 125, 207, 0, 369, 305, 923,
	303, 307, 308, 309, 310, 0, 0, 112, 306, 311,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 764, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 0, 132,
	234, 235, 0, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 1816, 0, 369, 0, 1814, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 1813, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1812, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 765, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 0, 791, 792, 167,
	793, 794, 795, 797, 796, 766, 767, 768, 772, 770,
	769, 771, 743, 745, 211, 741, 744, 750, 746, 747,
	748, 762, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 763, 773, 774, 775, 776, 777, 778,
	779, 780, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 764, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 369,
	98, 742, 139, 0, 220, 0, 171, 125, 207, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 917, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 765, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 0, 791, 792, 167, 793, 794, 795, 797, 796,
	766, 915, 768, 772, 770, 769, 771, 743, 745, 211,
	741, 914, 750, 746, 747, 748, 762, 918, 752, 753,
	754, 755, 756, 757, 758, 759, 919, 920, 763, 773,
	774, 775, 776, 777, 778, 779, 780, 0, 0, 158,
	130, 916, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 764, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 234, 235, 369, 98, 742, 139, 0, 220,
	0, 171, 125, 207, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 765, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 2004, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 0, 791, 792, 167,
	793, 794, 795, 797, 796, 766, 767, 768, 772, 770,
	769, 771, 743, 745, 211, 741, 744, 750, 746, 747,
	748, 762, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 763, 773, 774, 775, 776, 777, 778,
	779, 780, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 576, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 0,
	98, 742, 139, 369, 220, 578, 171, 125, 207, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	573, 572, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 574, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	764, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 234, 235, 369, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 749, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	765, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	0, 791, 792, 167, 793, 794, 795, 797, 796, 766,
	767, 768, 772, 770, 769, 771, 743, 745, 211, 741,
	744, 750, 746, 747, 748, 762, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 763, 773, 774,
	775, 776, 777, 778, 779, 780, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 137,
	232, 233, 0, 140, 0, 0, 186, 150, 0, 0,
	132, 234, 235, 0, 98, 742, 139, 0, 220, 0,
	171, 125, 207, 1816, 0, 369, 0, 1814, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 1813, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1812, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 0, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 234, 235,
	0, 98, 106, 139, 369, 220, 502, 171, 125, 207,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1053, 146, 213, 0, 0,
	0, 1048, 0, 1047, 0, 1049, 1050, 0, 138, 0,
	0, 1051, 1054, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 0, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 132, 234, 235, 0,
	98, 106, 139, 0, 220, 0, 171, 125, 207, 50,
	0, 0, 94, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 112, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 0, 0, 0, 0,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 234, 235, 0, 98, 106,
	139, 94, 220, 96, 171, 125, 207, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 0, 98, 106, 139,
	281, 220, 96, 171, 125, 207, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 2084, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 1509, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 132, 234, 235, 0, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 50, 0, 0, 94, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 112, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 706, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 0, 98, 106, 139, 94, 220, 708,
	171, 125, 207, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 137,
	232, 233, 0, 140, 0, 0, 186, 150, 0, 132,
	234, 235, 0, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 50, 0, 0, 369, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 0, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 234, 235,
	0, 98, 106, 139, 94, 220, 96, 171, 125, 207,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 823, 177, 114, 205, 183, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 800, 0, 132, 234, 235, 369,
	98, 106, 139, 0, 220, 0, 171, 125, 207, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 801, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 727, 0,
	0, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 234, 235, 0, 98, 106, 139, 369, 220,
	726, 171, 125, 207, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 706, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 0, 98, 106, 139, 94, 220, 708,
	171, 125, 207, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 704, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 684, 123, 0, 0, 0, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	234, 235, 0, 98, 106, 139, 94, 220, 96, 171,
	125, 207, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	0, 0, 0, 352, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 0, 0, 132, 234,
	235, 0, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 94, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 0, 98, 106, 139,
	94, 220, 96, 171, 125, 207, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 0, 98, 106, 139, 94,
	220, 96, 171, 125, 207, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 234, 235, 369, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 1509, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 369,
	98, 106, 139, 0, 220, 0, 171, 125, 207, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 1634, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 234, 235, 0, 98, 106, 139, 281, 220,
	96, 171, 125, 207, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 0, 98, 106, 139, 94, 220, 708,
	171, 125, 207, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	234, 235, 369, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 0, 0, 0, 0,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 234, 235, 0, 98, 106,
	139, 369, 220, 578, 171, 125, 207, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 0, 98, 106, 139,
	369, 220, 502, 171, 125, 207, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 137,
	232, 233, 0, 140, 0, 0, 186, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 369, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 0, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 234, 235,
	0, 98, 106, 139, 0, 220, 0, 171, 125, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111,
}

var yyPact = [...]int16{
	2391, -1000, -260, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1495, 1555, -1000, -1000, -1000, -1000, -1000, 1310, 2010,
	323, 385, 172, 18831, 370, 2829, 19120, -1000, 114, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1222, -1000, -1000,
	-1000, -1000, -1000, 1484, 1493, 1222, 1469, 9350, -1000, 307,
	16219, 18542, 7608, -1000, 21131, 342, 340, 213, 334, 21416,
	303, 303, 21416, 21416, 19120, 346, 303, -1000, -197, -186,
	-1000, -69, 344, 19120, -1000, 19120, 305, 1092, 305, 305,
	305, 19120, -1000, 493, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 19120, 1057, 1403, 572,
	6104, 6104, 6104, 6104, 205, 6104, -11, 1330, -1000, -1000,
	-1000, -1000, 6104, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1378, 1004, 1416, 10370, 10370, 1495, -1000,
	1222, -1000, -1000, 1521, -1000, 14174, 489, -1000, 10370, 304,
	1221, -1000, -1000, -243, 1221, -1000, -1000, 458, -1000, -1000,
	-1000, 11378, 11378, 11378, 11378, 11378, 11378, 11378, -1000, -1000,
	-1000, -1000, 23, -1000, 897, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 488, -1000, 10034, 1221, 1221, 1221,
	1221, 1221, 1221, 1221, 1221, 10370, 1221, 1384, 1221, 1221,
	1221, 1221, 1221, 1221, 1221, 1221, 2099, 1221, 1221, 1221,
	1221, -1000, 694, 18247, 1198, 1295, -1000, -1000, -1000, 1463,
	15343, 17958, 19120, 1101, -1000, 1232, 7232, -14, -1000, -1000,
	-1000, 610, 486, 17669, -1000, -1000, -1000, 1402, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1089,
	-1000, 14459, 14459, 17380, 21416, 303, 330, 130, 303, 1252,
	1048, 659, 1046, 1329, 651, 1462, 303, 19120, -1000, -1000,
	-1000, -1000, 17095, 6104, 332, 19120, 1435, 1327, 19120, 1039,
	1030, -1000, 6856, -1000, 6104, 6104, 6104, 6104, 6104, 6104,
	6104, 6104, -1000, -1000, -1000, -1000, -1000, -1000, 6104, 6104,
	-1000, 17, -1000, 19120, -1000, 1470, -1000, -1000, -1000, -1000,
	-1000, 1535, 517, 842, 465, 1234, -1000, 891, 1484, 1004,
	19120, -1000, 10370, 10370, 915, -1000, 20842, -1000, -1000, 4600,
	539, 11378, 721, 691, 11378, 11378, 11378, 11378, 11378, 11378,
	11378, 11378, 11378, 11378, 11378, 11378, 11378, 11378, 11378, 884,
	2431, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1027, -1000, 13600, -1000, 1222, 13018, 13018,
	48, 48, 48, 48, 48, 48, 20553, -1000, -269, 8678,
	-1000, 7984, 1004, 1079, 689, 10034, 9350, 9350, 9686, 10370,
	11378, 19979, 9350, 1470, 650, 689, 19979, 1481, -1000, 1004,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 76,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9350, 9350,
	9350, 9350, -1000, 219, 19120, -1000, 19979, 16219, 16219, 16219,
	16219, 16219, -1000, 1352, 1350, -1000, 1344, 1342, 1357, 19120,
	-1000, 1085, 15343, 390, 1221, -1000, 20268, -1000, -1000, 219,
	1183, 16219, 19120, -1000, -1000, 6480, 1232, -14, 1227, -1000,
	-10, -26, 8342, 7984, 500, -1000, -1000, -1000, -1000, 204,
	15045, 1251, -156, 13, -1000, -1000, -1000, -1000, -1000, 1259,
	-1000, -1000, -1000, 1259, 257, 1309, 1259, 1309, -1000, 1259,
	1309, 62, 62, 62, 62, 62, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1303, 1301, -1000, 1259, 1259, 1259, 1259,
	1259, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1280, 269, 1280, 1265, 1265, -1000, -1000, 1251, 1307,
	19120, 21416, 1326, 19120, 303, -207, 19120, -92, 1022, 6104,
	1433, 6104, 19120, 1541, 19120, -1000, -1000, -1000, 142, 14459,
	19120, -1000, 1479, 19120, -1000, 19120, -1000, -1000, 19120, 6104,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 635, -1000, -1000, -1000, 1304,
	-1000, -1000, 1375, 10370, 10370, 5352, 10370, -1000, -1000, -1000,
	1416, -1000, -1000, 539, 551, -1000, -1000, 768, -1000, -1000,
	-1000, -1000, 464, 1221, -1000, 2133, -1000, -1000, -1000, -1000,
	721, 11378, 11378, 11378, 376, 2133, 2115, 919, 766, 48,
	92, 92, 39, 39, 39, 39, 39, 50, 50, -1000,
	-1000, -1000, -1000, -89, -1000, 1259, 1280, 269, 1280, 1265,
	1265, -1000, -1000, 1004, 251, 182, -1000, -1000, 62, -1000,
	-1000, -156, -1000, -243, 909, -1000, -1000, 899, 1004, 9350,
	1077, 1079, -1000, 14174, -1000, -1000, 10370, -1000, 1004, 1077,
	1077, 902, 1231, 11714, 1259, -1000, 1259, 1265, -1000, -1000,
	1259, 104, 1259, 103, -1000, -1000, -1000, -1000, 1265, -1000,
	-1000, -1000, -1000, -1000, 1259, 1259, -1000, -1000, 1259, -1000,
	1259, 1259, 698, 699, 937, 1203, -1000, 462, 1077, 9350,
	686, -1000, 10370, 1004, 19120, -1000, -1000, 1077, 1004, 1229,
	1077, 1077, 1108, 1221, -1000, 1214, -1000, 609, 1295, 1293,
	1325, 1363, -1000, -1000, -1000, -1000, 1348, -1000, 1319, -1000,
	-1000, -1000, -1000, -90, 339, 338, 337, 21416, -1000, 1506,
	16219, 1201, -1000, -1000, 1227, -14, -18, -1000, -1000, -1000,
	-1000, 689, 608, -1000, -1000, 1018, 7984, 1213, 1393, -1000,
	-1000, -1000, -1000, -1000, -1000, 1288, 754, 21416, 277, 292,
	405, 329, 1014, -1000, -1000, -1000, 776, -1000, 21416, -1000,
	1532, -1000, -1000, 276, -1000, 242, 658, 905, 19120, 192,
	1281, 12386, 878, -1000, -273, -1000, 11, -1000, -1000, 851,
	62, 62, 1259, 62, 879, 62, 62, -1000, -1000, 500,
	1401, 500, 500, 500, 500, 903, 903, -113, -113, -1000,
	-1000, -1000, -1000, 873, 1280, -1000, -1000, -1000, 862, -1000,
	19120, 21416, 1276, 1318, 19120, 1459, 19120, -1000, -1000, -1000,
	1455, -1000, 7984, -1000, -1000, -1000, -1000, -1000, 1454, 1161,
	-1000, -1000, -1000, -1000, 476, -1000, -1000, 1263, -1000, 942,
	2048, 525, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 218, 388, -1000, 6104, -1000, 605, 19120,
	19120, 9350, -1000, 1371, 689, 689, 457, -1000, -1000, -1000,
	-1000, -1000, 5728, 9350, -1000, 376, 2133, 455, -1000, 11378,
	11378, 89, -1000, 1259, -1000, 88, 86, -1000, 51, -1000,
	-243, -1000, 1077, 9350, -256, -1000, 689, -1000, -1000, -1000,
	3123, 884, 10370, -1000, 851, 253, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3123, 11378,
	11378, 11378, 11378, 11378, 5352, -84, 1176, 637, -1000, 10370,
	863, -1000, -1000, -1000, -1000, -1000, -1000, 1317, 19979, 1221,
	-1000, 16806, 21416, 1495, 19979, 10370, 10370, -1000, -1000, 10370,
	1272, -1000, 10370, -1000, -1000, -1000, -1000, 1271, 1221, 1221,
	1221, 1062, -1000, 1495, 1201, -1000, -1000, -1000, -20, -31,
	-1000, 10370, -1000, 4976, -1000, 204, -1000, 19405, -1000, 1547,
	1480, 284, -7, -1000, 933, 931, -1000, 916, -1000, -1000,
	20, -1000, -189, 94, 5, -1000, -1000, 1221, -1000, 1270,
	1449, -1000, 1408, 850, -1000, 12050, -232, -1000, -1000, -1000,
	-243, -1000, -1000, -1000, 1221, -1000, 1269, 1268, -1000, 1258,
	1221, 456, -1000, -1000, -1000, -1000, -1000, 1148, 500, 500,
	62, 500, 1146, 1128, 500, 500, -1000, 570, -1000, -1000,
	-1000, -1000, 1072, -1000, 1070, -1000, -1000, 1209, -1000, 1067,
	1220, 1315, 15921, 19120, 1267, 1222, 1446, 1222, 1195, -1000,
	607, 1478, 176, 19120, 1541, 1541, 21416, -1000, 250, 21416,
	-1000, -1000, 21416, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 21416, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 19120, -1000, -1000, -1000, -1000, -1000,
	21416, 293, -1000, -1000, 901, 10370, -1000, -1000, 1184, -1000,
	7984, -1000, -1000, 1004, -1000, 11378, 2133, 2133, 9, 8,
	7, -1000, 899, -1000, -1000, -1000, -1000, 1221, 1004, 1259,
	1259, -1000, 1259, 1265, -1000, 1259, 104, 1259, 103, -1000,
	-1000, -1000, -1000, 1265, -1000, -1000, -1000, -1000, -1000, 1259,
	1259, -1000, -1000, 1259, -1000, 1259, 1259, 1004, 591, -1000,
	-1000, 1004, 140, 435, 401, 110, 254, -1000, 1221, -76,
	-1000, 689, 10370, -1000, 1410, 1133, 1186, -1000, -1000, 9014,
	1004, 1064, 449, 1062, 1484, -1000, 689, 689, 689, 19690,
	689, -231, 19690, 19690, 19690, 16508, 21416, 1484, -1000, -1000,
	-1000, -1000, 689, 4224, -1000, 7984, 1052, -1000, 255, 1259,
	432, 432, -195, 236, 234, 1221, -1000, -1000, -1000, -1000,
	-191, -1000, -1000, -1000, -1000, 658, -1000, 1258, 10370, 19690,
	139, -1000, 1194, 1127, 12722, -1000, 13600, -1000, 1004, -1000,
	838, -1000, 795, 1125, 7984, -1000, -1000, -1000, 500, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 62, 893, 62, 845,
	-1000, 844, 15921, 21416, 19120, 1124, 1191, -1000, 249, 1257,
	19690, -1000, 1222, -1000, 7984, 4224, 311, 1566, -1000, -1000,
	1476, -1000, 1132, 1256, 21416, -1000, -1000, 279, -1000, 1255,
	-1000, -1000, -1000, -1000, 1431, 21416, -1000, -1000, 689, 1506,
	16219, -1000, 2133, -1000, -1000, -1000, -1000, 363, -1000, -1000,
	-1000, -1000, -1000, 11378, 11378, -1000, 11378, 11378, 11378, 1004,
	886, 689, 232, -1000, 1221, -1000, -1000, 1160, 21416, 21416,
	-1000, -1000, 1043, -1000, -1000, 1037, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1035, 1035, 1035, 390, -1000, -1000, -1000,
	-1000, -1000, -1000, 709, 19405, 1430, -1000, -1000, -1000, 744,
	-1000, -1000, 702, 179, 715, -1000, 21416, -191, 10370, -1000,
	1221, 591, 1013, 10370, 1248, 822, -1000, 1117, -1000, -1000,
	-1000, -1000, -1000, 1221, -1000, 500, -1000, 500, 1115, 1113,
	1107, 1247, 1244, -218, 15921, 1009, -1000, -1000, -1000, 21416,
	-1000, -1000, -1000, -1000, -1000, 161, 2786, -1000, 14756, 1241,
	1240, 19690, 1221, 296, 1504, 1187, -1000, 1017, 1004, 1491,
	140, 140, 140, 140, 82, -1000, -1000, 1530, -1000, 1221,
	-1000, 1222, 436, -1000, 21416, -1000, -1000, -231, -1000, -1000,
	-1000, -90, 1297, 1262, 175, -1000, 912, 592, 770, 589,
	579, 576, 573, 568, 564, 559, -1000, -1000, -1000, 1528,
	-1000, -1000, -1000, 1524, 1239, -1000, 1238, 591, 10370, 197,
	1313, 787, -1000, 1105, 1095, -1000, -1000, -1000, -1000, -218,
	15921, 19405, 1506, 1237, 1044, 1506, 1097, -1000, 159, 2786,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1495, 21416, 2914, 21416, 21416, 21416, 534, 11042, 10370, -1000,
	1038, 13315, 14756, 14756, 13315, 14756, 14756, 19405, 19405, 1007,
	217, 230, 1497, 1489, -1000, 1004, -1000, 10370, -1000, -1000,
	-1000, -1000, 1004, 223, -121, 19979, 1186, 1004, 21416, -1000,
	-1000, -1000, -1000, 21416, -1000, -117, 1262, 21416, -1000, 799,
	-1000, -1000, 736, 788, 736, 736, 736, 736, 736, 432,
	432, 21416, 19405, 197, 591, -1000, -79, 1545, -149, 560,
	-1000, -1000, 1506, 1010, 1003, 709, 19690, -218, 709, -91,
	21416, 10370, 2478, -1000, 1484, 1178, 13885, -1000, 877, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 21416, 1519, 1517, 1510, 1508, 2361,
	304, 817, 128, -1000, -1000, 13315, -1000, -1000, -1000, -1000,
	-1000, 1001, 998, 1252, 996, -1000, 21416, 1236, -1000, 10370,
	10370, -1000, 1162, -1000, 689, -1000, 1359, -87, -124, 1151,
	-1000, -1000, 1221, 993, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 658, 658, 962, 960,
	-1000, 197, -1000, 432, 432, -1000, -1000, -1000, 203, 849,
	781, 774, 753, 73, -1000, 1488, 709, 1506, 709, 1297,
	957, 1506, 1297, -1000, -245, -1000, 689, -1000, -1000, 2786,
	1416, 21416, 154, -1000, -1000, -1000, 2914, 1424, -1000, -1000,
	-1000, -1000, -1000, 2786, 2786, 2786, -1000, 261, -92, -1000,
	217, 1390, 19405, 689, 1102, 10370, -1000, 1358, -1000, 21416,
	-1000, 1262, -1000, -1000, 289, 709, -1000, -1000, -1000, 746,
	-1000, 739, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15632,
	1297, 709, -1000, -1000, -1000, 709, -1000, 10370, -261, -1000,
	-1000, 14459, 1474, -1000, 21416, 2877, -1000, 118, 2679, 141,
	-1000, 143, -1000, -1000, 211, 946, -1000, -94, 1004, -1000,
	19120, 1297, -1000, -1000, -1000, 398, -1000, -1000, 1297, 689,
	633, 1222, -1000, -1000, -1000, 621, 642, -1000, 135, -1000,
	208, -1000, -155, -1000, 1223, -1000, 7984, -1000, -1000, -1000,
	302, 117, -1000, -1000, 1221, -126, 21416, -1000, -1000, 2786,
	10706, -1000, 940, 2556, 140, 1004, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1844, 12, 40, 1843, 1842, 1835, 1592, 1590, 1588,
	1570, 1833, 1827, 1823, 1818, 1816, 1815, 1812, 1811, 1810,
	1807, 1804, 1802, 1800, 1799, 1798, 1795, 1794, 1792, 1790,
	1489, 1788, 1786, 1785, 109, 1784, 1783, 1780, 1779, 80,
	146, 83, 79, 1157, 1778, 42, 115, 107, 1777, 89,
	1776, 1774, 224, 1766, 106, 1764, 1763, 148, 1762, 1761,
	45, 65, 38, 46, 1759, 1757, 105, 153, 1755, 1754,
	32, 1752, 1751, 95, 23, 30, 28, 48, 1750, 69,
	22, 1745, 93, 1743, 1742, 1740, 1739, 55, 1737, 91,
	41, 35, 18, 1735, 29, 26, 102, 67, 50, 25,
	177, 100, 1734, 64, 101, 82, 1732, 973, 1729, 1726,
	1725, 1724, 1723, 1722, 838, 97, 1721, 1719, 1718, 77,
	0, 926, 76, 120, 1717, 1716, 1714, 2446, 118, 104,
	51, 1712, 88, 85, 72, 1711, 1710, 68, 113, 3,
	119, 116, 1705, 110, 1704, 1703, 1702, 2134, 98, 63,
	150, 117, 1700, 1694, 94, 78, 73, 54, 87, 99,
	19, 1688, 1687, 1686, 52, 1685, 15, 39, 6, 81,
	1684, 1683, 1682, 1681, 44, 59, 1680, 43, 1679, 20,
	7, 9, 74, 5, 1678, 1677, 1676, 4, 1664, 47,
	1662, 10, 1661, 17, 1660, 1659, 1658, 71, 1656, 1655,
	1654, 21, 1649, 1648, 31, 36, 66, 49, 1647, 1646,
	90, 70, 57, 1645, 53, 16, 2, 1, 1644, 11,
	1641, 1635, 1633, 33, 27, 1632, 1630, 1629, 1628, 1627,
	1625, 56, 1624, 1616, 1612, 1611, 1608, 8, 1605, 1599,
	14, 1598, 1597, 1596, 1578, 209, 1594, 1586, 24, 1577,
	1566, 1564, 1561, 676,
}

var yyR1 = [...]uint8{
	0, 242, 243, 243, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 6, 3, 4, 4, 5, 5,
	7, 7, 33, 33, 8, 9, 9, 9, 246, 246,
	52, 52, 96, 96, 10, 10, 10, 10, 11, 11,
	220, 220, 219, 221, 221, 12, 12, 12, 12, 12,
	213, 213, 213, 213, 213, 13, 13, 216, 216, 14,
	14, 14, 101, 101, 105, 105, 105, 106, 106, 106,
	106, 233, 233, 232, 232, 135, 135, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 247, 247, 248, 248, 248,
	248, 248, 248, 248, 211, 211, 211, 211, 212, 212,
	212, 214, 214, 215, 215, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 218, 218, 195, 195, 195,
	196, 196, 196, 196, 196, 196, 198, 198, 199, 199,
	125, 125, 193, 193, 192, 191, 191, 190, 190, 189,
	200, 200, 22, 171, 172, 172, 172, 172, 172, 172,
	172, 159, 159, 139, 139, 139, 139, 139, 139, 139,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 206, 206, 206, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	208, 209, 202, 202, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 149, 149,
	149, 149, 149, 149, 201, 201, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 143, 143, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 142, 142, 142,
	142, 142, 142, 142, 142, 144, 144, 144, 144, 144,
	144, 144, 144, 140, 140, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 146, 146,
	146, 146, 146, 146, 146, 146, 158, 158, 147, 147,
	156, 156, 157, 157, 157, 148, 148, 148, 155, 155,
	155, 152, 152, 153, 153, 154, 154, 154, 150, 150,
	150, 151, 151, 151, 161, 182, 182, 182, 184, 184,
	185, 185, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 170, 170, 210, 210, 181, 181, 181,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 169,
	169, 179, 179, 180, 180, 177, 177, 177, 178, 164,
	164, 164, 164, 164, 165, 166, 166, 166, 166, 162,
	163, 204, 204, 204, 238, 238, 238, 238, 238, 238,
	239, 239, 205, 205, 167, 167, 168, 168, 175, 175,
	175, 175, 249, 249, 173, 173, 174, 174, 174, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 250, 250, 251, 251, 251, 251,
	251, 251, 251, 188, 186, 186, 187, 187, 17, 18,
	18, 18, 18, 18, 19, 19, 23, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	112, 112, 109, 109, 110, 110, 111, 111, 111, 113,
	113, 113, 136, 136, 136, 25, 25, 27, 27, 28,
	29, 26, 26, 26, 26, 26, 252, 30, 31, 31,
	32, 32, 32, 36, 36, 36, 34, 34, 35, 35,
	41, 41, 40, 40, 42, 42, 42, 42, 124, 124,
	124, 123, 123, 234, 234, 234, 234, 234, 44, 44,
	45, 45, 46, 46, 47, 47, 47, 223, 223, 222,
	222, 224, 224, 224, 224, 224, 224, 59, 59, 94,
	94, 94, 97, 97, 48, 48, 48, 48, 49, 49,
	50, 50, 51, 51, 131, 131, 130, 130, 130, 129,
	129, 53, 53, 53, 55, 54, 54, 54, 54, 56,
	56, 58, 58, 57, 57, 60, 60, 60, 60, 61,
	61, 95, 95, 43, 43, 43, 43, 43, 43, 43,
	108, 108, 63, 63, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 72, 72, 72, 72, 72, 72,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 39, 39, 73, 73, 73, 79, 74, 74, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 70, 70, 70, 70,
	70, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 253, 253, 71,
	71, 71, 71, 37, 37, 37, 37, 37, 134, 134,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 138, 138, 138, 138, 138, 138, 138,
	138, 83, 83, 38, 38, 81, 81, 82, 84, 84,
	80, 80, 80, 225, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 85, 85, 86, 86, 235,
	235, 236, 236, 237, 87, 87, 88, 88, 89, 90,
	90, 90, 91, 91, 91, 91, 92, 92, 92, 65,
	65, 65, 65, 65, 65, 93, 93, 93, 93, 98,
	98, 75, 75, 77, 77, 76, 78, 99, 99, 103,
	100, 100, 104, 104, 104, 104, 104, 20, 21, 102,
	102, 102, 126, 126, 126, 114, 114, 115, 115, 107,
	107, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 117, 117, 117, 118, 118, 121, 121, 122, 122,
	127, 127, 127, 128, 128, 226, 226, 226, 227, 227,
	227, 228, 228, 229, 230, 230, 231, 241, 241, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 244, 245, 132,
	133, 133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 5, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 8, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 2, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 7,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 0, 3, 1, 1, 1, 1, 2, 13, 12,
	14, 12, 13, 12, 7, 8, 7, 5, 5, 5,
	11, 11, 9, 5, 8, 0, 3, 0, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 1, 1,
	1, 1, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 1, 4, 0, 2, 2,
	0, 2, 2, 2, 2, 2, 0, 2, 0, 3,
	0, 1, 0, 2, 1, 0, 2, 1, 3, 3,
	0, 2, 4, 4, 0, 1, 3, 3, 3, 3,
	3, 2, 2, 3, 1, 1, 1, 1, 1, 0,
	2, 2, 3, 2, 4, 2, 4, 2, 2, 3,
	2, 3, 2, 7, 9, 3, 3, 6, 9, 9,
	8, 8, 5, 8, 7, 4, 2, 4, 6, 2,
	1, 1, 1, 2, 1, 1, 1, 3, 3, 1,
	2, 1, 1, 2, 0, 4, 3, 4, 3, 3,
	3, 3, 3, 3, 3, 2, 4, 6, 2, 3,
	2, 3, 1, 3, 0, 2, 0, 3, 3, 2,
	2, 2, 2, 2, 3, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 3, 2,
	2, 2, 2, 1, 1, 1, 3, 3, 2, 2,
	2, 1, 1, 1, 1, 4, 4, 4, 4, 4,
	1, 5, 2, 2, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 3, 3, 0, 3,
	3, 0, 1, 0, 1, 0, 2, 1, 0, 3,
	3, 0, 1, 2, 6, 0, 1, 4, 1, 2,
	1, 3, 2, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 1, 0, 2, 5,
	2, 3, 3, 2, 3, 2, 2, 3, 4, 1,
	1, 1, 1, 1, 3, 3, 2, 2, 1, 2,
	5, 5, 8, 8, 13, 1, 1, 2, 2, 10,
	7, 0, 1, 1, 0, 1, 1, 1, 2, 2,
	1, 2, 0, 3, 0, 1, 1, 3, 0, 4,
	1, 3, 2, 1, 1, 2, 1, 1, 1, 6,
	11, 13, 13, 6, 7, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 6, 4, 2, 4, 2, 2, 2, 2, 3,
	1, 1, 0, 1, 0, 1, 0, 2, 2, 0,
	2, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 3, 4, 4, 5, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 0, 4, 1,
	3, 1, 1, 1, 1, 1, 1, 4, 8, 1,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 0, 4, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 6, 2, 2, 2, 2, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 2, 4, 5, 5, 6,
	4, 4, 4, 6, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 9, 7, 5, 4, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 2, 2,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 3, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 3, 0, 2, 0,
	3, 1, 3, 1, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 5, 3, 1, 3, 1,
	2, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 2, 0, 2,
	2, 0, 1, 4, 1, 3, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -242, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -23, -24, -25, -27, -28, -29,
	-26, -3, -4, 7, -33, 9, 10, 31, -22, 122,
	123, 125, 124, 155, 126, 148, 52, 206, 207, 209,
	210, 26, 149, 150, 153, 154, 6, -244, 8, 334,
	56, -243, 382, -87, 15, -32, 5, -30, -252, -30,
	-30, -30, -30, -171, 56, -238, -239, -200, 131, 164,
	326, 128, 144, 162, 163, 354, 129, 366, 367, 146,
	369, 76, -107, 132, 134, 129, 129, 130, 132, 326,
	128, 129, -57, -127, 59, -120, 61, 171, 345, 21,
	206, 219, 220, 211, 252, 240, 346, 169, 237, 241,
	291, 380, 69, 209, 300, 138, 175, 151, 232, 235,
	234, 226, 223, 28, 258, 352, 225, 141, 259, 263,
	270, 292, 341, 216, 217, 294, 256, 33, 143, 347,
	37, 159, 295, 261, 255, 250, 131, 254, 215, 249,
	41, 229, 265, 264, 266, 290, 243, 170, 269, 245,
	227, 244, 18, 154, 157, 260, 262, 224, 172, 136,
	161, 351, 296, 222, 158, 173, 153, 299, 368, 168,
	210, 293, 218, 302, 205, 204, 40, 276, 236, 213,
	228, 214, 140, 207, 166, 247, 160, 230, 231, 253,
	212, 248, 208, 162, 155, 301, 277, 353, 246, 242,
	238, 239, 167, 132, 164, 165, 283, 284, 285, 286,
	349, 297, 233, 278, 279, 177, 178, 179, 180, 181,
	182, 183, 34, 35, 342, 343, 129, 116, 241, 122,
	281, 130, 33, 161, -136, 129, -109, 165, 283, 284,
	285, 286, 59, 293, 292, 287, -127, 208, -132, -132,
	-132, -132, -132, -30, -2, -91, 17, 16, -5, -3,
	-244, 21, 22, -42, 107, -43, -127, -62, 78, -67,
	29, 59, -120, 61, 24, -66, -63, -80, -225, -78,
	-79, 116, 117, 105, 106, 113, 79, 118, -70, -68,
	-69, -71, -228, 62, -121, 60, 70, 63, 64, 65,
	66, 71, 72, 73, 303, -76, -244, 46, 47, 335,
	336, 337, 338, 344, 339, 81, 36, 38, 325, 333,
	332, 331, 329, 330, 327, 328, 379, 135, 326, 111,
	334, 267, -31, -107, -45, -46, -47, -48, -59, -79,
	-244, -57, 11, -52, -57, -100, -135, 208, -104, 293,
	292, -122, 303, -102, -121, -119, 291, 241, 290, 59,
	-120, 127, 185, 357, 77, 23, 25, 274, 280, 184,
	80, 116, 16, 81, 191, 366, 367, 115, 335, 122,
	50, 327, 328, 325, 189, 337, 338, 326, 281, 196,
	20, 29, 377, 10, 26, 149, 22, 109, 124, 186,
	84, 85, 152, 24, 150, 73, 192, 194, 19, 53,
	142, 11, 356, 13, 14, 371, 358, 135, 134, 96,
	370, 130, 48, 8, 118, 27, 378, 93, 44, 147,
	195, 46, 94, 17, 329, 330, 32, 344, 156, 111,
	51, 38, 372, 78, 373, 71, 54, 298, 190, 76,
	15, 49, 157, 374, 144, 193, 95, 125, 334, 47,
	187, 375, 128, 188, 6, 340, 31, 148, 45, 129,
	282, 83, 133, 72, 163, 5, 146, 9, 52, 55,
	331, 332, 333, 36, 82, 12, 145, 348, 74, -172,
	-159, -121, 61, 130, 130, 132, -233, 204, 132, -121,
	-115, 135, -115, -121, -121, -57, 129, -115, 369, 366,
	367, 334, 129, -57, -57, -114, 135, 59, -114, -114,
	-114, -57, 119, -57, 59, 31, 326, 59, 161, 129,
	162, 132, -133, -244, -122, -133, -133, -133, 166, 167,
	-133, -110, 288, 54, -133, -36, 42, 43, -245, 58,
	-92, 19, 32, -43, -127, -88, -89, -43, -87, -2,
	11, -124, 77, 76, 93, -123, 23, -121, 61, 119,
	-43, -64, 96, 78, 94, 95, 80, 102, 101, 112,
	105, 106, 107, 108, 109, 110, 111, 103, 104, 115,
	379, 86, 87, 88, 89, 90, 91, 92, 97, 98,
	99, 100, -108, -244, -197, 379, -79, -244, 120, 121,
	-67, -67, -67, -67, -67, -67, -67, -229, 268, -244,
	61, 119, -2, -74, -43, -244, -244, -244, -244, -244,
	-244, -244, -244, -244, -83, -43, -244, 39, -253, -244,
	-253, -253, -253, -253, -253, -253, -253, -138, 116, 241,
	151, 232, -141, -140, 247, 246, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 240, 346, -244, -244,
	-244, -244, 68, -58, 27, -57, 31, 57, -53, -55,
	-54, -56, 44, 48, 50, 45, 46, 47, 51, -131,
	23, -45, -244, -130, 157, -129, 23, -127, 61, -57,
	-52, -246, 57, 11, 55, 57, -100, 208, -101, -105,
	294, 296, 86, 119, -126, -121, 61, 29, 31, 58,
	57, -160, -139, -143, -140, -145, -144, -146, -121, -141,
	-142, 240, 346, 237, 241, 238, 243, 244, 245, 116,
	242, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 246, 258, 31, 151, 230, 231, 232, 235,
	234, 236, 233, 259, 260, 261, 262, 263, 264, 265,
	266, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 225, 226, 227, 229, 228, -160, -121,
	54, 203, -121, -115, 132, 205, -115, -193, 55, 59,
	78, 59, 54, -211, 54, 19, 184, 185, 197, 23,
	-115, -57, -57, 298, -133, 133, -57, 24, 54, -57,
	59, 59, -128, -127, -119, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -112, 282, 289, -57, -34,
	22, 9, 96, 57, 18, 119, 57, -90, 25, 26,
	-91, -245, -57, -43, -43, -72, 71, 78, 72, 73,
	-123, 107, -128, -122, -119, -67, -73, -76, -79, 67,
	96, 94, 95, 80, -67, -67, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -67, -134,
	59, 61, -143, 231, -138, -141, 222, 223, 225, 226,
	227, 229, 228, 59, 241, 231, 271, 118, 247, 256,
	257, -139, -66, 61, -121, -66, -121, 383, -41, 22,
	-40, -74, -42, -43, -122, -245, 57, -245, -2, -40,
	-40, -43, -137, 116, 237, 151, 232, 226, 256, 257,
	243, 276, 230, 277, 219, 211, 216, 229, 227, 213,
	228, 212, 225, 222, 235, 234, 236, 247, 238, 245,
	244, 242, -43, -80, -67, -80, -121, -127, -40, -34,
	-81, -82, 82, -80, 19, -245, 239, -40, -41, -40,
	-40, -40, -96, 157, -57, -99, -103, -80, -46, -47,
	-47, -46, -47, 44, 44, 44, 49, 44, 49, 44,
	-54, -127, -245, -60, 52, 134, 53, -244, -129, -96,
	55, -45, -57, -104, -101, 57, 295, 297, 298, 54,
	74, -43, -122, -151, 116, 115, -175, -249, 349, 35,
	-159, -161, -164, -162, -163, -176, -165, 138, 136, 140,
	141, 146, -169, 130, 147, 71, 78, -206, 138, -208,
	54, 274, 280, 136, 147, 146, 380, 69, 139, 356,
	358, 29, 30, -154, 383, 268, -152, 277, -147, 56,
	-147, -147, 239, -148, 56, -147, -148, -147, -148, -150,
	241, -150, -150, -150, -150, 56, 56, -147, -147, -147,
	-147, -147, -156, 56, 224, -156, -156, -157, 56, -157,
	54, 55, -57, -121, 54, -57, -115, -232, 377, 378,
	-57, -191, 348, -192, 59, -133, 24, -133, -57, -214,
	-212, 8, 9, 10, -57, 198, -139, -57, -116, 127,
	124, 125, -188, 123, 274, 241, 69, 29, 15, 335,
	157, 353, 59, 158, -57, -57, -57, -133, -111, 11,
	96, -35, 45, 40, -43, -43, -128, -89, -92, 71,
	72, 73, 119, -244, -73, -67, -67, -67, -39, 152,
	77, 348, -245, 239, -155, 348, 349, -154, -230, -231,
	61, -245, -40, 57, -245, -245, -43, -245, -245, -245,
	57, 55, 57, -147, 56, -147, -147, -157, -147, 217,
	-147, 217, -157, -147, -147, -147, -147, -147, 23, 57,
	11, 57, 57, 11, 119, -245, -40, -84, -82, 84,
	-43, -245, -127, -245, -245, -245, -245, -65, 31, 36,
	-2, -244, -244, -61, 57, 12, 86, -50, -49, 54,
	55, -51, 54, -49, 44, 44, -223, 348, 130, 130,
	130, -97, -121, -61, -45, -61, -105, -106, 299, 296,
	302, 86, 59, -173, -122, 57, 34, 56, -205, 54,
	78, -167, -121, 147, -169, -169, 59, -169, 59, 130,
	59, 71, 19, -121, 9, 147, 147, -205, 61, -57,
	-202, 357, 16, 56, -207, 56, 61, 62, 63, 64,
	71, -149, 70, -63, 269, -70, 325, 328, 327, 270,
	-121, -127, -209, 63, 384, -153, 278, 63, -150, -150,
	-147, -150, 63, 59, -150, -150, -151, 31, -151, -151,
	-151, -151, -158, 61, -158, -155, -155, 63, -156, 63,
	-57, -121, 56, 54, -57, 23, -57, 23, -190, -189,
	-122, -195, 23, 54, 57, -211, 55, -132, -125, 138,
	-164, -251, 164, 146, 137, 142, 141, 59, 136, 140,
	157, -194, 164, 137, 138, 142, 141, 59, 130, 147,
	136, 140, 157, 146, -117, -118, 133, 23, 130, 147,
	157, 127, -133, -113, 94, 12, -127, -127, -40, 41,
	119, 107, -122, -41, -39, 77, -67, -67, 230, 230,
	230, 384, 57, -197, -245, -42, -234, 381, -137, 116,
	237, 151, 232, 226, 256, 243, 276, 230, 277, 219,
	211, 216, 229, 227, 213, 228, 212, 225, 222, 235,
	234, 236, 247, 238, 245, 244, 242, -134, -43, -150,
	59, -137, -67, -67, -67, -67, -67, -122, 345, -87,
	85, -43, 83, -98, 54, -99, -75, -77, -76, -244,
	-2, -93, -121, -97, -87, -103, -43, -43, -43, 56,
	-43, 56, -244, -244, -244, -245, 57, -87, -61, 296,
	300, 301, -43, 86, -122, -175, -180, -177, -121, 147,
	10, 9, 19, 142, 136, 380, 59, 59, 59, -204,
	146, 366, 367, 368, -206, 380, -149, 270, -244, 56,
	23, 29, 63, -207, 56, -197, 379, -197, -244, -147,
	56, -147, 56, 56, 119, 58, -151, -151, -150, -151,
	58, 58, -151, -151, 59, 116, 58, 57, 58, 57,
	58, 57, 56, 55, 54, -179, -180, -70, -121, -57,
	56, -2, 23, -2, 57, 86, -196, 19, 172, 173,
	-57, -212, -214, -121, -250, 130, 147, -121, -132, -121,
	-132, -121, -57, -132, -121, 138, -164, 61, -43, -44,
	11, -245, -67, 279, 279, 279, -231, -244, -245, -245,
	-245, -245, -245, 19, 57, -245, 57, 19, -244, -38,
	340, -43, 28, -98, 57, -245, -245, -245, 57, 119,
	-245, -91, -94, -121, 147, -222, -224, 371, 372, 373,
	374, 375, 376, -94, -94, -94, -130, -121, -91, -174,
	-122, 61, 63, 58, 57, -147, -178, 272, -147, -166,
	168, 169, 31, 170, -166, 368, 147, 147, -244, -204,
	-205, -43, -94, 56, 358, 57, 58, -207, -121, -245,
	58, 58, 58, -122, -151, -150, 61, -150, 63, 63,
	-179, -121, -57, 58, 56, -94, -2, -189, -174, 133,
	21, 6, 8, 9, 10, 19, 23, -247, 56, -121,
	146, 56, 27, -121, -61, -45, -245, -235, -87, 157,
	-67, -67, -67, -67, -67, -245, 61, 147, -77, 36,
	-2, -244, -121, -121, 57, 58, 58, 57, -245, -245,
	-245, -60, -182, -184, 348, -183, 55, 143, 69, 177,
	178, 179, 180, 181, 182, 183, -177, -90, -205, 54,
	71, 171, -205, 54, -167, -121, -204, -43, -244, -245,
	58, -43, 56, 63, 58, -151, -151, 58, 58, 58,
	56, 56, -95, 370, -179, 58, -168, -121, 186, -215,
	-217, -7, -9, -8, -11, -10, -12, -13, -14, -20,
	-3, 20, 31, 190, 191, 196, 192, 145, 135, -21,
	-248, -121, 105, 86, 61, -159, 57, 56, 56, -94,
	-244, 136, -85, 13, -245, -87, -245, 16, -245, -245,
	-245, -245, -37, 96, 348, 9, -75, -2, 119, -121,
	-224, -223, -181, 54, -183, 348, 56, 350, 59, -170,
	86, 61, 86, 86, 86, 86, 86, 86, 86, 9,
	10, 56, 56, -245, -43, -201, 170, 54, 58, -203,
	58, 58, -95, -179, -180, -61, 56, 58, -61, -198,
	57, 55, 187, -217, -87, -220, -121, -219, -241, -240,
	304, 305, 306, 307, 308, 309, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 323,
	324, -121, -121, -121, -213, 38, 193, 194, 195, -62,
	-67, -43, -62, 58, -248, -121, -248, -248, -248, -248,
	-248, -180, -180, 58, -186, -187, 157, 147, -86, 14,
	16, -245, -236, -237, -43, -245, 346, 51, 351, -99,
	-245, -121, -121, -185, -183, -121, 63, -210, 54, 74,
	63, -210, -210, -210, -210, -210, -166, -166, -168, -180,
	-201, -245, 341, 10, 9, 354, 355, 58, 207, 360,
	361, 156, 362, 170, 363, 364, -61, 58, 58, -182,
	-94, -95, -182, -199, 348, -121, -43, -218, -217, 206,
	-91, 57, -221, -139, 188, -210, 57, -121, 11, 11,
	11, 11, -217, 206, 83, 206, 58, 58, -193, -245,
	57, -121, 56, -43, -74, 57, 41, 347, 352, -244,
	58, 57, -205, -205, 58, 58, -201, -166, -166, 348,
	63, 16, 63, 63, 63, 63, 361, 156, 363, 16,
	-182, -61, -182, -181, 58, -61, -181, 380, -217, -92,
	-219, -121, 189, -240, 27, -216, -217, -215, -216, -226,
	199, 78, -191, -187, 36, -180, -237, 41, -121, -183,
	139, -182, 63, 63, 365, -127, -181, -182, -182, -43,
	382, 19, -121, 85, -217, 382, 85, -227, 200, 199,
	159, 58, 348, -245, -57, -181, 119, -181, 85, -2,
	85, 84, 202, 201, 160, 351, 56, -122, 135, 206,
	-244, 352, -168, -216, -67, 156, 58, 85, -245, -245,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 824, 0, 526, 526, 526, 526, 526, 0, -2,
	879, 0, 0, 0, 0, -2, 516, 517, 0, 519,
	520, 1209, 1209, 1209, 1209, 1209, 526, 0, 32, 33,
	1207, 1, 3, 832, 0, 0, 530, 911, 528, 879,
	0, 0, 0, 87, 164, 0, 0, 0, 0, 0,
	877, 877, 0, 0, 0, 0, 877, 405, 406, 407,
	410, 0, 0, 0, 880, 0, 875, 0, 875, 875,
	875, 0, 475, 613, 900, 901, 902, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 0, 0, 0, 0,
	1210, 1210, 1210, 1210, 0, 1210, 504, 493, 495, 496,
	497, 498, 1210, 513, 514, 503, 515, 518, 521, 522,
	523, 524, 525, 533, 26, 836, 911, 911, 824, 28,
	0, 531, 532, 0, 544, 548, 0, 623, 911, 628,
	630, -2, -2, -2, 0, 669, 670, 671, 672, 673,
	674, 911, 911, 911, 911, 911, 911, 911, 701, 702,
	703, 704, 0, 806, 800, 808, 809, 810, 811, 812,
	813, 814, 632, 633, 0, 856, 911, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, 737, 737,
	737, 737, 737, 737, 737, 737, 0, 0, 0, 0,
	0, 912, 527, 0, 0, 560, 562, 563, 564, 594,
	0, 596, 0, 0, 40, 44, 0, 1173, 860, -2,
	-2, 0, 0, 0, 898, 899, -2, 1080, -2, 896,
	897, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 0,
	165, 179, 179, 0, 0, 877, 0, 0, 877, 152,
	0, 0, 0, 0, 0, 0, 877, 0, 411, 408,
	409, 161, 0, 1210, 0, 0, 0, 0, 0, 0,
	0, 474, 0, 476, 1210, 1210, 1210, 1210, 1210, 1210,
	1210, 1210, 485, 1211, 1212, 486, 487, 488, 1210, 1210,
	490, 0, 505, 0, 499, 536, 534, 535, 27, 1208,
	22, 0, 0, 833, 0, 825, 826, 829, 832, 26,
	0, 545, 911, 911, 0, 549, 0, 551, 552, 0,
	626, 911, 0, 0, 911, 911, 911, 911, 911, 911,
	911, 911, 911, 911, 911, 911, 911, 911, 911, 0,
	0, 650, 651, 652, 653, 654, 655, 656, 657, 658,
	659, 660, 629, 0, 805, 179, 643, 0, 0, 0,
	692, 693, 694, 695, 696, 697, 698, 705, 0, -2,
	807, 0, 26, 0, 667, 911, 911, 911, 911, 911,
	911, 0, 911, 536, 0, 792, 0, 0, 728, 0,
	729, 730, 731, 732, 733, 734, 735, 736, 783, 0,
	785, 786, 787, 788, 789, 790, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 283, 284, 911, -2,
	911, 911, 529, 42, 0, 612, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 604, 0, 0, 0, 0,
	595, 0, 0, 615, 1135, 597, 0, 599, 600, -2,
	0, 0, 0, 38, 39, 0, 45, 1173, 47, 72,
	0, 0, 911, 0, 341, 872, 873, 874, 870, 418,
	0, 171, 335, 331, 174, 175, 176, 177, 178, 318,
	256, -2, -2, -2, -2, -2, -2, -2, -2, 318,
	-2, -2, -2, -2, -2, 338, -2, -2, -2, -2,
	-2, 304, -2, 1095, 0, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 172, 0,
	0, 0, 0, 0, 877, 0, 0, 155, 0, 1210,
	0, 1210, 0, 0, 0, 114, 115, 116, 0, 179,
	0, 162, 0, 0, 441, 0, 469, 876, 0, 1210,
	472, 473, 614, 903, 904, 477, 478, 479, 480, 481,
	482, 483, 484, 489, 492, 506, 500, 501, 494, 538,
	537, 837, 0, 911, 911, 0, 911, 828, 830, 831,
	836, 29, 24, 624, 625, 627, 644, 0, 646, 648,
	550, 546, 0, 801, -2, 634, 635, 663, 664, 665,
	0, 911, 911, 911, 661, 639, 0, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 689,
	748, 749, 690, 0, 700, 318, 320, 320, 320, 322,
	322, 273, 274, 0, 318, 318, 249, 250, -2, -2,
	-2, 335, 687, 246, 0, 688, 699, 0, 0, 911,
	0, 0, 542, 548, 803, 666, 911, 855, 26, 0,
	0, 0, 0, -2, -2, -2, -2, -2, -2, 757,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 0, 671, 0, 0, 800, 0, 0, 911,
	798, 795, 911, 0, 0, 738, 784, 0, 0, 541,
	0, 0, 0, 0, 611, 619, 857, 0, 561, 590,
	592, 0, 587, 602, 603, 605, 0, 607, 0, 609,
	610, 565, 566, 567, 0, 0, 0, 0, 598, 619,
	0, 619, 41, 861, 46, 0, 0, 75, 76, 862,
	863, 864, 0, 866, 342, 0, 163, 420, 0, 423,
	166, 167, 168, 169, 170, 0, 412, -2, 1140, 1163,
	1098, 0, 0, 379, 380, 181, 0, 183, 0, 185,
	0, 187, 188, 0, 190, 192, 412, 0, 0, 0,
	0, 0, 0, 180, 0, 337, 333, 332, 255, 0,
	338, 338, 318, 338, 0, 338, 338, 292, 293, 341,
	0, 341, 341, 341, 341, 0, 0, 328, 328, 278,
	279, 280, 267, 0, 320, 269, 270, 271, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 82, 83, 84,
	0, 97, 0, 153, 154, 98, 878, 99, 137, 0,
	121, 118, 119, 120, 0, 117, 103, 0, 1209, 150,
	0, 891, 442, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 0, 0, 468, 1210, 471, 509, 0,
	0, 911, 539, 0, 834, 835, 0, 827, 23, 645,
	647, 649, 0, -2, 636, 661, 640, 0, 637, 911,
	911, 0, 631, -2, 248, 0, 0, 254, 0, 914,
	246, 706, 0, 911, 553, 710, 668, -2, 711, 712,
	0, 0, 911, 750, 1207, 338, 754, 755, 758, 760,
	761, 763, 768, 774, 775, 778, 781, 782, 0, 911,
	911, 911, 911, 911, 0, 0, 824, 0, 796, 911,
	0, 726, 727, 739, 740, 741, 742, 849, 0, 0,
	-2, 0, 0, 824, 0, 911, 911, 584, 591, 911,
	0, 585, 911, 586, 606, 608, 577, 0, 0, 0,
	0, 0, 582, 824, 619, 37, 73, 74, 0, 0,
	80, 911, 343, 0, 424, 418, 422, 0, 389, 0,
	0, 0, 415, 370, 0, 0, 373, 0, 375, -2,
	401, 182, 0, 0, 0, 189, 191, 0, 195, 196,
	0, 222, 0, 0, 206, 0, -2, 210, 211, 212,
	246, 214, 215, 216, 1129, 219, 318, 318, 242, 1101,
	0, 0, 220, 221, 336, 173, 334, 0, 341, 341,
	338, 341, 0, 0, 341, 341, 294, 0, 295, 296,
	297, 298, 0, 316, 0, 276, 277, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 157,
	0, 140, 0, 0, 0, 0, 0, 429, 0, 414,
	433, 1209, 0, 151, 456, 457, 458, 459, 460, 461,
	462, 1209, 0, 443, 444, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 0, 1209, 892, 893, 894, 895,
	0, 0, 470, 491, 0, 911, 507, 508, 558, 838,
	0, 547, 802, 0, 638, 911, 662, 641, 0, 0,
	0, 913, 0, 916, 707, 543, 708, 0, 0, 318,
	318, 753, 318, 322, 756, 318, 759, 318, 762, 764,
	765, 766, 767, 322, 769, 770, 771, 772, 773, 318,
	318, 776, 777, 318, 780, 318, 318, 0, 0, 751,
	752, 0, 0, 0, 0, 0, 0, 801, 0, 793,
	725, 799, 911, 30, 0, 849, 839, 851, 853, 911,
	26, 0, 845, 0, 832, 858, 620, 859, 588, 0,
	593, 0, 0, 0, 0, 596, 0, 832, 36, 77,
	78, 79, 865, 0, 425, 421, 0, 383, 318, 318,
	0, 0, 0, 0, 0, 0, 371, 372, 374, 377,
	401, 402, 403, 205, 184, 412, 186, 0, 911, 0,
	0, 223, 0, 0, 0, 209, 179, 213, 0, 238,
	0, 240, 0, 0, 0, 319, 285, 286, 341, 287,
	326, 327, 288, 289, 339, 340, 338, 0, 338, 0,
	323, 0, 0, 0, 0, 0, 381, 382, 318, 0,
	0, -2, 0, -2, 0, 0, 0, 0, 138, 139,
	0, 122, 0, 105, 0, 454, 455, 415, 435, 0,
	436, 438, 439, 440, 0, 414, 434, 510, 511, 619,
	0, 709, 642, 691, 329, 330, 915, 0, 713, 716,
	714, 715, 717, 911, 911, 720, 911, 911, 911, 0,
	0, 797, 0, 31, 0, 854, -2, 0, 0, 0,
	43, 34, 0, 579, 580, 0, 569, 571, 572, 573,
	574, 575, 576, 0, 0, 0, 615, 583, 35, 419,
	426, 427, 428, 345, 0, 829, 387, 388, 386, 412,
	395, 396, 0, 0, 412, 413, 414, 401, 911, 378,
	0, 0, 0, 911, 202, 0, 207, 0, 178, 217,
	239, 241, 243, 0, 291, 341, 317, 341, 0, 0,
	0, 0, 0, 621, 0, 0, -2, 158, 159, 0,
	141, 142, 143, 144, 145, 0, 0, 104, 107, 0,
	0, 0, 0, 415, 815, 559, 554, 0, 0, 0,
	0, 0, 0, 0, 743, 724, 794, 0, 852, 0,
	-2, 0, 847, 846, 0, 589, 568, 0, 616, 617,
	618, 567, 367, 346, 0, 348, 0, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 384, 385, 390, 0,
	397, 398, 391, 0, 0, 415, 0, 0, 911, 244,
	197, 0, 224, 0, 0, 306, 307, 321, 324, 621,
	0, 0, 619, 0, 0, 619, 146, 416, 0, 102,
	123, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	824, 0, 526, 0, 0, 0, 60, 911, 911, 867,
	0, -2, 107, 107, -2, 107, 107, 0, 0, 0,
	0, 0, 817, 0, 555, 0, 556, 911, 719, 718,
	721, 722, 0, 0, 0, 0, 842, 26, 0, 581,
	570, 578, 344, 0, 349, 0, 0, 0, 352, 0,
	364, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 193, 0, 0, 0, 0,
	204, 208, 619, 0, 0, 345, 0, 621, 345, 148,
	0, 911, 0, 124, 832, 48, -2, 50, 0, 917,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 55, 56, 57, 0, 0, 0, 0, 0, 0,
	0, 0, 623, 106, 108, -2, 109, 110, 111, 112,
	113, 0, 0, 152, 0, 464, 0, 0, 25, 911,
	911, 557, 820, 821, 823, 723, 0, 0, 0, 850,
	-2, 848, 368, 0, 350, 355, 353, 356, 365, 366,
	357, 358, 359, 360, 361, 362, 412, 412, 0, 0,
	400, 244, 245, 0, 0, 200, 201, 203, 0, 0,
	0, 0, 0, 0, 235, 0, 345, 619, 345, 367,
	0, 619, 367, 100, 0, 417, 147, 101, 135, 0,
	836, 0, 0, 52, 54, 868, 0, 58, 61, 62,
	63, 64, 65, 0, 0, 0, 430, 905, 155, 463,
	0, 0, 0, 818, 816, 911, 744, 0, 747, 0,
	347, 0, 392, 393, 0, 345, 194, 198, 199, 0,
	226, 0, 228, 229, 230, 231, 232, 233, 234, 0,
	367, 345, 91, 89, 622, 345, 93, 911, 0, 134,
	51, 179, 0, 918, 0, 0, 67, 0, 0, 908,
	906, 0, 437, 465, 0, 0, 822, 745, 0, 351,
	0, 367, 225, 227, 236, 0, 88, 92, 367, 149,
	0, 0, 59, 66, 68, 0, 70, 432, 0, 907,
	0, 431, 0, 369, 0, 399, 0, 90, 136, -2,
	0, 0, 909, 910, 0, 0, 0, 237, 69, 0,
	911, 746, 0, 0, 0, 0, 394, 71, 466, 467,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 382,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 383, 3, 384, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:418
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:423
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:424
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:428
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:451
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:459
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:465
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:472
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:478
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:482
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:488
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:492
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:499
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:511
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:523
		{
			yyVAL.str = InsertStr
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:527
		{
			yyVAL.str = ReplaceStr
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:533
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:539
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:543
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:547
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:552
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:553
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:557
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:561
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:566
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:570
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:576
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:580
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:584
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:588
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:594
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:598
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:611
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:615
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:621
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:626
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:630
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:636
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:643
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:650
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:657
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:665
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:675
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:679
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:683
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:687
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:691
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:697
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:704
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:714
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:718
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:725
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:734
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:742
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:753
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:757
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:763
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:767
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:771
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:777
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:781
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:785
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:789
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:794
		{
			yyVAL.str = ""
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:798
		{
			yyVAL.str = yyDollar[3].str
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:804
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:808
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:814
		{
			yyVAL.str = SessionStr
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:818
		{
			yyVAL.str = GlobalStr
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:824
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:829
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 89:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:849
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:869
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 91:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:890
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 92:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:906
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 93:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:923
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 94:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:942
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 95:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:950
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:       CreateSqlSecurityStr,
				SecurityType: yyDollar[3].str,
				Name:         yyDollar[6].tableName.ToViewName(),
				Definition:   yyDollar[8].selStmt,
			}}
		}
	case 96:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:959
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:967
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:975
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:979
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:983
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 101:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:995
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 102:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1006
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1017
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 104:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1028
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1033
		{
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1034
		{
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1038
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1039
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1040
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1041
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1042
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1043
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1044
		{
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1048
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1052
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1056
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1060
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1066
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1070
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1074
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1080
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1084
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1090
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1094
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1100
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1112
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1124
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1131
		{
			yyVAL.bytes = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1135
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1139
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1144
		{
			yyVAL.bytes = nil
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1148
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1152
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1156
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1160
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1164
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1169
		{
			yyVAL.expr = nil
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1173
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1178
		{
			yyVAL.expr = nil
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1182
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1187
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1191
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1196
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1200
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1206
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1211
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1216
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1222
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1227
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1233
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1238
		{
			yyVAL.bytes = nil
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1242
		{
			yyVAL.bytes = nil
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1248
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1255
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1261
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1265
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1270
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1274
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1278
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1282
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1286
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1292
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1297
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1303
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1314
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1319
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1325
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1338
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1343
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1348
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1353
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1359
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1364
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1369
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1374
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1379
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1384
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1389
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1394
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1399
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1408
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1418
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1423
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1428
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1435
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1442
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1450
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1455
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1461
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1467
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1473
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1479
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1486
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1490
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1494
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1500
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1504
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1508
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1512
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1516
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1520
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1524
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1528
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1532
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1536
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1540
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1546
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1552
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1558
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1562
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1567
		{
			yyVAL.sequence = &Sequence{}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1571
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1576
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1581
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1586
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1591
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1596
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1601
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1606
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1611
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1616
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1621
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1626
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 237:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1631
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1638
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1642
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1646
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1650
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1654
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1658
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1663
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1667
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1672
		{
			yyVAL.bytes = nil
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1686
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1691
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1958
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1963
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1968
		{
			yyVAL.optVal = nil
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1972
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1977
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1981
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1989
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1993
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1999
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2007
		{
			yyVAL.optVal = nil
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2011
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2015
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2024
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2028
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2032
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2037
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2041
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2046
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2050
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2055
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2059
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2063
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2068
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2072
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2076
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2081
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2085
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2089
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2095
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2100
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2104
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2108
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2114
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2118
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2124
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2128
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2134
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2138
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2143
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2147
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2151
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2155
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2159
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2163
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2167
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2171
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2175
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2181
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2185
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2191
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2195
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2201
		{
			yyVAL.indexPartition = nil
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2205
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2209
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2215
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2219
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2223
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2227
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2231
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2235
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2239
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2243
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2247
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2253
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2257
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2263
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2268
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2274
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2278
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2284
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2289
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2293
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2303
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2308
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2315
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 392:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2322
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 393:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2329
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 394:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2338
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2350
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2354
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2358
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2362
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 399:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2368
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 400:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2379
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2389
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2393
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2397
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2403
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2407
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2411
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2415
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2419
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2423
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2429
		{
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2430
		{
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2434
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2438
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2443
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2450
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2454
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2461
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2465
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2471
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2475
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2480
		{
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2481
		{
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2485
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2489
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2495
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2499
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2503
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2509
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 430:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2513
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 431:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2527
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 432:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2541
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 433:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2560
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 434:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2569
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 435:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2578
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 436:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2582
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 437:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2586
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2599
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 439:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2609
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 440:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2614
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2619
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2623
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 463:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2655
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2661
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2665
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 466:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2671
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 467:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2675
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2681
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2687
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2695
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2700
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2708
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2712
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2718
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2722
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2727
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2733
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2737
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2741
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2746
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2750
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2754
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2758
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2762
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2766
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2770
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2774
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2778
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2782
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2786
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2790
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2800
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2804
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2808
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2812
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2816
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2820
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2824
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2834
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2840
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2844
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2850
		{
			yyVAL.str = ""
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2854
		{
			yyVAL.str = "extended "
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2860
		{
			yyVAL.str = ""
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2864
		{
			yyVAL.str = "full "
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2870
		{
			yyVAL.str = ""
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2874
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2878
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2884
		{
			yyVAL.showFilter = nil
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2888
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2892
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2898
		{
			yyVAL.str = ""
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2902
		{
			yyVAL.str = SessionStr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2906
		{
			yyVAL.str = GlobalStr
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2912
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2916
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2922
		{
			yyVAL.statement = &Begin{}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2926
		{
			yyVAL.statement = &Begin{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2932
		{
			yyVAL.statement = &Commit{}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2938
		{
			yyVAL.statement = &Rollback{}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2944
		{
			yyVAL.statement = &OtherRead{}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2948
		{
			yyVAL.statement = &OtherRead{}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2952
		{
			yyVAL.statement = &OtherRead{}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2956
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2960
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2965
		{
			setAllowComments(yylex, true)
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2969
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2975
		{
			yyVAL.bytes2 = nil
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2979
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2985
		{
			yyVAL.str = UnionStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2989
		{
			yyVAL.str = UnionAllStr
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2993
		{
			yyVAL.str = UnionDistinctStr
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2998
		{
			yyVAL.str = ""
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3002
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3006
		{
			yyVAL.str = SQLCacheStr
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3011
		{
			yyVAL.str = ""
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3015
		{
			yyVAL.str = DistinctStr
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3020
		{
			yyVAL.str = ""
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3024
		{
			yyVAL.str = StraightJoinHint
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3029
		{
			yyVAL.selectExprs = nil
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3033
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3039
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3043
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3049
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3053
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3057
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3061
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3066
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3070
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3074
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3081
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3086
		{
			yyVAL.overExpr = nil
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3090
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3094
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3098
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 557:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3102
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy, OrderBy: yyDollar[4].orderBy}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3107
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3111
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3117
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3121
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3131
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3135
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3139
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3144
		{
			yyVAL.strs = []string{}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3148
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3154
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3158
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3164
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3168
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3172
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3176
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3180
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3184
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3190
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 578:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3194
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3200
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3205
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3209
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3215
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3219
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3232
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3236
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3240
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3244
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3250
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3252
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3256
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3258
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3262
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3264
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3267
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3269
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3272
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3276
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3280
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3287
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3293
		{
			yyVAL.str = JoinStr
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3297
		{
			yyVAL.str = JoinStr
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3301
		{
			yyVAL.str = JoinStr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3307
		{
			yyVAL.str = StraightJoinStr
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3313
		{
			yyVAL.str = LeftJoinStr
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3317
		{
			yyVAL.str = LeftJoinStr
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3321
		{
			yyVAL.str = RightJoinStr
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3325
		{
			yyVAL.str = RightJoinStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3331
		{
			yyVAL.str = NaturalJoinStr
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3335
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3345
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3349
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3355
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3359
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3364
		{
			yyVAL.indexHints = nil
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3368
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3372
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3376
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3381
		{
			yyVAL.expr = nil
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3385
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3390
		{
			yyVAL.columns = nil
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3394
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3400
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3404
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3408
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3412
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3416
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3420
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3424
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3430
		{
			yyVAL.str = ""
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3434
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3440
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3444
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3450
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3454
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3458
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3462
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3466
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3470
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3474
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3478
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 642:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3482
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3486
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3492
		{
			yyVAL.str = IsNullStr
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3496
		{
			yyVAL.str = IsNotNullStr
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3500
		{
			yyVAL.str = IsTrueStr
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3504
		{
			yyVAL.str = IsNotTrueStr
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3508
		{
			yyVAL.str = IsFalseStr
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3512
		{
			yyVAL.str = IsNotFalseStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3518
		{
			yyVAL.str = EqualStr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3522
		{
			yyVAL.str = LessThanStr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3526
		{
			yyVAL.str = GreaterThanStr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3530
		{
			yyVAL.str = LessEqualStr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3534
		{
			yyVAL.str = GreaterEqualStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3538
		{
			yyVAL.str = NotEqualStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3542
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3546
		{
			yyVAL.str = PosixRegexStr
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3550
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3554
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3558
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3563
		{
			yyVAL.expr = nil
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3567
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3573
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3577
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3581
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3587
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3593
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3597
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3603
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3607
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3611
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3615
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3619
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3623
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3627
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3631
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3635
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3639
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3643
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3647
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3651
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3655
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3659
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3663
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3667
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3671
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3675
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3679
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3683
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3687
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 691:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3691
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3695
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3699
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3703
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3711
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3725
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3729
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3733
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3741
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3749
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3757
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3767
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 707:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3771
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 708:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3775
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 709:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3779
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3783
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3793
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3797
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 713:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3801
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 714:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3805
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3809
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 716:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3813
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 717:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3817
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 718:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3821
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 719:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3825
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 720:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3829
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 721:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3833
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 722:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3837
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 723:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3841
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 724:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3845
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3849
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3853
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3858
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3868
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3872
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3876
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3880
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3885
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3890
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3895
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3900
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3904
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3918
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3922
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3926
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 742:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3930
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3936
		{
			yyVAL.str = ""
		}
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3940
		{
			yyVAL.str = BooleanModeStr
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3944
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 746:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3948
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3952
		{
			yyVAL.str = QueryExpansionStr
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3958
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3962
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3968
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3972
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3976
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3980
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3984
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3988
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3994
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3998
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4002
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4006
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4010
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4014
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4018
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4022
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4026
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4030
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4034
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4038
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4042
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4046
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4050
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4054
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4058
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4062
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4066
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4070
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4074
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4078
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4082
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4086
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4090
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4094
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4098
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4104
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4108
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4112
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4116
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4120
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4124
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4128
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4132
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4137
		{
			yyVAL.expr = nil
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4141
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4146
		{
			yyVAL.str = string("")
		}
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4150
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4156
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4160
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4166
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4171
		{
			yyVAL.expr = nil
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4175
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4181
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4185
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 802:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4189
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4195
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4201
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4205
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4209
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4214
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4219
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4223
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4227
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4231
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4235
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4239
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4243
		{
			yyVAL.expr = &NullVal{}
		}
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4248
		{
			yyVAL.exprs = nil
		}
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4252
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4257
		{
			yyVAL.expr = nil
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4261
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4266
		{
			yyVAL.partitionBy = nil
		}
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4270
		{
			yyVAL.partitionBy = yyDollar[3].partitionBy
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4276
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4280
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4286
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4291
		{
			yyVAL.orderBy = nil
		}
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4295
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4301
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4305
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4311
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4316
		{
			yyVAL.str = AscScr
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4320
		{
			yyVAL.str = AscScr
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4324
		{
			yyVAL.str = DescScr
		}
	case 832:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4329
		{
			yyVAL.limit = nil
		}
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4333
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 834:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4337
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 835:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4341
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4346
		{
			yyVAL.str = ""
		}
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4350
		{
			yyVAL.str = ForUpdateStr
		}
	case 838:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4354
		{
			yyVAL.str = ShareModeStr
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4367
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4371
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4375
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 842:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4380
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 843:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4384
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 844:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4388
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4395
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4399
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4403
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 848:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4407
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4412
		{
			yyVAL.updateExprs = nil
		}
	case 850:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4416
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4422
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4426
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4432
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4436
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4442
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4448
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4458
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4462
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4468
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4474
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4478
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4484
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4488
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4492
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 865:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4497
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4501
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4507
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4513
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4520
		{
			yyVAL.bytes = []byte("charset")
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4527
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4531
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4535
		{
			yyVAL.expr = &Default{}
		}
	case 875:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4540
		{
			yyVAL.byt = 0
		}
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4542
		{
			yyVAL.byt = 1
		}
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4545
		{
			yyVAL.empty = struct{}{}
		}
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4547
		{
			yyVAL.empty = struct{}{}
		}
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4550
		{
			yyVAL.str = ""
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4552
		{
			yyVAL.str = IgnoreStr
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4556
		{
			yyVAL.empty = struct{}{}
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4558
		{
			yyVAL.empty = struct{}{}
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4560
		{
			yyVAL.empty = struct{}{}
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4562
		{
			yyVAL.empty = struct{}{}
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4564
		{
			yyVAL.empty = struct{}{}
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4566
		{
			yyVAL.empty = struct{}{}
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4568
		{
			yyVAL.empty = struct{}{}
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4570
		{
			yyVAL.empty = struct{}{}
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4572
		{
			yyVAL.empty = struct{}{}
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4574
		{
			yyVAL.empty = struct{}{}
		}
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4577
		{
			yyVAL.empty = struct{}{}
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4579
		{
			yyVAL.empty = struct{}{}
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4581
		{
			yyVAL.empty = struct{}{}
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4585
		{
			yyVAL.empty = struct{}{}
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4587
		{
			yyVAL.empty = struct{}{}
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4591
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4595
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4602
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4608
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4612
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4617
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4624
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 905:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4630
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4634
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4638
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4644
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4648
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4652
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 911:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4658
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4662
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 913:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4669
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4676
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4680
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4687
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4693
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4697
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5013
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5022
		{
			decNesting(yylex)
		}
	case 1209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:5027
		{
			forceEOF(yylex)
		}
	case 1210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:5032
		{
			forceEOF(yylex)
		}
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5036
		{
			forceEOF(yylex)
		}
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5040
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
