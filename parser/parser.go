// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex any, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex any, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex any, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex any) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex any) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex any) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const SCHEMA = 57457
const TABLE = 57458
const INDEX = 57459
const MATERIALIZED = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const PRIMARY = 57465
const COLUMN = 57466
const CONSTRAINT = 57467
const REFERENCES = 57468
const SPATIAL = 57469
const FULLTEXT = 57470
const FOREIGN = 57471
const KEY_BLOCK_SIZE = 57472
const POLICY = 57473
const WHILE = 57474
const UNIQUE = 57475
const KEY = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const EXEC = 57485
const EXECUTE = 57486
const MAXVALUE = 57487
const PARTITION = 57488
const REORGANIZE = 57489
const LESS = 57490
const THAN = 57491
const PROCEDURE = 57492
const TRIGGER = 57493
const TYPE = 57494
const RETURN = 57495
const STATUS = 57496
const VARIABLES = 57497
const RESTRICT = 57498
const CASCADE = 57499
const NO = 57500
const ACTION = 57501
const PERMISSIVE = 57502
const RESTRICTIVE = 57503
const PUBLIC = 57504
const CURRENT_USER = 57505
const SESSION_USER = 57506
const PAD_INDEX = 57507
const FILLFACTOR = 57508
const IGNORE_DUP_KEY = 57509
const STATISTICS_NORECOMPUTE = 57510
const STATISTICS_INCREMENTAL = 57511
const ALLOW_ROW_LOCKS = 57512
const ALLOW_PAGE_LOCKS = 57513
const DISTANCE = 57514
const M = 57515
const EUCLIDEAN = 57516
const COSINE = 57517
const BEFORE = 57518
const AFTER = 57519
const EACH = 57520
const ROW = 57521
const SCROLL = 57522
const CURSOR = 57523
const OPEN = 57524
const CLOSE = 57525
const FETCH = 57526
const PRIOR = 57527
const FIRST = 57528
const LAST = 57529
const DEALLOCATE = 57530
const INSTEAD = 57531
const OF = 57532
const OUTPUT = 57533
const DEFERRABLE = 57534
const INITIALLY = 57535
const IMMEDIATE = 57536
const DEFERRED = 57537
const CONCURRENTLY = 57538
const SQL = 57539
const SECURITY = 57540
const BEGIN = 57541
const START = 57542
const TRANSACTION = 57543
const COMMIT = 57544
const ROLLBACK = 57545
const BIT = 57546
const TINYINT = 57547
const SMALLINT = 57548
const SMALLSERIAL = 57549
const MEDIUMINT = 57550
const INT = 57551
const INTEGER = 57552
const SERIAL = 57553
const BIGINT = 57554
const BIGSERIAL = 57555
const INTNUM = 57556
const REAL = 57557
const DOUBLE = 57558
const PRECISION = 57559
const FLOAT_TYPE = 57560
const DECIMAL = 57561
const NUMERIC = 57562
const SMALLMONEY = 57563
const MONEY = 57564
const TIME = 57565
const TIMESTAMP = 57566
const DATETIME = 57567
const YEAR = 57568
const DATETIMEOFFSET = 57569
const DATETIME2 = 57570
const SMALLDATETIME = 57571
const CHAR = 57572
const VARCHAR = 57573
const VARYING = 57574
const BOOL = 57575
const CHARACTER = 57576
const VARBINARY = 57577
const NCHAR = 57578
const NVARCHAR = 57579
const NTEXT = 57580
const UUID = 57581
const TEXT = 57582
const TINYTEXT = 57583
const MEDIUMTEXT = 57584
const LONGTEXT = 57585
const CITEXT = 57586
const BLOB = 57587
const TINYBLOB = 57588
const MEDIUMBLOB = 57589
const LONGBLOB = 57590
const JSON = 57591
const JSONB = 57592
const ENUM = 57593
const GEOMETRY = 57594
const POINT = 57595
const LINESTRING = 57596
const POLYGON = 57597
const GEOMETRYCOLLECTION = 57598
const MULTIPOINT = 57599
const MULTILINESTRING = 57600
const MULTIPOLYGON = 57601
const VECTOR = 57602
const VARIADIC = 57603
const ARRAY = 57604
const NOW = 57605
const GETDATE = 57606
const BPCHAR = 57607
const TEXT_PATTERN_OPS = 57608
const NULLX = 57609
const AUTO_INCREMENT = 57610
const APPROXNUM = 57611
const SIGNED = 57612
const UNSIGNED = 57613
const ZEROFILL = 57614
const ZONE = 57615
const AUTOINCREMENT = 57616
const DATABASES = 57617
const TABLES = 57618
const VSCHEMA_TABLES = 57619
const EXTENDED = 57620
const FULL = 57621
const PROCESSLIST = 57622
const NAMES = 57623
const CHARSET = 57624
const GLOBAL = 57625
const SESSION = 57626
const ISOLATION = 57627
const LEVEL = 57628
const READ = 57629
const WRITE = 57630
const ONLY = 57631
const REPEATABLE = 57632
const COMMITTED = 57633
const UNCOMMITTED = 57634
const SERIALIZABLE = 57635
const NEW = 57636
const CONCAT_NULL_YIELDS_NULL = 57637
const CURSOR_CLOSE_ON_COMMIT = 57638
const QUOTED_IDENTIFIER = 57639
const ARITHABORT = 57640
const FMTONLY = 57641
const NOCOUNT = 57642
const NOEXEC = 57643
const NUMERIC_ROUNDABORT = 57644
const ANSI_DEFAULTS = 57645
const ANSI_NULL_DFLT_OFF = 57646
const ANSI_NULL_DFLT_ON = 57647
const ANSI_NULLS = 57648
const ANSI_PADDING = 57649
const ANSI_WARNINGS = 57650
const FORCEPLAN = 57651
const SHOWPLAN_ALL = 57652
const SHOWPLAN_TEXT = 57653
const SHOWPLAN_XML = 57654
const IMPLICIT_TRANSACTIONS = 57655
const REMOTE_PROC_TRANSACTIONS = 57656
const XACT_ABORT = 57657
const CURRENT_TIMESTAMP = 57658
const DATABASE = 57659
const CURRENT_DATE = 57660
const CURRENT_TIME = 57661
const LOCALTIME = 57662
const LOCALTIMESTAMP = 57663
const UTC_DATE = 57664
const UTC_TIME = 57665
const UTC_TIMESTAMP = 57666
const REPLACE = 57667
const CONVERT = 57668
const CAST = 57669
const SUBSTR = 57670
const SUBSTRING = 57671
const GROUP_CONCAT = 57672
const SEPARATOR = 57673
const INHERIT = 57674
const LEAD = 57675
const LAG = 57676
const MATCH = 57677
const AGAINST = 57678
const BOOLEAN = 57679
const LANGUAGE = 57680
const WITH = 57681
const WITHOUT = 57682
const PARSER = 57683
const QUERY = 57684
const EXPANSION = 57685
const UNUSED = 57686
const VIRTUAL = 57687
const STORED = 57688
const GENERATED = 57689
const ALWAYS = 57690
const IDENTITY = 57691
const SEQUENCE = 57692
const INCREMENT = 57693
const MINVALUE = 57694
const CACHE = 57695
const CYCLE = 57696
const OWNED = 57697
const NONE = 57698
const CLUSTERED = 57699
const NONCLUSTERED = 57700
const REPLICATION = 57701
const COLUMNSTORE = 57702
const INCLUDE = 57703
const HOLDLOCK = 57704
const NOLOCK = 57705
const NOWAIT = 57706
const PAGLOCK = 57707
const ROWLOCK = 57708
const TABLOCK = 57709
const UPDLOCK = 57710
const READUNCOMMITTED = 57711
const DEFINER = 57712
const INVOKER = 57713
const TYPECAST = 57714
const CHECK = 57715
const OVER = 57716

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	134, 433,
	-2, 166,
	-1, 52,
	123, 835,
	-2, 829,
	-1, 53,
	123, 836,
	-2, 749,
	-1, 271,
	123, 839,
	-2, 833,
	-1, 272,
	123, 836,
	-2, 834,
	-1, 428,
	61, 402,
	-2, 399,
	-1, 458,
	123, 837,
	-2, 260,
	-1, 580,
	123, 837,
	-2, 260,
	-1, 601,
	279, 846,
	-2, 737,
	-1, 655,
	279, 846,
	-2, 473,
	-1, 689,
	5, 36,
	-2, 14,
	-1, 695,
	5, 36,
	-2, 16,
	-1, 838,
	279, 846,
	-2, 473,
	-1, 1010,
	279, 846,
	-2, 331,
	-1, 1082,
	279, 846,
	-2, 473,
	-1, 1144,
	279, 846,
	-2, 737,
	-1, 1152,
	60, 106,
	-2, 216,
	-1, 1155,
	60, 106,
	-2, 216,
	-1, 1210,
	5, 37,
	-2, 608,
	-1, 1290,
	5, 36,
	-2, 15,
	-1, 1306,
	198, 63,
	-2, 529,
	-1, 1341,
	279, 846,
	-2, 146,
	-1, 1342,
	279, 846,
	-2, 146,
	-1, 1347,
	60, 106,
	-2, 187,
	-1, 1491,
	90, 831,
	-2, 819,
	-1, 1587,
	57, 50,
	59, 50,
	-2, 52,
	-1, 1761,
	5, 36,
	-2, 788,
	-1, 1786,
	5, 36,
	-2, 59,
	-1, 1824,
	59, 980,
	60, 980,
	-2, 459,
	-1, 1862,
	5, 37,
	-2, 789,
	-1, 1894,
	5, 36,
	-2, 791,
	-1, 1915,
	5, 37,
	-2, 792,
}

const yyPrivate = 57344

const yyLast = 11192

var yyAct = [...]int16{
	582, 1689, 563, 1817, 1871, 1707, 1779, 416, 1823, 1814,
	1609, 1623, 31, 1818, 592, 702, 1095, 1690, 48, 49,
	1749, 50, 785, 1131, 784, 1117, 1118, 1771, 1784, 1611,
	1669, 890, 77, 77, 77, 77, 1460, 1452, 1622, 1057,
	1597, 1129, 1485, 142, 145, 146, 1114, 1488, 1607, 1682,
	917, 1132, 1111, 1310, 1307, 492, 71, 1482, 1470, 1467,
	1479, 683, 1284, 1212, 1503, 638, 1279, 1471, 948, 905,
	31, 27, 932, 1009, 1090, 121, 984, 70, 894, 1372,
	223, 644, 1203, 812, 726, 682, 1262, 1039, 243, 1075,
	862, 208, 866, 1042, 420, 267, 1476, 961, 562, 553,
	73, 828, 1363, 561, 538, 258, 455, 151, 423, 172,
	139, 140, 141, 429, 259, 457, 56, 820, 191, 464,
	167, 1393, 210, 61, 481, 1003, 692, 9, 1273, 1263,
	1054, 1574, 645, 753, 752, 762, 763, 755, 756, 757,
	758, 759, 760, 761, 754, 249, 203, 764, 754, 764,
	206, 764, 206, 207, 254, 255, 35, 1091, 162, 268,
	77, 63, 430, 431, 164, 1346, 271, 268, 407, 147,
	732, 149, 225, 226, 227, 228, 574, 194, 433, 424,
	629, 58, 1916, 55, 161, 1851, 546, 64, 65, 453,
	626, 1913, 201, 443, 189, 1802, 547, 639, 847, 1159,
	1554, 1780, 190, 1416, 1417, 1168, 266, 475, 1062, 1063,
	504, 505, 1744, 427, 414, 245, 405, 753, 752, 762,
	763, 755, 756, 757, 758, 759, 760, 761, 754, 721,
	1167, 764, 1906, 1449, 169, 1163, 209, 1206, 1850, 1406,
	248, 1192, 640, 1540, 252, 66, 256, 257, 512, 1801,
	1843, 1790, 472, 264, 1789, 1717, 406, 1791, 408, 1844,
	1845, 197, 411, 192, 202, 1624, 526, 1625, 38, 1537,
	1523, 199, 198, 1872, 1873, 1874, 1875, 1876, 1877, 1878,
	1879, 496, 497, 498, 499, 879, 428, 1718, 1719, 39,
	878, 40, 483, 212, 484, 447, 799, 886, 487, 449,
	490, 491, 224, 188, 469, 466, 471, 470, 1051, 216,
	744, 214, 213, 1391, 674, 219, 673, 241, 221, 1225,
	1400, 1223, 1727, 1294, 503, 148, 45, 566, 238, 500,
	1641, 524, 1731, 1795, 1794, 231, 232, 233, 234, 235,
	1730, 742, 263, 511, 1617, 143, 1481, 515, 516, 1728,
	35, 237, 1293, 1638, 1115, 753, 752, 762, 763, 755,
	756, 757, 758, 759, 760, 761, 754, 748, 939, 764,
	751, 1110, 525, 1373, 1374, 949, 766, 767, 768, 769,
	770, 771, 772, 468, 749, 750, 747, 773, 774, 775,
	776, 753, 752, 762, 763, 755, 756, 757, 758, 759,
	760, 761, 754, 1683, 46, 764, 195, 1553, 1891, 1555,
	41, 1357, 196, 268, 430, 431, 734, 765, 733, 765,
	539, 765, 1336, 692, 446, 1146, 1135, 1134, 755, 756,
	757, 758, 759, 760, 761, 754, 548, 1136, 764, 698,
	699, 628, 560, 1535, 744, 486, 740, 741, 740, 710,
	1137, 436, 743, 242, 1378, 1410, 1392, 475, 1640, 891,
	535, 35, 152, 742, 185, 742, 711, 445, 1745, 752,
	762, 763, 755, 756, 757, 758, 759, 760, 761, 754,
	440, 537, 764, 1612, 765, 204, 425, 205, 1546, 753,
	752, 762, 763, 755, 756, 757, 758, 759, 760, 761,
	754, 765, 144, 764, 744, 1726, 848, 36, 37, 631,
	224, 200, 912, 713, 685, 1160, 1161, 186, 1480, 58,
	531, 1614, 723, 545, 187, 703, 430, 431, 268, 708,
	1168, 712, 1162, 28, 536, 268, 723, 1647, 452, 549,
	659, 188, 689, 662, 695, 648, 665, 666, 1411, 627,
	1800, 704, 539, 625, 168, 466, 1130, 506, 1907, 690,
	502, 690, 630, 641, 632, 1388, 1142, 661, 1810, 509,
	541, 1679, 643, 35, 743, 707, 743, 1148, 1149, 62,
	1373, 1374, 716, 898, 1337, 1338, 1339, 1144, 1528, 744,
	753, 752, 762, 763, 755, 756, 757, 758, 759, 760,
	761, 754, 690, 437, 764, 1783, 38, 1558, 741, 740,
	518, 686, 47, 738, 1708, 1710, 1138, 1139, 1141, 700,
	438, 1610, 1140, 187, 432, 1782, 742, 39, 731, 40,
	1217, 705, 1216, 468, 706, 703, 153, 154, 701, 765,
	188, 914, 694, 714, 1781, 426, 77, 434, 435, 155,
	845, 44, 741, 740, 43, 729, 1612, 590, 42, 268,
	783, 735, 800, 540, 757, 758, 759, 760, 761, 754,
	742, 67, 764, 60, 533, 765, 54, 57, 865, 530,
	685, 883, 410, 186, 6, 7, 1865, 532, 703, 539,
	684, 833, 58, 1747, 1614, 788, 789, 1627, 1709, 650,
	652, 1428, 857, 888, 1079, 803, 873, 802, 765, 658,
	911, 527, 160, 1234, 913, 1441, 834, 874, 896, 57,
	34, 539, 1418, 158, 668, 57, 843, 822, 823, 824,
	825, 826, 827, 1439, 628, 690, 1792, 743, 539, 1769,
	841, 466, 1626, 1157, 1182, 35, 1181, 1155, 41, 852,
	889, 875, 765, 877, 741, 740, 1440, 494, 493, 1147,
	1043, 639, 962, 1243, 1548, 882, 1180, 741, 740, 1179,
	724, 1178, 742, 765, 1154, 217, 741, 740, 884, 38,
	1177, 743, 991, 669, 990, 742, 864, 870, 872, 1000,
	1000, 897, 1176, 1153, 742, 727, 728, 730, 1002, 946,
	39, 57, 40, 268, 268, 57, 640, 57, 57, 1680,
	271, 997, 908, 639, 57, 991, 273, 1044, 273, 57,
	968, 936, 690, 57, 1422, 931, 940, 1175, 690, 1174,
	1173, 1171, 38, 690, 966, 967, 965, 1424, 1581, 1582,
	1076, 833, 942, 1058, 1408, 36, 37, 1112, 943, 1043,
	1004, 1005, 422, 39, 541, 40, 684, 52, 640, 55,
	57, 744, 220, 163, 478, 222, 834, 988, 1077, 157,
	938, 1552, 1077, 1289, 765, 941, 35, 1375, 1078, 1419,
	741, 740, 1020, 743, 1657, 779, 783, 1366, 685, 937,
	633, 421, 998, 1001, 741, 740, 743, 1362, 742, 1058,
	422, 1036, 1037, 442, 57, 743, 1364, 1113, 57, 57,
	649, 1152, 742, 489, 422, 1066, 422, 488, 655, 656,
	657, 41, 1364, 933, 934, 1495, 433, 1365, 1156, 1053,
	485, 1083, 881, 1084, 1099, 1006, 1007, 964, 1109, 880,
	30, 1038, 765, 1365, 38, 539, 744, 540, 850, 1068,
	510, 953, 955, 956, 1193, 1194, 1195, 441, 1256, 954,
	693, 985, 693, 986, 860, 39, 1165, 40, 1052, 485,
	1055, 1056, 508, 1092, 41, 741, 740, 741, 740, 859,
	962, 646, 647, 507, 485, 480, 35, 433, 1078, 1213,
	1631, 736, 801, 742, 1070, 742, 801, 1172, 170, 778,
	780, 781, 782, 786, 876, 739, 1188, 501, 1183, 743,
	791, 791, 791, 791, 791, 791, 791, 448, 36, 37,
	35, 891, 1630, 743, 433, 655, 35, 35, 906, 744,
	1420, 1421, 1423, 1425, 1426, 1169, 804, 805, 806, 807,
	808, 809, 810, 811, 989, 814, 744, 816, 817, 818,
	819, 821, 821, 821, 821, 821, 821, 821, 667, 837,
	838, 839, 840, 1199, 684, 1807, 744, 1901, 1900, 906,
	1899, 36, 37, 1252, 1886, 963, 1151, 1077, 1842, 744,
	268, 800, 1864, 744, 1252, 1803, 41, 271, 624, 685,
	539, 753, 752, 762, 763, 755, 756, 757, 758, 759,
	760, 761, 754, 1222, 743, 764, 743, 720, 1734, 1594,
	744, 1227, 720, 1643, 478, 720, 1642, 906, 1565, 720,
	1519, 1252, 1518, 1515, 1514, 1287, 623, 1004, 655, 1254,
	1286, 1591, 622, 1290, 621, 1242, 693, 1306, 550, 1332,
	1333, 1334, 690, 439, 1341, 1431, 477, 476, 720, 1509,
	690, 1272, 1345, 1347, 1152, 1152, 1347, 1152, 1152, 539,
	539, 1300, 1270, 1299, 1261, 1358, 1264, 1267, 1268, 1361,
	1240, 478, 57, 1269, 1271, 1266, 1686, 1592, 1590, 1590,
	57, 720, 1508, 36, 37, 720, 1432, 1058, 539, 791,
	791, 1288, 791, 791, 791, 791, 791, 791, 791, 791,
	791, 791, 791, 791, 791, 791, 791, 720, 1383, 1071,
	744, 1670, 1302, 1303, 1304, 1292, 1308, 1252, 1360, 692,
	1353, 1354, 1277, 693, 1252, 1251, 1381, 1274, 1343, 786,
	720, 1190, 1276, 140, 786, 720, 1094, 906, 1093, 1815,
	1219, 1220, 1768, 1221, 995, 744, 1759, 1344, 1224, 1382,
	1226, 1760, 1670, 1412, 906, 1061, 1228, 1229, 1384, 1768,
	1230, 1231, 1377, 1232, 1233, 684, 720, 947, 935, 1379,
	1380, 433, 1407, 528, 1594, 58, 703, 55, 1367, 1368,
	1369, 1370, 1371, 1387, 720, 719, 1059, 741, 740, 891,
	1395, 1435, 1020, 963, 1397, 1394, 678, 677, 671, 672,
	1071, 1399, 692, 1444, 1259, 742, 671, 670, 1401, 268,
	1020, 1258, 1585, 869, 869, 869, 1082, 1458, 1238, 1348,
	1349, 1350, 1351, 1352, 1593, 1462, 1087, 1463, 1461, 69,
	68, 1086, 1236, 1071, 1893, 1100, 1496, 478, 433, 57,
	1451, 58, 1085, 55, 58, 1455, 55, 1067, 1347, 885,
	1594, 1436, 57, 1469, 433, 861, 539, 539, 1443, 846,
	1150, 907, 38, 523, 1504, 1504, 1237, 1447, 854, 851,
	675, 664, 53, 663, 1465, 765, 660, 1768, 741, 740,
	1235, 1860, 995, 39, 32, 40, 692, 1599, 1602, 1603,
	1604, 1600, 59, 1601, 1605, 523, 742, 1772, 1773, 1430,
	1468, 791, 791, 791, 1594, 1252, 1716, 1505, 791, 791,
	791, 791, 1494, 1619, 1506, 1477, 743, 1510, 1511, 522,
	1442, 1071, 523, 1218, 906, 720, 849, 1386, 38, 268,
	676, 38, 680, 679, 59, 433, 1837, 1835, 433, 54,
	59, 1798, 32, 1772, 1773, 1815, 1658, 1082, 214, 39,
	1512, 40, 39, 791, 40, 1356, 1355, 1524, 1275, 1559,
	273, 244, 869, 869, 1187, 1186, 869, 869, 869, 1297,
	1158, 1089, 54, 1088, 1516, 1517, 707, 1065, 1616, 944,
	77, 910, 1543, 887, 268, 1547, 1549, 1550, 1551, 842,
	737, 1629, 688, 687, 871, 869, 869, 869, 869, 1544,
	1545, 654, 1583, 653, 41, 1571, 1580, 743, 1542, 651,
	634, 1572, 551, 539, 1645, 513, 59, 690, 239, 454,
	59, 869, 59, 59, 450, 1579, 1588, 419, 236, 59,
	230, 272, 1615, 59, 59, 1606, 1618, 229, 59, 417,
	1635, 1620, 218, 693, 11, 478, 246, 247, 1164, 1633,
	1775, 693, 1255, 681, 514, 251, 1466, 250, 156, 1637,
	1562, 150, 1586, 1587, 1701, 1566, 1646, 1699, 1778, 1702,
	41, 1777, 1700, 41, 1644, 59, 1698, 1573, 1703, 59,
	1603, 1604, 1697, 1104, 1105, 1887, 1342, 1661, 1568, 1191,
	1849, 1668, 815, 418, 991, 1280, 1691, 1632, 495, 637,
	1858, 36, 37, 1634, 409, 1675, 58, 1463, 55, 265,
	1281, 1481, 1659, 1108, 1660, 555, 933, 934, 1676, 59,
	268, 1521, 1101, 59, 59, 1102, 1219, 636, 268, 521,
	519, 517, 1474, 997, 1678, 1058, 159, 1685, 1687, 1040,
	1713, 1507, 1712, 1045, 904, 697, 1704, 791, 791, 1453,
	690, 1454, 544, 1692, 1297, 858, 1695, 1096, 1856, 1058,
	1715, 1663, 1714, 1693, 1694, 1556, 1696, 36, 37, 1564,
	36, 37, 1097, 1567, 1725, 1723, 891, 1855, 791, 791,
	791, 791, 1684, 1809, 1724, 1274, 900, 1688, 901, 902,
	903, 1908, 1500, 38, 1499, 1501, 1498, 869, 1746, 1497,
	1185, 899, 1438, 1246, 1415, 1414, 1427, 1761, 260, 261,
	262, 1184, 1785, 444, 39, 893, 40, 543, 542, 1753,
	1767, 895, 1589, 1776, 690, 709, 909, 8, 1787, 869,
	1, 1309, 13, 12, 1748, 1765, 1278, 273, 1786, 253,
	869, 1211, 798, 578, 1736, 1729, 478, 1475, 268, 1639,
	564, 1870, 1478, 1305, 1335, 690, 1649, 1376, 479, 193,
	991, 1816, 1691, 1825, 1785, 1793, 1257, 451, 15, 991,
	1826, 1691, 58, 1448, 55, 1819, 1291, 696, 520, 1359,
	1806, 1462, 1463, 1463, 1461, 417, 1832, 1821, 992, 993,
	994, 996, 1828, 1812, 1813, 1804, 1829, 1665, 1752, 1058,
	915, 1513, 1811, 1474, 690, 722, 1297, 1576, 57, 176,
	1297, 1454, 166, 715, 1764, 412, 1766, 29, 10, 1453,
	1170, 177, 1046, 1047, 1048, 1049, 1859, 1050, 1853, 59,
	175, 791, 1385, 174, 173, 41, 703, 171, 1848, 703,
	703, 703, 482, 1884, 211, 215, 1867, 240, 78, 1538,
	1060, 1869, 1883, 76, 1880, 1881, 1882, 1453, 74, 38,
	75, 72, 79, 1868, 1483, 1825, 1897, 1628, 1069, 529,
	1072, 1073, 1826, 1896, 1892, 1819, 1080, 1074, 1081, 1889,
	39, 777, 40, 1788, 1737, 1898, 59, 59, 1894, 1905,
	1490, 1822, 1283, 1854, 1830, 59, 1831, 1909, 1808, 1241,
	417, 1041, 1107, 1751, 565, 690, 1911, 417, 1819, 991,
	1914, 1691, 1912, 952, 577, 1433, 576, 1474, 1608, 1437,
	1910, 575, 1474, 1474, 1474, 1474, 1474, 552, 1758, 746,
	1673, 1473, 36, 37, 1584, 1297, 1474, 690, 1576, 1598,
	1596, 1595, 1774, 1770, 1472, 635, 692, 1539, 1146, 1135,
	1134, 1189, 1743, 1103, 1446, 1143, 1133, 892, 1106, 34,
	1136, 57, 57, 5, 1145, 1128, 4, 3, 1796, 1797,
	52, 791, 55, 1137, 791, 1127, 791, 1126, 791, 1125,
	791, 791, 1124, 1122, 35, 1123, 33, 1120, 1121, 1119,
	1576, 1098, 691, 2, 0, 1207, 1208, 0, 1474, 0,
	0, 41, 0, 1210, 52, 0, 55, 0, 0, 0,
	0, 0, 1214, 1215, 1474, 0, 692, 165, 1146, 1135,
	1134, 0, 0, 0, 0, 1520, 0, 0, 1681, 1454,
	1136, 417, 1475, 0, 0, 1673, 725, 1475, 1475, 1475,
	1475, 1475, 0, 1137, 1239, 0, 0, 0, 51, 745,
	1245, 1608, 59, 1711, 59, 787, 0, 38, 1247, 1248,
	0, 1249, 1250, 0, 0, 0, 0, 59, 0, 57,
	0, 38, 1561, 0, 1563, 0, 1260, 0, 39, 1130,
	40, 0, 1453, 0, 0, 0, 58, 0, 55, 1142,
	0, 38, 39, 0, 40, 0, 813, 0, 36, 37,
	1148, 1149, 0, 0, 869, 0, 0, 0, 0, 0,
	1144, 0, 39, 1475, 40, 1599, 1602, 1603, 1604, 1600,
	0, 1601, 1605, 57, 57, 1762, 1763, 0, 844, 1475,
	0, 0, 0, 57, 1613, 0, 0, 0, 0, 1138,
	1139, 1141, 0, 0, 0, 1140, 0, 0, 1576, 1130,
	867, 0, 0, 0, 0, 0, 693, 0, 0, 1142,
	0, 1648, 0, 0, 0, 692, 1297, 1146, 1135, 1134,
	1148, 1149, 0, 38, 0, 272, 417, 0, 0, 1136,
	1144, 0, 0, 790, 792, 793, 794, 795, 796, 797,
	0, 0, 1137, 0, 39, 0, 40, 0, 0, 41,
	0, 0, 1673, 1820, 1666, 693, 0, 0, 1667, 1138,
	1139, 1141, 1454, 41, 1662, 1140, 35, 583, 999, 581,
	585, 586, 587, 588, 1838, 1839, 1840, 584, 589, 0,
	0, 945, 0, 41, 0, 950, 951, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 0, 57, 57, 0,
	0, 54, 57, 57, 57, 57, 57, 0, 0, 1413,
	59, 0, 0, 0, 1705, 0, 57, 0, 0, 0,
	1613, 0, 0, 0, 0, 1429, 0, 0, 0, 0,
	0, 787, 1147, 32, 1732, 1733, 787, 0, 0, 0,
	0, 0, 0, 1445, 1533, 0, 36, 37, 1130, 0,
	0, 1008, 1035, 1820, 0, 57, 1895, 0, 1142, 0,
	36, 37, 0, 0, 0, 41, 0, 0, 0, 1148,
	1149, 0, 0, 0, 0, 0, 0, 0, 57, 1144,
	36, 37, 1680, 0, 0, 744, 1820, 0, 693, 0,
	642, 0, 1064, 52, 57, 458, 459, 460, 462, 0,
	0, 0, 1147, 0, 465, 463, 473, 474, 1138, 1139,
	1141, 0, 957, 0, 1140, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	753, 752, 762, 763, 755, 756, 757, 758, 759, 760,
	761, 754, 461, 0, 764, 58, 0, 1614, 0, 0,
	0, 1525, 1847, 1526, 1527, 0, 0, 1529, 1530, 1532,
	1534, 1536, 36, 37, 0, 0, 0, 54, 59, 0,
	1531, 744, 0, 0, 0, 0, 54, 0, 0, 0,
	38, 456, 0, 1557, 52, 0, 458, 459, 460, 462,
	0, 0, 0, 0, 0, 465, 463, 473, 474, 0,
	0, 39, 272, 40, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 0, 753, 752, 762, 763,
	755, 756, 757, 758, 759, 760, 761, 754, 0, 0,
	764, 0, 38, 461, 0, 0, 853, 459, 460, 462,
	1209, 0, 0, 0, 0, 465, 463, 473, 474, 1613,
	0, 1147, 0, 39, 0, 40, 0, 0, 0, 0,
	0, 1636, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 38, 0, 59, 0, 32, 32, 32, 32, 32,
	32, 0, 692, 461, 1146, 1135, 1134, 0, 1244, 0,
	0, 0, 39, 0, 40, 1656, 1136, 0, 0, 0,
	0, 1575, 0, 0, 1253, 0, 0, 0, 0, 1137,
	0, 0, 467, 472, 0, 1664, 54, 0, 0, 0,
	0, 0, 41, 0, 1196, 1197, 1198, 0, 0, 0,
	0, 0, 1200, 1201, 1202, 0, 0, 0, 0, 0,
	0, 1282, 1285, 0, 753, 752, 762, 763, 755, 756,
	757, 758, 759, 760, 761, 754, 0, 1295, 764, 0,
	0, 0, 0, 1706, 1577, 469, 0, 471, 470, 0,
	0, 0, 0, 0, 41, 1301, 790, 0, 0, 0,
	0, 0, 477, 476, 0, 0, 0, 1340, 0, 813,
	0, 0, 0, 26, 0, 1204, 0, 0, 0, 0,
	0, 1735, 0, 467, 472, 0, 1738, 1739, 1740, 1741,
	1742, 0, 0, 41, 765, 1130, 0, 0, 0, 36,
	37, 0, 0, 0, 0, 1142, 59, 59, 0, 0,
	0, 417, 0, 0, 0, 0, 1148, 1149, 0, 0,
	0, 0, 0, 0, 0, 0, 1144, 21, 0, 16,
	0, 0, 0, 467, 472, 0, 469, 0, 471, 470,
	0, 0, 17, 1398, 24, 0, 0, 0, 0, 0,
	32, 36, 37, 477, 476, 1138, 1139, 1141, 0, 0,
	0, 1140, 18, 19, 0, 0, 0, 0, 1409, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 1799,
	765, 0, 0, 0, 1805, 0, 469, 0, 471, 470,
	36, 37, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 692,
	0, 1146, 1135, 1134, 59, 0, 0, 1450, 0, 0,
	1841, 0, 0, 1136, 0, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 0, 0, 1137, 0, 0, 0,
	0, 0, 1852, 0, 0, 0, 0, 0, 0, 0,
	1389, 1390, 0, 0, 0, 0, 1861, 1862, 1863, 0,
	0, 0, 0, 0, 1866, 0, 787, 787, 59, 59,
	0, 14, 0, 692, 0, 1146, 1135, 1134, 59, 59,
	0, 1402, 1403, 1404, 1405, 0, 417, 1136, 0, 0,
	0, 1457, 692, 0, 1146, 1135, 1134, 0, 1147, 692,
	1137, 1146, 1135, 1134, 0, 0, 1136, 0, 765, 0,
	0, 0, 0, 1136, 0, 0, 1902, 1903, 1904, 1137,
	0, 0, 0, 0, 0, 0, 1137, 0, 0, 0,
	0, 0, 0, 0, 0, 1541, 0, 0, 0, 0,
	0, 0, 1130, 0, 0, 0, 1915, 0, 1296, 0,
	0, 1205, 1142, 0, 0, 0, 20, 0, 0, 59,
	0, 0, 0, 1148, 1149, 1569, 1570, 1285, 22, 23,
	0, 25, 0, 1144, 0, 0, 753, 752, 762, 763,
	755, 756, 757, 758, 759, 760, 761, 754, 59, 0,
	764, 0, 59, 59, 0, 0, 0, 59, 59, 59,
	59, 59, 1138, 1139, 1141, 0, 1130, 0, 1140, 59,
	0, 59, 0, 0, 0, 59, 1142, 0, 0, 1298,
	0, 0, 417, 0, 829, 1130, 0, 1148, 1149, 0,
	417, 0, 1130, 0, 1522, 1142, 0, 1144, 0, 0,
	0, 0, 1142, 0, 0, 0, 1148, 1149, 0, 0,
	59, 0, 0, 1148, 1149, 0, 1144, 0, 0, 831,
	0, 0, 0, 1144, 0, 0, 1138, 1139, 1141, 0,
	0, 0, 1140, 59, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1298, 0, 1138, 1139, 1141, 0, 59,
	0, 1140, 1138, 1139, 1141, 0, 0, 0, 1140, 1671,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 1298,
	762, 763, 755, 756, 757, 758, 759, 760, 761, 754,
	0, 0, 764, 0, 0, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1147, 832, 0, 0, 0,
	417, 1722, 0, 0, 80, 830, 0, 0, 0, 0,
	836, 835, 0, 0, 0, 1827, 0, 0, 0, 0,
	0, 0, 0, 0, 1650, 0, 918, 1651, 0, 1652,
	930, 1653, 0, 1654, 1655, 0, 0, 0, 1750, 0,
	920, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 1756, 0, 1757, 0, 0, 0, 0, 1147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1147, 0,
	0, 0, 0, 0, 0, 1147, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 1857,
	765, 0, 0, 0, 0, 0, 919, 1827, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1674, 0,
	0, 0, 0, 0, 0, 1296, 0, 0, 0, 0,
	0, 0, 0, 0, 1833, 0, 0, 1834, 0, 0,
	1836, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	0, 0, 0, 0, 0, 390, 379, 1846, 338, 392,
	306, 326, 401, 328, 329, 364, 285, 347, 0, 323,
	304, 0, 1750, 0, 309, 278, 318, 279, 307, 340,
	0, 305, 0, 381, 350, 787, 0, 0, 399, 0,
	355, 0, 0, 0, 0, 0, 342, 383, 345, 374,
	337, 365, 294, 354, 394, 324, 360, 395, 0, 0,
	0, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	1888, 787, 0, 359, 389, 320, 291, 404, 0, 363,
	277, 357, 765, 0, 283, 286, 400, 387, 314, 313,
	0, 0, 0, 0, 0, 0, 0, 341, 346, 370,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 353, 0, 0, 0, 290,
	284, 0, 339, 829, 0, 0, 293, 0, 311, 371,
	0, 274, 377, 384, 336, 0, 0, 388, 333, 332,
	0, 0, 0, 0, 0, 0, 325, 270, 38, 402,
	391, 343, 382, 308, 319, 0, 315, 0, 831, 0,
	316, 317, 352, 366, 0, 916, 0, 0, 0, 39,
	373, 40, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 282, 275, 312, 375, 378, 298, 362,
	287, 321, 368, 322, 344, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 987, 832, 0, 0, 0, 0,
	0, 1492, 0, 80, 830, 0, 0, 0, 0, 836,
	835, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	41, 281, 302, 385, 0, 0, 0, 0, 1493, 1491,
	1487, 1486, 0, 0, 0, 0, 361, 0, 0, 0,
	0, 1489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 301, 295, 296, 348, 349, 396,
	397, 398, 372, 292, 0, 299, 300, 0, 380, 0,
	0, 0, 351, 0, 0, 0, 403, 81, 0, 0,
	0, 0, 0, 918, 327, 276, 331, 930, 0, 0,
	0, 0, 0, 0, 288, 289, 0, 920, 335, 330,
	356, 358, 367, 376, 386, 393, 369, 36, 37, 390,
	379, 0, 338, 392, 306, 326, 401, 328, 329, 364,
	285, 347, 0, 323, 304, 0, 0, 0, 309, 278,
	318, 279, 307, 340, 0, 305, 0, 381, 350, 0,
	0, 0, 399, 0, 355, 0, 0, 0, 0, 0,
	342, 383, 345, 374, 337, 365, 294, 354, 394, 324,
	360, 395, 0, 0, 0, 35, 0, 0, 0, 0,
	0, 0, 0, 919, 0, 0, 0, 359, 389, 320,
	291, 404, 0, 363, 277, 357, 0, 0, 283, 286,
	400, 387, 314, 313, 0, 0, 0, 0, 0, 0,
	0, 341, 346, 370, 334, 0, 0, 0, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 310, 0, 353,
	0, 0, 0, 290, 284, 0, 339, 0, 0, 0,
	293, 0, 311, 371, 0, 274, 377, 384, 336, 0,
	0, 388, 333, 332, 0, 0, 0, 0, 0, 0,
	325, 270, 38, 402, 391, 343, 382, 308, 319, 0,
	315, 0, 0, 0, 316, 317, 352, 366, 692, 0,
	1146, 1135, 1134, 39, 373, 40, 0, 0, 0, 0,
	0, 0, 1136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1137, 0, 282, 275, 312,
	375, 378, 298, 362, 287, 321, 368, 322, 344, 303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1621, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1754, 1755, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1166, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 41, 281, 302, 385, 0, 0,
	0, 1130, 1493, 1491, 0, 0, 0, 0, 0, 0,
	361, 1142, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 1148, 1149, 0, 0, 0, 0, 0, 0,
	0, 0, 1144, 0, 0, 0, 0, 297, 301, 295,
	296, 348, 349, 396, 397, 398, 372, 292, 0, 299,
	300, 0, 380, 0, 0, 0, 351, 0, 0, 0,
	403, 1138, 1139, 1141, 0, 0, 0, 1140, 327, 276,
	331, 0, 0, 0, 0, 0, 0, 0, 288, 289,
	0, 0, 335, 330, 356, 358, 367, 376, 386, 393,
	369, 36, 37, 390, 379, 0, 338, 392, 306, 326,
	401, 328, 329, 364, 285, 347, 0, 323, 304, 0,
	0, 0, 309, 278, 318, 279, 307, 340, 0, 305,
	0, 381, 350, 0, 0, 0, 399, 0, 355, 0,
	0, 0, 0, 0, 342, 383, 345, 374, 337, 365,
	294, 354, 394, 324, 360, 395, 0, 0, 0, 35,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 359, 389, 320, 291, 404, 0, 363, 277, 357,
	0, 0, 283, 286, 400, 387, 314, 313, 0, 0,
	0, 0, 0, 0, 0, 341, 346, 370, 334, 0,
	0, 0, 0, 0, 1396, 0, 0, 0, 0, 0,
	0, 310, 0, 353, 1147, 0, 0, 290, 284, 0,
	339, 0, 0, 0, 293, 0, 311, 371, 0, 274,
	377, 384, 336, 0, 0, 388, 333, 332, 0, 1012,
	0, 0, 0, 0, 325, 270, 38, 402, 391, 343,
	382, 308, 319, 0, 315, 0, 0, 0, 316, 317,
	352, 366, 692, 0, 1146, 1135, 1134, 39, 373, 40,
	0, 0, 0, 0, 0, 0, 1136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1137,
	0, 282, 275, 312, 375, 378, 298, 362, 287, 321,
	368, 322, 344, 303, 0, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 0, 1025, 0, 0, 1024,
	1014, 1022, 1023, 1021, 1018, 0, 1013, 0, 1027, 1026,
	1028, 1011, 1030, 0, 0, 0, 1034, 1031, 1033, 1032,
	0, 1029, 0, 0, 1890, 0, 0, 0, 0, 1492,
	1015, 1016, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1017, 1019, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 41, 281,
	302, 385, 0, 0, 0, 1130, 1493, 1491, 0, 0,
	0, 0, 0, 0, 361, 1142, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 1148, 1149, 0, 0,
	0, 0, 0, 0, 0, 0, 1144, 0, 0, 0,
	0, 297, 301, 295, 296, 348, 349, 396, 397, 398,
	372, 292, 0, 299, 300, 0, 380, 0, 0, 0,
	351, 0, 0, 0, 403, 1138, 1139, 1141, 0, 0,
	0, 1140, 327, 276, 331, 0, 0, 0, 0, 0,
	0, 0, 288, 289, 0, 0, 335, 330, 356, 358,
	367, 376, 386, 393, 369, 36, 37, 390, 379, 0,
	338, 392, 306, 326, 401, 328, 329, 364, 285, 347,
	0, 323, 304, 0, 0, 0, 309, 278, 318, 279,
	307, 340, 0, 305, 0, 381, 350, 0, 103, 0,
	399, 0, 355, 0, 0, 0, 0, 0, 342, 383,
	345, 374, 337, 365, 294, 354, 394, 324, 360, 395,
	0, 0, 0, 52, 0, 55, 35, 0, 0, 0,
	0, 0, 0, 0, 0, 359, 389, 320, 291, 404,
	0, 363, 277, 357, 0, 0, 283, 286, 400, 387,
	314, 313, 0, 0, 0, 0, 0, 0, 0, 341,
	346, 370, 334, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1265, 0, 310, 0, 353, 1147, 0,
	0, 290, 284, 0, 339, 88, 0, 0, 293, 0,
	311, 371, 0, 274, 377, 384, 336, 0, 0, 388,
	333, 332, 0, 0, 0, 0, 0, 0, 325, 270,
	38, 402, 391, 343, 382, 308, 319, 0, 315, 0,
	104, 0, 316, 317, 352, 366, 0, 0, 0, 0,
	0, 39, 373, 40, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 275, 312, 375, 378,
	298, 362, 287, 321, 368, 322, 344, 303, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 0, 122, 123, 0,
	124, 125, 126, 128, 127, 105, 106, 107, 111, 109,
	108, 110, 82, 84, 0, 80, 83, 89, 85, 86,
	87, 101, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 102, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 41, 281, 302, 385, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 301, 295, 296, 348,
	349, 396, 397, 398, 372, 292, 0, 299, 300, 0,
	380, 0, 0, 0, 351, 0, 0, 0, 403, 81,
	0, 0, 0, 0, 0, 0, 327, 276, 331, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 0, 0,
	335, 330, 356, 358, 367, 376, 386, 393, 369, 36,
	37, 390, 379, 0, 338, 392, 306, 326, 401, 328,
	329, 364, 285, 347, 0, 323, 304, 0, 0, 0,
	309, 278, 318, 279, 307, 340, 0, 305, 0, 381,
	350, 0, 0, 0, 399, 0, 355, 0, 0, 0,
	0, 0, 342, 383, 345, 374, 337, 365, 294, 354,
	394, 324, 360, 395, 0, 0, 0, 35, 0, 717,
	0, 718, 0, 0, 0, 0, 0, 0, 0, 359,
	389, 320, 291, 404, 0, 363, 277, 357, 0, 0,
	283, 286, 400, 387, 314, 313, 0, 0, 0, 0,
	0, 0, 0, 341, 346, 370, 334, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 353, 0, 0, 0, 290, 284, 0, 339, 0,
	0, 0, 293, 0, 311, 371, 0, 274, 377, 384,
	336, 0, 0, 388, 333, 332, 0, 0, 0, 0,
	0, 0, 325, 270, 38, 402, 391, 343, 382, 308,
	319, 0, 315, 0, 0, 0, 316, 317, 352, 366,
	692, 0, 1146, 1135, 1134, 39, 373, 40, 0, 0,
	0, 0, 0, 0, 1136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1137, 0, 282,
	275, 312, 375, 378, 298, 362, 287, 321, 368, 322,
	344, 303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1885, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 41, 281, 302, 385,
	0, 0, 0, 1130, 0, 269, 0, 0, 0, 0,
	0, 0, 361, 1142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1148, 1149, 0, 0, 0, 0,
	0, 0, 0, 0, 1144, 0, 0, 0, 0, 297,
	301, 295, 296, 348, 349, 396, 397, 398, 372, 292,
	0, 299, 300, 0, 380, 0, 0, 0, 351, 0,
	0, 0, 403, 1138, 1139, 1141, 0, 0, 0, 1140,
	327, 276, 331, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 0, 0, 335, 330, 356, 358, 367, 376,
	386, 393, 369, 36, 37, 390, 379, 0, 338, 392,
	306, 326, 401, 328, 329, 364, 285, 347, 0, 323,
	304, 0, 0, 0, 309, 278, 318, 279, 307, 340,
	0, 305, 0, 381, 350, 0, 0, 0, 399, 0,
	355, 0, 0, 0, 0, 0, 342, 383, 345, 374,
	337, 365, 294, 354, 394, 324, 360, 395, 0, 413,
	0, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 415, 0, 359, 389, 320, 291, 404, 0, 363,
	277, 357, 0, 0, 283, 286, 400, 387, 314, 313,
	0, 0, 0, 0, 0, 0, 0, 341, 346, 370,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 353, 1147, 0, 0, 290,
	284, 0, 339, 0, 0, 0, 293, 0, 311, 371,
	0, 274, 377, 384, 336, 0, 0, 388, 333, 332,
	0, 0, 0, 0, 0, 0, 325, 270, 38, 402,
	391, 343, 382, 308, 319, 0, 315, 0, 0, 0,
	316, 317, 352, 366, 692, 0, 1146, 1135, 1134, 39,
	373, 40, 0, 0, 0, 0, 0, 0, 1136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1137, 0, 282, 275, 312, 375, 378, 298, 362,
	287, 321, 368, 322, 344, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1672, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	41, 281, 302, 385, 0, 0, 0, 1130, 0, 269,
	0, 0, 0, 0, 0, 0, 361, 1142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1148, 1149,
	0, 0, 0, 0, 0, 0, 0, 0, 1144, 0,
	0, 0, 0, 297, 301, 295, 296, 348, 349, 396,
	397, 398, 372, 292, 0, 299, 300, 0, 380, 0,
	0, 0, 351, 0, 0, 0, 403, 1138, 1139, 1141,
	0, 0, 0, 1140, 327, 276, 331, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 0, 0, 335, 330,
	356, 358, 367, 376, 386, 393, 369, 36, 37, 390,
	379, 0, 338, 392, 306, 326, 401, 328, 329, 364,
	285, 347, 0, 323, 304, 0, 0, 0, 309, 278,
	318, 279, 307, 340, 0, 305, 0, 381, 350, 0,
	0, 0, 399, 0, 355, 0, 0, 0, 0, 0,
	342, 383, 345, 374, 337, 365, 294, 354, 394, 324,
	360, 395, 0, 0, 0, 35, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 359, 389, 320,
	291, 404, 0, 363, 277, 357, 0, 0, 283, 286,
	400, 387, 314, 313, 0, 0, 0, 0, 0, 0,
	0, 341, 346, 370, 334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1560, 0, 310, 0, 353,
	1147, 0, 0, 290, 284, 0, 339, 0, 0, 0,
	293, 0, 311, 371, 0, 274, 377, 384, 336, 0,
	0, 388, 333, 332, 0, 0, 0, 0, 0, 0,
	325, 270, 38, 402, 391, 343, 382, 308, 319, 0,
	315, 0, 0, 0, 316, 317, 352, 366, 692, 0,
	1146, 1135, 1134, 39, 373, 40, 0, 0, 0, 0,
	0, 0, 1136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1137, 0, 282, 275, 312,
	375, 378, 298, 362, 287, 321, 368, 322, 344, 303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 41, 281, 302, 385, 0, 0,
	0, 1130, 0, 269, 0, 0, 0, 0, 0, 0,
	361, 1142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1148, 1149, 0, 0, 0, 0, 0, 0,
	0, 0, 1144, 0, 0, 0, 0, 297, 301, 295,
	296, 348, 349, 396, 397, 398, 372, 292, 0, 299,
	300, 0, 380, 0, 0, 0, 351, 0, 0, 0,
	403, 1138, 1139, 1141, 0, 0, 0, 1140, 327, 276,
	331, 0, 0, 0, 0, 0, 0, 0, 288, 289,
	0, 0, 335, 330, 356, 358, 367, 376, 386, 393,
	369, 36, 37, 390, 379, 0, 338, 392, 306, 326,
	401, 328, 329, 364, 285, 347, 0, 323, 304, 0,
	0, 0, 309, 278, 318, 279, 307, 340, 0, 305,
	0, 381, 350, 0, 0, 0, 399, 0, 355, 0,
	0, 0, 0, 0, 342, 383, 345, 374, 337, 365,
	294, 354, 394, 324, 360, 395, 0, 0, 0, 52,
	0, 55, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 359, 389, 320, 291, 404, 0, 363, 277, 357,
	0, 0, 283, 286, 400, 387, 314, 313, 0, 0,
	0, 0, 0, 0, 0, 341, 346, 370, 334, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 353, 1147, 0, 0, 290, 284, 0,
	339, 0, 0, 0, 293, 0, 311, 371, 0, 274,
	377, 384, 336, 0, 0, 388, 333, 332, 0, 0,
	0, 0, 0, 0, 325, 270, 38, 402, 391, 343,
	382, 308, 319, 0, 315, 0, 0, 0, 316, 317,
	352, 366, 692, 0, 1146, 1135, 1134, 39, 373, 40,
	0, 0, 0, 0, 0, 0, 1136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1137,
	0, 282, 275, 312, 375, 378, 298, 362, 287, 321,
	368, 322, 344, 303, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 41, 281,
	302, 385, 0, 0, 0, 1130, 0, 269, 0, 0,
	0, 0, 0, 0, 361, 1142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1148, 1149, 0, 0,
	0, 0, 0, 0, 0, 0, 1144, 0, 0, 0,
	0, 297, 301, 295, 296, 348, 349, 396, 397, 398,
	372, 292, 0, 299, 300, 0, 380, 0, 0, 0,
	351, 0, 0, 0, 403, 1138, 1139, 1141, 0, 0,
	0, 1140, 327, 276, 331, 0, 0, 0, 0, 0,
	0, 0, 288, 289, 0, 0, 335, 330, 356, 358,
	367, 376, 386, 393, 369, 36, 37, 390, 379, 0,
	338, 392, 306, 326, 401, 328, 329, 364, 285, 347,
	0, 323, 304, 0, 0, 0, 309, 278, 318, 279,
	307, 340, 0, 305, 0, 381, 350, 0, 0, 0,
	399, 0, 355, 0, 0, 0, 0, 0, 342, 383,
	345, 374, 337, 365, 294, 354, 394, 324, 360, 395,
	0, 0, 0, 35, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 359, 389, 320, 291, 404,
	0, 363, 277, 357, 0, 0, 283, 286, 400, 387,
	314, 313, 534, 0, 0, 0, 0, 0, 0, 341,
	346, 370, 334, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 353, 1147, 0,
	0, 290, 284, 0, 339, 0, 0, 0, 293, 0,
	311, 371, 0, 274, 377, 384, 336, 0, 0, 388,
	333, 332, 0, 0, 0, 0, 0, 0, 325, 270,
	38, 402, 391, 343, 382, 308, 319, 0, 315, 0,
	0, 0, 316, 317, 352, 366, 0, 0, 0, 0,
	0, 39, 373, 40, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 275, 312, 375, 378,
	298, 362, 287, 321, 368, 322, 344, 303, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 41, 281, 302, 385, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 301, 295, 296, 348,
	349, 396, 397, 398, 372, 292, 0, 299, 300, 0,
	380, 0, 0, 0, 351, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 327, 276, 331, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 0, 0,
	335, 330, 356, 358, 367, 376, 386, 393, 369, 36,
	37, 390, 379, 0, 338, 392, 306, 326, 401, 328,
	329, 364, 285, 347, 0, 323, 304, 0, 0, 0,
	309, 278, 318, 279, 307, 340, 0, 305, 0, 381,
	350, 0, 0, 0, 399, 0, 355, 0, 0, 0,
	0, 0, 342, 383, 345, 374, 337, 365, 294, 354,
	394, 324, 360, 395, 0, 0, 0, 35, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 359,
	389, 320, 291, 404, 0, 363, 277, 357, 0, 0,
	283, 286, 400, 387, 314, 313, 0, 0, 0, 0,
	0, 0, 0, 341, 346, 370, 334, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 353, 0, 0, 0, 290, 284, 0, 339, 0,
	0, 0, 293, 0, 311, 371, 0, 274, 377, 384,
	336, 0, 0, 388, 333, 332, 0, 0, 0, 0,
	0, 0, 325, 270, 38, 402, 391, 343, 382, 308,
	319, 0, 315, 0, 0, 0, 316, 317, 352, 366,
	0, 0, 0, 0, 0, 39, 373, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	275, 312, 375, 378, 298, 362, 287, 321, 368, 322,
	344, 303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 41, 281, 302, 385,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	301, 295, 296, 348, 349, 396, 397, 398, 372, 292,
	0, 299, 300, 0, 380, 0, 0, 0, 351, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	327, 276, 331, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 0, 0, 335, 330, 356, 358, 367, 376,
	386, 393, 369, 36, 37, 390, 1824, 0, 338, 392,
	306, 326, 401, 328, 329, 364, 285, 347, 0, 323,
	304, 0, 0, 0, 309, 278, 318, 279, 307, 340,
	0, 305, 0, 381, 350, 0, 0, 0, 399, 0,
	355, 0, 0, 0, 0, 0, 342, 383, 345, 374,
	337, 365, 294, 354, 394, 324, 360, 395, 433, 0,
	0, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 359, 389, 320, 291, 404, 0, 363,
	277, 357, 0, 0, 283, 286, 400, 387, 314, 313,
	0, 0, 0, 0, 0, 0, 0, 341, 346, 370,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 353, 0, 0, 0, 290,
	284, 0, 339, 0, 0, 0, 293, 0, 311, 371,
	0, 274, 377, 384, 336, 0, 0, 388, 333, 332,
	0, 0, 0, 0, 0, 0, 325, 0, 38, 402,
	391, 343, 382, 308, 319, 0, 315, 0, 0, 0,
	316, 317, 352, 366, 0, 0, 0, 0, 0, 39,
	373, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 275, 312, 375, 378, 298, 362,
	287, 321, 368, 322, 344, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	41, 281, 302, 385, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 301, 295, 296, 348, 349, 396,
	397, 398, 372, 292, 0, 299, 300, 0, 380, 0,
	0, 0, 351, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 327, 276, 331, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 0, 0, 335, 330,
	356, 358, 367, 376, 386, 393, 369, 36, 37, 390,
	379, 0, 338, 392, 306, 326, 401, 328, 329, 364,
	285, 347, 0, 323, 304, 0, 0, 0, 309, 278,
	318, 279, 307, 340, 0, 305, 0, 381, 350, 0,
	0, 0, 399, 0, 355, 0, 0, 0, 0, 0,
	342, 383, 345, 374, 337, 365, 294, 354, 394, 324,
	360, 395, 0, 0, 0, 58, 0, 55, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 359, 389, 320,
	291, 404, 0, 363, 277, 357, 0, 0, 283, 286,
	400, 387, 314, 313, 0, 0, 0, 0, 0, 0,
	0, 341, 346, 370, 334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 353,
	0, 0, 0, 290, 284, 0, 339, 0, 0, 0,
	293, 0, 311, 371, 0, 274, 377, 384, 336, 0,
	0, 388, 333, 332, 0, 0, 0, 0, 0, 0,
	325, 0, 38, 402, 391, 343, 382, 308, 319, 0,
	315, 0, 0, 0, 316, 317, 352, 366, 0, 0,
	0, 0, 0, 39, 373, 40, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 275, 312,
	375, 378, 298, 362, 287, 321, 368, 322, 344, 303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 41, 281, 302, 385, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 301, 295,
	296, 348, 349, 396, 397, 398, 372, 292, 0, 299,
	300, 0, 380, 0, 0, 0, 351, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 327, 276,
	331, 0, 0, 0, 0, 0, 0, 0, 288, 289,
	0, 0, 335, 330, 356, 358, 367, 376, 386, 393,
	369, 36, 37, 390, 379, 0, 338, 392, 306, 326,
	401, 328, 329, 364, 285, 347, 0, 323, 304, 0,
	0, 0, 309, 278, 318, 279, 307, 340, 0, 305,
	0, 381, 350, 0, 0, 0, 399, 0, 355, 0,
	0, 0, 0, 0, 342, 383, 345, 374, 337, 365,
	294, 354, 394, 324, 360, 395, 0, 0, 0, 35,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 359, 389, 320, 291, 404, 0, 363, 277, 357,
	0, 0, 283, 286, 400, 387, 314, 313, 0, 0,
	0, 0, 0, 0, 0, 341, 346, 370, 334, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 353, 34, 0, 0, 290, 284, 0,
	339, 0, 0, 0, 293, 0, 311, 371, 0, 274,
	377, 384, 336, 0, 0, 388, 333, 332, 0, 35,
	0, 33, 0, 0, 325, 0, 38, 402, 391, 343,
	382, 308, 319, 0, 315, 0, 0, 0, 316, 317,
	352, 366, 0, 0, 0, 0, 0, 39, 373, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 275, 312, 375, 378, 298, 362, 287, 321,
	368, 322, 344, 303, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 0, 179, 0,
	178, 0, 182, 183, 186, 0, 38, 0, 180, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 0, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 41, 281,
	302, 385, 0, 0, 0, 0, 0, 692, 0, 1146,
	1135, 1134, 0, 0, 361, 0, 0, 0, 0, 0,
	0, 1136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1137, 0, 0, 0, 0, 0,
	0, 297, 301, 295, 296, 348, 349, 396, 397, 398,
	372, 292, 0, 299, 300, 0, 380, 0, 0, 0,
	351, 0, 0, 0, 403, 184, 0, 0, 0, 0,
	0, 0, 327, 276, 331, 0, 0, 0, 41, 0,
	558, 0, 288, 289, 0, 0, 335, 330, 356, 358,
	367, 376, 386, 393, 369, 36, 37, 557, 0, 0,
	0, 0, 556, 0, 0, 0, 0, 0, 0, 602,
	0, 603, 0, 0, 0, 0, 0, 0, 0, 593,
	594, 0, 0, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 52, 583, 580, 581, 585, 586, 587, 588,
	1130, 0, 0, 584, 589, 473, 474, 559, 0, 0,
	1142, 0, 554, 572, 0, 0, 601, 0, 0, 0,
	0, 1148, 1149, 0, 0, 0, 0, 0, 0, 0,
	0, 1144, 0, 0, 0, 36, 37, 0, 181, 0,
	569, 570, 0, 0, 0, 0, 618, 0, 571, 0,
	0, 1010, 568, 573, 0, 0, 0, 0, 0, 0,
	1138, 1139, 1141, 0, 0, 0, 1140, 0, 0, 0,
	616, 0, 0, 0, 0, 0, 0, 1116, 0, 38,
	0, 0, 0, 0, 0, 0, 1012, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	39, 0, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 0, 1025, 0, 0, 1024, 1014, 1022, 1023,
	1021, 1018, 0, 1013, 0, 1027, 1026, 1028, 1011, 1030,
	0, 0, 0, 1034, 1031, 1033, 1032, 604, 1029, 0,
	0, 0, 0, 0, 0, 0, 0, 1015, 1016, 0,
	0, 0, 0, 1147, 0, 0, 0, 0, 0, 620,
	0, 605, 606, 0, 0, 0, 0, 0, 1017, 1019,
	0, 41, 103, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 0, 0, 0, 1157, 0,
	35, 0, 1155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 607, 617, 613, 614, 611, 612,
	610, 609, 608, 619, 595, 596, 597, 598, 600, 1154,
	0, 477, 476, 599, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 36, 37,
	615, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 38, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 39, 0,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	0, 122, 123, 0, 124, 125, 126, 128, 127, 105,
	106, 107, 111, 109, 108, 110, 82, 84, 0, 80,
	83, 89, 85, 86, 87, 101, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 102, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 0, 0, 0,
	0, 0, 558, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	0, 0, 0, 0, 556, 0, 692, 0, 1146, 1135,
	1134, 602, 0, 603, 0, 0, 0, 0, 0, 0,
	1136, 593, 594, 0, 0, 0, 0, 0, 0, 1720,
	0, 433, 0, 1137, 52, 583, 580, 581, 585, 586,
	587, 588, 0, 0, 0, 584, 589, 473, 474, 559,
	1721, 0, 0, 81, 554, 572, 0, 0, 601, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 0, 0, 0, 0, 741,
	740, 0, 569, 570, 0, 0, 36, 37, 618, 863,
	571, 557, 0, 567, 568, 573, 556, 742, 0, 0,
	0, 0, 0, 602, 0, 603, 0, 0, 0, 0,
	0, 0, 616, 593, 594, 0, 0, 0, 0, 0,
	0, 38, 0, 433, 0, 0, 52, 583, 580, 581,
	585, 586, 587, 588, 0, 0, 0, 584, 589, 473,
	474, 559, 39, 0, 40, 0, 554, 572, 0, 1142,
	601, 0, 0, 579, 0, 0, 0, 0, 0, 0,
	1148, 1149, 0, 0, 0, 0, 0, 0, 0, 0,
	1144, 0, 0, 0, 569, 570, 868, 0, 0, 0,
	618, 0, 571, 0, 0, 567, 568, 573, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1138,
	1139, 1141, 0, 0, 616, 1140, 0, 0, 743, 0,
	0, 0, 0, 38, 0, 0, 1464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 0, 0, 39, 0, 40, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 0, 0, 0, 0,
	0, 620, 0, 605, 606, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 617, 613, 614,
	611, 612, 610, 609, 608, 619, 595, 596, 597, 598,
	600, 604, 0, 477, 476, 599, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1147, 620, 0, 605, 606, 0, 0, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	36, 37, 615, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 607, 617,
	613, 614, 611, 612, 610, 609, 608, 619, 595, 596,
	597, 598, 600, 0, 0, 477, 476, 599, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 0, 0, 0, 0,
	556, 0, 0, 0, 0, 0, 0, 602, 0, 603,
	0, 0, 36, 37, 615, 0, 0, 593, 594, 0,
	0, 0, 0, 0, 0, 0, 0, 433, 0, 744,
	52, 583, 580, 581, 585, 586, 587, 588, 0, 0,
	0, 584, 589, 473, 474, 559, 0, 0, 0, 0,
	554, 572, 0, 0, 601, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	558, 0, 0, 0, 0, 0, 0, 0, 569, 570,
	0, 0, 0, 0, 618, 0, 571, 557, 0, 567,
	568, 573, 556, 0, 0, 0, 0, 0, 0, 602,
	0, 603, 0, 0, 0, 0, 0, 0, 616, 593,
	594, 0, 0, 0, 0, 0, 0, 38, 0, 433,
	0, 0, 52, 583, 580, 581, 585, 586, 587, 588,
	0, 0, 0, 584, 589, 473, 474, 559, 39, 0,
	40, 0, 554, 572, 0, 0, 601, 0, 0, 579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 570, 868, 0, 0, 0, 618, 0, 571, 0,
	0, 567, 568, 573, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	616, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 0, 0,
	39, 0, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 0, 0, 0, 0, 0, 620, 0, 605,
	606, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 617, 613, 614, 611, 612, 610, 609,
	608, 619, 595, 596, 597, 598, 600, 604, 0, 477,
	476, 599, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 605, 606, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 36, 37, 615, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 607, 617, 613, 614, 611, 612,
	610, 609, 608, 619, 595, 596, 597, 598, 600, 0,
	0, 477, 476, 599, 0, 0, 0, 0, 0, 692,
	0, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	0, 0, 0, 0, 556, 0, 0, 0, 36, 37,
	615, 602, 0, 603, 0, 692, 0, 1146, 1135, 1134,
	0, 593, 594, 0, 0, 0, 0, 0, 0, 1136,
	0, 433, 0, 0, 52, 583, 580, 581, 585, 586,
	587, 588, 1137, 0, 0, 584, 589, 473, 474, 559,
	0, 0, 0, 0, 554, 572, 0, 0, 601, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 569, 570, 0, 0, 0, 0, 618, 0,
	571, 557, 0, 567, 568, 573, 556, 0, 0, 0,
	0, 0, 0, 602, 0, 603, 0, 0, 0, 0,
	0, 0, 616, 593, 594, 0, 0, 0, 0, 0,
	0, 38, 0, 433, 0, 0, 52, 583, 580, 581,
	585, 586, 587, 588, 0, 0, 0, 584, 589, 473,
	474, 559, 39, 0, 40, 0, 554, 572, 1677, 0,
	601, 0, 0, 579, 0, 0, 0, 0, 1142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1148,
	1149, 0, 0, 0, 569, 570, 0, 0, 0, 1144,
	618, 0, 571, 0, 0, 567, 568, 573, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 616, 0, 0, 0, 1138, 1139,
	1141, 0, 0, 38, 1140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 0, 0, 604,
	0, 0, 0, 0, 39, 0, 40, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 0, 0, 0, 0,
	0, 620, 0, 605, 606, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 617, 613, 614,
	611, 612, 610, 609, 608, 619, 595, 596, 597, 598,
	600, 604, 0, 477, 476, 599, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 605, 606, 0, 0, 0,
	0, 1147, 0, 0, 0, 41, 0, 0, 0, 0,
	36, 37, 615, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 607, 617,
	613, 614, 611, 612, 610, 609, 608, 619, 595, 596,
	597, 598, 600, 0, 0, 477, 476, 599, 958, 959,
	960, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 603, 0, 0,
	0, 0, 0, 0, 0, 593, 594, 0, 0, 0,
	0, 0, 36, 37, 615, 433, 0, 0, 52, 583,
	580, 581, 585, 586, 587, 588, 0, 0, 0, 584,
	589, 473, 474, 0, 0, 0, 0, 0, 0, 572,
	0, 0, 601, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 570, 0, 0,
	0, 0, 618, 0, 571, 0, 0, 567, 568, 573,
	0, 0, 0, 0, 0, 0, 0, 602, 0, 603,
	0, 0, 0, 0, 0, 0, 616, 593, 594, 0,
	0, 0, 0, 0, 0, 38, 0, 433, 0, 0,
	52, 583, 580, 581, 585, 586, 587, 588, 0, 0,
	0, 584, 589, 473, 474, 0, 39, 0, 40, 0,
	0, 572, 0, 0, 601, 0, 0, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 570,
	0, 0, 0, 0, 618, 0, 571, 0, 0, 567,
	568, 573, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 616, 0,
	0, 0, 0, 0, 0, 0, 0, 38, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 0, 0, 39, 0,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 579,
	0, 0, 0, 0, 0, 620, 0, 605, 606, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	607, 617, 613, 614, 611, 612, 610, 609, 608, 619,
	595, 596, 597, 598, 600, 604, 0, 477, 476, 599,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 605,
	606, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 36, 37, 615, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 617, 613, 614, 611, 612, 610, 609,
	608, 619, 595, 596, 597, 598, 600, 35, 0, 477,
	476, 599, 0, 0, 0, 602, 0, 603, 0, 0,
	0, 0, 0, 0, 0, 593, 594, 0, 0, 0,
	0, 0, 0, 0, 0, 886, 0, 0, 52, 583,
	580, 581, 585, 586, 587, 588, 36, 37, 615, 584,
	589, 473, 474, 0, 0, 0, 0, 0, 0, 572,
	0, 0, 601, 0, 0, 0, 88, 0, 856, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 570, 0, 0,
	0, 0, 618, 0, 571, 0, 0, 567, 568, 573,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 616, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 40, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 0, 122, 123,
	0, 124, 125, 126, 128, 127, 105, 106, 107, 111,
	109, 108, 110, 82, 84, 0, 80, 83, 89, 85,
	86, 87, 101, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 102, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 0, 0, 0, 0, 855, 0,
	0, 0, 0, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 605, 606, 692,
	0, 1146, 1135, 1134, 0, 0, 0, 41, 0, 0,
	0, 0, 0, 1136, 0, 0, 0, 0, 692, 0,
	1146, 1135, 1134, 0, 0, 0, 1137, 0, 591, 0,
	0, 0, 1136, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 1137, 0, 0, 0, 0,
	607, 617, 613, 614, 611, 612, 610, 609, 608, 619,
	595, 596, 597, 598, 600, 0, 0, 477, 476, 599,
	0, 0, 741, 740, 0, 692, 0, 1146, 1135, 1134,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 1136,
	742, 741, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1137, 0, 36, 37, 615, 0, 0, 742,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1142, 0, 0, 0, 0, 0, 741, 740,
	0, 1130, 0, 1148, 1149, 0, 0, 0, 0, 0,
	0, 1142, 0, 1144, 0, 0, 742, 0, 0, 0,
	0, 0, 1148, 1149, 0, 0, 0, 0, 0, 0,
	0, 0, 1144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1138, 1139, 1141, 0, 0, 0, 1140, 0,
	0, 743, 0, 0, 0, 0, 0, 0, 1130, 1464,
	0, 1138, 1139, 1141, 0, 0, 0, 1140, 1142, 0,
	743, 0, 0, 0, 0, 0, 0, 0, 1464, 1148,
	1149, 0, 0, 0, 0, 0, 0, 0, 0, 1144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1138, 1139,
	1141, 0, 0, 0, 1140, 0, 0, 743, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1147,
}

var yyPact = [...]int16{
	558, -1000, -265, -1000, -1000, 1486, 2564, 395, -1000, -1000,
	-1000, 1923, 524, 520, 517, 190, 476, 965, 1909, 2025,
	540, 440, -1000, -216, -187, -1000, -97, 538, -1000, 1270,
	-1000, 4435, 4435, 4435, 4435, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 289, 965, 965, 440, 110, 440, 1505, 443,
	1502, 788, -1000, -1000, 600, -1000, 1611, 589, -1000, -1000,
	440, 2025, 782, -1000, -1000, -1000, -1000, 1711, 197, 7968,
	121, -157, 5, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1390, 60, 1484, 1390, 1484, -1000, 1390, 1484,
	51, 51, 51, 51, 51, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1479, 1472, -1000, 1390, 1390, 1390, 1390, 1390,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1470, 1390, 1460, 83, 1460, 1403, 1403, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 121,
	121, 121, 1490, 2025, 965, 1501, 1499, 2025, -233, 2025,
	2025, 1700, -1000, -1000, -1000, 135, 2025, 1583, 5968, 4435,
	7504, 2025, -1000, 1578, 551, 2025, 5200, -1000, 1557, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1469, 835, 965, 335,
	152, 1377, 489, 390, 469, 1082, 329, -1000, -1000, -1000,
	884, -1000, 965, -1000, 1704, -1000, -1000, 316, -1000, 273,
	771, 954, 2025, 1466, 173, 1461, 2373, 920, -1000, -270,
	-1000, 3, -1000, 51, 865, 1390, -1000, 51, 852, 51,
	51, -1000, -1000, 638, 1565, 638, 638, 638, 638, 944,
	944, -146, -146, -1000, -1000, -1000, 918, -1000, -1000, 907,
	1460, -1000, -1000, -1000, 885, -1000, 2025, 965, 1457, 1498,
	2025, 2025, 1606, 474, -1000, -1000, 1605, 1604, 1363, -1000,
	-1000, 124, -1000, -1000, 443, 965, -1000, 588, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1216, -1000,
	537, 543, 6352, 197, -1000, -1000, -1000, -1000, -1000, 512,
	-1000, 1708, 1633, 377, 46, -212, 1077, -1000, -1000, 1454,
	-1000, -1000, 9755, -1000, 1073, 1071, -1000, 1065, 1027, 40,
	965, -1000, -196, 119, -29, -1000, -1000, 1377, -1000, 1452,
	9755, 1602, -1000, 1568, 696, -1000, 2282, -1000, -257, -1000,
	-1000, 916, -1000, -257, -1000, -1000, -1000, 1377, -1000, 1451,
	1445, -1000, 1443, -1000, -1000, 1377, 1377, 1377, 586, -1000,
	-1000, -1000, -1000, -1000, 638, 1316, 51, 638, 1313, 1311,
	638, 638, -1000, -1000, 997, 663, -1000, -1000, -1000, -1000,
	1247, -1000, 1239, -1000, 76, 74, -1000, 1310, 1371, -1000,
	1237, 1375, 1497, 796, 2025, 1435, 1434, 1380, 440, 1380,
	1626, 262, 2025, 1700, 400, 1700, 443, 6736, 965, 315,
	965, -1000, -1000, 371, 4816, -1000, -1000, 1225, -1000, 253,
	1390, 9755, 622, 622, -206, 267, 265, -212, 1377, 1432,
	-1000, 512, 801, -1000, 9755, 286, 1377, 1377, 1377, 1377,
	9663, -1000, -1000, 571, -1000, -1000, -1000, 10179, 10179, 10179,
	10179, 10179, 10179, 10179, -1000, -1000, -1000, -1000, 17, -1000,
	-257, -1000, 929, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	584, 582, -1000, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
	1377, 9755, 1377, 1551, 1377, 1377, 1377, 1377, 1377, 1377,
	1377, 1377, 1377, 1377, 1377, 2874, 1377, 1377, 1377, 1377,
	-1000, -1000, -1000, -1000, -1000, -1000, -212, 1431, -1000, -1000,
	-1000, 771, -1000, 9755, 400, 1299, 140, -1000, 1367, -1000,
	883, 1309, 2423, 1308, -1000, 10466, -1000, -1000, -1000, 886,
	-1000, 919, -1000, 904, 1295, 8875, 9311, 9311, 6736, -1000,
	-1000, 638, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	51, 941, 51, 0, -5, -1000, 874, -1000, 867, 796,
	965, 2025, 1289, 1366, -1000, 239, 1425, 400, 512, -1000,
	1661, 1710, -1000, 1380, 2025, -1000, 446, 1680, -1000, -1000,
	1625, -1000, 1365, -1000, -1000, 1336, 1700, -1000, 1423, 965,
	-1000, -1000, 362, 965, -1000, -1000, -1000, -1000, -1000, 3089,
	512, 1589, -1000, -1000, -1000, 1208, 833, -1000, -1000, 797,
	192, 819, -1000, 965, -212, 1421, 9755, 512, 1207, 200,
	9755, 9755, 878, -1000, -1000, 244, 10087, 868, 736, 10179,
	10179, 10179, 10179, 10179, 10179, 10179, 10179, 10179, 10179, 10179,
	10179, 10179, 10179, 10179, 900, 3283, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 983, -1000,
	1380, 1943, 886, 886, 886, 1185, 9663, 675, 2155, 2155,
	30, 9663, 30, 30, 30, 30, 30, 95, -1000, -268,
	-1000, -1000, 5968, 6736, 9311, 9311, 8251, 9755, 9311, 9311,
	9311, 1615, 763, 675, 1943, 1624, 886, 886, 886, 886,
	-1000, 886, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	59, -1000, -1000, -1000, -1000, -1000, -1000, 9311, 9311, 9311,
	9311, -1000, 965, 1377, 801, 1195, -154, 9755, 1419, 696,
	-1000, -1000, 1287, -257, -1000, -1000, -1000, -157, -1000, -1000,
	-1000, -1000, 886, 9311, 1150, 1185, -1000, 815, -1000, 581,
	1150, 815, 1150, 1377, -1000, 638, -1000, 638, -1000, -1000,
	1282, 1271, 1266, 1415, 1413, -221, 865, 796, 1178, 1176,
	1640, 1656, 1380, 1601, 1539, -1000, 886, 1588, 965, -1000,
	-1000, -1000, -1000, -1000, 176, 761, 965, 8181, 1304, -1000,
	684, 1412, 141, 392, 1492, 3586, 172, -1000, 974, 741,
	934, 740, 739, 737, 702, 690, 681, 679, 676, 656,
	654, -1000, -1000, -1000, -1000, 1589, -1000, 1702, -1000, -1000,
	-1000, 1690, 1407, 1406, 512, 801, 1171, 3089, -1000, -108,
	244, 366, -1000, -1000, 881, -1000, -1000, 28, 10179, 10179,
	10179, -1000, -1000, -1000, -1000, 868, 10179, 10179, 10179, 2489,
	28, 2841, 2973, 363, 30, 553, 553, 32, 32, 32,
	32, 32, 319, 319, -1000, -1000, -1000, -119, -1000, 886,
	886, -1000, -1000, -1000, -1000, 9755, -1000, 886, -1000, -257,
	933, -1000, -1000, 926, 1377, -1000, 1150, 1150, 573, 1364,
	10497, 1390, -1000, 1390, 1403, -1000, -1000, 94, 1390, 92,
	1390, -1000, 1403, -1000, -1000, -1000, 1390, 1390, -1000, -1000,
	1390, 1390, -1000, 1390, 1390, 688, 1321, 1307, 1150, 9311,
	-1000, 674, -1000, 9755, 886, 2025, -1000, -1000, -1000, -1000,
	-1000, -1000, 1150, 886, 1362, 1150, 1150, 1165, -1000, 9755,
	200, 1496, -1000, -1000, 898, -1000, 1251, 1244, -1000, -1000,
	1150, 9311, -262, -1000, -1000, -1000, 925, -1000, -1000, 4432,
	-262, -262, 9311, -1000, -1000, -1000, -1000, -221, 796, 512,
	1673, 1400, 1172, 1673, 3089, 1576, 9755, 9755, 1661, -1000,
	1380, -1000, -1000, 1615, -1000, -1000, 803, -1000, 1380, 1158,
	156, 107, 9755, -1000, 2863, -1000, 8181, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1661,
	9755, -1000, -1000, -1000, -1000, -1000, 965, 3140, 965, 965,
	965, 382, 9755, 966, 9755, -1000, -1000, -1000, -1000, -1000,
	2025, 1092, 8509, 684, 684, 8509, 684, 684, 512, 512,
	1398, 1397, 260, -1000, 965, -1000, -153, 3586, 965, -1000,
	832, -1000, -1000, 850, 822, 850, 850, 850, 850, 850,
	182, 812, 389, -1000, 622, 622, 965, 512, 1148, 200,
	3089, 1492, -1000, -1000, -1000, -1000, 28, 28, 28, -1000,
	2489, 28, 485, -1000, 10179, 10179, 73, -1000, -1000, 675,
	-1000, 62, -1000, -257, -1000, -1000, 4034, 900, 9755, -1000,
	259, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4034, 10179, 10179, 10179, 10179, -114,
	1274, 756, -1000, 9755, 368, -1000, -1000, -1000, -1000, -1000,
	-1000, 405, 965, 801, -1000, 1695, -159, 662, -1000, -1000,
	-1000, -1000, -1000, 1377, -1000, -1000, 578, -1000, -1000, 886,
	1673, 1085, 1126, 3089, 9755, 400, -221, 3089, -1000, -1000,
	1693, 633, 697, 1361, -1000, 896, 1640, 886, 1320, -1000,
	-1000, -123, 9755, 8181, 6126, 675, 6126, -1000, 8181, 2773,
	1640, 10773, 395, 1545, 1280, 1356, 321, -1000, 3280, 866,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 965, 1688, 1685, 1683, 1681,
	10849, 9755, 9755, -1000, 1622, -1000, -1000, 8509, -1000, -1000,
	-1000, -1000, -1000, 1122, 1089, 512, 512, 1392, 1377, 1064,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 771,
	771, 1062, 1060, 3089, -1000, 1492, -1000, -1000, 10179, 28,
	28, -20, -1000, 926, -1000, 886, 1390, 886, 529, -1000,
	-1000, 886, 2361, 2275, 384, 250, 1377, -105, -1000, 675,
	9755, 2025, -1000, 200, 622, 622, -1000, -1000, -1000, 132,
	748, 696, 696, 806, 38, -1000, 1649, 444, 5584, -1000,
	3089, 1673, 3089, 1492, 675, 1058, 1673, 1492, -1000, 1546,
	9755, 9755, 9755, -1000, 1576, -1000, 9311, -1000, -1000, -259,
	675, 2863, 2159, -1000, -1000, 2526, 5742, -1000, 1576, 8181,
	749, -1000, 750, -1000, 6126, 1283, 2025, 1120, -1000, 1291,
	2069, -1000, -1000, -1000, 1586, 120, 458, 965, 146, 4435,
	-1000, -1000, 1354, 3664, -37, -1000, -1000, -1000, 652, 574,
	959, -1000, 1564, -1000, -1000, 3140, 1574, -1000, -1000, -1000,
	-1000, -1000, 6126, -1000, 1323, 886, 761, 158, -1000, 249,
	1056, 1053, 512, 965, -1000, 3586, -1000, -1000, 394, 3089,
	1492, -1000, 28, -1000, -1000, -1000, -1000, -1000, 10179, -1000,
	-1000, 10179, -1000, 10179, -1000, 10179, -1000, 10179, 10179, 886,
	821, 675, 1388, -1000, -1000, -1000, 696, -1000, 696, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1214, -1000, 1645, 886,
	-1000, 1492, 3089, -1000, -1000, -1000, 3089, -1000, 1548, 675,
	675, -1000, -1000, 1241, 9755, 5358, -1000, -1000, -1000, -1000,
	2856, 9699, 432, 1940, 240, 2025, -1000, 240, 1119, 1280,
	2025, -1000, -1000, 1943, 1280, 1280, 1280, 1280, 1280, -1000,
	1536, 1530, -1000, 1521, 1518, 1532, 2025, 1050, 120, 560,
	1377, -1000, 2334, -1000, -1000, -1000, 1586, 1621, -1000, 4048,
	1354, -37, 1347, -1000, -48, -18, 8783, 6736, 638, -1000,
	-1000, -1000, -1000, -1000, 965, 417, -1000, 106, 153, 130,
	-1000, 123, 3089, 3089, 1048, 886, -1000, 2025, 1492, -1000,
	986, 986, 986, 986, 986, 112, -1000, -1000, 965, -1000,
	-1000, -1000, 570, 9755, -1000, -1000, -1000, 1492, -1000, 1673,
	1280, 675, -1000, -1000, 3822, -1000, -1000, 9755, -1000, 9755,
	6126, -1000, 1213, 1377, -1000, 1673, 1280, 1215, -1000, 1200,
	-1000, 649, 2069, 1387, 1494, 1341, -1000, -1000, -1000, -1000,
	1525, -1000, 1522, -1000, -1000, -1000, -1000, -155, 510, 491,
	471, 965, -1000, 1380, -1000, 1347, -37, -53, -1000, -1000,
	-1000, -1000, 675, 646, -1000, 1346, -1000, 6126, -1000, -1000,
	122, -1000, 1492, 1492, -1000, -1000, 1383, -1000, -1000, -1000,
	-1000, -1000, -1000, 886, 196, -164, 1025, 6736, 1006, -1000,
	675, -1000, 1670, 1345, 429, 8181, 8810, 10792, 1389, 1943,
	1377, -1000, 7120, 965, 1661, 1215, -1000, 1673, 1943, 9755,
	-1000, -1000, 9755, 1379, -1000, 9755, -1000, -1000, -1000, -1000,
	1378, 1377, 1377, 1377, 1019, -1000, -1000, -1000, -1000, -54,
	-49, -1000, 9755, 2010, -1000, -1000, -1000, -1000, 965, -1000,
	1547, -117, -175, -1000, -1000, -1000, 886, 9755, 1663, 1642,
	-1000, 2837, 749, -1000, -1000, 1570, 1183, 1322, -1000, -1000,
	9219, 886, 1023, -1000, -1000, 563, -1000, -1000, 1019, 1640,
	-1000, 1661, -1000, 675, 675, 400, 675, -106, 400, 400,
	400, 631, 965, -1000, -1000, -1000, 675, 4974, 1014, -1000,
	1542, -1000, -1000, -1000, -1000, 9755, 9755, 4206, 257, -1000,
	1377, -1000, -1000, 1296, 7888, 965, -1000, -1000, 1640, 1010,
	1008, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	969, 969, 969, 560, -1000, -1000, -1000, -124, 675, 1323,
	419, 1682, -1000, 1377, -1000, 1380, -1000, -1000, -1000, -1000,
	-1000, -106, -1000, -1000, -1000, -155, -168, -1000, 1943, 1322,
	886, -1000, -1000, -178, 1318, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1993, 24, 41, 1992, 1991, 1989, 1988, 1987, 1985,
	1983, 1982, 1979, 1977, 1975, 26, 23, 51, 25, 36,
	1967, 1966, 1965, 1964, 1963, 78, 1958, 1957, 1956, 1955,
	87, 1954, 1953, 1952, 1947, 82, 130, 90, 92, 1494,
	30, 48, 58, 67, 1944, 27, 1943, 1942, 59, 1941,
	40, 1940, 1939, 96, 1934, 1931, 5, 128, 99, 98,
	65, 1929, 1928, 103, 1615, 1921, 1916, 176, 1914, 1913,
	97, 22, 64, 3, 14, 13, 1904, 327, 2, 1901,
	93, 83, 1899, 1898, 1893, 31, 1892, 62, 72, 16,
	66, 1891, 15, 8, 74, 49, 28, 9, 1, 57,
	38, 1890, 17, 42, 11, 1883, 71, 1881, 123, 52,
	69, 7, 1372, 0, 47, 89, 1877, 1869, 1867, 657,
	95, 29, 10, 60, 76, 1864, 73, 101, 56, 100,
	1862, 1861, 1860, 1858, 1853, 75, 1848, 1847, 1845, 229,
	775, 119, 80, 55, 1844, 1842, 91, 324, 328, 88,
	329, 928, 77, 1837, 1834, 1833, 1830, 109, 1821, 84,
	108, 39, 464, 1820, 1818, 1817, 1815, 1813, 1812, 1809,
	104, 1805, 85, 61, 235, 641, 50, 1800, 1779, 1778,
	1777, 81, 1776, 1773, 1768, 68, 1767, 1766, 113, 94,
	118, 106, 115, 1759, 1758, 102, 79, 1757, 107, 114,
	1754, 105, 46, 37, 354, 54, 1753, 1752, 1751, 6,
	4, 1750, 1749, 1745, 1743, 1742, 1741, 63, 1739, 86,
	1734, 20, 1733, 1732, 53, 1731, 1730, 1727, 1726, 1725,
	442, 1005, 1722, 165, 120, 1721, 117,
}

var yyR1 = [...]uint8{
	0, 226, 227, 227, 1, 1, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
	21, 229, 229, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 28, 28, 7, 8, 8, 8, 232, 232,
	48, 48, 95, 95, 9, 9, 9, 9, 10, 10,
	206, 206, 205, 207, 207, 11, 11, 11, 11, 11,
	200, 200, 200, 200, 200, 12, 12, 203, 203, 203,
	15, 15, 15, 15, 16, 16, 17, 17, 17, 19,
	19, 100, 100, 104, 104, 104, 105, 105, 105, 105,
	218, 218, 125, 125, 228, 228, 233, 233, 233, 233,
	233, 233, 233, 198, 198, 198, 198, 199, 199, 199,
	199, 201, 201, 202, 202, 202, 202, 202, 202, 204,
	204, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 13, 13, 29, 29, 72, 72, 14, 110,
	110, 179, 179, 179, 180, 180, 180, 180, 180, 180,
	182, 182, 183, 183, 117, 117, 184, 184, 24, 164,
	165, 165, 165, 165, 165, 165, 165, 165, 151, 151,
	151, 151, 128, 128, 128, 128, 128, 128, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 190, 190, 190,
	190, 190, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 192, 193, 194, 186, 186, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 141, 141, 141, 141, 141, 141, 185, 185,
	181, 181, 181, 181, 131, 131, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 136, 130, 130, 130,
	130, 130, 130, 130, 137, 137, 132, 132, 132, 132,
	132, 132, 132, 132, 129, 129, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 138, 138,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 150,
	150, 139, 139, 148, 148, 149, 149, 149, 140, 140,
	140, 147, 147, 147, 144, 144, 145, 145, 146, 146,
	146, 142, 142, 142, 143, 143, 143, 153, 175, 175,
	175, 177, 177, 178, 178, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 163,
	163, 195, 195, 196, 196, 197, 197, 174, 174, 174,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 162, 162, 172, 172, 173, 173, 170, 170,
	170, 170, 171, 157, 157, 157, 157, 157, 158, 158,
	159, 159, 159, 159, 154, 154, 155, 155, 156, 156,
	188, 188, 188, 222, 222, 222, 222, 222, 222, 223,
	223, 189, 189, 160, 160, 161, 161, 168, 168, 168,
	168, 234, 234, 166, 166, 166, 167, 167, 167, 235,
	25, 26, 26, 27, 27, 27, 32, 32, 32, 30,
	30, 31, 31, 37, 37, 36, 36, 38, 38, 38,
	38, 116, 116, 116, 115, 115, 219, 219, 219, 219,
	219, 40, 40, 41, 41, 42, 42, 43, 43, 43,
	209, 209, 208, 208, 210, 210, 210, 210, 210, 210,
	210, 210, 55, 55, 92, 92, 92, 96, 96, 44,
	44, 44, 44, 45, 45, 46, 46, 47, 47, 123,
	123, 122, 122, 122, 121, 121, 49, 49, 49, 51,
	50, 50, 50, 50, 52, 52, 54, 54, 53, 53,
	56, 56, 56, 56, 57, 57, 94, 94, 39, 39,
	39, 39, 39, 39, 39, 39, 107, 107, 59, 59,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 69, 69, 69, 69,
	69, 69, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 35, 35, 70, 70, 70, 77, 71,
	71, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 67, 67,
	67, 67, 67, 67, 67, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 236, 236,
	68, 68, 68, 68, 33, 33, 33, 33, 33, 124,
	124, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 127,
	127, 127, 127, 127, 127, 127, 127, 81, 81, 34,
	34, 79, 79, 80, 109, 109, 82, 82, 78, 78,
	78, 78, 211, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 60, 60, 83, 83, 84, 84, 220,
	220, 221, 85, 85, 86, 86, 87, 88, 88, 88,
	89, 89, 89, 89, 90, 90, 90, 62, 62, 62,
	62, 62, 62, 91, 91, 93, 93, 93, 93, 97,
	97, 73, 73, 75, 75, 74, 76, 98, 98, 102,
	99, 99, 103, 103, 103, 103, 103, 22, 23, 101,
	101, 101, 118, 118, 118, 108, 108, 106, 106, 113,
	114, 114, 114, 114, 114, 119, 119, 119, 120, 120,
	212, 212, 212, 213, 213, 213, 214, 214, 215, 216,
	216, 217, 225, 225, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 112, 112, 112, 112,
	112, 112, 230, 231,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 3, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 10, 1, 1, 5, 5, 3, 5, 3, 1,
	3, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 4, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 4, 1, 1, 0, 1, 2, 0,
	3, 0, 2, 2, 0, 2, 2, 2, 2, 2,
	0, 2, 0, 3, 0, 1, 0, 2, 4, 4,
	0, 1, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 1, 2, 2,
	3, 2, 4, 2, 4, 2, 2, 3, 2, 3,
	2, 7, 9, 3, 3, 6, 9, 9, 6, 6,
	8, 8, 5, 8, 7, 4, 0, 2, 4, 6,
	2, 4, 2, 1, 1, 2, 1, 2, 2, 1,
	1, 1, 3, 1, 2, 1, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 2, 3, 1, 3, 0, 2,
	0, 2, 2, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 3, 2,
	2, 2, 1, 1, 0, 1, 1, 3, 3, 2,
	2, 2, 1, 1, 1, 1, 4, 5, 4, 4,
	4, 1, 2, 2, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 3,
	3, 0, 3, 3, 0, 1, 0, 1, 0, 2,
	1, 0, 3, 3, 0, 1, 2, 6, 0, 1,
	4, 1, 2, 1, 3, 2, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 5,
	2, 3, 3, 2, 3, 2, 3, 3, 2, 2,
	3, 4, 1, 1, 1, 1, 1, 3, 3, 2,
	2, 4, 1, 2, 5, 5, 8, 8, 13, 11,
	1, 1, 2, 2, 10, 8, 9, 7, 7, 5,
	0, 1, 1, 0, 1, 1, 1, 2, 2, 1,
	2, 0, 3, 0, 1, 1, 3, 0, 4, 1,
	3, 2, 1, 1, 2, 1, 1, 1, 1, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 3, 6, 4,
	7, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	0, 4, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 8, 1, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 0, 2, 0, 4, 1, 3,
	3, 2, 3, 2, 1, 2, 0, 3, 1, 1,
	3, 4, 4, 4, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 4, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 6, 2, 2, 2, 2, 2, 2, 2,
	3, 3, 1, 1, 1, 1, 2, 1, 4, 5,
	5, 5, 5, 6, 4, 4, 4, 6, 6, 8,
	6, 6, 6, 8, 6, 8, 6, 8, 6, 8,
	9, 7, 5, 4, 4, 3, 3, 3, 1, 3,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 1, 1,
	2, 2, 1, 2, 2, 1, 2, 1, 1, 1,
	2, 2, 1, 1, 2, 2, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 0, 2, 1, 1,
	3, 5, 3, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 0, 3, 0, 2, 1,
	3, 1, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 1, 3, 1, 1, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 5, 3, 1, 3, 1,
	2, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 2, 0, 2, 2, 0, 1, 4, 1,
	3, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -226, -1, -20, -21, -24, 126, 127, -227, 392,
	-164, 58, -222, -223, 277, -184, 135, 148, 168, 169,
	362, 133, 374, 375, 150, 377, 79, -106, 138, -165,
	-151, -113, -112, 63, 36, 61, 387, 388, 148, 169,
	171, 290, 134, 134, 134, 136, 214, 136, -113, -113,
	-78, 139, 61, -112, -119, 63, -53, -119, 61, -112,
	133, -108, 139, 377, 374, 375, 342, 133, 60, 59,
	-152, -128, -131, -129, -133, -132, -134, -113, -136, -130,
	250, 354, 247, 251, 248, 253, 254, 255, 120, 252,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 256, 268, 33, 155, 240, 241, 242, 245, 244,
	246, 243, 269, 270, 271, 272, 273, 274, 275, 276,
	277, -135, 232, 233, 235, 236, 237, 239, 238, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, -152,
	-152, -152, -113, 56, 213, -113, -113, -108, 215, -108,
	56, -198, 19, 193, 194, 206, 56, 81, 123, 25,
	123, -108, -53, 81, -53, 306, -168, -234, 357, 37,
	-151, -153, -157, -154, -155, -156, -169, -158, 142, 140,
	150, 390, 144, 145, 277, -162, 146, 134, 151, 73,
	81, -190, 142, -193, 56, 285, 291, 140, 151, 150,
	390, 71, 143, 25, 364, 366, 31, 32, -146, 393,
	279, -144, 288, -139, 58, -138, 249, -140, 58, -139,
	-140, -139, -140, -142, 251, -142, -142, -142, -142, 58,
	58, -139, -139, -139, -139, -139, 58, -139, -148, 58,
	-137, 234, -148, -149, 58, -149, 56, 57, -53, -113,
	56, 56, -53, -218, 387, 388, -53, -53, -201, -199,
	8, 9, 10, 207, -53, 26, -114, -120, -113, 299,
	147, -111, -112, -119, 131, 194, 365, 80, 25, 27,
	285, 291, 193, 84, 120, 16, 85, 200, 374, 375,
	119, 76, 343, 126, 52, 335, 336, 333, 198, 345,
	346, 334, 292, 205, 20, 31, 10, 28, 153, 24,
	113, 128, 195, 89, 88, 156, 160, 161, 26, 154,
	75, 201, 203, 19, 55, 146, 11, 364, 13, 14,
	379, 366, 139, 138, 100, 378, 134, 50, 8, 122,
	29, 97, 46, 151, 204, 48, 98, 17, 337, 338,
	34, 352, 162, 115, 53, 40, 380, 81, 381, 73,
	56, 306, 199, 79, 15, 51, 163, 382, 202, 386,
	99, 129, 342, 170, 49, 196, 383, 132, 197, 6,
	348, 33, 152, 47, 133, 293, 384, 87, 137, 74,
	5, 150, 9, 385, 54, 57, 339, 340, 341, 38,
	86, 12, 149, 356, 77, -128, -120, -111, -53, 26,
	131, -53, -166, 59, -114, 71, -111, -112, 36, 58,
	-189, 56, 81, -160, -113, 151, -162, 61, 134, -188,
	374, 375, -230, 58, -162, -162, 61, 134, 151, 61,
	151, 73, 19, -113, 9, 151, 151, -189, 63, -53,
	58, -186, 365, 16, 58, -191, 58, -192, 63, 64,
	65, 110, 66, 73, -141, 72, -59, 280, -67, 333,
	336, 335, 281, 74, 75, -113, 351, 350, -119, -194,
	65, 394, -145, 289, -142, 65, -139, -142, 65, 61,
	-142, -142, -143, 120, 119, 33, -143, -143, -143, -143,
	-150, 63, -150, -147, 356, 357, -147, 65, 65, -148,
	65, -53, -113, 58, 56, -53, -53, 25, 136, 25,
	-179, 25, 56, 59, 207, -198, -113, 123, 57, -117,
	142, -157, 150, 131, 90, -114, -234, -173, -170, -113,
	151, 58, 10, 9, 19, 146, 140, 150, 390, -188,
	61, 58, -39, -58, 81, -64, 31, 26, 9, 76,
	-230, -63, -59, -78, -211, -76, -77, 120, 121, 109,
	110, 117, 82, 122, -67, -65, -66, -68, -214, 180,
	63, 64, -113, 62, 72, 65, 66, 67, 68, 73,
	-119, 311, -74, 48, 49, 343, 344, 345, 346, 352,
	347, 85, 38, 40, 256, 280, 281, 333, 341, 340,
	339, 337, 338, 335, 336, 389, 139, 334, 115, 342,
	278, 61, 61, 61, 61, -188, 150, -160, -113, 376,
	-190, 390, -141, -230, 58, -39, 25, 31, -60, 65,
	110, -191, 58, -192, -181, 389, 65, 66, -181, -230,
	-139, 58, -139, 58, 58, -230, -230, -230, 123, -143,
	60, -142, -143, 60, 60, -143, -143, 61, 61, 120,
	60, 59, 60, 240, 240, 60, 59, 60, 59, 58,
	57, 56, -172, -173, -67, -113, -53, 58, 58, -2,
	-3, -4, 6, -230, -108, -2, -180, 19, 177, 178,
	-53, -199, -92, -113, 151, -201, -198, -114, -113, -229,
	134, 151, -113, 142, -157, -167, -114, 63, 65, 60,
	59, -139, -171, 283, -139, -39, -159, 173, 174, 33,
	175, -159, 376, 151, 151, -188, -230, 58, -173, -231,
	80, 79, 97, 208, 60, -39, -61, 100, 81, 98,
	99, 84, 106, 105, 116, 109, 110, 111, 112, 113,
	114, 115, 107, 108, 119, 389, 90, 91, 92, 93,
	94, 95, 96, 101, 102, 103, 104, -107, -230, -77,
	-230, -230, -230, -58, -2, -71, -230, -39, 124, 125,
	-64, -230, -64, -64, -64, -64, -64, -64, -215, 279,
	-181, 63, 123, 123, -230, -230, -230, -230, -230, -230,
	-230, -230, -81, -39, -230, 41, -230, -230, -230, -230,
	-236, -230, -236, -236, -236, -236, -236, -236, -127, 120,
	251, 155, 242, -135, -129, 257, 256, -230, -230, -230,
	-230, -188, 58, -189, -39, -92, 60, 58, 366, 59,
	65, 60, -191, 63, 60, 282, 122, -128, -231, 60,
	60, 60, -37, 24, -36, -71, -38, -39, 111, -119,
	-36, -39, -36, -114, -143, -142, 63, -142, 290, 290,
	65, 65, -172, -113, -53, 60, 58, 58, -92, -173,
	-85, 15, -27, 5, -25, -235, -2, -53, 137, 21,
	6, 8, 9, 10, 19, -110, 59, 25, -201, -228,
	58, -113, 150, -113, -175, -177, 356, -176, 57, 147,
	71, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	61, -170, -88, 27, 28, 60, -189, 56, 73, 176,
	-189, 56, -160, -188, 58, -39, -173, 60, -185, 175,
	-39, -39, -69, 73, 81, 74, 75, -64, 21, 22,
	23, -70, -74, -77, 69, 100, 98, 99, 84, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -124, 61, 63, 241, -127, 61,
	-78, -113, -231, -231, -231, 59, -231, -2, -63, 63,
	-113, -63, -113, 393, -114, -114, -36, -36, -39, -126,
	120, 247, 155, 242, 236, 266, 267, 287, 240, 288,
	-135, 239, 237, 238, 235, 232, 245, 244, 246, 257,
	248, 253, 255, 254, 252, -39, -38, -38, -36, -30,
	24, -79, -80, 86, -78, 19, -231, -231, -231, -231,
	-231, 249, -36, -37, -36, -36, -36, -161, -113, -230,
	-231, 60, 362, 363, -39, 58, -60, 60, -146, -231,
	-36, 59, -231, -231, -116, -115, 25, -113, 63, 123,
	-231, -231, -230, -143, -143, 60, 60, 60, 58, 58,
	-94, 378, -172, 60, 60, -89, 17, 16, -5, -3,
	-230, 21, 24, -32, 44, 45, -26, -231, 25, -161,
	195, -109, 86, -113, -202, -204, 216, -18, -15, -6,
	-8, -7, -10, -9, -11, -12, -13, -14, -22, -3,
	139, -16, -17, -28, 10, 9, 20, 33, 199, 200,
	205, 201, 149, -29, 170, -23, 8, 342, 160, 161,
	56, -233, -113, 109, 90, 63, -151, 59, 58, 58,
	374, 375, 140, -174, 56, -176, 356, 58, 358, 61,
	-163, 90, 63, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, -88, 9, 10, 58, 58, -173, -231,
	60, -175, 349, 73, 74, 75, -64, -64, -64, -70,
	-64, -64, -64, -35, 156, 80, 356, -231, -231, -39,
	-231, -216, -217, 63, -231, -231, 59, 57, 59, -139,
	-139, -139, -149, 227, -139, 227, -139, -149, -139, -139,
	-139, -139, -139, -139, 25, 59, 11, 59, 11, -231,
	-36, -82, -80, 89, -39, -231, -119, -231, -231, -231,
	-231, 60, 59, -39, -185, 56, 60, -187, 60, 60,
	-231, -38, -219, 391, -115, 111, -120, -219, -219, -37,
	-94, -172, -173, -57, 12, 58, 60, -57, -175, -90,
	19, 34, -39, -86, -87, -39, -85, -2, -30, 70,
	-2, -182, 57, 196, 216, -39, 392, -204, 216, -202,
	-85, -39, -25, -25, -25, -206, -113, -205, -25, -225,
	-224, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, -113, -113, -113, -200, 40, 202, 203, 204,
	-39, -113, -230, -81, -53, 60, -233, -113, -233, -233,
	-233, -233, -233, -173, -173, 58, 58, 151, -113, -178,
	-176, -113, 65, -195, 56, 77, 65, -195, -195, -195,
	-195, -195, -196, 191, 192, 65, -197, -196, 65, -159,
	-159, -161, -173, 60, -185, -175, -174, -35, 80, -64,
	-64, 240, 394, 59, -181, -126, 120, -124, -39, -142,
	61, -126, -64, -64, -64, -64, 353, -85, 88, -39,
	87, 143, -113, -231, 10, 9, 362, 363, 60, 217,
	368, 369, 162, 370, 175, 371, 372, -230, 123, -231,
	-57, 60, 60, -175, -39, -92, -94, -175, 9, 100,
	59, 18, 59, -88, -89, -231, -31, 47, -183, 356,
	-39, -202, -203, -204, -204, -202, 392, 88, -89, 87,
	-19, -15, -16, -18, 216, -106, 11, -48, -53, -41,
	-42, -43, -44, -55, -77, -230, -53, 59, -207, -123,
	197, 25, -99, -125, 218, -103, 301, 300, -114, 311,
	-101, 299, 251, 298, -195, 59, -113, 11, 11, 11,
	11, -204, 216, -72, -71, -72, -110, 19, 60, 60,
	-173, -173, 58, -230, 60, 59, -189, -189, 60, 60,
	-175, -174, -64, 290, -217, -231, -231, -231, 59, -231,
	-231, 59, -231, 19, -231, 59, -231, 19, -230, -34,
	348, -39, -53, -185, -159, -159, 356, -60, 16, -60,
	-60, -60, 65, 369, 162, 371, 16, -231, 163, -85,
	111, -175, -57, -175, -174, 60, -57, -174, 42, -39,
	-39, -87, -90, -36, 390, 392, -204, 88, 88, -90,
	-202, 89, 89, -203, -54, 29, -53, -53, -48, -232,
	59, 11, 57, 33, 59, -49, -51, -50, -52, 46,
	50, 52, 47, 48, 49, 53, -123, -41, -230, -122,
	163, -121, 25, -119, 63, -205, -113, 198, -128, 59,
	-99, 218, -100, -104, 302, 304, 90, 123, -118, -113,
	63, 31, 33, -224, 29, -203, -231, -109, 195, -212,
	209, 81, 60, 60, -173, -113, -176, 143, -175, -174,
	-64, -64, -64, -64, -64, -64, -231, 63, 58, -60,
	-60, 373, -119, 16, -231, -174, -175, -175, 43, -40,
	11, -39, 88, -204, 392, -16, -19, 139, -17, 139,
	392, 88, -95, 163, -53, -95, 57, -41, -53, -98,
	-102, -78, -42, -43, -43, -42, -43, 46, 46, 46,
	51, 46, 51, 46, -50, -119, -231, -56, 54, 138,
	55, -230, -121, 19, -103, -100, 59, 303, 305, 306,
	56, 77, -39, -114, -143, -161, 88, 216, 196, -213,
	210, 209, -175, -175, 60, -231, -53, -174, -231, -231,
	-231, -231, -231, -33, 100, 356, -161, 123, -220, -221,
	-39, -174, -57, -41, 88, 89, -39, -39, -62, 33,
	38, -2, -230, -230, -57, -41, -57, -40, 59, 90,
	-46, -45, 56, 57, -47, 56, -45, 46, 46, -209,
	356, 134, 134, 134, -96, -113, -2, -104, -105, 307,
	304, 310, 90, -203, 212, 211, -174, -174, 58, -231,
	354, 53, 359, 60, -114, -231, -85, 59, -83, 13,
	139, -202, -19, -19, -97, 56, -98, -73, -75, -74,
	-230, -2, -91, -93, 6, -113, -111, -112, -96, -85,
	-57, -57, -102, -39, -39, 58, -39, 58, -230, -230,
	-230, -231, 59, 304, 308, 309, -39, 392, -161, 43,
	355, 360, -231, -221, -84, 14, 16, 392, 30, -97,
	59, -231, -231, -231, 59, 123, -231, -89, -85, -92,
	-208, -210, 379, 380, 381, 382, 383, 384, 385, 386,
	-92, -92, -92, -122, -113, 88, 60, 43, -39, -71,
	88, 151, -75, 38, -2, -230, -93, -113, -89, 60,
	60, 59, -231, -231, -231, -56, 356, 139, 9, -73,
	-2, -210, -209, 359, -98, -231, 360,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 827, 1, 3,
	6, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 825, 434, 435, 436, 439, 0, 0, 828, 0,
	171, 216, 216, 216, 216, 829, 1006, 1007, 1008, 1009,
	1010, 1011, 0, 0, 0, 825, 0, 825, 0, 748,
	0, 0, -2, -2, 0, 837, 0, 548, 835, 836,
	825, 0, 0, 440, 437, 438, 167, 0, 447, 0,
	178, 348, 344, 183, 184, 185, 186, 187, 264, 265,
	294, 295, 331, 318, 338, 331, 338, 301, 331, 338,
	351, 351, 351, 351, 351, 309, 310, 311, 312, 313,
	314, 315, 0, 0, 286, 331, 331, 331, 331, 331,
	292, 293, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 331, 333, 284, 333, 335, 335, 282, 283, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 179,
	180, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 114, 115, 0, 0, 0, 0, 0,
	0, 0, 168, 0, 0, 0, 169, 449, 0, 452,
	172, 173, 174, 175, 176, 177, 0, 441, 443, 0,
	430, 0, 0, 0, 0, 0, 0, 402, 403, 189,
	0, 191, 0, 193, 0, 195, 196, 0, 198, 200,
	441, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	350, 346, 345, 351, 0, 331, 319, 351, 0, 351,
	351, 302, 303, 354, 0, 354, 354, 354, 354, 0,
	0, 341, 341, 289, 290, 291, 0, 276, 277, 0,
	333, 285, 279, 280, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 101, 0, 151, 0, 121,
	117, 118, 119, 116, 0, 0, 750, 0, 830, 831,
	832, -2, -2, 838, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 22, 549, 839, 0, 826,
	164, 0, 0, 0, 453, 455, 833, 834, 451, 0,
	413, 0, 0, 0, 444, 390, 0, 398, -2, 0,
	431, 432, 846, 1012, 0, 0, 393, 395, 0, 430,
	443, 190, 0, 0, 0, 197, 199, 0, 203, 204,
	846, 0, 236, 0, 0, 217, 0, 220, -2, 223,
	224, 0, 226, 260, 229, 230, 231, 0, 233, 331,
	331, 256, 0, 568, 569, 0, 0, 0, 0, 234,
	235, 349, 182, 347, 354, 0, 351, 354, 0, 0,
	354, 354, 304, 355, 0, 0, 305, 306, 307, 308,
	0, 329, 0, 287, 0, 0, 288, 0, 0, 278,
	0, 0, 0, 0, 0, 0, 0, 0, 825, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	443, 29, 165, 0, 0, 454, 450, 0, 406, 331,
	331, 846, 0, 0, 0, 0, 0, 430, 0, 0,
	397, 0, 0, 558, 846, 564, 566, 0, 0, 0,
	846, 611, 612, 613, 614, 615, 616, 846, 846, 846,
	846, 846, 846, 846, 642, 643, 644, 645, 0, 647,
	-2, 754, 748, 756, 757, 758, 759, 760, 761, 762,
	0, 0, 806, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 678, 688, 688,
	688, 688, 688, 688, 688, 0, 0, 0, 0, 0,
	847, 391, 392, 394, 396, 400, 430, 0, 444, 215,
	192, 441, 194, 846, 0, 0, 0, 237, 0, 763,
	0, 0, 0, 0, 222, 0, 225, 227, 228, 0,
	252, 0, 254, 0, 0, -2, 846, 846, 0, 296,
	332, 354, 298, 339, 340, 299, 300, 356, 352, 353,
	351, 0, 351, 0, 0, 328, 0, 336, 0, 0,
	0, 0, 0, 404, 405, 331, 0, 0, 0, -2,
	772, 0, 459, 0, 0, -2, 0, 0, 152, 153,
	149, 122, 120, 514, 515, 0, 0, 751, 104, 0,
	31, 32, 444, 443, 30, 448, 456, 457, 458, 358,
	0, 777, 410, 412, 409, 0, 441, 420, 421, 0,
	0, 441, 442, 443, 430, 0, 846, 0, 0, 258,
	846, 846, 0, 563, 1013, 561, 846, 0, 0, 846,
	846, 846, 846, 846, 846, 846, 846, 846, 846, 846,
	846, 846, 846, 846, 0, 0, 592, 593, 594, 595,
	596, 597, 598, 599, 600, 601, 602, 565, 0, 582,
	0, 0, 0, 558, 36, 0, 846, 609, 0, 0,
	633, 846, 634, 635, 636, 637, 638, 639, 646, 0,
	753, 755, 0, 0, 846, 846, 846, 846, 846, 846,
	846, 469, 0, 738, 0, 0, 0, 0, 0, 0,
	680, 0, 681, 682, 683, 684, 685, 686, 687, 729,
	0, 731, 732, 733, 734, 735, 736, 846, -2, 846,
	846, 401, 0, 0, 0, 0, 0, 846, 212, 0,
	764, 218, 0, 260, 221, 261, 262, 348, 232, 253,
	255, 257, 0, 846, 0, 0, 475, 481, 477, 0,
	0, 481, 0, 0, 297, 354, 330, 354, 342, 343,
	0, 0, 0, 0, 0, 556, 1012, 0, 0, 0,
	780, 0, 0, 463, 466, 461, 36, 0, 0, 155,
	156, 157, 158, 159, 0, 744, 0, 0, 0, 23,
	106, 0, 0, 444, 387, 359, 0, 361, 0, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 407, 408, 778, 779, 777, 414, 0, 422, 423,
	415, 0, 0, 0, 0, 0, 0, 358, 429, 0,
	559, 560, 562, 586, 0, 588, 590, 570, 846, 846,
	846, 574, 605, 606, 607, 0, 846, 846, 846, 603,
	578, 0, 617, 618, 619, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 631, 699, 700, 0, 641, 0,
	0, 748, 584, 585, 608, 846, 805, 36, 629, 260,
	0, 630, 640, 0, 750, 752, 0, 0, 0, 0,
	-2, 331, 704, 331, 335, 707, 708, 709, 331, 712,
	331, 715, 335, 717, 718, 719, 331, 331, 722, 723,
	331, 331, 726, 331, 331, 0, 0, 0, 0, 846,
	470, 746, 741, 846, 0, 0, 675, 676, 677, 679,
	689, 730, 0, 0, 474, 0, 0, 0, 445, 846,
	258, 205, 208, 209, 0, 238, 0, 0, 263, 648,
	0, 846, 486, 654, 478, 482, 0, 484, 485, 0,
	486, 486, -2, 316, 317, 334, 337, 556, 0, 0,
	554, 0, 0, 554, 358, 784, 846, 846, 772, 38,
	0, 464, 465, 469, 467, 468, 460, 37, 0, 160,
	0, 0, 846, 516, 19, 123, 0, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 772,
	846, 82, 83, 459, 459, 459, 0, 459, 0, 0,
	0, 70, 846, 0, -2, 817, 42, 43, 144, 145,
	0, 0, -2, 106, 106, -2, 106, 106, 0, 0,
	0, 0, 0, 357, 0, 362, 0, 0, 0, 365,
	0, 380, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 411, 0, 0, 0, 0, 0, 258,
	358, 387, 259, 587, 589, 591, 571, 572, 573, 575,
	603, 579, 0, 576, 846, 846, 0, 567, 583, 610,
	-2, 0, 849, 260, 655, 656, 0, 0, 846, 701,
	351, 705, 706, 710, 711, 713, 714, 716, 720, 721,
	724, 725, 727, 728, 0, 846, 846, 846, 846, 0,
	772, 0, 742, 846, 0, 673, 674, 690, 691, 692,
	693, 0, 0, 0, 201, 0, 0, 0, 214, 219,
	649, 476, 650, 0, 483, 479, 0, 651, 652, 0,
	554, 0, 0, 358, 846, 0, 556, 358, 13, 33,
	0, 0, 781, 773, 774, 777, 780, 36, 471, 462,
	-2, 162, 846, 150, 0, 745, 0, 126, 0, 0,
	780, 0, 827, 0, 0, 58, -2, 60, 0, 0,
	852, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 65, 66, 67, 0, 0, 0, 0, 0,
	0, -2, -2, 148, 149, 105, 107, -2, 108, 109,
	110, 111, 112, 0, 0, 0, 0, 0, 388, 0,
	363, 368, 366, 369, 381, 382, 370, 371, 372, 373,
	374, 375, 376, 383, 384, 377, 378, 385, 386, 441,
	441, 0, 0, 358, 428, 387, 427, 577, 846, 604,
	580, 0, 848, 0, 851, 0, 331, 0, 0, 702,
	703, 0, 0, 0, 0, 0, 0, 739, 672, 747,
	846, 0, 446, 258, 0, 0, 210, 211, 213, 0,
	0, 0, 0, 0, 0, 249, 0, 0, 0, 653,
	358, 554, 358, 387, 555, 0, 554, 387, 785, 0,
	846, 846, 846, 776, 784, 39, 846, 472, 17, 0,
	161, 18, 0, 77, 124, 0, 0, 127, 784, 0,
	88, 86, 82, 89, 0, 0, 0, 0, 50, 0,
	493, 495, 496, 497, 529, 0, 531, 0, 0, 0,
	64, 530, 54, 0, 0, 810, 102, 103, 0, 0,
	0, -2, 0, 821, 818, 0, 68, 71, 72, 73,
	74, 75, 0, 142, 147, 0, 744, 0, 24, 840,
	0, 0, 0, 0, 360, 0, 416, 417, 0, 358,
	387, 425, 581, 632, 850, 657, 661, 658, 846, 660,
	662, 846, 664, 846, 666, 846, 668, 846, 846, 0,
	0, 743, 0, 202, 206, 207, 0, 240, 0, 242,
	243, 244, 245, 246, 247, 248, 0, 487, 0, 0,
	480, 387, 358, 10, 8, 557, 358, 12, 0, 782,
	783, 775, 34, 491, 846, 0, 78, 128, 125, 141,
	0, 0, 0, 0, 52, 0, 547, -2, 0, 0,
	0, 48, 49, 0, 0, 0, 0, 0, 0, 536,
	0, 0, 539, 0, 0, 0, 0, 0, 0, 550,
	0, 532, 0, 534, 535, 61, 529, 0, 62, 0,
	55, 0, 57, 91, 0, 0, 846, 0, 354, 822,
	823, 824, 820, 853, 0, 0, 143, 0, 0, 843,
	841, 0, 358, 358, 0, 0, 364, 0, 387, 426,
	0, 0, 0, 0, 0, 694, 671, 740, 0, 239,
	241, 250, 0, 846, 489, 7, 11, 387, 786, 554,
	0, 163, 20, 79, 0, 84, 85, 846, 87, 846,
	0, 90, 0, 0, 546, 554, 0, 554, 51, 491,
	807, 0, 494, 525, 527, 0, 522, 537, 538, 540,
	0, 542, 0, 544, 545, 498, 499, 500, 0, 0,
	0, 0, 533, 0, 811, 56, 0, 0, 94, 95,
	812, 813, 814, 0, 816, 69, 76, 0, 150, 26,
	0, 842, 387, 387, 25, 389, 0, 424, 659, 663,
	665, 667, 669, 0, 0, 0, 0, 0, 0, 769,
	771, 9, 765, 492, 0, 0, 0, 0, 799, 0,
	0, -2, 0, 0, 772, 554, 47, 554, 0, 846,
	519, 526, 846, 0, 520, 846, 521, 541, 543, 512,
	0, 0, 0, 0, 0, 517, -2, 92, 93, 0,
	0, 99, 846, 0, 844, 845, 27, 28, 0, 670,
	0, 0, 0, 419, 251, 488, 0, 846, 767, 0,
	80, 0, 0, 88, 40, 0, 799, 787, 801, 803,
	846, 36, 0, 793, -2, 795, 797, 798, 0, 780,
	46, 772, 808, 809, 523, 0, 528, 0, 0, 0,
	0, 531, 0, 96, 97, 98, 815, 0, 0, 695,
	0, 698, 490, 770, 35, 846, 846, 0, 0, 41,
	0, 804, -2, 0, 0, 0, 53, 45, 780, 0,
	0, 502, 504, 505, 506, 507, 508, 509, 510, 511,
	0, 0, 0, 550, 518, 21, 418, 696, 768, 766,
	0, 0, 802, 0, -2, 0, 794, 796, 44, 524,
	501, 0, 551, 552, 553, 500, 0, 81, 0, 790,
	36, 503, 513, 0, 800, -2, 697,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 392,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 393, 3, 394, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:424
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:429
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:430
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:438
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:443
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:463
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:483
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:504
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:520
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:537
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:557
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 14:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:572
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:583
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:595
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:606
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:622
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:636
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:650
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:663
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:677
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:688
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:694
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:708
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:722
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:742
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:760
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:778
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:787
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:802
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:810
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:817
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:823
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:827
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:833
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:837
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:844
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:856
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:868
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:872
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:878
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:884
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:888
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:892
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:897
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:898
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:902
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:906
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:911
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:915
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:921
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:925
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:929
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:933
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:939
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:943
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:956
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:960
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:966
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:971
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:975
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:981
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:988
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:995
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1002
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1010
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1020
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1024
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1028
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1032
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1036
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1042
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1049
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1063
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1067
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1071
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1078
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1086
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1100
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1107
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1117
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1128
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1133
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1138
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1145
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1149
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1160
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1164
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1170
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1174
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1178
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1184
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1192
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1196
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1206
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1212
		{
			yyVAL.str = SessionStr
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1216
		{
			yyVAL.str = GlobalStr
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1221
		{
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1222
		{
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1226
		{
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1227
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1228
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1229
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1230
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1231
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1232
		{
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1236
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1244
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1248
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1254
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1258
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1262
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1267
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1273
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1277
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1283
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1292
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1301
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1305
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1314
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1330
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1343
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1353
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1358
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1364
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1365
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1368
		{
			yyVAL.exprs = nil
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1369
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1373
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1378
		{
			yyVAL.empty = struct{}{}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1380
		{
			yyVAL.empty = struct{}{}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1383
		{
			yyVAL.bytes = nil
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1387
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1391
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1396
		{
			yyVAL.bytes = nil
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1400
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1404
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1408
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1412
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1416
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1421
		{
			yyVAL.expr = nil
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1425
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1430
		{
			yyVAL.expr = nil
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1434
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1439
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1443
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1448
		{
			yyVAL.bytes = nil
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1452
		{
			yyVAL.bytes = nil
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1458
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1465
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1471
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1475
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1480
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1484
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1488
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1492
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1496
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1500
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1506
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1510
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1515
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1520
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1526
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1537
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1543
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1556
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1561
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1566
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1571
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1577
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1582
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1587
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1592
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1597
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1602
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1607
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1612
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1617
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1626
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1636
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1641
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1646
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1653
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1660
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1668
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1673
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1678
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 211:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1683
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1689
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 213:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1695
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1702
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1709
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1721
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1725
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1729
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1733
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1737
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1743
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1747
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1751
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1755
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1763
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1767
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1775
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1779
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1783
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1789
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1795
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1801
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1807
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1811
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1816
		{
			yyVAL.sequence = &Sequence{}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1820
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1825
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1830
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1835
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1840
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1845
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1850
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1855
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1860
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1865
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1870
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1875
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1880
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1887
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1895
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1899
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1903
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1907
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1912
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1916
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1921
		{
			yyVAL.bytes = nil
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), DisplayWidth: yyDollar[2].optVal}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1993
		{
			yyVAL.str = ""
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1997
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2023
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2051
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2055
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2059
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2063
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 317:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2132
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2137
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2141
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2147
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2151
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2155
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2159
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2163
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2167
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2171
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2175
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2179
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2185
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2190
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2195
		{
			yyVAL.optVal = nil
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2199
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2204
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2208
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2216
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2220
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2226
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2234
		{
			yyVAL.optVal = nil
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2238
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2242
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2251
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2255
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2259
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2264
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2268
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2273
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2277
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2282
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2286
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2290
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2295
		{
			yyVAL.str = ""
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2299
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2303
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2308
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2312
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2316
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 357:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2322
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2327
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2331
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2341
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2345
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2351
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2355
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2361
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2365
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2370
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2374
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2378
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2382
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2386
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2390
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2394
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2398
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2402
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2406
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2410
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2414
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2425
		{
			yyVAL.str = ""
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2429
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2435
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2439
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2445
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2449
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2455
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2459
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2465
		{
			yyVAL.indexPartition = nil
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2469
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2473
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2479
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2483
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2487
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2491
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2495
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2499
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2503
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2507
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2511
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2515
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2519
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2523
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2529
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2533
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2539
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2544
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2550
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2554
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2560
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2565
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2569
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2573
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2583
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2588
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2595
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 416:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2602
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 417:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2609
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 418:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2618
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 419:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2629
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2640
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2644
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2648
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2652
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 424:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2658
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 425:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2668
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 426:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2679
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 427:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2690
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 428:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2701
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2710
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2719
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2723
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2727
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2733
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2737
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2741
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2745
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2749
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2753
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2759
		{
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2760
		{
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2764
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2768
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2773
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2780
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2784
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2791
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2801
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2805
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2810
		{
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2811
		{
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2815
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2819
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2823
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2829
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2833
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2837
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2842
		{
			setAllowComments(yylex, true)
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2846
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.bytes2 = nil
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2856
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2862
		{
			yyVAL.str = UnionStr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2866
		{
			yyVAL.str = UnionAllStr
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2870
		{
			yyVAL.str = UnionDistinctStr
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2875
		{
			yyVAL.str = ""
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2879
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2883
		{
			yyVAL.str = SQLCacheStr
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2888
		{
			yyVAL.str = ""
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2892
		{
			yyVAL.str = DistinctStr
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2897
		{
			yyVAL.str = ""
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2901
		{
			yyVAL.str = StraightJoinHint
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2906
		{
			yyVAL.selectExprs = nil
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2910
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2916
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2920
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2926
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2930
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2934
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 480:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2938
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2943
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2947
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2951
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2958
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2963
		{
			yyVAL.overExpr = nil
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2967
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 488:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2971
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2975
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 490:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2979
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2984
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2988
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2994
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2998
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3008
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3012
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3016
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3021
		{
			yyVAL.strs = []string{}
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3025
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3031
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3035
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3041
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3045
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3049
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3053
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3057
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3061
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3065
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3069
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3075
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 513:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3079
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3085
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3090
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3094
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3100
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3104
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3117
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3121
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3125
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3129
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3135
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3137
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3141
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3143
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3147
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3149
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3152
		{
			yyVAL.empty = struct{}{}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3154
		{
			yyVAL.empty = struct{}{}
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3157
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3161
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3165
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3172
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3178
		{
			yyVAL.str = JoinStr
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3182
		{
			yyVAL.str = JoinStr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3186
		{
			yyVAL.str = JoinStr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3192
		{
			yyVAL.str = StraightJoinStr
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3198
		{
			yyVAL.str = LeftJoinStr
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3202
		{
			yyVAL.str = LeftJoinStr
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3206
		{
			yyVAL.str = RightJoinStr
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3210
		{
			yyVAL.str = RightJoinStr
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3216
		{
			yyVAL.str = NaturalJoinStr
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3220
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3230
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3234
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3240
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3244
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3249
		{
			yyVAL.indexHints = nil
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3253
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3257
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 553:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3261
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3266
		{
			yyVAL.expr = nil
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3270
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3275
		{
			yyVAL.columns = nil
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3279
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3285
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3289
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3293
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3297
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3301
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3305
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3309
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3313
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3319
		{
			yyVAL.str = ""
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3323
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3329
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3333
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3339
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3343
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3347
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3351
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3355
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3359
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3363
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3367
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3371
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3375
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3379
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 581:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3383
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3387
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3392
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3396
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3400
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3406
		{
			yyVAL.str = IsNullStr
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3410
		{
			yyVAL.str = IsNotNullStr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3414
		{
			yyVAL.str = IsTrueStr
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3418
		{
			yyVAL.str = IsNotTrueStr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3422
		{
			yyVAL.str = IsFalseStr
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3426
		{
			yyVAL.str = IsNotFalseStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3432
		{
			yyVAL.str = EqualStr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3436
		{
			yyVAL.str = LessThanStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3440
		{
			yyVAL.str = GreaterThanStr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3444
		{
			yyVAL.str = LessEqualStr
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3448
		{
			yyVAL.str = GreaterEqualStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3452
		{
			yyVAL.str = NotEqualStr
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3456
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3460
		{
			yyVAL.str = PosixRegexStr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3464
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3468
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3472
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3477
		{
			yyVAL.expr = nil
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3481
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3487
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3491
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3495
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3501
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3507
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3511
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3517
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3521
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3525
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3529
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3533
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3537
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3541
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3545
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3549
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3553
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3557
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3561
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3565
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3569
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3573
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3577
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3581
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3585
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3589
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3593
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3597
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 632:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3601
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3605
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3609
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3613
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3621
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3635
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3639
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3643
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3651
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3659
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3667
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3671
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3681
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3685
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3689
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3693
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3697
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 653:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3701
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3705
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3715
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3719
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 657:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3723
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 658:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3728
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 659:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3732
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 660:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3736
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 661:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3740
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 662:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3744
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 663:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3748
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 664:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3752
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 665:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3756
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 666:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3760
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 667:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3764
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 668:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3768
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 669:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3772
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 670:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3776
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 671:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3780
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3784
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3788
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3793
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3797
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3801
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3805
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3816
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3820
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3824
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3828
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3837
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3842
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3847
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3852
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3856
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3870
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3874
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3878
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3882
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3888
		{
			yyVAL.str = ""
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3892
		{
			yyVAL.str = BooleanModeStr
		}
	case 696:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3896
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 697:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3900
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3904
		{
			yyVAL.str = QueryExpansionStr
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3910
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3914
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3920
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3924
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3928
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3932
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3936
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3940
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3946
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3950
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3970
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3974
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3978
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3982
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3986
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3990
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3994
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3998
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4002
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4006
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4010
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4014
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4018
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4022
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4026
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4030
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4036
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4040
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4044
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4048
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4052
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4056
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4060
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4064
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4069
		{
			yyVAL.expr = nil
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4073
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4078
		{
			yyVAL.str = string("")
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4082
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4088
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4092
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4098
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4103
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4105
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.expr = nil
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4112
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4118
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4122
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4130
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4136
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4146
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4151
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4156
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4160
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4164
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4168
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4172
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4176
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4180
		{
			yyVAL.expr = &NullVal{}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4186
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4190
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4195
		{
			yyVAL.exprs = nil
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4199
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4204
		{
			yyVAL.expr = nil
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4208
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4214
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4218
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4224
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4229
		{
			yyVAL.orderBy = nil
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4233
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4239
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4243
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4249
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4254
		{
			yyVAL.str = AscScr
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4258
		{
			yyVAL.str = AscScr
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4262
		{
			yyVAL.str = DescScr
		}
	case 780:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4267
		{
			yyVAL.limit = nil
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4271
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 782:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4275
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4279
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4284
		{
			yyVAL.str = ""
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4288
		{
			yyVAL.str = ForUpdateStr
		}
	case 786:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4292
		{
			yyVAL.str = ShareModeStr
		}
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4305
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4309
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4313
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 790:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4318
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 791:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4322
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 792:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4326
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4333
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4337
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4343
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4347
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4351
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4355
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4360
		{
			yyVAL.updateExprs = nil
		}
	case 800:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4364
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4370
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4374
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4380
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4384
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4390
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4396
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4406
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4410
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4416
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4422
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4426
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4432
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4436
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4440
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 815:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4445
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4449
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4455
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4461
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4468
		{
			yyVAL.bytes = []byte("charset")
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4475
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4479
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4483
		{
			yyVAL.expr = &Default{}
		}
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4488
		{
			yyVAL.empty = struct{}{}
		}
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4490
		{
			yyVAL.empty = struct{}{}
		}
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4493
		{
			yyVAL.str = ""
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4495
		{
			yyVAL.str = IgnoreStr
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4499
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4506
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4510
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4514
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4518
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4524
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4528
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4533
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4540
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4546
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4550
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4554
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4560
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4564
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4568
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4574
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4578
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 848:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4585
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4592
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4596
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4603
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4609
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4613
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4790
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4799
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
