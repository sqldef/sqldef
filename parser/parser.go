// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const POSIX_REGEX = 57435
const POSIX_REGEX_CI = 57436
const POSIX_NOT_REGEX = 57437
const POSIX_NOT_REGEX_CI = 57438
const SHIFT_LEFT = 57439
const SHIFT_RIGHT = 57440
const DIV = 57441
const MOD = 57442
const UNARY = 57443
const COLLATE = 57444
const BINARY = 57445
const UNDERSCORE_BINARY = 57446
const INTERVAL = 57447
const JSON_EXTRACT_OP = 57448
const JSON_UNQUOTE_EXTRACT_OP = 57449
const CREATE = 57450
const ALTER = 57451
const DROP = 57452
const RENAME = 57453
const ANALYZE = 57454
const ADD = 57455
const SCHEMA = 57456
const TABLE = 57457
const INDEX = 57458
const MATERIALIZED = 57459
const VIEW = 57460
const TO = 57461
const IGNORE = 57462
const IF = 57463
const PRIMARY = 57464
const COLUMN = 57465
const CONSTRAINT = 57466
const REFERENCES = 57467
const SPATIAL = 57468
const FULLTEXT = 57469
const FOREIGN = 57470
const KEY_BLOCK_SIZE = 57471
const POLICY = 57472
const WHILE = 57473
const UNIQUE = 57474
const KEY = 57475
const SHOW = 57476
const DESCRIBE = 57477
const EXPLAIN = 57478
const DATE = 57479
const ESCAPE = 57480
const REPAIR = 57481
const OPTIMIZE = 57482
const TRUNCATE = 57483
const MAXVALUE = 57484
const PARTITION = 57485
const REORGANIZE = 57486
const LESS = 57487
const THAN = 57488
const PROCEDURE = 57489
const TRIGGER = 57490
const TYPE = 57491
const STATUS = 57492
const VARIABLES = 57493
const RESTRICT = 57494
const CASCADE = 57495
const NO = 57496
const ACTION = 57497
const PERMISSIVE = 57498
const RESTRICTIVE = 57499
const PUBLIC = 57500
const CURRENT_USER = 57501
const SESSION_USER = 57502
const PAD_INDEX = 57503
const FILLFACTOR = 57504
const IGNORE_DUP_KEY = 57505
const STATISTICS_NORECOMPUTE = 57506
const STATISTICS_INCREMENTAL = 57507
const ALLOW_ROW_LOCKS = 57508
const ALLOW_PAGE_LOCKS = 57509
const BEFORE = 57510
const AFTER = 57511
const EACH = 57512
const ROW = 57513
const SCROLL = 57514
const CURSOR = 57515
const OPEN = 57516
const CLOSE = 57517
const FETCH = 57518
const PRIOR = 57519
const FIRST = 57520
const LAST = 57521
const DEALLOCATE = 57522
const INSTEAD = 57523
const OF = 57524
const DEFERRABLE = 57525
const INITIALLY = 57526
const IMMEDIATE = 57527
const DEFERRED = 57528
const CONCURRENTLY = 57529
const SQL = 57530
const SECURITY = 57531
const BEGIN = 57532
const START = 57533
const TRANSACTION = 57534
const COMMIT = 57535
const ROLLBACK = 57536
const BIT = 57537
const TINYINT = 57538
const SMALLINT = 57539
const SMALLSERIAL = 57540
const MEDIUMINT = 57541
const INT = 57542
const INTEGER = 57543
const SERIAL = 57544
const BIGINT = 57545
const BIGSERIAL = 57546
const INTNUM = 57547
const REAL = 57548
const DOUBLE = 57549
const PRECISION = 57550
const FLOAT_TYPE = 57551
const DECIMAL = 57552
const NUMERIC = 57553
const SMALLMONEY = 57554
const MONEY = 57555
const TIME = 57556
const TIMESTAMP = 57557
const DATETIME = 57558
const YEAR = 57559
const DATETIMEOFFSET = 57560
const DATETIME2 = 57561
const SMALLDATETIME = 57562
const CHAR = 57563
const VARCHAR = 57564
const VARYING = 57565
const BOOL = 57566
const CHARACTER = 57567
const VARBINARY = 57568
const NCHAR = 57569
const NVARCHAR = 57570
const NTEXT = 57571
const UUID = 57572
const TEXT = 57573
const TINYTEXT = 57574
const MEDIUMTEXT = 57575
const LONGTEXT = 57576
const CITEXT = 57577
const BLOB = 57578
const TINYBLOB = 57579
const MEDIUMBLOB = 57580
const LONGBLOB = 57581
const JSON = 57582
const JSONB = 57583
const ENUM = 57584
const GEOMETRY = 57585
const POINT = 57586
const LINESTRING = 57587
const POLYGON = 57588
const GEOMETRYCOLLECTION = 57589
const MULTIPOINT = 57590
const MULTILINESTRING = 57591
const MULTIPOLYGON = 57592
const VARIADIC = 57593
const ARRAY = 57594
const NOW = 57595
const GETDATE = 57596
const BPCHAR = 57597
const TEXT_PATTERN_OPS = 57598
const NULLX = 57599
const AUTO_INCREMENT = 57600
const APPROXNUM = 57601
const SIGNED = 57602
const UNSIGNED = 57603
const ZEROFILL = 57604
const ZONE = 57605
const AUTOINCREMENT = 57606
const DATABASES = 57607
const TABLES = 57608
const VSCHEMA_TABLES = 57609
const EXTENDED = 57610
const FULL = 57611
const PROCESSLIST = 57612
const NAMES = 57613
const CHARSET = 57614
const GLOBAL = 57615
const SESSION = 57616
const ISOLATION = 57617
const LEVEL = 57618
const READ = 57619
const WRITE = 57620
const ONLY = 57621
const REPEATABLE = 57622
const COMMITTED = 57623
const UNCOMMITTED = 57624
const SERIALIZABLE = 57625
const NEW = 57626
const CONCAT_NULL_YIELDS_NULL = 57627
const CURSOR_CLOSE_ON_COMMIT = 57628
const QUOTED_IDENTIFIER = 57629
const ARITHABORT = 57630
const FMTONLY = 57631
const NOCOUNT = 57632
const NOEXEC = 57633
const NUMERIC_ROUNDABORT = 57634
const ANSI_DEFAULTS = 57635
const ANSI_NULL_DFLT_OFF = 57636
const ANSI_NULL_DFLT_ON = 57637
const ANSI_NULLS = 57638
const ANSI_PADDING = 57639
const ANSI_WARNINGS = 57640
const FORCEPLAN = 57641
const SHOWPLAN_ALL = 57642
const SHOWPLAN_TEXT = 57643
const SHOWPLAN_XML = 57644
const IMPLICIT_TRANSACTIONS = 57645
const REMOTE_PROC_TRANSACTIONS = 57646
const XACT_ABORT = 57647
const CURRENT_TIMESTAMP = 57648
const DATABASE = 57649
const CURRENT_DATE = 57650
const CURRENT_TIME = 57651
const LOCALTIME = 57652
const LOCALTIMESTAMP = 57653
const UTC_DATE = 57654
const UTC_TIME = 57655
const UTC_TIMESTAMP = 57656
const REPLACE = 57657
const CONVERT = 57658
const CAST = 57659
const SUBSTR = 57660
const SUBSTRING = 57661
const GROUP_CONCAT = 57662
const SEPARATOR = 57663
const INHERIT = 57664
const LEAD = 57665
const LAG = 57666
const MATCH = 57667
const AGAINST = 57668
const BOOLEAN = 57669
const LANGUAGE = 57670
const WITH = 57671
const WITHOUT = 57672
const PARSER = 57673
const QUERY = 57674
const EXPANSION = 57675
const UNUSED = 57676
const VIRTUAL = 57677
const STORED = 57678
const GENERATED = 57679
const ALWAYS = 57680
const IDENTITY = 57681
const SEQUENCE = 57682
const INCREMENT = 57683
const MINVALUE = 57684
const CACHE = 57685
const CYCLE = 57686
const OWNED = 57687
const NONE = 57688
const CLUSTERED = 57689
const NONCLUSTERED = 57690
const REPLICATION = 57691
const COLUMNSTORE = 57692
const INCLUDE = 57693
const HOLDLOCK = 57694
const NOLOCK = 57695
const NOWAIT = 57696
const PAGLOCK = 57697
const ROWLOCK = 57698
const TABLELOCK = 57699
const DEFINER = 57700
const INVOKER = 57701
const TYPECAST = 57702
const CHECK = 57703
const OVER = 57704

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	133, 399,
	-2, 148,
	-1, 399,
	61, 369,
	-2, 366,
	-1, 427,
	122, 795,
	-2, 239,
	-1, 447,
	122, 794,
	-2, 789,
	-1, 544,
	122, 795,
	-2, 239,
	-1, 566,
	269, 804,
	-2, 702,
	-1, 614,
	269, 804,
	-2, 439,
	-1, 646,
	5, 36,
	-2, 13,
	-1, 652,
	5, 36,
	-2, 15,
	-1, 790,
	269, 804,
	-2, 439,
	-1, 950,
	122, 797,
	-2, 793,
	-1, 960,
	269, 804,
	-2, 308,
	-1, 1035,
	269, 804,
	-2, 439,
	-1, 1095,
	60, 99,
	-2, 197,
	-1, 1098,
	60, 99,
	-2, 197,
	-1, 1154,
	5, 37,
	-2, 570,
	-1, 1229,
	5, 36,
	-2, 14,
	-1, 1284,
	60, 99,
	-2, 168,
	-1, 1416,
	89, 791,
	-2, 779,
	-1, 1505,
	57, 50,
	59, 50,
	-2, 52,
	-1, 1671,
	5, 36,
	-2, 750,
	-1, 1696,
	5, 36,
	-2, 59,
	-1, 1769,
	5, 37,
	-2, 751,
	-1, 1800,
	5, 36,
	-2, 753,
	-1, 1824,
	5, 37,
	-2, 754,
}

const yyPrivate = 57344

const yyLast = 9364

var yyAct = [...]int16{
	546, 1600, 1689, 1778, 1618, 527, 1726, 556, 1727, 753,
	1723, 1662, 30, 659, 1528, 1047, 1587, 39, 40, 1010,
	1526, 1601, 1386, 1540, 1515, 1397, 57, 1541, 1694, 1681,
	1410, 63, 63, 63, 1530, 125, 128, 1066, 1593, 867,
	1063, 1247, 1413, 1244, 1218, 1407, 1393, 1150, 1402, 879,
	1223, 26, 461, 681, 1043, 855, 30, 1396, 391, 1142,
	894, 959, 752, 934, 1283, 518, 993, 42, 840, 640,
	641, 204, 56, 949, 605, 996, 388, 1028, 538, 1007,
	907, 222, 813, 188, 1213, 58, 844, 64, 59, 780,
	525, 1078, 504, 400, 1202, 394, 143, 236, 526, 153,
	424, 133, 145, 237, 123, 124, 426, 47, 432, 1324,
	171, 148, 450, 1068, 817, 709, 710, 711, 712, 713,
	714, 715, 708, 190, 947, 719, 9, 511, 228, 1779,
	1780, 1781, 1782, 1783, 1784, 1203, 1300, 512, 186, 1497,
	719, 63, 33, 771, 129, 606, 131, 1044, 385, 206,
	207, 208, 209, 708, 142, 589, 719, 232, 233, 1102,
	395, 49, 401, 402, 799, 1106, 687, 244, 592, 50,
	51, 422, 44, 412, 45, 227, 1477, 1826, 230, 1759,
	234, 235, 554, 241, 1348, 1349, 1822, 443, 1015, 1016,
	383, 377, 1715, 1110, 649, 380, 1091, 1081, 1080, 1111,
	1758, 43, 224, 1470, 150, 473, 474, 1690, 1082, 1814,
	649, 1381, 1091, 1081, 1080, 245, 1145, 1714, 247, 1338,
	1131, 1083, 1463, 52, 1082, 1748, 1700, 480, 1447, 1699,
	43, 418, 1701, 1749, 1750, 189, 43, 1083, 44, 416,
	45, 1629, 1630, 1628, 493, 716, 717, 709, 710, 711,
	712, 713, 714, 715, 708, 830, 440, 719, 829, 465,
	466, 467, 468, 452, 1542, 436, 1543, 454, 192, 747,
	456, 837, 459, 460, 479, 205, 1813, 1004, 483, 711,
	712, 713, 714, 715, 708, 434, 1332, 719, 1657, 197,
	1321, 633, 1640, 707, 706, 716, 717, 709, 710, 711,
	712, 713, 714, 715, 708, 632, 194, 719, 437, 43,
	439, 438, 43, 220, 43, 43, 1166, 43, 1164, 217,
	472, 469, 1754, 1641, 246, 43, 1089, 530, 1429, 43,
	1233, 130, 126, 36, 1708, 1707, 1088, 33, 1644, 398,
	1560, 1645, 1089, 492, 1273, 491, 864, 193, 447, 242,
	45, 1536, 1088, 707, 706, 716, 717, 709, 710, 711,
	712, 713, 714, 715, 708, 43, 513, 719, 1642, 446,
	401, 402, 1232, 1557, 1062, 885, 1476, 895, 1478, 1084,
	1085, 1087, 385, 1594, 718, 1086, 649, 694, 1091, 1081,
	1080, 505, 655, 656, 1797, 1084, 1085, 1087, 33, 718,
	1082, 1086, 33, 37, 1143, 1294, 841, 689, 43, 862,
	591, 399, 43, 1083, 666, 718, 195, 688, 167, 200,
	415, 165, 202, 414, 501, 496, 443, 684, 168, 166,
	135, 667, 1323, 498, 135, 168, 409, 506, 221, 212,
	213, 214, 215, 216, 396, 32, 510, 1566, 1343, 1105,
	649, 698, 1091, 1081, 1080, 1821, 1350, 1752, 718, 1559,
	33, 503, 800, 48, 1082, 1103, 1104, 205, 1637, 27,
	33, 134, 31, 146, 1579, 848, 53, 1083, 485, 497,
	127, 38, 643, 1111, 1469, 594, 679, 661, 1693, 669,
	514, 506, 660, 166, 502, 664, 1692, 668, 1274, 1275,
	1276, 385, 588, 1691, 436, 590, 607, 619, 1713, 621,
	421, 35, 624, 625, 149, 34, 718, 505, 1089, 46,
	1092, 679, 595, 593, 434, 499, 602, 620, 1088, 1818,
	379, 644, 604, 471, 475, 1658, 1092, 41, 657, 477,
	407, 1772, 167, 672, 455, 1660, 718, 646, 160, 652,
	159, 1481, 163, 164, 166, 1354, 6, 7, 161, 168,
	642, 1545, 686, 682, 683, 685, 718, 1356, 1638, 1619,
	1621, 1084, 1085, 1087, 737, 738, 647, 1086, 647, 1531,
	1360, 1152, 1089, 397, 1638, 405, 406, 693, 1148, 1032,
	662, 751, 1088, 651, 658, 663, 136, 137, 660, 670,
	136, 137, 750, 617, 1351, 141, 690, 63, 446, 138,
	1371, 797, 167, 138, 695, 44, 627, 1533, 385, 748,
	463, 462, 697, 1340, 816, 1702, 718, 445, 444, 168,
	697, 698, 1679, 808, 1544, 1084, 1085, 1087, 643, 834,
	1122, 1086, 401, 402, 1705, 1121, 660, 914, 1120, 647,
	696, 695, 1620, 795, 1119, 32, 1196, 1118, 1117, 839,
	824, 912, 913, 911, 446, 43, 861, 697, 785, 786,
	863, 1116, 43, 825, 628, 696, 695, 505, 1100, 25,
	33, 1114, 1098, 793, 997, 887, 1183, 1064, 835, 591,
	997, 393, 697, 505, 815, 821, 823, 899, 901, 902,
	847, 826, 434, 828, 803, 900, 883, 833, 1097, 908,
	393, 144, 1092, 846, 1529, 139, 642, 773, 774, 775,
	776, 777, 778, 779, 884, 392, 1228, 1096, 1132, 1133,
	1134, 393, 20, 404, 15, 1578, 939, 1577, 944, 944,
	882, 938, 647, 1301, 910, 886, 946, 16, 411, 23,
	393, 385, 385, 1475, 1352, 1353, 1355, 1357, 1358, 1474,
	1638, 858, 1471, 892, 1302, 17, 18, 939, 811, 878,
	810, 1473, 998, 453, 868, 453, 1092, 1029, 1158, 198,
	1157, 1303, 1575, 889, 888, 609, 611, 162, 870, 868,
	1299, 880, 881, 948, 951, 1011, 453, 820, 820, 820,
	696, 695, 410, 870, 930, 1373, 933, 786, 932, 1301,
	458, 1472, 1420, 33, 457, 1031, 1019, 697, 955, 1030,
	446, 832, 43, 1030, 1790, 649, 647, 950, 942, 945,
	1302, 696, 695, 831, 43, 1174, 956, 957, 601, 643,
	478, 476, 992, 696, 695, 449, 1372, 647, 697, 1011,
	733, 1151, 201, 677, 680, 203, 447, 1065, 45, 404,
	697, 1095, 44, 869, 45, 749, 696, 695, 1061, 1005,
	33, 1008, 1009, 1006, 1115, 990, 991, 404, 869, 1036,
	44, 1037, 45, 697, 827, 470, 696, 695, 1531, 696,
	695, 505, 1021, 1428, 1023, 871, 872, 873, 874, 875,
	876, 877, 417, 697, 1392, 1108, 697, 44, 1045, 45,
	871, 872, 873, 874, 875, 876, 877, 642, 940, 908,
	696, 695, 798, 1549, 44, 1094, 1533, 1342, 1503, 696,
	695, 404, 32, 246, 1051, 698, 749, 697, 1112, 820,
	820, 696, 695, 820, 820, 820, 697, 649, 44, 940,
	1533, 937, 19, 33, 44, 1548, 45, 33, 697, 31,
	44, 1127, 45, 841, 21, 22, 935, 24, 936, 33,
	626, 1031, 820, 820, 820, 820, 856, 698, 698, 707,
	706, 716, 717, 709, 710, 711, 712, 713, 714, 715,
	708, 677, 1138, 719, 1807, 1806, 809, 820, 587, 404,
	586, 649, 33, 1091, 1081, 1080, 515, 1720, 698, 822,
	856, 1805, 1192, 1793, 1588, 1082, 1747, 698, 748, 1771,
	698, 446, 1192, 1716, 676, 1648, 1512, 698, 1083, 909,
	1030, 676, 1562, 385, 1517, 1520, 1521, 1522, 1518, 408,
	1519, 1523, 643, 505, 1682, 1683, 1163, 33, 547, 943,
	545, 549, 550, 551, 552, 1678, 1167, 1214, 548, 553,
	676, 1561, 1678, 866, 856, 1488, 676, 1443, 1509, 557,
	1597, 1182, 1508, 1180, 1194, 948, 1192, 1442, 1109, 804,
	428, 429, 430, 1243, 1588, 1269, 1270, 1271, 433, 431,
	441, 442, 1439, 1438, 1363, 1210, 1284, 1095, 1095, 1284,
	1095, 1095, 505, 505, 1512, 1237, 1206, 1204, 1295, 950,
	1282, 1211, 1298, 1212, 1510, 1226, 1508, 1767, 1209, 1225,
	642, 1216, 1227, 1229, 941, 841, 1011, 505, 1207, 1208,
	1199, 1217, 1024, 1089, 676, 1433, 676, 1432, 1198, 1201,
	952, 954, 1281, 1088, 647, 1311, 1178, 1238, 1724, 385,
	1297, 1678, 647, 385, 1277, 1280, 1000, 1001, 1002, 1040,
	1003, 1285, 1286, 1287, 1288, 1289, 1239, 1240, 1241, 1024,
	1245, 123, 1290, 1291, 676, 1364, 820, 1309, 1310, 1231,
	1236, 1192, 1186, 1039, 1013, 649, 1084, 1085, 1087, 1314,
	1038, 1322, 1086, 1344, 1177, 1326, 1020, 1312, 836, 1317,
	812, 1022, 805, 1025, 1026, 676, 1313, 820, 802, 1033,
	623, 1034, 1669, 1024, 698, 246, 660, 1670, 820, 1327,
	1192, 1191, 1329, 622, 446, 950, 1325, 676, 1129, 1367,
	856, 1046, 403, 1331, 1059, 618, 1333, 404, 857, 909,
	1130, 1376, 953, 698, 63, 649, 385, 856, 1014, 1339,
	676, 893, 718, 953, 1390, 1304, 1305, 1306, 1307, 1308,
	676, 675, 1395, 636, 635, 630, 631, 630, 629, 1176,
	1405, 1368, 490, 1421, 1375, 1511, 43, 1799, 649, 1128,
	1091, 1081, 1080, 55, 54, 1284, 435, 440, 649, 1394,
	1512, 1391, 1082, 505, 505, 1362, 1316, 404, 404, 1093,
	489, 1512, 490, 490, 1627, 1083, 1537, 1403, 1160, 1161,
	1374, 1162, 1024, 1159, 856, 676, 1165, 1175, 801, 638,
	637, 494, 634, 1742, 1740, 1146, 1147, 1092, 1168, 1169,
	1724, 246, 1170, 1171, 1711, 1172, 1173, 1430, 1576, 437,
	404, 439, 438, 1154, 1155, 1156, 1385, 1387, 194, 1388,
	1436, 1236, 1682, 1683, 1794, 1293, 1292, 1215, 223, 1704,
	1703, 385, 1126, 1434, 1435, 1125, 1101, 1042, 1440, 1441,
	1041, 1018, 1448, 890, 860, 1755, 838, 794, 692, 645,
	1179, 613, 612, 1419, 610, 597, 1185, 516, 481, 218,
	423, 1426, 1465, 1187, 1188, 419, 1189, 1190, 390, 211,
	1467, 1468, 210, 1326, 1535, 199, 1466, 225, 226, 385,
	1089, 1200, 11, 517, 1099, 1107, 1547, 1685, 1195, 639,
	1088, 1495, 1498, 43, 43, 1494, 29, 482, 1482, 598,
	229, 132, 1379, 1688, 520, 1501, 1687, 505, 1564, 1506,
	1504, 1505, 1609, 1608, 1612, 1757, 1610, 1534, 1485, 1613,
	1553, 1611, 1555, 1489, 1538, 1586, 1491, 1614, 1496, 1521,
	1522, 767, 1551, 1084, 1085, 1087, 1554, 1056, 1057, 1086,
	151, 1556, 389, 1550, 464, 600, 1315, 1765, 1552, 1565,
	378, 1445, 1219, 880, 881, 243, 596, 1525, 1517, 1520,
	1521, 1522, 1518, 647, 1519, 1523, 1060, 1220, 1053, 599,
	1500, 1054, 1624, 488, 486, 608, 850, 1563, 851, 852,
	853, 484, 939, 614, 615, 616, 140, 1602, 994, 1048,
	1431, 849, 999, 854, 654, 509, 43, 1764, 1598, 699,
	1581, 1487, 1479, 1049, 841, 1490, 63, 1763, 385, 1604,
	1605, 1387, 1607, 1387, 1596, 1722, 385, 1214, 1615, 238,
	239, 240, 1595, 1636, 650, 1425, 650, 1599, 1424, 1423,
	1365, 820, 1405, 1626, 1369, 1422, 1623, 754, 1625, 1400,
	1603, 1347, 1346, 1606, 43, 43, 765, 1011, 508, 507,
	1124, 1345, 1815, 691, 43, 1532, 1370, 1123, 1634, 413,
	955, 732, 734, 735, 736, 843, 1659, 1361, 845, 1635,
	1507, 665, 859, 8, 1092, 1, 796, 1246, 13, 1666,
	1568, 12, 1236, 1592, 1377, 1650, 614, 1677, 1675, 647,
	1661, 231, 1149, 1695, 818, 746, 542, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 1686, 766, 1643, 768,
	769, 770, 772, 772, 772, 772, 772, 772, 772, 772,
	1583, 789, 790, 791, 792, 1697, 1671, 1558, 528, 1777,
	1444, 385, 1580, 1404, 1706, 1242, 1383, 1500, 1236, 1500,
	939, 1725, 1665, 1732, 1695, 1602, 1160, 1272, 1728, 939,
	448, 1674, 173, 1676, 1602, 647, 43, 1696, 1197, 420,
	43, 43, 14, 1380, 940, 43, 43, 43, 43, 43,
	1737, 891, 1733, 1717, 1388, 896, 897, 1616, 1230, 1484,
	43, 1486, 1011, 614, 1532, 1449, 647, 1450, 1451, 653,
	650, 1452, 1453, 1455, 1457, 1459, 487, 1296, 865, 1400,
	1719, 1756, 1761, 1651, 678, 1730, 1766, 157, 147, 671,
	381, 660, 1753, 1734, 660, 660, 660, 1480, 1789, 43,
	1774, 1664, 1592, 1388, 1776, 1387, 28, 1785, 1786, 1787,
	1735, 1788, 1736, 10, 647, 754, 1113, 158, 958, 989,
	156, 43, 1802, 1803, 1796, 1728, 1798, 1791, 155, 154,
	43, 152, 451, 191, 196, 219, 62, 60, 61, 65,
	1567, 1804, 1408, 1811, 1524, 1546, 495, 1027, 731, 1698,
	1415, 1731, 1222, 1762, 650, 1775, 1816, 1728, 1721, 1017,
	1181, 1819, 1709, 1710, 1820, 764, 939, 1823, 995, 1825,
	1500, 1602, 529, 898, 541, 755, 540, 539, 1668, 700,
	1399, 1502, 1584, 1800, 1516, 1400, 1585, 1514, 1513, 1684,
	1400, 1400, 1400, 1400, 1400, 649, 1680, 1091, 1081, 1080,
	1574, 1460, 940, 1398, 1462, 1400, 1656, 1055, 1378, 1082,
	1079, 940, 647, 842, 1817, 1012, 1058, 1236, 1387, 1592,
	1582, 5, 1083, 1090, 1077, 183, 4, 3, 1076, 1075,
	1074, 186, 187, 1072, 649, 1073, 1091, 1081, 1080, 1070,
	1071, 1069, 698, 647, 1035, 1050, 648, 2, 1082, 0,
	0, 0, 0, 0, 1388, 1500, 174, 0, 1646, 1647,
	0, 1083, 1052, 0, 1617, 0, 1400, 0, 0, 0,
	0, 181, 0, 169, 0, 1400, 0, 1389, 0, 1532,
	0, 170, 0, 0, 0, 0, 707, 706, 716, 717,
	709, 710, 711, 712, 713, 714, 715, 708, 0, 0,
	719, 0, 1649, 0, 0, 0, 0, 1652, 1653, 1654,
	1655, 0, 0, 1153, 0, 0, 739, 740, 741, 742,
	743, 744, 745, 0, 0, 0, 0, 1089, 0, 0,
	0, 649, 0, 1091, 1081, 1080, 0, 1088, 0, 177,
	0, 172, 182, 0, 0, 1082, 0, 0, 940, 179,
	178, 0, 0, 0, 0, 0, 0, 1184, 1083, 0,
	0, 0, 0, 0, 0, 0, 1089, 0, 1035, 0,
	0, 0, 1193, 0, 0, 0, 1088, 0, 0, 0,
	1084, 1085, 1087, 0, 0, 0, 1086, 0, 1458, 698,
	0, 0, 0, 0, 1712, 0, 0, 0, 0, 1718,
	0, 0, 649, 0, 1091, 1081, 1080, 0, 1221, 1224,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 1084,
	1085, 1087, 0, 0, 1234, 1086, 0, 0, 0, 1083,
	0, 0, 1746, 707, 706, 716, 717, 709, 710, 711,
	712, 713, 714, 715, 708, 0, 0, 719, 0, 1279,
	0, 0, 0, 0, 0, 0, 0, 1760, 0, 0,
	0, 0, 0, 1089, 0, 0, 0, 1768, 1769, 1770,
	0, 1773, 650, 1088, 0, 175, 0, 0, 0, 0,
	650, 176, 0, 0, 0, 903, 0, 0, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 1085, 1087, 1330,
	0, 1092, 1086, 1808, 1809, 1810, 0, 0, 0, 0,
	0, 0, 0, 0, 1089, 649, 0, 1091, 1081, 1080,
	0, 0, 0, 1341, 1088, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 184, 1824, 185, 1456, 0, 718,
	1092, 0, 1083, 523, 0, 0, 0, 0, 0, 1235,
	0, 0, 0, 0, 1366, 0, 0, 0, 180, 0,
	522, 0, 0, 0, 0, 521, 0, 1084, 1085, 1087,
	0, 1382, 567, 1086, 568, 0, 0, 0, 698, 0,
	0, 0, 558, 559, 0, 0, 0, 0, 1639, 0,
	0, 0, 404, 0, 0, 447, 547, 544, 545, 549,
	550, 551, 552, 1359, 0, 0, 548, 553, 441, 442,
	524, 0, 0, 0, 0, 519, 536, 0, 566, 0,
	0, 0, 707, 706, 716, 717, 709, 710, 711, 712,
	713, 714, 715, 708, 0, 0, 719, 1092, 0, 0,
	0, 1401, 533, 534, 0, 0, 0, 1089, 583, 0,
	535, 0, 0, 960, 532, 537, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1135,
	1136, 1137, 581, 0, 0, 0, 0, 1139, 1140, 1141,
	0, 0, 1464, 0, 0, 1590, 718, 0, 962, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 0, 0,
	1084, 1085, 1087, 0, 0, 0, 1086, 0, 1092, 0,
	543, 0, 1492, 1493, 1224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 739, 707, 706, 716, 717,
	709, 710, 711, 712, 713, 714, 715, 708, 1461, 0,
	719, 0, 0, 0, 0, 0, 971, 977, 975, 0,
	0, 972, 0, 0, 970, 0, 1499, 979, 0, 0,
	978, 964, 974, 976, 973, 968, 0, 963, 0, 981,
	980, 982, 961, 984, 0, 0, 0, 988, 985, 987,
	986, 569, 983, 0, 0, 0, 0, 0, 0, 1318,
	0, 965, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 1527, 585, 0, 570, 571, 0, 0, 0, 0,
	0, 967, 969, 707, 706, 716, 717, 709, 710, 711,
	712, 713, 714, 715, 708, 0, 0, 719, 0, 0,
	0, 0, 0, 0, 0, 555, 0, 1589, 0, 0,
	0, 1092, 706, 716, 717, 709, 710, 711, 712, 713,
	714, 715, 708, 1278, 0, 719, 0, 572, 582, 578,
	579, 576, 577, 575, 574, 573, 584, 560, 561, 562,
	563, 565, 0, 0, 445, 444, 564, 0, 0, 0,
	0, 0, 0, 0, 1633, 0, 0, 0, 0, 1235,
	0, 0, 0, 0, 0, 718, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1401, 1319, 1320,
	0, 580, 1401, 1401, 1401, 1401, 1401, 0, 0, 0,
	0, 1663, 0, 0, 0, 0, 0, 1527, 0, 1622,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1334, 1335, 1336, 1337, 702, 0, 705, 0, 0, 0,
	0, 0, 720, 721, 722, 723, 724, 725, 726, 0,
	703, 704, 701, 727, 728, 729, 730, 707, 706, 716,
	717, 709, 710, 711, 712, 713, 714, 715, 708, 0,
	0, 719, 1454, 698, 0, 0, 0, 0, 1401, 0,
	0, 0, 0, 1672, 1673, 0, 0, 1401, 0, 718,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1738,
	1144, 0, 1739, 0, 650, 1741, 0, 707, 706, 716,
	717, 709, 710, 711, 712, 713, 714, 715, 708, 0,
	781, 719, 1751, 0, 707, 706, 716, 717, 709, 710,
	711, 712, 713, 714, 715, 708, 0, 0, 719, 0,
	1663, 0, 0, 0, 0, 0, 0, 0, 0, 754,
	1729, 0, 650, 0, 0, 783, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 718, 0, 781, 0,
	0, 1743, 1744, 1745, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1795, 754, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 718, 0, 0, 0, 0, 0,
	0, 0, 0, 783, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 0, 116, 117, 0, 118, 119, 120,
	122, 121, 0, 931, 784, 0, 0, 0, 0, 0,
	0, 0, 66, 782, 0, 0, 0, 1729, 788, 787,
	1801, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 0, 0, 649, 0, 1091, 1081, 1080, 0, 1729,
	0, 650, 784, 0, 0, 0, 0, 1082, 0, 0,
	66, 782, 0, 0, 0, 0, 788, 787, 0, 1569,
	1083, 1570, 0, 1571, 0, 1572, 1573, 363, 352, 0,
	311, 365, 281, 299, 373, 301, 302, 338, 259, 321,
	718, 296, 278, 0, 0, 0, 284, 252, 291, 253,
	282, 313, 0, 279, 0, 354, 324, 0, 0, 0,
	371, 0, 329, 0, 0, 67, 0, 0, 316, 356,
	319, 347, 310, 339, 268, 328, 366, 297, 334, 367,
	0, 0, 0, 33, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 361, 293, 265, 376,
	718, 337, 251, 331, 0, 257, 260, 372, 359, 288,
	289, 0, 0, 67, 0, 0, 0, 718, 315, 320,
	344, 307, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 1088, 327, 0, 0, 0,
	264, 258, 0, 312, 0, 0, 0, 267, 0, 286,
	345, 0, 248, 350, 357, 309, 0, 0, 360, 306,
	305, 0, 1328, 0, 0, 0, 0, 298, 387, 342,
	374, 364, 317, 355, 283, 292, 0, 290, 1084, 1085,
	1087, 326, 340, 0, 1086, 0, 0, 0, 362, 0,
	0, 0, 0, 0, 1427, 0, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 249, 287,
	348, 351, 272, 336, 261, 294, 343, 295, 318, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1409, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 0, 0, 971, 977, 975, 0, 0,
	972, 0, 0, 970, 1417, 0, 979, 0, 0, 978,
	964, 974, 976, 973, 968, 0, 963, 0, 981, 980,
	982, 961, 984, 0, 0, 0, 988, 985, 987, 986,
	0, 983, 0, 0, 0, 0, 0, 254, 0, 0,
	965, 966, 0, 255, 276, 358, 0, 0, 0, 0,
	1418, 1416, 1412, 1411, 0, 0, 0, 0, 335, 1092,
	967, 969, 0, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 275, 269, 270, 322,
	323, 368, 369, 370, 346, 266, 0, 273, 274, 0,
	353, 0, 0, 0, 325, 0, 0, 0, 375, 0,
	0, 0, 0, 0, 0, 0, 300, 250, 304, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 0, 0,
	308, 303, 330, 332, 341, 349, 0, 280, 314, 363,
	352, 0, 311, 365, 281, 299, 373, 301, 302, 338,
	259, 321, 0, 296, 278, 0, 0, 0, 284, 252,
	291, 253, 282, 313, 0, 279, 0, 354, 324, 0,
	0, 0, 371, 0, 329, 0, 0, 0, 0, 0,
	316, 356, 319, 347, 310, 339, 268, 328, 366, 297,
	334, 367, 0, 0, 0, 33, 0, 0, 0, 0,
	0, 0, 649, 0, 1091, 1081, 1080, 333, 361, 293,
	265, 376, 0, 337, 251, 331, 1082, 257, 260, 372,
	359, 288, 289, 0, 0, 0, 0, 0, 0, 1083,
	315, 320, 344, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 0, 327, 0,
	0, 0, 264, 258, 0, 312, 0, 0, 0, 267,
	0, 286, 345, 0, 248, 350, 357, 309, 0, 0,
	360, 306, 305, 0, 0, 0, 0, 0, 0, 298,
	387, 342, 374, 364, 317, 355, 283, 292, 0, 290,
	0, 0, 0, 326, 340, 0, 0, 0, 0, 0,
	362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	249, 287, 348, 351, 272, 336, 261, 294, 343, 295,
	318, 277, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 1539, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 1085, 1087,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1384, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 255, 276, 358, 0, 0,
	0, 0, 1418, 1416, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 0, 0, 1414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 275, 269,
	270, 322, 323, 368, 369, 370, 346, 266, 0, 273,
	274, 0, 353, 0, 0, 0, 325, 0, 0, 0,
	375, 0, 0, 0, 0, 0, 0, 0, 300, 250,
	304, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	0, 0, 308, 303, 330, 332, 341, 349, 0, 280,
	314, 363, 352, 0, 311, 365, 281, 299, 373, 301,
	302, 338, 259, 321, 0, 296, 278, 0, 1092, 0,
	284, 252, 291, 253, 282, 313, 0, 279, 0, 354,
	324, 0, 0, 0, 371, 0, 329, 0, 0, 0,
	0, 0, 316, 356, 319, 347, 310, 339, 268, 328,
	366, 297, 334, 367, 0, 0, 0, 33, 0, 0,
	0, 0, 0, 0, 649, 0, 1091, 1081, 1080, 333,
	361, 293, 265, 376, 0, 337, 251, 331, 1082, 257,
	260, 372, 359, 288, 289, 0, 0, 0, 0, 0,
	0, 1083, 315, 320, 344, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 0,
	327, 0, 0, 0, 264, 258, 0, 312, 0, 0,
	0, 267, 0, 286, 345, 0, 248, 350, 357, 309,
	0, 0, 360, 306, 305, 0, 0, 0, 0, 0,
	0, 298, 387, 342, 374, 364, 317, 355, 283, 292,
	0, 290, 0, 0, 0, 326, 340, 0, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 249, 287, 348, 351, 272, 336, 261, 294,
	343, 295, 318, 277, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	1085, 1087, 0, 0, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 255, 276, 358,
	0, 0, 0, 0, 1418, 1416, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 1414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	275, 269, 270, 322, 323, 368, 369, 370, 346, 266,
	0, 273, 274, 0, 353, 0, 0, 0, 325, 0,
	0, 0, 375, 0, 0, 0, 0, 0, 0, 0,
	300, 250, 304, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 0, 0, 308, 303, 330, 332, 341, 349,
	0, 280, 314, 363, 352, 0, 311, 365, 281, 299,
	373, 301, 302, 338, 259, 321, 0, 296, 278, 0,
	1092, 0, 284, 252, 291, 253, 282, 313, 0, 279,
	0, 354, 324, 0, 89, 0, 371, 32, 329, 0,
	0, 0, 0, 0, 316, 356, 319, 347, 310, 339,
	268, 328, 366, 297, 334, 367, 0, 0, 0, 447,
	1100, 45, 33, 0, 1098, 0, 0, 0, 0, 0,
	0, 333, 361, 293, 265, 376, 0, 337, 251, 331,
	0, 257, 260, 372, 359, 288, 289, 0, 0, 0,
	1097, 0, 0, 0, 315, 320, 344, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1205, 1096,
	285, 0, 327, 0, 0, 0, 264, 258, 0, 312,
	74, 0, 0, 267, 0, 286, 345, 0, 248, 350,
	357, 309, 0, 0, 360, 306, 305, 0, 0, 0,
	0, 0, 0, 298, 387, 342, 374, 364, 317, 355,
	283, 292, 0, 290, 0, 90, 0, 326, 340, 0,
	0, 0, 0, 0, 362, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 249, 287, 348, 351, 272, 336,
	261, 294, 343, 295, 318, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 0, 116, 117, 0, 118, 119, 120,
	122, 121, 91, 92, 93, 97, 95, 94, 96, 68,
	70, 0, 66, 69, 75, 71, 72, 73, 87, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	88, 98, 99, 100, 101, 102, 103, 104, 105, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 255,
	276, 358, 0, 0, 0, 0, 0, 386, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 275, 269, 270, 322, 323, 368, 369, 370,
	346, 266, 0, 273, 274, 0, 353, 0, 0, 0,
	325, 0, 0, 0, 375, 67, 0, 0, 0, 0,
	0, 0, 300, 250, 304, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 0, 0, 308, 303, 330, 332,
	341, 349, 0, 280, 314, 363, 352, 0, 311, 365,
	281, 299, 373, 301, 302, 338, 259, 321, 0, 296,
	278, 0, 0, 0, 284, 252, 291, 253, 282, 313,
	0, 279, 0, 354, 324, 0, 89, 0, 371, 0,
	329, 0, 0, 0, 0, 0, 316, 356, 319, 347,
	310, 339, 268, 328, 366, 297, 334, 367, 0, 0,
	0, 33, 0, 673, 33, 674, 0, 0, 0, 0,
	0, 0, 0, 333, 361, 293, 265, 376, 0, 337,
	251, 331, 0, 257, 260, 372, 359, 288, 289, 0,
	0, 0, 0, 0, 0, 0, 315, 320, 344, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 0, 327, 0, 0, 0, 264, 258,
	0, 312, 74, 0, 0, 267, 0, 286, 345, 0,
	248, 350, 357, 309, 0, 0, 360, 306, 305, 0,
	0, 0, 0, 0, 0, 298, 387, 342, 374, 364,
	317, 355, 283, 292, 0, 290, 0, 90, 0, 326,
	340, 0, 0, 0, 0, 0, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 249, 287, 348, 351,
	272, 336, 261, 294, 343, 295, 318, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 0, 116, 117, 0, 118,
	119, 120, 122, 121, 91, 92, 93, 97, 95, 94,
	96, 68, 70, 0, 66, 69, 75, 71, 72, 73,
	87, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 88, 98, 99, 100, 101, 102, 103, 104,
	105, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 255, 276, 358, 0, 0, 0, 0, 0, 386,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 275, 269, 270, 322, 323, 368,
	369, 370, 346, 266, 0, 273, 274, 0, 353, 0,
	0, 0, 325, 0, 0, 0, 375, 67, 0, 0,
	0, 0, 0, 0, 300, 250, 304, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 0, 0, 308, 303,
	330, 332, 341, 349, 0, 280, 314, 363, 352, 0,
	311, 365, 281, 299, 373, 301, 302, 338, 259, 321,
	0, 296, 278, 0, 0, 0, 284, 252, 291, 253,
	282, 313, 0, 279, 0, 354, 324, 0, 0, 0,
	371, 0, 329, 0, 0, 0, 0, 0, 316, 356,
	319, 347, 310, 339, 268, 328, 366, 297, 334, 367,
	0, 382, 0, 33, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 384, 0, 333, 361, 293, 265, 376,
	0, 337, 251, 331, 0, 257, 260, 372, 359, 288,
	289, 0, 0, 0, 0, 0, 0, 0, 315, 320,
	344, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 327, 0, 0, 0,
	264, 258, 0, 312, 0, 0, 0, 267, 0, 286,
	345, 0, 248, 350, 357, 309, 0, 0, 360, 306,
	305, 0, 0, 0, 0, 0, 0, 298, 387, 342,
	374, 364, 317, 355, 283, 292, 0, 290, 0, 0,
	0, 326, 340, 0, 0, 0, 0, 0, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 249, 287,
	348, 351, 272, 336, 261, 294, 343, 295, 318, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 255, 276, 358, 0, 0, 0, 0,
	0, 386, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 275, 269, 270, 322,
	323, 368, 369, 370, 346, 266, 0, 273, 274, 0,
	353, 0, 0, 0, 325, 0, 0, 0, 375, 0,
	0, 0, 0, 0, 0, 0, 300, 250, 304, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 0, 0,
	308, 303, 330, 332, 341, 349, 0, 280, 314, 363,
	352, 0, 311, 365, 281, 299, 373, 301, 302, 338,
	259, 321, 0, 296, 278, 0, 0, 0, 284, 252,
	291, 253, 282, 313, 0, 279, 0, 354, 324, 0,
	0, 0, 371, 0, 329, 0, 0, 0, 0, 0,
	316, 356, 319, 347, 310, 339, 268, 328, 366, 297,
	334, 367, 0, 0, 0, 33, 0, 0, 0, 0,
	0, 0, 649, 0, 1091, 1081, 1080, 333, 361, 293,
	265, 376, 0, 337, 251, 331, 1082, 257, 260, 372,
	359, 288, 289, 0, 0, 0, 0, 0, 0, 1083,
	315, 320, 344, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 285, 0, 327, 0,
	0, 0, 264, 258, 0, 312, 0, 0, 0, 267,
	0, 286, 345, 0, 248, 350, 357, 309, 0, 0,
	360, 306, 305, 0, 0, 0, 0, 0, 0, 298,
	387, 342, 374, 364, 317, 355, 283, 292, 0, 290,
	0, 0, 0, 326, 340, 0, 0, 0, 0, 0,
	362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	249, 287, 348, 351, 272, 336, 261, 294, 343, 295,
	318, 277, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 1085, 1087,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 255, 276, 358, 0, 0,
	0, 0, 0, 386, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 275, 269,
	270, 322, 323, 368, 369, 370, 346, 266, 0, 273,
	274, 0, 353, 0, 0, 0, 325, 0, 0, 0,
	375, 0, 0, 0, 0, 0, 0, 0, 300, 250,
	304, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	0, 0, 308, 303, 330, 332, 341, 349, 0, 280,
	314, 363, 352, 0, 311, 365, 281, 299, 373, 301,
	302, 338, 259, 321, 0, 296, 278, 0, 1092, 0,
	284, 252, 291, 253, 282, 313, 0, 279, 0, 354,
	324, 0, 0, 0, 371, 0, 329, 0, 0, 0,
	0, 0, 316, 356, 319, 347, 310, 339, 268, 328,
	366, 297, 334, 367, 0, 0, 0, 447, 0, 45,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	361, 293, 265, 376, 0, 337, 251, 331, 0, 257,
	260, 372, 359, 288, 289, 0, 0, 0, 0, 0,
	0, 0, 315, 320, 344, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 0,
	327, 0, 0, 0, 264, 258, 0, 312, 0, 0,
	0, 267, 0, 286, 345, 0, 248, 350, 357, 309,
	0, 0, 360, 306, 305, 0, 0, 0, 0, 0,
	0, 298, 387, 342, 374, 364, 317, 355, 283, 292,
	0, 290, 0, 0, 0, 326, 340, 0, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 249, 287, 348, 351, 272, 336, 261, 294,
	343, 295, 318, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 255, 276, 358,
	0, 0, 0, 0, 0, 386, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	275, 269, 270, 322, 323, 368, 369, 370, 346, 266,
	0, 273, 274, 0, 353, 0, 0, 0, 325, 0,
	0, 0, 375, 0, 0, 0, 0, 0, 0, 0,
	300, 250, 304, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 0, 0, 308, 303, 330, 332, 341, 349,
	0, 280, 314, 363, 352, 0, 311, 365, 281, 299,
	373, 301, 302, 338, 259, 321, 0, 296, 278, 0,
	0, 0, 284, 252, 291, 253, 282, 313, 0, 279,
	0, 354, 324, 0, 0, 0, 371, 0, 329, 0,
	0, 0, 0, 0, 316, 356, 319, 347, 310, 339,
	268, 328, 366, 297, 334, 367, 0, 0, 0, 33,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 361, 293, 265, 376, 0, 337, 251, 331,
	0, 257, 260, 372, 359, 288, 289, 500, 0, 0,
	0, 0, 0, 0, 315, 320, 344, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 0, 327, 0, 0, 0, 264, 258, 0, 312,
	0, 0, 0, 267, 0, 286, 345, 0, 248, 350,
	357, 309, 0, 0, 360, 306, 305, 0, 0, 0,
	0, 0, 0, 298, 387, 342, 374, 364, 317, 355,
	283, 292, 0, 290, 0, 0, 0, 326, 340, 0,
	0, 0, 0, 0, 362, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 249, 287, 348, 351, 272, 336,
	261, 294, 343, 295, 318, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 255,
	276, 358, 0, 0, 0, 0, 0, 386, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 275, 269, 270, 322, 323, 368, 369, 370,
	346, 266, 0, 273, 274, 0, 353, 0, 0, 0,
	325, 0, 0, 0, 375, 0, 0, 0, 0, 0,
	0, 0, 300, 250, 304, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 0, 0, 308, 303, 330, 332,
	341, 349, 0, 280, 314, 363, 352, 0, 311, 365,
	281, 299, 373, 301, 302, 338, 259, 321, 0, 296,
	278, 0, 0, 0, 284, 252, 291, 253, 282, 313,
	0, 279, 0, 354, 324, 0, 0, 0, 371, 0,
	329, 0, 0, 0, 0, 0, 316, 356, 319, 347,
	310, 339, 268, 328, 366, 297, 334, 367, 0, 0,
	0, 33, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 333, 361, 293, 265, 376, 0, 337,
	251, 331, 0, 257, 260, 372, 359, 288, 289, 0,
	0, 0, 0, 0, 0, 0, 315, 320, 344, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 0, 327, 0, 0, 0, 264, 258,
	0, 312, 0, 0, 0, 267, 0, 286, 345, 0,
	248, 350, 357, 309, 0, 0, 360, 306, 305, 0,
	0, 0, 0, 0, 0, 298, 387, 342, 374, 364,
	317, 355, 283, 292, 0, 290, 0, 0, 0, 326,
	340, 0, 0, 0, 0, 0, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 249, 287, 348, 351,
	272, 336, 261, 294, 343, 295, 318, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 255, 276, 358, 0, 0, 0, 0, 0, 386,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 275, 269, 270, 322, 323, 368,
	369, 370, 346, 266, 0, 273, 274, 0, 353, 0,
	0, 0, 325, 0, 0, 0, 375, 0, 0, 0,
	0, 0, 0, 0, 300, 250, 304, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 0, 0, 308, 303,
	330, 332, 341, 349, 0, 280, 314, 363, 352, 0,
	311, 365, 281, 299, 373, 301, 302, 338, 259, 321,
	0, 296, 278, 0, 0, 0, 284, 252, 291, 253,
	282, 313, 0, 279, 0, 354, 324, 0, 0, 0,
	371, 0, 329, 0, 0, 0, 0, 0, 316, 356,
	319, 347, 310, 339, 268, 328, 366, 297, 334, 367,
	0, 0, 0, 44, 0, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 361, 293, 265, 376,
	0, 337, 251, 331, 0, 257, 260, 372, 359, 288,
	289, 0, 0, 0, 0, 0, 0, 0, 315, 320,
	344, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 327, 0, 0, 0,
	264, 258, 0, 312, 0, 0, 0, 267, 0, 286,
	345, 0, 248, 350, 357, 309, 0, 0, 360, 306,
	305, 0, 0, 0, 0, 0, 0, 298, 0, 342,
	374, 364, 317, 355, 283, 292, 0, 290, 0, 0,
	0, 326, 340, 0, 0, 0, 0, 0, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 249, 287,
	348, 351, 272, 336, 261, 294, 343, 295, 318, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	649, 0, 1091, 1081, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 0, 603, 0,
	0, 447, 0, 427, 428, 429, 430, 1083, 0, 0,
	0, 0, 433, 431, 441, 442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 425, 0, 0, 447, 0, 427,
	428, 429, 430, 0, 0, 0, 0, 254, 433, 431,
	441, 442, 0, 255, 276, 358, 0, 0, 0, 0,
	0, 0, 1812, 0, 0, 0, 0, 0, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 275, 269, 270, 322,
	323, 368, 369, 370, 346, 266, 0, 273, 274, 0,
	353, 0, 1089, 0, 325, 0, 0, 0, 375, 0,
	0, 0, 1088, 0, 0, 0, 300, 250, 304, 523,
	0, 0, 0, 0, 0, 0, 262, 263, 0, 0,
	308, 303, 330, 332, 341, 349, 522, 280, 314, 0,
	0, 521, 0, 0, 0, 0, 0, 0, 567, 0,
	568, 0, 0, 0, 0, 1084, 1085, 1087, 558, 559,
	0, 1086, 0, 0, 0, 0, 1631, 0, 404, 0,
	0, 447, 547, 544, 545, 549, 550, 551, 552, 0,
	0, 0, 548, 553, 441, 442, 524, 1632, 0, 0,
	0, 519, 536, 0, 566, 0, 0, 0, 0, 0,
	435, 440, 0, 0, 0, 0, 0, 0, 0, 0,
	523, 0, 0, 0, 0, 0, 0, 0, 533, 534,
	0, 0, 0, 0, 583, 814, 535, 522, 0, 531,
	532, 537, 521, 0, 0, 0, 435, 440, 0, 567,
	0, 568, 0, 0, 0, 0, 0, 0, 581, 558,
	559, 0, 0, 437, 0, 439, 438, 0, 0, 404,
	0, 0, 447, 547, 544, 545, 549, 550, 551, 552,
	445, 444, 0, 548, 553, 441, 442, 524, 0, 0,
	0, 0, 519, 536, 0, 566, 543, 0, 0, 437,
	0, 439, 438, 0, 0, 0, 1092, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 445, 444, 0, 533,
	534, 819, 0, 0, 0, 583, 0, 535, 0, 0,
	531, 532, 537, 649, 0, 1091, 1081, 1080, 0, 0,
	0, 649, 0, 1091, 1081, 1080, 0, 1082, 0, 581,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 569, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 585, 0,
	570, 571, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1792, 0, 0, 0, 0,
	0, 555, 0, 1667, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 572, 582, 578, 579, 576, 577, 575,
	574, 573, 584, 560, 561, 562, 563, 565, 569, 0,
	445, 444, 564, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 0, 1089, 0, 1088, 0, 0, 0, 585,
	0, 570, 571, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 0, 0, 0, 0, 0, 1084, 1085,
	1087, 0, 0, 0, 1086, 0, 1084, 1085, 1087, 0,
	0, 0, 1086, 0, 572, 582, 578, 579, 576, 577,
	575, 574, 573, 584, 560, 561, 562, 563, 565, 0,
	523, 445, 444, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 0, 0,
	0, 0, 521, 0, 0, 0, 0, 0, 0, 567,
	0, 568, 0, 0, 0, 0, 0, 0, 580, 558,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 404,
	0, 698, 447, 547, 544, 545, 549, 550, 551, 552,
	0, 0, 0, 548, 553, 441, 442, 524, 0, 0,
	0, 0, 519, 536, 0, 566, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 523, 0, 0, 0, 0, 0, 0, 0, 533,
	534, 0, 0, 0, 0, 583, 0, 535, 522, 1092,
	531, 532, 537, 521, 0, 0, 0, 1092, 0, 0,
	567, 0, 568, 0, 0, 0, 0, 0, 0, 581,
	558, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	404, 0, 0, 447, 547, 544, 545, 549, 550, 551,
	552, 0, 0, 0, 548, 553, 441, 442, 524, 0,
	0, 0, 0, 519, 536, 0, 566, 543, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	533, 534, 819, 0, 0, 0, 583, 0, 535, 0,
	0, 531, 532, 537, 649, 0, 1091, 1081, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	581, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 569, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 585,
	0, 570, 571, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1591, 0, 0, 0,
	0, 0, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 572, 582, 578, 579, 576, 577,
	575, 574, 573, 584, 560, 561, 562, 563, 565, 569,
	0, 445, 444, 564, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 0, 0, 0,
	585, 0, 570, 571, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 0, 0, 0, 0, 0, 1084,
	1085, 1087, 0, 0, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 572, 582, 578, 579, 576,
	577, 575, 574, 573, 584, 560, 561, 562, 563, 565,
	0, 0, 445, 444, 564, 0, 649, 0, 0, 523,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 0, 0, 0,
	0, 521, 0, 0, 0, 0, 0, 0, 567, 580,
	568, 0, 0, 0, 0, 0, 0, 0, 558, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 404, 0,
	0, 447, 547, 544, 545, 549, 550, 551, 552, 0,
	0, 0, 548, 553, 441, 442, 524, 0, 0, 0,
	0, 519, 536, 0, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	523, 0, 0, 0, 0, 0, 0, 0, 533, 534,
	1092, 0, 0, 0, 583, 0, 535, 522, 0, 531,
	532, 537, 521, 0, 0, 0, 0, 0, 0, 567,
	0, 568, 0, 0, 0, 0, 0, 0, 581, 558,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 404,
	0, 0, 447, 547, 544, 545, 549, 550, 551, 552,
	0, 0, 0, 548, 553, 441, 442, 524, 0, 0,
	0, 0, 519, 536, 0, 566, 543, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 533,
	534, 0, 0, 0, 0, 583, 0, 535, 0, 0,
	531, 532, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 585, 0,
	570, 571, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 572, 582, 578, 579, 576, 577, 575,
	574, 573, 584, 560, 561, 562, 563, 565, 569, 0,
	445, 444, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	0, 570, 571, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 572, 582, 578, 579, 576, 577,
	575, 574, 573, 584, 560, 561, 562, 563, 565, 0,
	523, 445, 444, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 567,
	0, 568, 0, 0, 0, 0, 0, 0, 580, 558,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 404,
	0, 0, 447, 547, 544, 545, 549, 550, 551, 552,
	0, 0, 0, 548, 553, 441, 442, 524, 0, 0,
	0, 0, 0, 536, 0, 566, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 533,
	534, 0, 0, 0, 0, 583, 0, 535, 0, 0,
	531, 532, 537, 0, 0, 0, 0, 904, 905, 906,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 567, 0, 568, 0, 0, 0,
	0, 0, 0, 0, 558, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 404, 0, 0, 447, 547, 544,
	545, 549, 550, 551, 552, 0, 0, 543, 548, 553,
	441, 442, 0, 0, 0, 0, 0, 0, 536, 0,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 533, 534, 0, 0, 0, 0,
	583, 0, 535, 0, 0, 531, 532, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 569, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	0, 570, 571, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 572, 582, 578, 579, 576, 577,
	575, 574, 573, 584, 560, 561, 562, 563, 565, 0,
	0, 445, 444, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 585, 0, 570, 571, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 572,
	582, 578, 579, 576, 577, 575, 574, 573, 584, 560,
	561, 562, 563, 565, 0, 0, 445, 444, 564, 0,
	567, 0, 568, 0, 0, 0, 0, 0, 0, 0,
	558, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	404, 0, 0, 447, 547, 544, 545, 549, 550, 551,
	552, 0, 0, 580, 548, 553, 441, 442, 0, 0,
	0, 0, 0, 0, 536, 0, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	533, 534, 0, 0, 0, 0, 583, 0, 535, 0,
	0, 531, 532, 537, 0, 0, 0, 0, 0, 0,
	0, 567, 0, 568, 0, 0, 0, 0, 0, 0,
	581, 558, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 837, 0, 0, 447, 547, 544, 545, 549, 550,
	551, 552, 0, 0, 0, 548, 553, 441, 442, 0,
	0, 0, 0, 0, 0, 536, 0, 566, 543, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 534, 0, 0, 0, 0, 583, 0, 535,
	0, 0, 531, 532, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 543,
	585, 0, 570, 571, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 33, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 572, 582, 578, 579, 576,
	577, 575, 574, 573, 584, 560, 561, 562, 563, 565,
	569, 0, 445, 444, 564, 0, 0, 0, 0, 74,
	0, 807, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 0, 570, 571, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 580,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 572, 582, 578, 579,
	576, 577, 575, 574, 573, 584, 560, 561, 562, 563,
	565, 0, 0, 445, 444, 564, 0, 0, 0, 0,
	33, 0, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 0, 116, 117, 0, 118, 119, 120, 122,
	121, 91, 92, 93, 97, 95, 94, 96, 68, 70,
	580, 66, 69, 75, 71, 72, 73, 87, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 88,
	98, 99, 100, 101, 102, 103, 104, 105, 74, 0,
	0, 0, 806, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1406, 0,
	0, 0, 0, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 0, 116, 117, 0, 118, 119, 120, 122, 121,
	91, 92, 93, 97, 95, 94, 96, 68, 70, 0,
	66, 69, 75, 71, 72, 73, 87, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 88, 98,
	99, 100, 101, 102, 103, 104, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 67,
}

var yyPact = [...]int16{
	431, -1000, -254, -1000, -1000, 1354, 600, 332, -1000, -1000,
	-1000, 896, 382, 378, 198, 346, 809, 399, 846, 387,
	325, -1000, -206, -195, -1000, -109, 344, -1000, 1224, -1000,
	4383, 4383, 4383, -1000, 276, 809, 325, 125, 325, 1375,
	415, 634, 1491, 483, -1000, -1000, 325, 846, 630, -1000,
	-1000, -1000, -1000, 177, 167, 409, 1850, -146, -10, -1000,
	-1000, -1000, -1000, -1000, 1290, -1000, -1000, -1000, 1290, 49,
	1347, 1290, 1347, -1000, 1290, 1347, 33, 33, 33, 33,
	33, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1344, 1341,
	-1000, 1290, 1290, 1290, 1290, 1290, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1331, 88, 1331, 1300,
	1300, -1000, -1000, 1850, 1850, 1351, 846, 809, 1374, 846,
	-218, 846, 846, 1541, 846, -1000, -1000, -1000, 150, 1459,
	4383, 6612, 846, -1000, 1454, 400, 846, 4752, -1000, 1436,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1340, 669, 809,
	294, 278, 1240, 285, 479, 978, 286, -1000, -1000, -1000,
	729, -1000, 809, -1000, 1580, -1000, -1000, 273, -1000, 270,
	610, 839, 846, 1337, 155, 1332, 6816, 780, -1000, -270,
	-1000, -16, -1000, -1000, 731, 33, 1290, -1000, 33, 749,
	33, 33, -1000, -1000, 502, 1441, 502, 502, 502, 502,
	822, 822, -141, -141, -1000, -1000, -1000, -1000, 776, 1331,
	-1000, -1000, -1000, 775, -1000, 846, 809, 1330, 1371, 846,
	1486, 343, -1000, -1000, 1479, 1478, 1244, -1000, -1000, 146,
	-1000, 411, -1000, 809, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1264, -1000, 284,
	395, 5868, 167, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	341, -1000, 1569, 1506, 301, -12, -202, 945, -1000, -1000,
	1329, -1000, -1000, 7901, -1000, 939, 937, -1000, 6, 809,
	-1000, -198, 107, -15, -1000, -1000, 1240, -1000, 1327, 7901,
	1474, -1000, 1444, 773, -1000, 6780, -1000, -232, -1000, -1000,
	-1000, -232, -1000, -1000, -1000, 1240, -1000, 1326, 1324, -1000,
	1323, -1000, -1000, 1240, 1240, 1240, 481, -1000, -1000, -1000,
	-1000, -1000, -1000, 1175, 502, 33, 502, 1163, 1150, 502,
	502, -1000, -1000, 909, 555, -1000, -1000, -1000, -1000, 1208,
	-1000, 1206, -1000, 74, 60, -1000, 1263, -1000, 1204, 1262,
	1363, 287, 846, 1321, 1282, 325, 1282, 1505, 219, 846,
	1541, 337, 1541, 411, 809, 281, 809, -1000, -1000, 348,
	4380, -1000, -1000, 1201, -1000, 248, 1290, 394, 394, -200,
	267, 257, -202, 1240, 1320, -1000, 341, 571, -1000, 7901,
	2533, 1240, 1240, 1240, 1240, -1000, -1000, 451, -1000, -1000,
	-1000, 8642, 8642, 8642, 8642, 8642, 8642, 8642, -1000, -1000,
	-1000, -1000, 0, -1000, -232, -1000, 873, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 480, 469, -1000, 7810, 1240, 1240,
	1240, 1240, 1240, 1240, 1240, 1240, 7901, 1240, 1420, 1240,
	1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
	2639, 1240, 1240, 1240, 1240, -1000, -1000, -1000, -1000, -202,
	1319, -1000, -1000, -1000, 610, -1000, 7901, 337, 862, 106,
	-1000, 1259, 1148, 1016, 1142, -1000, 8870, -1000, 918, -1000,
	710, -1000, 708, 1140, 7051, 7472, 7472, 6240, -1000, -1000,
	502, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 33,
	821, 33, -22, -25, 768, -1000, 756, 287, 809, 846,
	1138, 1256, -1000, 213, 1318, 337, -1000, 1519, 1590, -1000,
	1282, 846, -1000, 339, 1500, -1000, -1000, 1504, -1000, 1255,
	-1000, -1000, 1213, 1541, 1316, 809, -1000, -1000, 260, 809,
	-1000, -1000, -1000, -1000, -1000, 717, 341, 1456, -1000, -1000,
	-1000, 650, -1000, -1000, 651, 203, 629, -1000, 809, -202,
	1315, 7901, 341, 1191, 206, 7901, 7901, 624, -1000, 526,
	8336, 675, 564, 8642, 8642, 8642, 8642, 8642, 8642, 8642,
	8642, 8642, 8642, 8642, 8642, 8642, 8642, 8642, 2591, 905,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 890, -1000, 1282, 795, 918, 986, 986, 22,
	22, 22, 22, 22, 22, 81, -1000, -257, -1000, -1000,
	5496, 6240, 918, 1183, 850, 7810, 7472, 7472, 2204, 7901,
	7472, 7472, 7472, 1494, 605, 850, 795, 1503, 918, 918,
	918, -1000, 918, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 37, -1000, -1000, -1000, -1000, -1000, -1000, 7472,
	7472, 7472, 7472, -1000, 809, 1240, 571, 1188, -164, 7901,
	1313, 751, -1000, 1136, -232, -1000, -1000, -1000, -146, -1000,
	-1000, -1000, -1000, 918, 7472, 1154, 1183, -1000, 752, -1000,
	467, 1154, 752, 1154, 1240, -1000, 502, -1000, 502, -1000,
	-1000, 1130, 1123, 1099, 1312, 1309, -221, 731, 287, 1171,
	1502, 1517, 1282, 1477, 1423, -1000, 918, 1471, 809, -1000,
	-1000, -1000, -1000, -1000, 187, 602, 809, 3698, 1243, -1000,
	619, 1308, 101, 310, 1359, 732, 135, -1000, 877, 592,
	811, 582, 569, 568, 565, 559, 556, 551, -1000, -1000,
	-1000, -1000, -1000, 1578, -1000, -1000, -1000, 1570, 1307, 1304,
	341, 571, 1168, 717, -1000, -119, 526, 534, -1000, -1000,
	655, -1000, -1000, 2292, 8642, 8642, 8642, -1000, -1000, -1000,
	-1000, 675, 8642, 8642, 8642, 249, 2292, 2610, 139, 2407,
	22, 169, 169, 38, 38, 38, 38, 38, 7, 7,
	-1000, -130, -1000, 1290, -1000, -1000, -1000, 918, 918, -1000,
	466, -1000, -1000, -232, 802, -1000, -1000, 788, 1240, 459,
	-1000, -1000, -1000, 7901, -1000, 918, 1154, 1154, 721, 1254,
	8733, 1290, -1000, 1290, 1300, -1000, -1000, 100, 1290, 98,
	-1000, -1000, -1000, -1000, 1300, -1000, -1000, -1000, -1000, -1000,
	1290, 1290, -1000, -1000, 1290, 1290, -1000, 1290, 1290, 810,
	1258, 1135, 1154, 7472, -1000, 599, -1000, 7901, 918, 846,
	-1000, -1000, -1000, -1000, -1000, 1154, 918, 1253, 1154, 1154,
	1161, -1000, 7901, 206, 1362, -1000, -1000, 596, -1000, 1078,
	1070, -1000, -1000, 1154, 7472, -244, -1000, -1000, -1000, 908,
	-1000, -1000, 4008, -244, -244, 7472, -1000, -1000, -1000, -1000,
	-221, 287, 341, 1535, 1299, 1061, 1535, 1463, 7901, 7901,
	1519, -1000, 1282, -1000, -1000, 1494, -1000, -1000, 656, -1000,
	1282, 1122, 184, 123, 7901, -1000, 2179, 5186, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1519, -1000,
	-1000, -1000, 809, 2800, 809, 809, 809, 304, 8231, 7901,
	-1000, -1000, -1000, 846, 1050, 4011, 619, 619, 4011, 619,
	619, 341, 341, 1298, 1297, 255, -1000, 809, -1000, -149,
	732, 809, -1000, 725, -1000, -1000, 687, 716, 687, 687,
	687, 687, 687, 394, 394, 809, 341, 1146, 206, 717,
	1359, -1000, -1000, -1000, -1000, 2292, 2292, 2292, -1000, 249,
	2292, 2379, -1000, 8642, 8642, 59, -1000, -1000, 5496, 50,
	-1000, -232, 6240, 850, -1000, -1000, -1000, 2913, 905, 7901,
	-1000, 225, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2913, 8642, 8642, 8642, 8642, -124,
	1110, 535, -1000, 7901, 841, -1000, -1000, -1000, -1000, -1000,
	-1000, 306, 809, 571, -1000, 1562, -168, 396, -1000, -1000,
	-1000, -1000, -1000, 1240, -1000, -1000, 458, -1000, -1000, 918,
	1535, 1034, 1115, 717, 7901, 337, -221, 717, -1000, 1577,
	511, 787, 1251, -1000, 764, 1502, 918, 1385, -1000, -1000,
	-135, 7901, 3326, 5186, 850, 5186, -1000, 1839, 1502, 332,
	893, 801, 1248, 9019, -1000, 2892, 753, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 809, 1554, 1548, 1547, 1544, 2857, 2533, 807,
	121, 1501, -1000, -1000, 4011, -1000, -1000, -1000, -1000, -1000,
	1077, 1075, 341, 341, 1292, 1240, 1033, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 610,
	610, 1017, 1007, 717, -1000, 1359, -1000, -1000, 8642, 2292,
	2292, -52, -1000, -1000, 788, -1000, -1000, 918, 1290, 918,
	571, -1000, -1000, 918, 2593, 2188, 1979, 1832, 1240, -116,
	-1000, 850, 7901, 846, -1000, 206, 394, 394, -1000, -1000,
	-1000, 138, 746, 706, 694, 688, 17, -1000, 1516, 391,
	5124, -1000, 717, 1535, 717, 1359, 850, 1005, 1535, 1359,
	-1000, 1414, 7901, 7901, 7901, -1000, 1463, -1000, 7472, -1000,
	-1000, -239, 850, -1000, 5186, -1000, 2046, -1000, -1000, -1000,
	1463, 899, 846, 1057, -1000, 1242, 1442, -1000, -1000, -1000,
	1462, 819, 554, 809, 161, -1000, -1000, 1247, 3264, -28,
	-1000, -1000, -1000, 545, 439, 892, -1000, 1440, -1000, -1000,
	2800, 1449, -1000, -1000, -1000, -1000, -1000, 5186, 5186, 5186,
	602, 186, -1000, 259, 1001, 972, 341, 809, -1000, 732,
	-1000, -1000, 305, 717, 1359, -1000, 2292, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 8642, -1000, 8642, -1000, 8642, -1000,
	8642, 8642, 918, 719, 850, 1280, -1000, -1000, -1000, 672,
	-1000, 670, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 111,
	-1000, 1514, 918, -1000, 1359, 717, -1000, -1000, -1000, 717,
	-1000, 1412, 850, 850, -1000, -1000, 1073, 7901, 1975, 7588,
	-1000, -1000, 223, 846, -1000, 223, 1013, 801, 846, -1000,
	-1000, 795, 801, 801, 801, 801, 801, -1000, 1397, 1396,
	-1000, 1400, 1398, 1411, 846, -1000, 967, 819, 515, 1240,
	-1000, 887, -1000, -1000, -1000, 4383, 1483, 3636, 1247, -28,
	1245, -1000, -50, -54, 6960, 6240, 502, -1000, -1000, -1000,
	-1000, -1000, 809, 380, 1878, 204, 116, 180, 137, -1000,
	141, 717, 717, 965, 918, -1000, 846, 1359, -1000, 875,
	875, 875, 875, 189, -1000, -1000, 809, -1000, -1000, -1000,
	423, 7901, -1000, -1000, -1000, 1359, -1000, 1535, 801, 850,
	7175, -1000, -1000, 1179, 1240, -1000, 1535, 801, 1045, -1000,
	1003, -1000, 543, 1442, 1296, 1361, 988, -1000, -1000, -1000,
	-1000, 1390, -1000, 1387, -1000, -1000, -1000, -1000, -139, 370,
	363, 355, 809, -1000, 1282, -1000, 1245, -28, -68, -1000,
	-1000, -1000, -1000, 850, 536, -1000, -1000, -1000, 5186, 1272,
	557, 5186, -1000, -1000, 132, -1000, 1359, 1359, -1000, -1000,
	1276, -1000, -1000, -1000, -1000, -1000, 918, 164, -157, 963,
	6240, 948, -1000, 850, -1000, 1532, 1231, -1000, 1274, 795,
	1240, -1000, 941, 809, 1519, 1045, -1000, 1535, 795, 7901,
	-1000, -1000, 7901, 1266, -1000, 7901, -1000, -1000, -1000, -1000,
	1265, 1240, 1240, 1240, 957, -1000, -1000, -1000, -1000, -69,
	-65, -1000, 7901, 319, 5186, 115, 995, -1000, -1000, -1000,
	-1000, 809, -1000, 1402, -145, -171, -1000, -1000, -1000, 918,
	7901, 1523, 1511, -1000, 1447, 1092, 1058, -1000, -1000, 7381,
	918, 960, 419, 957, 1502, -1000, 1519, -1000, 850, 850,
	337, 850, -240, 337, 337, 337, 863, 809, -1000, -1000,
	-1000, 850, -1000, 444, 5186, 7167, 953, -1000, 1311, -1000,
	-1000, -1000, -1000, 7901, 7901, 244, -1000, 1240, -1000, -1000,
	1239, 809, 809, -1000, -1000, 1502, 951, 935, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 917, 917, 917, 515, -1000,
	6814, 188, -1000, -1000, -137, 850, 1194, 1573, -1000, 1240,
	-1000, 1282, 407, -1000, -1000, -1000, -1000, -240, -1000, -1000,
	-1000, -139, 317, -1000, -163, 795, 1058, 918, 809, -1000,
	-1000, -1000, -173, 996, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1897, 62, 91, 1896, 1895, 1891, 1890, 1889, 1885,
	1883, 1880, 1879, 1878, 1877, 1876, 1874, 1873, 1871, 86,
	1866, 1863, 1860, 66, 1858, 1857, 1856, 1854, 59, 79,
	82, 114, 1009, 16, 20, 57, 25, 1853, 29, 1846,
	1839, 46, 1838, 24, 1837, 1834, 48, 1831, 1830, 4,
	84, 65, 98, 1829, 1828, 90, 1434, 1827, 1826, 78,
	1824, 1823, 80, 9, 6, 7, 8, 1822, 327, 5,
	1818, 75, 1815, 1810, 1808, 1803, 68, 1802, 50, 49,
	15, 44, 1801, 13, 54, 38, 28, 10, 1, 45,
	23, 1800, 21, 30, 27, 1799, 51, 1798, 107, 40,
	55, 76, 0, 42, 77, 1797, 1796, 1795, 182, 73,
	34, 14, 1794, 63, 1792, 61, 89, 26, 88, 87,
	1789, 85, 1788, 1787, 1786, 1785, 1784, 347, 779, 108,
	71, 52, 1783, 1782, 83, 320, 319, 81, 321, 1414,
	72, 1781, 1779, 1778, 1770, 99, 1767, 53, 95, 19,
	421, 1766, 1763, 1756, 1740, 1739, 1738, 1737, 92, 1734,
	69, 70, 165, 346, 39, 1728, 1727, 1726, 1719, 74,
	1708, 1693, 1692, 60, 1689, 1688, 93, 58, 110, 100,
	106, 1682, 1680, 136, 101, 103, 1677, 97, 37, 22,
	113, 1666, 43, 1665, 1663, 1659, 2, 3, 1658, 1657,
	1638, 1626, 1625, 1622, 47, 1621, 94, 1620, 11, 1611,
	1608, 41, 1607, 1605, 1603, 1602, 1601, 1069, 387, 1600,
	64, 111, 1598, 143,
}

var yyR1 = [...]uint8{
	0, 213, 214, 214, 1, 1, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 15, 15, 15, 15, 15, 15,
	15, 216, 216, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 22, 22, 7, 8, 8, 8, 219, 219,
	41, 41, 85, 85, 9, 9, 9, 9, 10, 10,
	193, 193, 192, 194, 194, 11, 11, 11, 11, 11,
	186, 186, 186, 186, 186, 12, 12, 189, 189, 189,
	13, 13, 13, 13, 90, 90, 94, 94, 94, 95,
	95, 95, 95, 205, 205, 114, 114, 215, 215, 220,
	220, 220, 220, 220, 220, 220, 184, 184, 184, 184,
	185, 185, 185, 185, 187, 187, 188, 188, 188, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 191,
	191, 100, 100, 167, 167, 167, 168, 168, 168, 168,
	168, 168, 170, 170, 171, 171, 106, 106, 172, 172,
	18, 152, 153, 153, 153, 153, 153, 153, 153, 153,
	139, 139, 139, 117, 117, 117, 117, 117, 117, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 178, 178,
	178, 178, 178, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 180, 181, 182, 174, 174, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 129, 129, 129, 129, 129, 129, 173, 173, 169,
	169, 169, 169, 121, 121, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 120, 120, 120, 120, 120,
	120, 120, 125, 125, 122, 122, 122, 122, 122, 122,
	122, 122, 118, 118, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 126, 126, 124, 124,
	124, 124, 124, 124, 124, 124, 138, 138, 127, 127,
	136, 136, 137, 137, 137, 128, 128, 128, 135, 135,
	135, 132, 132, 133, 133, 134, 134, 134, 130, 130,
	130, 131, 131, 131, 141, 163, 163, 163, 165, 165,
	166, 166, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 151, 151, 183, 183, 162, 162, 162,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 150,
	150, 160, 160, 161, 161, 158, 158, 158, 159, 145,
	145, 145, 145, 145, 146, 146, 147, 147, 147, 147,
	142, 142, 143, 143, 144, 144, 176, 176, 176, 209,
	209, 209, 209, 209, 209, 210, 210, 177, 177, 148,
	148, 149, 149, 156, 156, 156, 156, 221, 221, 154,
	154, 154, 155, 155, 155, 222, 19, 20, 20, 21,
	21, 21, 25, 25, 25, 23, 23, 24, 24, 30,
	30, 29, 29, 31, 31, 31, 31, 105, 105, 105,
	104, 104, 206, 206, 206, 206, 206, 33, 33, 34,
	34, 35, 35, 36, 36, 36, 196, 196, 195, 195,
	197, 197, 197, 197, 197, 197, 48, 48, 83, 83,
	83, 86, 86, 37, 37, 37, 37, 38, 38, 39,
	39, 40, 40, 112, 112, 111, 111, 111, 110, 110,
	42, 42, 42, 44, 43, 43, 43, 43, 45, 45,
	47, 47, 46, 46, 49, 49, 49, 49, 50, 50,
	84, 84, 32, 32, 32, 32, 32, 32, 32, 97,
	97, 52, 52, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 61, 61,
	61, 61, 61, 61, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 28, 28, 62, 62, 62,
	68, 63, 63, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 59, 59, 59, 59, 59, 59, 59, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 223,
	223, 60, 60, 60, 60, 26, 26, 26, 26, 26,
	113, 113, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 116, 116, 116, 116, 116, 116,
	116, 116, 72, 72, 27, 27, 70, 70, 71, 99,
	99, 73, 73, 69, 69, 69, 198, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 74, 74, 75,
	75, 207, 207, 208, 76, 76, 77, 77, 78, 79,
	79, 79, 80, 80, 80, 80, 81, 81, 81, 54,
	54, 54, 54, 54, 54, 82, 82, 82, 82, 87,
	87, 64, 64, 66, 66, 65, 67, 88, 88, 92,
	89, 89, 93, 93, 93, 93, 93, 16, 17, 91,
	91, 91, 107, 107, 107, 98, 98, 96, 96, 102,
	103, 103, 103, 103, 108, 108, 109, 109, 199, 199,
	199, 200, 200, 200, 201, 201, 202, 203, 203, 204,
	212, 212, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 217, 218,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 7, 10, 7, 11, 11, 9, 11,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 2, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 10, 5, 9, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 0, 3, 0,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 4,
	1, 0, 3, 0, 2, 2, 0, 2, 2, 2,
	2, 2, 0, 2, 0, 3, 0, 1, 0, 2,
	4, 4, 0, 1, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 3, 1, 1, 1, 1, 1, 2,
	2, 3, 2, 4, 2, 4, 2, 2, 3, 2,
	3, 2, 7, 9, 3, 3, 6, 9, 9, 6,
	6, 8, 8, 5, 8, 7, 4, 0, 2, 4,
	6, 2, 4, 2, 1, 1, 1, 2, 1, 1,
	1, 3, 1, 2, 1, 1, 2, 0, 4, 3,
	4, 3, 3, 3, 3, 3, 3, 3, 2, 4,
	6, 2, 3, 2, 3, 1, 3, 0, 2, 0,
	2, 2, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	1, 1, 0, 1, 1, 3, 3, 2, 2, 2,
	1, 1, 1, 1, 4, 5, 4, 4, 4, 1,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 3, 3, 0, 3,
	3, 0, 1, 0, 1, 0, 2, 1, 0, 3,
	3, 0, 1, 2, 6, 0, 1, 4, 1, 2,
	1, 3, 2, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 1, 0, 2, 5,
	2, 3, 3, 2, 3, 2, 2, 3, 4, 1,
	1, 1, 1, 1, 3, 3, 2, 2, 1, 2,
	5, 5, 8, 8, 13, 11, 1, 1, 2, 2,
	10, 8, 9, 7, 7, 5, 0, 1, 1, 0,
	1, 1, 1, 2, 2, 1, 2, 0, 3, 0,
	1, 1, 3, 0, 4, 1, 3, 2, 1, 1,
	2, 1, 1, 1, 1, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 3, 6, 4, 7, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 0, 4, 1, 3,
	1, 1, 1, 1, 1, 1, 4, 8, 1, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	0, 4, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 4, 4, 4, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 4, 3, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 6, 2, 2, 2, 2,
	2, 2, 2, 3, 3, 1, 1, 1, 1, 2,
	1, 4, 5, 5, 5, 5, 6, 4, 4, 4,
	6, 6, 6, 6, 6, 8, 6, 8, 6, 8,
	6, 8, 9, 7, 5, 4, 4, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 2, 2, 1, 1, 2,
	2, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 0, 2, 1, 3, 5, 3, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	2, 1, 3, 1, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 5, 3, 1, 3, 1,
	2, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	2, 0, 2, 2, 0, 1, 4, 1, 3, 2,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -213, -1, -14, -15, -18, 125, 126, -214, 380,
	-152, 58, -209, -210, -172, 134, 147, 165, 166, 352,
	132, 364, 365, 149, 367, 79, -96, 137, -153, -139,
	-102, 63, 36, 61, 133, 133, 135, 205, 135, -102,
	-102, 138, -46, -108, 61, 63, 132, -98, 138, 367,
	364, 365, 332, 132, 60, 59, -140, -117, -121, -118,
	-123, -122, -124, -102, -119, -120, 241, 344, 238, 242,
	239, 244, 245, 246, 119, 243, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 247, 259, 33,
	154, 231, 232, 233, 236, 235, 237, 234, 260, 261,
	262, 263, 264, 265, 266, 267, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 221, 223, 224, 226, 227,
	228, 230, 229, -140, -140, -102, 56, 204, -102, -98,
	206, -98, 56, -184, 56, 19, 185, 186, 198, 81,
	25, 122, -98, -46, 81, -46, 296, -156, -221, 347,
	37, -139, -141, -145, -142, -143, -144, -157, -146, 141,
	139, 149, 378, 143, 144, -150, 145, 133, 150, 73,
	81, -178, 141, -181, 56, 275, 281, 139, 150, 149,
	378, 71, 142, 25, 354, 356, 31, 32, -134, 381,
	269, -132, 278, -127, 58, -127, -126, 240, -128, 58,
	-127, -128, -127, -128, -130, 242, -130, -130, -130, -130,
	58, 58, -127, -127, -127, -127, -127, -136, 58, -125,
	225, -136, -137, 58, -137, 56, 57, -46, -102, 56,
	-46, -205, 375, 376, -46, -46, -187, -185, 8, 9,
	10, -46, 199, 26, -117, -109, -108, -101, 130, 186,
	355, 80, 25, 27, 275, 281, 185, 83, 119, 16,
	84, 192, 364, 365, 118, 76, 333, 125, 52, 325,
	326, 323, 190, 335, 336, 324, 282, 197, 20, 31,
	375, 10, 28, 152, 24, 112, 127, 187, 87, 88,
	155, 26, 153, 75, 193, 195, 19, 55, 145, 11,
	354, 13, 14, 369, 356, 138, 137, 99, 368, 133,
	50, 8, 121, 29, 376, 96, 46, 150, 196, 48,
	97, 17, 327, 328, 34, 342, 159, 114, 53, 40,
	370, 81, 371, 73, 56, 296, 191, 79, 15, 51,
	160, 372, 147, 194, 98, 128, 332, 49, 188, 373,
	131, 189, 6, 338, 33, 151, 47, 132, 283, 86,
	136, 74, 166, 5, 149, 9, 54, 57, 329, 330,
	331, 38, 85, 12, 148, 346, 77, -46, 26, 130,
	-46, -154, 59, -103, 71, -102, 289, 146, -101, 36,
	58, -177, 56, 81, -148, -102, 150, -150, 61, 133,
	-176, 364, 365, -217, 58, -150, -150, 61, 61, 150,
	73, 19, -102, 9, 150, 150, -177, 63, -46, 58,
	-174, 355, 16, 58, -179, 58, -180, 63, 64, 65,
	66, 73, -129, 72, -52, 270, -59, 323, 326, 325,
	271, 74, 75, -102, 341, 340, -108, 61, -182, 65,
	382, -133, 279, 65, -130, -127, -130, 65, 61, -130,
	-130, -131, 119, 118, 33, -131, -131, -131, -131, -138,
	63, -138, -135, 346, 347, -135, 65, -136, 65, -46,
	-102, 58, 56, -46, 25, 135, 25, -167, 25, 56,
	59, 199, -184, -102, 57, -106, 141, -145, 149, 130,
	89, -103, -221, -161, -158, -102, 150, 10, 9, 19,
	145, 139, 149, 378, -176, 61, 58, -32, -51, 81,
	-56, 31, 26, 9, 76, -55, -52, -69, -198, -67,
	-68, 119, 120, 108, 109, 116, 82, 121, -59, -57,
	-58, -60, -201, 176, 63, 64, -102, 62, 72, 65,
	66, 67, 68, 73, -108, 301, -65, -217, 48, 49,
	333, 334, 335, 336, 342, 337, 84, 38, 40, 247,
	270, 271, 323, 331, 330, 329, 327, 328, 325, 326,
	377, 138, 324, 114, 332, 268, 61, 61, -176, 149,
	-148, -102, 366, -178, 378, -129, -217, 58, -32, 25,
	31, 65, -179, 58, -180, -169, 377, -169, -217, -127,
	58, -127, 58, 58, -217, -217, -217, 122, 60, -131,
	-130, -131, 60, 60, -131, -131, 61, 61, 119, 60,
	59, 60, 231, 231, 59, 60, 59, 58, 57, 56,
	-160, -161, -59, -102, -46, 58, -2, -3, -4, 6,
	-217, -98, -2, -168, 19, 173, 174, -46, -185, -83,
	-102, 150, -187, -184, -102, -216, 133, 150, -102, 141,
	-145, -155, -103, 63, 65, 60, 59, -127, -159, 273,
	-127, -147, 169, 170, 33, 171, -147, 366, 150, 150,
	-176, -217, 58, -161, -218, 80, 79, 96, 60, -32,
	-53, 99, 81, 97, 98, 83, 105, 104, 115, 108,
	109, 110, 111, 112, 113, 114, 106, 107, 377, 118,
	89, 90, 91, 92, 93, 94, 95, 100, 101, 102,
	103, -97, -217, -68, -217, -217, -217, 123, 124, -56,
	-56, -56, -56, -56, -56, -56, -202, 269, -169, 63,
	122, 122, -2, -63, -32, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -72, -32, -217, 41, -217, -217,
	-217, -223, -217, -223, -223, -223, -223, -223, -223, -223,
	-116, 119, 242, 154, 233, -119, -118, 248, 247, -217,
	-217, -217, -217, -176, 58, -177, -32, -83, 60, 58,
	356, 59, 60, -179, 63, 60, 272, 121, -117, -218,
	60, 60, 60, -30, 24, -29, -63, -31, -32, 110,
	-108, -29, -32, -29, -103, -131, -130, 63, -130, 280,
	280, 65, 65, -160, -102, -46, 60, 58, 58, -83,
	-76, 15, -21, 5, -19, -222, -2, -46, 136, 21,
	6, 8, 9, 10, 19, -100, 59, 25, -187, -215,
	58, -102, 149, -102, -163, -165, 346, -164, 57, 146,
	71, 178, 179, 180, 181, 182, 183, 184, -158, -79,
	27, 28, -177, 56, 73, 172, -177, 56, -148, -176,
	58, -32, -161, 60, -173, 171, -32, -32, -61, 73,
	81, 74, 75, -56, 21, 22, 23, -62, -65, -68,
	69, 99, 97, 98, 83, -56, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-121, 232, -116, -119, -113, 61, 63, 61, -69, -102,
	-108, -218, -55, 63, -102, -55, -102, 381, -103, -109,
	-101, -103, -218, 59, -218, -2, -29, -29, -32, -115,
	119, 238, 154, 233, 227, 257, 258, 277, 231, 278,
	220, 212, 217, 230, 228, 214, 229, 213, 226, 223,
	236, 235, 237, 248, 239, 244, 246, 245, 243, -32,
	-31, -31, -29, -23, 24, -70, -71, 85, -69, 19,
	-218, -218, -218, -218, 240, -29, -30, -29, -29, -29,
	-149, -102, -217, -218, 60, 352, 353, -32, 58, 65,
	60, -134, -218, -29, 59, -218, -218, -105, -104, 25,
	-102, 63, 122, -218, -218, -217, -131, -131, 60, 60,
	60, 58, 58, -84, 368, -160, 60, -80, 17, 16,
	-5, -3, -217, 21, 24, -25, 44, 45, -20, -218,
	25, -149, 187, -99, 85, -102, -188, 207, -190, -6,
	-8, -7, -10, -9, -11, -12, -13, -16, -3, -22,
	10, 9, 20, 33, 191, 192, 197, 193, 148, 138,
	-17, 8, 332, 56, -220, -102, 108, 89, 63, -139,
	59, 58, 58, 364, 365, 139, -162, 56, -164, 346,
	58, 348, 61, -151, 89, 63, 89, 89, 89, 89,
	89, 89, 89, 9, 10, 58, 58, -161, -218, 60,
	-163, 339, 73, 74, 75, -56, -56, -56, -62, -56,
	-56, -56, -28, 155, 80, 346, -218, -218, 122, -203,
	-204, 63, 122, -32, -218, -218, -218, 59, 57, 59,
	-127, -127, -127, -137, 218, -127, 218, -137, -127, -127,
	-127, -127, -127, -127, 25, 59, 11, 59, 11, -218,
	-29, -73, -71, 87, -32, -218, -108, -218, -218, -218,
	-218, 60, 59, -32, -173, 56, 60, -175, 60, 60,
	-218, -31, -206, 379, -104, 110, -109, -206, -206, -30,
	-84, -160, -161, -50, 12, 58, 60, -50, -81, 19,
	34, -32, -77, -78, -32, -76, -2, -23, 70, -2,
	-170, 57, 188, 207, -32, 380, -190, -188, -76, -19,
	-19, -19, -193, -102, -192, -19, -212, -211, 302, 303,
	304, 305, 306, 307, 308, 309, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, -102,
	-102, -102, -186, 40, 194, 195, 196, -51, -56, -32,
	-51, -46, 60, -220, -102, -220, -220, -220, -220, -220,
	-161, -161, 58, 58, 150, -102, -166, -164, -102, 65,
	-183, 56, 77, 65, -183, -183, -183, -183, -183, -147,
	-147, -149, -161, 60, -173, -163, -162, -28, 80, -56,
	-56, 231, -103, 382, 59, -169, -103, -115, 119, -113,
	-32, -130, 61, -115, -56, -56, -56, -56, 343, -76,
	88, -32, 86, 142, -102, -218, 10, 9, 352, 353,
	60, 208, 358, 359, 159, 360, 171, 361, 362, -217,
	122, -218, -50, 60, 60, -163, -32, -83, -84, -163,
	9, 99, 59, 18, 59, -79, -80, -218, -24, 47,
	-171, 346, -32, -191, 207, -190, -189, -190, -190, 88,
	-80, -96, 11, -41, -46, -34, -35, -36, -37, -48,
	-68, -217, -46, 59, -194, -117, 189, -89, -114, 209,
	-93, 291, 290, -103, 301, -91, 289, 242, 288, -183,
	59, -102, 11, 11, 11, 11, -190, 207, 86, 207,
	-100, 19, 60, 60, -161, -161, 58, -217, 60, 59,
	-177, -177, 60, 60, -163, -162, -56, 280, -204, -218,
	-218, -218, -218, -218, 59, -218, 19, -218, 59, -218,
	19, -217, -27, 338, -32, -46, -173, -147, -147, 346,
	65, 16, 65, 65, 65, 65, 359, 159, 361, 16,
	-218, 160, -76, 110, -163, -50, -163, -162, 60, -50,
	-162, 42, -32, -32, -78, -81, -29, 378, -188, 380,
	-190, -81, -47, 29, -46, -46, -41, -219, 59, 11,
	57, 33, 59, -42, -44, -43, -45, 46, 50, 52,
	47, 48, 49, 53, -112, 25, -34, -217, -111, 160,
	-110, 25, -108, 63, -192, -102, 190, 59, -89, 209,
	-90, -94, 292, 294, 89, 122, -107, -102, 63, 31,
	33, -211, 29, -189, -188, -189, -99, 187, -199, 200,
	81, 60, 60, -161, -102, -164, 142, -163, -162, -56,
	-56, -56, -56, -56, -218, 63, 58, 65, 65, 363,
	-108, 16, -218, -162, -163, -163, 43, -33, 11, -32,
	380, 88, -190, -85, 160, -46, -85, 57, -34, -46,
	-88, -92, -69, -35, -36, -36, -35, -36, 46, 46,
	46, 51, 46, 51, 46, -43, -108, -218, -49, 54,
	137, 55, -217, -110, 19, -93, -90, 59, 293, 295,
	296, 56, 77, -32, -103, -131, -102, 88, 380, 380,
	88, 207, 188, -200, 201, 200, -163, -163, 60, -218,
	-46, -162, -218, -218, -218, -218, -26, 99, 346, -149,
	122, -207, -208, -32, -162, -50, -34, 88, -54, 33,
	38, -2, -217, -217, -50, -34, -50, -33, 59, 89,
	-39, -38, 56, 57, -40, 56, -38, 46, 46, -196,
	346, 133, 133, 133, -86, -102, -2, -94, -95, 297,
	294, 300, 89, 88, 87, 87, -189, 203, 202, -162,
	-162, 58, -218, 344, 53, 349, 60, -103, -218, -76,
	59, -74, 13, -87, 56, -88, -64, -66, -65, -217,
	-2, -82, -102, -86, -76, -50, -50, -92, -32, -32,
	58, -32, 58, -217, -217, -217, -218, 59, 294, 298,
	299, -32, 138, -188, 207, 380, -149, 43, 345, 350,
	-218, -208, -75, 14, 16, 30, -87, 59, -218, -218,
	-218, 59, 122, -218, -80, -76, -83, -195, -197, 369,
	370, 371, 372, 373, 374, -83, -83, -83, -111, -102,
	380, -189, 88, 60, 43, -32, -63, 150, -66, 38,
	-2, -217, -102, -102, -80, 60, 60, 59, -218, -218,
	-218, -49, 88, 88, 346, 9, -64, -2, 122, -197,
	-196, 138, 349, -88, -218, -102, 350,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 787, 1, 3,
	6, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	785, 400, 401, 402, 405, 0, 0, 788, 0, 153,
	197, 197, 197, 789, 0, 0, 785, 0, 785, 0,
	0, 0, 0, 512, 794, 795, 785, 0, 0, 406,
	403, 404, 149, 0, 413, 0, 160, 325, 321, 164,
	165, 166, 167, 168, 308, 244, 272, 273, 308, 296,
	315, 308, 315, 279, 308, 315, 328, 328, 328, 328,
	328, 287, 288, 289, 290, 291, 292, 293, 0, 0,
	264, 308, 308, 308, 308, 308, 270, 271, 298, 299,
	300, 301, 302, 303, 304, 305, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 310, 262, 310, 312,
	312, 260, 261, 161, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 0, 0,
	0, 0, 0, 150, 0, 0, 0, 151, 415, 0,
	418, 154, 155, 156, 157, 158, 159, 0, 407, 409,
	0, 396, 0, 0, 0, 0, 0, 369, 370, 170,
	0, 172, 0, 174, 0, 176, 177, 0, 179, 181,
	407, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	327, 323, 322, 243, 0, 328, 308, 297, 328, 0,
	328, 328, 280, 281, 331, 0, 331, 331, 331, 331,
	0, 0, 318, 318, 267, 268, 269, 255, 0, 310,
	263, 257, 258, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 93, 94, 0, 133, 0, 114, 110, 111,
	112, 0, 109, 0, 22, 513, 796, 797, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 0, 786, 146,
	0, 0, 0, 419, 421, 790, 791, 792, 793, 417,
	0, 379, 0, 0, 0, 410, 360, 0, 365, -2,
	0, 397, 398, 804, 962, 0, 0, 363, 396, 409,
	171, 0, 0, 0, 178, 180, 0, 184, 185, 804,
	0, 215, 0, 0, 198, 0, 201, -2, 204, 205,
	206, 239, 208, 209, 210, 0, 212, 308, 308, 235,
	0, 531, 532, 0, 0, 0, 0, -2, 213, 214,
	326, 163, 324, 0, 331, 328, 331, 0, 0, 331,
	331, 282, 332, 0, 0, 283, 284, 285, 286, 0,
	306, 0, 265, 0, 0, 266, 0, 256, 0, 0,
	0, 0, 0, 0, 0, 785, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 409, 29, 147, 0,
	0, 420, 416, 0, 373, 308, 308, 0, 0, 0,
	0, 0, 396, 0, 0, 364, 0, 0, 522, 804,
	527, 529, 0, 0, 0, 573, 574, 575, 576, 577,
	578, 804, 804, 804, 804, 804, 804, 804, 605, 606,
	607, 608, 0, 610, -2, 718, 713, 720, 721, 722,
	723, 724, 725, 726, 0, 0, 766, 804, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 0, 0, 0,
	0, 0, 649, 649, 649, 649, 649, 649, 649, 649,
	0, 0, 0, 0, 0, 805, 361, 362, 367, 396,
	0, 410, 196, 173, 407, 175, 804, 0, 0, 0,
	216, 0, 0, 0, 0, 203, 0, 207, 0, 231,
	0, 233, 0, 0, -2, 804, 804, 0, 309, 274,
	331, 276, 316, 317, 277, 278, 333, 329, 330, 328,
	0, 328, 0, 0, 0, 313, 0, 0, 0, 0,
	0, 371, 372, 308, 0, 0, -2, 734, 0, 425,
	0, 0, -2, 0, 0, 134, 135, 131, 115, 113,
	478, 479, 0, 0, 97, 0, 31, 32, 410, 409,
	30, 414, 422, 423, 424, 335, 0, 739, 377, 378,
	376, 407, 386, 387, 0, 0, 407, 408, 409, 396,
	0, 804, 0, 0, 237, 804, 804, 0, 963, 525,
	804, 0, 0, 804, 804, 804, 804, 804, 804, 804,
	804, 804, 804, 804, 804, 804, 804, 804, 0, 0,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 528, 0, 545, 0, 0, 0, 0, 0, 596,
	597, 598, 599, 600, 601, 602, 609, 0, 717, 719,
	0, 0, 36, 0, 571, 804, 804, 804, 804, 804,
	804, 804, 804, 435, 0, 703, 0, 0, 0, 0,
	0, 640, 0, 641, 642, 643, 644, 645, 646, 647,
	648, 694, 0, 696, 697, 698, 699, 700, 701, 804,
	-2, 804, 804, 368, 0, 0, 0, 0, 0, 804,
	193, 0, 199, 0, 239, 202, 240, 241, 325, 211,
	232, 234, 236, 0, 804, 0, 0, 441, 447, 443,
	0, 0, 447, 0, 0, 275, 331, 307, 331, 319,
	320, 0, 0, 0, 0, 0, 520, 962, 0, 0,
	742, 0, 0, 429, 432, 427, 36, 0, 0, 137,
	138, 139, 140, 141, 0, 709, 0, 0, 0, 23,
	99, 0, 0, 410, 357, 336, 0, 338, 0, 353,
	0, 0, 0, 0, 0, 0, 0, 0, 374, 375,
	740, 741, 380, 0, 388, 389, 381, 0, 0, 0,
	0, 0, 0, 335, 395, 0, 523, 524, 526, 548,
	0, 550, 552, 533, 804, 804, 804, 537, 567, 568,
	569, 0, 804, 804, 804, 565, 541, 0, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
	593, 0, 604, 308, 594, 660, 661, 0, 0, 713,
	0, 547, 591, 239, 0, 592, 603, 0, 714, 0,
	-2, 716, 570, 804, 765, 36, 0, 0, 0, 0,
	-2, 308, 665, 308, 312, 668, 669, 670, 308, 673,
	675, 676, 677, 678, 312, 680, 681, 682, 683, 684,
	308, 308, 687, 688, 308, 308, 691, 308, 308, 0,
	0, 0, 0, 804, 436, 711, 706, 804, 0, 0,
	637, 638, 639, 650, 695, 0, 0, 440, 0, 0,
	0, 411, 804, 237, 186, 189, 190, 0, 217, 0,
	0, 242, 611, 0, 804, 452, 617, 444, 448, 0,
	450, 451, 0, 452, 452, -2, 294, 295, 311, 314,
	520, 0, 0, 518, 0, 0, 518, 746, 804, 804,
	734, 38, 0, 430, 431, 435, 433, 434, 426, 37,
	0, 142, 0, 0, 804, 480, 18, 0, 116, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 734, 425,
	425, 425, 0, 425, 0, 0, 0, 70, 804, 804,
	777, 42, 43, 0, 0, -2, 99, 99, -2, 99,
	99, 0, 0, 0, 0, 0, 334, 0, 339, 0,
	0, 0, 342, 0, 354, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 237, 335,
	357, 238, 549, 551, 553, 534, 535, 536, 538, 565,
	542, 0, 539, 804, 804, 0, 530, 546, 0, 0,
	807, 239, 0, 572, -2, 618, 619, 0, 0, 804,
	662, 328, 666, 667, 671, 672, 674, 679, 685, 686,
	689, 690, 692, 693, 0, 804, 804, 804, 804, 0,
	734, 0, 707, 804, 0, 635, 636, 651, 652, 653,
	654, 0, 0, 0, 182, 0, 0, 0, 195, 200,
	612, 442, 613, 0, 449, 445, 0, 614, 615, 0,
	518, 0, 0, 335, 804, 0, 520, 335, 33, 0,
	0, 743, 735, 736, 739, 742, 36, 437, 428, -2,
	144, 804, 132, 0, 710, 0, 118, 0, 742, 787,
	0, 0, 58, 63, 60, 0, 0, 810, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 65,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 131, 98, 100, -2, 101, 102, 103, 104, 105,
	0, 0, 0, 0, 0, 358, 0, 340, 345, 343,
	346, 355, 356, 347, 348, 349, 350, 351, 352, 407,
	407, 0, 0, 335, 394, 357, 393, 540, 804, 566,
	543, 0, 714, 806, 0, 809, 715, 0, 308, 0,
	0, 663, 664, 0, 0, 0, 0, 0, 0, 704,
	634, 712, 804, 0, 412, 237, 0, 0, 191, 192,
	194, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 616, 335, 518, 335, 357, 519, 0, 518, 357,
	747, 0, 804, 804, 804, 738, 746, 39, 804, 438,
	16, 0, 143, 17, 0, 130, 0, 77, 117, 19,
	746, 0, 0, 0, 50, 0, 459, 461, 462, 463,
	493, 0, 495, 0, 0, 62, 64, 54, 0, 0,
	770, 95, 96, 0, 0, 0, -2, 0, 781, 778,
	0, 68, 71, 72, 73, 74, 75, 0, 0, 0,
	709, 0, 24, 798, 0, 0, 0, 0, 337, 0,
	382, 383, 0, 335, 357, 391, 544, 595, 808, 620,
	623, 621, 622, 624, 804, 626, 804, 628, 804, 630,
	804, 804, 0, 0, 708, 0, 183, 187, 188, 0,
	219, 0, 221, 222, 223, 224, 225, 226, 227, 0,
	453, 0, 0, 446, 357, 335, 10, 8, 521, 335,
	12, 0, 744, 745, 737, 34, 457, 804, 0, 0,
	78, 128, 52, 0, 511, -2, 0, 0, 0, 48,
	49, 0, 0, 0, 0, 0, 0, 500, 0, 0,
	503, 0, 0, 0, 0, 494, 0, 0, 514, 0,
	496, 0, 498, 499, 61, 0, 0, 0, 55, 0,
	57, 84, 0, 0, 804, 0, 331, 782, 783, 784,
	780, 811, 0, 0, 0, 0, 0, 0, 801, 799,
	0, 335, 335, 0, 0, 341, 0, 357, 392, 0,
	0, 0, 0, 655, 633, 705, 0, 218, 220, 229,
	0, 804, 455, 7, 11, 357, 748, 518, 0, 145,
	0, 20, 79, 0, 0, 510, 518, 0, 518, 51,
	457, 767, 0, 460, 489, 491, 0, 486, 501, 502,
	504, 0, 506, 0, 508, 509, 464, 465, 466, 0,
	0, 0, 0, 497, 0, 771, 56, 0, 0, 87,
	88, 772, 773, 774, 0, 776, 69, 76, 0, 0,
	82, 0, 132, 26, 0, 800, 357, 357, 25, 359,
	0, 390, 625, 627, 629, 631, 0, 0, 0, 0,
	0, 0, 731, 733, 9, 727, 458, 129, 759, 0,
	0, -2, 0, 0, 734, 518, 47, 518, 0, 804,
	483, 490, 804, 0, 484, 804, 485, 505, 507, 476,
	0, 0, 0, 0, 0, 481, -2, 85, 86, 0,
	0, 92, 804, 0, 0, 0, 0, 802, 803, 27,
	28, 0, 632, 0, 0, 0, 385, 230, 454, 0,
	804, 729, 0, 40, 0, 759, 749, 761, 763, 804,
	36, 0, 755, 0, 742, 46, 734, 768, 769, 487,
	0, 492, 0, 0, 0, 0, 495, 0, 89, 90,
	91, 775, 80, 0, 0, 0, 0, 656, 0, 659,
	456, 732, 35, 804, 804, 0, 41, 0, 764, -2,
	0, 0, 0, 53, 45, 742, 0, 0, 468, 470,
	471, 472, 473, 474, 475, 0, 0, 0, 514, 482,
	0, 0, 21, 384, 657, 730, 728, 0, 762, 0,
	-2, 0, 757, 756, 44, 488, 467, 0, 515, 516,
	517, 466, 0, 83, 0, 0, 752, 36, 0, 469,
	477, 81, 0, 760, -2, 758, 658,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 113, 105, 3,
	58, 60, 110, 108, 59, 109, 122, 111, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 380,
	90, 89, 91, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 381, 3, 382, 115, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 116,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 106, 107, 112, 114, 117,
	118, 119, 120, 121, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:406
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:411
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:412
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:420
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:425
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:445
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:465
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:486
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:502
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:519
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:538
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:549
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:561
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:572
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:588
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:602
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:616
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body: []Statement{&BeginEnd{
						Statements:        yyDollar[10].blockStatement,
						SuppressSemicolon: true,
					}},
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:633
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:646
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[6].colIdent,
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:671
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:677
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:691
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:705
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:725
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:743
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:761
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:770
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:785
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:793
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:800
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:806
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:810
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:816
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:820
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:827
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:839
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:851
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:855
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:861
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:867
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:871
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:875
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:880
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:881
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:885
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:889
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:894
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:898
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:904
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:908
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:912
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:916
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:922
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:926
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:939
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:943
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:949
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:954
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:958
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:964
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:971
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:978
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:985
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:993
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1003
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1007
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1011
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1015
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1019
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1025
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1032
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1042
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1046
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1050
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1057
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1065
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1075
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1083
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1094
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1098
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1104
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1108
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1112
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1118
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1122
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1126
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1130
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1136
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1140
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1146
		{
			yyVAL.str = SessionStr
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1150
		{
			yyVAL.str = GlobalStr
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1155
		{
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1156
		{
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1160
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1161
		{
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1162
		{
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1163
		{
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1164
		{
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1165
		{
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1166
		{
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1170
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1174
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1178
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1182
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1192
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1196
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1201
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1207
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1211
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1217
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1221
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1226
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1232
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1244
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1255
		{
			yyVAL.statement = &BeginEnd{
				Statements: yyDollar[2].blockStatement,
			}
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1263
		{
			yyVAL.empty = struct{}{}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1265
		{
			yyVAL.empty = struct{}{}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1268
		{
			yyVAL.bytes = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1272
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1276
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1281
		{
			yyVAL.bytes = nil
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1285
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1289
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1293
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1301
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1306
		{
			yyVAL.expr = nil
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1310
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1315
		{
			yyVAL.expr = nil
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1319
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1324
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1328
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1333
		{
			yyVAL.bytes = nil
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1337
		{
			yyVAL.bytes = nil
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1343
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1350
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1356
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1360
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1365
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1369
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1373
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1377
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1381
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1385
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1391
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1396
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1401
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1407
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1418
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1424
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1437
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1442
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1447
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1452
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1458
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1463
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1468
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1473
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1478
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1483
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1488
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1493
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1498
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1507
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1517
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1522
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1527
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1534
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1541
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1549
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1554
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1559
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1564
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1570
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1576
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1582
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1589
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1595
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1601
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1605
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 200:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1609
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1613
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1617
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1623
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1627
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1631
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1635
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1639
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1643
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1647
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1651
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1655
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1661
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1667
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1673
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1679
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1683
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1688
		{
			yyVAL.sequence = &Sequence{}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1692
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1697
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1702
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1707
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1712
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1717
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1722
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1727
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1732
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1737
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1742
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1747
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1752
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1763
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1767
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1775
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1779
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1784
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1788
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1793
		{
			yyVAL.bytes = nil
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1802
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1807
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1894
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1898
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2020
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2028
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 295:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2033
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2038
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2042
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2048
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2056
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2060
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2064
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2068
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2072
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2076
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2082
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2087
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2092
		{
			yyVAL.optVal = nil
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2096
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2101
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2105
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2113
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2117
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2123
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2131
		{
			yyVAL.optVal = nil
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2135
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2139
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2148
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2152
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2156
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2161
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2165
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2170
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2174
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2179
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2183
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2187
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2192
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2196
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2200
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2205
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2209
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2213
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2219
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2224
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2228
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2232
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2238
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2242
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2248
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2252
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2258
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2262
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2267
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2271
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2275
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2279
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2283
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2287
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2291
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2295
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2299
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2305
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2309
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2315
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2319
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2325
		{
			yyVAL.indexPartition = nil
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2329
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 359:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2333
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2339
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2343
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2347
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2351
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2355
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2359
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2363
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2367
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2371
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2377
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2381
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2387
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2392
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2398
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2402
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2408
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2413
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2417
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2427
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2432
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2439
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 382:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2446
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 383:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2453
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 384:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2462
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 385:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2473
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2484
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2488
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2492
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2496
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 390:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2502
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 391:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2512
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 392:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2523
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:   yyDollar[6].indexColumns,
				Options:   yyDollar[8].indexOptions,
				Partition: yyDollar[9].indexPartition,
			}
		}
	case 393:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2533
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 394:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2544
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2553
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2562
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2566
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2570
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2576
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2580
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2584
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2588
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2592
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2596
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2602
		{
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2603
		{
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2607
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2611
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2616
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2623
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2627
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2634
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2638
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2644
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2648
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2653
		{
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2654
		{
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2658
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2662
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2666
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2672
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2676
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2680
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2685
		{
			setAllowComments(yylex, true)
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2689
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2695
		{
			yyVAL.bytes2 = nil
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2699
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2705
		{
			yyVAL.str = UnionStr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2709
		{
			yyVAL.str = UnionAllStr
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2713
		{
			yyVAL.str = UnionDistinctStr
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2718
		{
			yyVAL.str = ""
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2722
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2726
		{
			yyVAL.str = SQLCacheStr
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2731
		{
			yyVAL.str = ""
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2735
		{
			yyVAL.str = DistinctStr
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2740
		{
			yyVAL.str = ""
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2744
		{
			yyVAL.str = StraightJoinHint
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2749
		{
			yyVAL.selectExprs = nil
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2753
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2759
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2763
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2773
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2777
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2781
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2786
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2790
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2794
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2801
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2806
		{
			yyVAL.overExpr = nil
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2810
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 454:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2814
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2818
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 456:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2822
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2827
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2831
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2837
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2841
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2851
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2855
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2859
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2864
		{
			yyVAL.strs = []string{}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2868
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2874
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2878
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2884
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2888
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2892
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2896
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2900
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2904
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2910
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 477:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2914
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2920
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2925
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2929
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2935
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2939
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2952
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2956
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2960
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2964
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2970
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2972
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2976
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2978
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2982
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2984
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2987
		{
			yyVAL.empty = struct{}{}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2989
		{
			yyVAL.empty = struct{}{}
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2992
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2996
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3000
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3007
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3013
		{
			yyVAL.str = JoinStr
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3017
		{
			yyVAL.str = JoinStr
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3021
		{
			yyVAL.str = JoinStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3027
		{
			yyVAL.str = StraightJoinStr
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3033
		{
			yyVAL.str = LeftJoinStr
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3037
		{
			yyVAL.str = LeftJoinStr
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3041
		{
			yyVAL.str = RightJoinStr
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3045
		{
			yyVAL.str = RightJoinStr
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3051
		{
			yyVAL.str = NaturalJoinStr
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3055
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3065
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3069
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3075
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3079
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3084
		{
			yyVAL.indexHints = nil
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3088
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3092
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3096
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3101
		{
			yyVAL.expr = nil
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3110
		{
			yyVAL.columns = nil
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3114
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3120
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3124
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3128
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3132
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3136
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3140
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3144
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3150
		{
			yyVAL.str = ""
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3154
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3160
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3164
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3170
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3174
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3178
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3182
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3186
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3190
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3194
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3198
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3202
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3206
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 543:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3210
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 544:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3214
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3218
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3223
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3227
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3233
		{
			yyVAL.str = IsNullStr
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3237
		{
			yyVAL.str = IsNotNullStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3241
		{
			yyVAL.str = IsTrueStr
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3245
		{
			yyVAL.str = IsNotTrueStr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3249
		{
			yyVAL.str = IsFalseStr
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3253
		{
			yyVAL.str = IsNotFalseStr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3259
		{
			yyVAL.str = EqualStr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3263
		{
			yyVAL.str = LessThanStr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3267
		{
			yyVAL.str = GreaterThanStr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3271
		{
			yyVAL.str = LessEqualStr
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3275
		{
			yyVAL.str = GreaterEqualStr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3279
		{
			yyVAL.str = NotEqualStr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3283
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3287
		{
			yyVAL.str = PosixRegexStr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3291
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3295
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3299
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3304
		{
			yyVAL.expr = nil
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3314
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3318
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3322
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3328
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3334
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3338
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3344
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3348
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3352
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3356
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3360
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3364
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3372
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3376
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3380
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3384
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3388
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3392
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3396
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3400
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3404
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3408
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3412
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3416
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3420
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3424
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3428
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 595:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3432
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3436
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3440
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3444
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3452
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3466
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3470
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3474
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3482
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3490
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3498
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3502
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3512
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3516
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3520
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3524
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3528
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 616:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3532
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3536
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3550
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 620:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 621:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3558
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 622:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3562
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 623:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3566
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 624:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3570
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 625:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3574
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 626:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 627:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 628:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3586
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 629:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3590
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 630:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3594
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 631:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3598
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 632:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3602
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 633:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3606
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 634:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3610
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3614
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3619
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3623
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3627
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3631
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3641
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3645
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3649
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3653
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3658
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3663
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3668
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3673
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3677
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3691
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3695
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3699
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3703
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3709
		{
			yyVAL.str = ""
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3713
		{
			yyVAL.str = BooleanModeStr
		}
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3717
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 658:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3721
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3725
		{
			yyVAL.str = QueryExpansionStr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3731
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3735
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3741
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3745
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3749
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3753
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3757
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3761
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3791
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3795
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3799
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3803
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3807
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3811
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3815
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3819
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3823
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3827
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3831
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3835
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3839
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3843
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3847
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3851
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3855
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3859
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3863
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3867
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3873
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3877
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3881
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3885
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3889
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3893
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3897
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3901
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3906
		{
			yyVAL.expr = nil
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3910
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3915
		{
			yyVAL.str = string("")
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3925
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3929
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3935
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3940
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3942
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3945
		{
			yyVAL.expr = nil
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3949
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3955
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 715:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3963
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3969
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3975
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3979
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3984
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3989
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3993
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3997
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4001
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4005
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4009
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4013
		{
			yyVAL.expr = &NullVal{}
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4018
		{
			yyVAL.exprs = nil
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4022
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4027
		{
			yyVAL.expr = nil
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4031
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4037
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4047
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4052
		{
			yyVAL.orderBy = nil
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4056
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4062
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4066
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4072
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4077
		{
			yyVAL.str = AscScr
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4081
		{
			yyVAL.str = AscScr
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4085
		{
			yyVAL.str = DescScr
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4090
		{
			yyVAL.limit = nil
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4094
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4098
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4102
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4107
		{
			yyVAL.str = ""
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4111
		{
			yyVAL.str = ForUpdateStr
		}
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4115
		{
			yyVAL.str = ShareModeStr
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4128
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4132
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4136
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4141
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4145
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 754:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4149
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4156
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4160
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4164
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 758:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4168
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4173
		{
			yyVAL.updateExprs = nil
		}
	case 760:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4183
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4187
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4203
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4209
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4219
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4223
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4229
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4235
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4239
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4245
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4249
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4253
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 775:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4258
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4262
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4268
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4274
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4281
		{
			yyVAL.bytes = []byte("charset")
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4288
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4292
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4296
		{
			yyVAL.expr = &Default{}
		}
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4301
		{
			yyVAL.empty = struct{}{}
		}
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4303
		{
			yyVAL.empty = struct{}{}
		}
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4306
		{
			yyVAL.str = ""
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4308
		{
			yyVAL.str = IgnoreStr
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4312
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4319
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4323
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4327
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4333
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4338
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4345
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4351
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4355
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4359
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4365
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4369
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4373
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4379
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4383
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4390
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4397
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4401
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4408
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4414
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4418
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4585
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4594
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
