// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const GRANT = 57457
const REVOKE = 57458
const OPTION = 57459
const PRIVILEGES = 57460
const SCHEMA = 57461
const TABLE = 57462
const INDEX = 57463
const MATERIALIZED = 57464
const VIEW = 57465
const TO = 57466
const IGNORE = 57467
const IF = 57468
const PRIMARY = 57469
const COLUMN = 57470
const CONSTRAINT = 57471
const REFERENCES = 57472
const SPATIAL = 57473
const FULLTEXT = 57474
const FOREIGN = 57475
const KEY_BLOCK_SIZE = 57476
const POLICY = 57477
const WHILE = 57478
const EXCLUDE = 57479
const GIST = 57480
const UNIQUE = 57481
const KEY = 57482
const SHOW = 57483
const DESCRIBE = 57484
const EXPLAIN = 57485
const DATE = 57486
const ESCAPE = 57487
const REPAIR = 57488
const OPTIMIZE = 57489
const TRUNCATE = 57490
const EXEC = 57491
const EXECUTE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const TYPE = 57500
const RETURN = 57501
const EXTENSION = 57502
const DATA = 57503
const STATUS = 57504
const VARIABLES = 57505
const RESTRICT = 57506
const CASCADE = 57507
const NO = 57508
const ACTION = 57509
const PERMISSIVE = 57510
const RESTRICTIVE = 57511
const PUBLIC = 57512
const CURRENT_USER = 57513
const SESSION_USER = 57514
const PAD_INDEX = 57515
const FILLFACTOR = 57516
const IGNORE_DUP_KEY = 57517
const STATISTICS_NORECOMPUTE = 57518
const STATISTICS_INCREMENTAL = 57519
const ALLOW_ROW_LOCKS = 57520
const ALLOW_PAGE_LOCKS = 57521
const DISTANCE = 57522
const M = 57523
const EUCLIDEAN = 57524
const COSINE = 57525
const BEFORE = 57526
const AFTER = 57527
const EACH = 57528
const ROW = 57529
const SCROLL = 57530
const CURSOR = 57531
const OPEN = 57532
const CLOSE = 57533
const FETCH = 57534
const PRIOR = 57535
const FIRST = 57536
const LAST = 57537
const DEALLOCATE = 57538
const INSTEAD = 57539
const OF = 57540
const OUTPUT = 57541
const DEFERRABLE = 57542
const INITIALLY = 57543
const IMMEDIATE = 57544
const DEFERRED = 57545
const CONCURRENTLY = 57546
const SQL = 57547
const SECURITY = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const BIT = 57554
const TINYINT = 57555
const SMALLINT = 57556
const SMALLSERIAL = 57557
const MEDIUMINT = 57558
const INT = 57559
const INTEGER = 57560
const SERIAL = 57561
const BIGINT = 57562
const BIGSERIAL = 57563
const INTNUM = 57564
const REAL = 57565
const DOUBLE = 57566
const PRECISION = 57567
const FLOAT_TYPE = 57568
const DECIMAL = 57569
const NUMERIC = 57570
const SMALLMONEY = 57571
const MONEY = 57572
const TIME = 57573
const TIMESTAMP = 57574
const DATETIME = 57575
const YEAR = 57576
const DATETIMEOFFSET = 57577
const DATETIME2 = 57578
const SMALLDATETIME = 57579
const CHAR = 57580
const VARCHAR = 57581
const VARYING = 57582
const BOOL = 57583
const CHARACTER = 57584
const VARBINARY = 57585
const NCHAR = 57586
const NVARCHAR = 57587
const NTEXT = 57588
const UUID = 57589
const TEXT = 57590
const TINYTEXT = 57591
const MEDIUMTEXT = 57592
const LONGTEXT = 57593
const CITEXT = 57594
const BLOB = 57595
const TINYBLOB = 57596
const MEDIUMBLOB = 57597
const LONGBLOB = 57598
const JSON = 57599
const JSONB = 57600
const ENUM = 57601
const GEOMETRY = 57602
const POINT = 57603
const LINESTRING = 57604
const POLYGON = 57605
const GEOMETRYCOLLECTION = 57606
const MULTIPOINT = 57607
const MULTILINESTRING = 57608
const MULTIPOLYGON = 57609
const VECTOR = 57610
const VARIADIC = 57611
const ARRAY = 57612
const NOW = 57613
const GETDATE = 57614
const BPCHAR = 57615
const TEXT_PATTERN_OPS = 57616
const NULLX = 57617
const AUTO_INCREMENT = 57618
const APPROXNUM = 57619
const SIGNED = 57620
const UNSIGNED = 57621
const ZEROFILL = 57622
const ZONE = 57623
const AUTOINCREMENT = 57624
const DATABASES = 57625
const TABLES = 57626
const VSCHEMA_TABLES = 57627
const EXTENDED = 57628
const FULL = 57629
const PROCESSLIST = 57630
const NAMES = 57631
const CHARSET = 57632
const GLOBAL = 57633
const SESSION = 57634
const ISOLATION = 57635
const LEVEL = 57636
const READ = 57637
const WRITE = 57638
const ONLY = 57639
const REPEATABLE = 57640
const COMMITTED = 57641
const UNCOMMITTED = 57642
const SERIALIZABLE = 57643
const NEW = 57644
const CONCAT_NULL_YIELDS_NULL = 57645
const CURSOR_CLOSE_ON_COMMIT = 57646
const QUOTED_IDENTIFIER = 57647
const ARITHABORT = 57648
const FMTONLY = 57649
const NOCOUNT = 57650
const NOEXEC = 57651
const NUMERIC_ROUNDABORT = 57652
const ANSI_DEFAULTS = 57653
const ANSI_NULL_DFLT_OFF = 57654
const ANSI_NULL_DFLT_ON = 57655
const ANSI_NULLS = 57656
const ANSI_PADDING = 57657
const ANSI_WARNINGS = 57658
const FORCEPLAN = 57659
const SHOWPLAN_ALL = 57660
const SHOWPLAN_TEXT = 57661
const SHOWPLAN_XML = 57662
const IMPLICIT_TRANSACTIONS = 57663
const REMOTE_PROC_TRANSACTIONS = 57664
const XACT_ABORT = 57665
const CURRENT_TIMESTAMP = 57666
const DATABASE = 57667
const CURRENT_DATE = 57668
const CURRENT_TIME = 57669
const LOCALTIME = 57670
const LOCALTIMESTAMP = 57671
const UTC_DATE = 57672
const UTC_TIME = 57673
const UTC_TIMESTAMP = 57674
const REPLACE = 57675
const CONVERT = 57676
const CAST = 57677
const COALESCE = 57678
const SUBSTR = 57679
const SUBSTRING = 57680
const GROUP_CONCAT = 57681
const SEPARATOR = 57682
const INHERIT = 57683
const LEAD = 57684
const LAG = 57685
const MATCH = 57686
const AGAINST = 57687
const BOOLEAN = 57688
const LANGUAGE = 57689
const WITH = 57690
const WITHOUT = 57691
const PARSER = 57692
const QUERY = 57693
const EXPANSION = 57694
const UNUSED = 57695
const VIRTUAL = 57696
const STORED = 57697
const GENERATED = 57698
const ALWAYS = 57699
const IDENTITY = 57700
const SEQUENCE = 57701
const INCREMENT = 57702
const MINVALUE = 57703
const CACHE = 57704
const CYCLE = 57705
const OWNED = 57706
const NONE = 57707
const CLUSTERED = 57708
const NONCLUSTERED = 57709
const REPLICATION = 57710
const COLUMNSTORE = 57711
const INCLUDE = 57712
const HOLDLOCK = 57713
const NOLOCK = 57714
const NOWAIT = 57715
const PAGLOCK = 57716
const ROWLOCK = 57717
const TABLOCK = 57718
const UPDLOCK = 57719
const READUNCOMMITTED = 57720
const DEFINER = 57721
const INVOKER = 57722
const TYPECAST = 57723
const CHECK = 57724
const OVER = 57725

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"GRANT",
	"REVOKE",
	"OPTION",
	"PRIVILEGES",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"EXCLUDE",
	"GIST",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"EXTENSION",
	"DATA",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"COALESCE",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 7,
	138, 512,
	-2, 222,
	-1, 212,
	123, 938,
	-2, 931,
	-1, 213,
	123, 939,
	-2, 849,
	-1, 366,
	58, 509,
	-2, 1118,
	-1, 373,
	61, 458,
	-2, 1063,
	-1, 374,
	61, 459,
	-2, 1070,
	-1, 455,
	123, 942,
	-2, 936,
	-1, 456,
	123, 939,
	-2, 937,
	-1, 502,
	61, 458,
	-2, 455,
	-1, 555,
	123, 940,
	-2, 316,
	-1, 675,
	138, 221,
	157, 221,
	-2, 1118,
	-1, 693,
	123, 939,
	-2, 387,
	-1, 854,
	60, 461,
	-2, 877,
	-1, 855,
	60, 462,
	-2, 877,
	-1, 856,
	60, 463,
	-2, 877,
	-1, 857,
	60, 464,
	-2, 877,
	-1, 861,
	5, 92,
	-2, 15,
	-1, 864,
	5, 92,
	-2, 17,
	-1, 1005,
	403, 830,
	-2, 387,
	-1, 1027,
	287, 349,
	402, 349,
	-2, 318,
	-1, 1042,
	123, 940,
	-2, 316,
	-1, 1043,
	59, 956,
	403, 956,
	-2, 858,
	-1, 1044,
	59, 957,
	403, 957,
	-2, 859,
	-1, 1045,
	59, 958,
	403, 958,
	-2, 860,
	-1, 1046,
	59, 959,
	403, 959,
	-2, 861,
	-1, 1047,
	59, 960,
	403, 960,
	-2, 862,
	-1, 1048,
	59, 961,
	403, 961,
	-2, 647,
	-1, 1049,
	59, 962,
	403, 962,
	-2, 648,
	-1, 1142,
	119, 407,
	120, 407,
	-2, 24,
	-1, 1276,
	5, 93,
	-2, 695,
	-1, 1296,
	59, 955,
	403, 955,
	-2, 853,
	-1, 1399,
	60, 162,
	-2, 933,
	-1, 1402,
	60, 162,
	-2, 274,
	-1, 1523,
	59, 963,
	403, 963,
	-2, 731,
	-1, 1552,
	5, 92,
	-2, 16,
	-1, 1568,
	206, 119,
	-2, 608,
	-1, 1613,
	32, 243,
	60, 162,
	71, 243,
	144, 243,
	146, 243,
	147, 243,
	287, 243,
	399, 243,
	402, 243,
	-2, 933,
	-1, 1614,
	161, 1011,
	229, 1011,
	230, 1011,
	231, 1011,
	232, 1011,
	233, 1011,
	234, 1011,
	235, 1011,
	236, 1011,
	237, 1011,
	238, 1011,
	240, 1011,
	241, 1011,
	243, 1011,
	244, 1011,
	245, 1011,
	246, 1011,
	247, 1011,
	248, 1011,
	249, 1011,
	250, 1011,
	251, 1011,
	252, 1011,
	253, 1011,
	254, 1011,
	255, 1011,
	256, 1011,
	258, 1011,
	259, 1011,
	260, 1011,
	261, 1011,
	262, 1011,
	263, 1011,
	264, 1011,
	265, 1011,
	266, 1011,
	267, 1011,
	268, 1011,
	269, 1011,
	270, 1011,
	271, 1011,
	272, 1011,
	273, 1011,
	274, 1011,
	275, 1011,
	276, 1011,
	277, 1011,
	278, 1011,
	279, 1011,
	280, 1011,
	281, 1011,
	282, 1011,
	283, 1011,
	284, 1011,
	285, 1011,
	363, 1011,
	-2, 387,
	-1, 1616,
	161, 1066,
	229, 1066,
	230, 1066,
	231, 1066,
	232, 1066,
	233, 1066,
	234, 1066,
	235, 1066,
	236, 1066,
	237, 1066,
	238, 1066,
	240, 1066,
	241, 1066,
	243, 1066,
	244, 1066,
	245, 1066,
	246, 1066,
	247, 1066,
	248, 1066,
	249, 1066,
	250, 1066,
	251, 1066,
	252, 1066,
	253, 1066,
	254, 1066,
	255, 1066,
	256, 1066,
	258, 1066,
	259, 1066,
	260, 1066,
	261, 1066,
	262, 1066,
	263, 1066,
	264, 1066,
	265, 1066,
	266, 1066,
	267, 1066,
	268, 1066,
	269, 1066,
	270, 1066,
	271, 1066,
	272, 1066,
	273, 1066,
	274, 1066,
	275, 1066,
	276, 1066,
	277, 1066,
	278, 1066,
	279, 1066,
	280, 1066,
	281, 1066,
	282, 1066,
	283, 1066,
	284, 1066,
	285, 1066,
	363, 1066,
	-2, 349,
	-1, 1790,
	90, 934,
	-2, 919,
	-1, 1835,
	105, 738,
	106, 738,
	107, 738,
	108, 738,
	109, 738,
	110, 738,
	111, 738,
	112, 738,
	113, 738,
	114, 738,
	115, 738,
	116, 738,
	119, 738,
	398, 738,
	-2, 651,
	-1, 1836,
	105, 738,
	106, 738,
	107, 738,
	108, 738,
	109, 738,
	110, 738,
	111, 738,
	112, 738,
	113, 738,
	114, 738,
	115, 738,
	116, 738,
	119, 738,
	398, 738,
	-2, 653,
	-1, 1837,
	105, 738,
	106, 738,
	107, 738,
	108, 738,
	109, 738,
	110, 738,
	111, 738,
	112, 738,
	113, 738,
	114, 738,
	115, 738,
	116, 738,
	119, 738,
	398, 738,
	-2, 655,
	-1, 1841,
	218, 943,
	-2, 263,
	-1, 1892,
	57, 106,
	59, 106,
	-2, 108,
	-1, 2077,
	5, 92,
	-2, 888,
	-1, 2102,
	5, 92,
	-2, 115,
	-1, 2138,
	59, 1106,
	60, 1106,
	-2, 538,
	-1, 2173,
	5, 93,
	-2, 889,
	-1, 2204,
	5, 92,
	-2, 891,
	-1, 2225,
	5, 93,
	-2, 892,
}

const yyPrivate = 57344

const yyLast = 16433

var yyAct = [...]int16{
	557, 2095, 2003, 2182, 1268, 536, 569, 2131, 2021, 43,
	43, 2137, 61, 2132, 871, 775, 58, 1913, 2128, 2063,
	2004, 1360, 208, 209, 1375, 2087, 1363, 2100, 210, 1926,
	1252, 1927, 1971, 1784, 1997, 1760, 1377, 1364, 1901, 773,
	1770, 1911, 1915, 1019, 1572, 1752, 1378, 744, 616, 1781,
	1569, 1778, 243, 1802, 1503, 464, 249, 249, 249, 1508,
	1178, 1769, 1218, 1487, 1210, 928, 55, 48, 1648, 1211,
	494, 540, 1348, 1435, 1657, 1609, 1357, 918, 852, 250,
	244, 1516, 1029, 799, 815, 1057, 1092, 1006, 1033, 1231,
	1138, 781, 497, 1041, 245, 1095, 503, 690, 658, 715,
	357, 533, 430, 454, 394, 1361, 879, 1288, 445, 624,
	807, 377, 1775, 211, 539, 352, 1403, 1024, 446, 468,
	322, 425, 1295, 1111, 627, 1336, 700, 400, 1335, 401,
	604, 1108, 54, 1107, 948, 787, 217, 13, 221, 1517,
	223, 224, 885, 752, 753, 754, 755, 756, 749, 707,
	1115, 760, 887, 44, 884, 952, 954, 392, 960, 710,
	233, 708, 236, 237, 961, 962, 963, 964, 965, 966,
	967, 1879, 953, 955, 951, 956, 957, 958, 959, 748,
	747, 757, 758, 750, 751, 752, 753, 754, 755, 756,
	749, 1546, 760, 760, 925, 396, 1166, 782, 749, 441,
	442, 760, 1349, 313, 316, 317, 225, 1423, 934, 1149,
	728, 731, 328, 2183, 2184, 2185, 2186, 2187, 2188, 2189,
	2190, 1700, 333, 2223, 335, 529, 952, 954, 2123, 960,
	986, 43, 505, 506, 1851, 961, 962, 963, 964, 965,
	966, 967, 58, 953, 955, 951, 956, 957, 958, 959,
	748, 747, 757, 758, 750, 751, 752, 753, 754, 755,
	756, 749, 1981, 501, 760, 226, 227, 748, 747, 757,
	758, 750, 751, 752, 753, 754, 755, 756, 749, 2216,
	2068, 760, 748, 747, 757, 758, 750, 751, 752, 753,
	754, 755, 756, 749, 1698, 1699, 760, 748, 747, 757,
	758, 750, 751, 752, 753, 754, 755, 756, 749, 1440,
	395, 760, 1261, 1262, 2096, 371, 436, 945, 944, 318,
	508, 320, 1146, 1439, 354, 784, 628, 629, 2199, 1704,
	58, 1749, 249, 745, 1266, 946, 334, 336, 2122, 1488,
	502, 1538, 455, 2049, 1706, 462, 1945, 344, 345, 1473,
	1738, 349, 58, 228, 2106, 2067, 44, 2105, 355, 504,
	2107, 2158, 2159, 2032, 2033, 498, 2031, 750, 751, 752,
	753, 754, 755, 756, 749, 1709, 2157, 760, 746, 519,
	44, 1119, 402, 1118, 459, 407, 1701, 44, 409, 1928,
	1935, 1929, 606, 398, 570, 466, 453, 886, 412, 1106,
	607, 738, 912, 45, 709, 419, 420, 421, 422, 423,
	404, 432, 1532, 411, 413, 414, 415, 416, 490, 1502,
	44, 44, 1934, 1291, 844, 428, 843, 435, 429, 1312,
	759, 439, 1310, 443, 444, 636, 461, 505, 506, 1167,
	451, 470, 508, 314, 1850, 44, 1852, 463, 44, 452,
	465, 1805, 465, 735, 947, 737, 736, 523, 34, 483,
	44, 1556, 620, 621, 622, 623, 1294, 44, 58, 319,
	661, 759, 759, 1107, 1414, 663, 664, 665, 666, 667,
	759, 58, 205, 873, 405, 680, 1680, 926, 684, 58,
	759, 1199, 1198, 927, 691, 44, 1678, 648, 450, 1921,
	462, 525, 748, 747, 757, 758, 750, 751, 752, 753,
	754, 755, 756, 749, 1677, 1806, 760, 730, 1555, 1780,
	1607, 1356, 1598, 1203, 1675, 733, 702, 1982, 626, 1735,
	722, 610, 1424, 1425, 1150, 1151, 1658, 1659, 1702, 1703,
	1705, 1707, 1708, 759, 1952, 630, 635, 987, 1219, 633,
	639, 640, 944, 609, 1214, 687, 611, 1820, 614, 615,
	759, 650, 867, 868, 206, 1811, 1638, 946, 1175, 946,
	948, 1419, 649, 1663, 1146, 759, 945, 944, 1998, 776,
	669, 674, 659, 528, 657, 505, 506, 2201, 513, 1640,
	759, 685, 510, 1421, 946, 1152, 711, 672, 936, 681,
	670, 660, 706, 1468, 935, 688, 45, 514, 315, 729,
	412, 504, 727, 512, 516, 748, 747, 757, 758, 750,
	751, 752, 753, 754, 755, 756, 749, 1467, 1145, 760,
	45, 732, 1440, 1843, 1731, 914, 662, 45, 691, 757,
	758, 750, 751, 752, 753, 754, 755, 756, 749, 872,
	522, 760, 58, 353, 878, 880, 759, 880, 830, 883,
	832, 1427, 701, 835, 836, 2066, 776, 772, 776, 893,
	45, 45, 58, 521, 896, 948, 820, 897, 898, 899,
	499, 861, 500, 864, 509, 511, 947, 58, 947, 338,
	510, 821, 1599, 1600, 1601, 45, 900, 1147, 45, 1779,
	473, 809, 810, 811, 812, 813, 814, 1658, 1659, 504,
	45, 1428, 668, 947, 691, 1958, 473, 45, 876, 1693,
	748, 747, 757, 758, 750, 751, 752, 753, 754, 755,
	756, 749, 1157, 931, 760, 35, 477, 36, 37, 38,
	478, 872, 676, 408, 323, 45, 410, 776, 1168, 238,
	42, 858, 474, 906, 1433, 984, 863, 239, 874, 869,
	1164, 831, 877, 882, 1012, 1012, 870, 2217, 881, 894,
	933, 2124, 1014, 948, 921, 922, 923, 919, 920, 1994,
	901, 215, 1158, 249, 677, 678, 58, 58, 895, 51,
	44, 970, 945, 944, 1131, 1297, 1726, 948, 455, 1032,
	475, 476, 1098, 776, 977, 937, 655, 1097, 1429, 780,
	946, 1392, 1381, 1380, 892, 484, 945, 944, 1023, 911,
	915, 916, 974, 1382, 642, 975, 207, 2099, 2098, 945,
	944, 945, 944, 2097, 946, 1028, 1383, 945, 944, 1005,
	1002, 204, 203, 1169, 1004, 1542, 1303, 946, 1302, 946,
	691, 1123, 1037, 1038, 821, 946, 202, 339, 1713, 337,
	872, 691, 231, 978, 980, 1010, 1013, 235, 945, 944,
	222, 1405, 47, 49, 1127, 1619, 40, 51, 974, 1159,
	1114, 929, 930, 932, 1089, 1090, 946, 776, 654, 691,
	1170, 1882, 249, 1163, 39, 1165, 679, 889, 507, 1712,
	1320, 1171, 1129, 41, 479, 1174, 348, 1031, 759, 1110,
	50, 691, 1051, 1053, 1054, 1055, 1020, 347, 1088, 945,
	944, 1091, 2176, 554, 2059, 58, 324, 325, 1122, 947,
	759, 763, 764, 921, 922, 923, 730, 946, 1931, 326,
	1212, 1215, 691, 1625, 1162, 1721, 1376, 1289, 1292, 1109,
	924, 1112, 1113, 947, 945, 944, 1388, 904, 1232, 786,
	785, 948, 945, 944, 1124, 651, 947, 487, 947, 1394,
	1395, 399, 946, 1098, 947, 332, 1130, 58, 1249, 1390,
	946, 329, 838, 44, 745, 1291, 1711, 1499, 1141, 1193,
	1241, 1197, 890, 1117, 1195, 1196, 776, 618, 617, 1200,
	1434, 945, 944, 1845, 1204, 947, 945, 944, 1192, 903,
	1384, 1385, 1387, 759, 945, 944, 1386, 481, 482, 946,
	486, 480, 2108, 1233, 946, 985, 2085, 1560, 1206, 746,
	1930, 1454, 946, 1207, 11, 1290, 1265, 1453, 1452, 891,
	45, 839, 1451, 1253, 945, 944, 1272, 2022, 2024, 471,
	467, 469, 745, 1290, 739, 473, 947, 1450, 1449, 1448,
	1447, 472, 946, 554, 1446, 780, 1445, 1392, 1381, 1380,
	1861, 1443, 554, 554, 554, 554, 554, 554, 554, 1382,
	341, 342, 343, 1096, 340, 778, 1330, 1886, 783, 7,
	10, 947, 1383, 1887, 1540, 8, 9, 746, 1358, 947,
	1096, 496, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 1430, 801, 330, 803, 804, 805, 806,
	808, 808, 808, 808, 808, 808, 808, 691, 825, 826,
	827, 828, 58, 1281, 1296, 2023, 1205, 1639, 947, 1637,
	1359, 1160, 1201, 947, 1239, 1399, 1420, 1406, 495, 691,
	691, 947, 1418, 1393, 1283, 1212, 1415, 1202, 1237, 1238,
	1236, 496, 1355, 1431, 1341, 1309, 1342, 496, 1223, 1225,
	1226, 249, 862, 496, 862, 1313, 1224, 1513, 212, 1649,
	216, 947, 1794, 1641, 518, 1172, 1305, 1307, 508, 1308,
	1329, 1161, 1849, 1642, 1311, 1173, 1257, 1649, 1253, 1234,
	1650, 608, 1376, 1255, 1558, 1350, 1314, 1315, 1256, 691,
	1316, 1317, 1388, 1318, 1319, 1660, 1327, 1179, 1650, 1413,
	1398, 1191, 783, 1432, 682, 1394, 1395, 1474, 1475, 1476,
	1871, 1181, 1396, 45, 683, 1390, 1651, 1437, 517, 948,
	938, 939, 613, 1232, 1104, 1647, 612, 608, 1194, 969,
	971, 972, 973, 778, 1121, 1120, 989, 634, 632, 631,
	776, 603, 1007, 1444, 1008, 508, 1384, 1385, 1387, 197,
	784, 762, 1386, 784, 1456, 1116, 902, 625, 554, 554,
	554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
	1290, 524, 198, 58, 1441, 194, 199, 200, 776, 1248,
	1020, 1139, 948, 2211, 2210, 455, 837, 1689, 1233, 778,
	726, 1180, 725, 1511, 724, 1510, 1139, 2209, 554, 1494,
	2196, 948, 1497, 2156, 948, 1741, 1483, 1457, 2175, 948,
	1608, 1459, 748, 747, 757, 758, 750, 751, 752, 753,
	754, 755, 756, 749, 2120, 948, 760, 691, 691, 723,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1037,
	1494, 2114, 910, 2050, 1512, 1898, 948, 910, 1951, 910,
	1950, 1539, 712, 1515, 910, 1948, 1521, 1005, 1002, 776,
	1524, 1525, 1523, 1568, 1561, 1594, 1595, 1596, 1526, 1522,
	1603, 1529, 821, 862, 1552, 515, 1520, 1518, 948, 1549,
	1399, 1399, 1399, 1613, 1399, 1399, 1533, 780, 1501, 1393,
	691, 691, 691, 1466, 1947, 201, 1466, 1946, 1543, 1562,
	249, 1139, 1876, 691, 691, 1544, 1466, 948, 45, 910,
	1829, 1496, 943, 780, 2075, 1494, 1828, 1643, 1455, 2076,
	212, 1646, 216, 748, 747, 757, 758, 750, 751, 752,
	753, 754, 755, 756, 749, 1825, 1824, 760, 1531, 508,
	2041, 2084, 58, 691, 1895, 2203, 1559, 1212, 1676, 1679,
	1212, 1212, 1629, 1606, 1605, 1972, 1610, 1611, 1612, 1617,
	1618, 554, 1235, 1547, 554, 508, 554, 554, 554, 554,
	554, 554, 1669, 910, 1817, 58, 1345, 1564, 1565, 1566,
	1645, 1570, 862, 776, 1344, 776, 2129, 776, 1254, 2084,
	1896, 1343, 655, 195, 196, 1716, 1652, 1653, 1654, 1655,
	1656, 1897, 215, 2084, 1666, 1177, 1668, 1672, 1253, 1662,
	1898, 197, 1020, 1664, 1681, 1682, 1674, 910, 1816, 910,
	1810, 910, 1809, 1550, 910, 1808, 1684, 1898, 1688, 872,
	910, 1742, 1273, 1691, 198, 910, 1671, 194, 199, 200,
	1258, 1694, 567, 1745, 1466, 1626, 1125, 1758, 1293, 910,
	1621, 58, 910, 1620, 1284, 948, 1284, 1751, 1494, 1493,
	1179, 2001, 1755, 655, 1191, 214, 218, 1715, 1972, 554,
	1763, 845, 2171, 219, 1181, 216, 910, 1471, 1795, 834,
	1762, 1761, 910, 1416, 910, 1352, 1139, 1351, 1768, 1554,
	218, 1494, 218, 218, 1399, 1017, 948, 1139, 1260, 1803,
	1803, 1767, 1746, 910, 1217, 759, 841, 1142, 1212, 1212,
	833, 691, 1765, 551, 691, 691, 1284, 1787, 1773, 249,
	1793, 910, 909, 848, 847, 841, 842, 841, 840, 1733,
	948, 1140, 1665, 875, 1667, 1305, 647, 1673, 1804, 241,
	240, 829, 1753, 646, 1754, 232, 647, 1559, 230, 1903,
	1906, 1907, 1908, 1904, 1180, 1905, 1909, 201, 465, 2088,
	2089, 1325, 1323, 656, 197, 647, 229, 1017, 554, 230,
	45, 1821, 1813, 1814, 1898, 748, 747, 757, 758, 750,
	751, 752, 753, 754, 755, 756, 749, 198, 1800, 760,
	194, 199, 200, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 58, 1494, 2030, 1923, 780, 1776, 1293, 1324,
	1322, 655, 1714, 1284, 1304, 1740, 759, 1826, 1139, 1827,
	1155, 1154, 409, 783, 910, 1469, 1470, 988, 1807, 1844,
	1846, 1847, 1848, 940, 508, 850, 849, 1833, 1840, 1478,
	1480, 1482, 1841, 1842, 1862, 846, 778, 1235, 554, 554,
	554, 1858, 554, 508, 1857, 195, 196, 1920, 508, 249,
	2151, 1885, 2149, 58, 2112, 1964, 1472, 218, 876, 1822,
	1933, 418, 311, 2088, 2089, 2129, 401, 218, 218, 776,
	1634, 218, 350, 1633, 862, 1630, 1839, 1628, 1627, 1548,
	1888, 1834, 1462, 1884, 1461, 1426, 1422, 1875, 1812, 1411,
	1410, 1878, 1893, 691, 1954, 1910, 554, 1919, 1409, 1347,
	201, 1922, 1924, 1346, 1903, 1906, 1907, 1908, 1904, 1937,
	1905, 1909, 1859, 431, 1264, 1208, 1773, 1939, 242, 1787,
	312, 1941, 1153, 554, 554, 554, 554, 1559, 1881, 1148,
	1144, 1559, 1754, 1126, 982, 981, 979, 976, 941, 888,
	1753, 860, 859, 740, 713, 652, 637, 218, 1891, 1892,
	853, 218, 426, 218, 218, 862, 1955, 530, 1438, 526,
	218, 1966, 457, 1967, 493, 457, 424, 218, 1098, 417,
	218, 406, 218, 2005, 1960, 433, 434, 1753, 15, 218,
	653, 1753, 1436, 1763, 1968, 2091, 1498, 851, 638, 438,
	1604, 1551, 1991, 1990, 58, 437, 327, 2000, 195, 196,
	321, 52, 58, 1873, 1993, 1719, 2002, 776, 1877, 58,
	2007, 2008, 2015, 2010, 1949, 2013, 1983, 2016, 2018, 2094,
	2014, 218, 1023, 1956, 1957, 2029, 2093, 2028, 554, 2026,
	2006, 2012, 2011, 2009, 2167, 58, 1773, 2121, 1965, 2039,
	1773, 1773, 1773, 1773, 1773, 2017, 1970, 1907, 1908, 1278,
	1279, 2038, 1854, 548, 1773, 802, 1988, 485, 759, 492,
	1787, 1559, 1504, 1936, 1881, 2057, 218, 619, 2037, 743,
	218, 218, 1942, 1999, 2169, 1253, 1938, 1505, 458, 778,
	1780, 778, 1354, 778, 2061, 919, 920, 2042, 2043, 554,
	742, 554, 776, 1961, 1962, 1274, 2101, 645, 1275, 1963,
	643, 1253, 641, 2055, 331, 2092, 2083, 2077, 1093, 2027,
	1683, 1397, 1137, 2081, 1773, 1881, 1099, 1881, 1720, 866,
	457, 1133, 776, 1134, 1135, 1136, 699, 705, 1269, 2069,
	58, 1020, 2103, 2164, 1973, 1853, 1132, 2102, 1270, 1736,
	2163, 2054, 2117, 1773, 1547, 1799, 1098, 1798, 2130, 2139,
	2101, 2005, 1797, 2133, 1796, 1098, 1460, 2056, 1697, 1696,
	2005, 2140, 33, 2125, 2218, 1754, 1710, 1774, 1458, 1763,
	1763, 1988, 46, 776, 520, 2146, 2119, 2142, 2126, 2127,
	1762, 1761, 1025, 58, 1022, 1743, 704, 703, 2135, 1747,
	1894, 2110, 2111, 1143, 2143, 12, 2115, 698, 447, 448,
	449, 780, 1, 1392, 1381, 1380, 1571, 17, 2044, 2045,
	2166, 16, 2062, 2161, 2046, 1382, 440, 1988, 2178, 2170,
	872, 2052, 2053, 872, 872, 872, 1039, 2195, 1383, 552,
	2058, 537, 2181, 2060, 2180, 1777, 1567, 2191, 2192, 2193,
	1597, 1661, 602, 2194, 1823, 379, 2139, 2207, 2133, 1253,
	2198, 1500, 527, 19, 2208, 2202, 1748, 2206, 2140, 2179,
	1553, 865, 2080, 644, 2082, 1644, 1176, 780, 913, 776,
	699, 218, 362, 2215, 351, 905, 1015, 1016, 1018, 218,
	2133, 2219, 488, 1757, 2204, 2221, 53, 2222, 218, 1098,
	554, 2224, 14, 1442, 2005, 363, 361, 360, 359, 358,
	776, 1559, 356, 605, 397, 734, 1100, 1101, 1102, 1103,
	1830, 1105, 403, 427, 248, 2220, 32, 246, 247, 508,
	251, 2113, 219, 1782, 216, 1932, 1287, 554, 968, 2104,
	554, 1789, 554, 2136, 554, 1507, 554, 554, 1376, 2162,
	2116, 857, 1328, 2144, 1754, 2145, 699, 1094, 1388, 538,
	1222, 2074, 950, 534, 1052, 1772, 1916, 1889, 1902, 389,
	1900, 1394, 1395, 1899, 2090, 392, 393, 2086, 1771, 1737,
	1980, 1390, 1277, 26, 27, 1912, 20, 1718, 1389, 1872,
	1379, 1874, 1021, 1280, 6, 1391, 1374, 5, 4, 21,
	380, 3, 219, 30, 1918, 1373, 1372, 1371, 1370, 1368,
	1369, 1366, 1384, 1385, 1387, 387, 1367, 375, 1386, 1365,
	1271, 22, 23, 197, 24, 376, 1036, 698, 457, 1560,
	777, 1036, 1036, 1036, 1036, 2, 0, 1036, 1036, 1036,
	1036, 0, 0, 0, 214, 0, 198, 0, 0, 194,
	199, 200, 0, 0, 689, 0, 0, 1943, 1944, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1036, 1036,
	1036, 1036, 0, 0, 0, 0, 0, 0, 1959, 0,
	0, 0, 0, 0, 0, 0, 1250, 1251, 383, 0,
	378, 388, 699, 197, 218, 0, 1259, 0, 0, 0,
	385, 384, 0, 699, 0, 1774, 218, 0, 0, 1774,
	1774, 1774, 1774, 1774, 0, 0, 198, 0, 218, 194,
	199, 200, 1984, 1912, 0, 2025, 1985, 0, 0, 0,
	0, 699, 18, 0, 0, 0, 1276, 0, 0, 0,
	0, 550, 1282, 0, 1285, 1286, 780, 0, 1392, 1381,
	1380, 0, 0, 699, 0, 1393, 0, 695, 0, 0,
	1382, 0, 0, 857, 1298, 0, 1299, 1300, 1301, 201,
	0, 0, 0, 1383, 698, 0, 0, 508, 0, 0,
	219, 0, 216, 1774, 699, 747, 757, 758, 750, 751,
	752, 753, 754, 755, 756, 749, 0, 0, 760, 2047,
	2048, 1321, 698, 0, 1326, 0, 1756, 0, 2078, 2079,
	1332, 0, 1774, 0, 0, 214, 0, 1334, 25, 0,
	0, 0, 1337, 1338, 698, 1339, 1340, 0, 0, 0,
	28, 29, 0, 31, 0, 0, 0, 381, 862, 201,
	213, 0, 1353, 382, 0, 0, 44, 558, 1011, 556,
	560, 561, 562, 563, 0, 698, 62, 559, 564, 0,
	0, 0, 0, 0, 220, 0, 0, 195, 196, 0,
	0, 197, 0, 1036, 942, 0, 0, 0, 0, 0,
	0, 0, 0, 1376, 0, 0, 0, 2134, 220, 862,
	220, 220, 0, 1388, 198, 0, 0, 194, 199, 200,
	0, 854, 0, 0, 0, 0, 1394, 1395, 2152, 2153,
	2154, 0, 0, 0, 0, 0, 1390, 390, 0, 391,
	0, 0, 1464, 1465, 0, 0, 0, 780, 0, 1392,
	1381, 1380, 0, 0, 0, 1036, 0, 195, 196, 0,
	0, 1382, 1333, 386, 0, 0, 0, 1384, 1385, 1387,
	0, 1729, 948, 1386, 1383, 0, 0, 0, 0, 0,
	0, 1491, 1492, 0, 1560, 0, 0, 0, 549, 699,
	0, 0, 0, 0, 0, 0, 0, 695, 1009, 0,
	0, 0, 2134, 0, 0, 2205, 0, 0, 0, 0,
	0, 699, 699, 0, 0, 0, 1514, 748, 747, 757,
	758, 750, 751, 752, 753, 754, 755, 756, 749, 2040,
	0, 760, 0, 0, 2134, 0, 862, 201, 0, 0,
	0, 1128, 0, 748, 747, 757, 758, 750, 751, 752,
	753, 754, 755, 756, 749, 0, 0, 760, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 0, 0, 1156,
	0, 699, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 698, 1376, 220, 0, 1916, 0, 0,
	0, 0, 714, 0, 1388, 220, 220, 759, 0, 220,
	220, 0, 62, 0, 0, 0, 0, 1394, 1395, 0,
	1393, 741, 0, 0, 0, 0, 45, 1390, 0, 0,
	0, 0, 1216, 219, 0, 1918, 0, 0, 0, 0,
	0, 0, 0, 854, 0, 195, 196, 0, 0, 779,
	0, 0, 698, 0, 695, 0, 0, 1036, 1384, 1385,
	1387, 0, 0, 0, 1386, 457, 1036, 0, 0, 0,
	0, 2168, 0, 0, 0, 0, 0, 800, 0, 0,
	0, 0, 695, 0, 0, 220, 0, 0, 0, 220,
	0, 220, 220, 0, 0, 0, 0, 0, 220, 0,
	456, 0, 0, 220, 695, 220, 0, 0, 220, 0,
	220, 0, 0, 0, 0, 0, 0, 220, 0, 699,
	699, 0, 62, 0, 197, 0, 1890, 0, 0, 0,
	0, 0, 0, 0, 0, 695, 0, 0, 1695, 0,
	0, 1914, 0, 0, 0, 0, 0, 198, 0, 0,
	194, 199, 200, 0, 1717, 0, 0, 0, 219, 220,
	216, 0, 0, 0, 1722, 697, 0, 0, 0, 1723,
	0, 0, 1724, 1725, 0, 0, 1727, 1728, 1730, 1732,
	1734, 0, 699, 699, 699, 0, 0, 0, 0, 917,
	857, 698, 1766, 0, 0, 699, 699, 0, 0, 0,
	0, 1393, 0, 0, 220, 0, 0, 0, 220, 220,
	0, 949, 0, 0, 0, 0, 0, 779, 0, 0,
	759, 0, 0, 0, 0, 0, 0, 0, 0, 780,
	0, 1392, 1381, 1380, 983, 699, 0, 0, 62, 1407,
	1408, 0, 219, 1382, 216, 0, 759, 0, 0, 197,
	0, 62, 1995, 698, 698, 698, 1383, 0, 220, 62,
	0, 0, 0, 0, 693, 0, 698, 698, 0, 0,
	201, 0, 198, 779, 0, 194, 199, 200, 1034, 219,
	0, 216, 0, 0, 0, 0, 0, 1056, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 698, 0, 0, 856,
	0, 1996, 0, 0, 0, 0, 0, 0, 0, 1490,
	854, 0, 0, 0, 1831, 1832, 0, 0, 1835, 1836,
	1837, 0, 0, 197, 0, 0, 0, 0, 218, 218,
	0, 0, 695, 695, 748, 747, 757, 758, 750, 751,
	752, 753, 754, 755, 756, 749, 198, 0, 760, 194,
	199, 200, 0, 1860, 0, 0, 1376, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 1388, 0, 0, 0,
	1870, 0, 0, 0, 0, 697, 0, 0, 0, 1394,
	1395, 0, 696, 198, 0, 201, 194, 199, 200, 1390,
	0, 0, 695, 699, 0, 0, 699, 699, 693, 220,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 62, 0, 0, 0, 220, 0, 0, 0,
	1384, 1385, 1387, 1209, 1213, 0, 1386, 0, 1545, 1220,
	1221, 0, 62, 0, 0, 0, 0, 1940, 0, 0,
	0, 0, 0, 219, 0, 216, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 0, 698, 0, 0, 698, 698, 201,
	0, 1263, 0, 0, 693, 0, 0, 0, 0, 0,
	0, 1036, 0, 195, 196, 0, 0, 0, 0, 0,
	1622, 1623, 1624, 0, 0, 1974, 0, 1975, 1976, 1977,
	1978, 1979, 1267, 1631, 1632, 0, 201, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 780, 697, 1392, 1381, 1380, 855, 0, 218, 218,
	854, 695, 0, 0, 197, 1382, 0, 218, 1917, 0,
	0, 0, 0, 1670, 2020, 0, 456, 62, 1383, 0,
	697, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	194, 199, 200, 1393, 0, 0, 0, 195, 196, 0,
	0, 0, 697, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 699, 219, 2051, 216, 0,
	0, 0, 0, 695, 695, 695, 0, 0, 0, 219,
	0, 1918, 696, 697, 195, 196, 695, 695, 0, 0,
	693, 0, 220, 2065, 1995, 0, 1969, 0, 0, 0,
	0, 693, 0, 0, 220, 0, 0, 759, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 1412, 1213,
	0, 0, 0, 0, 0, 0, 695, 0, 0, 693,
	0, 0, 0, 218, 0, 0, 698, 218, 1376, 0,
	214, 218, 218, 218, 218, 218, 0, 0, 1388, 717,
	0, 693, 0, 2019, 0, 218, 0, 197, 0, 1917,
	201, 1394, 1395, 0, 0, 62, 0, 0, 0, 0,
	197, 1390, 0, 0, 0, 2118, 346, 0, 0, 0,
	198, 0, 693, 194, 199, 200, 0, 0, 0, 0,
	0, 1815, 0, 198, 1818, 1819, 194, 199, 200, 0,
	779, 218, 1384, 1385, 1387, 0, 0, 0, 1386, 0,
	0, 0, 0, 2155, 0, 218, 0, 62, 855, 1495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 2165, 0, 1506, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 2172, 2173, 2174,
	0, 0, 0, 0, 0, 2177, 0, 696, 195, 196,
	0, 0, 780, 0, 1392, 1381, 1380, 0, 856, 1530,
	0, 0, 0, 0, 0, 0, 1382, 0, 0, 696,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1383,
	697, 697, 0, 0, 695, 1541, 0, 695, 695, 0,
	0, 0, 0, 201, 2212, 2213, 2214, 0, 0, 0,
	696, 583, 0, 584, 0, 0, 201, 0, 214, 234,
	0, 573, 574, 1557, 0, 0, 0, 214, 0, 0,
	0, 694, 0, 2225, 212, 0, 216, 0, 0, 0,
	220, 1563, 0, 0, 0, 1393, 0, 0, 0, 0,
	697, 0, 0, 1602, 0, 800, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 693, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 780, 0,
	1392, 1381, 1380, 1953, 0, 62, 0, 0, 599, 693,
	693, 1635, 1382, 0, 0, 0, 1880, 0, 1917, 1376,
	0, 195, 196, 0, 0, 1383, 0, 0, 0, 1388,
	0, 0, 0, 0, 195, 196, 597, 0, 0, 0,
	0, 0, 1394, 1395, 0, 197, 0, 0, 0, 0,
	692, 1213, 1390, 0, 1213, 1213, 0, 0, 0, 0,
	0, 0, 0, 779, 0, 779, 0, 779, 198, 693,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 1384, 1385, 1387, 0, 0, 0, 1386,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1560, 0, 0, 0, 0, 0, 695, 0, 856, 697,
	0, 0, 0, 0, 0, 855, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1739, 0, 0,
	0, 0, 1744, 0, 0, 1376, 0, 696, 696, 1750,
	0, 0, 0, 0, 0, 1388, 0, 0, 0, 0,
	0, 0, 0, 456, 0, 0, 0, 585, 1394, 1395,
	0, 0, 531, 0, 0, 0, 0, 0, 1390, 0,
	0, 697, 697, 697, 0, 0, 0, 0, 0, 0,
	0, 586, 587, 0, 697, 697, 0, 0, 779, 779,
	0, 201, 0, 0, 0, 0, 0, 696, 0, 1384,
	1385, 1387, 0, 0, 45, 1386, 0, 693, 693, 0,
	0, 0, 1213, 1213, 0, 0, 1560, 0, 0, 0,
	0, 0, 0, 0, 697, 0, 1393, 0, 0, 0,
	0, 0, 0, 0, 588, 598, 594, 595, 592, 593,
	591, 590, 589, 600, 575, 576, 577, 578, 579, 581,
	0, 0, 572, 571, 580, 0, 0, 0, 0, 0,
	62, 62, 62, 62, 62, 62, 0, 0, 0, 0,
	693, 693, 693, 0, 0, 0, 0, 1989, 0, 0,
	0, 0, 0, 693, 693, 0, 0, 0, 0, 195,
	196, 596, 0, 0, 0, 0, 0, 1855, 1856, 1509,
	0, 0, 761, 0, 0, 0, 0, 0, 0, 0,
	0, 765, 766, 767, 768, 769, 770, 771, 0, 0,
	0, 0, 62, 693, 774, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 824, 855, 696, 0, 0, 0,
	0, 0, 1393, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 824, 0, 818, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 697, 1558, 0, 697, 697, 0, 696, 696,
	696, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	818, 696, 696, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 220, 0, 0,
	0, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 299, 300, 301, 302,
	303, 696, 304, 305, 0, 306, 307, 308, 310, 309,
	0, 1003, 819, 0, 1986, 0, 0, 0, 0, 0,
	252, 817, 0, 0, 62, 0, 823, 822, 294, 295,
	296, 297, 298, 299, 300, 301, 302, 303, 0, 0,
	0, 693, 774, 0, 693, 693, 0, 0, 0, 819,
	0, 0, 0, 0, 0, 0, 0, 252, 817, 0,
	0, 0, 0, 823, 822, 2036, 0, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 780, 0,
	1392, 1381, 1380, 0, 0, 0, 0, 0, 774, 0,
	0, 0, 1382, 0, 220, 0, 0, 1050, 2064, 0,
	0, 0, 0, 0, 0, 1383, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 0, 2072, 0, 2073,
	0, 0, 62, 0, 697, 0, 780, 0, 1392, 1381,
	1380, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1382, 0, 0, 0, 0, 0, 780, 0, 1392, 1381,
	1380, 0, 253, 1383, 0, 0, 0, 0, 0, 696,
	1382, 0, 696, 696, 0, 0, 220, 220, 0, 0,
	0, 0, 0, 1383, 0, 220, 220, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 945,
	944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2147, 0, 0, 2148, 0, 1376, 2150, 946, 0, 945,
	944, 0, 0, 693, 0, 1388, 0, 1759, 0, 0,
	0, 0, 0, 2160, 0, 0, 0, 946, 1394, 1395,
	0, 0, 0, 0, 0, 2064, 0, 0, 1390, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 779,
	1227, 0, 0, 1240, 0, 1242, 1243, 1244, 1245, 1246,
	1247, 0, 0, 1388, 0, 0, 0, 0, 0, 1384,
	1385, 1387, 0, 1376, 0, 1386, 1394, 1395, 2197, 779,
	0, 220, 0, 1388, 0, 220, 1390, 0, 0, 220,
	220, 220, 220, 220, 0, 0, 1394, 1395, 0, 0,
	0, 220, 0, 220, 0, 0, 1390, 220, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 1384, 1385, 1387,
	0, 0, 62, 1386, 0, 0, 947, 0, 0, 62,
	0, 0, 0, 0, 1764, 0, 0, 1384, 1385, 1387,
	0, 696, 0, 1386, 0, 0, 947, 0, 0, 220,
	0, 0, 0, 0, 1764, 62, 0, 0, 765, 0,
	0, 0, 0, 220, 0, 720, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 719, 0, 0, 0, 0, 718, 0, 0,
	0, 0, 220, 0, 583, 0, 584, 0, 0, 0,
	0, 0, 0, 0, 573, 574, 0, 0, 0, 0,
	0, 0, 1393, 0, 508, 0, 0, 212, 558, 555,
	556, 560, 561, 562, 563, 0, 0, 0, 559, 564,
	565, 566, 721, 0, 0, 0, 0, 716, 546, 0,
	0, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	1393, 0, 0, 0, 0, 543, 544, 0, 0, 2141,
	0, 599, 0, 545, 0, 0, 1058, 542, 547, 0,
	1393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 597,
	0, 0, 0, 62, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1477, 1479,
	1481, 198, 0, 0, 194, 199, 200, 1484, 1485, 1486,
	0, 1489, 0, 0, 553, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1069, 1075, 1073, 0, 0,
	1070, 0, 0, 1068, 0, 1050, 1077, 0, 0, 1076,
	1062, 1072, 1074, 1071, 1066, 0, 1061, 0, 1079, 1078,
	1080, 1059, 1082, 0, 0, 0, 1086, 1083, 1085, 1084,
	585, 1081, 1534, 1535, 1536, 1537, 0, 0, 0, 0,
	1063, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 570, 586, 587, 0, 0, 0, 0,
	0, 1065, 1067, 0, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 588, 598, 594,
	595, 592, 593, 591, 590, 589, 600, 575, 576, 577,
	578, 579, 581, 0, 0, 572, 571, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1636, 1573, 1574,
	1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584,
	1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 0,
	0, 0, 195, 196, 596, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1685, 0,
	1686, 0, 1687, 0, 0, 0, 0, 0, 1690, 0,
	1692, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 168, 0, 127, 181, 95, 115,
	190, 117, 118, 153, 74, 136, 0, 112, 93, 0,
	0, 0, 98, 67, 107, 68, 96, 129, 0, 94,
	0, 1615, 139, 0, 57, 0, 188, 0, 144, 0,
	0, 0, 0, 0, 131, 172, 134, 163, 126, 154,
	83, 143, 183, 113, 149, 184, 0, 1404, 0, 44,
	0, 1402, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 178, 109, 80, 193, 0, 152, 66, 146,
	0, 0, 72, 75, 189, 176, 103, 102, 1401, 0,
	0, 0, 0, 0, 0, 130, 135, 159, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 1400, 0, 0,
	0, 99, 0, 142, 0, 0, 0, 79, 1614, 0,
	1616, 0, 0, 0, 82, 0, 100, 160, 0, 63,
	0, 0, 0, 0, 166, 173, 125, 0, 0, 177,
	122, 121, 0, 0, 0, 0, 0, 0, 114, 60,
	197, 191, 0, 0, 180, 132, 171, 97, 108, 276,
	104, 0, 0, 0, 105, 106, 141, 155, 0, 0,
	0, 0, 0, 198, 162, 0, 194, 199, 200, 1838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	64, 101, 164, 167, 87, 151, 76, 110, 157, 111,
	133, 92, 0, 0, 0, 0, 1864, 0, 0, 1865,
	0, 1866, 0, 1867, 0, 1868, 1869, 294, 295, 296,
	297, 298, 299, 300, 301, 302, 303, 0, 304, 305,
	0, 306, 307, 308, 310, 309, 277, 278, 279, 283,
	281, 280, 282, 254, 256, 0, 252, 255, 261, 257,
	258, 259, 273, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 274, 285, 286, 287, 288, 289,
	290, 291, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 201, 70, 91, 174,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 45,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	90, 84, 85, 137, 138, 185, 186, 187, 161, 81,
	0, 0, 88, 89, 0, 169, 0, 0, 0, 140,
	0, 253, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 116, 65, 120, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 0, 124, 119, 145, 147, 156,
	165, 175, 182, 158, 195, 196, 179, 168, 0, 127,
	181, 95, 115, 190, 117, 118, 153, 74, 136, 0,
	112, 93, 0, 0, 0, 98, 67, 107, 68, 96,
	129, 0, 94, 0, 170, 139, 0, 57, 0, 188,
	0, 144, 0, 0, 0, 0, 0, 131, 172, 134,
	163, 126, 154, 83, 143, 183, 113, 149, 184, 0,
	0, 0, 44, 0, 56, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 178, 109, 80, 193, 0,
	152, 66, 146, 0, 0, 72, 75, 189, 176, 103,
	102, 0, 0, 0, 0, 0, 0, 0, 130, 135,
	159, 123, 0, 0, 0, 0, 0, 1527, 0, 0,
	0, 0, 0, 0, 99, 0, 142, 0, 0, 0,
	79, 73, 0, 128, 0, 0, 0, 82, 0, 100,
	160, 0, 63, 0, 0, 0, 0, 166, 173, 373,
	0, 0, 177, 122, 121, 365, 0, 364, 1528, 368,
	369, 372, 60, 197, 191, 0, 0, 366, 374, 171,
	97, 108, 0, 104, 0, 0, 0, 105, 106, 141,
	155, 0, 0, 0, 0, 0, 198, 162, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 64, 101, 164, 167, 87, 151, 76,
	110, 157, 111, 133, 92, 0, 1069, 1075, 1073, 0,
	0, 1070, 0, 0, 1068, 0, 0, 1077, 0, 0,
	1076, 1062, 1072, 1074, 1071, 1066, 0, 1061, 0, 1079,
	1078, 1080, 1059, 1082, 0, 0, 0, 1086, 1083, 1085,
	1084, 0, 1081, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 1067, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 201,
	70, 91, 174, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 45, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 90, 84, 85, 137, 138, 185, 186,
	187, 161, 81, 0, 0, 88, 89, 0, 169, 0,
	0, 0, 140, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 116, 65, 120, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 0, 124, 119,
	145, 147, 156, 165, 175, 182, 158, 195, 196, 0,
	367, 179, 168, 0, 127, 181, 95, 115, 190, 117,
	118, 153, 74, 136, 0, 112, 93, 0, 0, 0,
	98, 67, 107, 68, 96, 129, 0, 94, 0, 170,
	139, 0, 57, 0, 188, 0, 144, 0, 0, 0,
	0, 0, 131, 172, 134, 163, 126, 154, 83, 143,
	183, 113, 149, 184, 0, 1404, 0, 44, 0, 1402,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	178, 109, 80, 193, 0, 152, 66, 146, 0, 0,
	72, 75, 189, 176, 103, 102, 1401, 0, 0, 0,
	0, 0, 0, 130, 135, 159, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 1400, 0, 0, 0, 99,
	0, 142, 0, 0, 0, 79, 73, 0, 128, 399,
	0, 0, 82, 0, 100, 160, 0, 63, 0, 0,
	0, 0, 166, 173, 125, 0, 0, 177, 122, 121,
	0, 0, 0, 0, 0, 0, 114, 60, 197, 191,
	0, 0, 180, 132, 171, 97, 108, 0, 104, 0,
	0, 0, 105, 106, 141, 155, 0, 0, 0, 0,
	0, 198, 162, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 64, 101,
	164, 167, 87, 151, 76, 110, 157, 111, 133, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 201, 70, 91, 174, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 45, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 90, 84,
	85, 137, 138, 185, 186, 187, 161, 81, 0, 0,
	88, 89, 0, 169, 0, 0, 0, 140, 0, 0,
	0, 192, 0, 0, 0, 0, 0, 0, 0, 116,
	65, 120, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 0, 124, 119, 145, 147, 156, 165, 175,
	182, 158, 195, 196, 179, 168, 0, 127, 181, 95,
	115, 190, 117, 118, 153, 74, 136, 0, 112, 93,
	0, 0, 0, 98, 67, 107, 68, 96, 129, 0,
	94, 0, 170, 139, 0, 0, 0, 188, 0, 144,
	0, 0, 0, 0, 0, 131, 172, 134, 163, 126,
	154, 83, 143, 183, 113, 149, 184, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 178, 109, 80, 193, 0, 152, 66,
	146, 0, 0, 72, 75, 189, 176, 103, 102, 0,
	0, 0, 0, 0, 0, 0, 130, 135, 159, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 142, 0, 0, 0, 79, 73,
	780, 128, 1392, 1381, 1380, 82, 0, 100, 160, 0,
	63, 0, 0, 0, 1382, 166, 173, 125, 0, 0,
	177, 122, 121, 0, 0, 0, 0, 1383, 0, 114,
	60, 197, 191, 0, 0, 180, 132, 171, 97, 108,
	0, 104, 0, 0, 0, 105, 106, 141, 155, 0,
	0, 0, 0, 0, 198, 162, 0, 194, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 64, 101, 164, 167, 87, 151, 76, 110, 157,
	111, 133, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1783, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1376, 1791, 0,
	0, 0, 0, 0, 0, 0, 0, 1388, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1394, 1395, 0, 0, 0, 0, 0, 0, 0, 0,
	1390, 0, 69, 0, 0, 0, 0, 201, 70, 91,
	174, 0, 0, 0, 0, 1792, 1790, 1786, 1785, 0,
	45, 0, 0, 150, 0, 0, 0, 0, 1788, 0,
	0, 1384, 1385, 1387, 0, 0, 0, 1386, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1362, 0,
	86, 90, 84, 85, 137, 138, 185, 186, 187, 161,
	81, 0, 0, 88, 89, 0, 169, 0, 0, 0,
	140, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 116, 65, 120, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 0, 124, 119, 145, 147,
	156, 165, 175, 182, 158, 195, 196, 179, 168, 0,
	127, 181, 95, 115, 190, 117, 118, 153, 74, 136,
	0, 112, 93, 0, 0, 0, 98, 67, 107, 68,
	96, 129, 0, 94, 0, 170, 139, 0, 57, 0,
	188, 0, 144, 0, 0, 0, 0, 0, 131, 172,
	134, 163, 126, 154, 83, 143, 183, 113, 149, 184,
	0, 1404, 0, 44, 0, 1402, 0, 0, 0, 0,
	0, 0, 0, 0, 1393, 148, 178, 109, 80, 193,
	0, 152, 66, 146, 0, 0, 72, 75, 189, 176,
	103, 102, 1401, 0, 0, 0, 0, 0, 0, 130,
	135, 159, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 1400, 0, 0, 0, 99, 0, 142, 0, 0,
	0, 79, 73, 780, 128, 1392, 1381, 1380, 82, 0,
	100, 160, 0, 63, 0, 0, 0, 1382, 166, 173,
	125, 0, 0, 177, 122, 121, 0, 0, 0, 0,
	1383, 0, 114, 60, 197, 191, 0, 0, 180, 132,
	171, 97, 108, 0, 104, 0, 0, 0, 105, 106,
	141, 155, 0, 0, 0, 0, 0, 198, 162, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 64, 101, 164, 167, 87, 151,
	76, 110, 157, 111, 133, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1992, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1388, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1394, 1395, 0, 0, 0, 0, 0,
	0, 0, 0, 1390, 0, 69, 0, 0, 0, 0,
	201, 70, 91, 174, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 45, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 1384, 1385, 1387, 0, 0, 0,
	1386, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1764, 0, 86, 90, 84, 85, 137, 138, 185,
	186, 187, 161, 81, 0, 0, 88, 89, 0, 169,
	0, 0, 0, 140, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 116, 65, 120, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 0, 124,
	119, 145, 147, 156, 165, 175, 182, 158, 195, 196,
	179, 168, 0, 127, 181, 95, 115, 190, 117, 118,
	153, 74, 136, 0, 112, 93, 0, 0, 0, 98,
	67, 107, 68, 96, 129, 0, 94, 0, 170, 139,
	0, 0, 0, 188, 0, 144, 0, 0, 0, 0,
	0, 131, 172, 134, 163, 126, 154, 83, 143, 183,
	113, 149, 184, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1393, 148, 178,
	109, 80, 193, 0, 152, 66, 146, 0, 0, 72,
	75, 189, 176, 103, 102, 0, 0, 0, 0, 0,
	0, 0, 130, 135, 159, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	142, 0, 0, 0, 79, 73, 0, 128, 0, 0,
	0, 82, 0, 100, 160, 0, 63, 0, 0, 0,
	0, 166, 173, 125, 0, 0, 177, 122, 121, 0,
	0, 0, 0, 0, 0, 114, 60, 197, 191, 0,
	0, 180, 132, 171, 97, 108, 0, 104, 0, 0,
	0, 105, 106, 141, 155, 0, 0, 0, 0, 0,
	198, 162, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 64, 101, 164,
	167, 87, 151, 76, 110, 157, 111, 133, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1925, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1791, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 201, 70, 91, 174, 0, 0, 0,
	0, 1792, 1790, 0, 0, 0, 45, 0, 0, 150,
	0, 0, 0, 0, 1788, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 90, 84, 85,
	137, 138, 185, 186, 187, 161, 81, 0, 0, 88,
	89, 0, 169, 0, 0, 0, 140, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 116, 65,
	120, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 0, 124, 119, 145, 147, 156, 165, 175, 182,
	158, 195, 196, 179, 168, 0, 127, 181, 95, 115,
	190, 117, 118, 153, 74, 136, 0, 112, 93, 0,
	0, 0, 98, 67, 107, 68, 96, 129, 0, 94,
	0, 170, 139, 0, 57, 0, 188, 0, 144, 0,
	0, 0, 0, 0, 131, 172, 134, 163, 126, 154,
	83, 143, 183, 113, 149, 184, 0, 0, 0, 44,
	0, 56, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 178, 109, 80, 193, 0, 152, 66, 146,
	0, 0, 72, 75, 189, 176, 103, 102, 0, 0,
	0, 0, 0, 0, 0, 130, 135, 159, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 142, 0, 0, 0, 79, 73, 0,
	128, 0, 0, 0, 82, 0, 100, 160, 0, 63,
	0, 0, 0, 0, 166, 173, 125, 0, 0, 177,
	122, 121, 0, 671, 673, 0, 0, 0, 372, 60,
	197, 191, 0, 0, 675, 132, 171, 97, 108, 0,
	104, 0, 0, 0, 105, 106, 141, 155, 0, 0,
	0, 0, 0, 198, 162, 0, 194, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	64, 101, 164, 167, 87, 151, 76, 110, 157, 111,
	133, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 201, 70, 91, 174,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 45,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	90, 84, 85, 137, 138, 185, 186, 187, 161, 81,
	0, 0, 88, 89, 0, 169, 0, 0, 0, 140,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 116, 65, 120, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 0, 124, 119, 145, 147, 156,
	165, 175, 182, 158, 195, 196, 179, 168, 0, 127,
	181, 95, 115, 190, 117, 118, 153, 74, 136, 0,
	112, 93, 0, 0, 0, 98, 67, 107, 68, 96,
	129, 0, 94, 0, 170, 139, 0, 0, 0, 188,
	0, 144, 0, 0, 0, 0, 0, 131, 172, 134,
	163, 126, 154, 83, 143, 183, 113, 149, 184, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 178, 109, 80, 193, 0,
	152, 66, 146, 0, 0, 72, 75, 189, 176, 103,
	102, 0, 0, 0, 0, 0, 0, 0, 130, 135,
	159, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 142, 0, 0, 0,
	79, 73, 0, 128, 0, 0, 0, 82, 0, 100,
	160, 0, 63, 0, 0, 0, 0, 166, 173, 125,
	0, 0, 177, 122, 121, 0, 0, 0, 0, 0,
	0, 114, 60, 197, 191, 0, 0, 180, 132, 171,
	97, 108, 0, 104, 0, 0, 0, 105, 106, 141,
	155, 0, 0, 0, 0, 0, 198, 162, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 64, 101, 164, 167, 87, 151, 76,
	110, 157, 111, 133, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1791, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 201,
	70, 91, 174, 0, 0, 0, 0, 1792, 1790, 0,
	0, 0, 45, 0, 0, 150, 0, 0, 0, 0,
	1788, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 90, 84, 85, 137, 138, 185, 186,
	187, 161, 81, 0, 0, 88, 89, 0, 169, 0,
	0, 0, 140, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 116, 65, 120, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 0, 124, 119,
	145, 147, 156, 165, 175, 182, 158, 195, 196, 179,
	168, 0, 127, 181, 95, 115, 190, 117, 118, 153,
	74, 136, 0, 112, 93, 0, 0, 0, 98, 67,
	107, 68, 96, 129, 0, 94, 0, 170, 139, 0,
	0, 0, 188, 0, 144, 0, 0, 0, 0, 0,
	131, 172, 134, 163, 126, 154, 83, 143, 183, 113,
	149, 184, 0, 0, 0, 212, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 178, 109,
	80, 193, 0, 152, 66, 146, 0, 0, 72, 75,
	189, 176, 103, 102, 0, 0, 0, 0, 0, 0,
	0, 130, 135, 159, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1519, 0, 99, 0, 142,
	0, 0, 0, 79, 73, 0, 128, 0, 0, 0,
	82, 0, 100, 160, 0, 63, 0, 0, 0, 0,
	166, 173, 125, 0, 0, 177, 122, 121, 0, 0,
	0, 0, 0, 0, 114, 60, 197, 191, 0, 0,
	180, 132, 171, 97, 108, 0, 104, 0, 0, 0,
	105, 106, 141, 155, 0, 0, 0, 0, 0, 198,
	162, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 64, 101, 164, 167,
	87, 151, 76, 110, 157, 111, 133, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 201, 70, 91, 174, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 45, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 90, 84, 85, 137,
	138, 185, 186, 187, 161, 81, 0, 0, 88, 89,
	0, 169, 0, 0, 0, 140, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 116, 65, 120,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 124, 119, 145, 147, 156, 165, 175, 182, 158,
	195, 196, 179, 168, 0, 127, 181, 95, 115, 190,
	117, 118, 153, 74, 136, 0, 112, 93, 0, 0,
	0, 98, 67, 107, 68, 96, 129, 0, 94, 0,
	170, 139, 0, 0, 0, 188, 0, 144, 0, 0,
	0, 0, 0, 131, 172, 134, 163, 126, 154, 83,
	143, 183, 113, 149, 184, 0, 0, 0, 44, 0,
	907, 0, 908, 0, 0, 0, 0, 0, 0, 0,
	148, 178, 109, 80, 193, 0, 152, 66, 146, 0,
	0, 72, 75, 189, 176, 103, 102, 0, 0, 0,
	0, 0, 0, 0, 130, 135, 159, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 142, 0, 0, 0, 79, 73, 0, 128,
	0, 0, 0, 82, 0, 100, 160, 0, 63, 0,
	0, 0, 0, 166, 173, 125, 0, 0, 177, 122,
	121, 0, 0, 0, 0, 0, 0, 114, 60, 197,
	191, 0, 0, 180, 132, 171, 97, 108, 0, 104,
	0, 0, 0, 105, 106, 141, 155, 0, 0, 0,
	0, 0, 198, 162, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 64,
	101, 164, 167, 87, 151, 76, 110, 157, 111, 133,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 201, 70, 91, 174, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 45, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 90,
	84, 85, 137, 138, 185, 186, 187, 161, 81, 0,
	0, 88, 89, 0, 169, 0, 0, 0, 140, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	116, 65, 120, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 0, 124, 119, 145, 147, 156, 165,
	175, 182, 158, 195, 196, 179, 168, 0, 127, 181,
	95, 115, 190, 117, 118, 153, 74, 136, 0, 112,
	93, 0, 0, 0, 98, 67, 107, 68, 96, 129,
	0, 94, 0, 170, 139, 0, 57, 0, 188, 0,
	144, 0, 0, 0, 0, 0, 131, 172, 134, 163,
	126, 154, 83, 143, 183, 113, 149, 184, 0, 0,
	0, 44, 0, 56, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 178, 109, 80, 193, 0, 152,
	66, 146, 0, 0, 72, 75, 189, 176, 103, 102,
	0, 0, 0, 0, 0, 0, 0, 130, 135, 159,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 142, 0, 0, 0, 79,
	73, 0, 128, 0, 0, 0, 82, 0, 100, 160,
	0, 63, 0, 0, 0, 0, 166, 173, 125, 0,
	0, 177, 122, 121, 0, 0, 0, 0, 0, 0,
	114, 60, 197, 191, 0, 0, 180, 132, 171, 97,
	108, 0, 104, 0, 0, 0, 105, 106, 141, 155,
	0, 0, 0, 0, 0, 198, 162, 0, 194, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 64, 101, 164, 167, 87, 151, 76, 110,
	157, 111, 133, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 201, 70,
	91, 174, 0, 0, 0, 0, 0, 59, 0, 0,
	0, 45, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 90, 84, 85, 137, 138, 185, 186, 187,
	161, 81, 0, 0, 88, 89, 0, 169, 0, 0,
	0, 140, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 116, 65, 120, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 0, 124, 119, 145,
	147, 156, 165, 175, 182, 158, 195, 196, 179, 168,
	0, 127, 181, 95, 115, 190, 117, 118, 153, 74,
	136, 0, 112, 93, 0, 0, 0, 98, 67, 107,
	68, 96, 129, 0, 94, 0, 170, 139, 0, 0,
	0, 188, 0, 144, 0, 0, 0, 0, 0, 131,
	172, 134, 163, 126, 154, 83, 143, 183, 113, 149,
	184, 0, 489, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 148, 178, 109, 80,
	193, 0, 152, 66, 146, 0, 0, 72, 75, 189,
	176, 103, 102, 0, 0, 0, 0, 0, 0, 0,
	130, 135, 159, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 142, 0,
	0, 0, 79, 73, 0, 128, 0, 0, 0, 82,
	0, 100, 160, 0, 63, 0, 0, 0, 0, 166,
	173, 125, 0, 0, 177, 122, 121, 0, 0, 0,
	0, 0, 0, 114, 60, 197, 191, 0, 0, 180,
	132, 171, 97, 108, 0, 104, 0, 0, 0, 105,
	106, 141, 155, 0, 0, 0, 0, 0, 198, 162,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 64, 101, 164, 167, 87,
	151, 76, 110, 157, 111, 133, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 201, 70, 91, 174, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 45, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 90, 84, 85, 137, 138,
	185, 186, 187, 161, 81, 0, 0, 88, 89, 0,
	169, 0, 0, 0, 140, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 116, 65, 120, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 0,
	124, 119, 145, 147, 156, 165, 175, 182, 158, 195,
	196, 179, 168, 0, 127, 181, 95, 115, 190, 117,
	118, 153, 74, 136, 0, 112, 93, 0, 0, 0,
	98, 67, 107, 68, 96, 129, 0, 94, 0, 170,
	139, 0, 0, 0, 188, 0, 144, 0, 0, 0,
	0, 0, 131, 172, 134, 163, 126, 154, 83, 143,
	183, 113, 149, 184, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	178, 109, 80, 193, 0, 152, 66, 146, 0, 0,
	72, 75, 189, 176, 103, 102, 0, 0, 0, 0,
	0, 0, 0, 130, 135, 159, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1863, 0, 99,
	0, 142, 0, 0, 0, 79, 73, 0, 128, 0,
	0, 0, 82, 0, 100, 160, 0, 63, 0, 0,
	0, 0, 166, 173, 125, 0, 0, 177, 122, 121,
	0, 0, 0, 0, 0, 0, 114, 60, 197, 191,
	0, 0, 180, 132, 171, 97, 108, 0, 104, 0,
	0, 0, 105, 106, 141, 155, 0, 0, 0, 0,
	0, 198, 162, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 64, 101,
	164, 167, 87, 151, 76, 110, 157, 111, 133, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 201, 70, 91, 174, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 45, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 90, 84,
	85, 137, 138, 185, 186, 187, 161, 81, 0, 0,
	88, 89, 0, 169, 0, 0, 0, 140, 0, 0,
	0, 192, 0, 0, 0, 0, 0, 0, 0, 116,
	65, 120, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 0, 124, 119, 145, 147, 156, 165, 175,
	182, 158, 195, 196, 179, 168, 0, 127, 181, 95,
	115, 190, 117, 118, 153, 74, 136, 0, 112, 93,
	0, 0, 0, 98, 67, 107, 68, 96, 129, 0,
	94, 0, 170, 139, 0, 0, 0, 188, 0, 144,
	0, 0, 0, 0, 0, 131, 172, 134, 163, 126,
	154, 83, 143, 183, 113, 149, 184, 0, 0, 0,
	212, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 178, 109, 80, 193, 0, 152, 66,
	146, 0, 0, 72, 75, 189, 176, 103, 102, 0,
	0, 0, 0, 0, 0, 0, 130, 135, 159, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 142, 0, 0, 0, 79, 73,
	0, 128, 0, 0, 0, 82, 0, 100, 160, 0,
	63, 0, 0, 0, 0, 166, 173, 125, 0, 0,
	177, 122, 121, 0, 0, 0, 0, 0, 0, 114,
	60, 197, 191, 0, 0, 180, 132, 171, 97, 108,
	0, 104, 0, 0, 0, 105, 106, 141, 155, 0,
	0, 0, 0, 0, 198, 162, 0, 194, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 64, 101, 164, 167, 87, 151, 76, 110, 157,
	111, 133, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 201, 70, 91,
	174, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	45, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 90, 84, 85, 137, 138, 185, 186, 187, 161,
	81, 0, 0, 88, 89, 0, 169, 0, 0, 0,
	140, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 116, 65, 120, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 0, 124, 119, 145, 147,
	156, 165, 175, 182, 158, 195, 196, 179, 168, 0,
	127, 181, 95, 115, 190, 117, 118, 153, 74, 136,
	0, 112, 93, 0, 0, 0, 98, 67, 107, 68,
	96, 129, 0, 94, 0, 170, 139, 0, 0, 0,
	188, 0, 144, 0, 0, 0, 0, 0, 131, 172,
	134, 163, 126, 154, 83, 143, 183, 113, 149, 184,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 178, 109, 80, 193,
	0, 152, 66, 146, 0, 0, 72, 75, 189, 176,
	103, 102, 686, 0, 0, 0, 0, 0, 0, 130,
	135, 159, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 142, 0, 0,
	0, 79, 73, 0, 128, 0, 0, 0, 82, 0,
	100, 160, 0, 63, 0, 0, 0, 0, 166, 173,
	125, 0, 0, 177, 122, 121, 0, 0, 0, 0,
	0, 0, 114, 60, 197, 191, 0, 0, 180, 132,
	171, 97, 108, 0, 104, 0, 0, 0, 105, 106,
	141, 155, 0, 0, 0, 0, 0, 198, 162, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 64, 101, 164, 167, 87, 151,
	76, 110, 157, 111, 133, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	201, 70, 91, 174, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 45, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 90, 84, 85, 137, 138, 185,
	186, 187, 161, 81, 0, 0, 88, 89, 0, 169,
	0, 0, 0, 140, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 116, 65, 120, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 0, 124,
	119, 145, 147, 156, 165, 175, 182, 158, 195, 196,
	179, 168, 0, 127, 181, 95, 115, 190, 117, 118,
	153, 74, 136, 0, 112, 93, 0, 0, 0, 98,
	67, 107, 68, 96, 129, 0, 94, 0, 170, 139,
	0, 0, 0, 188, 0, 144, 0, 0, 0, 0,
	0, 131, 172, 134, 163, 126, 154, 83, 143, 183,
	113, 149, 184, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 178,
	109, 80, 193, 0, 152, 66, 146, 0, 0, 72,
	75, 189, 176, 103, 102, 0, 0, 0, 0, 0,
	0, 0, 130, 135, 159, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	142, 0, 0, 0, 79, 73, 0, 128, 0, 0,
	0, 82, 0, 100, 160, 0, 63, 0, 0, 0,
	0, 166, 173, 125, 0, 0, 177, 122, 121, 0,
	0, 0, 0, 0, 0, 114, 60, 197, 191, 0,
	0, 180, 132, 171, 97, 108, 0, 104, 0, 0,
	0, 105, 106, 141, 155, 0, 0, 0, 0, 0,
	198, 162, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 64, 101, 164,
	167, 87, 151, 76, 110, 157, 111, 133, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 201, 70, 91, 174, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 45, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 90, 84, 85,
	137, 138, 185, 186, 187, 161, 81, 0, 0, 88,
	89, 0, 169, 0, 0, 0, 140, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 116, 65,
	120, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 0, 124, 119, 145, 147, 156, 165, 175, 182,
	158, 195, 196, 179, 2138, 0, 127, 181, 95, 115,
	190, 117, 118, 153, 74, 136, 0, 112, 93, 0,
	0, 0, 98, 67, 107, 68, 96, 129, 0, 94,
	0, 170, 139, 0, 0, 0, 188, 0, 144, 0,
	0, 0, 0, 0, 131, 172, 134, 163, 126, 154,
	83, 143, 183, 113, 149, 184, 508, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 178, 109, 80, 193, 0, 152, 66, 146,
	0, 0, 72, 75, 189, 176, 103, 102, 0, 0,
	0, 0, 0, 0, 0, 130, 135, 159, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 142, 0, 0, 0, 79, 73, 0,
	128, 0, 0, 0, 82, 0, 100, 160, 0, 63,
	0, 0, 0, 0, 166, 173, 125, 0, 0, 177,
	122, 121, 0, 0, 0, 0, 0, 0, 114, 0,
	197, 191, 0, 0, 180, 132, 171, 97, 108, 0,
	104, 0, 0, 0, 105, 106, 141, 155, 0, 0,
	0, 0, 0, 198, 162, 0, 194, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	64, 101, 164, 167, 87, 151, 76, 110, 157, 111,
	133, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 201, 70, 91, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 45,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	90, 84, 85, 137, 138, 185, 186, 187, 161, 81,
	0, 0, 88, 89, 0, 169, 0, 0, 0, 140,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 116, 65, 120, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 0, 124, 119, 145, 147, 156,
	165, 175, 182, 158, 195, 196, 179, 168, 0, 127,
	181, 95, 115, 190, 117, 118, 153, 74, 136, 0,
	112, 93, 0, 0, 0, 98, 67, 107, 68, 96,
	129, 0, 94, 0, 170, 139, 0, 0, 0, 188,
	0, 144, 0, 0, 0, 0, 0, 131, 172, 134,
	163, 126, 154, 83, 143, 183, 113, 149, 184, 0,
	0, 0, 212, 0, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 178, 109, 80, 193, 0,
	152, 66, 146, 0, 0, 72, 75, 189, 176, 103,
	102, 0, 0, 0, 0, 0, 0, 0, 130, 135,
	159, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 142, 0, 0, 0,
	79, 73, 0, 128, 0, 0, 0, 82, 0, 100,
	160, 0, 63, 0, 0, 0, 0, 166, 173, 125,
	0, 0, 177, 122, 121, 0, 0, 0, 0, 0,
	0, 114, 0, 197, 191, 0, 0, 180, 132, 171,
	97, 108, 0, 104, 0, 0, 0, 105, 106, 141,
	155, 0, 0, 0, 0, 0, 198, 162, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 64, 101, 164, 167, 87, 151, 76,
	110, 157, 111, 133, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 201,
	70, 91, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 90, 84, 85, 137, 138, 185, 186,
	187, 161, 81, 0, 0, 88, 89, 0, 169, 0,
	0, 0, 140, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 116, 65, 120, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 0, 124, 119,
	145, 147, 156, 165, 175, 182, 158, 195, 196, 179,
	168, 0, 127, 181, 95, 115, 190, 117, 118, 153,
	74, 136, 0, 112, 93, 0, 0, 0, 98, 67,
	107, 68, 96, 129, 0, 94, 0, 170, 139, 0,
	0, 0, 188, 0, 144, 0, 0, 0, 0, 0,
	131, 172, 134, 163, 126, 154, 83, 143, 183, 113,
	149, 184, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 178, 109,
	80, 193, 0, 152, 66, 146, 0, 0, 72, 75,
	189, 176, 103, 102, 0, 0, 0, 0, 0, 0,
	0, 130, 135, 159, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 142,
	0, 0, 0, 79, 73, 0, 128, 0, 0, 0,
	82, 0, 100, 160, 0, 63, 0, 0, 0, 0,
	166, 173, 125, 0, 0, 177, 122, 121, 0, 0,
	0, 0, 0, 0, 114, 0, 197, 191, 0, 0,
	180, 132, 171, 97, 108, 0, 104, 0, 0, 0,
	105, 106, 141, 155, 0, 0, 0, 0, 0, 198,
	162, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 64, 101, 164, 167,
	87, 151, 76, 110, 157, 111, 133, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 201, 70, 91, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 90, 84, 85, 137,
	138, 185, 186, 187, 161, 81, 0, 0, 88, 89,
	0, 169, 0, 0, 0, 140, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 116, 65, 120,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 124, 119, 145, 147, 156, 165, 175, 182, 158,
	195, 196, 179, 168, 0, 127, 181, 95, 115, 190,
	117, 118, 153, 74, 136, 0, 112, 93, 0, 0,
	0, 98, 67, 107, 68, 96, 129, 0, 94, 0,
	170, 139, 0, 0, 0, 188, 0, 144, 0, 0,
	0, 0, 0, 131, 172, 134, 163, 126, 154, 83,
	143, 183, 113, 149, 184, 0, 0, 0, 219, 0,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 178, 109, 80, 193, 0, 152, 66, 146, 0,
	0, 72, 75, 189, 176, 103, 102, 0, 0, 0,
	0, 0, 0, 0, 130, 135, 159, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 142, 0, 0, 0, 79, 73, 0, 128,
	0, 0, 0, 82, 0, 100, 160, 0, 63, 0,
	0, 0, 0, 166, 173, 125, 0, 0, 177, 122,
	121, 0, 0, 0, 0, 0, 0, 114, 0, 197,
	191, 0, 0, 180, 132, 171, 97, 108, 0, 104,
	0, 0, 0, 105, 106, 141, 155, 0, 0, 0,
	0, 0, 198, 162, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 64,
	101, 164, 167, 87, 151, 76, 110, 157, 111, 133,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 201, 70, 91, 174, 0,
	0, 780, 0, 1392, 1381, 1380, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 1382, 0, 0, 0, 0,
	0, 0, 780, 0, 1392, 1381, 1380, 0, 1383, 0,
	0, 0, 0, 0, 0, 0, 1382, 0, 86, 90,
	84, 85, 137, 138, 185, 186, 187, 161, 81, 1383,
	0, 88, 89, 0, 169, 0, 0, 0, 140, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 275, 0,
	116, 65, 120, 0, 0, 0, 0, 0, 720, 0,
	77, 78, 0, 2200, 124, 119, 145, 147, 156, 165,
	175, 182, 158, 195, 196, 719, 44, 0, 0, 0,
	718, 0, 0, 0, 2070, 2071, 0, 583, 0, 584,
	0, 0, 0, 0, 0, 0, 0, 573, 574, 0,
	0, 0, 0, 0, 0, 2034, 0, 508, 0, 0,
	212, 558, 555, 556, 560, 561, 562, 563, 1376, 0,
	0, 559, 564, 565, 566, 721, 2035, 0, 1388, 0,
	716, 546, 0, 0, 582, 260, 0, 1027, 0, 1376,
	0, 1394, 1395, 0, 0, 0, 0, 0, 0, 1388,
	0, 1390, 0, 0, 0, 0, 0, 0, 543, 544,
	0, 0, 1394, 1395, 599, 0, 545, 0, 0, 541,
	542, 547, 1390, 0, 0, 0, 276, 0, 0, 0,
	0, 0, 1384, 1385, 1387, 0, 0, 0, 1386, 0,
	0, 0, 597, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 0, 1384, 1385, 1387, 0, 0, 0, 1386,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 194, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 553, 0, 0,
	0, 0, 0, 0, 294, 295, 296, 297, 298, 299,
	300, 301, 302, 303, 0, 304, 305, 0, 306, 307,
	308, 310, 309, 277, 278, 279, 283, 281, 280, 282,
	254, 256, 0, 252, 255, 261, 257, 258, 259, 273,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 274, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 1026, 0, 0, 0, 0,
	0, 0, 0, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1393, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 601, 570, 586, 587, 0,
	0, 0, 0, 0, 0, 0, 1393, 201, 780, 0,
	1392, 1381, 1380, 0, 0, 0, 0, 0, 0, 0,
	45, 0, 1382, 0, 0, 0, 0, 0, 568, 0,
	0, 0, 0, 0, 0, 1383, 0, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	588, 598, 594, 595, 592, 593, 591, 590, 589, 600,
	575, 576, 577, 578, 579, 581, 0, 0, 572, 571,
	580, 720, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 945, 944, 0, 0, 0, 1030, 0, 719, 0,
	0, 0, 0, 718, 0, 0, 0, 0, 0, 946,
	583, 0, 584, 0, 0, 195, 196, 596, 0, 0,
	573, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	508, 0, 0, 212, 558, 555, 556, 560, 561, 562,
	563, 0, 0, 0, 559, 564, 565, 566, 721, 0,
	0, 0, 0, 716, 546, 1376, 0, 582, 0, 0,
	0, 0, 0, 0, 0, 1388, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1394, 1395,
	0, 543, 544, 1035, 0, 0, 0, 599, 1390, 545,
	0, 0, 541, 542, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 597, 0, 0, 0, 1384,
	1385, 1387, 0, 0, 197, 1386, 0, 0, 947, 0,
	0, 0, 720, 535, 0, 0, 1764, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 719,
	194, 199, 200, 0, 718, 0, 0, 0, 0, 0,
	553, 583, 0, 584, 0, 0, 0, 0, 0, 0,
	0, 573, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 508, 0, 948, 212, 558, 555, 556, 560, 561,
	562, 563, 0, 0, 0, 559, 564, 565, 566, 721,
	0, 0, 0, 0, 716, 546, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 780, 0, 1392, 1381, 1380,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1382,
	0, 0, 543, 544, 0, 0, 585, 0, 599, 0,
	545, 0, 1383, 541, 542, 547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 570,
	586, 587, 1393, 0, 0, 0, 597, 0, 0, 0,
	201, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	0, 0, 0, 45, 535, 0, 0, 0, 945, 944,
	0, 568, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 194, 199, 200, 0, 0, 946, 0, 0, 0,
	0, 553, 0, 588, 598, 594, 595, 592, 593, 591,
	590, 589, 600, 575, 576, 577, 578, 579, 581, 0,
	0, 572, 571, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1376, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1388, 0, 0, 0, 0, 0, 195, 196,
	596, 0, 0, 0, 0, 1394, 1395, 0, 0, 0,
	0, 0, 0, 0, 0, 1390, 0, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	570, 586, 587, 0, 0, 0, 1384, 1385, 1387, 0,
	0, 201, 1386, 0, 0, 947, 0, 0, 0, 0,
	0, 0, 0, 1801, 45, 0, 0, 0, 0, 0,
	0, 0, 568, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 588, 598, 594, 595, 592, 593,
	591, 590, 589, 600, 575, 576, 577, 578, 579, 581,
	0, 0, 572, 571, 580, 720, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 719, 0, 0, 0, 0, 718, 0, 0,
	0, 0, 0, 0, 583, 0, 584, 0, 0, 195,
	196, 596, 0, 0, 573, 574, 0, 0, 0, 0,
	0, 0, 0, 0, 508, 0, 0, 212, 558, 555,
	556, 560, 561, 562, 563, 0, 0, 0, 559, 564,
	565, 566, 721, 0, 0, 0, 0, 716, 546, 1393,
	0, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 543, 544, 1035, 0, 0,
	0, 599, 0, 545, 0, 0, 541, 542, 547, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 597,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 780, 0, 0, 720, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 198, 0, 719, 194, 199, 200, 0, 718, 0,
	0, 0, 0, 0, 553, 583, 0, 584, 0, 0,
	0, 0, 0, 0, 0, 573, 574, 0, 0, 0,
	0, 0, 0, 0, 0, 508, 0, 0, 212, 558,
	555, 556, 560, 561, 562, 563, 0, 0, 0, 559,
	564, 565, 566, 721, 0, 0, 0, 0, 716, 546,
	0, 0, 582, 0, 0, 0, 780, 0, 1392, 1381,
	1380, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1382, 0, 0, 0, 0, 0, 543, 544, 0, 0,
	585, 0, 599, 1383, 545, 0, 0, 541, 542, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 570, 586, 587, 0, 0, 0, 0,
	597, 0, 0, 0, 201, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 0, 45, 535, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 2109, 0,
	0, 0, 198, 0, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 553, 0, 588, 598, 594,
	595, 592, 593, 591, 590, 589, 600, 575, 576, 577,
	578, 579, 581, 0, 0, 572, 571, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1376, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1388, 0, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 596, 0, 1394, 1395, 0, 0,
	0, 0, 0, 0, 0, 0, 1390, 0, 0, 0,
	0, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 570, 586, 587, 1384, 1385, 1387,
	0, 0, 0, 1386, 0, 201, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 0,
	0, 0, 0, 0, 0, 0, 568, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 588, 598,
	594, 595, 592, 593, 591, 590, 589, 600, 575, 576,
	577, 578, 579, 581, 0, 0, 572, 571, 580, 0,
	0, 0, 583, 0, 584, 0, 0, 0, 0, 0,
	0, 0, 573, 574, 0, 0, 0, 0, 0, 0,
	0, 0, 508, 0, 0, 212, 558, 1042, 556, 1043,
	1044, 1045, 1046, 195, 196, 596, 559, 1047, 1048, 1049,
	0, 0, 0, 0, 0, 0, 546, 0, 0, 582,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1393, 0, 0, 543, 544, 0, 0, 0, 0, 599,
	0, 545, 0, 0, 541, 542, 547, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 0, 0, 0, 720, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 719, 194, 199, 200, 0, 718, 0, 0, 0,
	0, 0, 553, 583, 0, 584, 0, 0, 0, 0,
	0, 0, 0, 573, 574, 0, 0, 0, 0, 0,
	0, 0, 0, 508, 0, 0, 212, 558, 555, 556,
	560, 561, 562, 563, 0, 0, 0, 559, 564, 565,
	566, 721, 0, 0, 0, 0, 716, 546, 0, 0,
	582, 0, 0, 0, 780, 0, 1392, 1381, 1380, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1382, 0,
	0, 0, 0, 0, 543, 544, 0, 0, 585, 0,
	599, 1383, 545, 0, 0, 541, 542, 547, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 570, 586, 587, 0, 0, 0, 0, 597, 0,
	0, 0, 201, 0, 0, 0, 0, 197, 0, 0,
	0, 0, 0, 0, 0, 45, 535, 0, 0, 0,
	0, 0, 0, 568, 0, 0, 1987, 0, 0, 0,
	198, 0, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 553, 0, 588, 598, 594, 595, 592,
	593, 591, 590, 589, 600, 575, 576, 577, 578, 579,
	581, 0, 0, 572, 571, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1376, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1388, 0, 0, 0, 780, 0, 1392, 1381, 1380,
	195, 196, 596, 0, 1394, 1395, 0, 1040, 0, 1382,
	0, 0, 0, 0, 1390, 0, 0, 0, 0, 585,
	0, 0, 1383, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 570, 586, 587, 1384, 1385, 1387, 0, 0,
	0, 1386, 0, 201, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 0, 0, 0,
	0, 0, 0, 0, 568, 0, 0, 1883, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 588, 598, 594, 595,
	592, 593, 591, 590, 589, 600, 575, 576, 577, 578,
	579, 581, 0, 0, 572, 571, 580, 1228, 1229, 1230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1376, 0, 583, 0, 584, 0, 0, 0,
	0, 0, 1388, 0, 573, 574, 0, 0, 0, 0,
	0, 195, 196, 596, 508, 1394, 1395, 212, 558, 555,
	556, 560, 561, 562, 563, 1390, 0, 0, 559, 564,
	565, 566, 0, 0, 0, 0, 0, 0, 546, 0,
	0, 582, 0, 0, 0, 0, 0, 0, 1393, 0,
	0, 0, 0, 0, 0, 0, 1384, 1385, 1387, 0,
	0, 0, 1386, 0, 0, 543, 544, 0, 0, 0,
	0, 599, 0, 545, 0, 0, 541, 542, 547, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 597,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 553, 583, 0, 584, 0, 0,
	0, 0, 0, 0, 0, 573, 574, 0, 0, 0,
	0, 0, 0, 0, 0, 508, 0, 0, 212, 558,
	555, 556, 560, 561, 562, 563, 0, 0, 0, 559,
	564, 565, 566, 0, 0, 0, 0, 0, 0, 546,
	0, 0, 582, 0, 0, 0, 0, 0, 0, 1393,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 544, 0, 0,
	585, 0, 599, 0, 545, 0, 0, 541, 542, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 570, 586, 587, 0, 0, 0, 0,
	597, 0, 0, 0, 201, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 0, 45, 535, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 553, 0, 588, 598, 594,
	595, 592, 593, 591, 590, 589, 600, 575, 576, 577,
	578, 579, 581, 0, 0, 572, 571, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 195, 196, 596, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 570, 586, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 0,
	0, 0, 0, 0, 0, 0, 568, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 588, 598,
	594, 595, 592, 593, 591, 590, 589, 600, 575, 576,
	577, 578, 579, 581, 0, 0, 572, 571, 580, 0,
	0, 0, 583, 0, 584, 0, 0, 0, 0, 0,
	0, 0, 573, 574, 0, 0, 0, 0, 0, 0,
	0, 0, 508, 0, 0, 212, 558, 1042, 556, 1043,
	1044, 1045, 1046, 195, 196, 596, 559, 1047, 1048, 1049,
	0, 0, 0, 0, 0, 0, 546, 0, 0, 582,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 543, 544, 0, 0, 0, 0, 599,
	0, 545, 0, 0, 541, 542, 547, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 553, 583, 0, 584, 0, 0, 0, 0,
	0, 0, 0, 573, 574, 0, 0, 0, 0, 0,
	0, 0, 0, 1306, 0, 0, 212, 558, 555, 556,
	560, 561, 562, 563, 0, 0, 0, 559, 564, 565,
	566, 0, 0, 0, 0, 0, 0, 546, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 0, 0, 585, 0,
	599, 0, 545, 0, 0, 541, 542, 547, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 570, 586, 587, 0, 0, 0, 0, 597, 0,
	0, 0, 201, 0, 0, 0, 0, 197, 0, 0,
	0, 0, 0, 0, 0, 45, 535, 0, 0, 0,
	0, 0, 0, 568, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 553, 0, 588, 598, 594, 595, 592,
	593, 591, 590, 589, 600, 575, 576, 577, 578, 579,
	581, 0, 0, 572, 571, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	195, 196, 596, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 570, 586, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 0, 0, 0,
	0, 0, 0, 0, 568, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 588, 598, 594, 595,
	592, 593, 591, 590, 589, 600, 575, 576, 577, 578,
	579, 581, 0, 0, 572, 571, 580, 0, 0, 0,
	583, 0, 584, 0, 0, 0, 0, 0, 0, 0,
	573, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	532, 0, 0, 212, 558, 555, 556, 560, 561, 562,
	563, 195, 196, 596, 559, 564, 565, 566, 0, 0,
	0, 0, 0, 0, 546, 0, 0, 582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 543, 544, 0, 0, 0, 0, 599, 0, 545,
	0, 0, 541, 542, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 535, 0, 0, 0, 0, 0, 583,
	0, 584, 0, 0, 0, 0, 0, 198, 0, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 508,
	553, 0, 212, 558, 555, 556, 560, 561, 562, 563,
	0, 0, 0, 559, 564, 565, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 0, 0, 0, 0, 599, 0, 545, 0,
	0, 541, 542, 547, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 585, 0, 0, 0,
	0, 0, 0, 0, 597, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 601, 570,
	586, 587, 535, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 0, 0, 198, 0, 0, 194,
	199, 200, 0, 45, 0, 0, 0, 0, 0, 553,
	0, 568, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 0, 588, 598, 594, 595, 592, 593, 591,
	590, 589, 600, 575, 576, 577, 578, 579, 581, 0,
	0, 572, 571, 580, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 0, 0, 195, 196,
	596, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 570, 586,
	587, 0, 0, 260, 0, 284, 0, 0, 0, 201,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 0, 0, 0, 0,
	568, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 588, 598, 594, 595, 592, 593, 591, 590,
	589, 600, 575, 576, 577, 578, 579, 581, 0, 0,
	572, 571, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 596,
	44, 0, 294, 295, 296, 297, 298, 299, 300, 301,
	302, 303, 0, 304, 305, 0, 306, 307, 308, 310,
	309, 277, 278, 279, 283, 281, 280, 282, 254, 256,
	0, 252, 255, 261, 257, 258, 259, 273, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 274,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 260,
	0, 284, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 295,
	296, 297, 298, 299, 300, 301, 302, 303, 0, 304,
	305, 0, 306, 307, 308, 310, 309, 277, 278, 279,
	283, 281, 280, 282, 254, 256, 0, 252, 255, 261,
	257, 258, 259, 273, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 460, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	45, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 253,
}

var yyPact = [...]int16{
	963, -1000, -264, -1000, -1000, -1000, 1850, 2167, 729, 729,
	735, 1875, -1000, -1000, -1000, 8910, 718, 704, 703, 342,
	686, 295, 1379, 3008, 638, 733, 638, 638, -1000, -180,
	-118, -1000, 3, 1630, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 727, -1000, -1000, -1000, 1609, 3325, 730, 3008,
	3008, -1000, 612, 1600, -1000, 15903, 15903, 15903, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 387, 295, 295, 638, 246, 638, 1874, 725,
	1870, 295, -1000, -1000, 858, 1034, -1000, 2009, 852, -1000,
	-1000, 295, 638, 295, 3008, -1000, -1000, -1000, -1000, 722,
	729, -1000, 720, 953, 3008, 3182, 788, 775, 3008, 3008,
	287, 5371, 2264, -92, 97, -1000, -1000, -1000, -1000, 848,
	1738, -1000, -1000, -1000, 1738, 153, 1843, 1738, 1843, -1000,
	1738, 1843, 139, 139, 139, 139, 139, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1841, 1733, -1000, 1738, 1738, 1738,
	1738, 1738, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1838, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1824, 183, 1824, 1785, 1785, -1000,
	-1000, 2264, 2264, 1849, 3008, 295, 1869, 1863, 3008, -197,
	3008, 3008, 2120, -1000, -1000, -1000, 283, 3008, 725, 10089,
	1982, 16069, 12447, -1000, 3008, -1000, -1000, 3008, -1000, 3008,
	905, 607, 655, 595, 773, 890, 3008, 674, 1946, 923,
	844, 9303, -1000, 1953, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1836, 1092, 295, 523, 202, 1715, 454, 552,
	450, 1334, 457, -1000, -1000, -1000, 1165, -1000, 295, -1000,
	2095, -1000, -1000, 516, -1000, 493, 1020, 1228, 3008, 1831,
	209, 1829, 15602, 1196, -1000, -273, -1000, 95, -1000, 295,
	-1000, 1182, 139, 1738, -1000, 139, 1181, 139, 139, -1000,
	-1000, 878, 1964, 878, 878, 878, 878, 1214, 1214, -39,
	-39, -1000, -1000, -1000, 1194, -1000, 1193, 1824, -1000, -1000,
	-1000, 1192, -1000, 3008, 295, 1818, 1862, 3008, 3008, 2007,
	684, -1000, -1000, 2005, 2002, 1607, -1000, -1000, 282, -1000,
	-1000, 725, 2120, -1000, 842, -1000, -1000, -1000, -1000, -1000,
	1817, -1000, -1000, 1853, 747, -1000, 1672, 8910, 444, 295,
	-1000, 479, -1000, 457, 295, 295, 295, 295, 295, 566,
	7338, 597, 639, 765, 295, 638, 1161, 11661, 10482, 287,
	-1000, -1000, -1000, 3593, 445, 2107, 2038, 452, 5, -151,
	1311, -1000, -1000, 1816, -1000, -1000, -1000, 14305, -1000, 1288,
	-1000, 1253, -1000, 1251, 1249, 54, 295, -1000, -174, 126,
	112, -1000, -1000, 1715, -1000, 1815, 14305, 1995, -1000, 1968,
	919, 192, 14797, -1000, -1000, 1208, 807, -1000, -1000, -1000,
	-1000, 14797, 14797, 14797, 14797, 14797, 14797, 14797, -1000, -1000,
	-1000, -1000, 107, -1000, 13827, -201, -1000, 1207, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 837, 836, -1000,
	-267, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715,
	1715, 1715, 14305, 1715, 1944, 1715, 1715, 1715, 1715, 1715,
	1715, 1715, 1715, 1715, 1715, 1715, 3949, 1715, 1715, 1715,
	1715, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1601, 878,
	139, 878, 1570, 1539, 878, 878, -1000, -1000, 1245, 921,
	-1000, -1000, -1000, -1000, 1588, -1000, 1586, -1000, 178, 176,
	-1000, 1531, 1706, -1000, 1584, 1698, 1861, 3593, 3008, 1814,
	1813, 1720, 638, 1720, 2030, 377, 3008, 2120, 326, 2120,
	1597, 10875, 1214, 295, 295, 3008, 295, -1000, 295, -1000,
	-1000, -2, 1811, 864, -1000, -1000, -1000, 673, 295, -1000,
	444, 8910, -1000, 295, -1000, -1000, 295, 295, 295, 550,
	-1000, 1213, -1000, -1000, 912, 834, 8517, -1000, -1000, 1582,
	-1000, 344, 1738, 1738, 14305, 1988, 1988, 1988, 1988, 827,
	269, -1000, 276, 700, 700, -177, 447, 441, -151, 1715,
	1696, 1810, -1000, 3593, 713, -1000, 14305, 145, 1715, 1715,
	1715, 1715, 13827, -1000, -1000, -1000, -1000, -1000, -151, 1809,
	-1000, -1000, -1000, 1020, -1000, 1808, 1807, -1000, 1806, 14305,
	326, 965, 172, -1000, 1688, -1000, 1191, 14797, 14797, 14797,
	14797, 14797, 14797, 14797, 14797, 14797, 14797, 14797, 14797, 3912,
	1201, 2638, -1000, 2505, 2505, 73, 73, 73, 73, 73,
	73, 92, -1000, 1261, 74, 1556, 2046, 2109, 13827, 752,
	-1000, -1000, 12785, 13172, -1000, 10089, 10875, 14154, 13676, 13676,
	13676, 13676, 4526, 14305, 13676, 13676, 13676, 13676, 2014, 1014,
	752, 1117, 2027, 1261, 1261, 1261, 1179, -1000, 1261, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 142, -1000, -1000,
	-269, -1000, -271, -1000, -1000, 13676, 13676, 13676, 13676, -1000,
	-1000, 878, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	139, 1212, 139, 85, 83, -1000, 1190, -1000, 1189, 3593,
	295, 3008, 1506, 1685, 1988, 1988, 1988, 1988, 1805, 326,
	3593, -1000, 1720, 3008, -1000, 653, 2045, -1000, -1000, 2023,
	-1000, 1679, -1000, -1000, 1626, 3008, -1000, 1567, 1802, 263,
	-1000, -1000, 515, 1801, 151, 438, 1794, 1683, 3593, 701,
	1110, 15903, 295, 616, 295, -1000, 40, 715, -1000, -1000,
	295, -1000, -1000, 1122, 295, -1000, -1000, -1000, -1000, 1160,
	3593, 1988, 1183, -1000, -1000, -1000, 1988, 935, -1000, -1000,
	-1000, -1000, -1000, -1000, 10875, -1000, 272, -1000, 1086, -1000,
	-1000, 1084, 339, 1080, -1000, 295, -151, 1787, 14305, 14305,
	399, 3593, 1564, 365, 14305, 14305, 1095, -1000, -1000, 470,
	14646, 1130, 1060, 14797, 892, 14797, 15731, 15731, 15731, 15731,
	14797, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1238,
	-1000, 1720, 1117, 1261, 1261, -1000, 10875, 1715, -1000, 1143,
	-1000, 1136, 1500, 713, 1558, -59, 14305, 1786, 919, -1000,
	532, 2399, 73, 32, 32, 82, 82, 82, 82, 82,
	258, 258, -1000, -31, -1000, 71, -1000, -1000, -1000, -1000,
	-1000, -201, 1210, -1000, -1000, -1000, -1000, 14305, -1000, 2041,
	2052, 1720, 2004, 1261, 1935, -1000, -1000, -1000, -92, 1261,
	13676, 1515, 1556, -1000, 922, -1000, 825, 1715, -1000, 63,
	-1000, -1000, -201, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	397, 1515, 922, 1515, 1515, 1515, 789, 1675, 15275, 1738,
	1208, 1738, 1785, -1000, -1000, 197, 1738, 194, -1000, -1000,
	-1000, -1000, 1785, -1000, -1000, -1000, -1000, -1000, 1738, 1738,
	-1000, -1000, 1738, 1738, -1000, 1738, 1738, 875, 1515, 1671,
	1670, 1515, 13676, -1000, 997, -1000, 14305, 1261, -1000, 3008,
	-1000, -1000, -1000, -1000, 1261, -1000, -1000, -275, -278, 1515,
	1261, 1674, 1515, 1515, -1000, 878, -1000, 878, -1000, -1000,
	1451, 1444, 1436, 1775, 1771, -185, 3593, 1547, 1545, 1261,
	1987, 10875, -1000, -1000, -1000, -1000, -1000, 318, 1012, 295,
	6274, 2022, 139, -1000, 6552, 739, 295, -1000, 3593, 3593,
	1770, 1762, 1761, 14305, 14305, 319, 1543, 14797, 1079, 396,
	-1000, 1073, -1000, -1000, 436, 1758, 149, 1757, 630, 1082,
	15903, 610, -1000, -1000, 903, 1856, 1523, 265, -1000, 1233,
	981, 1200, 976, 974, 970, 969, 968, 967, 952, 948,
	947, 941, -1000, -1000, 1378, -1000, 1988, 1715, -1000, -1000,
	445, 2089, -1000, -1000, 445, 2076, 1756, 1754, 3593, 713,
	1367, -1000, 262, 238, 1715, 1715, 1537, 1160, -1000, -9,
	470, 472, -1000, -1000, 1154, -1000, -1000, 192, 14797, 14797,
	14797, -1000, -1000, -1000, -1000, 13827, 1130, 14797, 14797, 14797,
	177, 14797, 192, 192, 192, 192, 192, 3029, 1261, 1261,
	-1000, -1000, 1519, -1000, 14305, -1000, 1371, -1000, -1000, 365,
	1860, -1000, -1000, 927, -1000, 1348, 171, 752, 1973, 14305,
	14305, 2046, -1000, 1720, -1000, -1000, -1000, 2014, -1000, -1000,
	1107, -1000, -1000, 1515, 13676, -261, -1000, -1000, -1000, 360,
	-1000, -1000, 8124, 13676, -1000, 15124, -1000, 3912, -261, -261,
	-1000, -1000, 5357, 1201, 14305, -1000, 1182, 351, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5357, -1000, 14797, 14797, 14797, 14797, -21, 1517, 1006, -1000,
	14305, 758, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -185, 3593, 3593, 2062, 1751,
	1339, 2062, 1160, -1000, 1720, 1552, 314, 237, 14305, -1000,
	3692, -1000, 6274, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2046, 14305, -1000, -1000, -1000,
	-1000, -1000, 295, 4578, 295, 295, 295, 482, 14305, 384,
	14305, -1000, -1000, -1000, -1000, -1000, 1012, 317, 1270, 6552,
	6552, 6552, 4978, 6552, 6552, 741, -1000, 1513, 1510, 3593,
	3593, 3593, 883, 1505, 1750, 1749, -1000, 192, -1000, 15903,
	-1000, 1747, 3593, 3593, 1745, 1742, 14305, 14797, 1066, 391,
	-1000, 1064, -1000, 432, 1120, -1000, 295, -1000, -58, 1523,
	295, -1000, 1180, -1000, -1000, 1141, 1171, 1141, 1141, 1141,
	1141, 1141, 337, 1150, 508, 1988, -1000, 269, 700, 269,
	700, 10875, 3593, 1496, 365, 2062, 14305, 434, 406, 14305,
	14305, 1160, 1856, -1000, -1000, -1000, -1000, 192, 13827, 192,
	13827, 192, 13827, -1000, 177, 192, 1227, -1000, 14797, 177,
	14797, -1000, -1000, 572, 10875, 713, -1000, -1000, 2079, -77,
	161, -1000, 77, -1000, 2087, 886, 840, 1673, -1000, 750,
	2041, 1261, 1888, -1000, -1000, -1000, -1000, 1715, -1000, -1000,
	822, 1261, -1000, -1000, -1000, -1000, 1261, 1738, -1000, 1261,
	737, -1000, -1000, 1261, 2612, 615, 1590, 510, 1715, -7,
	-1000, 752, 14305, 2062, 1265, 1491, 1160, 14305, 326, -185,
	1160, -1000, -1000, -34, 14305, 6274, 4232, 752, 4232, -1000,
	6274, 2125, 2041, 4300, 647, 2971, 2439, 1668, 494, -1000,
	6159, 1123, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 295, 2073, 2071,
	2066, 2064, 13409, 14305, 14305, -1000, 227, 311, -1000, -1000,
	-1000, -1000, -1000, 5766, 1738, 1733, -1000, -1000, -1000, -1000,
	-1000, 445, 1485, 1482, 1480, 382, 2062, 14305, 14305, -1000,
	3593, 1478, 1434, 3593, 3593, 497, 192, -1000, 15903, -1000,
	1731, -1000, -1000, 1715, 1396, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1020, -1000, 1020, 1376,
	1370, 1160, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1367, 1367, 1856, 445, 74, 74, 74, -1000, 14797,
	192, -1000, 192, 3008, -1000, 365, 700, 700, -1000, -1000,
	-1000, 268, 987, 919, 919, 1127, 66, -1000, 2049, -1000,
	-1000, 1940, 14305, 14305, 14305, -1000, 1973, -1000, 13676, -1000,
	901, 9696, -1000, -1000, -1000, -1000, 14797, -1000, -1000, 14797,
	-1000, 14797, -1000, 14797, -1000, 14797, 14797, 1261, 1167, 752,
	1160, 2062, 1160, 1856, 752, 1362, 2062, 1856, -1000, -228,
	752, 3692, 3315, -1000, -1000, 803, 14539, -1000, 1973, 6274,
	998, -1000, 1004, -1000, 4232, 2887, 3008, 1453, 1488, 1788,
	-1000, -1000, -1000, 1985, 2191, 2762, 295, 293, 15903, -1000,
	-1000, 1666, 6945, 79, -1000, -1000, -1000, 940, 815, 359,
	-1000, 1960, -1000, -1000, 4578, 1977, -1000, -1000, -1000, -1000,
	-1000, 4232, -1000, 1628, 1261, 4232, -1000, 269, 1160, 1160,
	-1000, -12, -1000, 1357, 1354, 1315, -1000, 445, 1310, 1308,
	361, -1000, 3593, 295, -1000, 1523, 445, 445, 568, 1160,
	1856, 2062, 2062, -1000, 269, -1000, -1000, -1000, 192, 1727,
	-1000, 445, -1000, 919, -1000, 919, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1532, 1933, 752, 752, -1000, -1000, 1577,
	-1000, 2048, 1261, -1000, 1338, 1338, 1338, 1338, 1338, 162,
	-1000, -1000, 1856, 1160, -1000, -1000, -1000, 1160, -1000, 14305,
	14388, -1000, -1000, -1000, -1000, 3576, 6667, 636, 3013, 409,
	3008, -1000, 409, 1524, 2439, -1000, -1000, 1117, 2439, 2439,
	2439, 2439, 2439, -1000, 1916, 1915, -1000, 1899, 1896, 1929,
	3008, 1306, 2191, 993, 1715, -1000, 3338, -1000, -1000, -1000,
	1985, 2020, -1000, 7731, 1666, 79, 1665, -1000, 55, 50,
	12819, 10875, 878, -1000, -1000, -1000, -1000, -1000, 10875, 2641,
	-1000, 1059, -1000, 1856, 1856, -1000, 2062, 2062, -1000, 269,
	1160, 1160, -15, 1303, 1261, -1000, 269, 269, 3008, 1856,
	445, -1000, -1000, -1000, 10875, 269, -1000, -1000, -1000, 801,
	-1000, 2062, 2439, 14305, -1000, -1000, -1000, -1000, -1000, -1000,
	1261, 302, -88, -1000, -1000, 1856, 752, -1000, -1000, 12766,
	-1000, -1000, 14305, -1000, 14305, 4232, -1000, 1401, 1715, -1000,
	2062, 2439, 1471, 1464, -1000, 936, 1788, 1737, 1859, 1623,
	-1000, -1000, -1000, -1000, 1910, -1000, 1903, -1000, -1000, -1000,
	-1000, -51, 695, 690, 689, 295, -1000, 1720, -1000, 1665,
	79, 42, -1000, -1000, -1000, -1000, 752, 932, -1000, 1664,
	-1000, 13910, -1000, -1000, -1000, -1000, -1000, 1856, 1856, -1000,
	-1000, -1000, -1000, -1000, 1726, -1000, 269, 1301, -1000, 10875,
	2059, 1635, 1285, -1000, 752, -1000, 1924, -26, -141, -1000,
	628, 6274, 4280, 13112, 1739, 1117, 1715, -1000, 11268, 295,
	2046, 1471, -1000, 2062, 1117, 14305, -1000, -1000, 14305, 1724,
	-1000, 14305, -1000, -1000, -1000, -1000, 1722, 1715, 1715, 1715,
	1264, -1000, -1000, -1000, -1000, 64, 45, -1000, 14305, -1000,
	-1000, -1000, 10875, -1000, -1000, -1000, 2056, 2047, -1000, 1261,
	14305, -1000, 1921, -1000, -1000, 2460, 998, -1000, -1000, 1974,
	1450, 1533, -1000, -1000, 13323, 1261, 1269, -1000, -1000, 799,
	-1000, -1000, 1264, 2041, -1000, 2046, -1000, 752, 752, 326,
	752, -175, 326, 326, 326, 2261, 295, -1000, -1000, -1000,
	752, 1260, -1000, 14305, 14305, -1000, -1000, -37, 12745, 430,
	-1000, 1715, -1000, -1000, 1427, 12054, 295, -1000, -1000, 2041,
	1257, 1244, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1242, 1242, 1242, 993, -1000, -1000, 752, 1628, -89,
	624, 2085, -1000, 1715, -1000, 1720, -1000, -1000, -1000, -1000,
	-1000, -175, -1000, -1000, -1000, -51, -146, -1000, 1117, 1533,
	1261, -1000, -1000, -1000, 1402, -1000,
}

var yyPgo = [...]int16{
	0, 2355, 39, 24, 2350, 2340, 2339, 2336, 2331, 2330,
	2329, 2328, 2327, 2326, 2325, 37, 36, 46, 26, 35,
	2321, 2318, 2317, 2316, 2315, 2314, 117, 2313, 2312, 2310,
	2308, 86, 2307, 2302, 2300, 2299, 63, 123, 82, 88,
	2284, 32, 41, 61, 40, 2298, 25, 2297, 2294, 55,
	2293, 38, 2290, 2288, 112, 2287, 2285, 8, 191, 99,
	2283, 47, 2282, 2281, 101, 3469, 2688, 2461, 1983, 1633,
	2280, 89, 15, 53, 7, 6, 13, 2279, 71, 5,
	2277, 95, 83, 2272, 2270, 2269, 43, 2265, 59, 77,
	4, 54, 2263, 14, 11, 72, 34, 27, 18, 2,
	49, 29, 2261, 20, 33, 31, 2259, 67, 2258, 113,
	2258, 76, 90, 12, 2560, 0, 66, 107, 2256, 119,
	2255, 1562, 103, 42, 17, 51, 87, 2253, 85, 84,
	52, 94, 79, 2250, 80, 2248, 2247, 2244, 2243, 2242,
	127, 484, 2235, 150, 48, 2234, 2233, 104, 124, 121,
	102, 109, 116, 1792, 2232, 2229, 2228, 2227, 2226, 69,
	64, 100, 2225, 65, 92, 30, 315, 2223, 2222, 2216,
	2212, 2205, 2204, 2202, 97, 2198, 78, 1880, 73, 568,
	60, 2196, 2195, 2193, 2191, 91, 2190, 2186, 2183, 62,
	2182, 2181, 96, 70, 111, 2181, 2181, 2175, 2172, 68,
	74, 2171, 120, 118, 2170, 108, 21, 45, 105, 50,
	2166, 2165, 2162, 1, 3, 2161, 126, 194, 2159, 114,
	2156, 93, 2146, 81, 2142, 19, 2141, 2137, 44, 2136,
	458, 2092, 106, 2132, 2125, 2123, 98, 530, 1432, 2120,
	75, 115, 2112, 110,
}

var yyR1 = [...]uint8{
	0, 233, 234, 234, 1, 1, 1, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 22, 22, 22, 22, 22, 22, 236, 236, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 29, 29,
	7, 8, 8, 8, 239, 239, 49, 49, 96, 96,
	9, 9, 9, 9, 10, 10, 210, 210, 209, 211,
	211, 11, 11, 11, 11, 11, 204, 204, 204, 204,
	204, 12, 12, 207, 207, 207, 15, 15, 15, 15,
	16, 16, 17, 17, 17, 19, 19, 101, 101, 105,
	105, 105, 106, 106, 106, 106, 222, 222, 127, 127,
	235, 235, 240, 240, 240, 240, 240, 240, 240, 202,
	202, 202, 202, 203, 203, 203, 203, 205, 205, 206,
	206, 206, 206, 206, 206, 208, 208, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 13, 13,
	30, 30, 73, 73, 14, 112, 112, 183, 183, 183,
	184, 184, 184, 184, 184, 184, 186, 186, 187, 187,
	119, 119, 188, 188, 25, 168, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 152, 152, 152, 130, 130,
	130, 130, 130, 130, 130, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 194, 194, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 196, 197,
	198, 190, 190, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 142, 142, 142,
	142, 142, 142, 142, 189, 189, 185, 185, 185, 185,
	134, 134, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 133, 133, 133, 133, 133, 133, 133, 138,
	138, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	131, 131, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 139, 139, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 151, 151, 140, 140, 149,
	149, 150, 150, 150, 141, 141, 141, 148, 148, 148,
	145, 145, 146, 146, 147, 147, 147, 143, 143, 143,
	144, 144, 144, 154, 179, 179, 179, 181, 181, 182,
	182, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 167, 167, 199, 199, 200,
	200, 201, 201, 178, 178, 178, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 166, 166,
	176, 176, 176, 176, 176, 177, 177, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 175, 161, 161,
	161, 161, 161, 162, 162, 163, 163, 163, 163, 155,
	155, 156, 156, 157, 157, 158, 158, 158, 158, 158,
	158, 160, 160, 159, 159, 159, 159, 159, 159, 192,
	192, 192, 226, 226, 226, 226, 226, 226, 227, 227,
	193, 193, 164, 164, 165, 165, 172, 172, 172, 172,
	241, 241, 170, 170, 170, 171, 171, 171, 242, 26,
	27, 27, 28, 28, 28, 33, 33, 33, 31, 31,
	32, 32, 38, 38, 37, 37, 39, 39, 39, 39,
	118, 118, 118, 117, 117, 223, 223, 223, 223, 223,
	41, 41, 42, 42, 43, 43, 44, 44, 44, 213,
	213, 212, 212, 214, 214, 214, 214, 214, 214, 214,
	214, 56, 56, 93, 93, 93, 97, 97, 45, 45,
	45, 45, 46, 46, 47, 47, 48, 48, 125, 125,
	124, 124, 124, 123, 123, 50, 50, 50, 52, 51,
	51, 51, 51, 53, 53, 55, 55, 54, 54, 57,
	57, 57, 57, 58, 58, 95, 95, 40, 40, 40,
	40, 40, 40, 40, 40, 108, 108, 60, 60, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 70, 70, 70, 70, 70, 70, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	36, 36, 71, 71, 71, 78, 72, 72, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 68,
	68, 68, 68, 68, 68, 68, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 243, 243, 69, 69, 69, 69, 34, 34, 34,
	34, 34, 126, 126, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 82, 82, 35,
	35, 80, 80, 81, 111, 111, 83, 83, 79, 79,
	79, 79, 215, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 61, 61, 84, 84, 85, 85, 224,
	224, 225, 86, 86, 87, 87, 88, 89, 89, 89,
	90, 90, 90, 90, 91, 91, 91, 63, 63, 63,
	63, 63, 63, 92, 92, 94, 94, 94, 94, 98,
	98, 74, 74, 76, 76, 75, 77, 99, 99, 103,
	100, 100, 104, 104, 104, 104, 104, 23, 24, 102,
	102, 102, 120, 120, 120, 109, 109, 110, 110, 107,
	107, 115, 115, 116, 116, 116, 116, 116, 121, 121,
	121, 122, 122, 216, 216, 216, 217, 217, 217, 218,
	218, 219, 219, 220, 220, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 229, 229, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 231, 231, 232,
	232, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 114, 114, 114, 114, 114, 114, 114, 114,
	237, 238,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 2, 13, 12,
	14, 12, 13, 12, 10, 7, 10, 7, 11, 11,
	9, 13, 14, 5, 8, 4, 8, 4, 7, 10,
	7, 8, 6, 9, 8, 9, 9, 8, 10, 10,
	11, 7, 6, 10, 9, 10, 10, 9, 11, 12,
	13, 13, 5, 12, 11, 9, 6, 13, 13, 14,
	14, 6, 7, 6, 6, 10, 12, 10, 11, 12,
	13, 12, 13, 7, 7, 11, 13, 6, 6, 8,
	7, 6, 6, 8, 8, 10, 10, 1, 1, 4,
	6, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 1, 1, 1, 3, 0, 4,
	3, 4, 5, 4, 2, 6, 1, 3, 3, 0,
	1, 2, 2, 2, 3, 5, 0, 2, 2, 2,
	2, 3, 5, 1, 2, 3, 7, 10, 1, 1,
	5, 5, 3, 5, 3, 1, 3, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	0, 3, 0, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 4, 2, 3, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 4,
	1, 1, 0, 1, 2, 0, 3, 0, 2, 2,
	0, 2, 2, 2, 2, 2, 0, 2, 0, 3,
	0, 1, 0, 2, 4, 4, 0, 1, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 3, 1,
	1, 1, 1, 1, 3, 2, 2, 3, 2, 4,
	2, 4, 2, 2, 3, 2, 3, 2, 7, 9,
	3, 3, 6, 9, 11, 9, 6, 6, 8, 8,
	5, 8, 7, 4, 0, 2, 4, 2, 1, 1,
	2, 1, 2, 2, 1, 1, 1, 3, 1, 2,
	1, 1, 2, 0, 4, 3, 4, 3, 3, 3,
	3, 3, 3, 3, 2, 4, 6, 2, 3, 4,
	2, 3, 1, 3, 0, 2, 0, 2, 2, 3,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 2, 2, 2, 1, 1, 0,
	1, 1, 3, 3, 2, 2, 2, 1, 1, 1,
	1, 1, 4, 5, 4, 4, 4, 1, 2, 2,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 3, 3, 0, 3, 3,
	0, 1, 0, 1, 0, 2, 1, 0, 3, 3,
	0, 1, 2, 6, 0, 1, 4, 1, 2, 1,
	3, 2, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 5, 2, 3, 3, 2,
	3, 2, 3, 3, 2, 2, 3, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 5, 2,
	2, 3, 4, 2, 2, 2, 2, 1, 4, 7,
	7, 10, 10, 13, 11, 1, 1, 2, 2, 10,
	8, 11, 9, 7, 5, 6, 7, 8, 9, 8,
	9, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 1, 0, 1, 1, 1, 2, 2, 1, 2,
	0, 3, 0, 1, 1, 3, 0, 4, 1, 3,
	2, 1, 1, 2, 1, 1, 1, 1, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 3, 6, 4, 7,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 0,
	4, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 8, 1, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 0, 4, 1, 3, 3,
	2, 3, 2, 1, 2, 0, 3, 1, 1, 3,
	4, 6, 4, 6, 4, 6, 3, 4, 4, 5,
	5, 3, 4, 3, 3, 3, 3, 5, 6, 2,
	4, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 6, 2, 2, 2, 2, 2, 2, 2,
	3, 3, 1, 1, 1, 1, 2, 1, 3, 4,
	5, 5, 5, 5, 6, 4, 4, 4, 6, 6,
	8, 6, 4, 6, 6, 8, 6, 8, 6, 8,
	6, 8, 9, 7, 5, 4, 4, 3, 3, 3,
	1, 3, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 2, 2, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 3, 3, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 0, 2, 1, 1,
	3, 5, 3, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 0, 3, 0, 2, 1,
	3, 1, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 1, 3, 1, 1, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 5, 3, 1, 3, 1,
	2, 1, 1, 1, 1, 0, 3, 0, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 2, 0, 2, 2, 0,
	1, 4, 3, 1, 3, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -233, -1, -20, -21, -22, -25, 126, 132, 133,
	127, 71, -234, 401, -168, 58, -226, -227, 285, -188,
	139, 152, 174, 175, 177, 371, 136, 137, 383, 384,
	156, 386, 79, -231, -230, 6, 8, 9, 10, 165,
	147, 174, 21, -115, 61, 311, -231, 137, -107, 138,
	175, 142, 56, -169, -152, -116, 63, 36, -115, 307,
	151, -113, -114, 131, 202, 374, 80, 25, 27, 293,
	299, 201, 84, 120, 16, 85, 208, 383, 384, 119,
	76, 351, 126, 52, 343, 344, 341, 206, 354, 355,
	342, 300, 213, 20, 31, 10, 28, 159, 24, 113,
	128, 203, 89, 88, 162, 166, 167, 26, 160, 75,
	209, 211, 19, 55, 150, 11, 373, 13, 14, 388,
	375, 143, 142, 100, 387, 138, 50, 8, 122, 29,
	97, 46, 157, 212, 48, 98, 17, 345, 346, 34,
	361, 168, 115, 53, 40, 389, 81, 390, 73, 56,
	314, 207, 79, 15, 51, 169, 391, 210, 395, 99,
	129, 350, 176, 49, 204, 392, 136, 205, 6, 357,
	33, 158, 47, 137, 301, 393, 87, 141, 74, 5,
	156, 9, 394, 54, 57, 347, 348, 349, 38, 86,
	12, 153, 365, 77, 178, 396, 397, 152, 175, 179,
	180, 298, 138, 138, 138, 140, 222, 140, -115, -115,
	-79, -109, 61, -114, -121, 143, 63, -54, -121, 61,
	-114, -109, 137, -109, -109, 386, 383, 384, 350, 56,
	59, 135, 56, -54, 314, 137, -54, -54, 137, 145,
	60, 59, -153, -130, -134, -131, -136, -135, -137, -115,
	-132, -133, 258, 363, 255, 259, 256, 261, 262, 263,
	120, 260, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 264, 276, 33, 161, 248, 249, 250,
	253, 252, 254, 251, 122, 277, 278, 279, 280, 281,
	282, 283, 284, 285, 229, 230, 231, 232, 233, 234,
	235, 236, 237, 238, 240, 241, 243, 244, 245, 247,
	246, -153, -153, -115, 56, 221, -115, -115, -109, 223,
	-109, 56, -202, 19, 201, 202, 214, 56, -115, 123,
	81, 25, 123, -115, -109, -115, -54, 137, -230, 137,
	131, 127, 128, 129, -54, -54, 314, 129, 131, -54,
	-121, -172, -241, 366, 37, -152, -154, -161, -155, -156,
	-157, -158, -173, -162, 146, 144, 156, 399, 148, 149,
	285, -166, 150, 138, 157, 73, 81, -194, 146, -197,
	56, 293, 299, 144, 157, 156, 399, 71, 147, 25,
	373, 375, 31, 32, -147, 402, 287, -145, 296, 123,
	-140, 58, -140, -139, 257, -141, 58, -140, -141, -140,
	-141, -143, 259, -143, -143, -143, -143, 58, 58, -140,
	-140, -140, -140, -140, 58, -149, 58, -138, 242, -149,
	-150, 58, -150, 56, 57, -54, -115, 56, 56, -54,
	-222, 396, 397, -54, -54, -205, -203, 8, 9, 10,
	215, -54, -202, -116, -122, -113, -114, -121, 26, -130,
	276, -122, -113, -54, -49, -54, -49, 145, -119, 146,
	-161, 144, 156, 150, 145, 145, 146, 141, 145, 131,
	131, 127, 128, -54, 141, 41, 97, 123, -170, 59,
	-116, 71, 36, 58, -193, 56, 81, -164, -115, 157,
	-166, 61, 138, -192, 157, 383, 384, -237, 58, -166,
	138, -166, 61, 138, 157, 61, 157, 73, 19, -115,
	9, 157, 157, -193, 63, -54, 58, -190, 374, 16,
	58, -65, 58, -64, -60, 161, -79, -215, -77, -219,
	-78, 120, 121, 109, 110, 117, 82, 122, -68, -66,
	-67, -69, -218, 188, -237, 63, 64, -115, 62, 72,
	65, 66, 67, 68, 73, 74, 75, -121, 319, -75,
	287, 360, 359, 48, 49, 351, 352, 353, 354, 355,
	361, 356, 85, 38, 40, 264, 288, 289, 341, 349,
	348, 347, 345, 346, 343, 344, 398, 143, 342, 115,
	350, 286, -198, 65, 403, -146, 297, -115, 65, -143,
	-140, -143, 65, 61, -143, -143, -144, 120, 119, 33,
	-144, -144, -144, -144, -151, 63, -151, -148, 365, 366,
	-148, 65, 65, -149, 65, -54, -115, 58, 56, -54,
	-54, 25, 140, 25, -183, 25, 56, 59, 215, -202,
	-205, 123, 58, 57, 141, 59, 11, -152, -236, 138,
	157, -115, 157, -115, -115, -115, -115, -115, 146, -161,
	-119, 145, -152, 146, -161, 156, 145, 145, 146, 131,
	-115, -109, 63, 73, -115, -122, 90, -116, -241, -177,
	-174, -115, 157, -114, 58, -68, -66, -67, -69, -121,
	-216, 217, 81, 10, 9, 19, 150, 144, 156, 399,
	154, -192, 61, 58, -40, -59, 81, -65, 31, 26,
	9, 76, -237, 61, 61, 61, 61, -192, 156, -164,
	-115, 385, -194, 399, -142, 341, 344, 343, 289, -237,
	58, -40, 25, 31, -61, 65, 110, 106, 105, 116,
	109, 110, 111, 112, 113, 114, 115, 107, 108, 398,
	119, -65, 63, 124, 125, -65, -65, -65, -65, -65,
	-65, -65, -219, -2, -65, -72, -3, -4, -237, -40,
	6, -185, 398, -237, 63, 123, 123, 402, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, -237, -82,
	-40, -237, 41, -237, -237, -237, -237, -243, -237, -243,
	-243, -243, -243, -243, -243, -129, 120, 259, 161, 250,
	-132, -131, 265, 264, 122, -237, -237, -237, -237, 60,
	-144, -143, -144, 60, 60, -144, -144, 61, 61, 120,
	60, 59, 60, 248, 248, 60, 59, 60, 59, 58,
	57, 56, -176, -177, -68, -66, -67, -69, -54, 58,
	58, -2, -237, -109, -2, -184, 19, 185, 186, -54,
	-203, -93, -115, 157, -205, 56, -116, -151, -115, -232,
	-115, -54, -232, -115, 156, 144, 399, 154, 58, 33,
	128, 175, 141, -115, -236, -152, -115, -115, -115, -115,
	146, -161, 63, 97, 123, -171, -116, 63, 65, 60,
	59, -140, 58, -175, 291, -140, -140, -40, -89, 27,
	28, -89, -89, -89, 123, -217, 218, 217, -163, 181,
	182, 33, 183, -163, 385, 157, 157, -192, -237, -237,
	57, 58, -177, -238, 80, 79, 97, 216, 60, -40,
	-62, 100, 81, 98, 82, 99, 101, 102, 103, 104,
	84, 90, 91, 92, 93, 94, 95, 96, -108, -237,
	-78, -237, -237, -237, -59, -192, 58, -193, -140, 58,
	-140, 58, 58, -40, -93, 60, 58, 375, 59, 65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -134, 249, -129, -132, -126, 61, 63, 60,
	-64, 63, -115, -64, -115, -238, -238, 59, -238, -86,
	15, -28, 5, -2, -26, -242, 290, 122, -130, -38,
	24, -37, -72, -39, -40, 111, -121, -116, -116, -220,
	403, -221, 63, 65, 66, 67, 68, 73, 74, 75,
	-65, -37, -40, -37, -37, -37, -40, -128, 120, 255,
	161, 250, 244, 274, 275, 295, 248, 296, 237, 229,
	234, 247, 245, 231, 246, 230, 243, 240, 253, 252,
	254, 265, 256, 261, 263, 262, 260, -40, -37, -39,
	-39, -37, -31, 24, -80, -81, 86, -79, -115, 19,
	-238, -238, -238, -238, 65, -238, 257, 402, 402, -37,
	-38, -37, -37, -37, -144, -143, 63, -143, 298, 298,
	65, 65, -176, -115, -54, 60, 58, -93, -177, -2,
	-54, 141, 21, 6, 8, 9, 10, 19, -112, 59,
	25, -54, 60, -235, 58, 365, 59, 182, 58, 58,
	383, 384, 157, 58, 58, 57, -177, 31, 81, 178,
	31, 81, -130, -115, 144, -115, 156, 399, 33, 128,
	175, -115, 63, 73, -115, -179, -181, 365, -180, 57,
	151, 71, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 61, -174, -89, 65, -89, 60, -116, 220, 219,
	-193, 56, 73, 184, -193, 56, -164, -192, 58, -40,
	-160, -159, -115, -40, 155, -115, -177, 60, -189, 183,
	-40, -40, -70, 73, 81, 74, 75, -65, 21, 22,
	23, -71, -75, -78, 69, -237, 100, 98, 99, 84,
	-65, 98, -65, -65, -65, -65, -65, -65, 61, -79,
	-238, -238, -165, -116, -237, 60, 65, 60, 60, -238,
	60, 371, 372, -40, 58, -61, 365, -40, -90, 17,
	16, -5, -3, -237, 21, 24, -238, -33, 44, 45,
	-27, -147, -238, -37, 59, -238, -238, -118, -117, 25,
	-115, 63, 123, -237, 403, 59, -185, 398, -238, -238,
	-238, -238, 59, 57, 59, -140, 58, -140, -140, -150,
	235, -140, 235, -150, -140, -140, -140, -140, -140, -140,
	25, -238, 59, 11, 59, 11, -238, -37, -83, -81,
	89, -40, -238, -121, -238, 403, 403, -238, -238, -238,
	-238, -144, -144, 60, 60, 60, 58, 58, -95, 387,
	-176, 60, 60, -238, 25, -165, 203, -111, 86, -115,
	-206, -208, 224, -18, -15, -6, -8, -7, -10, -9,
	-11, -12, -13, -14, -23, -3, 143, -16, -17, -29,
	10, 9, 20, 33, 207, 208, 213, 209, 153, -30,
	176, -24, 8, 350, 166, 167, -112, 19, -240, -115,
	109, 90, 63, -152, 59, 132, -115, -177, -177, 58,
	58, 58, -40, -160, 155, -115, 60, -65, 73, 175,
	73, 157, 58, 58, 383, 384, 58, 31, 81, 178,
	31, 81, -130, 144, 97, -178, 56, -180, 365, 58,
	367, 61, -167, 90, 63, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 60, -89, -216, 9, -216,
	10, 58, 58, -177, -238, -238, 59, 365, 365, -237,
	-237, 60, -179, 358, 73, 74, 75, -65, -237, -65,
	-237, -65, -237, -71, -65, -65, -65, -36, 162, -65,
	80, -238, -238, 60, 59, -40, 60, -189, 56, 60,
	-191, 60, 248, -91, 19, 34, -40, -87, -88, -40,
	-86, -2, -31, 70, -238, -39, -223, 400, -117, 111,
	-122, -38, -221, -129, -223, -223, -128, 120, 161, -126,
	-40, -143, 61, -128, -65, -65, -65, -65, 362, -86,
	88, -40, 87, -95, -176, -177, -58, 12, 58, 60,
	-58, -179, -2, -186, 57, 204, 224, -40, 401, -208,
	224, -206, -86, -40, -26, -26, -26, -210, -115, -209,
	-26, -229, -228, 320, 321, 322, 323, 324, 325, 326,
	327, 328, 329, 330, 331, 332, 333, 334, 335, 336,
	337, 338, 339, 340, -115, -115, -115, -204, 40, 210,
	211, 212, -40, -115, -237, -82, -111, 203, 60, -240,
	-240, -240, -240, -115, 120, 33, 122, -240, -240, 134,
	60, 60, -177, -177, -177, 60, 60, 58, 58, -130,
	58, -177, -177, 58, 58, -40, -65, 73, 175, 73,
	157, 63, 73, -115, -182, -180, -115, 65, -199, 56,
	77, 65, -199, -199, -199, -199, -199, -200, 199, 200,
	65, -201, -200, 65, -89, -217, -163, -217, -163, -165,
	-177, 60, -189, -58, -159, 90, -115, 80, 90, -115,
	80, -160, -160, -179, -178, -65, -65, -65, -36, 80,
	-65, -36, -65, 147, -116, -238, 10, 9, 371, 372,
	60, 225, 377, 378, 168, 379, 183, 380, 381, 298,
	9, 100, 59, 18, 59, -89, -90, -238, -32, 47,
	-237, 123, -238, -238, -238, -238, 59, -238, -238, 59,
	-238, 19, -238, 59, -238, 19, -237, -35, 357, -40,
	-58, 60, 60, -179, -40, -93, -95, -179, -187, 365,
	-40, -206, -207, -208, -208, -206, 401, 88, -90, 87,
	-19, -15, -16, -18, 224, -107, 11, -49, -42, -43,
	-44, -45, -56, -78, -237, -54, 59, -211, -125, 205,
	25, -100, -127, 226, -104, 309, 308, -116, 319, -102,
	307, 259, 306, -199, 59, -115, 11, 11, 11, 11,
	-208, 224, -73, -72, -73, 224, 204, -216, 60, 60,
	60, 183, -58, -160, -160, -177, 60, 60, -177, -177,
	60, -130, 58, -237, 60, 59, -193, -193, 60, 60,
	-179, -238, -238, -178, -216, -238, -238, -238, -65, -54,
	-189, -163, -163, 365, -61, 16, -61, -61, -61, 65,
	378, 168, 380, 16, 42, -40, -40, -88, -91, -37,
	-238, 169, -86, 111, -65, -65, -65, -65, -65, -65,
	-238, 63, -179, -58, -179, -178, 60, -58, -178, 399,
	401, -208, 88, 88, -91, -206, 89, 89, -207, -55,
	29, -54, -54, -49, -239, 11, 57, 33, 59, -50,
	-52, -51, -53, 46, 50, 52, 47, 48, 49, 53,
	-125, -42, -237, -124, 169, -123, 25, -121, 63, -209,
	-115, 206, -130, 59, -100, 226, -101, -105, 310, 312,
	90, 123, -120, -115, 63, 31, 33, -228, 29, -207,
	-238, -207, -217, -179, -179, 358, 60, 60, 60, -216,
	60, 60, 183, -177, -115, -180, -216, -216, 147, -179,
	-178, -58, -58, -217, 58, -216, -61, -61, 382, -121,
	43, -41, 11, 16, -238, -238, -238, -238, -238, -238,
	-34, 100, 365, -178, -179, -179, -40, 88, -208, 401,
	-16, -19, 143, -17, 143, 401, 88, -96, 169, -54,
	-96, 57, -42, -99, -103, -79, -43, -44, -44, -43,
	-44, 46, 46, 46, 51, 46, 51, 46, -51, -121,
	-238, -57, 54, 142, 55, -237, -123, 19, -104, -101,
	59, 311, 313, 314, 56, 77, -40, -116, -144, -165,
	88, 401, -178, -178, -58, -58, -217, -179, -179, 358,
	60, -238, -217, -217, -54, -178, -216, -165, -217, 123,
	-58, -42, -224, -225, -40, -238, 363, 53, 368, -178,
	88, 89, -40, -40, -63, 33, 38, -2, -237, -237,
	-58, -42, -58, -41, 59, 90, -47, -46, 56, 57,
	-48, 56, -46, 46, 46, -213, 365, 138, 138, 138,
	-97, -115, -2, -105, -106, 315, 312, 318, 90, 88,
	-178, -178, 58, -217, 60, -116, -84, 13, -238, -86,
	59, 43, 364, 369, 143, -206, -19, -19, -98, 56,
	-99, -74, -76, -75, -237, -2, -92, -94, 6, -115,
	-113, -114, -97, -86, -58, -58, -103, -40, -40, 58,
	-40, 58, -237, -237, -237, -238, 59, 312, 316, 317,
	-40, -165, -85, 14, 16, -238, -225, 43, 401, 30,
	-98, 59, -238, -238, -238, 59, 123, -238, -90, -86,
	-93, -212, -214, 388, 389, 390, 391, 392, 393, 394,
	395, -93, -93, -93, -124, -115, 60, -40, -72, 365,
	88, 157, -76, 38, -2, -237, -94, -115, -90, 60,
	60, 59, -238, -238, -238, -57, 368, 143, 9, -74,
	-2, -214, -213, 369, -99, -238,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 0, -2, 0, 0,
	0, 0, 1, 3, 7, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 925, 0, 925, 925, 513, 514,
	515, 518, 0, 0, 997, 987, 988, 989, 990, 991,
	992, 993, 994, 996, 931, 932, 0, 0, 0, 0,
	0, 930, 0, 0, 227, 274, 274, 274, 933, 934,
	935, 936, 937, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
	1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
	1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
	1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
	1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
	1138, 1139, 0, 0, 0, 925, 0, 925, 0, 848,
	0, 0, -2, -2, 0, 0, 940, 0, 627, 938,
	939, 0, 925, 0, 0, 519, 516, 517, 223, 0,
	0, 995, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 0, 235, 404, 400, 239, 240, 241, 242, 243,
	387, 321, 350, 351, 387, 374, 394, 387, 394, 357,
	387, 394, 407, 407, 407, 407, 407, 365, 366, 367,
	368, 369, 370, 371, 0, 0, 341, 387, 387, 387,
	387, 387, 347, 348, 349, 376, 377, 378, 379, 380,
	381, 382, 383, 0, 322, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 389, 339, 389, 391, 391, 337,
	338, 236, 237, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 170, 171, 0, 0, 0, 0,
	0, 0, 0, 25, 0, 27, 224, 0, 998, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 528, 0, 531, 228, 229, 230, 231, 232,
	233, 234, 0, 520, 522, 0, -2, 0, 0, 0,
	0, 0, 1052, -2, -2, 246, 0, 248, 0, 250,
	0, 252, 253, 0, 255, 257, 520, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 406, 402, 401, 0,
	320, 0, 407, 387, 375, 407, 0, 407, 407, 358,
	359, 410, 0, 410, 410, 410, 410, 0, 0, 397,
	397, 344, 345, 346, 0, 332, 0, 389, 340, 334,
	335, 0, 336, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 157, 0, 207, 0, 177, 173, 174, 175,
	172, 0, 0, 850, 0, -2, -2, 941, 926, 23,
	0, 628, 942, 0, 0, 106, 0, 0, 0, 522,
	52, 0, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 925, 0, 0, 0, 0,
	532, 534, 530, 0, 943, 0, 0, 0, 523, 446,
	0, 454, -2, 0, 459, 510, 511, 0, 1140, 0,
	458, 0, 449, 451, 0, 509, 522, 247, 0, 0,
	0, 254, 256, 0, 260, 261, 0, 0, 291, 0,
	0, 275, 1140, 698, 699, 0, 701, 702, 703, 704,
	705, 0, 0, 0, 0, 0, 0, 0, 732, 733,
	734, 735, 0, 737, 0, -2, 854, 848, 856, 857,
	858, 859, 860, 861, 862, 647, 648, 0, 0, 906,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 837, 0, 0, 0, 0, 0, 770, 781,
	781, 781, 781, 781, 781, 781, 0, 0, 0, 0,
	0, 950, 289, 290, 405, 238, 403, 244, 0, 410,
	407, 410, 0, 0, 410, 410, 360, 411, 0, 0,
	361, 362, 363, 364, 0, 385, 0, 342, 0, 0,
	343, 0, 0, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 925, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 32, 0, 87,
	88, 523, 0, 0, 63, 64, 78, 0, 522, 56,
	0, 0, 42, 522, 61, -2, 0, 0, 0, 0,
	77, 0, 81, 82, 0, 0, 0, 533, 529, 0,
	465, 387, 387, -2, 0, 877, 877, 877, 877, 0,
	946, 944, 0, 0, 0, 0, 0, 0, 509, 0,
	0, 0, 453, 0, 0, 637, 0, 643, 645, 0,
	0, 0, 0, 447, 448, 450, 452, 456, 509, 0,
	523, 273, 249, 520, 251, 387, 387, 312, 0, 0,
	0, 0, 0, 292, 0, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 700, 0, 0, 723, 724, 725, 726, 727,
	728, 729, 736, 92, 643, 0, 872, 0, 0, 696,
	538, 853, 0, 552, 855, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 548, 0,
	838, 0, 0, 0, 0, 0, 0, 773, 0, 774,
	775, 776, 777, 778, 779, 780, 826, 0, 828, 829,
	830, 831, 832, 833, 836, 0, 552, 0, 0, 388,
	352, 410, 354, 395, 396, 355, 356, 412, 408, 409,
	407, 0, 407, 0, 0, 384, 0, 392, 0, 0,
	0, 0, 0, 460, -2, -2, -2, -2, 0, 0,
	0, -2, 0, 0, -2, 0, 0, 208, 209, 205,
	178, 176, 593, 594, 0, 0, 851, 0, 160, 28,
	999, 107, 30, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 523, 0, 41, 523, 0, 73, 74,
	522, 62, 80, 0, 0, 527, 535, 536, 537, 414,
	0, 877, 1140, 470, 477, 469, 877, 0, 473, 878,
	879, 474, 475, 476, 0, 478, 0, 945, 520, 485,
	486, 0, 0, 520, 521, 522, 509, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 0, 642, 1141, 640,
	0, 0, 0, 0, 0, 0, 686, 687, 688, 689,
	0, 679, 680, 681, 682, 683, 684, 685, 644, 0,
	669, 0, 0, 0, 637, 457, 0, 0, 307, 0,
	310, 0, 0, 0, 0, 0, 0, 270, 0, 864,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 720, 0, 731, -2, 721, 792, 793, 276,
	718, 316, 0, 719, 730, 695, 738, 0, 905, 880,
	0, 0, 542, 92, 545, 540, 317, -2, 404, 0,
	0, 0, 0, 554, 560, 556, 0, 850, 852, 0,
	952, 953, -2, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 560, 0, 0, 0, 0, 0, 387, 387,
	797, 387, 391, 800, 801, 802, 387, 805, 807, 808,
	809, 810, 391, 812, 813, 814, 815, 816, 387, 387,
	819, 820, 387, 387, 823, 387, 387, 0, 0, 0,
	0, 0, 0, 549, 846, 841, 0, 0, 848, 0,
	767, 768, 769, 771, 0, 782, 827, 0, 0, 0,
	0, 553, 0, 0, 353, 410, 386, 410, 398, 399,
	0, 0, 0, 0, 0, 635, 0, 0, 0, 92,
	0, 0, 211, 212, 213, 214, 215, 0, 844, 0,
	0, 205, -2, 26, 162, 0, 0, 31, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	34, 0, 37, 79, 0, 0, 0, 0, 0, 0,
	0, 523, 83, 84, 0, 443, 415, 0, 417, 0,
	435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 466, 467, 0, 471, 877, 0, 947, 948,
	943, 0, 487, 488, 943, 0, 0, 0, 0, 0,
	0, 501, 848, 0, 0, 0, 0, 414, 494, 0,
	638, 639, 641, 673, 0, 675, 677, 649, 0, 0,
	0, 656, 692, 693, 694, 0, 0, 0, 0, 0,
	690, 0, 661, 663, 664, 665, 666, 0, 0, 0,
	671, 672, 0, 524, 0, 308, 0, 311, 313, 314,
	262, 266, 267, 0, 293, 0, 0, 697, 884, 0,
	0, 872, 94, 0, 543, 544, -2, 548, 546, 547,
	539, 319, 739, 0, 0, 565, 745, 557, 561, 0,
	563, 564, 0, 552, 951, 0, -2, 0, 565, 565,
	746, 747, 0, 0, 0, 794, 1140, 407, 798, 799,
	803, 804, 806, 811, 817, 818, 821, 822, 824, 825,
	0, 752, 0, 0, 0, 0, 0, 872, 0, 842,
	0, 0, 765, 766, 772, 834, 835, 783, 784, 785,
	786, 372, 373, 390, 393, 635, 0, 0, 633, 0,
	0, 633, 414, 93, 0, 216, 0, 0, 0, 595,
	20, 179, 0, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 872, 0, 138, 139, 538,
	538, 538, 0, 538, 0, 0, 0, 126, 0, 0,
	837, 917, 98, 99, 200, 201, 844, 0, 0, -2,
	162, 162, -2, 162, 162, 0, 1000, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 33, 35, 0,
	36, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 47, 0, 0, 413, 0, 418, 0, 0,
	0, 421, 0, 436, 423, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 388, 472, 946, 0, 946,
	0, 0, 0, 0, 314, 495, 0, 0, 0, 0,
	0, 414, 443, 315, 674, 676, 678, 650, 0, 652,
	0, 654, 0, 657, 690, 662, 0, 658, 0, 690,
	0, 646, 670, 0, 0, 0, 309, 258, 0, 0,
	0, 272, 0, 89, 0, 0, 881, 873, 874, 877,
	880, 92, 550, 541, 740, 555, 741, 0, 562, 558,
	0, 0, 954, -2, 742, 743, 0, 387, 797, 0,
	0, 795, 796, 0, 0, 0, 0, 0, 0, 839,
	764, 847, 0, 633, 0, 0, 414, 0, 0, 635,
	414, 14, -2, 218, 0, 206, 0, 845, 0, 182,
	0, 0, 880, 0, 929, 0, 0, 114, -2, 116,
	0, 0, 964, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 121, 122, 123, 0, 0, 0,
	0, 0, 0, 202, 202, 204, 0, 0, 161, 163,
	164, 165, 166, -2, -2, 1108, -2, 167, 168, 29,
	39, 943, 0, 0, 0, 65, 67, 0, 0, 38,
	0, 0, 0, 0, 0, 0, 43, 45, 0, 46,
	0, 85, 86, 444, 0, 419, 424, 422, 425, 437,
	438, 426, 427, 428, 429, 430, 431, 432, 439, 440,
	433, 434, 441, 442, 468, 479, 520, 480, 520, 0,
	0, 414, 493, 496, 502, 503, 504, 505, 506, 507,
	508, 0, 0, 443, 943, 643, 643, 643, 659, 0,
	691, 660, 667, 0, 525, 314, 0, 0, 268, 269,
	271, 0, 0, 0, 0, 0, 0, 304, 0, 722,
	885, 0, 0, 0, 0, 876, 884, 95, 0, 551,
	0, 0, 744, 748, 753, 749, 0, 751, 754, 0,
	756, 0, 758, 0, 760, 0, 0, 0, 0, 843,
	414, 633, 414, 443, 634, 0, 633, 443, 18, 0,
	217, 19, 0, 133, 180, 0, 0, 183, 884, 0,
	144, 142, 138, 145, 0, 0, 0, 0, 0, 572,
	574, 575, 576, 608, 0, 610, 0, 0, 0, 120,
	609, 110, 0, 0, 910, 158, 159, 0, 0, 0,
	-2, 0, 921, 918, 0, 124, 127, 128, 129, 130,
	131, 0, 198, 203, 0, 0, 206, 946, 414, 414,
	54, 0, 68, 0, 0, 0, 40, 943, 0, 0,
	75, 48, 0, 0, 416, 0, 943, 943, 0, 414,
	443, 497, 499, 490, 946, -2, -2, -2, 668, 0,
	259, -2, 265, 0, 295, 0, 297, 298, 299, 300,
	301, 302, 303, 0, 0, 882, 883, 875, 90, 570,
	566, 0, 0, 559, 0, 0, 0, 0, 0, 787,
	763, 840, 443, 414, 11, 9, 636, 414, 13, 0,
	0, 134, 184, 181, 197, 0, 0, 0, 0, 108,
	0, 626, -2, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 615, 0, 0, 618, 0, 0, 0,
	0, 0, 0, 629, 0, 611, 0, 613, 614, 117,
	608, 0, 118, 0, 111, 0, 113, 147, 0, 0,
	0, 0, 410, 922, 923, 924, 920, 965, 0, 0,
	199, 0, 49, 443, 443, 66, 69, 71, 53, 946,
	414, 414, 0, 0, 0, 420, 946, 946, 0, 443,
	943, 498, 500, 492, 0, 946, 294, 296, 305, 0,
	886, 633, 0, 0, 568, 750, 755, 757, 759, 761,
	0, 0, 0, 8, 12, 443, 219, 21, 135, 0,
	140, 141, 0, 143, 0, 0, 146, 0, 0, 625,
	633, 0, 633, 570, 907, 0, 573, 604, 606, 0,
	601, 616, 617, 619, 0, 621, 0, 623, 624, 577,
	578, 579, 0, 0, 0, 0, 612, 0, 911, 112,
	0, 0, 150, 151, 912, 913, 914, 0, 916, 125,
	132, 0, 50, 51, 70, 72, 58, 443, 443, 76,
	57, 445, 481, 482, 0, 489, 946, 0, 264, 0,
	865, 571, 0, 869, 871, 762, 0, 0, 0, 10,
	0, 0, 0, 0, 899, 0, 0, -2, 0, 0,
	872, 633, 103, 633, 0, 0, 598, 605, 0, 0,
	599, 0, 600, 620, 622, 591, 0, 0, 0, 0,
	0, 596, -2, 148, 149, 0, 0, 155, 0, 22,
	59, 60, 0, 491, 484, 306, 867, 0, 567, 0,
	0, 788, 0, 791, 136, 0, 0, 144, 96, 0,
	899, 887, 901, 903, 0, 92, 0, 893, -2, 895,
	897, 898, 0, 880, 102, 872, 908, 909, 602, 0,
	607, 0, 0, 0, 0, 610, 0, 152, 153, 154,
	915, 0, 91, 0, 0, 569, 870, 789, 0, 0,
	97, 0, 904, -2, 0, 0, 0, 109, 101, 880,
	0, 0, 581, 583, 584, 585, 586, 587, 588, 589,
	590, 0, 0, 0, 629, 597, 483, 868, 866, 0,
	0, 0, 902, 0, -2, 0, 894, 896, 100, 603,
	580, 0, 630, 631, 632, 579, 0, 137, 0, 890,
	92, 582, 592, 790, 900, -2,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 401,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 402, 3, 403, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:432
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:437
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:438
		{
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:444
		{
			yyVAL.statement = nil
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:450
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 8:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:455
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:475
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:495
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 11:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:516
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 12:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:532
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 13:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:549
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:569
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:584
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:595
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:607
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:618
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:634
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:648
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:662
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:675
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[4].colIdent},
					TableName: yyDollar[8].tableName,
					Time:      yyDollar[5].str,
					Event:     yyDollar[6].strs,
					Body:      yyDollar[12].blockStatement,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:689
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 24:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:700
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: ColumnType{Type: "enum", EnumValues: yyDollar[7].strs},
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:711
		{
			yyVAL.statement = nil
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:716
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:720
		{
			yyVAL.statement = nil
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:724
		{
			yyVAL.statement = nil
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:728
		{
			yyVAL.statement = nil
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:732
		{
			yyVAL.statement = nil
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:736
		{
			yyVAL.statement = nil
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:742
		{
			yyVAL.statement = nil
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:746
		{
			yyVAL.statement = nil
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:750
		{
			yyVAL.statement = nil
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:754
		{
			yyVAL.statement = nil
		}
	case 36:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:758
		{
			yyVAL.statement = nil
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:762
		{
			yyVAL.statement = nil
		}
	case 38:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:766
		{
			yyVAL.statement = nil
		}
	case 39:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:771
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[5].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 40:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:785
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:799
		{
			yyVAL.statement = nil
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:803
		{
			yyVAL.statement = nil
		}
	case 43:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:807
		{
			yyVAL.statement = nil
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:811
		{
			yyVAL.statement = nil
		}
	case 45:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:815
		{
			yyVAL.statement = nil
		}
	case 46:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:819
		{
			yyVAL.statement = nil
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:823
		{
			yyVAL.statement = nil
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:827
		{
			yyVAL.statement = nil
		}
	case 49:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:831
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[11].boolVal),
						InitiallyDeferred: bool(yyDollar[12].boolVal),
					},
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 50:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:850
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Clustered:  true,
					Constraint: true,
					Options:    yyDollar[12].indexOptions,
					Partition:  yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 51:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:868
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Clustered:  false,
					Constraint: true,
					Options:    yyDollar[12].indexOptions,
					Partition:  yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:886
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[3].tableName,
				NewName:    yyDollar[3].tableName,
				ForeignKey: yyDollar[5].foreignKeyDefinition,
			}
		}
	case 53:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:895
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[7].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 54:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:909
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[6].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:923
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    NewColIdent(""),
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:937
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 57:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:946
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 58:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:960
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 59:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:980
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 60:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:998
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1016
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1025
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1034
		{
			yyVAL.statement = nil
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1038
		{
			yyVAL.statement = nil
		}
	case 65:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1042
		{
			yyVAL.statement = nil
		}
	case 66:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1046
		{
			yyVAL.statement = nil
		}
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1050
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					Exclusions:     yyDollar[9].exclusionPairs,
				},
			}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1062
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					Exclusions:     yyDollar[9].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 69:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1075
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      "GIST",
					Exclusions:     yyDollar[11].exclusionPairs,
				},
			}
		}
	case 70:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1088
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      "GIST",
					Exclusions:     yyDollar[11].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[13].expr),
				},
			}
		}
	case 71:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1102
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      yyDollar[9].colIdent.String(),
					Exclusions:     yyDollar[11].exclusionPairs,
				},
			}
		}
	case 72:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1115
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      yyDollar[9].colIdent.String(),
					Exclusions:     yyDollar[11].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[13].expr),
				},
			}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1129
		{
			yyVAL.statement = nil
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1133
		{
			yyVAL.statement = nil
		}
	case 75:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1137
		{
			yyVAL.statement = nil
		}
	case 76:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1141
		{
			yyVAL.statement = nil
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1145
		{
			yyVAL.statement = nil
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1149
		{
			yyVAL.statement = nil
		}
	case 79:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1153
		{
			yyVAL.statement = nil
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1157
		{
			yyVAL.statement = nil
		}
	case 81:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1163
		{
			yyVAL.statement = nil
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1167
		{
			yyVAL.statement = nil
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1171
		{
			yyVAL.statement = nil
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1175
		{
			yyVAL.statement = nil
		}
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1179
		{
			yyVAL.statement = nil
		}
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1183
		{
			yyVAL.statement = nil
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1193
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1201
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 91:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1208
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1214
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1218
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1224
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1228
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 96:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1235
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1247
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1259
		{
			yyVAL.str = InsertStr
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1263
		{
			yyVAL.str = ReplaceStr
		}
	case 100:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1269
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 101:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1275
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 102:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1283
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1288
		{
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1289
		{
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1293
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1302
		{
			yyVAL.partitions = nil
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1306
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1316
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1320
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1324
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1330
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1334
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1347
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1351
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1357
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1362
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1366
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1372
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1379
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1386
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1393
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1401
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1411
		{
			yyVAL.str = ""
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1415
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1419
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1423
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1427
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1433
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1440
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1454
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1458
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1462
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1469
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1477
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1487
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1491
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1498
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1508
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1519
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1524
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1529
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1536
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1540
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1551
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1555
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1561
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1565
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1569
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1575
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1579
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1583
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1587
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1593
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1597
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1603
		{
			yyVAL.str = SessionStr
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1607
		{
			yyVAL.str = GlobalStr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1612
		{
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1613
		{
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1617
		{
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1618
		{
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1619
		{
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1620
		{
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1621
		{
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1622
		{
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1623
		{
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1627
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1631
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1635
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1639
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1645
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1649
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1653
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1658
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1664
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1668
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1674
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1678
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1683
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1692
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1696
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1705
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1721
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1734
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1744
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1749
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1755
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1756
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.exprs = nil
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1760
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1764
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1769
		{
			yyVAL.empty = struct{}{}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.empty = struct{}{}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1774
		{
			yyVAL.bytes = nil
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1778
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1782
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1787
		{
			yyVAL.bytes = nil
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1791
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1795
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1799
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1803
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1807
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1812
		{
			yyVAL.expr = nil
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1816
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1821
		{
			yyVAL.expr = nil
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1825
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1830
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1834
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1839
		{
			yyVAL.bytes = nil
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1843
		{
			yyVAL.bytes = nil
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1849
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1856
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1862
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1866
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1871
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1875
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1879
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1883
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1887
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1895
		{
			yyVAL.TableSpec = yyDollar[1].TableSpec
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1902
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1907
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1912
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1918
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1929
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].colIdent.val) + "." + string(yyDollar[3].colIdent.val)}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1939
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1952
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1957
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1962
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1967
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1973
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1978
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1983
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1988
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1993
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1998
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2003
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2008
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2013
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 259:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2022
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2032
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2037
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2042
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 263:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2049
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 264:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2056
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 265:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2063
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2071
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2076
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 268:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2081
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 269:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2086
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2092
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 271:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2098
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 272:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2105
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2112
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2118
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2124
		{
			// Check if it's a simple value that should be stored as Value
			if val, ok := yyDollar[2].expr.(*SQLVal); ok {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: val}
			} else if val, ok := yyDollar[2].expr.(BoolVal); ok {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: NewBoolSQLVal(bool(val))}
			} else {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
			}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2135
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: &ParenExpr{Expr: yyDollar[3].expr}}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2141
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2145
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2149
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2153
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2157
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2161
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2165
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2169
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2173
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2177
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2181
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2187
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2193
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2199
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2205
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2209
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2214
		{
			yyVAL.sequence = &Sequence{}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2218
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2223
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2228
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2233
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2238
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2243
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2248
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2253
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2258
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2263
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2268
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2273
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 306:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2278
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2285
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2289
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2293
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, NewIntVal(yyDollar[3].bytes))
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2297
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2301
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2305
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2309
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2314
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2318
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2323
		{
			yyVAL.bytes = nil
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2332
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2337
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2343
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2347
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2351
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2355
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2359
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2363
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2367
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2371
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2375
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2379
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2385
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2391
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2397
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2403
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2409
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2415
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2419
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2424
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2428
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2434
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2438
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2442
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2446
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2450
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2458
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2462
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2472
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2476
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2514
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2546
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 373:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2572
		{
			yyVAL.str = ""
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2576
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2590
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2594
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2620
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2625
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2630
		{
			yyVAL.optVal = nil
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2634
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2639
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2643
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2651
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2655
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2661
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2669
		{
			yyVAL.optVal = nil
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2673
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2677
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2686
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2690
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2694
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2699
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2703
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2708
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2712
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2717
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2721
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2725
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2730
		{
			yyVAL.str = ""
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2734
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2738
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2743
		{
			yyVAL.str = ""
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2747
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2751
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 413:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2757
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2762
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2766
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2770
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2776
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2780
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2786
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2790
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2796
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2800
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2805
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2809
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2813
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2817
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2821
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2825
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2829
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2833
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2837
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2841
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2845
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2849
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2860
		{
			yyVAL.str = ""
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2864
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2870
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2874
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2880
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2884
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2890
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2894
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2900
		{
			yyVAL.indexPartition = nil
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2904
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2908
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2914
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2918
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2922
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2926
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2930
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2934
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2938
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2942
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2946
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2950
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2954
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2958
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2964
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2968
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2974
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2979
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2983
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2987
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2991
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2997
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3001
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3007
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3012
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: NewIntVal(yyDollar[3].bytes), Direction: yyDollar[5].str}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3017
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3021
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3025
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3029
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3033
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3037
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3041
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3045
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3055
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[3].boolVal),
				InitiallyDeferred: bool(yyDollar[4].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 479:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3064
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[6].boolVal),
				InitiallyDeferred: bool(yyDollar[7].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 480:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3075
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[6].boolVal),
				InitiallyDeferred: bool(yyDollar[7].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 481:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3086
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[9].boolVal),
				InitiallyDeferred: bool(yyDollar[10].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 482:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3097
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[9].boolVal),
				InitiallyDeferred: bool(yyDollar[10].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 483:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3110
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 484:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3121
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3132
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3136
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3140
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3144
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 489:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3150
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 490:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3160
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 491:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3171
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:   yyDollar[6].indexColumns,
				Options:   yyDollar[8].indexOptions,
				Partition: yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{
					Deferrable:        bool(yyDollar[10].boolVal),
					InitiallyDeferred: bool(yyDollar[11].boolVal),
				},
			}
		}
	case 492:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3185
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
				ConstraintOptions: &ConstraintOptions{
					Deferrable:        bool(yyDollar[8].boolVal),
					InitiallyDeferred: bool(yyDollar[9].boolVal),
				},
			}
		}
	case 493:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3200
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 495:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3218
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Exclusions:     yyDollar[5].exclusionPairs,
			}
		}
	case 496:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3225
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 497:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3233
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "GIST",
				Exclusions:     yyDollar[7].exclusionPairs,
			}
		}
	case 498:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3241
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "GIST",
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 499:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3250
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
			}
		}
	case 500:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3258
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3269
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3273
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3279
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: "="}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3283
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: yyDollar[3].colIdent.String()}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3287
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: "&&"}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3291
		{
			// For expressions, we'll use a special column name to indicate it's an expression
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: "="}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3296
		{
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: yyDollar[3].colIdent.String()}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3300
		{
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: "&&"}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3306
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3310
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3314
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3320
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3324
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3328
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3332
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3336
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3340
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3346
		{
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3347
		{
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3351
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3355
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3360
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3367
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3371
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3378
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3382
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3388
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3392
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3397
		{
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3398
		{
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3402
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3406
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3410
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3416
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3420
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3424
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3429
		{
			setAllowComments(yylex, true)
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3439
		{
			yyVAL.bytes2 = nil
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3443
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3449
		{
			yyVAL.str = UnionStr
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3453
		{
			yyVAL.str = UnionAllStr
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3457
		{
			yyVAL.str = UnionDistinctStr
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3462
		{
			yyVAL.str = ""
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3466
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3470
		{
			yyVAL.str = SQLCacheStr
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3475
		{
			yyVAL.str = ""
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3479
		{
			yyVAL.str = DistinctStr
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3484
		{
			yyVAL.str = ""
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3488
		{
			yyVAL.str = StraightJoinHint
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3493
		{
			yyVAL.selectExprs = nil
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3497
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3503
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3507
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3513
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3517
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3521
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 559:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3525
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3530
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3534
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3545
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3550
		{
			yyVAL.overExpr = nil
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 567:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3558
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3562
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 569:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3566
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3571
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3575
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3581
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3585
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3595
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3599
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3603
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3608
		{
			yyVAL.strs = []string{}
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3612
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3618
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3622
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3628
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3632
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3636
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3640
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3644
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3648
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3652
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3656
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3662
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 592:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3666
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3672
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3677
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3681
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3687
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3691
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3708
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3712
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3716
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3724
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3728
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3730
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3734
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3736
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3739
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3741
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3744
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3748
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3752
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3759
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3765
		{
			yyVAL.str = JoinStr
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3769
		{
			yyVAL.str = JoinStr
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3773
		{
			yyVAL.str = JoinStr
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3779
		{
			yyVAL.str = StraightJoinStr
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3785
		{
			yyVAL.str = LeftJoinStr
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3789
		{
			yyVAL.str = LeftJoinStr
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3793
		{
			yyVAL.str = RightJoinStr
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3797
		{
			yyVAL.str = RightJoinStr
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3803
		{
			yyVAL.str = NaturalJoinStr
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3807
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3817
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3821
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3827
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3831
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3836
		{
			yyVAL.indexHints = nil
		}
	case 630:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3840
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 631:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3844
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 632:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3848
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3853
		{
			yyVAL.expr = nil
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3857
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3862
		{
			yyVAL.columns = nil
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3866
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3888
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3892
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3896
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3900
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3906
		{
			yyVAL.str = ""
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3910
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3916
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3920
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3926
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3930
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 651:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3934
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, All: true}
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3938
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 653:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3942
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3946
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 655:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3950
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3954
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3958
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3962
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 659:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3966
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3970
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3974
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3978
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3982
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixRegexStr, Right: yyDollar[3].expr}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3986
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixRegexCiStr, Right: yyDollar[3].expr}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3990
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixNotRegexStr, Right: yyDollar[3].expr}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3994
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixNotRegexCiStr, Right: yyDollar[3].expr}
		}
	case 667:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3998
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 668:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4002
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4006
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4011
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4015
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4019
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4025
		{
			yyVAL.str = IsNullStr
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4029
		{
			yyVAL.str = IsNotNullStr
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4033
		{
			yyVAL.str = IsTrueStr
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4037
		{
			yyVAL.str = IsNotTrueStr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.str = IsFalseStr
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4045
		{
			yyVAL.str = IsNotFalseStr
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4051
		{
			yyVAL.str = EqualStr
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4055
		{
			yyVAL.str = LessThanStr
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4059
		{
			yyVAL.str = GreaterThanStr
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4063
		{
			yyVAL.str = LessEqualStr
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4067
		{
			yyVAL.str = GreaterEqualStr
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4071
		{
			yyVAL.str = NotEqualStr
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4075
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4079
		{
			yyVAL.str = PosixRegexStr
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4083
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4087
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4091
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4096
		{
			yyVAL.expr = nil
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4100
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4106
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4110
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4114
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4120
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4130
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4136
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4140
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4144
		{
			// PostgreSQL date literal syntax: DATE '2022-01-01'
			yyVAL.expr = NewStrVal(append([]byte("date "), yyDollar[2].bytes...))
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4149
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4153
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4157
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4161
		{
			yyVAL.expr = yyDollar[1].arrayConstructor
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4165
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4169
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4173
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4205
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4209
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4213
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4217
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4221
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4225
		{
			colType := yyDollar[3].columnType
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Type: &colType}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4230
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 722:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4234
		{
			timestampType := ColumnType{Type: "timestamp", Timezone: BoolVal(true)}
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Type: &timestampType}
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4239
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4243
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4247
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4255
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4269
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4273
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4277
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4285
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4293
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4301
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4305
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4309
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4319
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 740:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4323
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 741:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4327
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 742:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4331
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 743:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4335
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 744:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4339
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4343
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4353
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4357
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 748:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4361
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 749:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4366
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 750:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4370
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 751:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4374
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4378
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("coalesce"), Exprs: yyDollar[3].selectExprs}
		}
	case 753:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4382
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 754:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4386
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 755:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4390
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 756:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4394
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 757:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4398
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 758:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4402
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 759:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4406
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 760:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4410
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 761:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4414
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 762:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4418
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 763:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4422
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 764:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4426
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4430
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 766:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4435
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4439
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4443
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4447
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4458
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4462
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 772:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4466
		{
			yyVAL.expr = &FuncExpr{
				Name:  NewColIdent("current_timestamp"),
				Exprs: SelectExprs{&AliasedExpr{Expr: NewIntVal(yyDollar[3].bytes)}},
			}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4473
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4477
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4481
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4486
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4491
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4496
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4501
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4505
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4519
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 784:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4523
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4527
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 786:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4531
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4537
		{
			yyVAL.str = ""
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4541
		{
			yyVAL.str = BooleanModeStr
		}
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4545
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 790:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4549
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4553
		{
			yyVAL.str = QueryExpansionStr
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4559
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4563
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4569
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4573
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4577
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4581
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4585
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4589
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4595
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4599
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4603
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4607
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4611
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4615
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4619
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4627
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4639
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4643
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4647
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4651
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4655
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4659
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4663
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4667
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4671
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4675
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4679
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4683
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4687
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4691
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4695
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4701
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4705
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4709
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4713
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4717
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4721
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4725
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4729
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4733
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type + "[]"}
		}
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + "[]"}
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4741
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4746
		{
			yyVAL.expr = nil
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4750
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 839:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4755
		{
			yyVAL.str = string("")
		}
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4759
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4765
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4769
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 843:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4775
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4780
		{
			yyVAL.empty = struct{}{}
		}
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4782
		{
			yyVAL.empty = struct{}{}
		}
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4785
		{
			yyVAL.expr = nil
		}
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4789
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4795
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4799
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4803
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 851:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4807
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4813
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4819
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4823
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4828
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4833
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4837
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4841
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4845
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4849
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4853
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4857
		{
			yyVAL.expr = &NullVal{}
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4863
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4867
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4872
		{
			yyVAL.exprs = nil
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4876
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 867:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4881
		{
			yyVAL.expr = nil
		}
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4885
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4891
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4895
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4901
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 872:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4906
		{
			yyVAL.orderBy = nil
		}
	case 873:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4910
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4916
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4920
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4926
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4931
		{
			yyVAL.str = AscScr
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4935
		{
			yyVAL.str = AscScr
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4939
		{
			yyVAL.str = DescScr
		}
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4944
		{
			yyVAL.limit = nil
		}
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4948
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 882:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4952
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 883:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4956
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 884:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4961
		{
			yyVAL.str = ""
		}
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4965
		{
			yyVAL.str = ForUpdateStr
		}
	case 886:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4969
		{
			yyVAL.str = ShareModeStr
		}
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4982
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4986
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 889:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4990
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 890:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4995
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 891:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4999
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 892:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5003
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5010
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5014
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5020
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5024
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5028
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5032
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 899:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5037
		{
			yyVAL.updateExprs = nil
		}
	case 900:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5041
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5047
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5051
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5057
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5061
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5067
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5073
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5083
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5087
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5093
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5099
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5103
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5109
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5113
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5117
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 915:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5122
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5126
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5132
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5138
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5145
		{
			yyVAL.bytes = []byte("charset")
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5152
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5156
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5160
		{
			yyVAL.expr = &Default{}
		}
	case 925:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5165
		{
			yyVAL.empty = struct{}{}
		}
	case 926:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5167
		{
			yyVAL.empty = struct{}{}
		}
	case 927:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5170
		{
			yyVAL.empty = struct{}{}
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5172
		{
			yyVAL.empty = struct{}{}
		}
	case 929:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5175
		{
			yyVAL.str = ""
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5177
		{
			yyVAL.str = IgnoreStr
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5181
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5185
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5192
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5196
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5200
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5204
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5210
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5214
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5219
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5226
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5232
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5236
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 945:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5240
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 946:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5246
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 947:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5250
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 948:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5254
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 949:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5260
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5264
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 951:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5271
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5275
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: nil}
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5282
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5286
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 955:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5293
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5297
		{
			yyVAL.arrayElement = NewIntVal(yyDollar[1].bytes)
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5301
		{
			yyVAL.arrayElement = NewFloatVal(yyDollar[1].bytes)
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5305
		{
			yyVAL.arrayElement = NewHexNum(yyDollar[1].bytes)
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5309
		{
			yyVAL.arrayElement = NewValArg(yyDollar[1].bytes)
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5313
		{
			yyVAL.arrayElement = &NullVal{}
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5317
		{
			yyVAL.arrayElement = BoolVal(true)
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5321
		{
			yyVAL.arrayElement = BoolVal(false)
		}
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5325
		{
			yyVAL.arrayElement = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5331
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5335
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5364
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5368
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5372
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5376
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5380
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5384
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5388
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5392
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 995:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5396
		{
			yyVAL.str = "ALL PRIVILEGES"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5400
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5406
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5410
		{
			yyVAL.strs = append(yyVAL.strs, yyDollar[3].str)
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5416
		{
			yyVAL.strs = []string{yyDollar[1].colIdent.String()}
		}
	case 1000:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5420
		{
			yyVAL.strs = append(yyVAL.strs, yyDollar[3].colIdent.String())
		}
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5576
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5585
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
