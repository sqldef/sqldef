// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex any, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex any, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex any, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex any) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex any) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex any) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	statements               []Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
	handlerCondition         HandlerCondition
	handlerConditions        []HandlerCondition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const GRANT = 57457
const REVOKE = 57458
const SCHEMA = 57459
const TABLE = 57460
const INDEX = 57461
const MATERIALIZED = 57462
const VIEW = 57463
const TO = 57464
const IGNORE = 57465
const IF = 57466
const PRIMARY = 57467
const COLUMN = 57468
const CONSTRAINT = 57469
const REFERENCES = 57470
const SPATIAL = 57471
const FULLTEXT = 57472
const FOREIGN = 57473
const KEY_BLOCK_SIZE = 57474
const POLICY = 57475
const WHILE = 57476
const EXTENSION = 57477
const UNIQUE = 57478
const KEY = 57479
const SHOW = 57480
const DESCRIBE = 57481
const EXPLAIN = 57482
const DATE = 57483
const ESCAPE = 57484
const REPAIR = 57485
const OPTIMIZE = 57486
const TRUNCATE = 57487
const EXEC = 57488
const EXECUTE = 57489
const MAXVALUE = 57490
const PARTITION = 57491
const REORGANIZE = 57492
const LESS = 57493
const THAN = 57494
const PROCEDURE = 57495
const TRIGGER = 57496
const TYPE = 57497
const RETURN = 57498
const STATUS = 57499
const VARIABLES = 57500
const RESTRICT = 57501
const CASCADE = 57502
const NO = 57503
const ACTION = 57504
const PERMISSIVE = 57505
const RESTRICTIVE = 57506
const PUBLIC = 57507
const CURRENT_USER = 57508
const SESSION_USER = 57509
const PAD_INDEX = 57510
const FILLFACTOR = 57511
const IGNORE_DUP_KEY = 57512
const STATISTICS_NORECOMPUTE = 57513
const STATISTICS_INCREMENTAL = 57514
const ALLOW_ROW_LOCKS = 57515
const ALLOW_PAGE_LOCKS = 57516
const DISTANCE = 57517
const M = 57518
const EUCLIDEAN = 57519
const COSINE = 57520
const BEFORE = 57521
const AFTER = 57522
const EACH = 57523
const ROW = 57524
const SCROLL = 57525
const CURSOR = 57526
const OPEN = 57527
const CLOSE = 57528
const FETCH = 57529
const PRIOR = 57530
const FIRST = 57531
const LAST = 57532
const DEALLOCATE = 57533
const INSTEAD = 57534
const OF = 57535
const OUTPUT = 57536
const HANDLER = 57537
const CONTINUE = 57538
const EXIT = 57539
const SQLEXCEPTION = 57540
const SQLWARNING = 57541
const SQLSTATE = 57542
const FOUND = 57543
const DEFERRABLE = 57544
const INITIALLY = 57545
const IMMEDIATE = 57546
const DEFERRED = 57547
const CONCURRENTLY = 57548
const ASYNC = 57549
const SQL = 57550
const SECURITY = 57551
const BEGIN = 57552
const START = 57553
const TRANSACTION = 57554
const COMMIT = 57555
const ROLLBACK = 57556
const BIT = 57557
const TINYINT = 57558
const SMALLINT = 57559
const SMALLSERIAL = 57560
const MEDIUMINT = 57561
const INT = 57562
const INTEGER = 57563
const SERIAL = 57564
const BIGINT = 57565
const BIGSERIAL = 57566
const INTNUM = 57567
const REAL = 57568
const DOUBLE = 57569
const PRECISION = 57570
const FLOAT_TYPE = 57571
const DECIMAL = 57572
const NUMERIC = 57573
const SMALLMONEY = 57574
const MONEY = 57575
const TIME = 57576
const TIMESTAMP = 57577
const DATETIME = 57578
const YEAR = 57579
const DATETIMEOFFSET = 57580
const DATETIME2 = 57581
const SMALLDATETIME = 57582
const CHAR = 57583
const VARCHAR = 57584
const VARYING = 57585
const BOOL = 57586
const CHARACTER = 57587
const VARBINARY = 57588
const NCHAR = 57589
const NVARCHAR = 57590
const NTEXT = 57591
const UUID = 57592
const TEXT = 57593
const TINYTEXT = 57594
const MEDIUMTEXT = 57595
const LONGTEXT = 57596
const CITEXT = 57597
const BLOB = 57598
const TINYBLOB = 57599
const MEDIUMBLOB = 57600
const LONGBLOB = 57601
const JSON = 57602
const JSONB = 57603
const ENUM = 57604
const GEOMETRY = 57605
const POINT = 57606
const LINESTRING = 57607
const POLYGON = 57608
const GEOMETRYCOLLECTION = 57609
const MULTIPOINT = 57610
const MULTILINESTRING = 57611
const MULTIPOLYGON = 57612
const VECTOR = 57613
const VARIADIC = 57614
const ARRAY = 57615
const NOW = 57616
const GETDATE = 57617
const BPCHAR = 57618
const TEXT_PATTERN_OPS = 57619
const NULLX = 57620
const AUTO_INCREMENT = 57621
const APPROXNUM = 57622
const SIGNED = 57623
const UNSIGNED = 57624
const ZEROFILL = 57625
const ZONE = 57626
const AUTOINCREMENT = 57627
const DATABASES = 57628
const TABLES = 57629
const VSCHEMA_TABLES = 57630
const EXTENDED = 57631
const FULL = 57632
const PROCESSLIST = 57633
const NAMES = 57634
const CHARSET = 57635
const GLOBAL = 57636
const SESSION = 57637
const ISOLATION = 57638
const LEVEL = 57639
const READ = 57640
const WRITE = 57641
const ONLY = 57642
const REPEATABLE = 57643
const COMMITTED = 57644
const UNCOMMITTED = 57645
const SERIALIZABLE = 57646
const NEW = 57647
const CONCAT_NULL_YIELDS_NULL = 57648
const CURSOR_CLOSE_ON_COMMIT = 57649
const QUOTED_IDENTIFIER = 57650
const ARITHABORT = 57651
const FMTONLY = 57652
const NOCOUNT = 57653
const NOEXEC = 57654
const NUMERIC_ROUNDABORT = 57655
const ANSI_DEFAULTS = 57656
const ANSI_NULL_DFLT_OFF = 57657
const ANSI_NULL_DFLT_ON = 57658
const ANSI_NULLS = 57659
const ANSI_PADDING = 57660
const ANSI_WARNINGS = 57661
const FORCEPLAN = 57662
const SHOWPLAN_ALL = 57663
const SHOWPLAN_TEXT = 57664
const SHOWPLAN_XML = 57665
const IMPLICIT_TRANSACTIONS = 57666
const REMOTE_PROC_TRANSACTIONS = 57667
const XACT_ABORT = 57668
const CURRENT_TIMESTAMP = 57669
const DATABASE = 57670
const CURRENT_DATE = 57671
const CURRENT_TIME = 57672
const LOCALTIME = 57673
const LOCALTIMESTAMP = 57674
const UTC_DATE = 57675
const UTC_TIME = 57676
const UTC_TIMESTAMP = 57677
const REPLACE = 57678
const CONVERT = 57679
const CAST = 57680
const SUBSTR = 57681
const SUBSTRING = 57682
const GROUP_CONCAT = 57683
const SEPARATOR = 57684
const INHERIT = 57685
const LEAD = 57686
const LAG = 57687
const MATCH = 57688
const AGAINST = 57689
const BOOLEAN = 57690
const LANGUAGE = 57691
const WITH = 57692
const WITHOUT = 57693
const PARSER = 57694
const QUERY = 57695
const EXPANSION = 57696
const UNUSED = 57697
const VIRTUAL = 57698
const STORED = 57699
const GENERATED = 57700
const ALWAYS = 57701
const IDENTITY = 57702
const SEQUENCE = 57703
const INCREMENT = 57704
const MINVALUE = 57705
const CACHE = 57706
const CYCLE = 57707
const OWNED = 57708
const NONE = 57709
const CLUSTERED = 57710
const NONCLUSTERED = 57711
const REPLICATION = 57712
const COLUMNSTORE = 57713
const INCLUDE = 57714
const HOLDLOCK = 57715
const NOLOCK = 57716
const NOWAIT = 57717
const PAGLOCK = 57718
const ROWLOCK = 57719
const TABLOCK = 57720
const UPDLOCK = 57721
const READUNCOMMITTED = 57722
const DEFINER = 57723
const INVOKER = 57724
const TYPECAST = 57725
const CHECK = 57726
const OVER = 57727

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"GRANT",
	"REVOKE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"EXTENSION",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"HANDLER",
	"CONTINUE",
	"EXIT",
	"SQLEXCEPTION",
	"SQLWARNING",
	"SQLSTATE",
	"FOUND",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"ASYNC",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 8,
	136, 534,
	-2, 254,
	-1, 66,
	123, 931,
	-2, 925,
	-1, 67,
	123, 932,
	-2, 845,
	-1, 322,
	123, 935,
	-2, 929,
	-1, 323,
	123, 932,
	-2, 930,
	-1, 492,
	61, 503,
	-2, 500,
	-1, 522,
	123, 933,
	-2, 356,
	-1, 658,
	123, 933,
	-2, 356,
	-1, 679,
	290, 942,
	-2, 833,
	-1, 733,
	290, 942,
	-2, 574,
	-1, 769,
	5, 56,
	-2, 20,
	-1, 775,
	5, 56,
	-2, 22,
	-1, 921,
	290, 942,
	-2, 574,
	-1, 1092,
	290, 942,
	-2, 438,
	-1, 1160,
	290, 942,
	-2, 574,
	-1, 1224,
	290, 942,
	-2, 833,
	-1, 1342,
	5, 57,
	-2, 707,
	-1, 1424,
	5, 56,
	-2, 21,
	-1, 1440,
	201, 84,
	-2, 630,
	-1, 1478,
	290, 942,
	-2, 234,
	-1, 1479,
	290, 942,
	-2, 234,
	-1, 1682,
	90, 927,
	-2, 915,
	-1, 1781,
	57, 70,
	59, 70,
	-2, 72,
	-1, 1966,
	5, 56,
	-2, 884,
	-1, 1991,
	5, 56,
	-2, 79,
	-1, 2036,
	59, 1076,
	60, 1076,
	-2, 560,
	-1, 2078,
	5, 57,
	-2, 885,
	-1, 2112,
	5, 56,
	-2, 887,
	-1, 2134,
	5, 57,
	-2, 888,
}

const yyPrivate = 57344

const yyLast = 12120

var yyAct = [...]int16{
	660, 1885, 1984, 2087, 2029, 641, 670, 1903, 1175, 2035,
	35, 35, 2030, 480, 2026, 782, 1803, 46, 1911, 1953,
	1209, 1989, 34, 62, 63, 1679, 1886, 75, 77, 64,
	1642, 1976, 1816, 37, 867, 868, 1865, 1878, 1211, 1815,
	1791, 1661, 93, 95, 1197, 1801, 1650, 107, 107, 107,
	107, 1000, 1660, 1212, 1676, 1191, 716, 178, 182, 183,
	1198, 1447, 1256, 1673, 101, 1442, 1253, 1413, 1657, 988,
	1669, 1418, 1031, 809, 1694, 1551, 1255, 1091, 289, 39,
	1344, 1067, 1560, 1335, 895, 1122, 291, 556, 205, 1044,
	977, 210, 211, 293, 259, 639, 209, 1015, 1295, 1194,
	46, 631, 616, 640, 487, 103, 911, 493, 1254, 158,
	158, 158, 158, 154, 154, 154, 154, 188, 1119, 519,
	521, 722, 310, 157, 157, 157, 157, 1168, 274, 80,
	309, 223, 218, 1581, 973, 1394, 528, 945, 1405, 545,
	242, 318, 1085, 484, 14, 1395, 257, 1768, 1153, 652,
	261, 837, 36, 903, 847, 155, 155, 155, 155, 948,
	847, 723, 760, 761, 835, 845, 846, 838, 839, 840,
	841, 842, 843, 844, 837, 1169, 772, 847, 1226, 1215,
	1214, 298, 299, 82, 624, 305, 306, 494, 495, 184,
	1216, 186, 704, 815, 707, 625, 319, 107, 83, 84,
	1291, 1604, 1605, 1217, 198, 1134, 930, 1141, 1142, 322,
	517, 458, 2135, 1746, 2067, 2132, 473, 474, 319, 2014,
	1299, 317, 1300, 1985, 220, 2125, 1948, 2013, 568, 569,
	488, 836, 835, 845, 846, 838, 839, 840, 841, 842,
	843, 844, 837, 478, 507, 847, 1639, 1338, 2066, 1595,
	1324, 717, 1732, 276, 277, 278, 279, 831, 539, 158,
	834, 456, 85, 154, 260, 2059, 849, 850, 851, 852,
	853, 854, 855, 157, 832, 833, 830, 856, 857, 858,
	859, 836, 835, 845, 846, 838, 839, 840, 841, 842,
	843, 844, 837, 2060, 2061, 847, 718, 576, 1817, 772,
	1818, 1226, 1215, 1214, 49, 155, 2002, 1921, 536, 2001,
	1715, 1210, 2003, 1216, 1922, 1923, 960, 592, 959, 547,
	263, 1222, 882, 567, 275, 1131, 1217, 267, 1579, 36,
	1666, 48, 564, 1228, 1229, 1588, 967, 497, 265, 457,
	72, 752, 69, 1224, 845, 846, 838, 839, 840, 841,
	842, 843, 844, 837, 751, 70, 847, 292, 1359, 1357,
	533, 530, 535, 534, 560, 561, 562, 563, 1931, 185,
	573, 1195, 1218, 1219, 1221, 179, 1428, 59, 1220, 1934,
	36, 2101, 838, 839, 840, 841, 842, 843, 844, 837,
	2007, 2006, 847, 548, 1835, 511, 1935, 551, 1998, 554,
	555, 1672, 590, 314, 238, 491, 1809, 532, 825, 1932,
	230, 201, 229, 1427, 233, 234, 237, 204, 52, 207,
	208, 231, 239, 212, 494, 495, 827, 1831, 1745, 52,
	1747, 1190, 36, 591, 1210, 848, 1912, 36, 189, 1032,
	53, 848, 54, 626, 1222, 824, 823, 1671, 1720, 827,
	1022, 53, 1915, 54, 1561, 1562, 1228, 1229, 848, 36,
	1879, 595, 596, 825, 60, 35, 1224, 35, 824, 823,
	792, 1729, 778, 779, 2109, 1545, 644, 319, 817, 1580,
	492, 607, 816, 236, 617, 237, 825, 599, 793, 601,
	609, 848, 72, 1949, 69, 1218, 1219, 1221, 239, 510,
	619, 1220, 613, 36, 509, 706, 504, 489, 995, 623,
	297, 2126, 827, 823, 1841, 303, 709, 307, 308, 41,
	1432, 539, 826, 1227, 315, 931, 848, 1292, 1293, 459,
	825, 1300, 1834, 1600, 463, 42, 275, 465, 1294, 2012,
	2022, 1875, 180, 181, 471, 472, 840, 841, 842, 843,
	844, 837, 784, 1738, 847, 219, 235, 836, 835, 845,
	846, 838, 839, 840, 841, 842, 843, 844, 837, 55,
	516, 847, 806, 2063, 806, 500, 848, 826, 763, 81,
	55, 52, 981, 36, 513, 97, 1916, 1914, 1913, 1443,
	1444, 783, 584, 40, 319, 788, 618, 627, 598, 35,
	826, 35, 608, 53, 770, 54, 770, 570, 794, 705,
	614, 703, 1656, 319, 566, 190, 191, 464, 769, 787,
	775, 789, 1670, 790, 530, 1566, 575, 974, 192, 61,
	617, 580, 581, 582, 1727, 827, 737, 848, 799, 740,
	719, 721, 743, 744, 826, 710, 1227, 615, 708, 726,
	238, 1723, 827, 1349, 1988, 1348, 501, 795, 1606, 770,
	1987, 237, 72, 96, 69, 1986, 50, 51, 239, 232,
	532, 1367, 827, 848, 502, 824, 823, 50, 51, 739,
	836, 835, 845, 846, 838, 839, 840, 841, 842, 843,
	844, 837, 58, 825, 847, 814, 2102, 836, 835, 845,
	846, 838, 839, 840, 841, 842, 843, 844, 837, 1473,
	786, 847, 781, 783, 774, 490, 57, 498, 499, 812,
	238, 56, 785, 36, 107, 824, 823, 762, 928, 494,
	495, 36, 55, 818, 824, 823, 1806, 319, 239, 254,
	866, 92, 796, 825, 74, 257, 258, 1904, 1906, 1016,
	1017, 52, 825, 610, 1561, 1562, 89, 91, 763, 964,
	916, 470, 954, 1610, 90, 871, 872, 763, 783, 617,
	245, 2081, 72, 53, 69, 54, 1612, 268, 1750, 1951,
	883, 1820, 1616, 971, 1157, 252, 158, 240, 940, 36,
	154, 79, 994, 821, 770, 241, 996, 886, 885, 917,
	157, 824, 823, 94, 617, 824, 823, 826, 979, 717,
	736, 76, 924, 1599, 638, 1855, 1629, 706, 593, 825,
	197, 617, 195, 825, 530, 2004, 1607, 955, 469, 50,
	51, 45, 155, 1905, 746, 848, 468, 1045, 558, 557,
	935, 905, 906, 907, 908, 909, 910, 467, 1974, 1819,
	1314, 1313, 848, 926, 718, 1312, 248, 826, 243, 253,
	1311, 52, 810, 811, 813, 210, 826, 250, 249, 78,
	1073, 1310, 1082, 1082, 1474, 1475, 1476, 956, 1740, 958,
	1309, 1084, 1631, 53, 770, 54, 319, 319, 1308, 1307,
	770, 619, 1154, 747, 66, 770, 69, 271, 210, 322,
	273, 997, 55, 1124, 1079, 1123, 1014, 762, 1376, 764,
	765, 1086, 1087, 1306, 1305, 916, 762, 991, 1303, 780,
	963, 1025, 1597, 1630, 1775, 1026, 35, 717, 36, 970,
	1156, 221, 972, 826, 1776, 1192, 1123, 826, 1024, 947,
	952, 953, 797, 824, 823, 1021, 824, 823, 1137, 1020,
	486, 1155, 1098, 1019, 917, 1071, 1105, 202, 1023, 200,
	485, 825, 199, 486, 825, 194, 1096, 1080, 1083, 763,
	763, 866, 718, 1423, 486, 848, 1725, 1608, 1609, 1611,
	1613, 1614, 35, 52, 1029, 486, 943, 618, 1744, 1145,
	1193, 549, 848, 553, 1232, 1388, 1179, 552, 1097, 50,
	51, 1036, 1038, 1039, 1189, 53, 506, 54, 1552, 1037,
	246, 1018, 55, 1563, 824, 823, 247, 827, 2088, 2089,
	2090, 2091, 2092, 2093, 2094, 2095, 603, 1051, 617, 1553,
	824, 823, 825, 724, 725, 1147, 604, 929, 497, 1554,
	772, 1049, 1050, 1048, 1161, 11, 1162, 496, 825, 1047,
	1297, 1116, 1117, 1550, 549, 1045, 824, 823, 1552, 1133,
	505, 1686, 836, 835, 845, 846, 838, 839, 840, 841,
	842, 843, 844, 837, 825, 826, 847, 962, 826, 1553,
	1325, 1326, 1327, 942, 961, 933, 574, 572, 549, 255,
	965, 256, 497, 1088, 1089, 72, 571, 69, 544, 1118,
	1997, 8, 12, 13, 1068, 980, 1069, 9, 10, 50,
	51, 1824, 862, 2058, 1851, 251, 1315, 1345, 762, 762,
	497, 36, 1996, 1156, 884, 884, 1132, 1304, 1135, 1136,
	957, 1170, 1171, 36, 55, 597, 605, 36, 1331, 475,
	602, 36, 565, 1823, 512, 36, 826, 497, 974, 300,
	36, 1301, 1149, 772, 36, 1155, 989, 827, 319, 2119,
	2118, 827, 826, 989, 2117, 87, 2104, 763, 617, 2054,
	827, 322, 2080, 827, 87, 2015, 1355, 803, 1938, 1785,
	1964, 1788, 827, 1086, 52, 1965, 1356, 1072, 826, 745,
	1354, 1320, 2019, 827, 541, 540, 803, 1837, 803, 1836,
	1699, 770, 702, 883, 701, 497, 53, 1375, 54, 770,
	989, 1757, 1386, 803, 1711, 1421, 700, 1440, 699, 1469,
	1470, 1471, 628, 1424, 1478, 1786, 503, 1784, 87, 1710,
	1619, 50, 51, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	1232, 617, 617, 1402, 1399, 1400, 1433, 1546, 1401, 1398,
	1410, 1549, 1422, 1396, 1436, 1437, 1438, 1046, 1445, 1480,
	1393, 1482, 1411, 1420, 1707, 1706, 762, 803, 1701, 35,
	617, 803, 1700, 827, 1409, 1373, 711, 803, 1620, 1403,
	1408, 1404, 803, 1571, 1391, 55, 1150, 827, 87, 1384,
	1390, 1569, 803, 1322, 1434, 1406, 727, 803, 1174, 989,
	1173, 1548, 989, 1140, 733, 734, 735, 848, 1077, 827,
	803, 1030, 803, 802, 756, 755, 749, 750, 836, 835,
	845, 846, 838, 839, 840, 841, 842, 843, 844, 837,
	749, 748, 847, 1555, 1556, 1557, 1558, 1559, 99, 98,
	1567, 1568, 1788, 2027, 1572, 772, 1973, 1565, 773, 1882,
	773, 1784, 1973, 1793, 1796, 1797, 1798, 1794, 783, 1795,
	1799, 1098, 1787, 1977, 1978, 1105, 1575, 1426, 1230, 87,
	1866, 589, 1574, 1623, 1866, 1096, 1583, 2111, 822, 1634,
	1098, 1585, 50, 51, 1105, 1589, 1172, 1779, 1788, 497,
	1165, 819, 1164, 1648, 1096, 1590, 319, 497, 1163, 861,
	863, 864, 865, 869, 1541, 1542, 1146, 1097, 966, 944,
	874, 874, 874, 874, 874, 874, 874, 1582, 1973, 72,
	1371, 69, 1150, 1687, 1652, 733, 1097, 974, 1369, 990,
	1653, 1587, 937, 1570, 1659, 934, 887, 888, 889, 890,
	891, 892, 893, 894, 753, 897, 1651, 899, 900, 901,
	902, 904, 904, 904, 904, 904, 904, 904, 1596, 920,
	921, 922, 923, 589, 1695, 1695, 1655, 1633, 1370, 772,
	742, 1150, 1685, 741, 738, 1046, 1368, 1641, 588, 2076,
	88, 589, 1645, 87, 1077, 86, 1624, 1625, 87, 1788,
	87, 1618, 1920, 1812, 617, 617, 1667, 1632, 1150, 1626,
	1350, 1697, 989, 803, 1696, 932, 758, 757, 52, 754,
	2049, 1481, 2047, 2010, 1852, 1576, 1431, 1977, 1978, 1637,
	265, 497, 1704, 290, 1544, 1543, 1407, 294, 733, 1319,
	53, 1318, 54, 1290, 1167, 1166, 1144, 1027, 773, 993,
	836, 835, 845, 846, 838, 839, 840, 841, 842, 843,
	844, 837, 969, 968, 847, 925, 820, 36, 661, 1081,
	659, 663, 664, 665, 666, 768, 767, 319, 662, 667,
	766, 732, 731, 729, 712, 836, 835, 845, 846, 838,
	839, 840, 841, 842, 843, 844, 837, 629, 577, 847,
	518, 514, 787, 483, 874, 874, 287, 874, 874, 874,
	874, 874, 874, 874, 874, 874, 874, 874, 874, 874,
	874, 874, 1716, 848, 1739, 1741, 1742, 1743, 1808, 281,
	107, 280, 1713, 269, 1735, 319, 1736, 1737, 773, 1336,
	295, 296, 1822, 16, 869, 1777, 770, 594, 2027, 869,
	1296, 1793, 1796, 1797, 1798, 1794, 67, 1795, 1799, 1980,
	1232, 1983, 1766, 1387, 1765, 617, 1839, 1702, 1703, 55,
	759, 1708, 1709, 47, 611, 579, 1773, 578, 302, 301,
	1756, 73, 214, 193, 1828, 1782, 1761, 187, 38, 1982,
	1894, 1893, 158, 1807, 1810, 1800, 154, 1897, 1813, 1895,
	2105, 1138, 1898, 2065, 1896, 1864, 157, 1762, 1826, 1774,
	1751, 898, 1899, 1830, 1797, 1798, 1184, 1185, 1754, 1840,
	100, 482, 1825, 1758, 1759, 559, 1414, 715, 1658, 1160,
	2074, 1827, 1016, 1017, 462, 461, 460, 73, 155, 316,
	1806, 1415, 216, 73, 215, 73, 73, 1671, 210, 73,
	1180, 1188, 714, 1887, 587, 1853, 47, 1854, 1181, 585,
	1643, 1182, 1644, 583, 196, 1431, 50, 51, 175, 176,
	177, 1843, 1917, 319, 1871, 1120, 72, 1909, 69, 1881,
	1653, 319, 1872, 770, 1811, 1698, 1125, 987, 35, 1883,
	1874, 1889, 1890, 974, 1892, 777, 622, 1079, 1176, 2072,
	1900, 1888, 1767, 1857, 1891, 1748, 1927, 1177, 2071, 1692,
	1929, 2021, 1859, 35, 1919, 2, 874, 874, 874, 1863,
	1406, 1691, 1690, 874, 874, 874, 874, 1918, 1838, 1689,
	43, 311, 312, 313, 1317, 1950, 73, 936, 523, 524,
	526, 73, 1688, 73, 73, 848, 529, 527, 537, 538,
	73, 600, 323, 466, 73, 73, 1603, 1602, 2127, 770,
	73, 1160, 1628, 73, 1316, 52, 508, 874, 1990, 1928,
	73, 73, 1958, 1966, 481, 1664, 621, 620, 976, 978,
	848, 1804, 1972, 1981, 525, 1783, 791, 53, 1970, 54,
	770, 1734, 1323, 983, 992, 984, 985, 986, 1, 1446,
	18, 1941, 17, 1952, 1991, 304, 1343, 881, 982, 656,
	73, 1933, 319, 1999, 73, 1833, 642, 2086, 1992, 1910,
	1955, 1956, 2005, 1441, 1668, 210, 2028, 1439, 2037, 1990,
	1887, 1472, 2031, 72, 210, 69, 1564, 2016, 543, 1887,
	244, 2038, 1389, 515, 20, 1638, 1780, 1781, 770, 1425,
	2040, 776, 73, 586, 1917, 773, 1547, 73, 73, 73,
	2044, 1652, 2033, 773, 1957, 998, 1653, 1653, 2024, 2025,
	805, 35, 2055, 1431, 1770, 227, 217, 1431, 1644, 798,
	1969, 476, 1971, 1651, 44, 15, 1643, 1302, 228, 226,
	225, 224, 72, 2064, 69, 2008, 2009, 222, 1479, 2069,
	546, 262, 266, 2075, 110, 112, 111, 206, 783, 109,
	2083, 783, 783, 783, 108, 2100, 55, 106, 104, 105,
	2023, 102, 52, 2085, 1674, 1643, 2096, 2097, 2098, 1821,
	2099, 606, 1152, 860, 2000, 1681, 1412, 2034, 1417, 2070,
	2020, 2037, 2115, 2031, 53, 1374, 54, 2018, 1121, 2110,
	2114, 643, 1035, 2116, 2038, 2057, 655, 654, 653, 1963,
	770, 829, 1663, 1778, 2041, 531, 536, 2123, 2107, 2042,
	1880, 2043, 1792, 1790, 2112, 1884, 2128, 1789, 2031, 1979,
	1975, 52, 1662, 2130, 1731, 1947, 2131, 1183, 210, 2133,
	1636, 1223, 1213, 1887, 770, 975, 1186, 7, 668, 1225,
	1208, 1869, 1664, 53, 6, 54, 1431, 5, 2129, 1770,
	4, 874, 874, 50, 51, 1207, 941, 1206, 533, 1205,
	535, 534, 68, 71, 1204, 1202, 1203, 950, 1200, 1201,
	1199, 1178, 1940, 481, 771, 3, 0, 0, 2084, 0,
	0, 0, 0, 874, 874, 874, 874, 836, 835, 845,
	846, 838, 839, 840, 841, 842, 843, 844, 837, 0,
	1770, 847, 0, 0, 0, 0, 0, 0, 0, 0,
	1615, 0, 0, 55, 0, 0, 0, 73, 0, 71,
	0, 0, 0, 0, 1573, 71, 0, 71, 71, 68,
	772, 71, 1226, 1215, 1214, 0, 0, 0, 0, 0,
	0, 0, 1644, 0, 1216, 0, 0, 0, 1869, 66,
	0, 69, 0, 1665, 0, 0, 0, 1217, 0, 0,
	1664, 0, 0, 0, 0, 1664, 1664, 1664, 1664, 1664,
	0, 0, 55, 0, 73, 73, 73, 0, 0, 1664,
	0, 0, 1994, 0, 0, 73, 0, 0, 213, 0,
	481, 0, 0, 0, 1074, 1075, 1076, 1078, 0, 0,
	0, 0, 0, 1643, 0, 0, 0, 1621, 73, 481,
	50, 51, 1930, 1627, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 71, 0, 71, 71, 0, 1126, 1127,
	1128, 1129, 71, 1130, 324, 0, 324, 71, 52, 0,
	0, 0, 71, 1664, 0, 71, 0, 0, 0, 0,
	0, 0, 71, 71, 0, 0, 1139, 0, 633, 1664,
	53, 1705, 54, 0, 0, 1210, 0, 0, 0, 50,
	51, 0, 0, 0, 1148, 1222, 1151, 1770, 0, 0,
	0, 1158, 1159, 0, 0, 0, 1337, 1228, 1229, 0,
	0, 874, 71, 0, 0, 1431, 542, 1224, 72, 0,
	69, 0, 0, 66, 0, 69, 0, 0, 1187, 0,
	1730, 836, 835, 845, 846, 838, 839, 840, 841, 842,
	843, 844, 837, 0, 0, 847, 1218, 1219, 1221, 1431,
	0, 0, 1220, 481, 71, 1869, 0, 0, 0, 71,
	71, 71, 0, 0, 720, 1644, 0, 66, 0, 522,
	523, 524, 526, 0, 73, 0, 73, 1321, 529, 527,
	537, 538, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 73, 203, 1712, 1644, 0, 0, 0, 49, 0,
	1802, 0, 848, 65, 0, 0, 72, 52, 69, 55,
	0, 0, 52, 0, 0, 0, 525, 0, 0, 0,
	0, 1339, 1340, 36, 0, 48, 0, 0, 1342, 53,
	0, 54, 804, 0, 53, 0, 54, 1346, 1347, 0,
	1753, 0, 1755, 0, 0, 0, 0, 0, 1760, 0,
	0, 0, 0, 0, 0, 874, 52, 0, 874, 0,
	874, 0, 874, 0, 874, 874, 0, 1372, 0, 0,
	0, 0, 0, 1378, 0, 0, 0, 0, 53, 0,
	54, 1380, 1381, 0, 1382, 1383, 0, 0, 0, 0,
	0, 0, 0, 1231, 0, 52, 0, 1227, 1392, 0,
	0, 0, 323, 481, 0, 0, 50, 51, 0, 0,
	0, 0, 52, 0, 0, 0, 0, 53, 1665, 54,
	0, 0, 0, 1665, 1665, 1665, 1665, 1665, 0, 0,
	0, 0, 0, 1842, 53, 0, 54, 1802, 0, 1907,
	0, 0, 0, 0, 0, 0, 0, 1876, 264, 0,
	0, 270, 0, 0, 272, 0, 0, 0, 55, 0,
	0, 0, 0, 55, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 285, 286, 1860, 912, 0, 542,
	1861, 1862, 0, 0, 630, 73, 73, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 536, 0,
	0, 1665, 713, 0, 0, 0, 0, 55, 0, 0,
	1252, 0, 0, 1967, 1968, 914, 0, 1665, 0, 0,
	0, 0, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 542, 71, 71, 0,
	0, 0, 0, 0, 773, 0, 55, 71, 0, 0,
	533, 0, 535, 534, 0, 50, 51, 0, 1936, 1937,
	50, 51, 0, 55, 0, 0, 0, 541, 540, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 550,
	2032, 0, 773, 0, 50, 51, 0, 808, 33, 1070,
	915, 0, 0, 0, 0, 0, 0, 0, 113, 913,
	828, 2050, 2051, 2052, 919, 918, 870, 0, 0, 0,
	0, 0, 0, 0, 1601, 0, 0, 0, 0, 0,
	0, 0, 73, 50, 51, 0, 0, 0, 0, 0,
	1617, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 51, 0, 26, 28, 0, 21, 896, 0, 0,
	1635, 0, 0, 0, 323, 0, 0, 0, 0, 22,
	0, 27, 31, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 951, 951, 951, 0, 0, 0, 0, 927,
	23, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2032, 0, 0, 2113, 0, 542, 0, 71, 0,
	0, 0, 114, 0, 0, 542, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2032, 73, 773, 1252,
	1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
	1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
	1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
	1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
	1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
	1252, 1252, 1252, 1252, 1252, 1252, 1252, 1028, 0, 0,
	0, 1033, 1034, 0, 0, 0, 0, 19, 0, 0,
	0, 0, 0, 68, 873, 875, 876, 877, 878, 879,
	880, 0, 1717, 0, 1718, 1719, 0, 0, 0, 1721,
	1722, 1724, 1726, 1728, 324, 0, 951, 951, 0, 0,
	951, 951, 951, 0, 0, 0, 68, 870, 0, 0,
	0, 0, 870, 0, 1749, 0, 728, 730, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 1115, 951,
	951, 951, 951, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1001,
	0, 0, 25, 1013, 0, 951, 0, 0, 0, 0,
	0, 0, 0, 1003, 29, 30, 0, 32, 1143, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1829, 0, 0, 0, 0,
	0, 807, 0, 0, 73, 73, 772, 0, 1226, 1215,
	1214, 0, 481, 0, 0, 0, 0, 0, 0, 0,
	1216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1850, 0, 0, 1217, 0, 0, 0, 0, 0, 0,
	520, 1002, 0, 66, 0, 522, 523, 524, 526, 0,
	1858, 0, 0, 0, 529, 527, 537, 538, 1040, 0,
	0, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 0, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 0, 0, 1771, 0,
	0, 0, 525, 0, 0, 0, 0, 0, 0, 0,
	1902, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	772, 0, 1226, 1215, 1214, 1341, 0, 0, 0, 0,
	0, 0, 0, 0, 1216, 0, 0, 0, 951, 0,
	0, 0, 52, 0, 1379, 0, 0, 1217, 1939, 0,
	0, 1210, 0, 1942, 1943, 1944, 1945, 1946, 0, 0,
	0, 1222, 0, 0, 53, 0, 54, 0, 0, 951,
	0, 1377, 0, 1228, 1229, 0, 324, 73, 0, 951,
	0, 0, 0, 1224, 0, 542, 1385, 0, 0, 0,
	0, 0, 0, 481, 0, 0, 0, 0, 0, 0,
	0, 0, 1877, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1218, 1219, 1221, 0, 0, 0, 1220, 0,
	0, 0, 0, 0, 1416, 1419, 0, 0, 0, 0,
	0, 0, 73, 73, 0, 0, 0, 1432, 0, 0,
	1429, 0, 73, 73, 0, 0, 0, 0, 0, 71,
	0, 481, 0, 0, 0, 1210, 2011, 0, 1435, 0,
	0, 2017, 0, 0, 0, 1222, 0, 0, 0, 999,
	1477, 0, 896, 0, 0, 0, 1252, 1228, 1229, 0,
	1328, 1329, 1330, 531, 536, 0, 0, 1224, 1332, 1333,
	1334, 0, 0, 55, 0, 0, 0, 0, 2053, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1218, 1219, 1221, 0,
	0, 0, 1220, 0, 0, 73, 0, 2068, 0, 0,
	0, 873, 0, 0, 0, 0, 533, 0, 535, 534,
	0, 2077, 2078, 2079, 0, 0, 0, 0, 0, 2082,
	0, 0, 0, 541, 540, 0, 73, 0, 0, 0,
	73, 73, 0, 1227, 0, 73, 73, 73, 73, 73,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 73,
	0, 0, 0, 73, 0, 0, 0, 0, 0, 481,
	50, 51, 0, 0, 0, 0, 0, 481, 1586, 0,
	772, 0, 1226, 1215, 1214, 2120, 2121, 2122, 0, 0,
	0, 0, 0, 1430, 1216, 0, 0, 0, 73, 0,
	0, 0, 0, 0, 1598, 0, 0, 1217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 772, 2134, 1226,
	1215, 1214, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 1216, 0, 0, 1622, 0, 71, 71, 0, 73,
	0, 0, 0, 0, 1217, 0, 0, 1227, 0, 0,
	0, 0, 0, 0, 1640, 0, 0, 0, 0, 0,
	0, 0, 1647, 0, 0, 1351, 1352, 0, 1353, 0,
	0, 0, 0, 0, 0, 0, 1358, 0, 1360, 1361,
	1362, 0, 0, 1363, 1364, 0, 1365, 1366, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1876, 0, 0,
	0, 0, 0, 0, 0, 0, 870, 870, 481, 0,
	0, 0, 1001, 0, 0, 1210, 1013, 0, 0, 0,
	0, 0, 0, 0, 2039, 1222, 1003, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1228, 1229, 0,
	0, 0, 0, 0, 0, 0, 0, 1224, 0, 0,
	0, 0, 1210, 0, 0, 1577, 1578, 0, 0, 0,
	0, 0, 1222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1228, 1229, 1218, 1219, 1221, 0,
	0, 0, 1220, 0, 1224, 0, 0, 1591, 1592, 1593,
	1594, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 1432, 0, 0, 1002, 0, 0, 0, 0, 0,
	73, 0, 0, 1218, 1219, 1221, 0, 0, 0, 1220,
	0, 0, 0, 0, 0, 0, 0, 1733, 0, 0,
	0, 0, 0, 0, 0, 951, 0, 2039, 1432, 0,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 0,
	0, 0, 0, 0, 71, 71, 0, 0, 1763, 1764,
	1419, 0, 0, 0, 71, 1805, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526,
	1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
	1537, 1538, 1539, 1540, 0, 0, 0, 1227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 772, 0,
	1226, 1215, 1214, 0, 0, 0, 0, 1856, 0, 0,
	0, 0, 1216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1227, 1217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1646, 71, 0,
	0, 0, 71, 71, 0, 0, 68, 71, 71, 71,
	71, 71, 0, 0, 0, 1714, 1867, 0, 0, 1901,
	0, 71, 0, 0, 0, 1908, 0, 0, 0, 0,
	0, 0, 0, 0, 2073, 0, 0, 772, 0, 1226,
	1215, 1214, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 1216, 772, 0, 1226, 1215, 1214, 0, 0, 0,
	71, 0, 0, 0, 1217, 0, 1216, 1926, 0, 0,
	0, 0, 0, 772, 0, 1226, 1215, 1214, 0, 1217,
	0, 0, 0, 0, 0, 71, 0, 1216, 0, 0,
	0, 0, 0, 1210, 0, 0, 0, 0, 0, 0,
	1217, 71, 0, 1222, 0, 1954, 0, 0, 0, 0,
	824, 823, 0, 0, 0, 1228, 1229, 0, 1649, 0,
	0, 1961, 0, 1962, 0, 1224, 0, 0, 825, 0,
	0, 0, 0, 0, 2056, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1218, 1219, 1221, 0, 0, 1844,
	1220, 0, 1845, 0, 1846, 0, 1847, 0, 1848, 1849,
	0, 0, 1210, 0, 0, 0, 0, 1351, 0, 1432,
	0, 0, 1222, 68, 0, 0, 0, 1210, 0, 0,
	0, 0, 68, 0, 1228, 1229, 0, 1222, 0, 0,
	0, 0, 0, 0, 1224, 0, 0, 0, 1210, 1228,
	1229, 0, 0, 0, 0, 0, 0, 0, 1222, 1224,
	0, 0, 2045, 0, 0, 2046, 0, 0, 2048, 0,
	1228, 1229, 0, 1218, 1219, 1221, 0, 0, 0, 1220,
	1224, 0, 826, 0, 0, 0, 0, 0, 1218, 1219,
	1221, 0, 2062, 0, 1220, 0, 0, 0, 1654, 0,
	0, 0, 0, 0, 0, 0, 0, 1954, 0, 1218,
	1219, 1221, 1805, 1196, 0, 1220, 0, 0, 0, 0,
	870, 0, 0, 0, 0, 0, 0, 0, 441, 430,
	0, 389, 443, 357, 377, 452, 379, 380, 415, 336,
	398, 0, 374, 355, 0, 1227, 0, 360, 329, 369,
	330, 358, 391, 0, 356, 0, 432, 401, 0, 2106,
	870, 450, 0, 406, 0, 0, 0, 0, 0, 393,
	434, 396, 425, 388, 416, 345, 405, 445, 375, 411,
	446, 0, 0, 0, 36, 0, 68, 0, 0, 0,
	0, 0, 0, 1832, 0, 1870, 410, 440, 371, 342,
	455, 0, 414, 328, 408, 0, 0, 334, 337, 451,
	438, 365, 364, 0, 0, 0, 0, 0, 0, 0,
	392, 397, 421, 385, 1227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 404, 1227,
	0, 0, 341, 335, 0, 390, 912, 0, 0, 344,
	0, 362, 422, 0, 325, 0, 0, 428, 435, 387,
	1227, 0, 439, 384, 383, 0, 0, 0, 0, 0,
	0, 376, 321, 52, 453, 0, 442, 394, 433, 359,
	370, 0, 366, 0, 914, 0, 367, 368, 403, 417,
	0, 0, 0, 0, 0, 53, 424, 54, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1769, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	326, 363, 426, 429, 349, 413, 338, 372, 419, 373,
	395, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1675, 0, 0, 0, 0, 0, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 915,
	0, 0, 0, 0, 0, 1683, 0, 113, 913, 0,
	0, 0, 0, 919, 918, 1448, 1449, 1450, 1451, 1452,
	1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
	1463, 1464, 1465, 1466, 1467, 1468, 0, 0, 0, 331,
	0, 0, 0, 0, 55, 332, 353, 436, 0, 0,
	0, 0, 1684, 1682, 1678, 1677, 0, 0, 0, 0,
	412, 0, 0, 0, 0, 1680, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 352, 346,
	347, 399, 400, 447, 448, 449, 423, 343, 0, 350,
	351, 0, 431, 0, 0, 0, 402, 0, 0, 0,
	454, 114, 0, 0, 0, 0, 0, 0, 378, 327,
	382, 0, 0, 0, 0, 0, 0, 0, 339, 340,
	0, 0, 386, 381, 407, 409, 418, 427, 437, 444,
	420, 50, 51, 441, 430, 0, 389, 443, 357, 377,
	452, 379, 380, 415, 336, 398, 0, 374, 355, 0,
	0, 0, 360, 329, 369, 330, 358, 391, 0, 356,
	0, 432, 401, 0, 0, 0, 450, 0, 406, 0,
	0, 0, 0, 0, 393, 434, 396, 425, 388, 416,
	345, 405, 445, 375, 411, 446, 0, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 410, 440, 371, 342, 455, 0, 414, 328, 408,
	0, 0, 334, 337, 451, 438, 365, 364, 772, 0,
	1226, 1215, 1214, 0, 0, 392, 397, 421, 385, 0,
	0, 0, 1216, 0, 0, 0, 0, 0, 0, 0,
	0, 361, 0, 404, 0, 1217, 0, 341, 335, 0,
	390, 0, 0, 0, 344, 0, 362, 422, 0, 325,
	0, 0, 428, 435, 387, 0, 0, 439, 384, 383,
	0, 0, 0, 0, 0, 0, 376, 321, 52, 453,
	0, 442, 394, 433, 359, 370, 0, 366, 0, 0,
	0, 367, 368, 403, 417, 0, 0, 0, 0, 0,
	53, 424, 54, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 326, 363, 426, 429, 349,
	413, 338, 372, 419, 373, 395, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1210, 0, 0, 0, 1814, 0, 0,
	0, 0, 0, 1222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1228, 1229, 0, 0, 0,
	0, 0, 0, 0, 0, 1224, 0, 0, 0, 0,
	1683, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1218, 1219, 1221, 0, 0, 0,
	1220, 0, 0, 0, 331, 0, 0, 0, 0, 55,
	332, 353, 436, 0, 0, 0, 0, 1684, 1682, 1432,
	0, 0, 0, 0, 0, 412, 0, 0, 0, 0,
	1680, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 352, 346, 347, 399, 400, 447, 448,
	449, 423, 343, 0, 350, 351, 0, 431, 0, 0,
	0, 402, 0, 0, 0, 454, 0, 0, 0, 0,
	0, 0, 0, 378, 327, 382, 0, 0, 0, 0,
	0, 0, 0, 339, 340, 0, 0, 386, 381, 407,
	409, 418, 427, 437, 444, 420, 50, 51, 441, 430,
	0, 389, 443, 357, 377, 452, 379, 380, 415, 336,
	398, 0, 374, 355, 0, 0, 0, 360, 329, 369,
	330, 358, 391, 0, 356, 0, 432, 401, 0, 0,
	0, 450, 0, 406, 0, 1227, 0, 0, 0, 393,
	434, 396, 425, 388, 416, 345, 405, 445, 375, 411,
	446, 0, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 410, 440, 371, 342,
	455, 0, 414, 328, 408, 0, 0, 334, 337, 451,
	438, 365, 364, 0, 772, 1430, 1226, 1215, 1214, 0,
	392, 397, 421, 385, 0, 0, 0, 0, 1216, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 404, 0,
	0, 1217, 341, 335, 0, 390, 0, 0, 0, 344,
	0, 362, 422, 0, 325, 0, 0, 428, 435, 387,
	0, 0, 439, 384, 383, 0, 0, 1993, 0, 0,
	0, 376, 321, 52, 453, 0, 442, 394, 433, 359,
	370, 0, 366, 0, 0, 0, 367, 368, 403, 417,
	0, 0, 0, 0, 0, 53, 424, 54, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	326, 363, 426, 429, 349, 413, 338, 372, 419, 373,
	395, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1228, 1229, 0, 0, 0, 0, 0, 0, 0,
	0, 1224, 0, 0, 0, 1683, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1218, 1219, 1221, 0, 0, 0, 1220, 0, 0, 331,
	0, 0, 0, 0, 55, 332, 353, 436, 0, 0,
	0, 0, 1684, 1682, 0, 1995, 0, 0, 0, 0,
	412, 0, 0, 0, 0, 1680, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 352, 346,
	347, 399, 400, 447, 448, 449, 423, 343, 0, 350,
	351, 0, 431, 0, 0, 0, 402, 0, 0, 0,
	454, 0, 0, 0, 0, 0, 0, 0, 378, 327,
	382, 0, 0, 0, 0, 0, 0, 0, 339, 340,
	0, 0, 386, 381, 407, 409, 418, 427, 437, 444,
	420, 50, 51, 441, 430, 0, 389, 443, 357, 377,
	452, 379, 380, 415, 336, 398, 0, 374, 355, 0,
	0, 0, 360, 329, 369, 330, 358, 391, 0, 356,
	0, 432, 401, 0, 136, 0, 450, 0, 406, 0,
	0, 1227, 0, 0, 393, 434, 396, 425, 388, 416,
	345, 405, 445, 375, 411, 446, 0, 0, 0, 66,
	0, 69, 36, 0, 0, 0, 0, 0, 0, 0,
	0, 410, 440, 371, 342, 455, 0, 414, 328, 408,
	0, 0, 334, 337, 451, 438, 365, 364, 0, 0,
	0, 0, 0, 0, 0, 392, 397, 421, 385, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1397,
	0, 361, 0, 404, 0, 0, 0, 341, 335, 0,
	390, 121, 0, 0, 344, 0, 362, 422, 0, 325,
	0, 0, 428, 435, 387, 0, 0, 439, 384, 383,
	0, 0, 0, 0, 0, 0, 376, 321, 52, 453,
	0, 442, 394, 433, 359, 370, 0, 366, 0, 137,
	0, 367, 368, 403, 417, 0, 0, 0, 0, 0,
	53, 424, 54, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 326, 363, 426, 429, 349,
	413, 338, 372, 419, 373, 395, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 159, 160, 161, 162, 163, 164, 165,
	166, 167, 168, 0, 169, 156, 0, 170, 171, 172,
	174, 173, 138, 139, 140, 144, 142, 141, 143, 115,
	117, 0, 113, 116, 122, 118, 119, 120, 134, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	135, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 55,
	332, 353, 436, 0, 0, 0, 0, 0, 320, 0,
	0, 0, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 352, 346, 347, 399, 400, 447, 448,
	449, 423, 343, 0, 350, 351, 0, 431, 0, 0,
	0, 402, 0, 0, 0, 454, 114, 0, 0, 0,
	0, 0, 0, 378, 327, 382, 0, 0, 0, 0,
	0, 0, 0, 339, 340, 0, 0, 386, 381, 407,
	409, 418, 427, 437, 444, 420, 50, 51, 441, 430,
	0, 389, 443, 357, 377, 452, 379, 380, 415, 336,
	398, 0, 374, 355, 0, 0, 0, 360, 329, 369,
	330, 358, 391, 0, 356, 0, 432, 401, 0, 0,
	0, 450, 0, 406, 0, 0, 0, 0, 0, 393,
	434, 396, 425, 388, 416, 345, 405, 445, 375, 411,
	446, 0, 0, 0, 36, 0, 800, 0, 801, 0,
	0, 0, 0, 0, 0, 0, 410, 440, 371, 342,
	455, 0, 414, 328, 408, 0, 0, 334, 337, 451,
	438, 365, 364, 772, 0, 1226, 1215, 1214, 0, 0,
	392, 397, 421, 385, 0, 0, 0, 1216, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 404, 0,
	1217, 0, 341, 335, 0, 390, 0, 0, 0, 344,
	0, 362, 422, 0, 325, 0, 0, 428, 435, 387,
	0, 0, 439, 384, 383, 0, 0, 0, 0, 0,
	0, 376, 321, 52, 453, 0, 442, 394, 433, 359,
	370, 0, 366, 0, 0, 0, 367, 368, 403, 417,
	0, 0, 0, 0, 0, 53, 424, 54, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	326, 363, 426, 429, 349, 413, 338, 372, 419, 373,
	395, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1228, 1229, 0, 0, 0, 0, 0, 0, 0, 0,
	1224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1218,
	1219, 1221, 0, 0, 0, 1220, 0, 0, 0, 331,
	0, 0, 0, 0, 55, 332, 353, 436, 0, 0,
	0, 0, 0, 320, 1196, 0, 0, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 352, 346,
	347, 399, 400, 447, 448, 449, 423, 343, 0, 350,
	351, 0, 431, 0, 0, 0, 402, 0, 0, 0,
	454, 0, 0, 0, 0, 0, 0, 0, 378, 327,
	382, 0, 0, 0, 0, 0, 0, 0, 339, 340,
	0, 0, 386, 381, 407, 409, 418, 427, 437, 444,
	420, 50, 51, 441, 430, 0, 389, 443, 357, 377,
	452, 379, 380, 415, 336, 398, 0, 374, 355, 0,
	0, 0, 360, 329, 369, 330, 358, 391, 0, 356,
	0, 432, 401, 0, 0, 0, 450, 0, 406, 0,
	1227, 0, 0, 0, 393, 434, 396, 425, 388, 416,
	345, 405, 445, 375, 411, 446, 0, 477, 0, 36,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 479,
	0, 410, 440, 371, 342, 455, 0, 414, 328, 408,
	0, 0, 334, 337, 451, 438, 365, 364, 772, 0,
	1226, 1215, 1214, 0, 0, 392, 397, 421, 385, 0,
	0, 0, 1216, 0, 0, 0, 0, 0, 0, 0,
	0, 361, 0, 404, 0, 1217, 0, 341, 335, 0,
	390, 0, 0, 0, 344, 0, 362, 422, 0, 325,
	0, 0, 428, 435, 387, 0, 0, 439, 384, 383,
	0, 0, 0, 0, 0, 0, 376, 321, 52, 453,
	0, 442, 394, 433, 359, 370, 0, 366, 0, 0,
	0, 367, 368, 403, 417, 0, 0, 0, 0, 0,
	53, 424, 54, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 326, 363, 426, 429, 349,
	413, 338, 372, 419, 373, 395, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1228, 1229, 0, 0, 0,
	0, 0, 0, 0, 0, 1224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1218, 1219, 1221, 0, 0, 0,
	1220, 0, 0, 0, 331, 0, 0, 0, 0, 55,
	332, 353, 436, 0, 0, 0, 0, 0, 320, 1654,
	0, 0, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 352, 346, 347, 399, 400, 447, 448,
	449, 423, 343, 0, 350, 351, 0, 431, 0, 0,
	0, 402, 0, 0, 0, 454, 0, 0, 0, 0,
	0, 0, 0, 378, 327, 382, 0, 0, 0, 0,
	0, 0, 0, 339, 340, 0, 0, 386, 381, 407,
	409, 418, 427, 437, 444, 420, 50, 51, 441, 430,
	0, 389, 443, 357, 377, 452, 379, 380, 415, 336,
	398, 0, 374, 355, 0, 0, 0, 360, 329, 369,
	330, 358, 391, 0, 356, 0, 432, 401, 0, 0,
	0, 450, 0, 406, 0, 1227, 0, 0, 0, 393,
	434, 396, 425, 388, 416, 345, 405, 445, 375, 411,
	446, 0, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 410, 440, 371, 342,
	455, 0, 414, 328, 408, 0, 0, 334, 337, 451,
	438, 365, 364, 772, 0, 1226, 1215, 1214, 0, 0,
	392, 397, 421, 385, 0, 0, 0, 1216, 0, 0,
	0, 0, 0, 0, 1752, 0, 361, 0, 404, 0,
	1217, 0, 341, 335, 0, 390, 0, 0, 0, 344,
	0, 362, 422, 0, 325, 0, 0, 428, 435, 387,
	0, 0, 439, 384, 383, 0, 0, 0, 0, 0,
	0, 376, 321, 52, 453, 0, 442, 394, 433, 359,
	370, 0, 366, 0, 0, 0, 367, 368, 403, 417,
	0, 0, 0, 0, 0, 53, 424, 54, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	326, 363, 426, 429, 349, 413, 338, 372, 419, 373,
	395, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1228, 1229, 0, 0, 0, 0, 0, 0, 0, 0,
	1224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1218,
	1219, 1221, 0, 0, 0, 1220, 0, 0, 0, 331,
	0, 0, 0, 0, 55, 332, 353, 436, 0, 0,
	0, 0, 0, 320, 0, 0, 0, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 352, 346,
	347, 399, 400, 447, 448, 449, 423, 343, 0, 350,
	351, 0, 431, 0, 0, 0, 402, 0, 0, 0,
	454, 0, 0, 0, 0, 0, 0, 0, 378, 327,
	382, 0, 0, 0, 0, 0, 0, 0, 339, 340,
	0, 0, 386, 381, 407, 409, 418, 427, 437, 444,
	420, 50, 51, 441, 430, 0, 389, 443, 357, 377,
	452, 379, 380, 415, 336, 398, 0, 374, 355, 0,
	0, 0, 360, 329, 369, 330, 358, 391, 0, 356,
	0, 432, 401, 0, 0, 0, 450, 0, 406, 0,
	1227, 0, 0, 0, 393, 434, 396, 425, 388, 416,
	345, 405, 445, 375, 411, 446, 0, 0, 0, 66,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 410, 440, 371, 342, 455, 0, 414, 328, 408,
	0, 0, 334, 337, 451, 438, 365, 364, 0, 0,
	0, 0, 0, 0, 0, 392, 397, 421, 385, 0,
	0, 0, 1584, 0, 0, 0, 0, 0, 0, 0,
	0, 361, 0, 404, 0, 0, 0, 341, 335, 0,
	390, 0, 0, 0, 344, 0, 362, 422, 0, 325,
	0, 0, 428, 435, 387, 0, 0, 439, 384, 383,
	1094, 0, 0, 0, 0, 0, 376, 321, 52, 453,
	0, 442, 394, 433, 359, 370, 0, 366, 0, 0,
	0, 367, 368, 403, 417, 0, 0, 0, 0, 0,
	53, 424, 54, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 326, 363, 426, 429, 349,
	413, 338, 372, 419, 373, 395, 354, 0, 0, 0,
	0, 0, 0, 0, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 0, 169, 1099, 0, 170, 171,
	172, 174, 173, 1103, 0, 1095, 0, 1107, 1106, 1108,
	1093, 1110, 0, 0, 0, 1114, 1111, 1113, 1112, 0,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 1100,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 55,
	332, 353, 436, 0, 0, 0, 0, 0, 320, 0,
	0, 0, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 352, 346, 347, 399, 400, 447, 448,
	449, 423, 343, 0, 350, 351, 0, 431, 0, 0,
	0, 402, 0, 0, 0, 454, 0, 0, 0, 0,
	0, 0, 0, 378, 327, 382, 0, 0, 0, 0,
	0, 0, 0, 339, 340, 0, 0, 386, 381, 407,
	409, 418, 427, 437, 444, 420, 50, 51, 441, 430,
	0, 389, 443, 357, 377, 452, 379, 380, 415, 336,
	398, 0, 374, 355, 0, 0, 0, 360, 329, 369,
	330, 358, 391, 0, 356, 0, 432, 401, 0, 0,
	0, 450, 0, 406, 0, 0, 0, 0, 0, 393,
	434, 396, 425, 388, 416, 345, 405, 445, 375, 411,
	446, 0, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 410, 440, 371, 342,
	455, 0, 414, 328, 408, 0, 0, 334, 337, 451,
	438, 365, 364, 612, 0, 0, 0, 0, 0, 0,
	392, 397, 421, 385, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 404, 0,
	0, 0, 341, 335, 0, 390, 0, 0, 0, 344,
	0, 362, 422, 0, 325, 0, 0, 428, 435, 387,
	0, 0, 439, 384, 383, 0, 0, 0, 0, 0,
	0, 376, 321, 52, 453, 0, 442, 394, 433, 359,
	370, 0, 366, 0, 0, 0, 367, 368, 403, 417,
	0, 0, 0, 0, 0, 53, 424, 54, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	326, 363, 426, 429, 349, 413, 338, 372, 419, 373,
	395, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 55, 332, 353, 436, 0, 0,
	0, 0, 0, 320, 0, 0, 0, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 352, 346,
	347, 399, 400, 447, 448, 449, 423, 343, 0, 350,
	351, 0, 431, 0, 0, 0, 402, 0, 0, 0,
	454, 0, 0, 0, 0, 0, 0, 0, 378, 327,
	382, 0, 0, 0, 0, 0, 0, 0, 339, 340,
	0, 0, 386, 381, 407, 409, 418, 427, 437, 444,
	420, 50, 51, 441, 430, 0, 389, 443, 357, 377,
	452, 379, 380, 415, 336, 398, 0, 374, 355, 0,
	0, 0, 360, 329, 369, 330, 358, 391, 0, 356,
	0, 432, 401, 0, 0, 0, 450, 0, 406, 0,
	0, 0, 0, 0, 393, 434, 396, 425, 388, 416,
	345, 405, 445, 375, 411, 446, 0, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 410, 440, 371, 342, 455, 0, 414, 328, 408,
	0, 0, 334, 337, 451, 438, 365, 364, 0, 0,
	0, 0, 0, 0, 0, 392, 397, 421, 385, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 361, 0, 404, 0, 0, 0, 341, 335, 0,
	390, 0, 0, 0, 344, 0, 362, 422, 0, 325,
	0, 0, 428, 435, 387, 0, 0, 439, 384, 383,
	0, 0, 0, 0, 0, 0, 376, 321, 52, 453,
	0, 442, 394, 433, 359, 370, 0, 366, 0, 0,
	0, 367, 368, 403, 417, 0, 0, 0, 0, 0,
	53, 424, 54, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 326, 363, 426, 429, 349,
	413, 338, 372, 419, 373, 395, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 55,
	332, 353, 436, 0, 0, 0, 0, 0, 320, 0,
	0, 0, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 352, 346, 347, 399, 400, 447, 448,
	449, 423, 343, 0, 350, 351, 0, 431, 0, 0,
	0, 402, 0, 0, 0, 454, 0, 0, 0, 0,
	0, 0, 0, 378, 327, 382, 0, 0, 0, 0,
	0, 0, 0, 339, 340, 0, 0, 386, 381, 407,
	409, 418, 427, 437, 444, 420, 50, 51, 441, 2036,
	0, 389, 443, 357, 377, 452, 379, 380, 415, 336,
	398, 0, 374, 355, 0, 0, 0, 360, 329, 369,
	330, 358, 391, 0, 356, 0, 432, 401, 0, 0,
	0, 450, 0, 406, 0, 0, 0, 0, 0, 393,
	434, 396, 425, 388, 416, 345, 405, 445, 375, 411,
	446, 497, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 410, 440, 371, 342,
	455, 0, 414, 328, 408, 0, 0, 334, 337, 451,
	438, 365, 364, 0, 0, 0, 0, 0, 0, 0,
	392, 397, 421, 385, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 404, 0,
	0, 0, 341, 335, 0, 390, 0, 0, 0, 344,
	0, 362, 422, 0, 325, 0, 0, 428, 435, 387,
	0, 0, 439, 384, 383, 0, 0, 0, 0, 0,
	0, 376, 0, 52, 453, 0, 442, 394, 433, 359,
	370, 0, 366, 0, 0, 0, 367, 368, 403, 417,
	0, 0, 0, 0, 0, 53, 424, 54, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	326, 363, 426, 429, 349, 413, 338, 372, 419, 373,
	395, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 55, 332, 353, 436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 352, 346,
	347, 399, 400, 447, 448, 449, 423, 343, 0, 350,
	351, 0, 431, 0, 0, 0, 402, 0, 0, 0,
	454, 0, 0, 0, 0, 0, 0, 0, 378, 327,
	382, 0, 0, 0, 0, 0, 0, 0, 339, 340,
	0, 0, 386, 381, 407, 409, 418, 427, 437, 444,
	420, 50, 51, 441, 430, 0, 389, 443, 357, 377,
	452, 379, 380, 415, 336, 398, 0, 374, 355, 0,
	0, 0, 360, 329, 369, 330, 358, 391, 0, 356,
	0, 432, 401, 0, 0, 0, 450, 0, 406, 0,
	0, 0, 0, 0, 393, 434, 396, 425, 388, 416,
	345, 405, 445, 375, 411, 446, 0, 0, 0, 72,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 410, 440, 371, 342, 455, 0, 414, 328, 408,
	0, 0, 334, 337, 451, 438, 365, 364, 0, 0,
	0, 0, 0, 0, 0, 392, 397, 421, 385, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 361, 0, 404, 0, 0, 0, 341, 335, 0,
	390, 0, 0, 0, 344, 0, 362, 422, 0, 325,
	0, 0, 428, 435, 387, 0, 0, 439, 384, 383,
	0, 0, 0, 0, 0, 0, 376, 0, 52, 453,
	0, 442, 394, 433, 359, 370, 0, 366, 0, 0,
	0, 367, 368, 403, 417, 0, 0, 0, 0, 0,
	53, 424, 54, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 326, 363, 426, 429, 349,
	413, 338, 372, 419, 373, 395, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 55,
	332, 353, 436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 352, 346, 347, 399, 400, 447, 448,
	449, 423, 343, 0, 350, 351, 0, 431, 0, 0,
	0, 402, 0, 0, 0, 454, 0, 0, 0, 0,
	0, 0, 0, 378, 327, 382, 0, 0, 0, 0,
	0, 0, 0, 339, 340, 0, 0, 386, 381, 407,
	409, 418, 427, 437, 444, 420, 50, 51, 441, 430,
	0, 389, 443, 357, 377, 452, 379, 380, 415, 336,
	398, 0, 374, 355, 0, 0, 0, 360, 329, 369,
	330, 358, 391, 0, 356, 0, 432, 401, 0, 0,
	0, 450, 0, 406, 0, 0, 0, 0, 0, 393,
	434, 396, 425, 388, 416, 345, 405, 445, 375, 411,
	446, 0, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 410, 440, 371, 342,
	455, 0, 414, 328, 408, 0, 0, 334, 337, 451,
	438, 365, 364, 0, 0, 0, 0, 0, 0, 0,
	392, 397, 421, 385, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 404, 0,
	0, 0, 341, 335, 0, 390, 0, 0, 0, 344,
	0, 362, 422, 0, 325, 0, 0, 428, 435, 387,
	0, 0, 439, 384, 383, 0, 0, 0, 0, 0,
	0, 376, 0, 52, 453, 0, 442, 394, 433, 359,
	370, 0, 366, 0, 0, 0, 367, 368, 403, 417,
	0, 0, 0, 0, 0, 53, 424, 54, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	326, 363, 426, 429, 349, 413, 338, 372, 419, 373,
	395, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 55, 332, 353, 436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 352, 346,
	347, 399, 400, 447, 448, 449, 423, 343, 0, 350,
	351, 0, 431, 0, 0, 0, 402, 0, 0, 0,
	454, 0, 0, 0, 0, 0, 0, 0, 378, 327,
	382, 0, 0, 0, 0, 0, 636, 0, 339, 340,
	0, 0, 386, 381, 407, 409, 418, 427, 437, 444,
	420, 50, 51, 635, 0, 0, 0, 0, 634, 0,
	0, 0, 0, 0, 0, 680, 0, 681, 0, 0,
	0, 0, 0, 0, 0, 671, 672, 0, 0, 0,
	0, 0, 0, 0, 0, 497, 0, 0, 66, 661,
	658, 659, 663, 664, 665, 666, 0, 0, 0, 662,
	667, 537, 538, 637, 0, 0, 0, 0, 632, 650,
	0, 0, 679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 647, 648, 0, 0,
	0, 0, 696, 0, 649, 0, 0, 1092, 646, 651,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 694, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	0, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 54, 0, 0, 0, 0, 0, 0, 0, 0,
	657, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 0,
	169, 1099, 0, 170, 171, 172, 174, 173, 1103, 0,
	1095, 0, 1107, 1106, 1108, 1093, 1110, 0, 0, 0,
	1114, 1111, 1113, 1112, 682, 1109, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 698, 0, 683, 684,
	0, 0, 0, 0, 0, 1102, 1104, 0, 55, 0,
	0, 0, 0, 0, 0, 0, 0, 772, 0, 1226,
	1215, 1214, 0, 0, 0, 0, 0, 0, 0, 669,
	0, 1216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1217, 0, 0, 0, 0, 0,
	0, 685, 695, 691, 692, 689, 690, 688, 687, 686,
	697, 673, 674, 675, 676, 678, 1284, 0, 541, 540,
	677, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1247, 1246, 0, 36, 0, 1245, 2124,
	1248, 1249, 1250, 1251, 0, 50, 51, 693, 1267, 0,
	0, 0, 0, 0, 1270, 1269, 1268, 0, 0, 1274,
	1275, 1276, 1277, 1279, 1278, 1242, 1243, 1244, 0, 0,
	0, 0, 1272, 1273, 0, 1271, 0, 0, 0, 0,
	1239, 1238, 0, 0, 1233, 1234, 1235, 1236, 0, 1237,
	0, 1240, 1210, 0, 0, 0, 0, 0, 1241, 0,
	0, 0, 1222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1228, 1229, 0, 1286, 0, 1285,
	1289, 0, 0, 0, 1224, 52, 0, 0, 1287, 636,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 635, 53, 0, 54,
	0, 634, 0, 1218, 1219, 1221, 0, 0, 680, 1220,
	681, 0, 0, 0, 0, 0, 0, 0, 671, 672,
	0, 0, 0, 0, 0, 0, 1924, 0, 497, 0,
	0, 66, 661, 658, 659, 663, 664, 665, 666, 0,
	0, 0, 662, 667, 537, 538, 637, 1925, 0, 0,
	0, 632, 650, 0, 0, 679, 0, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 0, 169, 0,
	0, 170, 171, 172, 174, 173, 0, 0, 0, 647,
	648, 0, 0, 1263, 1262, 696, 0, 649, 0, 0,
	645, 646, 651, 1257, 1264, 1265, 1266, 0, 1258, 1259,
	1260, 1261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 694, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 0, 0, 0, 55, 0, 0, 0,
	0, 0, 0, 0, 636, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 54, 0, 0, 0, 0, 946,
	0, 635, 0, 657, 1227, 0, 634, 0, 0, 0,
	0, 0, 0, 680, 0, 681, 0, 0, 0, 0,
	0, 0, 0, 671, 672, 0, 0, 0, 0, 1281,
	1280, 1282, 1283, 497, 0, 0, 66, 661, 658, 659,
	663, 664, 665, 666, 0, 0, 0, 662, 667, 537,
	538, 637, 0, 0, 0, 0, 632, 650, 0, 0,
	679, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 51, 0, 1288, 772, 0, 1226,
	1215, 1214, 0, 0, 647, 648, 949, 682, 0, 0,
	696, 1216, 649, 0, 0, 645, 646, 651, 0, 0,
	0, 0, 0, 0, 1217, 0, 0, 0, 0, 698,
	0, 683, 684, 0, 0, 0, 694, 0, 0, 0,
	0, 55, 0, 0, 0, 52, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 669, 0, 0, 0, 0, 53, 0, 54,
	0, 0, 0, 0, 0, 0, 0, 0, 657, 1959,
	1960, 0, 0, 0, 685, 695, 691, 692, 689, 690,
	688, 687, 686, 697, 673, 674, 675, 676, 678, 0,
	0, 541, 540, 677, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1210, 0, 0, 0, 0, 0, 50, 51,
	693, 0, 1222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1228, 1229, 0, 0, 0, 0,
	0, 0, 682, 0, 1224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 0, 683, 684, 0, 0,
	0, 0, 0, 1218, 1219, 1221, 55, 0, 0, 1220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 669, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 685,
	695, 691, 692, 689, 690, 688, 687, 686, 697, 673,
	674, 675, 676, 678, 0, 0, 541, 540, 677, 636,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 635, 0, 0, 0,
	0, 634, 0, 0, 0, 0, 0, 0, 680, 0,
	681, 0, 0, 50, 51, 693, 0, 0, 671, 672,
	0, 0, 0, 0, 0, 0, 0, 0, 497, 0,
	827, 66, 661, 658, 659, 663, 664, 665, 666, 0,
	0, 0, 662, 667, 537, 538, 637, 0, 0, 0,
	0, 632, 650, 0, 0, 679, 0, 0, 0, 0,
	0, 0, 0, 0, 1227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 647,
	648, 0, 0, 0, 0, 696, 0, 649, 0, 0,
	645, 646, 651, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 636, 0, 0,
	0, 694, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 0, 635, 0, 0, 0, 0, 634,
	0, 0, 0, 0, 0, 0, 680, 0, 681, 0,
	0, 0, 53, 0, 54, 0, 671, 672, 0, 0,
	0, 0, 0, 657, 0, 0, 497, 0, 0, 66,
	661, 658, 659, 663, 664, 665, 666, 0, 0, 0,
	662, 667, 537, 538, 637, 0, 0, 0, 0, 632,
	650, 0, 0, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	772, 0, 1226, 1215, 1214, 0, 0, 647, 648, 949,
	0, 0, 0, 696, 1216, 649, 0, 0, 645, 646,
	651, 0, 0, 0, 0, 0, 772, 1217, 1226, 1215,
	1214, 0, 0, 0, 0, 0, 0, 682, 0, 694,
	1216, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 0, 0, 1217, 0, 0, 0, 0, 0, 698,
	0, 683, 684, 0, 0, 0, 0, 0, 0, 0,
	53, 55, 54, 824, 823, 0, 0, 0, 0, 0,
	0, 657, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 825, 669, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2108, 0,
	0, 0, 0, 0, 685, 695, 691, 692, 689, 690,
	688, 687, 686, 697, 673, 674, 675, 676, 678, 0,
	0, 541, 540, 677, 0, 1210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1228, 1229, 0,
	0, 1210, 0, 0, 0, 682, 0, 1224, 50, 51,
	693, 1222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1228, 1229, 0, 0, 698, 0, 683,
	684, 0, 0, 1224, 0, 0, 1218, 1219, 1221, 55,
	0, 0, 1220, 0, 0, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	669, 1654, 1218, 1219, 1221, 0, 0, 0, 1220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 685, 695, 691, 692, 689, 690, 688, 687,
	686, 697, 673, 674, 675, 676, 678, 0, 0, 541,
	540, 677, 0, 0, 0, 0, 0, 772, 0, 0,
	636, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 635, 0, 0,
	0, 0, 634, 0, 0, 0, 50, 51, 693, 680,
	0, 681, 0, 0, 0, 0, 0, 0, 0, 671,
	672, 0, 0, 0, 0, 0, 0, 0, 0, 497,
	0, 0, 66, 661, 658, 659, 663, 664, 665, 666,
	0, 0, 0, 662, 667, 537, 538, 637, 0, 0,
	0, 0, 632, 650, 0, 0, 679, 1227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	647, 648, 0, 1227, 0, 0, 696, 0, 649, 0,
	0, 645, 646, 651, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 636, 0,
	0, 0, 694, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 0, 635, 0, 0, 0, 0,
	634, 0, 0, 0, 0, 0, 0, 680, 0, 681,
	0, 0, 0, 53, 0, 54, 0, 671, 672, 0,
	0, 0, 0, 0, 657, 0, 0, 497, 0, 0,
	66, 661, 658, 659, 663, 664, 665, 666, 0, 0,
	0, 662, 667, 537, 538, 637, 0, 0, 0, 0,
	632, 650, 0, 0, 679, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 772, 0, 1226, 1215,
	1214, 0, 0, 0, 0, 0, 0, 0, 647, 648,
	1216, 0, 0, 0, 696, 0, 649, 0, 0, 645,
	646, 651, 0, 1217, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 682, 0,
	694, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	698, 0, 683, 684, 0, 0, 0, 0, 0, 824,
	823, 53, 55, 54, 772, 0, 1226, 1215, 1214, 0,
	0, 0, 657, 0, 0, 0, 0, 825, 1216, 0,
	0, 0, 0, 669, 0, 0, 0, 0, 0, 0,
	0, 1217, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 685, 695, 691, 692, 689,
	690, 688, 687, 686, 697, 673, 674, 675, 676, 678,
	0, 1210, 541, 540, 677, 0, 0, 0, 0, 0,
	0, 1222, 0, 0, 0, 0, 0, 824, 823, 0,
	0, 0, 0, 1228, 1229, 0, 0, 0, 0, 0,
	0, 0, 0, 1224, 0, 825, 682, 0, 0, 50,
	51, 693, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 0,
	683, 684, 1218, 1219, 1221, 0, 0, 0, 1220, 0,
	55, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1693, 0, 1222,
	0, 669, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1228, 1229, 0, 0, 0, 0, 0, 0, 0,
	0, 1224, 0, 685, 695, 691, 692, 689, 690, 688,
	687, 686, 697, 673, 674, 675, 676, 678, 0, 0,
	541, 540, 677, 1041, 1042, 1043, 0, 0, 0, 0,
	1218, 1219, 1221, 0, 0, 0, 1220, 0, 0, 826,
	680, 0, 681, 0, 0, 0, 0, 0, 0, 0,
	671, 672, 0, 0, 0, 1654, 0, 50, 51, 693,
	497, 0, 0, 66, 661, 658, 659, 663, 664, 665,
	666, 0, 0, 0, 662, 667, 537, 538, 0, 772,
	0, 1226, 1215, 1214, 650, 0, 0, 679, 0, 0,
	0, 0, 0, 1216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1227, 0, 0, 1217, 0, 0, 0,
	0, 647, 648, 0, 0, 0, 0, 696, 0, 649,
	0, 0, 645, 646, 651, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 694, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 0, 0, 0, 0, 0,
	0, 2103, 0, 0, 0, 0, 0, 0, 680, 0,
	681, 0, 0, 0, 53, 0, 54, 0, 671, 672,
	0, 1227, 0, 0, 0, 657, 0, 0, 497, 0,
	0, 66, 661, 658, 659, 663, 664, 665, 666, 0,
	0, 0, 662, 667, 537, 538, 0, 0, 0, 0,
	0, 0, 650, 0, 1210, 679, 0, 0, 0, 0,
	0, 0, 0, 0, 1222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1228, 1229, 0, 647,
	648, 0, 0, 0, 0, 696, 1224, 649, 0, 0,
	645, 646, 651, 0, 0, 0, 0, 0, 772, 0,
	1226, 1215, 1214, 0, 0, 0, 0, 0, 0, 682,
	0, 694, 1216, 0, 0, 1218, 1219, 1221, 0, 0,
	52, 1220, 0, 0, 0, 1217, 0, 0, 0, 0,
	0, 698, 0, 683, 684, 0, 0, 0, 0, 0,
	0, 0, 53, 55, 54, 0, 0, 0, 0, 0,
	0, 0, 0, 657, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 669, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1868, 0, 0, 0, 0, 0, 685, 695, 691, 692,
	689, 690, 688, 687, 686, 697, 673, 674, 675, 676,
	678, 0, 0, 541, 540, 677, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1210, 0, 0, 0, 682, 0, 0,
	50, 51, 693, 1222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1228, 1229, 0, 0, 698,
	0, 683, 684, 0, 0, 1224, 1227, 0, 0, 0,
	772, 55, 1226, 1215, 1214, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1216, 0, 0, 0, 0, 0,
	0, 0, 669, 0, 1218, 1219, 1221, 1217, 0, 0,
	1220, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 685, 695, 691, 692, 689, 690,
	688, 687, 686, 697, 673, 674, 675, 676, 678, 36,
	0, 541, 540, 677, 0, 0, 0, 680, 0, 681,
	0, 0, 0, 0, 0, 0, 0, 671, 672, 0,
	0, 0, 1772, 0, 0, 0, 0, 967, 0, 0,
	66, 661, 658, 659, 663, 664, 665, 666, 50, 51,
	693, 662, 667, 537, 538, 0, 0, 0, 0, 0,
	0, 650, 0, 0, 679, 0, 0, 0, 121, 0,
	939, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1210, 0, 0, 647, 648,
	0, 0, 0, 0, 696, 1222, 649, 0, 0, 645,
	646, 651, 0, 0, 0, 0, 137, 1228, 1229, 0,
	0, 0, 0, 0, 0, 0, 0, 1224, 0, 0,
	694, 0, 0, 0, 0, 1227, 0, 0, 0, 52,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1218, 1219, 1221, 0,
	0, 53, 1220, 54, 0, 0, 0, 0, 0, 0,
	0, 0, 657, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	0, 169, 156, 0, 170, 171, 172, 174, 173, 138,
	139, 140, 144, 142, 141, 143, 115, 117, 0, 113,
	116, 122, 118, 119, 120, 134, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 135, 145, 146,
	147, 148, 149, 150, 151, 152, 153, 0, 0, 0,
	0, 938, 0, 0, 0, 0, 682, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 0,
	683, 684, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1227, 0, 0,
	0, 669, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 685, 695, 691, 692, 689, 690, 688,
	687, 686, 697, 673, 674, 675, 676, 678, 0, 0,
	541, 540, 677, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 51, 693,
}

var yyPact = [...]int16{
	975, -1000, -1000, -259, -1000, -1000, -1000, 1625, 2709, 1084,
	1084, 1672, 453, 383, 975, -1000, 2442, 585, 580, 556,
	239, 491, 1084, 2342, 2425, 609, 670, 728, 438, -1000,
	-205, -187, -1000, -91, 1479, -1000, -1000, 1474, 621, 606,
	-1000, 662, 522, -1000, 1329, -1000, 5391, 5391, 5391, 5391,
	-1000, -1000, -1000, -1000, -1000, -1000, 319, 1084, 1084, 438,
	143, 438, 1671, 419, 1667, 884, -1000, -1000, 699, -1000,
	1779, 697, -1000, -1000, 438, -1000, 881, -1000, 878, -1000,
	2425, 876, -1000, -1000, -1000, -1000, 2337, 1084, 1912, 2425,
	2188, 1084, 1971, 1666, 1758, -1000, 1756, -1000, 187, 268,
	714, -140, 21, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1512, 67, 1615, 1512, 1615,
	-1000, 1512, 1615, 62, 62, 62, 62, 62, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1613, 1611, -1000, 1512, 1512,
	1512, 1512, 1512, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1588, 1512, 1515, 112, 1519, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 714, 714, 714, 1624, 2425,
	1084, 1093, 1663, 1662, 2425, -213, 2425, 2425, 1863, -1000,
	-1000, -1000, 193, 2425, 1753, 6968, 5391, 8548, 2425, 1750,
	1749, -1000, 1748, 2425, 478, -1000, 2425, 1882, 750, 739,
	-1000, 731, 630, 2425, 2425, 1084, 1076, 6178, -1000, 1725,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1585, 904, 1084,
	353, 344, 1381, 584, 514, 520, 1165, 352, -1000, -1000,
	-1000, 987, -1000, 1084, -1000, 1897, -1000, -1000, 350, -1000,
	345, 869, 1081, 2425, 1583, 194, 1582, 3112, 1033, -1000,
	-266, -1000, 19, -1000, 62, 989, 1512, -1000, 62, 932,
	62, 62, -1000, -1000, 719, 1732, 719, 719, 719, 719,
	1079, 1079, -139, -139, -1000, -1000, -1000, 1031, -1000, -1000,
	1022, 1515, -1000, -1000, 1021, 2425, 1084, 1580, 1661, 1659,
	2425, 2425, 2425, 1778, 454, -1000, -1000, 1774, 1769, 1472,
	-1000, -1000, 192, -1000, -1000, 419, 1084, -1000, 695, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1630,
	1084, 1072, -1000, 459, 1084, 1880, 1084, 1077, 963, 1073,
	337, 622, -1000, 1658, -1000, -1000, 7363, 187, -1000, -1000,
	-1000, -1000, -1000, 442, -1000, 1907, 1817, 361, 42, -198,
	1161, -1000, -1000, 1579, -1000, -1000, 10919, -1000, 1157, 1155,
	-1000, 1143, 1141, 39, 1084, -1000, -193, 115, 16, -1000,
	-1000, 1381, -1000, 1566, 10919, 1767, -1000, 1736, 744, -1000,
	2386, -1000, -239, -1000, -1000, 968, -1000, -239, -1000, -1000,
	-1000, 1381, -1000, 1565, 1564, -1000, 1563, -1000, -1000, 1381,
	1381, 1381, 687, -1000, -1000, -1000, -1000, -1000, 719, 1464,
	62, 719, 1463, 1460, 719, 719, -1000, -1000, 1128, 773,
	-1000, -1000, -1000, -1000, 1321, -1000, 1307, -1000, 103, 90,
	-1000, 1434, 1500, -1000, 1305, 1499, 1654, 833, 2425, 2425,
	1562, 1558, 1557, 1513, 438, 1513, 1816, 292, 2425, 1863,
	398, 1863, 419, 7758, 1084, -1000, -1000, -1000, 1084, 1481,
	1084, 1481, -1000, -1000, -1000, -1000, 334, 1084, -1000, -1000,
	513, 2425, 5783, -1000, -1000, 1303, -1000, 280, 1512, 10919,
	686, 686, -194, 328, 324, -198, 1381, 1548, -1000, 442,
	366, -1000, 10919, 176, 1381, 1381, 1381, 1381, 10791, -1000,
	-1000, 641, -1000, -1000, -1000, 11390, 11390, 11390, 11390, 11390,
	11390, 11390, -1000, -1000, -1000, -1000, 32, -1000, -239, -1000,
	1062, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 675, 674,
	-1000, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 10919,
	1381, 1710, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
	1381, 1381, 1381, 4206, 1381, 1381, 1381, 1381, -1000, -1000,
	-1000, -1000, -1000, -1000, -198, 1547, -1000, -1000, -1000, 869,
	-1000, 10919, 398, 977, 148, -1000, 1496, -1000, 1020, 1425,
	1814, 1422, -1000, 11688, -1000, -1000, -1000, 1101, -1000, 1023,
	-1000, 926, 1399, 9945, 10428, 10428, 7758, -1000, -1000, 719,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 62, 1067,
	62, 17, 15, -1000, 1019, -1000, 1012, 833, 1084, 2425,
	1398, 1494, -1000, 278, 1545, 1544, 833, 398, 442, -1000,
	1818, 1913, -1000, 1513, 2425, -1000, 443, 1927, -1000, -1000,
	1808, -1000, 1493, -1000, -1000, 1454, 1863, -1000, 1531, 1481,
	1481, 1084, -1000, -1000, 355, 1084, -1000, -1000, -1000, -1000,
	-1000, -1000, 3022, 442, 1745, -1000, -1000, -1000, 951, 893,
	-1000, -1000, 872, 271, 882, -1000, 1084, -198, 1529, 10919,
	442, 1301, 261, 10919, 10919, 928, -1000, -1000, 311, 11262,
	980, 943, 11390, 11390, 11390, 11390, 11390, 11390, 11390, 11390,
	11390, 11390, 11390, 11390, 11390, 11390, 11390, 1043, 2537, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1126, -1000, 1513, 2188, 1101, 1101, 1101, 1299, 10791,
	655, 1546, 1546, 41, 10791, 41, 41, 41, 41, 41,
	91, -1000, -262, -1000, -1000, 6968, 7758, 10428, 10428, 9317,
	10919, 10428, 10428, 10428, 1791, 850, 655, 2188, 1807, 1101,
	1101, 1101, 1101, -1000, 1101, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 65, -1000, -1000, -1000, -1000, -1000, -1000,
	10428, 10428, 10428, 10428, -1000, 1084, 1381, 366, 1293, -166,
	10919, 1528, 744, -1000, -1000, 1396, -239, -1000, -1000, -1000,
	-140, -1000, -1000, -1000, -1000, 1101, 10428, 1277, -1000, -1000,
	867, 661, 1277, 1277, 1381, -1000, 719, -1000, 719, -1000,
	-1000, 1388, 1382, 1380, 1527, 1526, -214, 989, 833, 833,
	1376, 1290, 1288, 1821, 1831, 1513, 1777, 1712, -1000, 1101,
	1766, 1084, -1000, -1000, -1000, -1000, -1000, 233, 849, 1084,
	5867, 1362, -1000, 9645, 1525, 142, 396, 1634, 3595, 162,
	-1000, 1090, 828, 1064, 824, 823, 799, 798, 790, 781,
	770, 765, 761, 760, -1000, -1000, -1000, -1000, 1745, -1000,
	1895, -1000, -1000, -1000, 1864, 1523, 1521, 442, 366, 1283,
	3022, -1000, -110, 311, 433, -1000, -1000, 1007, -1000, -1000,
	2082, 11390, 11390, 11390, -1000, -1000, -1000, -1000, 980, 11390,
	11390, 11390, 1520, 2082, 2306, 237, 58, 41, 435, 435,
	35, 35, 35, 35, 35, 273, 273, -1000, -1000, -1000,
	-120, -1000, 1101, 1101, -1000, -1000, -1000, 10919, -1000, 1101,
	-1000, -239, 1061, -1000, -1000, 1054, 1381, -1000, 1277, 1277,
	596, 1491, 11719, 1512, -1000, 1512, 1519, 1515, -1000, 112,
	-1000, -1000, 121, 1512, 120, 1512, 1512, 1512, -1000, -1000,
	1512, 1512, -1000, 1512, 1512, 646, 1467, 1459, 1277, 10428,
	-1000, 819, -1000, 10919, 1101, 2425, -1000, -1000, -1000, -1000,
	-1000, -1000, 1277, 1101, 1489, 1277, 1277, 1279, 10919, 261,
	1647, -1000, -1000, 935, -1000, 1280, 1274, -1000, -1000, 1277,
	10428, -257, -1000, -1000, 1060, -1000, -1000, 5388, -257, -257,
	10428, -1000, -1000, -1000, -1000, -214, 833, 442, 1848, 1518,
	1270, 1264, -214, 1848, 3022, 1747, 10919, 10919, 1818, -1000,
	1513, -1000, -1000, 1791, -1000, -1000, 903, -1000, 1513, 1360,
	214, 149, 10919, -1000, 4682, -1000, 5867, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1818,
	10919, -1000, -1000, -1000, -1000, -1000, 376, 4152, 1084, 1084,
	1084, 669, 10919, 1089, 10919, -1000, -1000, -1000, -1000, -1000,
	2425, 1251, 9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645,
	9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645,
	9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645,
	9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645,
	9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645,
	9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645, 9645,
	442, 442, 1517, 1516, 321, -1000, 1084, -1000, -147, 3595,
	1084, -1000, 988, -1000, -1000, 952, 974, 952, 952, 952,
	952, 952, 260, 948, 560, -1000, 686, 686, 1084, 442,
	1273, 261, 3022, 1634, -1000, -1000, -1000, -1000, 2082, 2082,
	2082, -1000, 1520, 2082, 1485, -1000, 11390, 11390, 77, -1000,
	-1000, 655, -1000, 74, -1000, -239, -1000, -1000, 6952, 1043,
	10919, -1000, 274, -1000, -1000, -1000, 1515, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6952, 11390, 11390,
	11390, 11390, -115, 1462, 834, -1000, 10919, 726, -1000, -1000,
	-1000, -1000, -1000, -1000, 388, 366, -1000, 1887, -172, 598,
	-1000, -1000, -1000, -1000, -1000, 1381, -1000, -1000, 659, -1000,
	-1000, 1101, 1848, 1170, 1268, 3022, 10919, 398, -214, -214,
	1848, 3022, -1000, -1000, 1893, 716, 864, 1488, -1000, 722,
	1821, 1101, 1522, -1000, -1000, -121, 10919, 5867, 6657, 655,
	6657, -1000, 5867, 3514, 1821, 3951, 453, 601, 279, 1487,
	422, 189, -1000, -1000, -1000, 4203, 1002, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1084, 1871, 1858, 1851, 1850, 11010, 10919, 10919,
	-1000, 1806, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1140, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1262, 1258, 442, 442, 1514, 1381, 1255, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 869, 869, 1169,
	1154, 3022, -1000, 1634, -1000, -1000, 11390, 2082, 2082, 9,
	-1000, 1054, -1000, 1101, 1512, 1101, 389, -1000, -1000, -1000,
	1101, 592, 957, 575, 452, 1381, -107, -1000, 655, 10919,
	2425, 261, 686, 686, -1000, -1000, -1000, 186, 862, 744,
	744, 923, 48, -1000, 1829, 612, 6573, -1000, 3022, 1848,
	3022, 1634, 655, 1151, 1848, 1848, 3022, 1634, -1000, 1705,
	10919, 10919, 10919, -1000, 1747, -1000, 10428, -1000, -1000, -254,
	655, 4682, 3987, -1000, -1000, 3130, 11684, -1000, 1747, 5867,
	835, -1000, 845, -1000, 6657, 1408, 2425, 1168, -1000, 1379,
	1645, -1000, -1000, -1000, 1762, 1034, 1755, 1084, 205, 5391,
	-1000, -1000, 1805, 1484, 4598, -15, -1000, -1000, -1000, 759,
	658, 1080, -1000, 1729, -1000, -1000, 4152, 1742, -1000, -1000,
	-1000, -1000, -1000, 6657, -1000, 1475, 1101, 849, 229, 9645,
	-1000, 313, 1139, 1137, 442, 1084, -1000, 3595, -1000, -1000,
	369, 3022, 1634, -1000, 2082, -1000, -1000, -1000, -1000, -1000,
	11390, -1000, -1000, 11390, -1000, 11390, -1000, 11390, -1000, 11390,
	11390, 1101, 1051, 655, 1506, -1000, -1000, -1000, 744, -1000,
	744, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 431, -1000,
	1827, 1101, -1000, 1634, 3022, -1000, -1000, -1000, 3022, 3022,
	1634, -1000, 1702, 655, 655, -1000, -1000, 1413, 10919, 11512,
	-1000, -1000, -1000, -1000, 3872, 6262, 400, 3234, 294, 2425,
	-1000, 294, 1342, 279, 2425, -1000, -1000, 2188, 279, 279,
	279, 279, 279, -1000, 1685, 1684, -1000, 1693, 1691, 1706,
	2425, 1122, 1034, 693, 1381, -1000, 2425, -1000, 1762, 1798,
	-1000, 371, 4993, 1484, -15, 1483, -1000, -7, -2, 9790,
	7758, 719, -1000, -1000, -1000, -1000, -1000, 1084, 2224, -1000,
	141, 210, -1000, 159, -1000, 177, 3022, 3022, 1118, 1101,
	-1000, 2425, 1634, -1000, 1263, 1263, 1263, 1263, 1263, 126,
	-1000, -1000, 1084, -1000, -1000, -1000, 656, 10919, -1000, -1000,
	-1000, 1634, 1634, -1000, -1000, 1848, 279, 655, -1000, -1000,
	10041, -1000, -1000, 10919, -1000, 10919, 6657, -1000, 1147, 1381,
	-1000, 1848, 279, 1333, -1000, 1409, -1000, 758, 1645, 1511,
	1643, 1357, -1000, -1000, -1000, -1000, 1683, -1000, 1655, -1000,
	-1000, -1000, -1000, -144, 529, 524, 518, 1084, -1000, 1513,
	5078, -1000, -1000, 1059, -1000, 180, -1000, -1000, -1000, 1483,
	-15, -9, -1000, -1000, -1000, -1000, 655, 735, -1000, 1481,
	-1000, 6657, -1000, -1000, 169, -1000, 1634, 1634, -1000, -1000,
	1505, -1000, -1000, -1000, -1000, -1000, -1000, 1101, 174, -151,
	1115, 7758, 1133, -1000, 655, -1000, -1000, 1838, 1480, 399,
	5867, 11088, 10524, 1632, 2188, 1381, -1000, 8153, 1084, 1818,
	1333, -1000, 1848, 2188, 10919, -1000, -1000, 10919, 1504, -1000,
	10919, -1000, -1000, -1000, -1000, 1502, 1381, 1381, 1381, 1110,
	-1000, -1000, -1000, 371, -1000, 3966, -1000, 1050, -1000, -1000,
	-1000, -50, -26, -1000, 10919, 170, -1000, -1000, -1000, -1000,
	1084, -1000, 1700, -118, -157, -1000, -1000, -1000, 1101, 10919,
	1834, 1823, -1000, 3551, 835, -1000, -1000, 1740, 1337, 1470,
	-1000, -1000, 10300, 1101, 1113, -1000, -1000, 648, -1000, -1000,
	1110, 1821, -1000, 1818, -1000, 655, 655, 398, 655, 628,
	398, 398, 398, 711, 1084, -1000, -1000, 293, -1000, -1000,
	-1000, -1000, 655, 11333, 1106, -1000, 1697, -1000, -1000, -1000,
	-1000, 10919, 10919, 10550, 320, -1000, 1381, -1000, -1000, 1389,
	8943, 1084, -1000, -1000, 1821, 1104, 1100, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1097, 1097, 1097, 693,
	-1000, -1000, 9621, -1000, -1000, -142, 655, 1475, 370, 1889,
	-1000, 1381, -1000, 1513, -1000, -1000, -1000, -1000, -1000, 628,
	-1000, -1000, -1000, -144, -1000, -155, -1000, 2188, 1470, 1101,
	-1000, -1000, -159, 1343, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 2175, 1855, 34, 20, 2174, 2171, 2170, 2169, 2168,
	2166, 2165, 2164, 2159, 2157, 2155, 60, 38, 53, 44,
	46, 2150, 2147, 2144, 2140, 2139, 2137, 90, 2136, 2135,
	2132, 2131, 118, 2130, 2127, 2125, 2124, 83, 205, 137,
	159, 2167, 36, 45, 52, 41, 2122, 31, 2120, 2119,
	68, 2117, 40, 2113, 2112, 330, 2103, 2102, 7, 138,
	101, 103, 56, 2101, 2099, 95, 2358, 2098, 2097, 149,
	2096, 2092, 89, 35, 74, 4, 6, 12, 2091, 476,
	5, 2088, 85, 84, 2085, 2080, 2079, 134, 2078, 71,
	97, 8, 67, 2077, 15, 9, 127, 37, 21, 14,
	1, 63, 39, 2075, 26, 54, 32, 2074, 79, 2073,
	129, 55, 69, 13, 1696, 0, 25, 148, 2072, 2071,
	2069, 2138, 141, 16, 70, 81, 2064, 77, 106, 64,
	105, 2061, 2059, 2058, 2057, 66, 108, 76, 62, 2054,
	2049, 2046, 2045, 2044, 86, 2042, 2512, 777, 136, 128,
	87, 2041, 2040, 94, 323, 78, 93, 332, 831, 1760,
	2037, 2031, 2030, 2029, 131, 2028, 73, 104, 22, 483,
	2027, 2025, 2024, 2021, 2019, 2016, 2015, 102, 2010, 162,
	163, 98, 901, 51, 2005, 1996, 1993, 1991, 121, 1989,
	1985, 1984, 72, 1983, 1982, 107, 143, 140, 119, 120,
	1980, 1978, 75, 82, 1976, 117, 122, 1971, 130, 99,
	30, 371, 65, 1967, 1964, 1963, 18, 1959, 1958, 1957,
	2, 3, 1956, 1955, 1951, 1949, 1947, 1946, 80, 1945,
	135, 1943, 19, 1942, 1940, 61, 1939, 1938, 1938, 1934,
	1926, 814, 1428, 1925, 2573, 132, 1919, 153,
}

var yyR1 = [...]uint8{
	0, 237, 2, 2, 2, 238, 238, 1, 1, 1,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 22, 22, 22, 22, 22, 22,
	22, 240, 240, 3, 3, 4, 5, 5, 6, 6,
	7, 7, 30, 30, 8, 9, 9, 9, 243, 243,
	50, 50, 97, 97, 10, 10, 10, 10, 11, 11,
	11, 213, 213, 212, 214, 214, 215, 215, 217, 217,
	216, 216, 216, 216, 216, 216, 216, 218, 218, 218,
	218, 12, 12, 12, 12, 12, 207, 207, 207, 207,
	207, 13, 13, 210, 210, 210, 16, 16, 16, 16,
	17, 17, 18, 18, 18, 20, 20, 102, 102, 106,
	106, 106, 107, 107, 107, 107, 229, 229, 126, 126,
	239, 239, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 205, 205, 205, 205, 206, 206, 206, 206, 208,
	208, 209, 209, 209, 209, 209, 209, 211, 211, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	14, 14, 31, 31, 74, 74, 15, 112, 112, 186,
	186, 186, 187, 187, 187, 187, 187, 187, 189, 189,
	190, 190, 119, 119, 191, 191, 23, 23, 23, 23,
	23, 23, 23, 23, 26, 171, 172, 172, 172, 172,
	172, 172, 172, 172, 158, 158, 158, 158, 129, 129,
	129, 129, 129, 129, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 197, 197, 197, 197, 197, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 199,
	200, 201, 193, 193, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 148, 148,
	148, 148, 148, 148, 192, 192, 188, 188, 188, 188,
	131, 131, 131, 131, 131, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 139, 136, 136, 140, 137,
	137, 141, 143, 144, 144, 155, 155, 156, 156, 156,
	138, 138, 142, 132, 132, 132, 132, 132, 132, 132,
	132, 130, 130, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 145, 145, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 157, 157, 146, 146,
	147, 147, 147, 154, 154, 154, 151, 151, 152, 152,
	153, 153, 153, 149, 149, 149, 150, 150, 150, 160,
	182, 182, 182, 184, 184, 185, 185, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 170, 170, 202, 202, 203, 203, 204, 204, 181,
	181, 181, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 169, 169, 179, 179, 180, 180, 177,
	177, 177, 177, 178, 164, 164, 164, 164, 164, 165,
	165, 166, 166, 166, 166, 161, 161, 162, 162, 163,
	163, 195, 195, 195, 233, 233, 233, 233, 233, 233,
	234, 234, 196, 196, 167, 167, 168, 168, 175, 175,
	175, 175, 245, 245, 173, 173, 173, 174, 174, 174,
	246, 27, 28, 28, 29, 29, 29, 34, 34, 34,
	32, 32, 33, 33, 39, 39, 38, 38, 40, 40,
	40, 40, 118, 118, 118, 117, 117, 230, 230, 230,
	230, 230, 42, 42, 43, 43, 44, 44, 45, 45,
	45, 220, 220, 219, 219, 221, 221, 221, 221, 221,
	221, 221, 221, 57, 57, 94, 94, 94, 98, 98,
	46, 46, 46, 46, 47, 47, 48, 48, 49, 49,
	124, 124, 123, 123, 123, 51, 51, 51, 53, 52,
	52, 52, 52, 54, 54, 56, 56, 55, 55, 58,
	58, 58, 58, 59, 59, 96, 96, 41, 41, 41,
	41, 41, 41, 41, 41, 109, 109, 61, 61, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 71, 71, 71, 71, 71,
	71, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 37, 37, 72, 72, 72, 79, 73, 73,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 69, 69, 69,
	69, 69, 69, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 247, 247, 70, 70,
	70, 70, 35, 35, 35, 35, 35, 125, 125, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 128, 128, 128, 128, 128,
	128, 128, 128, 83, 83, 36, 36, 81, 81, 82,
	111, 111, 84, 84, 80, 80, 80, 80, 222, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 62,
	62, 85, 85, 86, 86, 231, 231, 232, 87, 87,
	88, 88, 89, 90, 90, 90, 91, 91, 91, 91,
	92, 92, 92, 64, 64, 64, 64, 64, 64, 93,
	93, 95, 95, 95, 95, 99, 99, 75, 75, 77,
	77, 76, 78, 100, 100, 104, 101, 101, 105, 105,
	105, 105, 105, 24, 25, 103, 103, 103, 120, 120,
	120, 110, 110, 108, 108, 115, 116, 116, 116, 116,
	116, 121, 121, 121, 122, 122, 223, 223, 223, 224,
	224, 224, 225, 225, 226, 227, 227, 228, 236, 236,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 114, 114, 114, 114, 114, 114, 241, 242,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 2, 0, 1, 1, 1, 1,
	2, 13, 12, 14, 14, 13, 12, 13, 12, 10,
	7, 10, 7, 11, 11, 9, 13, 16, 5, 8,
	7, 6, 7, 6, 3, 6, 3, 6, 3, 6,
	6, 6, 6, 6, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	6, 1, 3, 3, 0, 1, 1, 1, 1, 3,
	1, 2, 3, 1, 2, 1, 1, 1, 2, 3,
	4, 2, 2, 2, 3, 5, 0, 2, 2, 2,
	2, 3, 5, 1, 2, 3, 7, 10, 1, 1,
	5, 5, 3, 5, 3, 1, 3, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	0, 3, 0, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 4, 2, 3, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 4, 1, 1, 0, 1, 2, 0, 3, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 3, 5, 5, 7,
	3, 5, 3, 5, 4, 4, 0, 1, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 1, 2, 2, 3, 2, 4, 2,
	4, 2, 2, 3, 2, 3, 2, 7, 9, 3,
	3, 6, 9, 9, 6, 6, 8, 8, 5, 8,
	7, 4, 0, 2, 4, 6, 2, 4, 2, 1,
	1, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	2, 1, 1, 2, 0, 4, 3, 4, 3, 3,
	3, 3, 3, 3, 3, 2, 4, 6, 2, 3,
	2, 3, 1, 3, 0, 2, 0, 2, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 3, 0, 1, 0, 5, 0, 3, 5,
	1, 1, 1, 1, 3, 3, 2, 2, 2, 1,
	1, 1, 1, 4, 5, 4, 4, 4, 1, 2,
	2, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 1, 3, 0, 3,
	0, 3, 3, 0, 3, 3, 0, 1, 0, 1,
	0, 2, 1, 0, 3, 3, 0, 1, 2, 6,
	0, 1, 4, 1, 2, 1, 3, 2, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 5, 3, 3, 2, 3, 2, 3, 3, 2,
	2, 3, 4, 1, 1, 1, 1, 1, 3, 3,
	2, 2, 4, 1, 2, 5, 5, 8, 8, 13,
	11, 1, 1, 2, 2, 10, 8, 9, 7, 7,
	5, 0, 1, 1, 0, 1, 1, 1, 2, 2,
	1, 2, 0, 3, 0, 1, 1, 3, 0, 4,
	1, 3, 2, 1, 1, 2, 1, 1, 1, 1,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 3, 6,
	4, 7, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 0, 4, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 8, 1, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 0, 4, 1, 3, 3,
	2, 3, 2, 1, 2, 0, 3, 1, 1, 3,
	4, 4, 4, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 4, 3, 3, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 6, 2, 2, 2, 2, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 2, 1, 4, 5, 5,
	5, 5, 6, 4, 4, 6, 6, 8, 6, 6,
	6, 8, 6, 8, 6, 8, 6, 8, 9, 7,
	5, 4, 4, 3, 3, 3, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 2, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 2, 2, 2, 1, 1,
	2, 2, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 0, 2, 1, 1, 3, 5, 3, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 0, 3, 0, 2, 1, 3, 1, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 1, 3, 1, 1, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 5, 3, 1, 3, 1, 2, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 2, 0,
	2, 2, 0, 1, 4, 1, 3, 2, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -237, -2, -1, -21, -22, -23, -26, 126, 132,
	133, 70, 127, 128, 403, -171, 58, -233, -234, 288,
	-191, 137, 150, 171, 172, 373, 134, 152, 135, 385,
	386, 153, 388, 79, -168, -115, 61, -168, 56, -108,
	140, 136, 152, -2, -172, -158, -115, -114, 63, 36,
	398, 399, 150, 172, 174, 301, 136, 136, 136, 138,
	225, 138, -115, -115, -80, 141, 61, -114, -121, 63,
	-55, -121, 61, -114, 135, -115, 141, -115, 141, 63,
	-110, 141, 388, 385, 386, 353, 56, 59, 56, 135,
	143, 136, 135, -115, 141, -115, 141, 63, 60, 59,
	-159, -129, -131, -130, -133, -132, -134, -115, -139, -140,
	-143, -141, -142, 261, 365, 258, 262, 259, 264, 265,
	266, 120, 263, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 267, 279, 33, 158, 251, 252,
	253, 256, 255, 257, 254, 280, 281, 282, 283, 284,
	285, 286, 287, 288, -135, -136, 244, -137, -138, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 243,
	246, 247, 248, 250, 249, -159, -159, -159, -115, 56,
	223, 224, -115, -115, -110, 226, -110, 56, -205, 19,
	196, 197, 209, 56, 81, 123, 25, 123, -110, 81,
	81, -55, 81, 135, -55, -115, 135, -55, -55, -80,
	-115, -115, -55, 317, 56, 26, 26, -175, -245, 368,
	37, -158, -160, -164, -161, -162, -163, -176, -165, 144,
	142, 153, 401, 146, 147, 288, -169, 148, 136, 154,
	73, 81, -197, 144, -200, 56, 296, 302, 142, 154,
	153, 401, 71, 145, 25, 375, 377, 31, 32, -153,
	404, 290, -151, 299, -146, 58, -145, 260, -147, 58,
	-146, -147, -146, -147, -149, 262, -149, -149, -149, -149,
	58, 58, -146, -146, -146, -146, -146, 58, -146, -155,
	58, -144, 245, -156, 58, 56, 57, -55, -115, -115,
	56, 56, 56, -55, -229, 398, 399, -55, -55, -208,
	-206, 8, 9, 10, 210, -55, 26, -116, -122, -115,
	310, 149, -113, -114, -121, 131, 197, 376, 80, 25,
	27, 296, 302, 196, 84, 120, 16, 85, 203, 385,
	386, 119, 76, 354, 126, 52, 346, 347, 344, 201,
	356, 357, 345, 303, 208, 20, 31, 10, 28, 156,
	24, 113, 128, 198, 89, 88, 159, 163, 164, 26,
	157, 75, 204, 206, 19, 55, 148, 11, 375, 13,
	14, 390, 377, 141, 140, 100, 389, 136, 50, 8,
	122, 29, 97, 46, 154, 207, 48, 98, 17, 348,
	349, 34, 363, 165, 115, 53, 40, 391, 81, 392,
	73, 56, 317, 202, 79, 15, 51, 166, 393, 205,
	397, 99, 129, 353, 173, 49, 199, 394, 134, 200,
	6, 359, 33, 155, 47, 135, 304, 395, 87, 139,
	74, 5, 153, 9, 396, 54, 57, 350, 351, 352,
	38, 86, 12, 151, 367, 77, -129, -122, -113, -55,
	26, 26, 26, -55, 139, -55, 11, 97, 97, 97,
	131, -55, -55, -115, -115, 63, -173, 59, -116, 71,
	-113, -114, 36, 58, -196, 56, 81, -167, -115, 154,
	-169, 61, 136, -195, 385, 386, -241, 58, -169, -169,
	61, 136, 154, 61, 154, 73, 19, -115, 9, 154,
	154, -196, 63, -55, 58, -193, 376, 16, 58, -198,
	58, -199, 63, 64, 65, 110, 66, 73, -148, 72,
	-61, 291, -69, 344, 347, 346, 292, 74, 75, -115,
	362, 361, -121, -201, 65, 405, -152, 300, -149, 65,
	-146, -149, 65, 61, -149, -149, -150, 120, 119, 33,
	-150, -150, -150, -150, -157, 63, -157, -154, 367, 368,
	-154, 65, 65, -155, 65, -55, -115, 58, 56, 56,
	-55, -55, -55, 25, 138, 25, -186, 25, 56, 59,
	210, -205, -115, 123, 57, -115, -115, 63, 139, -168,
	11, -168, 63, 63, 73, 63, -119, 144, -164, 153,
	131, 56, 90, -116, -245, -180, -177, -115, 154, 58,
	10, 9, 19, 148, 142, 153, 401, -195, 61, 58,
	-41, -60, 81, -66, 31, 26, 9, 76, -241, -65,
	-61, -80, -222, -78, -79, 120, 121, 109, 110, 117,
	82, 122, -69, -67, -68, -70, -225, 183, 63, 64,
	-115, 62, 72, 65, 66, 67, 68, 73, -121, 322,
	-76, 48, 49, 354, 355, 356, 357, 363, 358, 85,
	38, 40, 267, 291, 292, 344, 352, 351, 350, 348,
	349, 346, 347, 400, 141, 345, 115, 353, 289, 61,
	61, 61, 61, -195, 153, -167, -115, 387, -197, 401,
	-148, -241, 58, -41, 25, 31, -62, 65, 110, -198,
	58, -199, -188, 400, 65, 66, -188, -241, -146, 58,
	-146, 58, 58, -241, -241, -241, 123, -150, 60, -149,
	-150, 60, 60, -150, -150, 61, 61, 120, 60, 59,
	60, 251, 251, 60, 59, 60, 59, 58, 57, 56,
	-179, -180, -69, -115, -55, -55, 58, 58, 58, -3,
	-4, -5, 6, -241, -110, -3, -187, 19, 180, 181,
	-55, -206, -94, -115, 154, -208, -205, -116, -115, -168,
	-168, -240, 136, 154, -115, 144, -164, -55, -174, -116,
	63, 65, 60, 59, -146, -178, 294, -146, -41, -166,
	176, 177, 33, 178, -166, 387, 154, 154, -195, -241,
	58, -180, -242, 80, 79, 97, 211, 60, -41, -63,
	100, 81, 98, 99, 84, 106, 105, 116, 109, 110,
	111, 112, 113, 114, 115, 107, 108, 119, 400, 90,
	91, 92, 93, 94, 95, 96, 101, 102, 103, 104,
	-109, -241, -79, -241, -241, -241, -60, -3, -73, -241,
	-41, 124, 125, -66, -241, -66, -66, -66, -66, -66,
	-66, -226, 290, -188, 63, 123, 123, -241, -241, -241,
	-241, -241, -241, -241, -241, -83, -41, -241, 41, -241,
	-241, -241, -241, -247, -241, -247, -247, -247, -247, -247,
	-247, -128, 120, 262, 158, 253, -135, -130, 268, 267,
	-241, -241, -241, -241, -195, 58, -196, -41, -94, 60,
	58, 377, 59, 65, 60, -198, 63, 60, 293, 122,
	-129, -242, 60, 60, 60, -39, 24, -38, -40, 111,
	-41, -121, -38, -38, -116, -150, -149, 63, -149, 301,
	301, 65, 65, -179, -115, -55, 60, 58, 58, 58,
	-179, -94, -180, -87, 15, -29, 5, -27, -246, -3,
	-55, 139, 21, 6, 8, 9, 10, 19, -112, 59,
	25, -208, -239, 58, -115, 153, -115, -182, -184, 367,
	-183, 57, 149, 71, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 61, -177, -90, 27, 28, 60, -196,
	56, 73, 179, -196, 56, -167, -195, 58, -41, -180,
	60, -192, 178, -41, -41, -71, 73, 81, 74, 75,
	-66, 21, 22, 23, -72, -76, -79, 69, 100, 98,
	99, 84, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -66, -66, -66, -66, -125, 61, 63,
	252, -128, 61, -80, -242, -242, -242, 59, -242, -3,
	-65, 63, -115, -65, -115, 404, -116, -116, -38, -38,
	-41, -127, 120, 258, 158, 253, -137, -136, -138, 244,
	277, 278, 298, 251, 299, -135, 256, 255, 257, 268,
	259, 264, 266, 265, 263, -41, -40, -40, -38, -32,
	24, -81, -82, 86, -80, 19, -242, -242, -242, -242,
	-242, 260, -38, -39, -38, -38, -38, -168, -241, -242,
	60, 373, 374, -41, 58, -62, 60, -153, -242, -38,
	59, -242, -118, -117, 25, -115, 63, 123, -242, -242,
	-241, -150, -150, 60, 60, 60, 58, 58, -96, 389,
	-179, -179, 60, 60, 60, -91, 17, 16, -6, -4,
	-241, 21, 24, -34, 44, 45, -28, -242, 25, -168,
	198, -111, 86, -115, -209, -211, 227, -19, -16, -7,
	-9, -8, -11, -10, -12, -13, -14, -15, -24, -4,
	141, -17, -18, -30, 10, 9, 20, 33, 202, 203,
	208, 204, 151, -31, 173, -25, 8, 353, 163, 164,
	56, -244, -115, 109, 110, 111, 112, 114, 106, 105,
	116, 123, 90, 91, 92, 63, 59, 58, 65, 66,
	67, 68, -114, -135, -136, -137, -138, 268, 273, 274,
	275, 276, 259, 258, 269, 270, 271, 73, 81, 80,
	79, 100, 97, 98, 84, 85, 86, 87, 89, 88,
	355, 354, 356, 357, 31, 144, 142, 153, 401, 145,
	58, 58, 385, 386, 142, -181, 56, -183, 367, 58,
	369, 61, -170, 90, 63, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, -90, 9, 10, 58, 58,
	-180, -242, 60, -182, 360, 73, 74, 75, -66, -66,
	-66, -72, -66, -66, -66, -37, 159, 80, 367, -242,
	-242, -41, -242, -227, -228, 63, -242, -242, 59, 57,
	59, -146, -146, -146, -156, -155, -144, 238, -146, 238,
	-146, -146, -146, -146, -146, -146, -146, 25, 59, 11,
	59, 11, -242, -38, -84, -82, 89, -41, -242, -121,
	-242, -242, -242, -242, 60, -41, -192, 56, 60, -194,
	60, 60, -242, -40, -230, 402, -117, 111, -122, -230,
	-230, -39, -96, -179, -180, -59, 12, 58, 60, 60,
	-96, -59, -182, -92, 19, 34, -41, -88, -89, -41,
	-87, -3, -32, 70, -3, -189, 57, 199, 227, -41,
	403, -211, 227, -209, -87, -41, -27, -27, -27, -213,
	-115, -215, -212, 213, 214, -27, -236, -235, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 342, 343, -115,
	-115, -115, -207, 40, 205, 206, 207, -41, -115, -241,
	-83, -55, 60, -244, -244, -244, -244, -244, -244, -244,
	-244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
	-244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
	-244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
	-244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
	-244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
	-244, -180, -180, 58, 58, 154, -115, -185, -183, -115,
	65, -202, 56, 77, 65, -202, -202, -202, -202, -202,
	-203, 194, 195, 65, -204, -203, 65, -166, -166, -168,
	-180, 60, -192, -182, -181, -37, 80, -66, -66, 251,
	405, 59, -188, -127, 120, -125, -41, -149, 61, -155,
	-127, -66, -66, -66, -66, 364, -87, 88, -41, 87,
	145, -242, 10, 9, 373, 374, 60, 228, 379, 380,
	165, 381, 178, 382, 383, -241, 123, -242, -59, 60,
	60, -182, -41, -94, -96, -96, -59, -182, 9, 100,
	59, 18, 59, -90, -91, -242, -33, 47, -190, 367,
	-41, -209, -210, -211, -211, -209, 403, 88, -91, 87,
	-20, -16, -17, -19, 227, -108, 11, -50, -55, -43,
	-44, -45, -46, -57, -79, -241, -55, 59, -214, -124,
	200, 25, 212, -101, -126, 229, -105, 312, 311, -116,
	322, -103, 310, 262, 309, -202, 59, -115, 11, 11,
	11, 11, -211, 227, -74, -73, -74, -112, 19, 60,
	60, 60, -180, -180, 58, -241, 60, 59, -196, -196,
	60, 60, -182, -181, -66, 301, -228, -242, -242, -242,
	59, -242, -242, 59, -242, 19, -242, 59, -242, 19,
	-241, -36, 359, -41, -55, -192, -166, -166, 367, -62,
	16, -62, -62, -62, 65, 380, 165, 382, 16, -242,
	166, -87, 111, -182, -59, -182, -181, 60, -59, -59,
	-182, -181, 42, -41, -41, -89, -92, -38, 401, 403,
	-211, 88, 88, -92, -209, 89, 89, -210, -56, 29,
	-55, -55, -50, -243, 59, 11, 57, 33, 59, -51,
	-53, -52, -54, 46, 50, 52, 47, 48, 49, 53,
	-124, -43, -241, -123, 166, -121, 25, -212, -115, 201,
	-129, 19, 59, -101, 229, -102, -106, 313, 315, 90,
	123, -120, -115, 63, 31, 33, -235, 29, -210, -242,
	-111, 198, -244, -223, 219, 81, 60, 60, -180, -115,
	-183, 145, -182, -181, -66, -66, -66, -66, -66, -66,
	-242, 63, 58, -62, -62, 384, -121, 16, -242, -181,
	-182, -182, -182, -181, 43, -42, 11, -41, 88, -211,
	403, -17, -20, 141, -18, 141, 403, 88, -97, 166,
	-55, -97, 57, -43, -55, -100, -104, -80, -44, -45,
	-45, -44, -45, 46, 46, 46, 51, 46, 51, 46,
	-52, -121, -242, -58, 54, 140, 55, -241, -121, 19,
	-217, -216, 65, 217, 216, 81, 215, -115, -105, -102,
	59, 314, 316, 317, 56, 77, -41, -116, -150, -168,
	88, 227, 199, -224, 220, 219, -182, -182, 60, -242,
	-55, -181, -242, -242, -242, -242, -242, -35, 100, 367,
	-168, 123, -231, -232, -41, -181, -181, -59, -43, 88,
	89, -41, -41, -64, 33, 38, -3, -241, -241, -59,
	-43, -59, -42, 59, 90, -48, -47, 56, 57, -49,
	56, -47, 46, 46, -220, 367, 136, 136, 136, -98,
	-115, -3, -218, 59, -211, 227, 63, 41, 218, -106,
	-107, 318, 315, 321, 90, -210, 222, 221, -181, -181,
	58, -242, 365, 53, 370, 60, -116, -242, -87, 59,
	-85, 13, 141, -209, -20, -20, -99, 56, -100, -75,
	-77, -76, -241, -3, -93, -95, 6, -115, -113, -114,
	-98, -87, -59, -59, -104, -41, -41, 58, -41, 58,
	-241, -241, -241, -242, 59, -216, 88, -209, 63, 315,
	319, 320, -41, 403, -168, 43, 366, 371, -242, -232,
	-86, 14, 16, 403, 30, -99, 59, -242, -242, -242,
	59, 123, -242, -91, -87, -94, -219, -221, 390, 391,
	392, 393, 394, 395, 396, 397, -94, -94, -94, -123,
	-115, 88, 403, 88, 60, 43, -41, -73, 88, 154,
	-77, 38, -3, -241, -95, -115, -91, 60, 60, 59,
	-242, -242, -242, -58, 88, 367, 141, 9, -75, -3,
	-221, -220, 370, -100, -242, 371,
}

var yyDef = [...]int16{
	0, -2, 1, 2, 7, 8, 9, 0, -2, 0,
	0, 0, 923, 0, 4, 10, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 535,
	536, 537, 540, 0, 0, 546, 925, 0, 0, 0,
	924, 0, 0, 3, 0, 267, 312, 312, 312, 312,
	1102, 1103, 1104, 1105, 1106, 1107, 0, 0, 0, 921,
	0, 921, 0, 844, 0, 0, -2, -2, 0, 933,
	0, 647, 931, 932, 921, 34, 0, 36, 0, 38,
	0, 0, 541, 538, 539, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 260, 0, 262, 548, 0,
	274, 450, 446, 279, 280, 281, 282, 283, 360, 361,
	362, 363, 364, 401, 402, 438, 425, 440, 438, 440,
	408, 438, 440, 453, 453, 453, 453, 453, 416, 417,
	418, 419, 420, 421, 422, 0, 0, 393, 438, 438,
	438, 438, 438, 399, 400, 427, 428, 429, 430, 431,
	432, 433, 434, 0, 438, 385, 383, 387, 392, 365,
	366, 367, 368, 369, 370, 371, 372, 373, 374, 376,
	377, 379, 380, 390, 391, 275, 276, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 201,
	202, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 0, 0, 547, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 0, 0, 265, 550, 0,
	553, 268, 269, 270, 271, 272, 273, 0, 542, 544,
	0, 531, 0, 0, 0, 0, 0, 0, 503, 504,
	285, 0, 287, 0, 289, 0, 291, 292, 0, 294,
	296, 542, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 452, 448, 447, 453, 0, 438, 426, 453, 0,
	453, 453, 409, 410, 456, 0, 456, 456, 456, 456,
	0, 0, 443, 443, 396, 397, 398, 0, 375, 378,
	0, 385, 384, 381, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 137, 0, 239, 0,
	209, 205, 206, 207, 204, 0, 0, 846, 0, 926,
	927, 928, -2, -2, 934, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 28, 648, 935, 0,
	0, 0, 922, 0, 0, 0, 0, 0, 0, 0,
	252, 0, 258, 257, 261, 263, 0, 0, 554, 556,
	929, 930, 552, 0, 514, 0, 0, 0, 545, 531,
	0, 499, -2, 0, 532, 533, 942, 1108, 0, 0,
	494, 496, 0, 531, 544, 286, 0, 0, 0, 293,
	295, 0, 299, 300, 942, 0, 332, 0, 0, 313,
	0, 316, -2, 319, 320, 0, 322, 356, 325, 326,
	327, 0, 329, 438, 438, 352, 0, 667, 668, 0,
	0, 0, 0, 330, 331, 451, 278, 449, 456, 0,
	453, 456, 0, 0, 456, 456, 411, 457, 0, 0,
	412, 413, 414, 415, 0, 436, 0, 394, 0, 0,
	395, 0, 0, 382, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 921, 0, 242, 0, 0, 0,
	0, 0, 0, 0, 0, 35, 37, 39, 0, 31,
	0, 33, 40, 41, 42, 43, 0, 544, 49, 253,
	0, 0, 0, 555, 551, 0, 507, 438, 438, 942,
	0, 0, 0, 0, 0, 531, 0, 0, 498, 0,
	0, 657, 942, 663, 665, 0, 0, 0, 942, 710,
	711, 712, 713, 714, 715, 942, 942, 942, 942, 942,
	942, 942, 741, 742, 743, 744, 0, 746, -2, 850,
	844, 852, 853, 854, 855, 856, 857, 858, 0, 0,
	902, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 0, 0, 0, 0, 776, 786, 786, 786, 786,
	786, 786, 786, 0, 0, 0, 0, 0, 943, 492,
	493, 495, 497, 501, 531, 0, 545, 311, 288, 542,
	290, 942, 0, 0, 0, 333, 0, 859, 0, 0,
	0, 0, 318, 0, 321, 323, 324, 0, 348, 0,
	350, 0, 0, -2, 942, 942, 0, 403, 439, 456,
	405, 441, 442, 406, 407, 458, 454, 455, 453, 0,
	453, 0, 0, 435, 0, 388, 0, 0, 0, 0,
	0, 505, 506, 438, 0, 0, 0, 0, 0, -2,
	868, 0, 560, 0, 0, -2, 0, 0, 240, 241,
	237, 210, 208, 615, 616, 0, 0, 847, 140, 30,
	32, 0, 51, 52, 545, 544, 50, 259, 549, 557,
	558, 559, 460, 0, 873, 511, 513, 510, 0, 542,
	521, 522, 0, 0, 542, 543, 544, 531, 0, 942,
	0, 0, 354, 942, 942, 0, 662, 1109, 660, 942,
	0, 0, 942, 942, 942, 942, 942, 942, 942, 942,
	942, 942, 942, 942, 942, 942, 942, 0, 0, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	664, 0, 681, 0, 0, 0, 657, 56, 0, 942,
	708, 0, 0, 732, 942, 733, 734, 735, 736, 737,
	738, 745, 0, 849, 851, 0, 0, 942, 942, 942,
	942, 942, 942, 942, 570, 0, 834, 0, 0, 0,
	0, 0, 0, 778, 0, 779, 780, 781, 782, 783,
	784, 785, 825, 0, 827, 828, 829, 830, 831, 832,
	942, -2, 942, 942, 502, 0, 0, 0, 0, 0,
	942, 308, 0, 860, 314, 0, 356, 317, 357, 358,
	450, 328, 349, 351, 353, 0, 942, 0, 576, 578,
	582, 0, 0, 0, 0, 404, 456, 437, 456, 444,
	445, 0, 0, 0, 0, 0, 655, 1108, 0, 0,
	0, 0, 0, 876, 0, 0, 564, 567, 562, 56,
	0, 0, 243, 244, 245, 246, 247, 0, 840, 0,
	0, 0, 29, 142, 0, 0, 545, 489, 461, 0,
	463, 0, 481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 508, 509, 874, 875, 873, 515,
	0, 523, 524, 516, 0, 0, 0, 0, 0, 0,
	460, 530, 0, 658, 659, 661, 685, 0, 687, 689,
	669, 942, 942, 942, 673, 704, 705, 706, 0, 942,
	942, 942, 702, 677, 0, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 730, 797, 798,
	0, 740, 0, 0, 683, 684, 707, 942, 901, 56,
	728, 356, 0, 729, 739, 0, 846, 848, 0, 0,
	0, 0, -2, 438, 802, 438, 387, 385, 806, 383,
	808, 809, 810, 438, 813, 438, 438, 438, 818, 819,
	438, 438, 822, 438, 438, 0, 0, 0, 0, 942,
	571, 842, 837, 942, 0, 0, 773, 774, 775, 777,
	787, 826, 0, 0, 575, 0, 0, 0, 942, 354,
	301, 304, 305, 0, 334, 0, 0, 359, 747, 0,
	942, 587, 579, 583, 0, 585, 586, 0, 587, 587,
	-2, 423, 424, 386, 389, 655, 0, 0, 653, 0,
	0, 0, 655, 653, 460, 880, 942, 942, 868, 58,
	0, 565, 566, 570, 568, 569, 561, 57, 0, 248,
	0, 0, 942, 617, 25, 211, 0, 217, 218, 219,
	220, 221, 222, 223, 224, 225, 226, 227, 228, 868,
	942, 118, 119, 560, 560, 560, 0, 560, 0, 0,
	0, 106, 942, 0, -2, 913, 62, 63, 232, 233,
	0, 0, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	0, 0, 0, 0, 0, 459, 0, 464, 0, 0,
	0, 467, 0, 482, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 512, 0, 0, 0, 0,
	0, 354, 460, 489, 355, 686, 688, 690, 670, 671,
	672, 674, 702, 678, 0, 675, 942, 942, 0, 666,
	682, 709, -2, 0, 945, 356, 753, 754, 0, 0,
	942, 799, 453, 803, 804, 805, 385, 811, 812, 814,
	815, 816, 817, 820, 821, 823, 824, 0, 942, 942,
	942, 942, 0, 868, 0, 838, 942, 0, 771, 772,
	788, 789, 790, 791, 0, 0, 297, 0, 0, 0,
	310, 315, 748, 577, 749, 0, 584, 580, 0, 750,
	751, 0, 653, 0, 0, 460, 942, 0, 655, 655,
	653, 460, 19, 53, 0, 0, 877, 869, 870, 873,
	876, 56, 572, 563, -2, 250, 942, 238, 0, 841,
	0, 214, 0, 0, 876, 0, 923, 0, 0, 78,
	-2, 0, 81, 86, 87, 0, 0, 948, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 101,
	102, 103, 0, 0, 0, 0, 0, 0, -2, -2,
	236, 237, 141, 143, 144, 145, 146, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 0, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 0, 0, 0, 0, 0, 490, 0, 465, 470,
	468, 471, 483, 484, 472, 473, 474, 475, 476, 477,
	478, 485, 486, 479, 480, 487, 488, 542, 542, 0,
	0, 460, 529, 489, 528, 676, 942, 703, 679, 0,
	944, 0, 947, 0, 438, 0, 0, 800, 801, 807,
	0, 0, 0, 0, 0, 0, 835, 770, 843, 942,
	0, 354, 0, 0, 306, 307, 309, 0, 0, 0,
	0, 0, 0, 345, 0, 0, 0, 752, 460, 653,
	460, 489, 654, 0, 653, 653, 460, 489, 881, 0,
	942, 942, 942, 872, 880, 59, 942, 573, 23, 0,
	249, 24, 0, 113, 212, 0, 0, 215, 880, 0,
	124, 122, 118, 125, 0, 0, 0, 0, 70, 0,
	594, 596, 597, 598, 630, 0, 632, 0, 0, 0,
	85, 631, 0, 74, 0, 0, 906, 138, 139, 0,
	0, 0, -2, 0, 917, 914, 0, 104, 107, 108,
	109, 110, 111, 0, 230, 235, 0, 840, 0, 142,
	44, 936, 0, 0, 0, 0, 462, 0, 517, 518,
	0, 460, 489, 526, 680, 731, 946, 755, 759, 756,
	942, 758, 760, 942, 762, 942, 764, 942, 766, 942,
	942, 0, 0, 839, 0, 298, 302, 303, 0, 336,
	0, 338, 339, 340, 341, 342, 343, 344, 0, 588,
	0, 0, 581, 489, 460, 16, 12, 656, 460, 460,
	489, 18, 0, 878, 879, 871, 54, 592, 942, 0,
	114, 216, 213, 229, 0, 0, 0, 0, 72, 0,
	646, -2, 0, 0, 0, 68, 69, 0, 0, 0,
	0, 0, 0, 635, 0, 0, 638, 0, 0, 0,
	0, 0, 0, 649, 0, 633, 0, 82, 630, 0,
	83, 0, 0, 75, 0, 77, 127, 0, 0, 942,
	0, 456, 918, 919, 920, 916, 949, 0, 0, 231,
	0, 0, 158, 939, 937, 0, 460, 460, 0, 0,
	466, 0, 489, 527, 0, 0, 0, 0, 0, 792,
	769, 836, 0, 335, 337, 346, 0, 942, 590, 11,
	17, 489, 489, 15, 882, 653, 0, 251, 26, 115,
	0, 120, 121, 942, 123, 942, 0, 126, 0, 0,
	645, 653, 0, 653, 71, 592, 903, 0, 595, 626,
	628, 0, 623, 636, 637, 639, 0, 641, 0, 643,
	644, 599, 600, 601, 0, 0, 0, 0, 634, 0,
	0, 88, 90, 0, 93, 0, 95, 96, 907, 76,
	0, 0, 130, 131, 908, 909, 910, 0, 912, 105,
	112, 0, 238, 46, 0, 938, 489, 489, 45, 491,
	0, 525, 757, 761, 763, 765, 767, 0, 0, 0,
	0, 0, 0, 865, 867, 13, 14, 861, 593, 0,
	0, 0, 0, 895, 0, 0, -2, 0, 0, 868,
	653, 67, 653, 0, 942, 620, 627, 942, 0, 621,
	942, 622, 640, 642, 613, 0, 0, 0, 0, 0,
	618, -2, 80, 0, 97, 0, 91, 0, 94, 128,
	129, 0, 0, 135, 942, 0, 940, 941, 47, 48,
	0, 768, 0, 0, 0, 520, 347, 589, 0, 942,
	863, 0, 116, 0, 0, 124, 60, 0, 895, 883,
	897, 899, 942, 56, 0, 889, -2, 891, 893, 894,
	0, 876, 66, 868, 904, 905, 624, 0, 629, 0,
	0, 0, 0, 632, 0, 89, 98, 0, 92, 132,
	133, 134, 911, 0, 0, 793, 0, 796, 591, 866,
	55, 942, 942, 0, 0, 61, 0, 900, -2, 0,
	0, 0, 73, 65, 876, 0, 0, 603, 605, 606,
	607, 608, 609, 610, 611, 612, 0, 0, 0, 649,
	619, 99, 0, 27, 519, 794, 864, 862, 0, 0,
	898, 0, -2, 0, 890, 892, 64, 625, 602, 0,
	650, 651, 652, 601, 100, 0, 117, 0, 886, 56,
	604, 614, 0, 896, -2, 795,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 403,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 404, 3, 405, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:433
		{
			switch len(yyDollar[1].statements) {
			case 0:
				setParseTree(yylex, nil)
			case 1:
				setParseTree(yylex, yyDollar[1].statements[0])
			default:
				setParseTree(yylex, &MultiStatement{Statements: yyDollar[1].statements})
			}
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:446
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:450
		{
			yyVAL.statements = append([]Statement{yyDollar[1].statement}, yyDollar[3].statements...)
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:454
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:459
		{
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:460
		{
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:469
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:474
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:494
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 13:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:514
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 14:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:535
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 15:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:556
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 16:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:578
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 17:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:594
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 18:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:611
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:631
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:646
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:657
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:669
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:680
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:696
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:710
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:724
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 27:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:737
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:751
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:762
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:767
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:787
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[4].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:808
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:828
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[4].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:849
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:858
		{
			yyVAL.statement = &DDL{
				Action:      CreateSchema,
				IfNotExists: true,
				Schema: &Schema{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:869
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:878
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:888
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:897
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: string(yyDollar[6].bytes),
				},
			}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:908
		{
			tableName := ""
			if !yyDollar[4].tableName.Schema.isEmpty() {
				tableName = yyDollar[4].tableName.Schema.String() + "."
			}
			tableName += yyDollar[4].tableName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Table:  yyDollar[4].tableName,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     tableName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:925
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:944
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    "",
				},
			}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:963
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "INDEX",
					Object:     yyDollar[4].colIdent.String(),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 44:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:976
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 45:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:990
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 46:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1004
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 47:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1024
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 48:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1042
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1060
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1069
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1084
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1092
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 55:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1099
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1105
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1109
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1115
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1119
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 60:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1126
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1138
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1150
		{
			yyVAL.str = InsertStr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1154
		{
			yyVAL.str = ReplaceStr
		}
	case 64:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1160
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1166
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1170
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1174
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1179
		{
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1180
		{
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1184
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1193
		{
			yyVAL.partitions = nil
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1197
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1203
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1207
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1211
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1215
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1221
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1225
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1236
		{
			yyVAL.statement = &Declare{
				Type: declareHandler,
				Handler: &HandlerDefinition{
					Action:     yyDollar[2].str,
					Conditions: yyDollar[5].handlerConditions,
					Statement:  yyDollar[6].statement,
				},
			}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1249
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1253
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1259
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1264
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1268
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1274
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1278
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1284
		{
			yyVAL.handlerConditions = []HandlerCondition{yyDollar[1].handlerCondition}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1288
		{
			yyVAL.handlerConditions = append(yyVAL.handlerConditions, yyDollar[3].handlerCondition)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1294
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionMysqlErrorCode, Value: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1298
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[2].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1302
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[3].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1306
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlwarning}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1310
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionNotFound}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1314
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlexception}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1318
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionName, Value: string(yyDollar[1].colIdent.String())}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1324
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1328
		{
			yyVAL.statement = &BeginEnd{
				Statements:        []Statement{},
				SuppressSemicolon: false,
			}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1335
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1342
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1351
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1358
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1365
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1372
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1380
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1390
		{
			yyVAL.str = ""
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1394
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1398
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1402
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1406
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1412
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1419
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1433
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1437
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1441
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 116:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1448
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 117:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1456
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1466
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1470
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 120:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1477
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1487
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1498
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1503
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1508
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1515
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1519
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1530
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1534
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1540
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1544
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1548
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1554
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1558
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1562
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1566
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1572
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1576
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1582
		{
			yyVAL.str = SessionStr
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1586
		{
			yyVAL.str = GlobalStr
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1659
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1663
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1667
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1671
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1677
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1681
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1685
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1690
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1696
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1700
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1706
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1710
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1724
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1728
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1737
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1753
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1766
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1776
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1781
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1787
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1788
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1791
		{
			yyVAL.exprs = nil
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1792
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1796
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1801
		{
			yyVAL.empty = struct{}{}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1803
		{
			yyVAL.empty = struct{}{}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1806
		{
			yyVAL.bytes = nil
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1810
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1814
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1819
		{
			yyVAL.bytes = nil
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1823
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1827
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1831
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1835
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1839
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1844
		{
			yyVAL.expr = nil
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1848
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1853
		{
			yyVAL.expr = nil
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1857
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1862
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1866
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1871
		{
			yyVAL.bytes = nil
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1875
		{
			yyVAL.bytes = nil
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1881
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1890
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1900
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				Table:  yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 259:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1910
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				Table:    yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1922
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1931
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: yyDollar[5].colIdent.String(),
				},
			}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1941
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1950
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: string(yyDollar[5].bytes),
				},
			}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1962
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1969
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1975
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1979
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1984
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1988
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1992
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1996
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2000
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2004
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2010
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2014
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2019
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2024
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2030
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2041
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2047
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2060
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2065
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2070
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2075
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2081
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2086
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2091
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2096
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2101
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2106
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2111
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2116
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 297:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2121
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 298:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2130
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2140
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2145
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 301:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2150
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 302:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2157
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 303:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2164
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 304:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2172
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2177
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 306:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2182
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 307:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2187
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2193
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 309:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2199
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2206
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2213
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2219
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2225
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2229
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 315:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2233
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2237
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2241
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2247
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2251
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2255
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2259
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2263
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2267
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2271
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2275
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2279
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2283
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2287
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2293
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2299
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2305
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2311
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2315
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2320
		{
			yyVAL.sequence = &Sequence{}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2324
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2329
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2334
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2339
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2344
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2349
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2354
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2359
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2364
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2369
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2374
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2379
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 347:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2384
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2391
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2395
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2399
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2403
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2407
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2411
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2416
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2420
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2425
		{
			yyVAL.bytes = nil
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2453
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), DisplayWidth: yyDollar[2].optVal}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2463
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2475
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2483
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2490
		{
			yyVAL.str = ""
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2494
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2499
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2503
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2511
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2515
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2521
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2540
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2544
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2548
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2552
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2556
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2560
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2564
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2568
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2584
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 404:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2588
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2596
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2600
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2604
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2608
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2612
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2624
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2636
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2656
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2660
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2669
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2674
		{
			yyVAL.str = ""
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2678
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2684
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2692
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2696
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2722
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2727
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2732
		{
			yyVAL.optVal = nil
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2736
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2741
		{
			yyVAL.optVal = nil
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2745
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2749
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2758
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2762
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2766
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2771
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2775
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2780
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2784
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2789
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2793
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2797
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2802
		{
			yyVAL.str = ""
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2806
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2810
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2815
		{
			yyVAL.str = ""
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2819
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2823
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 459:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2829
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2834
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2838
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2842
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2848
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2858
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2862
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2868
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2872
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2877
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2881
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2885
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2889
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2893
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2897
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2901
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2905
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2909
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2913
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2917
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2921
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2932
		{
			yyVAL.str = ""
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2936
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2942
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2946
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2952
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2956
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2962
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2966
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2972
		{
			yyVAL.indexPartition = nil
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2976
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2980
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2986
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2994
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2998
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3002
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3006
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3010
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3014
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3018
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3022
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3026
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3032
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3036
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3042
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3047
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3053
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3057
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3063
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3072
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3076
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3086
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3091
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3098
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 517:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3105
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 518:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3112
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 519:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3121
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 520:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3132
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3143
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3147
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3151
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 525:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3161
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 526:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3171
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 527:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3182
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 528:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 529:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3204
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3222
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3226
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3230
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3236
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3240
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3244
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3248
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3252
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3256
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3262
		{
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3263
		{
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3267
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3271
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3276
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3283
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3287
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3294
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3298
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3304
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3313
		{
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3314
		{
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3318
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3322
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3326
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3332
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3336
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3340
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3345
		{
			setAllowComments(yylex, true)
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3349
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3355
		{
			yyVAL.bytes2 = nil
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3359
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3365
		{
			yyVAL.str = UnionStr
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3369
		{
			yyVAL.str = UnionAllStr
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3373
		{
			yyVAL.str = UnionDistinctStr
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3378
		{
			yyVAL.str = ""
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3382
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3386
		{
			yyVAL.str = SQLCacheStr
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3391
		{
			yyVAL.str = ""
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3395
		{
			yyVAL.str = DistinctStr
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3400
		{
			yyVAL.str = ""
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3404
		{
			yyVAL.str = StraightJoinHint
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3409
		{
			yyVAL.selectExprs = nil
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3413
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3419
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3423
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3429
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3446
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3450
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3454
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3461
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3466
		{
			yyVAL.overExpr = nil
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3470
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 589:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3474
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3478
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 591:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3482
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3487
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3491
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3497
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3501
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3511
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3515
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3519
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3524
		{
			yyVAL.strs = []string{}
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3528
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3534
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3544
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3548
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3552
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3556
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3560
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3564
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3568
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3572
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 614:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3588
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3593
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3597
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3603
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3607
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3620
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3624
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3628
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3632
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3638
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3640
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3644
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3646
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3650
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3652
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3655
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3657
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3660
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3664
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3668
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3674
		{
			yyVAL.str = JoinStr
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3678
		{
			yyVAL.str = JoinStr
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3682
		{
			yyVAL.str = JoinStr
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3688
		{
			yyVAL.str = StraightJoinStr
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3694
		{
			yyVAL.str = LeftJoinStr
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3698
		{
			yyVAL.str = LeftJoinStr
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3702
		{
			yyVAL.str = RightJoinStr
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3706
		{
			yyVAL.str = RightJoinStr
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3712
		{
			yyVAL.str = NaturalJoinStr
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3716
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3726
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3730
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3736
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3740
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3745
		{
			yyVAL.indexHints = nil
		}
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3749
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3753
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3757
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3762
		{
			yyVAL.expr = nil
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3766
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.columns = nil
		}
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3775
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3781
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3785
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3789
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3793
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3797
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3801
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3805
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3809
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3815
		{
			yyVAL.str = ""
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3819
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3825
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3829
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3835
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3839
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3843
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3847
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3851
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3855
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3859
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 676:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3863
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3867
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3871
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3875
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 680:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3879
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3883
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3888
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3892
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3896
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3902
		{
			yyVAL.str = IsNullStr
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3906
		{
			yyVAL.str = IsNotNullStr
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3910
		{
			yyVAL.str = IsTrueStr
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3914
		{
			yyVAL.str = IsNotTrueStr
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3918
		{
			yyVAL.str = IsFalseStr
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3922
		{
			yyVAL.str = IsNotFalseStr
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3928
		{
			yyVAL.str = EqualStr
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3932
		{
			yyVAL.str = LessThanStr
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3936
		{
			yyVAL.str = GreaterThanStr
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3940
		{
			yyVAL.str = LessEqualStr
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3944
		{
			yyVAL.str = GreaterEqualStr
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3948
		{
			yyVAL.str = NotEqualStr
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3952
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3956
		{
			yyVAL.str = PosixRegexStr
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3960
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3964
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3968
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3973
		{
			yyVAL.expr = nil
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3977
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3983
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3987
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3991
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3997
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4003
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4007
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4013
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4017
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4021
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4025
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4029
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4033
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4037
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4045
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4049
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4053
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4069
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4073
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4077
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4081
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4085
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4089
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4093
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 731:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4097
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4101
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4105
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4109
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4117
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4131
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4139
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4147
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4155
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4167
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 748:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 749:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 750:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 752:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4207
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 755:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 756:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4220
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 757:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4224
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 758:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4228
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 759:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4232
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 760:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4236
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 761:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4240
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 762:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4244
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 763:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4248
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 764:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4252
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 765:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4256
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 766:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4260
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 767:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4264
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 768:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4268
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 769:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4272
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 770:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4276
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4280
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 772:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4285
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4289
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4293
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4297
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4308
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4312
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4316
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4320
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4324
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4329
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4334
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4339
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4344
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4348
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4362
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4366
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 790:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4370
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 791:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4374
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4380
		{
			yyVAL.str = ""
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4384
		{
			yyVAL.str = BooleanModeStr
		}
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4388
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 795:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4392
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4396
		{
			yyVAL.str = QueryExpansionStr
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4402
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4406
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4412
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4416
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4420
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4424
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4428
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4432
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4438
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4444
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4448
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.convertType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4454
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4458
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4462
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4466
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4470
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4474
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4478
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4482
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4486
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4490
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4494
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4498
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4502
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4506
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4510
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4514
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4518
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4524
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4528
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4532
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4536
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4540
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4544
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4548
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4552
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4557
		{
			yyVAL.expr = nil
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4561
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4566
		{
			yyVAL.str = string("")
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4570
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4576
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4580
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 839:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4586
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4591
		{
			yyVAL.empty = struct{}{}
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4593
		{
			yyVAL.empty = struct{}{}
		}
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4596
		{
			yyVAL.expr = nil
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4600
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4606
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4610
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4614
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 847:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4618
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4624
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4630
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4634
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4639
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4644
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4648
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4652
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4656
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4660
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4664
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4668
		{
			yyVAL.expr = &NullVal{}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4674
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4678
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4683
		{
			yyVAL.exprs = nil
		}
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4687
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4692
		{
			yyVAL.expr = nil
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4696
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4702
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4706
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4712
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4717
		{
			yyVAL.orderBy = nil
		}
	case 869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4721
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4727
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4731
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4737
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4742
		{
			yyVAL.str = AscScr
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4746
		{
			yyVAL.str = AscScr
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4750
		{
			yyVAL.str = DescScr
		}
	case 876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4755
		{
			yyVAL.limit = nil
		}
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4759
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4763
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4767
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4772
		{
			yyVAL.str = ""
		}
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4776
		{
			yyVAL.str = ForUpdateStr
		}
	case 882:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4780
		{
			yyVAL.str = ShareModeStr
		}
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4793
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4797
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4801
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 886:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4806
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 887:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4810
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 888:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4814
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4821
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4825
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4831
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4835
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4839
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4843
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4848
		{
			yyVAL.updateExprs = nil
		}
	case 896:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4852
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4858
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 898:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4862
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4868
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4872
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4878
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4884
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4894
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4898
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4904
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4910
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4914
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4920
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4924
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4928
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 911:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4933
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4937
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4943
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4949
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4956
		{
			yyVAL.bytes = []byte("charset")
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4963
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4967
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4971
		{
			yyVAL.expr = &Default{}
		}
	case 921:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4976
		{
			yyVAL.empty = struct{}{}
		}
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4978
		{
			yyVAL.empty = struct{}{}
		}
	case 923:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4981
		{
			yyVAL.str = ""
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4983
		{
			yyVAL.str = IgnoreStr
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4987
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4994
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4998
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5002
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5006
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5012
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5016
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5021
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5028
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 936:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5034
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5038
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 938:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5042
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 939:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5048
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 940:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5052
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5056
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 942:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5062
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5066
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 944:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5073
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5080
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5084
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 947:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5091
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5097
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 949:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5101
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5278
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5287
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
