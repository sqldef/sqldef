// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex any, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex any, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex any, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex any) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex any) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex any) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	statements               []Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
	handlerCondition         HandlerCondition
	handlerConditions        []HandlerCondition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const GRANT = 57457
const REVOKE = 57458
const SCHEMA = 57459
const TABLE = 57460
const INDEX = 57461
const MATERIALIZED = 57462
const VIEW = 57463
const TO = 57464
const IGNORE = 57465
const IF = 57466
const PRIMARY = 57467
const COLUMN = 57468
const CONSTRAINT = 57469
const REFERENCES = 57470
const SPATIAL = 57471
const FULLTEXT = 57472
const FOREIGN = 57473
const KEY_BLOCK_SIZE = 57474
const POLICY = 57475
const WHILE = 57476
const EXTENSION = 57477
const EXCLUDE = 57478
const UNIQUE = 57479
const KEY = 57480
const SHOW = 57481
const DESCRIBE = 57482
const EXPLAIN = 57483
const DATE = 57484
const ESCAPE = 57485
const REPAIR = 57486
const OPTIMIZE = 57487
const TRUNCATE = 57488
const EXEC = 57489
const EXECUTE = 57490
const MAXVALUE = 57491
const PARTITION = 57492
const REORGANIZE = 57493
const LESS = 57494
const THAN = 57495
const PROCEDURE = 57496
const TRIGGER = 57497
const TYPE = 57498
const RETURN = 57499
const STATUS = 57500
const VARIABLES = 57501
const RESTRICT = 57502
const CASCADE = 57503
const NO = 57504
const ACTION = 57505
const PERMISSIVE = 57506
const RESTRICTIVE = 57507
const PUBLIC = 57508
const CURRENT_USER = 57509
const SESSION_USER = 57510
const PAD_INDEX = 57511
const FILLFACTOR = 57512
const IGNORE_DUP_KEY = 57513
const STATISTICS_NORECOMPUTE = 57514
const STATISTICS_INCREMENTAL = 57515
const ALLOW_ROW_LOCKS = 57516
const ALLOW_PAGE_LOCKS = 57517
const DISTANCE = 57518
const M = 57519
const EUCLIDEAN = 57520
const COSINE = 57521
const BEFORE = 57522
const AFTER = 57523
const EACH = 57524
const ROW = 57525
const SCROLL = 57526
const CURSOR = 57527
const OPEN = 57528
const CLOSE = 57529
const FETCH = 57530
const PRIOR = 57531
const FIRST = 57532
const LAST = 57533
const DEALLOCATE = 57534
const INSTEAD = 57535
const OF = 57536
const OUTPUT = 57537
const HANDLER = 57538
const CONTINUE = 57539
const EXIT = 57540
const SQLEXCEPTION = 57541
const SQLWARNING = 57542
const SQLSTATE = 57543
const FOUND = 57544
const DEFERRABLE = 57545
const INITIALLY = 57546
const IMMEDIATE = 57547
const DEFERRED = 57548
const CONCURRENTLY = 57549
const ASYNC = 57550
const SQL = 57551
const SECURITY = 57552
const BEGIN = 57553
const START = 57554
const TRANSACTION = 57555
const COMMIT = 57556
const ROLLBACK = 57557
const BIT = 57558
const TINYINT = 57559
const SMALLINT = 57560
const SMALLSERIAL = 57561
const MEDIUMINT = 57562
const INT = 57563
const INTEGER = 57564
const SERIAL = 57565
const BIGINT = 57566
const BIGSERIAL = 57567
const INTNUM = 57568
const REAL = 57569
const DOUBLE = 57570
const PRECISION = 57571
const FLOAT_TYPE = 57572
const DECIMAL = 57573
const NUMERIC = 57574
const SMALLMONEY = 57575
const MONEY = 57576
const TIME = 57577
const TIMESTAMP = 57578
const DATETIME = 57579
const YEAR = 57580
const DATETIMEOFFSET = 57581
const DATETIME2 = 57582
const SMALLDATETIME = 57583
const CHAR = 57584
const VARCHAR = 57585
const VARYING = 57586
const BOOL = 57587
const CHARACTER = 57588
const VARBINARY = 57589
const NCHAR = 57590
const NVARCHAR = 57591
const NTEXT = 57592
const UUID = 57593
const TEXT = 57594
const TINYTEXT = 57595
const MEDIUMTEXT = 57596
const LONGTEXT = 57597
const CITEXT = 57598
const BLOB = 57599
const TINYBLOB = 57600
const MEDIUMBLOB = 57601
const LONGBLOB = 57602
const JSON = 57603
const JSONB = 57604
const ENUM = 57605
const GEOMETRY = 57606
const POINT = 57607
const LINESTRING = 57608
const POLYGON = 57609
const GEOMETRYCOLLECTION = 57610
const MULTIPOINT = 57611
const MULTILINESTRING = 57612
const MULTIPOLYGON = 57613
const VECTOR = 57614
const VARIADIC = 57615
const ARRAY = 57616
const NOW = 57617
const GETDATE = 57618
const BPCHAR = 57619
const TEXT_PATTERN_OPS = 57620
const NULLX = 57621
const AUTO_INCREMENT = 57622
const APPROXNUM = 57623
const SIGNED = 57624
const UNSIGNED = 57625
const ZEROFILL = 57626
const ZONE = 57627
const AUTOINCREMENT = 57628
const DATABASES = 57629
const TABLES = 57630
const VSCHEMA_TABLES = 57631
const EXTENDED = 57632
const FULL = 57633
const PROCESSLIST = 57634
const NAMES = 57635
const CHARSET = 57636
const GLOBAL = 57637
const SESSION = 57638
const ISOLATION = 57639
const LEVEL = 57640
const READ = 57641
const WRITE = 57642
const ONLY = 57643
const REPEATABLE = 57644
const COMMITTED = 57645
const UNCOMMITTED = 57646
const SERIALIZABLE = 57647
const NEW = 57648
const CONCAT_NULL_YIELDS_NULL = 57649
const CURSOR_CLOSE_ON_COMMIT = 57650
const QUOTED_IDENTIFIER = 57651
const ARITHABORT = 57652
const FMTONLY = 57653
const NOCOUNT = 57654
const NOEXEC = 57655
const NUMERIC_ROUNDABORT = 57656
const ANSI_DEFAULTS = 57657
const ANSI_NULL_DFLT_OFF = 57658
const ANSI_NULL_DFLT_ON = 57659
const ANSI_NULLS = 57660
const ANSI_PADDING = 57661
const ANSI_WARNINGS = 57662
const FORCEPLAN = 57663
const SHOWPLAN_ALL = 57664
const SHOWPLAN_TEXT = 57665
const SHOWPLAN_XML = 57666
const IMPLICIT_TRANSACTIONS = 57667
const REMOTE_PROC_TRANSACTIONS = 57668
const XACT_ABORT = 57669
const CURRENT_TIMESTAMP = 57670
const DATABASE = 57671
const CURRENT_DATE = 57672
const CURRENT_TIME = 57673
const LOCALTIME = 57674
const LOCALTIMESTAMP = 57675
const UTC_DATE = 57676
const UTC_TIME = 57677
const UTC_TIMESTAMP = 57678
const REPLACE = 57679
const CONVERT = 57680
const CAST = 57681
const SUBSTR = 57682
const SUBSTRING = 57683
const GROUP_CONCAT = 57684
const SEPARATOR = 57685
const INHERIT = 57686
const LEAD = 57687
const LAG = 57688
const MATCH = 57689
const AGAINST = 57690
const BOOLEAN = 57691
const LANGUAGE = 57692
const WITH = 57693
const WITHOUT = 57694
const PARSER = 57695
const QUERY = 57696
const EXPANSION = 57697
const UNUSED = 57698
const VIRTUAL = 57699
const STORED = 57700
const GENERATED = 57701
const ALWAYS = 57702
const IDENTITY = 57703
const SEQUENCE = 57704
const INCREMENT = 57705
const MINVALUE = 57706
const CACHE = 57707
const CYCLE = 57708
const OWNED = 57709
const NONE = 57710
const CLUSTERED = 57711
const NONCLUSTERED = 57712
const REPLICATION = 57713
const COLUMNSTORE = 57714
const INCLUDE = 57715
const HOLDLOCK = 57716
const NOLOCK = 57717
const NOWAIT = 57718
const PAGLOCK = 57719
const ROWLOCK = 57720
const TABLOCK = 57721
const UPDLOCK = 57722
const READUNCOMMITTED = 57723
const DEFINER = 57724
const INVOKER = 57725
const TYPECAST = 57726
const CHECK = 57727
const OVER = 57728

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"GRANT",
	"REVOKE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"EXTENSION",
	"EXCLUDE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"HANDLER",
	"CONTINUE",
	"EXIT",
	"SQLEXCEPTION",
	"SQLWARNING",
	"SQLSTATE",
	"FOUND",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"ASYNC",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 9,
	136, 541,
	-2, 255,
	-1, 67,
	123, 938,
	-2, 932,
	-1, 68,
	123, 939,
	-2, 852,
	-1, 326,
	123, 942,
	-2, 936,
	-1, 327,
	123, 939,
	-2, 937,
	-1, 496,
	61, 510,
	-2, 507,
	-1, 526,
	123, 940,
	-2, 363,
	-1, 664,
	123, 940,
	-2, 363,
	-1, 685,
	291, 949,
	-2, 840,
	-1, 739,
	291, 949,
	-2, 581,
	-1, 775,
	5, 57,
	-2, 25,
	-1, 781,
	5, 57,
	-2, 27,
	-1, 929,
	291, 949,
	-2, 581,
	-1, 1103,
	291, 949,
	-2, 445,
	-1, 1171,
	291, 949,
	-2, 581,
	-1, 1235,
	291, 949,
	-2, 840,
	-1, 1357,
	5, 58,
	-2, 714,
	-1, 1439,
	5, 57,
	-2, 26,
	-1, 1455,
	202, 85,
	-2, 637,
	-1, 1493,
	291, 949,
	-2, 235,
	-1, 1494,
	291, 949,
	-2, 235,
	-1, 1700,
	90, 934,
	-2, 922,
	-1, 1801,
	57, 71,
	59, 71,
	-2, 73,
	-1, 1987,
	5, 57,
	-2, 891,
	-1, 2012,
	5, 57,
	-2, 80,
	-1, 2057,
	59, 1083,
	60, 1083,
	-2, 567,
	-1, 2099,
	5, 58,
	-2, 892,
	-1, 2133,
	5, 57,
	-2, 894,
	-1, 2155,
	5, 58,
	-2, 895,
}

const yyPrivate = 57344

const yyLast = 12319

var yyAct = [...]int16{
	666, 1906, 647, 2005, 2108, 2050, 2056, 676, 1924, 1823,
	1974, 36, 36, 484, 1186, 2051, 876, 788, 47, 1907,
	2047, 35, 1932, 1208, 63, 64, 2010, 65, 76, 78,
	1660, 1997, 1836, 38, 1694, 1886, 1697, 1835, 1811, 1202,
	1899, 1223, 91, 93, 1462, 1008, 1821, 767, 108, 108,
	108, 108, 1691, 102, 1457, 1668, 1222, 1209, 180, 184,
	185, 1678, 1675, 561, 1687, 1433, 1264, 1428, 1359, 996,
	1679, 39, 1042, 1712, 1023, 293, 815, 1350, 650, 956,
	1575, 488, 1102, 1078, 722, 1306, 1033, 1133, 903, 207,
	1566, 1145, 295, 297, 278, 1055, 262, 637, 217, 218,
	216, 47, 645, 104, 919, 1205, 621, 728, 497, 1130,
	492, 313, 646, 985, 156, 156, 156, 156, 875, 225,
	523, 314, 525, 1220, 190, 81, 245, 658, 532, 220,
	1179, 1599, 549, 1096, 953, 15, 264, 1410, 1788, 260,
	981, 766, 1267, 1164, 845, 855, 911, 855, 322, 729,
	1409, 37, 309, 310, 629, 1180, 1266, 495, 1302, 83,
	498, 499, 1969, 821, 1206, 628, 630, 844, 843, 853,
	854, 846, 847, 848, 849, 850, 851, 852, 845, 713,
	1265, 855, 521, 302, 303, 1766, 186, 938, 188, 710,
	160, 160, 160, 160, 84, 85, 1622, 1623, 323, 108,
	2153, 200, 1152, 1153, 159, 159, 159, 159, 2156, 2088,
	1594, 326, 2035, 462, 474, 475, 1311, 1310, 723, 2006,
	323, 280, 281, 282, 283, 2146, 222, 1728, 157, 157,
	157, 157, 496, 491, 321, 844, 843, 853, 854, 846,
	847, 848, 849, 850, 851, 852, 845, 511, 1657, 855,
	263, 242, 460, 573, 574, 1353, 482, 1331, 2087, 1613,
	1339, 543, 2034, 724, 1752, 156, 50, 846, 847, 848,
	849, 850, 851, 852, 845, 810, 86, 855, 1420, 540,
	2023, 2081, 2082, 2022, 2080, 839, 2024, 1735, 842, 1943,
	1944, 37, 1942, 49, 857, 858, 859, 860, 861, 862,
	863, 581, 840, 841, 838, 864, 865, 866, 867, 844,
	843, 853, 854, 846, 847, 848, 849, 850, 851, 852,
	845, 597, 968, 855, 848, 849, 850, 851, 852, 845,
	551, 537, 855, 539, 538, 778, 515, 1837, 967, 1838,
	266, 160, 975, 269, 565, 566, 567, 568, 461, 890,
	279, 1597, 572, 1606, 778, 159, 1237, 1226, 1225, 1142,
	569, 758, 271, 553, 757, 296, 241, 556, 1227, 559,
	560, 578, 233, 534, 232, 239, 236, 237, 240, 157,
	53, 1228, 1374, 1372, 234, 242, 60, 501, 536, 1952,
	73, 1443, 70, 268, 187, 1955, 274, 2028, 2027, 276,
	1765, 1956, 1767, 54, 2019, 55, 2109, 2110, 2111, 2112,
	2113, 2114, 2115, 2116, 631, 1690, 286, 287, 288, 289,
	290, 498, 499, 833, 1953, 595, 181, 856, 37, 856,
	1970, 37, 292, 318, 1740, 835, 2122, 1829, 1442, 1855,
	1851, 1201, 1576, 1577, 596, 726, 1689, 1030, 67, 1043,
	526, 527, 528, 530, 832, 831, 831, 784, 785, 533,
	531, 541, 542, 856, 1900, 600, 601, 1581, 2130, 36,
	1560, 36, 833, 833, 61, 1024, 1025, 1749, 1598, 53,
	827, 323, 498, 499, 632, 824, 1303, 1304, 622, 1221,
	604, 856, 606, 514, 513, 624, 1005, 529, 37, 1233,
	508, 493, 54, 982, 55, 1003, 1864, 939, 1618, 712,
	715, 624, 1239, 1240, 67, 798, 70, 618, 835, 238,
	37, 1758, 1235, 1305, 1933, 543, 608, 832, 831, 1311,
	240, 856, 56, 41, 799, 620, 610, 53, 834, 2147,
	1936, 37, 505, 520, 2043, 833, 555, 191, 835, 42,
	37, 1229, 1230, 1232, 73, 279, 70, 1231, 221, 856,
	54, 506, 55, 844, 843, 853, 854, 846, 847, 848,
	849, 850, 851, 852, 845, 2033, 1447, 855, 1854, 812,
	812, 1458, 1459, 769, 1896, 801, 82, 834, 834, 240,
	1488, 609, 623, 989, 182, 183, 789, 1576, 1577, 323,
	794, 37, 633, 53, 36, 856, 36, 40, 623, 800,
	494, 619, 502, 503, 856, 603, 709, 743, 323, 711,
	746, 92, 1688, 749, 750, 795, 54, 796, 55, 51,
	52, 56, 235, 1165, 1826, 793, 622, 534, 714, 732,
	575, 716, 468, 53, 790, 725, 571, 727, 241, 589,
	745, 62, 536, 2009, 805, 1770, 96, 98, 2008, 778,
	834, 1237, 1226, 1225, 97, 2007, 54, 242, 55, 37,
	73, 1167, 70, 1227, 59, 1937, 1935, 1934, 58, 535,
	540, 77, 37, 829, 95, 57, 1228, 832, 831, 56,
	844, 843, 853, 854, 846, 847, 848, 849, 850, 851,
	852, 845, 1238, 820, 855, 833, 90, 775, 791, 781,
	768, 75, 776, 611, 776, 780, 787, 504, 471, 789,
	870, 2102, 792, 818, 1972, 192, 193, 1840, 51, 52,
	108, 802, 537, 1634, 539, 538, 936, 1168, 194, 825,
	894, 1951, 874, 323, 1760, 1351, 37, 893, 80, 545,
	544, 742, 2123, 879, 880, 56, 1489, 1490, 1491, 53,
	1624, 598, 94, 267, 769, 972, 924, 199, 776, 835,
	197, 752, 891, 769, 789, 622, 1824, 1925, 1927, 962,
	563, 562, 54, 948, 55, 479, 51, 52, 832, 831,
	723, 979, 241, 723, 1221, 56, 156, 934, 1002, 1647,
	644, 478, 1004, 925, 1233, 477, 833, 2025, 46, 963,
	622, 242, 1995, 734, 736, 545, 544, 1239, 1240, 932,
	834, 1839, 980, 1034, 1035, 1325, 79, 1235, 712, 622,
	753, 955, 960, 961, 1324, 724, 832, 831, 724, 534,
	913, 914, 915, 916, 917, 918, 1056, 943, 1364, 964,
	1363, 966, 51, 52, 833, 1323, 1229, 1230, 1232, 856,
	1322, 1321, 1231, 1926, 34, 1320, 1628, 816, 817, 819,
	832, 831, 160, 217, 1134, 1084, 1040, 1391, 1876, 1630,
	1093, 1093, 1319, 1318, 1317, 1316, 159, 1314, 833, 1095,
	1795, 768, 51, 52, 323, 323, 1796, 1027, 987, 813,
	768, 1615, 1031, 776, 999, 971, 217, 326, 1135, 223,
	157, 56, 1649, 1382, 978, 1352, 1022, 1057, 1203, 27,
	29, 834, 22, 924, 1134, 490, 272, 1032, 204, 1625,
	1097, 1098, 202, 1036, 36, 23, 201, 28, 1039, 32,
	844, 843, 853, 854, 846, 847, 848, 849, 850, 851,
	852, 845, 490, 1648, 855, 1148, 14, 24, 25, 1166,
	925, 1082, 196, 1567, 1116, 1029, 1704, 832, 831, 834,
	510, 614, 1028, 832, 831, 874, 1438, 769, 769, 1127,
	1128, 615, 1091, 1094, 1568, 833, 856, 1099, 1100, 1567,
	36, 833, 489, 1129, 1764, 776, 1090, 490, 1204, 730,
	731, 776, 1243, 834, 501, 1844, 776, 1238, 51, 52,
	1568, 1200, 9, 12, 13, 1058, 2079, 490, 10, 11,
	1143, 951, 1146, 1147, 509, 1156, 554, 1578, 1172, 558,
	1173, 832, 831, 557, 1745, 37, 500, 1843, 622, 1617,
	1109, 1569, 1747, 835, 1062, 1158, 1160, 1565, 275, 833,
	1403, 277, 1308, 1079, 1107, 1080, 554, 1897, 1060, 1061,
	1059, 1340, 1341, 1342, 1144, 970, 969, 1056, 941, 832,
	831, 1047, 1049, 1050, 20, 835, 920, 579, 1108, 1048,
	1626, 1627, 1629, 1631, 1632, 1334, 577, 833, 844, 843,
	853, 854, 846, 847, 848, 849, 850, 851, 852, 845,
	834, 1326, 855, 950, 768, 768, 834, 1190, 554, 576,
	548, 2018, 37, 1872, 1167, 922, 1360, 892, 1181, 1182,
	844, 843, 853, 854, 846, 847, 848, 849, 850, 851,
	852, 845, 501, 2017, 855, 1315, 965, 892, 1057, 844,
	843, 853, 854, 846, 847, 848, 849, 850, 851, 852,
	845, 616, 37, 855, 602, 1346, 37, 613, 476, 26,
	570, 552, 516, 982, 834, 501, 1166, 37, 37, 323,
	304, 30, 31, 1312, 33, 37, 997, 835, 769, 622,
	2140, 2139, 326, 1083, 1370, 997, 2138, 88, 2125, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 751,
	891, 1369, 834, 1371, 708, 1097, 707, 2040, 835, 1081,
	923, 2075, 835, 2101, 835, 88, 2036, 835, 115, 921,
	1390, 706, 1388, 1401, 927, 926, 1419, 705, 1455, 634,
	1484, 1485, 1486, 809, 1959, 1493, 856, 1808, 835, 809,
	1857, 1408, 809, 1856, 1243, 1243, 1243, 1243, 1243, 1243,
	1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
	1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
	1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
	1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
	1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
	1243, 1243, 622, 622, 1437, 768, 1416, 1417, 1561, 1411,
	1436, 507, 1564, 1448, 1425, 776, 717, 1413, 1439, 1418,
	1414, 1415, 116, 776, 1495, 778, 1805, 997, 1777, 1717,
	1435, 1584, 1585, 1034, 622, 1887, 733, 36, 1451, 1452,
	1453, 1903, 1460, 1804, 739, 740, 741, 88, 1732, 1556,
	1557, 1637, 1985, 809, 1730, 1421, 1563, 1986, 1590, 1330,
	1729, 1449, 1725, 1724, 809, 1719, 1026, 809, 1718, 1497,
	1446, 1441, 1806, 88, 1804, 809, 1638, 501, 982, 1366,
	1367, 1587, 1368, 1994, 856, 832, 831, 809, 1588, 779,
	1373, 779, 1375, 1376, 1377, 1161, 835, 1378, 1379, 778,
	1380, 1381, 1808, 833, 1582, 1583, 1580, 1424, 1589, 1570,
	1571, 1572, 1573, 1574, 88, 1399, 856, 809, 1337, 1586,
	1330, 1329, 1161, 789, 1592, 1593, 809, 1185, 997, 1184,
	1116, 2132, 826, 997, 1151, 856, 1088, 835, 809, 1041,
	1641, 869, 871, 872, 873, 877, 1601, 1607, 1603, 1116,
	1652, 501, 882, 882, 882, 882, 882, 882, 882, 809,
	808, 323, 1605, 1426, 1666, 1608, 1423, 739, 1600, 762,
	761, 755, 756, 1887, 1671, 755, 754, 1406, 895, 896,
	897, 898, 899, 900, 901, 902, 1405, 905, 1705, 907,
	908, 909, 910, 912, 912, 912, 912, 912, 912, 912,
	1677, 928, 929, 930, 931, 1807, 1109, 1670, 1669, 1651,
	1713, 1713, 100, 99, 937, 1183, 2048, 1386, 834, 1994,
	1107, 1161, 998, 1673, 1241, 1109, 1384, 594, 1994, 1614,
	1176, 1808, 1682, 832, 831, 1175, 1174, 1157, 1338, 1107,
	974, 952, 945, 942, 1108, 759, 748, 747, 1659, 744,
	2097, 833, 1703, 1663, 1642, 1643, 594, 778, 593, 622,
	622, 594, 1088, 1108, 89, 1385, 1715, 88, 1714, 1808,
	739, 1743, 835, 87, 1383, 88, 88, 1941, 1832, 68,
	779, 853, 854, 846, 847, 848, 849, 850, 851, 852,
	845, 1685, 1650, 855, 1161, 1365, 997, 48, 809, 940,
	823, 822, 764, 763, 501, 74, 1720, 1721, 1661, 501,
	1662, 760, 2070, 1446, 2068, 2031, 1873, 844, 843, 853,
	854, 846, 847, 848, 849, 850, 851, 852, 845, 1998,
	1999, 855, 269, 1722, 294, 323, 1559, 1558, 882, 882,
	1422, 882, 882, 882, 882, 882, 882, 882, 882, 882,
	882, 882, 882, 882, 882, 882, 298, 1710, 1336, 1333,
	1332, 74, 1301, 1178, 1726, 1727, 834, 74, 1736, 74,
	74, 793, 779, 1177, 1155, 1037, 74, 1733, 877, 1001,
	48, 977, 1427, 877, 976, 933, 1828, 828, 108, 774,
	773, 772, 1755, 323, 738, 737, 1636, 1756, 1757, 735,
	1842, 718, 635, 1797, 1644, 582, 522, 518, 487, 291,
	1759, 1761, 1762, 1763, 299, 300, 1785, 285, 1243, 284,
	1786, 273, 17, 622, 1859, 1776, 599, 2048, 1307, 1861,
	2001, 1781, 1402, 765, 1793, 1149, 612, 1802, 584, 583,
	1827, 1830, 1848, 306, 305, 1833, 1787, 1820, 212, 1846,
	195, 189, 43, 1918, 156, 1850, 1655, 2004, 1919, 1916,
	2003, 74, 1682, 1171, 1917, 1915, 74, 1914, 74, 74,
	1858, 1860, 2126, 1794, 1771, 74, 2086, 327, 1885, 74,
	74, 1782, 1826, 906, 1191, 74, 486, 1920, 74, 1817,
	1818, 74, 74, 1845, 1813, 1816, 1817, 1818, 1814, 485,
	1815, 1819, 1195, 1196, 1998, 1999, 564, 776, 217, 721,
	1908, 1429, 2095, 1847, 466, 958, 465, 1863, 73, 1671,
	70, 674, 1024, 1025, 1446, 1790, 1430, 464, 1446, 1662,
	160, 320, 1938, 323, 1591, 214, 74, 1661, 1895, 213,
	74, 323, 1902, 1874, 159, 1875, 69, 72, 36, 1689,
	1904, 1893, 1892, 882, 882, 882, 1199, 720, 1921, 1880,
	882, 882, 882, 882, 592, 590, 1884, 1939, 157, 1950,
	1909, 588, 1940, 1912, 36, 856, 1661, 1948, 1366, 74,
	1910, 1911, 1682, 1913, 74, 74, 74, 1682, 1682, 1682,
	1682, 1682, 198, 1192, 1131, 1971, 1193, 1930, 1171, 1831,
	1716, 1682, 101, 72, 882, 1949, 1136, 53, 995, 72,
	783, 72, 72, 856, 627, 1187, 1774, 1639, 72, 69,
	2093, 1778, 1779, 1645, 991, 1878, 992, 993, 994, 2011,
	54, 1768, 55, 1188, 1979, 982, 2092, 2042, 1421, 990,
	2, 1090, 1993, 1709, 2002, 1708, 776, 1707, 1961, 1706,
	1991, 177, 178, 179, 1890, 605, 44, 1621, 1620, 1446,
	626, 625, 1790, 315, 316, 317, 1682, 470, 1976, 1977,
	1328, 2148, 1646, 323, 2020, 1327, 512, 984, 986, 1803,
	797, 1000, 1682, 2026, 1, 1461, 217, 2049, 1908, 2058,
	2011, 19, 779, 18, 2052, 217, 1973, 1908, 308, 1358,
	779, 889, 2059, 72, 662, 1954, 1671, 1671, 72, 2037,
	72, 72, 1853, 1790, 2065, 1938, 2061, 72, 1987, 328,
	648, 328, 72, 776, 2107, 2013, 1931, 72, 1456, 1686,
	72, 1454, 36, 72, 72, 1494, 1487, 2076, 2045, 2046,
	1670, 1669, 1579, 2029, 2030, 547, 247, 1404, 519, 2012,
	21, 2090, 1656, 2085, 776, 1440, 1662, 782, 591, 56,
	485, 1562, 1890, 1006, 811, 230, 219, 804, 480, 789,
	2096, 45, 789, 789, 789, 16, 2121, 2104, 72, 1313,
	231, 229, 546, 228, 2120, 1731, 2106, 2044, 227, 2117,
	2118, 2119, 226, 224, 550, 265, 2015, 778, 270, 1237,
	1226, 1225, 2058, 2136, 74, 2052, 112, 2054, 2135, 114,
	2128, 1227, 776, 2131, 2039, 2059, 113, 1661, 111, 110,
	2137, 72, 2078, 73, 1228, 70, 72, 72, 72, 2144,
	107, 2062, 105, 1773, 106, 1775, 103, 1692, 2149, 1841,
	2052, 1780, 607, 1163, 868, 2151, 2021, 830, 2152, 217,
	2154, 1908, 882, 882, 1699, 2055, 51, 52, 1432, 2091,
	2041, 1389, 74, 74, 74, 1978, 1132, 649, 1813, 1816,
	1817, 1818, 1814, 74, 1815, 1819, 1046, 661, 485, 1791,
	660, 1990, 659, 1992, 882, 882, 882, 882, 1984, 837,
	1681, 1790, 74, 1798, 1674, 1812, 1799, 485, 1810, 1809,
	2000, 1996, 1680, 1751, 1968, 2105, 1194, 1654, 1234, 1446,
	1224, 1633, 53, 501, 983, 1197, 73, 8, 70, 2133,
	1236, 1219, 7, 6, 776, 5, 4, 1862, 73, 1218,
	70, 1217, 1221, 1216, 1215, 54, 67, 55, 70, 1213,
	1214, 1211, 1233, 1446, 73, 1212, 70, 1210, 1189, 1890,
	777, 3, 0, 2150, 1683, 1239, 1240, 0, 776, 1662,
	0, 0, 0, 0, 0, 1235, 0, 0, 0, 0,
	2063, 1881, 2064, 0, 0, 1882, 1883, 0, 0, 0,
	0, 0, 0, 778, 0, 1237, 1226, 1225, 1662, 73,
	0, 70, 0, 0, 1229, 1230, 1232, 1227, 0, 0,
	1231, 1684, 0, 0, 0, 53, 0, 0, 0, 0,
	1228, 0, 0, 0, 0, 639, 636, 53, 0, 1447,
	0, 0, 485, 0, 0, 53, 0, 71, 54, 0,
	55, 0, 0, 53, 719, 73, 0, 70, 0, 0,
	54, 0, 55, 74, 0, 74, 546, 0, 54, 0,
	55, 0, 74, 1957, 1958, 0, 54, 0, 55, 0,
	74, 0, 1723, 208, 56, 1665, 0, 0, 0, 0,
	37, 667, 1092, 665, 669, 670, 671, 672, 53, 257,
	211, 668, 673, 203, 0, 260, 261, 0, 0, 206,
	0, 209, 210, 0, 0, 882, 0, 0, 215, 0,
	0, 54, 0, 55, 546, 72, 72, 0, 0, 205,
	248, 0, 0, 0, 1750, 72, 0, 0, 1221, 0,
	0, 0, 0, 0, 53, 255, 0, 243, 1233, 0,
	0, 0, 0, 0, 72, 244, 0, 0, 0, 0,
	814, 1239, 1240, 0, 0, 1238, 0, 54, 0, 55,
	0, 1235, 0, 0, 836, 0, 67, 56, 70, 0,
	878, 51, 52, 0, 0, 0, 0, 0, 0, 56,
	835, 0, 0, 327, 485, 0, 0, 56, 0, 0,
	1229, 1230, 1232, 301, 1822, 56, 1231, 0, 307, 0,
	311, 312, 0, 0, 0, 1445, 251, 319, 246, 256,
	0, 904, 463, 0, 0, 1447, 0, 467, 253, 252,
	469, 0, 0, 472, 473, 844, 843, 853, 854, 846,
	847, 848, 849, 850, 851, 852, 845, 0, 0, 855,
	56, 0, 0, 935, 0, 0, 66, 0, 0, 0,
	0, 882, 0, 0, 882, 53, 882, 0, 882, 0,
	882, 882, 50, 0, 51, 52, 74, 74, 517, 0,
	0, 959, 959, 959, 0, 0, 51, 52, 54, 0,
	55, 0, 0, 0, 51, 52, 56, 37, 0, 49,
	0, 1263, 51, 52, 0, 546, 0, 72, 0, 0,
	0, 0, 0, 0, 546, 0, 0, 0, 0, 0,
	0, 580, 72, 0, 1683, 0, 585, 586, 587, 1683,
	1683, 1683, 1683, 1683, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1822, 0, 1928, 0, 51, 52, 0,
	0, 1238, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1038, 0, 0, 0, 0, 1044, 1045, 0,
	0, 249, 0, 0, 0, 524, 0, 250, 67, 0,
	526, 527, 528, 530, 0, 0, 53, 0, 0, 533,
	531, 541, 542, 51, 52, 0, 73, 0, 70, 0,
	0, 1664, 0, 0, 0, 0, 0, 0, 1683, 54,
	0, 55, 0, 878, 69, 0, 0, 56, 878, 0,
	1988, 1989, 0, 0, 1683, 0, 0, 529, 0, 0,
	0, 0, 0, 1101, 1126, 328, 74, 959, 959, 0,
	0, 959, 959, 959, 0, 0, 0, 69, 0, 0,
	258, 779, 259, 843, 853, 854, 846, 847, 848, 849,
	850, 851, 852, 845, 0, 0, 855, 53, 327, 0,
	959, 959, 959, 959, 1154, 0, 254, 74, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	54, 0, 55, 0, 0, 0, 959, 0, 778, 0,
	1237, 1226, 1225, 0, 0, 0, 0, 2053, 54, 779,
	55, 0, 1227, 0, 51, 52, 0, 0, 546, 546,
	0, 0, 0, 0, 0, 1228, 0, 0, 2071, 2072,
	2073, 856, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 74, 0, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
	1263, 949, 0, 0, 0, 770, 771, 0, 0, 535,
	540, 0, 0, 0, 0, 786, 0, 0, 2053, 56,
	0, 2134, 0, 0, 1356, 0, 0, 778, 0, 1237,
	1226, 1225, 0, 1221, 803, 51, 52, 56, 0, 0,
	0, 1227, 0, 1233, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2053, 1228, 779, 1239, 1240, 0, 0,
	0, 0, 537, 0, 539, 538, 1235, 0, 0, 0,
	1392, 0, 959, 0, 0, 0, 0, 0, 1394, 545,
	544, 0, 0, 0, 0, 1400, 0, 881, 883, 884,
	885, 886, 887, 888, 0, 1229, 1230, 1232, 0, 0,
	0, 1231, 0, 959, 0, 0, 0, 1009, 0, 1898,
	328, 1021, 0, 959, 0, 0, 51, 52, 0, 546,
	1447, 1011, 0, 1431, 1434, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 52, 0, 0, 0, 1444,
	0, 1085, 1086, 1087, 1089, 0, 0, 0, 856, 0,
	0, 0, 74, 74, 0, 0, 0, 1450, 0, 0,
	485, 0, 1221, 0, 0, 0, 0, 0, 0, 1492,
	0, 904, 1233, 0, 0, 1137, 1138, 1139, 1140, 1242,
	1141, 0, 0, 72, 0, 1239, 1240, 973, 0, 0,
	0, 0, 0, 0, 920, 1235, 0, 0, 0, 1010,
	0, 0, 988, 1150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1159, 0, 1162, 1229, 1230, 1232, 0, 1169, 1170,
	1231, 0, 0, 922, 0, 0, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 0, 1238, 0, 0, 0,
	0, 944, 527, 528, 530, 1198, 0, 0, 0, 0,
	533, 531, 541, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1051, 0, 0, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 0, 0, 0, 0, 0, 2094, 0, 529, 0,
	0, 1604, 0, 0, 0, 0, 1335, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 1009, 74, 0,
	0, 1021, 0, 0, 0, 0, 0, 1616, 923, 0,
	0, 1011, 0, 0, 485, 0, 115, 921, 0, 0,
	0, 0, 927, 926, 0, 0, 0, 0, 0, 0,
	0, 1354, 1355, 0, 0, 0, 0, 1640, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 1361, 1362, 0,
	0, 0, 0, 74, 74, 1238, 0, 1658, 0, 0,
	0, 0, 0, 74, 74, 0, 0, 0, 0, 0,
	0, 0, 485, 0, 72, 72, 0, 1387, 0, 0,
	0, 0, 0, 1393, 0, 0, 0, 0, 0, 1010,
	0, 1395, 1396, 0, 1397, 1398, 0, 1263, 1007, 0,
	0, 0, 0, 0, 0, 1897, 0, 0, 1407, 878,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 0, 0, 0, 0, 778,
	0, 1237, 1226, 1225, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 1227, 0, 0, 0, 0, 0, 0,
	535, 540, 0, 0, 0, 0, 1228, 0, 1343, 1344,
	1345, 0, 0, 0, 0, 0, 1347, 1348, 1349, 74,
	0, 0, 0, 74, 74, 0, 0, 0, 74, 74,
	74, 74, 74, 0, 0, 778, 0, 1237, 1226, 1225,
	74, 0, 74, 0, 0, 0, 74, 0, 0, 1227,
	0, 0, 485, 537, 0, 539, 538, 0, 0, 881,
	485, 778, 1228, 1237, 1226, 1225, 0, 0, 0, 0,
	0, 0, 0, 1753, 0, 1227, 0, 0, 0, 0,
	72, 0, 0, 0, 74, 0, 0, 0, 1228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1783, 1784, 1434, 74, 0, 0,
	0, 0, 0, 0, 1221, 0, 959, 0, 0, 0,
	0, 0, 0, 74, 1233, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 72, 1239, 1240, 0,
	0, 0, 0, 0, 0, 72, 1825, 1235, 1309, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1221, 0, 0, 0, 0, 0, 1229, 1230, 1232, 0,
	1233, 0, 1231, 1496, 0, 0, 0, 0, 1619, 0,
	0, 0, 485, 1239, 1240, 0, 1221, 0, 0, 0,
	0, 1447, 0, 1235, 1635, 0, 1233, 0, 2060, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1239,
	1240, 0, 0, 0, 1653, 0, 0, 0, 0, 1235,
	1877, 0, 1229, 1230, 1232, 0, 0, 0, 1231, 0,
	0, 0, 0, 0, 1888, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 1229, 1230,
	1232, 72, 0, 0, 1231, 72, 72, 0, 0, 69,
	72, 72, 72, 72, 72, 0, 686, 0, 687, 0,
	0, 0, 1922, 0, 72, 0, 677, 678, 1929, 0,
	0, 0, 0, 0, 74, 1947, 501, 0, 0, 67,
	667, 664, 665, 669, 670, 671, 672, 1595, 1596, 0,
	668, 673, 541, 542, 0, 0, 0, 0, 0, 0,
	656, 2060, 0, 685, 0, 0, 72, 1238, 0, 0,
	0, 0, 0, 0, 1975, 0, 0, 0, 0, 1609,
	1610, 1611, 1612, 0, 0, 0, 0, 653, 654, 72,
	1982, 0, 1983, 702, 0, 655, 0, 0, 651, 652,
	657, 0, 0, 0, 0, 72, 778, 0, 1237, 1226,
	1225, 0, 0, 0, 0, 0, 0, 1891, 0, 700,
	1227, 0, 0, 1238, 0, 0, 0, 0, 53, 1737,
	0, 1738, 1739, 1228, 1676, 0, 1741, 1742, 1744, 1746,
	1748, 0, 0, 0, 0, 0, 0, 0, 0, 1238,
	0, 54, 0, 55, 0, 0, 0, 0, 0, 0,
	0, 1769, 663, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 2066, 0, 0, 2067, 0, 69, 2069, 0, 2084,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1975, 0, 0, 0,
	0, 1221, 1849, 0, 0, 0, 688, 0, 0, 878,
	0, 1233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1239, 1240, 0, 0, 704, 0,
	689, 690, 0, 0, 1235, 0, 1825, 0, 0, 1871,
	56, 0, 0, 0, 0, 0, 0, 0, 2127, 878,
	1734, 0, 778, 0, 1237, 1226, 1225, 0, 0, 1879,
	1754, 675, 0, 1229, 1230, 1232, 1227, 0, 0, 1231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1228,
	0, 0, 0, 691, 701, 697, 698, 695, 696, 694,
	693, 692, 703, 679, 680, 681, 682, 684, 0, 0,
	545, 544, 683, 0, 0, 0, 0, 0, 0, 1923,
	69, 0, 0, 0, 0, 1800, 1801, 0, 0, 0,
	0, 0, 0, 0, 0, 832, 831, 0, 0, 0,
	0, 0, 0, 1667, 0, 0, 0, 51, 52, 699,
	0, 0, 0, 833, 0, 0, 0, 1960, 0, 0,
	0, 0, 0, 1963, 1964, 1965, 1966, 1967, 0, 0,
	0, 0, 0, 0, 0, 0, 778, 0, 1237, 1226,
	1225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1227, 0, 0, 0, 0, 0, 0, 1221, 0, 0,
	0, 0, 0, 1228, 0, 0, 1865, 1233, 0, 1866,
	0, 1867, 0, 1868, 0, 1869, 1870, 0, 0, 0,
	1239, 1240, 0, 0, 1238, 778, 0, 1237, 1226, 1225,
	1235, 0, 0, 0, 0, 0, 0, 0, 0, 1227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 832,
	831, 1901, 1228, 0, 0, 0, 1905, 0, 0, 1229,
	1230, 1232, 0, 0, 0, 1231, 2032, 833, 834, 0,
	0, 2038, 0, 0, 1789, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1672, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2077, 2074, 0,
	0, 1221, 0, 0, 0, 0, 1962, 0, 0, 0,
	0, 1233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1239, 1240, 0, 2089, 0, 0,
	0, 0, 0, 0, 1235, 0, 0, 0, 0, 0,
	0, 2098, 2099, 2100, 0, 0, 0, 0, 0, 2103,
	1221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1233, 0, 0, 1229, 1230, 1232, 0, 0, 0, 1231,
	0, 0, 834, 1239, 1240, 0, 0, 0, 0, 0,
	0, 0, 0, 1235, 0, 0, 0, 0, 1672, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1238, 0, 0, 0, 0, 2141, 2142, 2143, 0, 0,
	0, 0, 1229, 1230, 1232, 0, 0, 0, 1231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1207, 2155, 0,
	0, 0, 0, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514,
	1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
	1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
	1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554,
	1555, 445, 434, 0, 393, 447, 361, 381, 456, 383,
	384, 419, 340, 402, 1238, 378, 359, 0, 0, 0,
	364, 333, 373, 334, 362, 395, 0, 360, 0, 436,
	405, 0, 0, 0, 454, 0, 410, 0, 0, 0,
	0, 0, 397, 438, 400, 429, 392, 420, 349, 409,
	449, 379, 415, 450, 0, 0, 0, 37, 0, 0,
	0, 0, 0, 1238, 0, 0, 0, 0, 0, 414,
	444, 375, 346, 459, 0, 418, 332, 412, 0, 0,
	338, 341, 455, 442, 369, 368, 0, 778, 0, 1237,
	1226, 1225, 0, 396, 401, 425, 389, 0, 0, 0,
	0, 1227, 0, 0, 0, 0, 0, 0, 0, 365,
	0, 408, 0, 0, 1228, 345, 339, 0, 394, 0,
	0, 0, 348, 0, 366, 426, 0, 329, 0, 0,
	432, 439, 391, 0, 0, 443, 388, 387, 0, 0,
	0, 0, 0, 0, 380, 325, 53, 457, 0, 0,
	446, 398, 437, 363, 374, 0, 370, 0, 0, 0,
	371, 372, 407, 421, 0, 0, 0, 0, 0, 54,
	428, 55, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 330, 367, 430, 433, 353, 417,
	342, 376, 423, 377, 399, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1221, 0, 0, 0, 1693, 0, 0, 0,
	0, 0, 1233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1239, 1240, 0, 0, 0,
	0, 0, 0, 0, 0, 1235, 0, 0, 0, 1701,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1229, 1230, 1232, 0, 0, 0,
	1231, 0, 0, 335, 0, 0, 0, 0, 56, 336,
	357, 440, 0, 0, 0, 0, 1702, 1700, 1696, 1695,
	0, 0, 0, 0, 416, 0, 0, 0, 0, 1698,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 352, 356, 350, 351, 403, 404, 451, 452, 453,
	427, 347, 0, 354, 355, 0, 435, 0, 0, 0,
	406, 0, 0, 0, 458, 0, 0, 0, 0, 0,
	0, 0, 382, 331, 386, 0, 0, 0, 0, 0,
	0, 0, 343, 344, 0, 0, 390, 385, 411, 413,
	422, 431, 441, 448, 424, 51, 52, 0, 0, 445,
	434, 0, 393, 447, 361, 381, 456, 383, 384, 419,
	340, 402, 0, 378, 359, 0, 0, 1852, 364, 333,
	373, 334, 362, 395, 0, 360, 0, 436, 405, 0,
	0, 0, 454, 0, 410, 1238, 0, 0, 0, 0,
	397, 438, 400, 429, 392, 420, 349, 409, 449, 379,
	415, 450, 0, 0, 0, 37, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 444, 375,
	346, 459, 0, 418, 332, 412, 0, 0, 338, 341,
	455, 442, 369, 368, 778, 0, 1237, 1226, 1225, 0,
	0, 396, 401, 425, 389, 0, 0, 0, 1227, 0,
	0, 0, 0, 0, 0, 0, 0, 365, 0, 408,
	0, 1228, 0, 345, 339, 0, 394, 0, 0, 0,
	348, 0, 366, 426, 0, 329, 0, 0, 432, 439,
	391, 0, 0, 443, 388, 387, 0, 2014, 0, 0,
	0, 0, 380, 325, 53, 457, 0, 0, 446, 398,
	437, 363, 374, 0, 370, 0, 0, 0, 371, 372,
	407, 421, 0, 0, 0, 0, 0, 54, 428, 55,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 330, 367, 430, 433, 353, 417, 342, 376,
	423, 377, 399, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1221,
	0, 0, 0, 0, 1834, 0, 0, 0, 0, 1233,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1239, 1240, 0, 0, 0, 0, 0, 0,
	0, 0, 1235, 0, 0, 0, 0, 1701, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1229, 1230, 1232, 0, 0, 0, 1231, 0, 0,
	0, 335, 0, 0, 0, 0, 56, 336, 357, 440,
	0, 0, 0, 0, 1702, 1700, 2016, 0, 0, 0,
	0, 0, 416, 0, 0, 0, 0, 1698, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	356, 350, 351, 403, 404, 451, 452, 453, 427, 347,
	0, 354, 355, 0, 435, 0, 0, 0, 406, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	382, 331, 386, 0, 0, 0, 0, 0, 0, 0,
	343, 344, 0, 0, 390, 385, 411, 413, 422, 431,
	441, 448, 424, 51, 52, 445, 434, 0, 393, 447,
	361, 381, 456, 383, 384, 419, 340, 402, 0, 378,
	359, 0, 0, 0, 364, 333, 373, 334, 362, 395,
	0, 360, 0, 436, 405, 0, 0, 0, 454, 0,
	410, 0, 1238, 0, 0, 0, 397, 438, 400, 429,
	392, 420, 349, 409, 449, 379, 415, 450, 0, 0,
	0, 37, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 444, 375, 346, 459, 0, 418,
	332, 412, 0, 0, 338, 341, 455, 442, 369, 368,
	778, 0, 1237, 1226, 1225, 0, 0, 396, 401, 425,
	389, 0, 0, 0, 1227, 0, 0, 0, 0, 0,
	0, 0, 0, 365, 0, 408, 0, 1228, 0, 345,
	339, 0, 394, 0, 0, 0, 348, 0, 366, 426,
	0, 329, 0, 0, 432, 439, 391, 0, 0, 443,
	388, 387, 0, 0, 0, 0, 0, 0, 380, 325,
	53, 457, 0, 0, 446, 398, 437, 363, 374, 0,
	370, 0, 0, 0, 371, 372, 407, 421, 0, 0,
	0, 0, 2145, 54, 428, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 330, 367,
	430, 433, 353, 417, 342, 376, 423, 377, 399, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1233, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1239, 1240,
	0, 0, 0, 0, 0, 0, 0, 0, 1235, 0,
	0, 0, 0, 1701, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1229, 1230, 1232,
	0, 0, 0, 1231, 0, 0, 0, 335, 0, 0,
	0, 0, 56, 336, 357, 440, 0, 0, 0, 0,
	1702, 1700, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 0, 0, 1698, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 356, 350, 351, 403,
	404, 451, 452, 453, 427, 347, 0, 354, 355, 0,
	435, 0, 0, 0, 406, 0, 0, 0, 458, 0,
	0, 0, 0, 0, 0, 0, 382, 331, 386, 0,
	0, 0, 0, 0, 0, 0, 343, 344, 0, 0,
	390, 385, 411, 413, 422, 431, 441, 448, 424, 51,
	52, 445, 434, 0, 393, 447, 361, 381, 456, 383,
	384, 419, 340, 402, 0, 378, 359, 0, 0, 0,
	364, 333, 373, 334, 362, 395, 0, 360, 0, 436,
	405, 0, 138, 0, 454, 0, 410, 0, 1238, 0,
	0, 0, 397, 438, 400, 429, 392, 420, 349, 409,
	449, 379, 415, 450, 0, 0, 0, 67, 0, 70,
	37, 0, 109, 0, 0, 0, 0, 0, 0, 414,
	444, 375, 346, 459, 0, 418, 332, 412, 0, 0,
	338, 341, 455, 442, 369, 368, 0, 0, 0, 0,
	0, 0, 0, 396, 401, 425, 389, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1412, 0, 365,
	0, 408, 0, 0, 0, 345, 339, 0, 394, 123,
	0, 0, 348, 0, 366, 426, 0, 329, 0, 0,
	432, 439, 391, 0, 0, 443, 388, 387, 0, 0,
	0, 0, 0, 0, 380, 325, 53, 457, 0, 0,
	446, 398, 437, 363, 374, 0, 370, 0, 139, 0,
	371, 372, 407, 421, 0, 0, 0, 0, 0, 54,
	428, 55, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 330, 367, 430, 433, 353, 417,
	342, 376, 423, 377, 399, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 0, 171, 158, 0, 172, 173, 174, 176,
	175, 140, 141, 142, 146, 144, 143, 145, 117, 119,
	0, 115, 118, 124, 120, 121, 122, 136, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 137,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 56, 336,
	357, 440, 0, 0, 0, 0, 0, 324, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 352, 356, 350, 351, 403, 404, 451, 452, 453,
	427, 347, 0, 354, 355, 0, 435, 0, 0, 0,
	406, 0, 0, 0, 458, 116, 0, 0, 0, 0,
	0, 0, 382, 331, 386, 0, 0, 0, 0, 0,
	0, 0, 343, 344, 0, 0, 390, 385, 411, 413,
	422, 431, 441, 448, 424, 51, 52, 445, 434, 0,
	393, 447, 361, 381, 456, 383, 384, 419, 340, 402,
	0, 378, 359, 0, 0, 0, 364, 333, 373, 334,
	362, 395, 0, 360, 0, 436, 405, 0, 0, 0,
	454, 0, 410, 0, 0, 0, 0, 0, 397, 438,
	400, 429, 392, 420, 349, 409, 449, 379, 415, 450,
	0, 0, 0, 37, 0, 806, 0, 807, 0, 0,
	0, 0, 0, 0, 0, 414, 444, 375, 346, 459,
	0, 418, 332, 412, 0, 0, 338, 341, 455, 442,
	369, 368, 778, 0, 1237, 1226, 1225, 0, 0, 396,
	401, 425, 389, 0, 0, 0, 1227, 0, 0, 0,
	0, 0, 0, 0, 0, 365, 0, 408, 0, 1228,
	0, 345, 339, 0, 394, 0, 0, 0, 348, 0,
	366, 426, 0, 329, 0, 0, 432, 439, 391, 0,
	0, 443, 388, 387, 0, 0, 0, 0, 0, 0,
	380, 325, 53, 457, 0, 0, 446, 398, 437, 363,
	374, 0, 370, 0, 0, 0, 371, 372, 407, 421,
	0, 0, 0, 0, 2129, 54, 428, 55, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	330, 367, 430, 433, 353, 417, 342, 376, 423, 377,
	399, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1239, 1240, 0, 0, 0, 0, 0, 0, 0, 0,
	1235, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1229,
	1230, 1232, 0, 0, 0, 1231, 0, 0, 0, 335,
	0, 0, 0, 0, 56, 336, 357, 440, 0, 0,
	0, 0, 0, 324, 0, 0, 0, 0, 0, 0,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 356, 350,
	351, 403, 404, 451, 452, 453, 427, 347, 0, 354,
	355, 0, 435, 0, 0, 0, 406, 0, 0, 0,
	458, 0, 0, 0, 0, 0, 0, 0, 382, 331,
	386, 0, 0, 0, 0, 0, 0, 0, 343, 344,
	0, 0, 390, 385, 411, 413, 422, 431, 441, 448,
	424, 51, 52, 445, 434, 0, 393, 447, 361, 381,
	456, 383, 384, 419, 340, 402, 0, 378, 359, 0,
	0, 0, 364, 333, 373, 334, 362, 395, 0, 360,
	0, 436, 405, 0, 0, 0, 454, 0, 410, 0,
	1238, 0, 0, 0, 397, 438, 400, 429, 392, 420,
	349, 409, 449, 379, 415, 450, 0, 481, 0, 37,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 483,
	0, 414, 444, 375, 346, 459, 0, 418, 332, 412,
	0, 0, 338, 341, 455, 442, 369, 368, 778, 0,
	1237, 1226, 1225, 0, 0, 396, 401, 425, 389, 0,
	0, 0, 1227, 0, 0, 0, 0, 0, 0, 0,
	0, 365, 0, 408, 0, 1228, 0, 345, 339, 0,
	394, 0, 0, 0, 348, 0, 366, 426, 0, 329,
	0, 0, 432, 439, 391, 0, 0, 443, 388, 387,
	0, 0, 0, 0, 0, 0, 380, 325, 53, 457,
	0, 0, 446, 398, 437, 363, 374, 0, 370, 0,
	0, 0, 371, 372, 407, 421, 0, 0, 0, 0,
	2124, 54, 428, 55, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 330, 367, 430, 433,
	353, 417, 342, 376, 423, 377, 399, 358, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1233, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1239, 1240, 0, 0,
	0, 0, 0, 0, 0, 0, 1235, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1229, 1230, 1232, 0, 0,
	0, 1231, 0, 0, 0, 335, 0, 0, 0, 0,
	56, 336, 357, 440, 0, 0, 0, 0, 0, 324,
	0, 0, 0, 0, 0, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 352, 356, 350, 351, 403, 404, 451,
	452, 453, 427, 347, 0, 354, 355, 0, 435, 0,
	0, 0, 406, 0, 0, 0, 458, 0, 0, 0,
	0, 0, 0, 0, 382, 331, 386, 0, 0, 0,
	0, 0, 0, 0, 343, 344, 0, 0, 390, 385,
	411, 413, 422, 431, 441, 448, 424, 51, 52, 445,
	434, 0, 393, 447, 361, 381, 456, 383, 384, 419,
	340, 402, 0, 378, 359, 0, 0, 0, 364, 333,
	373, 334, 362, 395, 0, 360, 0, 436, 405, 0,
	0, 0, 454, 0, 410, 0, 1238, 0, 0, 0,
	397, 438, 400, 429, 392, 420, 349, 409, 449, 379,
	415, 450, 0, 0, 0, 37, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 444, 375,
	346, 459, 0, 418, 332, 412, 0, 0, 338, 341,
	455, 442, 369, 368, 778, 0, 1237, 1226, 1225, 0,
	0, 396, 401, 425, 389, 0, 0, 0, 1227, 0,
	0, 0, 0, 0, 0, 1772, 0, 365, 0, 408,
	0, 1228, 0, 345, 339, 0, 394, 0, 0, 0,
	348, 0, 366, 426, 0, 329, 0, 0, 432, 439,
	391, 0, 0, 443, 388, 387, 0, 0, 0, 0,
	0, 0, 380, 325, 53, 457, 0, 0, 446, 398,
	437, 363, 374, 0, 370, 0, 0, 0, 371, 372,
	407, 421, 0, 0, 0, 0, 0, 54, 428, 55,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 330, 367, 430, 433, 353, 417, 342, 376,
	423, 377, 399, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1221,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1233,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1239, 1240, 0, 0, 0, 0, 0, 0,
	0, 0, 1235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1229, 1230, 1232, 0, 0, 0, 1231, 0, 0,
	0, 335, 0, 0, 0, 0, 56, 336, 357, 440,
	0, 0, 0, 0, 0, 324, 1207, 0, 0, 0,
	0, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	356, 350, 351, 403, 404, 451, 452, 453, 427, 347,
	0, 354, 355, 0, 435, 0, 0, 0, 406, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	382, 331, 386, 0, 0, 0, 0, 0, 0, 0,
	343, 344, 0, 0, 390, 385, 411, 413, 422, 431,
	441, 448, 424, 51, 52, 445, 434, 0, 393, 447,
	361, 381, 456, 383, 384, 419, 340, 402, 0, 378,
	359, 0, 0, 0, 364, 333, 373, 334, 362, 395,
	0, 360, 0, 436, 405, 0, 0, 0, 454, 0,
	410, 0, 1238, 0, 0, 0, 397, 438, 400, 429,
	392, 420, 349, 409, 449, 379, 415, 450, 0, 0,
	0, 67, 0, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 444, 375, 346, 459, 0, 418,
	332, 412, 0, 0, 338, 341, 455, 442, 369, 368,
	778, 0, 1237, 1226, 1225, 0, 0, 396, 401, 425,
	389, 0, 0, 0, 1227, 0, 0, 0, 0, 0,
	0, 0, 0, 365, 0, 408, 0, 1228, 0, 345,
	339, 0, 394, 0, 0, 0, 348, 0, 366, 426,
	0, 329, 0, 0, 432, 439, 391, 0, 0, 443,
	388, 387, 0, 0, 0, 0, 0, 0, 380, 325,
	53, 457, 0, 0, 446, 398, 437, 363, 374, 0,
	370, 0, 0, 0, 371, 372, 407, 421, 0, 0,
	0, 0, 0, 54, 428, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 330, 367,
	430, 433, 353, 417, 342, 376, 423, 377, 399, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1894, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1233, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1239, 1240,
	0, 0, 0, 0, 0, 0, 0, 0, 1235, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1229, 1230, 1232,
	0, 0, 0, 1231, 0, 0, 0, 335, 0, 0,
	0, 0, 56, 336, 357, 440, 0, 0, 0, 0,
	0, 324, 1672, 0, 0, 0, 0, 0, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 356, 350, 351, 403,
	404, 451, 452, 453, 427, 347, 0, 354, 355, 0,
	435, 0, 0, 0, 406, 0, 0, 0, 458, 0,
	0, 0, 0, 0, 0, 0, 382, 331, 386, 0,
	0, 0, 0, 0, 0, 0, 343, 344, 0, 0,
	390, 385, 411, 413, 422, 431, 441, 448, 424, 51,
	52, 445, 434, 0, 393, 447, 361, 381, 456, 383,
	384, 419, 340, 402, 0, 378, 359, 0, 0, 0,
	364, 333, 373, 334, 362, 395, 0, 360, 0, 436,
	405, 0, 0, 0, 454, 0, 410, 0, 1238, 0,
	0, 0, 397, 438, 400, 429, 392, 420, 349, 409,
	449, 379, 415, 450, 0, 0, 0, 37, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	444, 375, 346, 459, 0, 418, 332, 412, 0, 0,
	338, 341, 455, 442, 369, 368, 617, 0, 0, 0,
	0, 0, 0, 396, 401, 425, 389, 0, 0, 1602,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	0, 408, 0, 0, 0, 345, 339, 0, 394, 0,
	0, 0, 348, 0, 366, 426, 0, 329, 0, 0,
	432, 439, 391, 0, 0, 443, 388, 387, 1105, 0,
	0, 0, 0, 0, 380, 325, 53, 457, 0, 0,
	446, 398, 437, 363, 374, 0, 370, 0, 0, 0,
	371, 372, 407, 421, 0, 0, 0, 0, 0, 54,
	428, 55, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 330, 367, 430, 433, 353, 417,
	342, 376, 423, 377, 399, 358, 0, 0, 0, 0,
	0, 0, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 0, 171, 1110, 0, 172, 173, 174, 176,
	175, 1114, 0, 1106, 0, 1118, 1117, 1119, 1104, 1121,
	0, 0, 0, 1125, 1122, 1124, 1123, 0, 1120, 0,
	0, 0, 0, 0, 0, 0, 0, 1111, 1112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1113, 1115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 56, 336,
	357, 440, 0, 0, 0, 0, 0, 324, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 352, 356, 350, 351, 403, 404, 451, 452, 453,
	427, 347, 0, 354, 355, 0, 435, 0, 0, 0,
	406, 0, 0, 0, 458, 0, 0, 0, 0, 0,
	0, 0, 382, 331, 386, 0, 0, 0, 0, 0,
	0, 0, 343, 344, 0, 0, 390, 385, 411, 413,
	422, 431, 441, 448, 424, 51, 52, 445, 434, 0,
	393, 447, 361, 381, 456, 383, 384, 419, 340, 402,
	0, 378, 359, 0, 0, 0, 364, 333, 373, 334,
	362, 395, 0, 360, 0, 436, 405, 0, 0, 0,
	454, 0, 410, 0, 0, 0, 0, 0, 397, 438,
	400, 429, 392, 420, 349, 409, 449, 379, 415, 450,
	0, 0, 0, 37, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 444, 375, 346, 459,
	0, 418, 332, 412, 0, 0, 338, 341, 455, 442,
	369, 368, 778, 0, 1237, 1226, 1225, 0, 0, 396,
	401, 425, 389, 0, 0, 0, 1227, 0, 0, 0,
	0, 0, 0, 0, 0, 365, 0, 408, 0, 1228,
	0, 345, 339, 0, 394, 0, 0, 0, 348, 0,
	366, 426, 0, 329, 0, 0, 432, 439, 391, 0,
	0, 443, 388, 387, 0, 0, 0, 0, 0, 0,
	380, 325, 53, 457, 0, 0, 446, 398, 437, 363,
	374, 0, 370, 0, 0, 0, 371, 372, 407, 421,
	0, 0, 0, 0, 1889, 54, 428, 55, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	330, 367, 430, 433, 353, 417, 342, 376, 423, 377,
	399, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1239, 1240, 0, 0, 0, 0, 0, 0, 0, 0,
	1235, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1229,
	1230, 1232, 0, 0, 0, 1231, 0, 0, 0, 335,
	0, 0, 0, 0, 56, 336, 357, 440, 0, 0,
	0, 0, 0, 324, 0, 0, 0, 0, 0, 0,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 356, 350,
	351, 403, 404, 451, 452, 453, 427, 347, 0, 354,
	355, 0, 435, 0, 0, 0, 406, 0, 0, 0,
	458, 0, 0, 0, 0, 0, 0, 0, 382, 331,
	386, 0, 0, 0, 0, 0, 0, 0, 343, 344,
	0, 0, 390, 385, 411, 413, 422, 431, 441, 448,
	424, 51, 52, 445, 2057, 0, 393, 447, 361, 381,
	456, 383, 384, 419, 340, 402, 0, 378, 359, 0,
	0, 0, 364, 333, 373, 334, 362, 395, 0, 360,
	0, 436, 405, 0, 0, 0, 454, 0, 410, 0,
	1238, 0, 0, 0, 397, 438, 400, 429, 392, 420,
	349, 409, 449, 379, 415, 450, 501, 0, 0, 37,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 444, 375, 346, 459, 0, 418, 332, 412,
	0, 0, 338, 341, 455, 442, 369, 368, 778, 0,
	1237, 1226, 1225, 0, 0, 396, 401, 425, 389, 0,
	0, 0, 1227, 0, 0, 0, 0, 0, 0, 0,
	0, 365, 0, 408, 0, 1228, 0, 345, 339, 0,
	394, 0, 0, 0, 348, 0, 366, 426, 0, 329,
	0, 0, 432, 439, 391, 0, 0, 443, 388, 387,
	0, 0, 0, 0, 0, 0, 380, 0, 53, 457,
	0, 0, 446, 398, 437, 363, 374, 0, 370, 0,
	0, 0, 371, 372, 407, 421, 0, 0, 0, 0,
	1792, 54, 428, 55, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 330, 367, 430, 433,
	353, 417, 342, 376, 423, 377, 399, 358, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1233, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1239, 1240, 0, 0,
	0, 0, 0, 0, 0, 0, 1235, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1229, 1230, 1232, 0, 0,
	0, 1231, 0, 0, 0, 335, 0, 0, 0, 0,
	56, 336, 357, 440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 352, 356, 350, 351, 403, 404, 451,
	452, 453, 427, 347, 0, 354, 355, 0, 435, 0,
	0, 0, 406, 0, 0, 0, 458, 0, 0, 0,
	0, 0, 0, 0, 382, 331, 386, 0, 0, 0,
	0, 0, 0, 0, 343, 344, 0, 0, 390, 385,
	411, 413, 422, 431, 441, 448, 424, 51, 52, 445,
	434, 0, 393, 447, 361, 381, 456, 383, 384, 419,
	340, 402, 0, 378, 359, 0, 0, 0, 364, 333,
	373, 334, 362, 395, 0, 360, 0, 436, 405, 0,
	0, 0, 454, 0, 410, 0, 1238, 0, 0, 0,
	397, 438, 400, 429, 392, 420, 349, 409, 449, 379,
	415, 450, 0, 0, 0, 73, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 444, 375,
	346, 459, 0, 418, 332, 412, 0, 0, 338, 341,
	455, 442, 369, 368, 0, 0, 0, 0, 0, 0,
	0, 396, 401, 425, 389, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 365, 0, 408,
	0, 0, 0, 345, 339, 0, 394, 0, 0, 0,
	348, 0, 366, 426, 0, 329, 0, 0, 432, 439,
	391, 0, 0, 443, 388, 387, 0, 0, 0, 0,
	0, 0, 380, 0, 53, 457, 0, 0, 446, 398,
	437, 363, 374, 0, 370, 0, 0, 0, 371, 372,
	407, 421, 0, 0, 0, 0, 0, 54, 428, 55,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 330, 367, 430, 433, 353, 417, 342, 376,
	423, 377, 399, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 56, 336, 357, 440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	356, 350, 351, 403, 404, 451, 452, 453, 427, 347,
	0, 354, 355, 0, 435, 0, 0, 0, 406, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	382, 331, 386, 0, 0, 0, 0, 0, 0, 0,
	343, 344, 0, 0, 390, 385, 411, 413, 422, 431,
	441, 448, 424, 51, 52, 445, 434, 0, 393, 447,
	361, 381, 456, 383, 384, 419, 340, 402, 0, 378,
	359, 0, 0, 0, 364, 333, 373, 334, 362, 395,
	0, 360, 0, 436, 405, 0, 0, 0, 454, 0,
	410, 0, 0, 0, 0, 0, 397, 438, 400, 429,
	392, 420, 349, 409, 449, 379, 415, 450, 0, 0,
	0, 37, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 444, 375, 346, 459, 0, 418,
	332, 412, 0, 0, 338, 341, 455, 442, 369, 368,
	0, 0, 0, 0, 0, 0, 0, 396, 401, 425,
	389, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 365, 0, 408, 0, 0, 0, 345,
	339, 0, 394, 0, 0, 0, 348, 0, 366, 426,
	0, 329, 0, 0, 432, 439, 391, 0, 0, 443,
	388, 387, 0, 0, 0, 0, 0, 0, 380, 0,
	53, 457, 0, 0, 446, 398, 437, 363, 374, 0,
	370, 0, 0, 0, 371, 372, 407, 421, 0, 0,
	0, 0, 0, 54, 428, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 330, 367,
	430, 433, 353, 417, 342, 376, 423, 377, 399, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 56, 336, 357, 440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 356, 350, 351, 403,
	404, 451, 452, 453, 427, 347, 0, 354, 355, 0,
	435, 0, 0, 0, 406, 0, 0, 0, 458, 0,
	0, 0, 0, 0, 0, 0, 382, 331, 386, 0,
	0, 0, 0, 0, 642, 0, 343, 344, 0, 0,
	390, 385, 411, 413, 422, 431, 441, 448, 424, 51,
	52, 641, 0, 0, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 686, 0, 687, 0, 0, 0, 0,
	0, 0, 0, 677, 678, 0, 0, 0, 0, 0,
	0, 0, 0, 501, 0, 0, 67, 667, 664, 665,
	669, 670, 671, 672, 0, 0, 0, 668, 673, 541,
	542, 643, 0, 0, 0, 0, 638, 656, 0, 0,
	685, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 653, 654, 0, 0, 0, 0,
	702, 0, 655, 0, 0, 1103, 652, 657, 0, 0,
	0, 0, 0, 778, 0, 1237, 1226, 1225, 0, 0,
	0, 0, 0, 0, 0, 0, 700, 1227, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	1228, 0, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	55, 0, 0, 0, 0, 0, 0, 0, 0, 663,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1980, 1981, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 0, 171,
	1110, 0, 172, 173, 174, 176, 175, 1114, 0, 1106,
	0, 1118, 1117, 1119, 1104, 1121, 0, 0, 1221, 1125,
	1122, 1124, 1123, 688, 1120, 0, 0, 0, 1233, 0,
	0, 0, 0, 1111, 1112, 0, 0, 0, 0, 0,
	0, 1239, 1240, 0, 0, 704, 0, 689, 690, 0,
	0, 1235, 0, 0, 1113, 1115, 0, 56, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 675, 0,
	1229, 1230, 1232, 0, 0, 0, 1231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	691, 701, 697, 698, 695, 696, 694, 693, 692, 703,
	679, 680, 681, 682, 684, 1295, 0, 545, 544, 683,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1258, 1257, 0, 37, 0, 1256, 0, 1259,
	1260, 1261, 1262, 0, 51, 52, 699, 1278, 0, 0,
	0, 0, 0, 1281, 1280, 1279, 0, 0, 1285, 1286,
	1287, 1288, 1290, 1289, 1253, 1254, 1255, 0, 0, 0,
	0, 1283, 1284, 0, 1282, 0, 0, 0, 0, 1250,
	1249, 0, 0, 1244, 1245, 1246, 1247, 0, 1248, 0,
	1251, 0, 0, 0, 0, 0, 0, 1252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1297, 0, 1296, 1300,
	0, 1238, 0, 0, 53, 0, 0, 0, 1298, 642,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 641, 54, 0, 55,
	0, 640, 0, 0, 0, 0, 0, 0, 686, 0,
	687, 0, 0, 0, 0, 0, 0, 0, 677, 678,
	0, 0, 0, 0, 0, 0, 1945, 0, 501, 0,
	0, 67, 667, 664, 665, 669, 670, 671, 672, 0,
	0, 0, 668, 673, 541, 542, 643, 1946, 0, 0,
	0, 638, 656, 0, 0, 685, 0, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 0, 171, 0,
	0, 172, 173, 174, 176, 175, 0, 0, 0, 653,
	654, 0, 0, 1274, 1273, 702, 0, 655, 0, 0,
	651, 652, 657, 1268, 1275, 1276, 1277, 0, 1269, 1270,
	1271, 1272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 0, 0, 0, 56, 0, 0, 0,
	0, 0, 0, 0, 642, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 55, 0, 0, 0, 954,
	0, 641, 0, 0, 663, 0, 640, 0, 0, 0,
	0, 0, 0, 686, 0, 687, 0, 0, 0, 0,
	0, 0, 0, 677, 678, 0, 0, 0, 0, 1292,
	1291, 1293, 1294, 501, 0, 0, 67, 667, 664, 665,
	669, 670, 671, 672, 0, 0, 0, 668, 673, 541,
	542, 643, 0, 0, 0, 0, 638, 656, 0, 0,
	685, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 52, 0, 1299, 0, 0, 0,
	0, 0, 0, 0, 653, 654, 957, 0, 688, 0,
	702, 0, 655, 0, 0, 651, 652, 657, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	704, 0, 689, 690, 0, 0, 700, 0, 0, 0,
	0, 0, 56, 0, 0, 53, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 675, 0, 0, 0, 0, 54, 0,
	55, 0, 0, 0, 0, 0, 0, 0, 0, 663,
	0, 0, 0, 0, 0, 691, 701, 697, 698, 695,
	696, 694, 693, 692, 703, 679, 680, 681, 682, 684,
	0, 0, 545, 544, 683, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	52, 699, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 688, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 704, 0, 689, 690, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 675, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	691, 701, 697, 698, 695, 696, 694, 693, 692, 703,
	679, 680, 681, 682, 684, 0, 0, 545, 544, 683,
	642, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 641, 0, 0,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 686,
	0, 687, 0, 0, 51, 52, 699, 0, 0, 677,
	678, 0, 0, 0, 0, 0, 0, 0, 0, 501,
	0, 835, 67, 667, 664, 665, 669, 670, 671, 672,
	0, 0, 0, 668, 673, 541, 542, 643, 0, 0,
	0, 0, 638, 656, 0, 0, 685, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	653, 654, 0, 0, 642, 0, 702, 0, 655, 0,
	0, 651, 652, 657, 0, 0, 0, 0, 0, 0,
	0, 641, 0, 0, 0, 0, 640, 0, 0, 0,
	0, 0, 700, 686, 0, 687, 0, 0, 0, 0,
	0, 53, 0, 677, 678, 0, 0, 0, 0, 0,
	0, 0, 0, 501, 0, 0, 67, 667, 664, 665,
	669, 670, 671, 672, 54, 0, 55, 668, 673, 541,
	542, 643, 0, 0, 0, 663, 638, 656, 0, 0,
	685, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 653, 654, 957, 0, 0, 0,
	702, 0, 655, 0, 0, 651, 652, 657, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 700, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 688,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	55, 0, 0, 0, 0, 0, 0, 0, 0, 663,
	0, 704, 0, 689, 690, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 675, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 691, 701, 697, 698,
	695, 696, 694, 693, 692, 703, 679, 680, 681, 682,
	684, 0, 0, 545, 544, 683, 0, 0, 0, 0,
	0, 0, 0, 688, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 704, 0, 689, 690, 0,
	51, 52, 699, 0, 0, 0, 0, 56, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 675, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	691, 701, 697, 698, 695, 696, 694, 693, 692, 703,
	679, 680, 681, 682, 684, 0, 0, 545, 544, 683,
	0, 0, 0, 0, 0, 778, 0, 0, 642, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 641, 0, 0, 0, 0,
	640, 0, 0, 0, 51, 52, 699, 686, 0, 687,
	0, 0, 0, 0, 0, 0, 0, 677, 678, 0,
	0, 0, 0, 0, 0, 0, 0, 501, 0, 0,
	67, 667, 664, 665, 669, 670, 671, 672, 0, 0,
	0, 668, 673, 541, 542, 643, 0, 0, 0, 0,
	638, 656, 0, 0, 685, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 653, 654,
	0, 0, 642, 0, 702, 0, 655, 0, 0, 651,
	652, 657, 0, 0, 0, 0, 0, 0, 0, 641,
	0, 0, 0, 0, 640, 0, 0, 0, 0, 0,
	700, 686, 0, 687, 0, 0, 0, 0, 0, 53,
	0, 677, 678, 0, 0, 0, 0, 0, 0, 0,
	0, 501, 0, 0, 67, 667, 664, 665, 669, 670,
	671, 672, 54, 0, 55, 668, 673, 541, 542, 643,
	0, 0, 0, 663, 638, 656, 0, 0, 685, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 653, 654, 0, 0, 0, 0, 702, 0,
	655, 0, 0, 651, 652, 657, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 700, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 688, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 55, 0,
	0, 0, 0, 0, 0, 0, 0, 663, 0, 704,
	0, 689, 690, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 675, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 691, 701, 697, 698, 695, 696,
	694, 693, 692, 703, 679, 680, 681, 682, 684, 0,
	0, 545, 544, 683, 0, 0, 0, 0, 0, 0,
	0, 688, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 704, 0, 689, 690, 0, 51, 52,
	699, 0, 0, 0, 0, 56, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 675, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 691, 701,
	697, 698, 695, 696, 694, 693, 692, 703, 679, 680,
	681, 682, 684, 0, 0, 545, 544, 683, 1052, 1053,
	1054, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 686, 0, 687, 0, 0,
	0, 0, 0, 0, 0, 677, 678, 0, 0, 0,
	0, 0, 51, 52, 699, 501, 0, 0, 67, 667,
	664, 665, 669, 670, 671, 672, 0, 0, 0, 668,
	673, 541, 542, 0, 0, 0, 0, 0, 0, 656,
	0, 0, 685, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 653, 654, 0, 0,
	0, 0, 702, 0, 655, 0, 0, 651, 652, 657,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 700, 686,
	0, 687, 0, 0, 0, 0, 0, 53, 0, 677,
	678, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 67, 667, 664, 665, 669, 670, 671, 672,
	54, 0, 55, 668, 673, 541, 542, 0, 0, 0,
	0, 663, 0, 656, 0, 0, 685, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	653, 654, 0, 0, 0, 0, 702, 0, 655, 0,
	0, 651, 652, 657, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 700, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 688, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 55, 0, 0, 0,
	0, 0, 0, 0, 0, 663, 0, 704, 0, 689,
	690, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 691, 701, 697, 698, 695, 696, 694, 693,
	692, 703, 679, 680, 681, 682, 684, 0, 0, 545,
	544, 683, 0, 0, 0, 0, 0, 0, 0, 688,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 704, 947, 689, 690, 0, 51, 52, 699, 0,
	0, 0, 0, 56, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 675, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 691, 701, 697, 698,
	695, 696, 694, 693, 692, 703, 679, 680, 681, 682,
	684, 0, 0, 545, 544, 683, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 52, 699, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 0, 171, 158, 0, 172, 173, 174,
	176, 175, 140, 141, 142, 146, 144, 143, 145, 117,
	119, 0, 115, 118, 124, 120, 121, 122, 136, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	137, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	0, 0, 0, 0, 946, 778, 0, 1237, 1226, 1225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1227,
	778, 0, 1237, 1226, 1225, 0, 0, 0, 0, 0,
	0, 0, 1228, 0, 1227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 832, 831,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 832, 831, 0, 833, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1233, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1239, 1240, 1233, 0, 0, 0, 0,
	0, 0, 0, 1235, 0, 0, 0, 0, 1239, 1240,
	0, 0, 0, 0, 0, 0, 0, 0, 1235, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1229, 1230, 1232, 0, 0, 0, 1231, 0,
	0, 834, 0, 0, 0, 0, 0, 1229, 1230, 1232,
	0, 0, 0, 1231, 0, 0, 834, 1711, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1672, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1238, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1238,
}

var yyPact = [...]int16{
	886, -1000, -1000, -269, -1000, -1000, -1000, -1000, 1664, 785,
	1106, 1106, 467, 397, 1696, 886, -1000, 2516, 549, 542,
	538, 248, 513, 1106, 2395, 2615, 576, 540, 685, 445,
	-1000, -230, -192, -1000, -78, 1517, -1000, -1000, 1508, 571,
	-1000, 480, 621, 521, -1000, 1453, -1000, 5549, 5549, 5549,
	5549, -1000, -1000, -1000, -1000, -1000, -1000, 370, 1106, 1106,
	445, 167, 445, 1695, 528, 1694, 881, -1000, -1000, 647,
	-1000, 1867, 644, -1000, -1000, 445, -1000, 855, -1000, 851,
	-1000, 2615, 847, -1000, -1000, -1000, -1000, 2274, 1106, 2228,
	2062, 1692, 1813, -1000, 1809, -1000, 2615, 2175, 1106, 189,
	230, 2354, -155, 40, -1000, -1000, -1000, -1000, -1000, 640,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1574, 101, 1663,
	1574, 1663, -1000, 1574, 1663, 87, 87, 87, 87, 87,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1661, 1659, -1000,
	1574, 1574, 1574, 1574, 1574, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1651, 1574, 1576, 119, 1598,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2354, 2354, 2354,
	1658, 2615, 1106, 1114, 1688, 1687, 2615, -247, 2615, 2615,
	1955, -1000, -1000, -1000, 222, 2615, 1805, 7130, 5549, 8714,
	2615, 1801, 1790, -1000, 1788, 2615, 503, -1000, 2615, 1956,
	587, 2615, 2615, 1106, 1095, 708, 704, -1000, 688, 6338,
	-1000, 1750, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1650, 936, 1106, 346, 96, 1546, 512, 656, 406, 1250,
	345, -1000, -1000, -1000, 951, -1000, 1106, -1000, 1967, -1000,
	-1000, 339, -1000, 338, 844, 1099, 2615, 1649, 166, 1648,
	2597, 1045, -1000, -274, -1000, 29, -1000, 1098, 87, 991,
	1574, -1000, 87, 968, 87, 87, -1000, -1000, 661, 1773,
	661, 661, 661, 661, 1097, 1097, -115, -115, -1000, -1000,
	-1000, 1044, -1000, -1000, 1021, 1576, -1000, -1000, 1012, 2615,
	1106, 1647, 1683, 1682, 2615, 2615, 2615, 1846, 511, -1000,
	-1000, 1840, 1839, 1502, -1000, -1000, 214, -1000, -1000, 528,
	1106, -1000, 638, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1669, 1106, 1091, -1000, 476, 1106, 1944,
	1106, 382, 582, -1000, 1680, -1000, -1000, 1094, 908, 1088,
	7526, 189, -1000, -1000, -1000, -1000, -1000, 437, -1000, 1951,
	1895, 12, 336, -226, 1168, -1000, -1000, 1644, -1000, -1000,
	11043, -1000, 1166, 1160, -1000, 1145, 1143, 35, 1106, -1000,
	-209, 108, -14, -1000, -1000, 1546, -1000, 1643, 11043, 1832,
	-1000, 1778, 725, -1000, 387, -1000, -252, -1000, -1000, 934,
	-1000, -252, -1000, -1000, -1000, 1546, -1000, 1641, 1637, -1000,
	1636, -1000, -1000, 1546, 1546, 1546, 628, -1000, -1000, -1000,
	-1000, -1000, -1000, 661, 1489, 87, 661, 1487, 1486, 661,
	661, -1000, -1000, 1138, 710, -1000, -1000, -1000, -1000, 1416,
	-1000, 1412, -1000, 112, 109, -1000, 1485, 1552, -1000, 1410,
	1545, 1677, 453, 2615, 2615, 1633, 1632, 1631, 1551, 445,
	1551, 1891, 276, 2615, 1955, 489, 1955, 528, 7922, 1106,
	-1000, -1000, -1000, 1106, 1516, 1106, 1516, 379, 1106, -1000,
	-1000, 441, 2615, -1000, -1000, -1000, -1000, 5942, -1000, -1000,
	1400, -1000, 285, 1574, 11043, 690, 690, -225, 1543, 330,
	-226, 1546, 325, 1629, -1000, 437, 709, -1000, 11043, 204,
	1546, 1546, 1546, 1546, 10939, -1000, -1000, 629, -1000, -1000,
	-1000, 3598, 3598, 3598, 3598, 3598, 3598, 3598, -1000, -1000,
	-1000, -1000, 58, -1000, -252, -1000, 1074, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 624, 617, -1000, 1546, 1546, 1546,
	1546, 1546, 1546, 1546, 1546, 11043, 1546, 1742, 1546, 1546,
	1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 2954,
	1546, 1546, 1546, 1546, -1000, -1000, -1000, -1000, -1000, -1000,
	-226, 1627, -1000, -1000, -1000, 844, -1000, 11043, 489, 1454,
	129, -1000, 1540, -1000, 1003, 1483, 3068, 1482, -1000, 11660,
	-1000, -1000, -1000, 1157, -1000, 1043, -1000, 961, 1481, 10115,
	10575, 10575, 7922, -1000, -1000, 661, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 87, 1073, 87, 36, 20, -1000,
	1001, -1000, 1000, 453, 1106, 2615, 1480, 1539, -1000, 284,
	1626, 1623, 453, 489, 437, -1000, 1920, 1972, -1000, 1551,
	2615, -1000, 454, 1918, -1000, -1000, 1889, -1000, 1537, -1000,
	-1000, 1497, 1955, -1000, 1621, 1516, 1516, 1106, -1000, -1000,
	351, 1106, -1000, -1000, -1000, -1000, -1000, -1000, 2930, 437,
	1795, -1000, -1000, -1000, 1306, 916, -1000, -1000, 892, 267,
	871, -1000, 1106, 1106, -226, 1617, 11043, 1106, 437, 1379,
	270, 11043, 11043, 998, -1000, -1000, 326, 11387, 946, 960,
	3598, 3598, 3598, 3598, 3598, 3598, 3598, 3598, 3598, 3598,
	3598, 3598, 3598, 3598, 3598, 992, 956, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1122,
	-1000, 1551, 2175, 1157, 1157, 1157, 1377, 10939, 757, 2309,
	2309, 26, 10939, 26, 26, 26, 26, 26, 90, -1000,
	-272, -1000, -1000, 7130, 7922, 10575, 10575, 9485, 11043, 10575,
	10575, 10575, 1870, 838, 757, 2175, 1887, 1157, 1157, 1157,
	1157, -1000, 1157, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 98, -1000, -1000, -1000, -1000, -1000, -1000, 10575, 10575,
	10575, 10575, -1000, 1106, 1546, 709, 1374, -172, 11043, 1616,
	725, -1000, -1000, 1477, -252, -1000, -1000, -1000, -155, -1000,
	-1000, -1000, -1000, 1157, 10575, 1336, -1000, -1000, 608, 614,
	1336, 1336, 1546, -1000, 661, -1000, 661, -1000, -1000, 1476,
	1475, 1470, 1615, 1605, -235, 991, 453, 453, 1455, 1369,
	1367, 1898, 1917, 1551, 1872, 1758, -1000, 1157, 1831, 1106,
	-1000, -1000, -1000, -1000, -1000, 242, 832, 1106, 6818, 1468,
	-1000, 9814, 1604, 100, 381, 1672, 3140, 159, -1000, 1112,
	797, 1072, 795, 794, 793, 792, 775, 771, 770, 765,
	744, 735, -1000, -1000, -1000, -1000, 1795, -1000, 1966, -1000,
	-1000, -1000, 1960, 1361, -111, 1602, 1601, 437, 709, 1600,
	1358, 2930, -1000, -101, 326, 376, -1000, -1000, 988, -1000,
	-1000, 1034, 3598, 3598, 3598, -1000, -1000, -1000, -1000, 946,
	3598, 3598, 3598, 585, 1034, 835, 1474, 2627, 26, 213,
	213, 28, 28, 28, 28, 28, 158, 158, -1000, -1000,
	-1000, -113, -1000, 1157, 1157, -1000, -1000, -1000, 11043, -1000,
	1157, -1000, -252, 1054, -1000, -1000, 1053, 1546, -1000, 1336,
	1336, 791, 1536, 11491, 1574, -1000, 1574, 1598, 1576, -1000,
	119, -1000, -1000, 144, 1574, 143, 1574, 1574, 1574, -1000,
	-1000, 1574, 1574, -1000, 1574, 1574, 888, 1515, 1506, 1336,
	10575, -1000, 788, -1000, 11043, 1157, 2615, -1000, -1000, -1000,
	-1000, -1000, -1000, 1336, 1157, 1535, 1336, 1336, 1355, 11043,
	270, 1676, -1000, -1000, 990, -1000, 1426, 1417, -1000, -1000,
	1336, 10575, -266, -1000, -1000, 1051, -1000, -1000, 5546, -266,
	-266, 10575, -1000, -1000, -1000, -1000, -235, 453, 437, 1926,
	1582, 1406, 1347, -235, 1926, 2930, 1792, 11043, 11043, 1920,
	-1000, 1551, -1000, -1000, 1870, -1000, -1000, 906, -1000, 1551,
	1314, 238, 163, 11043, -1000, 3389, -1000, 6818, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1920, 11043, -1000, -1000, -1000, -1000, -1000, 367, 3185, 1106,
	1106, 1106, 550, 11043, 1107, 11043, -1000, -1000, -1000, -1000,
	-1000, 2615, 1309, 9814, 9814, 9814, 9814, 9814, 9814, 9814,
	9814, 9814, 9814, 9814, 9814, 9814, 9814, 9814, 9814, 9814,
	9814, 9814, 9814, 9814, 9814, 9814, 9814, 9814, 9814, 9814,
	9814, 9814, 9814, 9814, 9814, 9814, 9814, 9814, 9814, 9814,
	9814, 9814, 9814, 9814, 9814, 9814, 9814, 9814, 9814, 9814,
	9814, 9814, 9814, 9814, 9814, 9814, 9814, 9814, 9814, 9814,
	9814, 437, 437, 1579, 1578, 315, -1000, 1106, -1000, -154,
	3140, 1106, -1000, 982, -1000, -1000, 933, 976, 933, 933,
	933, 933, 933, 247, 962, 402, -1000, 690, 690, -1000,
	1106, 1106, 1106, 437, 1328, 270, 1106, 2930, 1672, -1000,
	-1000, -1000, -1000, 1034, 1034, 1034, -1000, 585, 1034, 130,
	-1000, 3598, 3598, 99, -1000, -1000, 757, -1000, 72, -1000,
	-252, -1000, -1000, 7509, 992, 11043, -1000, 292, -1000, -1000,
	-1000, 1576, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 7509, 3598, 3598, 3598, 3598, -106, 1363, 813,
	-1000, 11043, 952, -1000, -1000, -1000, -1000, -1000, -1000, 363,
	709, -1000, 1948, -178, 700, -1000, -1000, -1000, -1000, -1000,
	1546, -1000, -1000, 610, -1000, -1000, 1157, 1926, 1291, 1316,
	2930, 11043, 489, -235, -235, 1926, 2930, -1000, -1000, 1963,
	699, 894, 1533, -1000, 448, 1898, 1157, 1709, -1000, -1000,
	-120, 11043, 6818, 4441, 757, 4441, -1000, 6818, 2277, 1898,
	3906, 467, 2183, 2155, 1532, 421, 202, -1000, -1000, -1000,
	4356, 907, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1106, 1938, 1936,
	1934, 1932, 11949, 11043, 11043, -1000, 1881, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1269, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1308, 1305, 437, 437,
	1575, 1546, 1303, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 844, 844, -141, -1000, 1300, 1294, 2930, -1000,
	1288, 1672, -1000, -1000, 3598, 1034, 1034, -15, -1000, 1053,
	-1000, 1157, 1574, 1157, 375, -1000, -1000, -1000, 1157, 1512,
	1015, 983, 458, 1546, -96, -1000, 757, 11043, 2615, 270,
	690, 690, -1000, -1000, -1000, 153, 728, 725, 725, 929,
	19, -1000, 1915, 488, 6734, -1000, 2930, 1926, 2930, 1672,
	757, 1268, 1926, 1926, 2930, 1672, -1000, 1739, 11043, 11043,
	11043, -1000, 1792, -1000, 10575, -1000, -1000, -264, 757, 3389,
	3720, -1000, -1000, 2091, 8402, -1000, 1792, 6818, 801, -1000,
	807, -1000, 4441, 2167, 2615, 1315, -1000, 1472, 2122, -1000,
	-1000, -1000, 1824, 329, 609, 1106, 235, 5549, -1000, -1000,
	1880, 1519, 4754, 23, -1000, -1000, -1000, 731, 604, 974,
	-1000, 1760, -1000, -1000, 3185, 1784, -1000, -1000, -1000, -1000,
	-1000, 4441, -1000, 1503, 1157, 832, 241, 9814, -1000, 358,
	1183, 1180, 437, 1106, -1000, 3140, -1000, -1000, 1106, -1000,
	2930, 1672, 361, -1000, 1034, -1000, -1000, -1000, -1000, -1000,
	3598, -1000, -1000, 3598, -1000, 3598, -1000, 3598, -1000, 3598,
	3598, 1157, 1050, 757, 1558, -1000, -1000, -1000, 725, -1000,
	725, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 493, -1000,
	1909, 1157, -1000, 1672, 2930, -1000, -1000, -1000, 2930, 2930,
	1672, -1000, 1735, 757, 757, -1000, -1000, 1462, 11043, 8006,
	-1000, -1000, -1000, -1000, 3333, 7214, 443, 2901, 297, 2615,
	-1000, 297, 1284, 2155, 2615, -1000, -1000, 2175, 2155, 2155,
	2155, 2155, 2155, -1000, 1721, 1719, -1000, 1713, 1707, 1741,
	2615, 1178, 329, 723, 1546, -1000, 2615, -1000, 1824, 1878,
	-1000, 459, 5150, 1519, 23, 1518, -1000, -23, -28, 9960,
	7922, 661, -1000, -1000, -1000, -1000, -1000, 1106, 653, -1000,
	161, 224, -1000, 174, -1000, 181, 2930, 2930, 1174, 1157,
	-1000, -1000, 1672, -1000, 2615, 2410, 2410, 2410, 2410, 2410,
	62, -1000, -1000, 1106, -1000, -1000, -1000, 601, 11043, -1000,
	-1000, -1000, 1672, 1672, -1000, -1000, 1926, 2155, 757, -1000,
	-1000, 9607, -1000, -1000, 11043, -1000, 11043, 4441, -1000, 1319,
	1546, -1000, 1926, 2155, 1343, -1000, 1324, -1000, 722, 2122,
	1573, 1674, 1748, -1000, -1000, -1000, -1000, 1714, -1000, 1711,
	-1000, -1000, -1000, -1000, -149, 529, 522, 517, 1106, -1000,
	1551, 4838, -1000, -1000, 1070, -1000, 185, -1000, -1000, -1000,
	1518, 23, -36, -1000, -1000, -1000, -1000, 757, 717, -1000,
	1516, -1000, 4441, -1000, -1000, 175, -1000, 1672, 1672, -1000,
	-1000, -1000, 1557, -1000, -1000, -1000, -1000, -1000, 1157, 209,
	-159, 1156, 7922, 1148, -1000, 757, -1000, -1000, 1924, 1510,
	403, 6818, 11964, 4020, 1671, 2175, 1546, -1000, 8318, 1106,
	1920, 1343, -1000, 1926, 2175, 11043, -1000, -1000, 11043, 1556,
	-1000, 11043, -1000, -1000, -1000, -1000, 1554, 1546, 1546, 1546,
	1152, -1000, -1000, -1000, 459, -1000, 4069, -1000, 953, -1000,
	-1000, -1000, -32, -39, -1000, 11043, 3415, -1000, -1000, -1000,
	-1000, 1106, -1000, 1733, -109, -163, -1000, -1000, -1000, 1157,
	11043, 1922, 1904, -1000, 2772, 801, -1000, -1000, 1782, 1460,
	1491, -1000, -1000, 10471, 1157, 1154, -1000, -1000, 598, -1000,
	-1000, 1152, 1898, -1000, 1920, -1000, 757, 757, 489, 757,
	15, 489, 489, 489, 1757, 1106, -1000, -1000, 348, -1000,
	-1000, -1000, -1000, 757, 6422, 1128, -1000, 1729, -1000, -1000,
	-1000, -1000, 11043, 11043, 6026, 313, -1000, 1546, -1000, -1000,
	1393, 9110, 1106, -1000, -1000, 1898, 1126, 1121, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1117, 1117, 1117,
	723, -1000, -1000, 5234, -1000, -1000, -143, 757, 1503, 398,
	1962, -1000, 1546, -1000, 1551, -1000, -1000, -1000, -1000, -1000,
	15, -1000, -1000, -1000, -149, -1000, -171, -1000, 2175, 1491,
	1157, -1000, -1000, -164, 1469, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 2251, 1940, 118, 123, 2250, 2248, 2247, 2245, 2241,
	2240, 2239, 2234, 2233, 2231, 2229, 57, 56, 41, 23,
	55, 2226, 2225, 2223, 2222, 2221, 2220, 2217, 113, 2215,
	2214, 2210, 2208, 109, 2207, 2206, 2204, 2203, 77, 91,
	134, 79, 1815, 35, 46, 61, 70, 2202, 31, 2201,
	2200, 62, 2199, 38, 2198, 2195, 2301, 2193, 2190, 8,
	278, 97, 112, 84, 2189, 2188, 102, 2315, 2182, 2180,
	127, 2177, 2176, 95, 16, 73, 5, 7, 15, 2167,
	78, 2, 2166, 87, 88, 2161, 2160, 2159, 140, 2158,
	65, 74, 14, 67, 2155, 17, 6, 130, 40, 26,
	20, 1, 52, 37, 2154, 19, 34, 32, 2146, 71,
	2144, 125, 39, 69, 13, 1579, 0, 36, 143, 2143,
	2142, 2139, 1821, 148, 9, 64, 83, 2137, 82, 104,
	53, 103, 2136, 2134, 2132, 2130, 66, 180, 156, 142,
	2119, 2118, 2116, 2109, 2106, 92, 2098, 275, 926, 128,
	94, 63, 2095, 2094, 96, 352, 75, 93, 360, 808,
	1902, 2093, 2092, 2088, 2083, 2081, 119, 2080, 76, 110,
	21, 375, 2079, 2075, 2071, 2068, 2067, 2066, 2065, 106,
	2064, 141, 47, 85, 496, 45, 2063, 2061, 2058, 2057,
	107, 2055, 2052, 2050, 72, 2048, 2047, 108, 81, 126,
	120, 122, 2046, 2045, 90, 80, 2042, 124, 121, 2036,
	111, 105, 30, 164, 54, 2031, 2029, 2028, 22, 2026,
	2025, 2024, 3, 4, 2020, 2012, 2005, 2004, 2001, 1999,
	68, 1998, 150, 1996, 10, 1993, 1991, 44, 1985, 1984,
	1984, 1981, 1980, 800, 2147, 1979, 3059, 86, 129, 1978,
	146,
}

var yyR1 = [...]uint8{
	0, 239, 2, 2, 2, 240, 240, 1, 1, 1,
	1, 24, 24, 24, 24, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 22, 22, 22, 22, 22,
	22, 22, 242, 242, 3, 3, 4, 5, 5, 6,
	6, 7, 7, 31, 31, 8, 9, 9, 9, 245,
	245, 51, 51, 98, 98, 10, 10, 10, 10, 11,
	11, 11, 215, 215, 214, 216, 216, 217, 217, 219,
	219, 218, 218, 218, 218, 218, 218, 218, 220, 220,
	220, 220, 12, 12, 12, 12, 12, 209, 209, 209,
	209, 209, 13, 13, 212, 212, 212, 16, 16, 16,
	16, 17, 17, 18, 18, 18, 20, 20, 103, 103,
	107, 107, 107, 108, 108, 108, 108, 231, 231, 127,
	127, 241, 241, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 207, 207, 207, 207, 208, 208, 208, 208,
	210, 210, 211, 211, 211, 211, 211, 211, 213, 213,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 14, 14, 32, 32, 75, 75, 15, 113, 113,
	188, 188, 188, 189, 189, 189, 189, 189, 189, 191,
	191, 192, 192, 120, 120, 193, 193, 23, 23, 23,
	23, 23, 23, 23, 23, 27, 173, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 165, 165, 247, 247,
	159, 159, 159, 159, 130, 130, 130, 130, 130, 130,
	130, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	199, 199, 199, 199, 199, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 201, 202, 203, 195,
	195, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 149, 149, 149, 149, 149,
	149, 194, 194, 190, 190, 190, 190, 132, 132, 132,
	132, 132, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 140, 137, 137, 141, 138, 138, 142, 144,
	145, 145, 156, 156, 157, 157, 157, 139, 139, 143,
	133, 133, 133, 133, 133, 133, 133, 133, 131, 131,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 146, 146, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 158, 158, 147, 147, 148, 148, 148,
	155, 155, 155, 152, 152, 153, 153, 154, 154, 154,
	150, 150, 150, 151, 151, 151, 161, 184, 184, 184,
	186, 186, 187, 187, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 172, 172,
	204, 204, 205, 205, 206, 206, 183, 183, 183, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	171, 171, 181, 181, 182, 182, 179, 179, 179, 179,
	180, 166, 166, 166, 166, 166, 167, 167, 168, 168,
	168, 168, 162, 162, 163, 163, 164, 164, 197, 197,
	197, 235, 235, 235, 235, 235, 235, 236, 236, 198,
	198, 169, 169, 170, 170, 177, 177, 177, 177, 248,
	248, 175, 175, 175, 176, 176, 176, 249, 28, 29,
	29, 30, 30, 30, 35, 35, 35, 33, 33, 34,
	34, 40, 40, 39, 39, 41, 41, 41, 41, 119,
	119, 119, 118, 118, 232, 232, 232, 232, 232, 43,
	43, 44, 44, 45, 45, 46, 46, 46, 222, 222,
	221, 221, 223, 223, 223, 223, 223, 223, 223, 223,
	58, 58, 95, 95, 95, 99, 99, 47, 47, 47,
	47, 48, 48, 49, 49, 50, 50, 125, 125, 124,
	124, 124, 52, 52, 52, 54, 53, 53, 53, 53,
	55, 55, 57, 57, 56, 56, 59, 59, 59, 59,
	60, 60, 97, 97, 42, 42, 42, 42, 42, 42,
	42, 42, 110, 110, 62, 62, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 72, 72, 72, 72, 72, 72, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 38,
	38, 73, 73, 73, 80, 74, 74, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 70, 70, 70, 70, 70, 70,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 250, 250, 71, 71, 71, 71, 36,
	36, 36, 36, 36, 126, 126, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 129, 129, 129, 129, 129, 129, 129, 129,
	84, 84, 37, 37, 82, 82, 83, 112, 112, 85,
	85, 81, 81, 81, 81, 224, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 63, 63, 86, 86,
	87, 87, 233, 233, 234, 88, 88, 89, 89, 90,
	91, 91, 91, 92, 92, 92, 92, 93, 93, 93,
	65, 65, 65, 65, 65, 65, 94, 94, 96, 96,
	96, 96, 100, 100, 76, 76, 78, 78, 77, 79,
	101, 101, 105, 102, 102, 106, 106, 106, 106, 106,
	25, 26, 104, 104, 104, 121, 121, 121, 111, 111,
	109, 109, 116, 117, 117, 117, 117, 117, 122, 122,
	122, 123, 123, 225, 225, 225, 226, 226, 226, 227,
	227, 228, 229, 229, 230, 238, 238, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 115,
	115, 115, 115, 115, 115, 243, 244,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 2, 0, 1, 1, 1, 1,
	1, 6, 6, 6, 6, 2, 13, 12, 14, 14,
	13, 12, 13, 12, 10, 7, 10, 7, 11, 11,
	9, 13, 16, 5, 8, 7, 6, 7, 6, 3,
	6, 3, 6, 3, 6, 11, 13, 13, 14, 14,
	6, 7, 1, 1, 4, 6, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 9, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 6, 1, 3, 3, 0, 1, 1, 1, 1,
	3, 1, 2, 3, 1, 2, 1, 1, 1, 2,
	3, 4, 2, 2, 2, 3, 5, 0, 2, 2,
	2, 2, 3, 5, 1, 2, 3, 7, 10, 1,
	1, 5, 5, 3, 5, 3, 1, 3, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 0, 3, 0, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 4, 2, 3, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 4, 1, 1, 0, 1, 2, 0, 3,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 0, 3, 0, 1, 0, 2, 3, 5, 5,
	7, 3, 5, 3, 5, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 3, 3, 6, 8, 3, 5,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 2, 4, 2, 4, 2, 2,
	3, 2, 3, 2, 7, 9, 3, 3, 6, 9,
	9, 6, 6, 8, 8, 5, 8, 7, 4, 0,
	2, 4, 6, 2, 4, 2, 1, 1, 2, 1,
	2, 2, 1, 1, 1, 3, 1, 2, 1, 1,
	2, 0, 4, 3, 4, 3, 3, 3, 3, 3,
	3, 3, 2, 4, 6, 2, 3, 2, 3, 1,
	3, 0, 2, 0, 2, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 3,
	0, 1, 0, 5, 0, 3, 5, 1, 1, 1,
	1, 3, 3, 2, 2, 2, 1, 1, 1, 1,
	4, 5, 4, 4, 4, 1, 2, 2, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 1, 3, 0, 3, 0, 3, 3,
	0, 3, 3, 0, 1, 0, 1, 0, 2, 1,
	0, 3, 3, 0, 1, 2, 6, 0, 1, 4,
	1, 2, 1, 3, 2, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 5, 3,
	3, 2, 3, 2, 3, 3, 2, 2, 3, 4,
	1, 1, 1, 1, 1, 3, 3, 2, 2, 4,
	1, 2, 5, 5, 8, 8, 13, 11, 1, 1,
	2, 2, 10, 8, 9, 7, 7, 5, 0, 1,
	1, 0, 1, 1, 1, 2, 2, 1, 2, 0,
	3, 0, 1, 1, 3, 0, 4, 1, 3, 2,
	1, 1, 2, 1, 1, 1, 1, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 3, 6, 4, 7, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 0, 4,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 8, 1, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 0, 4, 1, 3, 3, 2, 3, 2,
	1, 2, 0, 3, 1, 1, 3, 4, 4, 4,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 4,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 2, 1, 4, 5, 5, 5, 5, 6,
	4, 4, 6, 6, 8, 6, 6, 6, 8, 6,
	8, 6, 8, 6, 8, 9, 7, 5, 4, 4,
	3, 3, 3, 1, 3, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 2, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 0,
	2, 1, 1, 3, 5, 3, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 0, 3,
	0, 2, 1, 3, 1, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 1, 3,
	1, 1, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 5, 3,
	1, 3, 1, 2, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 2, 0, 2, 2, 0,
	1, 4, 1, 3, 2, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -239, -2, -1, -21, -22, -23, -24, -27, 126,
	132, 133, 127, 128, 70, 404, -173, 58, -235, -236,
	289, -193, 137, 150, 172, 173, 374, 134, 152, 135,
	386, 387, 154, 389, 79, -170, -116, 61, -170, -109,
	140, 136, 152, 56, -2, -174, -159, -116, -115, 63,
	36, 399, 400, 150, 173, 175, 302, 136, 136, 136,
	138, 226, 138, -116, -116, -81, 141, 61, -115, -122,
	63, -56, -122, 61, -115, 135, -116, 141, -116, 141,
	63, -111, 141, 389, 386, 387, 354, 56, 59, 56,
	135, -116, 141, -116, 141, 63, 135, 143, 136, 60,
	59, -160, -130, -132, -131, -134, -133, -135, -116, 63,
	-140, -141, -144, -142, -143, 262, 366, 259, 263, 260,
	265, 266, 267, 120, 264, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 268, 280, 33, 159,
	252, 253, 254, 257, 256, 258, 255, 281, 282, 283,
	284, 285, 286, 287, 288, 289, -136, -137, 245, -138,
	-139, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 244, 247, 248, 249, 251, 250, -160, -160, -160,
	-116, 56, 224, 225, -116, -116, -111, 227, -111, 56,
	-207, 19, 197, 198, 210, 56, 81, 123, 25, 123,
	-111, 81, 81, -56, 81, 135, -56, -116, 135, -56,
	-56, 318, 56, 26, 26, -56, -81, -116, -116, -177,
	-248, 369, 37, -159, -161, -166, -162, -163, -164, -165,
	-178, -167, 144, 142, 154, 402, 146, 147, 289, -171,
	148, 136, 155, 73, 81, -199, 144, -202, 56, 297,
	303, 142, 155, 154, 402, 71, 145, 25, 376, 378,
	31, 32, -154, 405, 291, -152, 300, 123, -147, 58,
	-146, 261, -148, 58, -147, -148, -147, -148, -150, 263,
	-150, -150, -150, -150, 58, 58, -147, -147, -147, -147,
	-147, 58, -147, -156, 58, -145, 246, -157, 58, 56,
	57, -56, -116, -116, 56, 56, 56, -56, -231, 399,
	400, -56, -56, -210, -208, 8, 9, 10, 211, -56,
	26, -117, -123, -116, 311, 149, -114, -115, -122, 131,
	198, 377, 80, 25, 27, 297, 303, 197, 84, 120,
	16, 85, 204, 386, 387, 119, 76, 355, 126, 52,
	347, 348, 345, 202, 357, 358, 346, 304, 209, 20,
	31, 10, 28, 157, 24, 113, 128, 199, 89, 88,
	160, 164, 165, 26, 158, 75, 205, 207, 19, 55,
	148, 11, 376, 13, 14, 391, 378, 141, 140, 100,
	390, 136, 50, 8, 122, 29, 97, 46, 155, 208,
	48, 98, 17, 349, 350, 34, 364, 166, 115, 53,
	40, 392, 81, 393, 73, 56, 318, 203, 79, 15,
	51, 167, 394, 206, 398, 99, 129, 354, 174, 49,
	200, 395, 134, 201, 6, 360, 33, 156, 47, 135,
	305, 396, 87, 139, 74, 5, 154, 9, 397, 54,
	57, 351, 352, 353, 38, 86, 12, 151, 368, 77,
	-130, -123, -114, -56, 26, 26, 26, -56, 139, -56,
	11, 131, -56, -56, -116, -116, 63, 97, 97, 97,
	-175, 59, -117, 71, -114, -115, 36, 58, -198, 56,
	81, -116, -169, 155, -171, 61, 136, -197, 386, 387,
	-243, 58, -171, -171, 61, 136, 155, 61, 155, 73,
	19, -116, 9, 155, 155, -198, 63, -56, 58, -195,
	377, 16, 58, -200, 58, -201, 63, 64, 65, 110,
	66, 73, -149, 72, -62, 292, -70, 345, 348, 347,
	293, 74, 75, -116, 363, 362, -122, -203, 65, 406,
	-153, 301, 63, -150, 65, -147, -150, 65, 61, -150,
	-150, -151, 120, 119, 33, -151, -151, -151, -151, -158,
	63, -158, -155, 368, 369, -155, 65, 65, -156, 65,
	-56, -116, 58, 56, 56, -56, -56, -56, 25, 138,
	25, -188, 25, 56, 59, 211, -207, -116, 123, 57,
	-116, -116, 63, 139, -170, 11, -170, -120, 144, -166,
	154, 131, 56, 63, 63, 73, 63, 90, -117, -248,
	-182, -179, -116, 155, 58, 10, 9, 19, 153, 142,
	154, 402, 148, -197, 61, 58, -42, -61, 81, -67,
	31, 26, 9, 76, -243, -66, -62, -81, -224, -79,
	-80, 120, 121, 109, 110, 117, 82, 122, -70, -68,
	-69, -71, -227, 184, 63, 64, -116, 62, 72, 65,
	66, 67, 68, 73, -122, 323, -77, 48, 49, 355,
	356, 357, 358, 364, 359, 85, 38, 40, 268, 292,
	293, 345, 353, 352, 351, 349, 350, 347, 348, 401,
	141, 346, 115, 354, 290, 61, 61, 61, 61, -197,
	154, -169, -116, 388, -199, 402, -149, -243, 58, -42,
	25, 31, -63, 65, 110, -200, 58, -201, -190, 401,
	65, 66, -190, -243, -147, 58, -147, 58, 58, -243,
	-243, -243, 123, -151, 60, -150, -151, 60, 60, -151,
	-151, 61, 61, 120, 60, 59, 60, 252, 252, 60,
	59, 60, 59, 58, 57, 56, -181, -182, -70, -116,
	-56, -56, 58, 58, 58, -3, -4, -5, 6, -243,
	-111, -3, -189, 19, 181, 182, -56, -208, -95, -116,
	155, -210, -207, -117, -116, -170, -170, -242, 136, 155,
	-116, 144, -166, -56, -176, -117, 63, 65, 60, 59,
	-147, -180, 295, -147, -42, -168, 177, 178, 33, 179,
	-168, 388, 58, 57, 155, -197, -243, 155, 58, -182,
	-244, 80, 79, 97, 212, 60, -42, -64, 100, 81,
	98, 99, 84, 106, 105, 116, 109, 110, 111, 112,
	113, 114, 115, 107, 108, 119, 401, 90, 91, 92,
	93, 94, 95, 96, 101, 102, 103, 104, -110, -243,
	-80, -243, -243, -243, -61, -3, -74, -243, -42, 124,
	125, -67, -243, -67, -67, -67, -67, -67, -67, -228,
	291, -190, 63, 123, 123, -243, -243, -243, -243, -243,
	-243, -243, -243, -84, -42, -243, 41, -243, -243, -243,
	-243, -250, -243, -250, -250, -250, -250, -250, -250, -129,
	120, 263, 159, 254, -136, -131, 269, 268, -243, -243,
	-243, -243, -197, 58, -198, -42, -95, 60, 58, 378,
	59, 65, 60, -200, 63, 60, 294, 122, -130, -244,
	60, 60, 60, -40, 24, -39, -41, 111, -42, -122,
	-39, -39, -117, -151, -150, 63, -150, 302, 302, 65,
	65, -181, -116, -56, 60, 58, 58, 58, -181, -95,
	-182, -88, 15, -30, 5, -28, -249, -3, -56, 139,
	21, 6, 8, 9, 10, 19, -113, 59, 25, -210,
	-241, 58, -116, 154, -116, -184, -186, 368, -185, 57,
	149, 71, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 61, -179, -91, 27, 28, 60, -198, 56, 73,
	180, -198, 56, -247, -116, -116, -197, 58, -42, -169,
	-182, 60, -194, 179, -42, -42, -72, 73, 81, 74,
	75, -67, 21, 22, 23, -73, -77, -80, 69, 100,
	98, 99, 84, -67, -67, -67, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -126, 61,
	63, 253, -129, 61, -81, -244, -244, -244, 59, -244,
	-3, -66, 63, -116, -66, -116, 405, -117, -117, -39,
	-39, -42, -128, 120, 259, 159, 254, -138, -137, -139,
	245, 278, 279, 299, 252, 300, -136, 257, 256, 258,
	269, 260, 265, 267, 266, 264, -42, -41, -41, -39,
	-33, 24, -82, -83, 86, -81, 19, -244, -244, -244,
	-244, -244, 261, -39, -40, -39, -39, -39, -170, -243,
	-244, 60, 374, 375, -42, 58, -63, 60, -154, -244,
	-39, 59, -244, -119, -118, 25, -116, 63, 123, -244,
	-244, -243, -151, -151, 60, 60, 60, 58, 58, -97,
	390, -181, -181, 60, 60, 60, -92, 17, 16, -6,
	-4, -243, 21, 24, -35, 44, 45, -29, -244, 25,
	-170, 199, -112, 86, -116, -211, -213, 228, -19, -16,
	-7, -9, -8, -11, -10, -12, -13, -14, -15, -25,
	-4, 141, -17, -18, -31, 10, 9, 20, 33, 203,
	204, 209, 205, 151, -32, 174, -26, 8, 354, 164,
	165, 56, -246, -116, 109, 110, 111, 112, 114, 106,
	105, 116, 123, 90, 91, 92, 63, 59, 58, 65,
	66, 67, 68, -115, -136, -137, -138, -139, 269, 274,
	275, 276, 277, 260, 259, 270, 271, 272, 73, 81,
	80, 79, 100, 97, 98, 84, 85, 86, 87, 89,
	88, 356, 355, 357, 358, 31, 144, 142, 154, 402,
	145, 58, 58, 386, 387, 142, -183, 56, -185, 368,
	58, 370, 61, -172, 90, 63, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, -91, 9, 10, 60,
	59, 368, 58, 58, -182, -244, 58, 60, -184, 361,
	73, 74, 75, -67, -67, -67, -73, -67, -67, -67,
	-38, 160, 80, 368, -244, -244, -42, -244, -229, -230,
	63, -244, -244, 59, 57, 59, -147, -147, -147, -157,
	-156, -145, 239, -147, 239, -147, -147, -147, -147, -147,
	-147, -147, 25, 59, 11, 59, 11, -244, -39, -85,
	-83, 89, -42, -244, -122, -244, -244, -244, -244, 60,
	-42, -194, 56, 60, -196, 60, 60, -244, -41, -232,
	403, -118, 111, -123, -232, -232, -40, -97, -181, -182,
	-60, 12, 58, 60, 60, -97, -60, -184, -93, 19,
	34, -42, -89, -90, -42, -88, -3, -33, 70, -3,
	-191, 57, 200, 228, -42, 404, -213, 228, -211, -88,
	-42, -28, -28, -28, -215, -116, -217, -214, 214, 215,
	-28, -238, -237, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 342, 343, 344, -116, -116, -116, -209, 40, 206,
	207, 208, -42, -116, -243, -84, -56, 60, -246, -246,
	-246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
	-246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
	-246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
	-246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
	-246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
	-246, -246, -246, -246, -246, -246, -182, -182, 58, 58,
	155, -116, -187, -185, -116, 65, -204, 56, 77, 65,
	-204, -204, -204, -204, -204, -205, 195, 196, 65, -206,
	-205, 65, -168, -168, -116, -116, -247, -182, 60, -194,
	-170, -184, -183, -38, 80, -67, -67, 252, 406, 59,
	-190, -128, 120, -126, -42, -150, 61, -156, -128, -67,
	-67, -67, -67, 365, -88, 88, -42, 87, 145, -244,
	10, 9, 374, 375, 60, 229, 380, 381, 166, 382,
	179, 383, 384, -243, 123, -244, -60, 60, 60, -184,
	-42, -95, -97, -97, -60, -184, 9, 100, 59, 18,
	59, -91, -92, -244, -34, 47, -192, 368, -42, -211,
	-212, -213, -213, -211, 404, 88, -92, 87, -20, -16,
	-17, -19, 228, -109, 11, -51, -56, -44, -45, -46,
	-47, -58, -80, -243, -56, 59, -216, -125, 201, 25,
	213, -102, -127, 230, -106, 313, 312, -117, 323, -104,
	311, 263, 310, -204, 59, -116, 11, 11, 11, 11,
	-213, 228, -75, -74, -75, -113, 19, 60, 60, 60,
	-182, -182, 58, -243, 60, 59, -198, -198, 368, 60,
	60, -184, 60, -183, -67, 302, -230, -244, -244, -244,
	59, -244, -244, 59, -244, 19, -244, 59, -244, 19,
	-243, -37, 360, -42, -56, -194, -168, -168, 368, -63,
	16, -63, -63, -63, 65, 381, 166, 383, 16, -244,
	167, -88, 111, -184, -60, -184, -183, 60, -60, -60,
	-184, -183, 42, -42, -42, -90, -93, -39, 402, 404,
	-213, 88, 88, -93, -211, 89, 89, -212, -57, 29,
	-56, -56, -51, -245, 59, 11, 57, 33, 59, -52,
	-54, -53, -55, 46, 50, 52, 47, 48, 49, 53,
	-125, -44, -243, -124, 167, -122, 25, -214, -116, 202,
	-130, 19, 59, -102, 230, -103, -107, 314, 316, 90,
	123, -121, -116, 63, 31, 33, -237, 29, -212, -244,
	-112, 199, -246, -225, 220, 81, 60, 60, -182, -116,
	-185, -116, -184, -183, 145, -67, -67, -67, -67, -67,
	-67, -244, 63, 58, -63, -63, 385, -122, 16, -244,
	-183, -184, -184, -184, -183, 43, -43, 11, -42, 88,
	-213, 404, -17, -20, 141, -18, 141, 404, 88, -98,
	167, -56, -98, 57, -44, -56, -101, -105, -81, -45,
	-46, -46, -45, -46, 46, 46, 46, 51, 46, 51,
	46, -53, -122, -244, -59, 54, 140, 55, -243, -122,
	19, -219, -218, 65, 218, 217, 81, 216, -116, -106,
	-103, 59, 315, 317, 318, 56, 77, -42, -117, -151,
	-170, 88, 228, 200, -226, 221, 220, -184, -184, 60,
	-244, -183, -56, -244, -244, -244, -244, -244, -36, 100,
	368, -170, 123, -233, -234, -42, -183, -183, -60, -44,
	88, 89, -42, -42, -65, 33, 38, -3, -243, -243,
	-60, -44, -60, -43, 59, 90, -49, -48, 56, 57,
	-50, 56, -48, 46, 46, -222, 368, 136, 136, 136,
	-99, -116, -3, -220, 59, -213, 228, 63, 41, 219,
	-107, -108, 319, 316, 322, 90, -212, 223, 222, -183,
	-183, 58, -244, 366, 53, 371, 60, -117, -244, -88,
	59, -86, 13, 141, -211, -20, -20, -100, 56, -101,
	-76, -78, -77, -243, -3, -94, -96, 6, -116, -114,
	-115, -99, -88, -60, -60, -105, -42, -42, 58, -42,
	58, -243, -243, -243, -244, 59, -218, 88, -211, 63,
	316, 320, 321, -42, 404, -170, 43, 367, 372, -244,
	-234, -87, 14, 16, 404, 30, -100, 59, -244, -244,
	-244, 59, 123, -244, -92, -88, -95, -221, -223, 391,
	392, 393, 394, 395, 396, 397, 398, -95, -95, -95,
	-124, -116, 88, 404, 88, 60, 43, -42, -74, 88,
	155, -78, 38, -3, -243, -96, -116, -92, 60, 60,
	59, -244, -244, -244, -59, 88, 368, 141, 9, -76,
	-3, -223, -222, 371, -101, -244, 372,
}

var yyDef = [...]int16{
	0, -2, 1, 2, 7, 8, 9, 10, 0, -2,
	0, 0, 930, 0, 0, 4, 15, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 928,
	542, 543, 544, 547, 0, 0, 553, 932, 0, 0,
	931, 0, 0, 0, 3, 0, 268, 319, 319, 319,
	319, 1109, 1110, 1111, 1112, 1113, 1114, 0, 0, 0,
	928, 0, 928, 0, 851, 0, 0, -2, -2, 0,
	940, 0, 654, 938, 939, 928, 39, 0, 41, 0,
	43, 0, 0, 548, 545, 546, 256, 0, 0, 0,
	0, 257, 0, 261, 0, 263, 0, 0, 0, 555,
	0, 280, 457, 453, 285, 286, 287, 288, 289, 0,
	367, 368, 369, 370, 371, 408, 409, 445, 432, 447,
	445, 447, 415, 445, 447, 460, 460, 460, 460, 460,
	423, 424, 425, 426, 427, 428, 429, 0, 0, 400,
	445, 445, 445, 445, 445, 406, 407, 434, 435, 436,
	437, 438, 439, 440, 441, 0, 445, 392, 390, 394,
	399, 372, 373, 374, 375, 376, 377, 378, 379, 380,
	381, 383, 384, 386, 387, 397, 398, 281, 282, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 203, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 0, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 851, 0, 266,
	557, 0, 560, 269, 270, 271, 272, 273, 274, 275,
	0, 549, 551, 0, 538, 0, 0, 0, 0, 0,
	0, 510, 511, 292, 0, 294, 0, 296, 0, 298,
	299, 0, 301, 303, 549, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 459, 455, 454, 0, 460, 0,
	445, 433, 460, 0, 460, 460, 416, 417, 463, 0,
	463, 463, 463, 463, 0, 0, 450, 450, 403, 404,
	405, 0, 382, 385, 0, 392, 391, 388, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	138, 0, 240, 0, 210, 206, 207, 208, 205, 0,
	0, 853, 0, 933, 934, 935, -2, -2, 941, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	33, 655, 942, 0, 0, 0, 929, 0, 0, 0,
	0, 253, 0, 259, 258, 262, 264, 0, 0, 0,
	0, 0, 561, 563, 936, 937, 559, 0, 521, 0,
	0, 552, 0, 538, 0, 506, -2, 0, 539, 540,
	949, 1115, 0, 0, 501, 503, 0, 538, 551, 293,
	0, 0, 0, 300, 302, 0, 306, 307, 949, 0,
	339, 0, 0, 320, 0, 323, -2, 326, 327, 0,
	329, 363, 332, 333, 334, 0, 336, 445, 445, 359,
	0, 674, 675, 0, 0, 0, 0, 337, 338, 458,
	284, 456, 290, 463, 0, 460, 463, 0, 0, 463,
	463, 418, 464, 0, 0, 419, 420, 421, 422, 0,
	443, 0, 401, 0, 0, 402, 0, 0, 389, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 928,
	0, 243, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 42, 44, 0, 36, 0, 38, 0, 551, 50,
	254, 0, 0, 11, 12, 13, 14, 0, 562, 558,
	0, 514, 445, 445, 949, 0, 0, 0, 0, 0,
	538, 0, 0, 0, 505, 0, 0, 664, 949, 670,
	672, 0, 0, 0, 949, 717, 718, 719, 720, 721,
	722, 949, 949, 949, 949, 949, 949, 949, 748, 749,
	750, 751, 0, 753, -2, 857, 851, 859, 860, 861,
	862, 863, 864, 865, 0, 0, 909, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 783, 793, 793, 793, 793, 793, 793, 793, 0,
	0, 0, 0, 0, 950, 499, 500, 502, 504, 508,
	538, 0, 552, 318, 295, 549, 297, 949, 0, 0,
	0, 340, 0, 866, 0, 0, 0, 0, 325, 0,
	328, 330, 331, 0, 355, 0, 357, 0, 0, -2,
	949, 949, 0, 410, 446, 463, 412, 448, 449, 413,
	414, 465, 461, 462, 460, 0, 460, 0, 0, 442,
	0, 395, 0, 0, 0, 0, 0, 512, 513, 445,
	0, 0, 0, 0, 0, -2, 875, 0, 567, 0,
	0, -2, 0, 0, 241, 242, 238, 211, 209, 622,
	623, 0, 0, 854, 141, 35, 37, 0, 52, 53,
	552, 551, 51, 260, 556, 564, 565, 566, 467, 0,
	880, 518, 520, 517, 0, 549, 528, 529, 0, 0,
	549, 550, 0, 0, 538, 0, 949, 551, 0, 0,
	361, 949, 949, 0, 669, 1116, 667, 949, 0, 0,
	949, 949, 949, 949, 949, 949, 949, 949, 949, 949,
	949, 949, 949, 949, 949, 0, 0, 698, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 671, 0,
	688, 0, 0, 0, 664, 57, 0, 949, 715, 0,
	0, 739, 949, 740, 741, 742, 743, 744, 745, 752,
	0, 856, 858, 0, 0, 949, 949, 949, 949, 949,
	949, 949, 577, 0, 841, 0, 0, 0, 0, 0,
	0, 785, 0, 786, 787, 788, 789, 790, 791, 792,
	832, 0, 834, 835, 836, 837, 838, 839, 949, -2,
	949, 949, 509, 0, 0, 0, 0, 0, 949, 315,
	0, 867, 321, 0, 363, 324, 364, 365, 457, 335,
	356, 358, 360, 0, 949, 0, 583, 585, 589, 0,
	0, 0, 0, 411, 463, 444, 463, 451, 452, 0,
	0, 0, 0, 0, 662, 1115, 0, 0, 0, 0,
	0, 883, 0, 0, 571, 574, 569, 57, 0, 0,
	244, 245, 246, 247, 248, 0, 847, 0, 0, 0,
	34, 143, 0, 0, 552, 496, 468, 0, 470, 0,
	488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 515, 516, 881, 882, 880, 522, 0, 530,
	531, 523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 467, 537, 0, 665, 666, 668, 692, 0, 694,
	696, 676, 949, 949, 949, 680, 711, 712, 713, 0,
	949, 949, 949, 709, 684, 0, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 737, 804,
	805, 0, 747, 0, 0, 690, 691, 714, 949, 908,
	57, 735, 363, 0, 736, 746, 0, 853, 855, 0,
	0, 0, 0, -2, 445, 809, 445, 394, 392, 813,
	390, 815, 816, 817, 445, 820, 445, 445, 445, 825,
	826, 445, 445, 829, 445, 445, 0, 0, 0, 0,
	949, 578, 849, 844, 949, 0, 0, 780, 781, 782,
	784, 794, 833, 0, 0, 582, 0, 0, 0, 949,
	361, 308, 311, 312, 0, 341, 0, 0, 366, 754,
	0, 949, 594, 586, 590, 0, 592, 593, 0, 594,
	594, -2, 430, 431, 393, 396, 662, 0, 0, 660,
	0, 0, 0, 662, 660, 467, 887, 949, 949, 875,
	59, 0, 572, 573, 577, 575, 576, 568, 58, 0,
	249, 0, 0, 949, 624, 30, 212, 0, 218, 219,
	220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
	875, 949, 119, 120, 567, 567, 567, 0, 567, 0,
	0, 0, 107, 949, 0, -2, 920, 63, 64, 233,
	234, 0, 0, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 0, 0, 0, 0, 0, 466, 0, 471, 0,
	0, 0, 474, 0, 489, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 0, 0, 276,
	0, 0, 0, 0, 0, 361, 0, 467, 496, 362,
	693, 695, 697, 677, 678, 679, 681, 709, 685, 0,
	682, 949, 949, 0, 673, 689, 716, -2, 0, 952,
	363, 760, 761, 0, 0, 949, 806, 460, 810, 811,
	812, 392, 818, 819, 821, 822, 823, 824, 827, 828,
	830, 831, 0, 949, 949, 949, 949, 0, 875, 0,
	845, 949, 0, 778, 779, 795, 796, 797, 798, 0,
	0, 304, 0, 0, 0, 317, 322, 755, 584, 756,
	0, 591, 587, 0, 757, 758, 0, 660, 0, 0,
	467, 949, 0, 662, 662, 660, 467, 24, 54, 0,
	0, 884, 876, 877, 880, 883, 57, 579, 570, -2,
	251, 949, 239, 0, 848, 0, 215, 0, 0, 883,
	0, 930, 0, 0, 79, -2, 0, 82, 87, 88,
	0, 0, 955, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 102, 103, 104, 0, 0, 0,
	0, 0, 0, -2, -2, 237, 238, 142, 144, 145,
	146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 0, 160, 161, 162, 163, 164, 165,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 0, 0, 0, 0,
	0, 497, 0, 472, 477, 475, 478, 490, 491, 479,
	480, 481, 482, 483, 484, 485, 492, 493, 486, 487,
	494, 495, 549, 549, 0, 278, 0, 0, 467, 536,
	0, 496, 535, 683, 949, 710, 686, 0, 951, 0,
	954, 0, 445, 0, 0, 807, 808, 814, 0, 0,
	0, 0, 0, 0, 842, 777, 850, 949, 0, 361,
	0, 0, 313, 314, 316, 0, 0, 0, 0, 0,
	0, 352, 0, 0, 0, 759, 467, 660, 467, 496,
	661, 0, 660, 660, 467, 496, 888, 0, 949, 949,
	949, 879, 887, 60, 949, 580, 28, 0, 250, 29,
	0, 114, 213, 0, 0, 216, 887, 0, 125, 123,
	119, 126, 0, 0, 0, 0, 71, 0, 601, 603,
	604, 605, 637, 0, 639, 0, 0, 0, 86, 638,
	0, 75, 0, 0, 913, 139, 140, 0, 0, 0,
	-2, 0, 924, 921, 0, 105, 108, 109, 110, 111,
	112, 0, 231, 236, 0, 847, 0, 143, 45, 943,
	0, 0, 0, 0, 469, 0, 524, 525, 0, 277,
	467, 496, 0, 533, 687, 738, 953, 762, 766, 763,
	949, 765, 767, 949, 769, 949, 771, 949, 773, 949,
	949, 0, 0, 846, 0, 305, 309, 310, 0, 343,
	0, 345, 346, 347, 348, 349, 350, 351, 0, 595,
	0, 0, 588, 496, 467, 21, 17, 663, 467, 467,
	496, 23, 0, 885, 886, 878, 55, 599, 949, 0,
	115, 217, 214, 230, 0, 0, 0, 0, 73, 0,
	653, -2, 0, 0, 0, 69, 70, 0, 0, 0,
	0, 0, 0, 642, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 656, 0, 640, 0, 83, 637, 0,
	84, 0, 0, 76, 0, 78, 128, 0, 0, 949,
	0, 463, 925, 926, 927, 923, 956, 0, 0, 232,
	0, 0, 159, 946, 944, 0, 467, 467, 0, 0,
	473, 279, 496, 534, 0, 0, 0, 0, 0, 0,
	799, 776, 843, 0, 342, 344, 353, 0, 949, 597,
	16, 22, 496, 496, 20, 889, 660, 0, 252, 31,
	116, 0, 121, 122, 949, 124, 949, 0, 127, 0,
	0, 652, 660, 0, 660, 72, 599, 910, 0, 602,
	633, 635, 0, 630, 643, 644, 646, 0, 648, 0,
	650, 651, 606, 607, 608, 0, 0, 0, 0, 641,
	0, 0, 89, 91, 0, 94, 0, 96, 97, 914,
	77, 0, 0, 131, 132, 915, 916, 917, 0, 919,
	106, 113, 0, 239, 47, 0, 945, 496, 496, 46,
	498, 532, 0, 764, 768, 770, 772, 774, 0, 0,
	0, 0, 0, 0, 872, 874, 18, 19, 868, 600,
	0, 0, 0, 0, 902, 0, 0, -2, 0, 0,
	875, 660, 68, 660, 0, 949, 627, 634, 949, 0,
	628, 949, 629, 647, 649, 620, 0, 0, 0, 0,
	0, 625, -2, 81, 0, 98, 0, 92, 0, 95,
	129, 130, 0, 0, 136, 949, 0, 947, 948, 48,
	49, 0, 775, 0, 0, 0, 527, 354, 596, 0,
	949, 870, 0, 117, 0, 0, 125, 61, 0, 902,
	890, 904, 906, 949, 57, 0, 896, -2, 898, 900,
	901, 0, 883, 67, 875, 911, 912, 631, 0, 636,
	0, 0, 0, 0, 639, 0, 90, 99, 0, 93,
	133, 134, 135, 918, 0, 0, 800, 0, 803, 598,
	873, 56, 949, 949, 0, 0, 62, 0, 907, -2,
	0, 0, 0, 74, 66, 883, 0, 0, 610, 612,
	613, 614, 615, 616, 617, 618, 619, 0, 0, 0,
	656, 626, 100, 0, 32, 526, 801, 871, 869, 0,
	0, 905, 0, -2, 0, 897, 899, 65, 632, 609,
	0, 657, 658, 659, 608, 101, 0, 118, 0, 893,
	57, 611, 621, 0, 903, -2, 802,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 404,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 405, 3, 406, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:435
		{
			switch len(yyDollar[1].statements) {
			case 0:
				setParseTree(yylex, nil)
			case 1:
				setParseTree(yylex, yyDollar[1].statements[0])
			default:
				setParseTree(yylex, &MultiStatement{Statements: yyDollar[1].statements})
			}
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:448
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:452
		{
			yyVAL.statements = append([]Statement{yyDollar[1].statement}, yyDollar[3].statements...)
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:456
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:461
		{
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:462
		{
		}
	case 11:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:472
		{
			tableName := ""
			if !yyDollar[4].tableName.Schema.isEmpty() {
				tableName = yyDollar[4].tableName.Schema.String() + "."
			}
			tableName += yyDollar[4].tableName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Table:  yyDollar[4].tableName,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     tableName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 12:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:489
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:508
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    "",
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:527
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "INDEX",
					Object:     yyDollar[4].colIdent.String(),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:540
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 16:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:545
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 17:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:565
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 18:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:585
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 19:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:606
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:627
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 21:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:649
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 22:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:665
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 23:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:682
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:702
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:717
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:728
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:740
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:751
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 29:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:767
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:781
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 31:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:795
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 32:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:808
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:822
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:833
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:838
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:858
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[4].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:879
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:899
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[4].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:920
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:929
		{
			yyVAL.statement = &DDL{
				Action:      CreateSchema,
				IfNotExists: true,
				Schema: &Schema{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:940
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:949
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:959
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:968
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: string(yyDollar[6].bytes),
				},
			}
		}
	case 45:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:980
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 46:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:994
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 47:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1008
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 48:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1028
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 49:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1046
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1064
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1073
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1088
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 56:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1103
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1109
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1113
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1119
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1123
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1130
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 62:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1142
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1154
		{
			yyVAL.str = InsertStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1158
		{
			yyVAL.str = ReplaceStr
		}
	case 65:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1164
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1170
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 67:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1174
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 68:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1178
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1183
		{
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1184
		{
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1192
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1197
		{
			yyVAL.partitions = nil
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1201
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1207
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1211
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1215
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1219
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1225
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1229
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 81:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1240
		{
			yyVAL.statement = &Declare{
				Type: declareHandler,
				Handler: &HandlerDefinition{
					Action:     yyDollar[2].str,
					Conditions: yyDollar[5].handlerConditions,
					Statement:  yyDollar[6].statement,
				},
			}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1253
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1257
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1263
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1268
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1272
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1278
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1282
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1288
		{
			yyVAL.handlerConditions = []HandlerCondition{yyDollar[1].handlerCondition}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1292
		{
			yyVAL.handlerConditions = append(yyVAL.handlerConditions, yyDollar[3].handlerCondition)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1298
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionMysqlErrorCode, Value: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1302
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[2].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1306
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[3].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1310
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlwarning}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1314
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionNotFound}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1318
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlexception}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1322
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionName, Value: string(yyDollar[1].colIdent.String())}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1328
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1332
		{
			yyVAL.statement = &BeginEnd{
				Statements:        []Statement{},
				SuppressSemicolon: false,
			}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1339
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1346
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1355
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1362
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1369
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1376
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1384
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1394
		{
			yyVAL.str = ""
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1398
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1402
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1406
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1410
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1416
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1423
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1437
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1441
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1445
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 117:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1452
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 118:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1460
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1470
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1474
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1481
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1491
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1502
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1507
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1512
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1519
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1523
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1534
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1538
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1544
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1548
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1552
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1558
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1562
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1566
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1570
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1576
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1580
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1586
		{
			yyVAL.str = SessionStr
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1590
		{
			yyVAL.str = GlobalStr
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1663
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1667
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1671
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1675
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1681
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1685
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1689
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1694
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1700
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1704
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1710
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1714
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1719
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1728
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1732
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1741
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1757
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1770
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1780
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1785
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1791
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1792
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1795
		{
			yyVAL.exprs = nil
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1796
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1800
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1805
		{
			yyVAL.empty = struct{}{}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1807
		{
			yyVAL.empty = struct{}{}
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1810
		{
			yyVAL.bytes = nil
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1814
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1818
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1823
		{
			yyVAL.bytes = nil
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1827
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1831
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1835
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1839
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1843
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1848
		{
			yyVAL.expr = nil
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1852
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1857
		{
			yyVAL.expr = nil
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1861
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1866
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1870
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1875
		{
			yyVAL.bytes = nil
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1879
		{
			yyVAL.bytes = nil
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1885
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1894
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1904
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				Table:  yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1914
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				Table:    yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1926
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1935
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: yyDollar[5].colIdent.String(),
				},
			}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1945
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1954
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: string(yyDollar[5].bytes),
				},
			}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1966
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1973
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1979
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1983
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1988
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1992
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1996
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2000
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2004
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2008
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2012
		{
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2018
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
			}
		}
	case 277:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2024
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
			}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2036
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2040
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2045
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2050
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2056
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2067
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + "." + string(yyDollar[3].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2077
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2090
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2095
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2100
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2105
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2111
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2116
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2121
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2126
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2131
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2136
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2141
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2146
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 304:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2151
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 305:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2160
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2170
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2175
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 308:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2180
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 309:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2187
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 310:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2194
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 311:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2202
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2207
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 313:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2212
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 314:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2217
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2223
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 316:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2229
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2236
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2243
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2249
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2255
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2259
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 322:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2263
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2267
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2271
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2277
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2281
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2285
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2289
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2293
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2297
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2301
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2305
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2309
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2313
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2317
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2323
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2329
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2341
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2345
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2350
		{
			yyVAL.sequence = &Sequence{}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2354
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2359
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2364
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2369
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2374
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2379
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2384
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2389
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2394
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2399
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2404
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2409
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 354:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2414
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2421
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2425
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2429
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2433
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2437
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2441
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2446
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2450
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2455
		{
			yyVAL.bytes = nil
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2483
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), DisplayWidth: yyDollar[2].optVal}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2493
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2505
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2513
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2520
		{
			yyVAL.str = ""
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2524
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2529
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2533
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2541
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2551
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2564
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2590
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2594
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2604
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2608
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2642
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2658
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2662
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2666
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2670
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2674
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2678
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2699
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2704
		{
			yyVAL.str = ""
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2708
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2752
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2757
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2762
		{
			yyVAL.optVal = nil
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2766
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2771
		{
			yyVAL.optVal = nil
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2775
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2779
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2788
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2792
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2796
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2801
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2805
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2810
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2814
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2819
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2823
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2827
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2832
		{
			yyVAL.str = ""
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2836
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2840
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2845
		{
			yyVAL.str = ""
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2849
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2853
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2859
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2864
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2868
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2872
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2878
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2882
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2888
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2892
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2902
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2907
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2911
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2915
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2919
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2923
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2927
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2931
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2935
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2939
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2943
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2947
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2951
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2962
		{
			yyVAL.str = ""
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2966
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2972
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2976
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2982
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2986
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2992
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2996
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3002
		{
			yyVAL.indexPartition = nil
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3006
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 498:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3010
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3016
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3020
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3024
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3028
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3032
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3036
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3040
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3044
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3048
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3052
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3056
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3062
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3066
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3072
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3077
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3083
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3087
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3093
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3098
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3102
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3106
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3116
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3121
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 523:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3128
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 524:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3135
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 525:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3142
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 526:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3151
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 527:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3162
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3173
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3177
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3181
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3185
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 532:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3191
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 533:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3201
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 534:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3212
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 535:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3223
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 536:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3234
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3243
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3252
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3256
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3260
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3266
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3270
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3274
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3278
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3282
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3286
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3292
		{
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3293
		{
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3297
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3301
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3306
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3313
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3317
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3324
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3328
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3334
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3338
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3343
		{
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3344
		{
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3348
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3352
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3356
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3362
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3366
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3370
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3375
		{
			setAllowComments(yylex, true)
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3379
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3385
		{
			yyVAL.bytes2 = nil
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3389
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3395
		{
			yyVAL.str = UnionStr
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3399
		{
			yyVAL.str = UnionAllStr
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3403
		{
			yyVAL.str = UnionDistinctStr
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3408
		{
			yyVAL.str = ""
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3412
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3416
		{
			yyVAL.str = SQLCacheStr
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3421
		{
			yyVAL.str = ""
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3425
		{
			yyVAL.str = DistinctStr
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3430
		{
			yyVAL.str = ""
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3434
		{
			yyVAL.str = StraightJoinHint
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3439
		{
			yyVAL.selectExprs = nil
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3443
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3449
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3453
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3459
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 588:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3476
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3480
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3484
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3491
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3496
		{
			yyVAL.overExpr = nil
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3500
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 596:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3504
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3508
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 598:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3512
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3517
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3521
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3527
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3531
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3541
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3545
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3549
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.strs = []string{}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3558
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3564
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3568
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3574
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3586
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3590
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3594
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3598
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3602
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3608
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 621:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3612
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3618
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3623
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3627
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3633
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3637
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3650
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3654
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3658
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3662
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3668
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3670
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3674
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3676
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3680
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3682
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3685
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3687
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3690
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3694
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3698
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.str = JoinStr
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3708
		{
			yyVAL.str = JoinStr
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3712
		{
			yyVAL.str = JoinStr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.str = StraightJoinStr
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3724
		{
			yyVAL.str = LeftJoinStr
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3728
		{
			yyVAL.str = LeftJoinStr
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3732
		{
			yyVAL.str = RightJoinStr
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3736
		{
			yyVAL.str = RightJoinStr
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3742
		{
			yyVAL.str = NaturalJoinStr
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3746
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3756
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3760
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3766
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3770
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3775
		{
			yyVAL.indexHints = nil
		}
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3779
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 658:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3783
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 659:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3792
		{
			yyVAL.expr = nil
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3796
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3801
		{
			yyVAL.columns = nil
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3805
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3811
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3815
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3819
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3823
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3827
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3831
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3835
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3839
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3845
		{
			yyVAL.str = ""
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3849
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3855
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3859
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3865
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3869
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3873
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3877
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3881
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3885
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3889
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 683:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3893
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3897
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3901
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3905
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 687:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3909
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3913
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 689:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3918
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3922
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3926
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3932
		{
			yyVAL.str = IsNullStr
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3936
		{
			yyVAL.str = IsNotNullStr
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3940
		{
			yyVAL.str = IsTrueStr
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3944
		{
			yyVAL.str = IsNotTrueStr
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3948
		{
			yyVAL.str = IsFalseStr
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3952
		{
			yyVAL.str = IsNotFalseStr
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3958
		{
			yyVAL.str = EqualStr
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3962
		{
			yyVAL.str = LessThanStr
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3966
		{
			yyVAL.str = GreaterThanStr
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3970
		{
			yyVAL.str = LessEqualStr
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3974
		{
			yyVAL.str = GreaterEqualStr
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3978
		{
			yyVAL.str = NotEqualStr
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3982
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3986
		{
			yyVAL.str = PosixRegexStr
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3990
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3994
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3998
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4003
		{
			yyVAL.expr = nil
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4007
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4013
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4017
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4021
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4027
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4033
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4037
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4043
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4047
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4051
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4055
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4059
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4063
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4067
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4071
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4075
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4079
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4083
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4087
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4091
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4095
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4099
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4103
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4107
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4111
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4115
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4119
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4123
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 738:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4127
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4131
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4139
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4147
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4161
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4165
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4169
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4177
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4207
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 755:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 756:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 757:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4219
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 758:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4223
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 759:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4227
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 760:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4237
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4241
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 762:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4245
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 763:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4250
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 764:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4254
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 765:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4258
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 766:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4262
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 767:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4266
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 768:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4270
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 769:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4274
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 770:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4278
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 771:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4282
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 772:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4286
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 773:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4290
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 774:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4294
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 775:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4298
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 776:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4302
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 777:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4306
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 778:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4310
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 779:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4315
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4319
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4323
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4327
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4338
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4342
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4346
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4350
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4354
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4359
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4364
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4369
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4374
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4378
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 795:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4392
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 796:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4396
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4400
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 798:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4404
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4410
		{
			yyVAL.str = ""
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4414
		{
			yyVAL.str = BooleanModeStr
		}
	case 801:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4418
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 802:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4422
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4426
		{
			yyVAL.str = QueryExpansionStr
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4432
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4436
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4442
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4446
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4450
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4454
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4458
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4462
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4468
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4474
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4478
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.convertType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4484
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4488
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4496
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4500
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4504
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4508
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4512
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4516
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4520
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4524
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4528
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4532
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4536
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4540
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4544
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4548
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4554
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4558
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4562
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4566
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4570
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4574
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4578
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4582
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4587
		{
			yyVAL.expr = nil
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4591
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4596
		{
			yyVAL.str = string("")
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4600
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4606
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4610
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 846:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4616
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4621
		{
			yyVAL.empty = struct{}{}
		}
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4623
		{
			yyVAL.empty = struct{}{}
		}
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4626
		{
			yyVAL.expr = nil
		}
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4630
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4636
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4640
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4644
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 854:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4648
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4654
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4660
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4664
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4669
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4674
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4678
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4682
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4686
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4690
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4694
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4698
		{
			yyVAL.expr = &NullVal{}
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4704
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4708
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4713
		{
			yyVAL.exprs = nil
		}
	case 869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4717
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 870:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4722
		{
			yyVAL.expr = nil
		}
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4726
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4732
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 873:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4736
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4742
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 875:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4747
		{
			yyVAL.orderBy = nil
		}
	case 876:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4751
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4757
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4761
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4767
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4772
		{
			yyVAL.str = AscScr
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4776
		{
			yyVAL.str = AscScr
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4780
		{
			yyVAL.str = DescScr
		}
	case 883:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4785
		{
			yyVAL.limit = nil
		}
	case 884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4789
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 885:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4793
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 886:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4797
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4802
		{
			yyVAL.str = ""
		}
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4806
		{
			yyVAL.str = ForUpdateStr
		}
	case 889:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4810
		{
			yyVAL.str = ShareModeStr
		}
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4823
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4827
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4831
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 893:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4836
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 894:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4840
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 895:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4844
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4851
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4855
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4861
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4865
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4869
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4873
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 902:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4878
		{
			yyVAL.updateExprs = nil
		}
	case 903:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4882
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4888
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4892
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4898
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4902
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4908
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4914
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4924
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4928
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4934
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4940
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4944
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4950
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4954
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4958
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 918:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4963
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4967
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4973
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4979
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4986
		{
			yyVAL.bytes = []byte("charset")
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4993
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4997
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5001
		{
			yyVAL.expr = &Default{}
		}
	case 928:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5006
		{
			yyVAL.empty = struct{}{}
		}
	case 929:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5008
		{
			yyVAL.empty = struct{}{}
		}
	case 930:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5011
		{
			yyVAL.str = ""
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5013
		{
			yyVAL.str = IgnoreStr
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5017
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5024
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5028
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5032
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5036
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5042
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5046
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5051
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5058
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5064
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5068
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 945:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5072
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 946:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5078
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 947:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5082
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 948:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5086
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 949:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5092
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5096
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 951:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5103
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5110
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5114
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 954:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5121
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5127
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 956:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5131
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5308
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5317
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
