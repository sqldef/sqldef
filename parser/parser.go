// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex any, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex any, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex any, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex any) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex any) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex any) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	statements               []Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
	handlerCondition         HandlerCondition
	handlerConditions        []HandlerCondition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const GRANT = 57457
const REVOKE = 57458
const OPTION = 57459
const PRIVILEGES = 57460
const SCHEMA = 57461
const TABLE = 57462
const INDEX = 57463
const MATERIALIZED = 57464
const VIEW = 57465
const TO = 57466
const IGNORE = 57467
const IF = 57468
const PRIMARY = 57469
const COLUMN = 57470
const CONSTRAINT = 57471
const REFERENCES = 57472
const SPATIAL = 57473
const FULLTEXT = 57474
const FOREIGN = 57475
const KEY_BLOCK_SIZE = 57476
const POLICY = 57477
const WHILE = 57478
const EXTENSION = 57479
const EXCLUDE = 57480
const UNIQUE = 57481
const KEY = 57482
const SHOW = 57483
const DESCRIBE = 57484
const EXPLAIN = 57485
const DATE = 57486
const ESCAPE = 57487
const REPAIR = 57488
const OPTIMIZE = 57489
const TRUNCATE = 57490
const EXEC = 57491
const EXECUTE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const TYPE = 57500
const RETURN = 57501
const STATUS = 57502
const VARIABLES = 57503
const RESTRICT = 57504
const CASCADE = 57505
const NO = 57506
const ACTION = 57507
const PERMISSIVE = 57508
const RESTRICTIVE = 57509
const PUBLIC = 57510
const CURRENT_USER = 57511
const SESSION_USER = 57512
const PAD_INDEX = 57513
const FILLFACTOR = 57514
const IGNORE_DUP_KEY = 57515
const STATISTICS_NORECOMPUTE = 57516
const STATISTICS_INCREMENTAL = 57517
const ALLOW_ROW_LOCKS = 57518
const ALLOW_PAGE_LOCKS = 57519
const DISTANCE = 57520
const M = 57521
const EUCLIDEAN = 57522
const COSINE = 57523
const BEFORE = 57524
const AFTER = 57525
const EACH = 57526
const ROW = 57527
const SCROLL = 57528
const CURSOR = 57529
const OPEN = 57530
const CLOSE = 57531
const FETCH = 57532
const PRIOR = 57533
const FIRST = 57534
const LAST = 57535
const DEALLOCATE = 57536
const INSTEAD = 57537
const OF = 57538
const OUTPUT = 57539
const HANDLER = 57540
const CONTINUE = 57541
const EXIT = 57542
const SQLEXCEPTION = 57543
const SQLWARNING = 57544
const SQLSTATE = 57545
const FOUND = 57546
const DEFERRABLE = 57547
const INITIALLY = 57548
const IMMEDIATE = 57549
const DEFERRED = 57550
const CONCURRENTLY = 57551
const ASYNC = 57552
const SQL = 57553
const SECURITY = 57554
const BEGIN = 57555
const START = 57556
const TRANSACTION = 57557
const COMMIT = 57558
const ROLLBACK = 57559
const BIT = 57560
const TINYINT = 57561
const SMALLINT = 57562
const SMALLSERIAL = 57563
const MEDIUMINT = 57564
const INT = 57565
const INTEGER = 57566
const SERIAL = 57567
const BIGINT = 57568
const BIGSERIAL = 57569
const INTNUM = 57570
const REAL = 57571
const DOUBLE = 57572
const PRECISION = 57573
const FLOAT_TYPE = 57574
const DECIMAL = 57575
const NUMERIC = 57576
const SMALLMONEY = 57577
const MONEY = 57578
const TIME = 57579
const TIMESTAMP = 57580
const DATETIME = 57581
const YEAR = 57582
const DATETIMEOFFSET = 57583
const DATETIME2 = 57584
const SMALLDATETIME = 57585
const CHAR = 57586
const VARCHAR = 57587
const VARYING = 57588
const BOOL = 57589
const CHARACTER = 57590
const VARBINARY = 57591
const NCHAR = 57592
const NVARCHAR = 57593
const NTEXT = 57594
const UUID = 57595
const TEXT = 57596
const TINYTEXT = 57597
const MEDIUMTEXT = 57598
const LONGTEXT = 57599
const CITEXT = 57600
const TSTZRANGE = 57601
const TSRANGE = 57602
const INT4RANGE = 57603
const INT8RANGE = 57604
const NUMRANGE = 57605
const DATERANGE = 57606
const BLOB = 57607
const TINYBLOB = 57608
const MEDIUMBLOB = 57609
const LONGBLOB = 57610
const JSON = 57611
const JSONB = 57612
const ENUM = 57613
const GEOMETRY = 57614
const POINT = 57615
const LINESTRING = 57616
const POLYGON = 57617
const GEOMETRYCOLLECTION = 57618
const MULTIPOINT = 57619
const MULTILINESTRING = 57620
const MULTIPOLYGON = 57621
const VECTOR = 57622
const VARIADIC = 57623
const ARRAY = 57624
const NOW = 57625
const GETDATE = 57626
const BPCHAR = 57627
const TEXT_PATTERN_OPS = 57628
const NULLX = 57629
const AUTO_INCREMENT = 57630
const APPROXNUM = 57631
const SIGNED = 57632
const UNSIGNED = 57633
const ZEROFILL = 57634
const ZONE = 57635
const AUTOINCREMENT = 57636
const DATABASES = 57637
const TABLES = 57638
const VSCHEMA_TABLES = 57639
const EXTENDED = 57640
const FULL = 57641
const PROCESSLIST = 57642
const NAMES = 57643
const CHARSET = 57644
const GLOBAL = 57645
const SESSION = 57646
const ISOLATION = 57647
const LEVEL = 57648
const READ = 57649
const WRITE = 57650
const ONLY = 57651
const REPEATABLE = 57652
const COMMITTED = 57653
const UNCOMMITTED = 57654
const SERIALIZABLE = 57655
const NEW = 57656
const CONCAT_NULL_YIELDS_NULL = 57657
const CURSOR_CLOSE_ON_COMMIT = 57658
const QUOTED_IDENTIFIER = 57659
const ARITHABORT = 57660
const FMTONLY = 57661
const NOCOUNT = 57662
const NOEXEC = 57663
const NUMERIC_ROUNDABORT = 57664
const ANSI_DEFAULTS = 57665
const ANSI_NULL_DFLT_OFF = 57666
const ANSI_NULL_DFLT_ON = 57667
const ANSI_NULLS = 57668
const ANSI_PADDING = 57669
const ANSI_WARNINGS = 57670
const FORCEPLAN = 57671
const SHOWPLAN_ALL = 57672
const SHOWPLAN_TEXT = 57673
const SHOWPLAN_XML = 57674
const IMPLICIT_TRANSACTIONS = 57675
const REMOTE_PROC_TRANSACTIONS = 57676
const XACT_ABORT = 57677
const CURRENT_TIMESTAMP = 57678
const DATABASE = 57679
const CURRENT_DATE = 57680
const CURRENT_TIME = 57681
const LOCALTIME = 57682
const LOCALTIMESTAMP = 57683
const UTC_DATE = 57684
const UTC_TIME = 57685
const UTC_TIMESTAMP = 57686
const REPLACE = 57687
const CONVERT = 57688
const CAST = 57689
const SUBSTR = 57690
const SUBSTRING = 57691
const GROUP_CONCAT = 57692
const SEPARATOR = 57693
const INHERIT = 57694
const LEAD = 57695
const LAG = 57696
const MATCH = 57697
const AGAINST = 57698
const BOOLEAN = 57699
const LANGUAGE = 57700
const WITH = 57701
const WITHOUT = 57702
const PARSER = 57703
const QUERY = 57704
const EXPANSION = 57705
const UNUSED = 57706
const VIRTUAL = 57707
const STORED = 57708
const GENERATED = 57709
const ALWAYS = 57710
const IDENTITY = 57711
const SEQUENCE = 57712
const INCREMENT = 57713
const MINVALUE = 57714
const CACHE = 57715
const CYCLE = 57716
const OWNED = 57717
const NONE = 57718
const CLUSTERED = 57719
const NONCLUSTERED = 57720
const REPLICATION = 57721
const COLUMNSTORE = 57722
const INCLUDE = 57723
const HOLDLOCK = 57724
const NOLOCK = 57725
const NOWAIT = 57726
const PAGLOCK = 57727
const ROWLOCK = 57728
const TABLOCK = 57729
const UPDLOCK = 57730
const READUNCOMMITTED = 57731
const DEFINER = 57732
const INVOKER = 57733
const TYPECAST = 57734
const CHECK = 57735
const OVER = 57736

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"GRANT",
	"REVOKE",
	"OPTION",
	"PRIVILEGES",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"EXTENSION",
	"EXCLUDE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"HANDLER",
	"CONTINUE",
	"EXIT",
	"SQLEXCEPTION",
	"SQLWARNING",
	"SQLSTATE",
	"FOUND",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"ASYNC",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"TSTZRANGE",
	"TSRANGE",
	"INT4RANGE",
	"INT8RANGE",
	"NUMRANGE",
	"DATERANGE",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 9,
	138, 562,
	-2, 263,
	-1, 210,
	123, 980,
	-2, 974,
	-1, 211,
	123, 981,
	-2, 894,
	-1, 477,
	123, 984,
	-2, 978,
	-1, 478,
	123, 981,
	-2, 979,
	-1, 514,
	61, 529,
	-2, 526,
	-1, 544,
	123, 982,
	-2, 376,
	-1, 689,
	123, 982,
	-2, 376,
	-1, 710,
	299, 991,
	-2, 882,
	-1, 764,
	299, 991,
	-2, 611,
	-1, 795,
	123, 981,
	-2, 464,
	-1, 801,
	5, 65,
	-2, 26,
	-1, 807,
	5, 65,
	-2, 28,
	-1, 969,
	299, 991,
	-2, 611,
	-1, 1149,
	299, 991,
	-2, 464,
	-1, 1226,
	299, 991,
	-2, 611,
	-1, 1290,
	299, 991,
	-2, 882,
	-1, 1414,
	5, 66,
	-2, 744,
	-1, 1508,
	5, 65,
	-2, 27,
	-1, 1524,
	204, 93,
	-2, 667,
	-1, 1562,
	299, 991,
	-2, 243,
	-1, 1563,
	299, 991,
	-2, 243,
	-1, 1786,
	90, 976,
	-2, 964,
	-1, 1889,
	57, 79,
	59, 79,
	-2, 81,
	-1, 2077,
	5, 65,
	-2, 933,
	-1, 2102,
	5, 65,
	-2, 88,
	-1, 2147,
	59, 1127,
	60, 1127,
	-2, 597,
	-1, 2189,
	5, 66,
	-2, 934,
	-1, 2223,
	5, 65,
	-2, 936,
	-1, 2245,
	5, 66,
	-2, 937,
}

const yyPrivate = 57344

const yyLast = 13008

var yyAct = [...]int16{
	691, 1996, 2095, 2140, 2198, 672, 701, 42, 1241, 2014,
	2146, 39, 39, 2141, 814, 1911, 2064, 2137, 196, 2022,
	1202, 1277, 2100, 1997, 206, 207, 1746, 1275, 219, 221,
	208, 2087, 1924, 1780, 37, 1264, 1976, 907, 1754, 908,
	1278, 1899, 1765, 1989, 747, 1909, 1263, 1923, 1257, 1531,
	1052, 246, 1777, 1773, 1761, 1526, 1319, 792, 1502, 1497,
	1764, 1322, 1088, 1798, 1416, 1321, 1035, 1636, 1148, 1078,
	1320, 1124, 506, 1067, 1079, 847, 188, 580, 1407, 753,
	1645, 935, 1179, 449, 447, 1101, 662, 451, 414, 670,
	248, 951, 624, 675, 1024, 515, 645, 510, 1260, 841,
	1363, 541, 1199, 671, 431, 377, 342, 623, 1176, 550,
	467, 224, 1770, 397, 468, 943, 543, 1020, 372, 381,
	591, 588, 567, 1673, 416, 1234, 1142, 15, 1479, 412,
	1489, 1876, 44, 791, 654, 683, 992, 754, 214, 877,
	463, 464, 887, 476, 1235, 653, 655, 226, 735, 853,
	1219, 1359, 1261, 738, 1478, 871, 995, 887, 874, 516,
	517, 227, 228, 2246, 889, 890, 891, 892, 893, 894,
	895, 2178, 872, 873, 870, 896, 897, 898, 899, 876,
	875, 885, 886, 878, 879, 880, 881, 882, 883, 884,
	877, 235, 237, 887, 1854, 1834, 539, 252, 252, 252,
	252, 332, 336, 337, 391, 2243, 2059, 2125, 1368, 978,
	1710, 876, 875, 885, 886, 878, 879, 880, 881, 882,
	883, 884, 877, 1708, 1709, 887, 1207, 1208, 864, 863,
	1367, 1195, 39, 748, 374, 2096, 867, 823, 415, 592,
	593, 823, 369, 370, 2236, 196, 865, 368, 1743, 513,
	2177, 1687, 1396, 308, 308, 308, 308, 2124, 312, 312,
	312, 312, 311, 311, 311, 311, 1837, 309, 309, 309,
	309, 229, 2170, 409, 2171, 2172, 2033, 2034, 749, 412,
	413, 876, 875, 885, 886, 878, 879, 880, 881, 882,
	883, 884, 877, 2113, 2032, 887, 2112, 1820, 804, 2114,
	1292, 1281, 1280, 1007, 400, 880, 881, 882, 883, 884,
	877, 1006, 1282, 887, 569, 338, 558, 340, 1714, 407,
	1925, 395, 1926, 422, 418, 1283, 514, 922, 432, 396,
	352, 1716, 1014, 424, 425, 456, 457, 355, 1671, 783,
	782, 1680, 1189, 358, 450, 394, 361, 362, 1433, 1431,
	39, 252, 36, 367, 195, 2042, 1512, 477, 339, 482,
	203, 2118, 2117, 866, 2045, 2046, 494, 495, 555, 1943,
	557, 556, 39, 2109, 1776, 865, 433, 434, 435, 436,
	2212, 1711, 614, 472, 475, 509, 516, 517, 1917, 1775,
	1075, 2043, 403, 1511, 398, 408, 44, 863, 823, 529,
	656, 1939, 480, 1256, 405, 404, 502, 308, 1646, 1647,
	245, 1089, 312, 561, 865, 1853, 311, 1855, 810, 811,
	1990, 309, 885, 886, 878, 879, 880, 881, 882, 883,
	884, 877, 888, 44, 887, 1276, 2199, 2200, 2201, 2202,
	2203, 2204, 2205, 2206, 828, 1288, 455, 888, 204, 823,
	44, 461, 523, 465, 466, 600, 333, 1651, 1294, 1295,
	473, 44, 1021, 829, 2220, 483, 1630, 859, 1290, 856,
	487, 524, 657, 489, 393, 616, 492, 493, 1672, 533,
	888, 532, 2060, 888, 531, 619, 620, 1360, 1361, 625,
	630, 625, 866, 394, 392, 481, 1952, 1284, 1285, 1287,
	633, 39, 526, 1286, 522, 511, 646, 867, 740, 1703,
	1942, 584, 585, 586, 587, 888, 552, 2237, 1045, 1044,
	190, 535, 1516, 1362, 1049, 1388, 572, 737, 653, 1047,
	575, 866, 578, 579, 597, 642, 191, 979, 1712, 1713,
	1715, 1717, 1718, 561, 1846, 432, 816, 1188, 554, 1410,
	1368, 1527, 1528, 401, 1041, 2133, 1986, 626, 822, 402,
	590, 594, 225, 644, 189, 538, 599, 1774, 842, 826,
	825, 604, 605, 606, 373, 44, 1028, 842, 2123, 2023,
	615, 393, 516, 517, 359, 888, 622, 864, 863, 1646,
	1647, 512, 831, 520, 521, 2026, 392, 632, 628, 375,
	394, 428, 794, 888, 430, 865, 488, 658, 329, 330,
	331, 631, 608, 205, 343, 815, 1858, 44, 39, 820,
	643, 734, 2099, 625, 736, 2098, 334, 335, 625, 757,
	2097, 830, 410, 202, 411, 802, 201, 802, 1832, 867,
	741, 200, 39, 739, 750, 801, 552, 807, 234, 44,
	768, 239, 819, 771, 1293, 218, 774, 775, 406, 752,
	1423, 646, 1422, 876, 875, 885, 886, 878, 879, 880,
	881, 882, 883, 884, 877, 232, 835, 887, 554, 770,
	1625, 1557, 864, 863, 876, 875, 885, 886, 878, 879,
	880, 881, 882, 883, 884, 877, 1357, 802, 887, 236,
	865, 1068, 1069, 1356, 2213, 1735, 1042, 878, 879, 880,
	881, 882, 883, 884, 877, 796, 797, 887, 861, 2192,
	806, 44, 866, 818, 888, 812, 817, 852, 813, 2062,
	821, 238, 2027, 2025, 2024, 824, 44, 793, 223, 634,
	832, 491, 1825, 867, 815, 867, 1734, 844, 833, 240,
	242, 857, 1928, 864, 863, 252, 906, 241, 976, 1720,
	902, 850, 864, 863, 864, 863, 864, 863, 39, 923,
	519, 865, 1223, 216, 926, 213, 984, 545, 546, 548,
	865, 956, 865, 2115, 865, 551, 549, 559, 560, 794,
	1011, 2015, 2017, 925, 344, 345, 911, 912, 1733, 794,
	815, 646, 1001, 220, 864, 863, 987, 346, 1441, 767,
	2085, 308, 1691, 974, 1018, 957, 312, 866, 222, 617,
	311, 1220, 865, 547, 625, 309, 420, 419, 1046, 351,
	349, 972, 1048, 802, 945, 946, 947, 948, 949, 950,
	646, 582, 581, 1026, 499, 777, 186, 183, 1002, 1558,
	1559, 1560, 498, 983, 497, 552, 1081, 44, 1019, 1222,
	737, 646, 864, 863, 178, 1848, 669, 994, 999, 1000,
	748, 1927, 1382, 1258, 1883, 864, 863, 1102, 1180, 2016,
	865, 1450, 1689, 1381, 1003, 1380, 1005, 179, 866, 180,
	1379, 184, 185, 865, 1378, 844, 1377, 866, 1376, 866,
	1375, 866, 1374, 1012, 778, 369, 1373, 848, 849, 851,
	1130, 1371, 1139, 1139, 748, 749, 1043, 1070, 1086, 1027,
	1072, 1141, 1010, 1884, 793, 1076, 39, 39, 1180, 1038,
	1637, 802, 1017, 477, 793, 508, 1066, 802, 369, 866,
	1108, 356, 802, 1181, 354, 956, 1472, 1136, 353, 348,
	1071, 1638, 1082, 977, 1106, 1107, 1105, 1085, 528, 749,
	1143, 1144, 1074, 44, 1103, 864, 863, 888, 1077, 864,
	863, 14, 864, 863, 1203, 1507, 1093, 1095, 1096, 957,
	1128, 1658, 1657, 865, 1094, 577, 1162, 865, 888, 576,
	865, 1155, 1656, 508, 1073, 1153, 906, 866, 1221, 507,
	1154, 1137, 1140, 1397, 1398, 1399, 990, 888, 2169, 519,
	866, 573, 527, 553, 558, 1852, 794, 794, 1637, 508,
	1104, 1790, 181, 1841, 508, 1211, 9, 12, 13, 1203,
	1145, 1146, 10, 11, 638, 182, 1175, 1259, 636, 1638,
	44, 1298, 1840, 804, 639, 1292, 1281, 1280, 637, 1255,
	1245, 1417, 1692, 1418, 1419, 755, 756, 1282, 989, 1648,
	1932, 1639, 1635, 573, 1462, 1461, 555, 1460, 557, 556,
	1283, 1197, 1459, 1200, 1201, 1458, 1213, 1457, 1456, 1455,
	573, 1227, 1009, 1228, 646, 1008, 981, 598, 1173, 1174,
	44, 596, 1931, 595, 2108, 566, 1215, 1125, 1960, 1126,
	866, 1365, 924, 1668, 866, 1372, 1198, 866, 44, 519,
	1222, 44, 1102, 621, 924, 44, 2107, 496, 1004, 176,
	177, 640, 589, 570, 534, 1879, 1021, 1369, 876, 875,
	885, 886, 878, 879, 880, 881, 882, 883, 884, 877,
	519, 1391, 887, 44, 1129, 1383, 1036, 867, 458, 1236,
	1237, 793, 793, 44, 2230, 2229, 1036, 2228, 867, 751,
	776, 733, 210, 732, 544, 545, 546, 548, 1468, 2215,
	2130, 867, 1962, 551, 549, 559, 560, 2165, 867, 1961,
	1276, 44, 692, 1138, 690, 694, 695, 696, 697, 731,
	1288, 1403, 693, 698, 2191, 867, 1468, 2126, 804, 1103,
	839, 2049, 1839, 1294, 1295, 1896, 867, 839, 1945, 839,
	1944, 547, 730, 1290, 1893, 1036, 1865, 1803, 923, 1468,
	1817, 1221, 839, 1815, 39, 2075, 1387, 1814, 1811, 1810,
	2076, 477, 659, 794, 646, 186, 183, 839, 1805, 1429,
	1430, 1428, 1284, 1285, 1287, 839, 1804, 1895, 1286, 571,
	519, 525, 2084, 178, 518, 839, 1724, 1993, 1143, 1892,
	1894, 1449, 1892, 1696, 1697, 1694, 1695, 1516, 1470, 839,
	1662, 1216, 867, 1896, 802, 1723, 179, 1702, 180, 1447,
	184, 185, 802, 1524, 1505, 1553, 1554, 1555, 1468, 1467,
	1562, 1488, 1508, 839, 1394, 1387, 1386, 839, 1240, 1298,
	1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
	1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
	1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
	1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
	1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
	1298, 1298, 1298, 1298, 1298, 1298, 1298, 1486, 1506, 646,
	646, 1517, 1504, 1485, 1494, 1631, 1487, 1482, 793, 1634,
	1495, 1480, 1564, 1477, 1520, 1521, 1522, 1977, 1529, 1483,
	1484, 1036, 1239, 1036, 1206, 1134, 867, 839, 1087, 1659,
	804, 646, 1490, 1518, 1203, 839, 838, 787, 786, 1293,
	742, 553, 558, 780, 781, 780, 779, 244, 243, 1565,
	1977, 181, 2138, 1515, 1664, 2084, 1626, 1627, 1633, 1701,
	758, 1700, 2222, 1699, 182, 2084, 1021, 1698, 764, 765,
	766, 1693, 888, 1566, 1510, 1493, 1468, 1445, 1492, 1896,
	519, 1475, 519, 1640, 1641, 1642, 1643, 1644, 1661, 1514,
	1474, 1443, 1238, 1231, 555, 1663, 557, 556, 1216, 1660,
	1652, 1653, 1655, 1650, 1296, 1230, 1229, 613, 1037, 1704,
	1216, 563, 562, 1212, 805, 1013, 805, 991, 985, 1162,
	982, 784, 773, 1667, 1155, 1444, 804, 772, 1153, 769,
	2187, 1675, 815, 1154, 1134, 1677, 1666, 1674, 1162, 1442,
	1896, 612, 613, 1155, 613, 1468, 1727, 1153, 176, 177,
	1682, 233, 1154, 1738, 231, 1681, 2031, 1654, 1901, 1904,
	1905, 1906, 1902, 858, 1903, 1907, 1920, 1752, 2088, 2089,
	39, 1679, 901, 903, 904, 905, 909, 230, 519, 618,
	231, 1756, 1771, 914, 914, 914, 914, 914, 914, 914,
	1736, 1216, 1424, 1036, 839, 1755, 980, 1791, 764, 855,
	854, 789, 788, 1830, 1783, 1688, 1757, 785, 1763, 927,
	928, 929, 930, 931, 932, 933, 934, 1737, 937, 2160,
	939, 940, 941, 942, 944, 944, 944, 944, 944, 944,
	944, 2158, 968, 969, 970, 971, 2121, 1759, 1789, 2088,
	2089, 2138, 1799, 1799, 867, 1963, 422, 1808, 448, 1629,
	1745, 1628, 1395, 1491, 1454, 1749, 1768, 1722, 1728, 1729,
	452, 1393, 1390, 1389, 1358, 1730, 1233, 1800, 1232, 646,
	646, 1210, 1801, 1196, 1762, 1901, 1904, 1905, 1906, 1902,
	1195, 1903, 1907, 1194, 1364, 1828, 867, 2091, 1193, 876,
	875, 885, 886, 878, 879, 880, 881, 882, 883, 884,
	877, 764, 1192, 887, 1191, 1747, 1190, 1748, 1083, 1040,
	1515, 1016, 805, 1015, 973, 860, 1297, 800, 799, 798,
	763, 762, 760, 743, 660, 601, 1806, 1807, 540, 536,
	505, 876, 875, 885, 886, 878, 879, 880, 881, 882,
	883, 884, 877, 453, 454, 887, 445, 438, 437, 426,
	17, 1471, 790, 635, 1796, 603, 602, 460, 459, 664,
	364, 39, 347, 341, 192, 1812, 1813, 2008, 2006, 2216,
	1741, 2094, 2009, 2007, 2093, 2005, 914, 914, 1821, 914,
	914, 914, 914, 914, 914, 914, 914, 914, 914, 914,
	914, 914, 914, 914, 2004, 819, 1847, 1849, 1850, 1851,
	2010, 2176, 1905, 1906, 1975, 1496, 1818, 1870, 1843, 938,
	805, 504, 1916, 1498, 252, 1933, 909, 1250, 1251, 39,
	583, 909, 1844, 1845, 746, 1885, 1930, 2185, 1499, 1935,
	1068, 1069, 486, 485, 484, 1873, 474, 802, 1874, 366,
	365, 1775, 1254, 1247, 1298, 745, 1248, 2020, 611, 646,
	1947, 609, 1881, 1783, 607, 1890, 1842, 350, 1177, 1919,
	1802, 1182, 1908, 1034, 1936, 1918, 1864, 1915, 809, 652,
	308, 1921, 1869, 1242, 2183, 312, 1968, 1859, 1856, 311,
	1934, 1204, 1243, 1875, 309, 2, 1021, 2182, 2132, 1490,
	1938, 1795, 1882, 35, 1862, 469, 470, 471, 1385, 1866,
	1867, 193, 1948, 1768, 1794, 187, 1946, 1793, 1226, 211,
	1792, 627, 1888, 1889, 490, 1030, 2238, 1031, 1032, 1033,
	43, 43, 1707, 1706, 651, 650, 1732, 197, 1384, 1246,
	1029, 1964, 530, 1965, 1023, 217, 369, 1025, 1515, 1878,
	1891, 1998, 1515, 1748, 827, 1982, 1039, 1, 1530, 19,
	18, 1747, 2063, 462, 1415, 921, 687, 1951, 2044, 1665,
	2028, 39, 1983, 1941, 673, 1985, 2197, 2103, 2021, 39,
	1757, 1525, 1772, 1992, 1523, 1556, 1203, 1994, 802, 1649,
	2000, 2001, 565, 2003, 399, 1949, 1473, 537, 1136, 2011,
	1747, 21, 1742, 888, 2029, 1783, 2040, 1999, 1509, 808,
	2002, 610, 1970, 2038, 1203, 914, 914, 914, 1632, 1974,
	2030, 1050, 914, 914, 914, 914, 382, 371, 834, 500,
	194, 16, 1370, 383, 2061, 1768, 380, 379, 378, 376,
	1768, 1768, 1768, 1768, 1768, 888, 568, 417, 423, 257,
	1991, 259, 258, 256, 1768, 1995, 255, 2039, 251, 249,
	1226, 250, 247, 1778, 1725, 1929, 914, 802, 629, 2101,
	1731, 1218, 900, 2069, 2111, 1785, 2145, 2077, 1501, 2181,
	1980, 2131, 1448, 2083, 2092, 1515, 1178, 674, 1878, 2081,
	1092, 686, 685, 684, 2074, 869, 1767, 1886, 802, 1900,
	1898, 2051, 1897, 2090, 2086, 1766, 1836, 2058, 2102, 1249,
	1740, 1289, 1279, 39, 2110, 2052, 1022, 1252, 8, 2116,
	1291, 1768, 1274, 2066, 2067, 7, 369, 2139, 6, 2148,
	2101, 1998, 5, 2142, 4, 369, 2149, 1768, 1273, 1878,
	1998, 1272, 1271, 1270, 217, 1756, 1268, 2127, 1269, 1266,
	217, 43, 2151, 217, 217, 2028, 802, 2068, 2155, 1755,
	217, 2135, 2136, 805, 197, 1267, 2144, 1265, 1244, 1757,
	1757, 805, 1203, 2080, 2166, 2082, 803, 3, 0, 0,
	0, 0, 0, 0, 1748, 0, 0, 0, 0, 0,
	1980, 0, 2175, 0, 0, 0, 0, 2180, 2119, 2120,
	840, 0, 0, 0, 0, 0, 1563, 2186, 0, 815,
	0, 2194, 815, 815, 815, 0, 2211, 0, 0, 0,
	2134, 0, 0, 2196, 2105, 0, 2207, 2208, 2209, 0,
	2210, 2129, 0, 0, 0, 0, 0, 1816, 0, 0,
	0, 0, 2148, 2226, 2142, 1747, 0, 0, 2152, 2149,
	0, 2221, 2225, 217, 2227, 2168, 0, 0, 217, 0,
	217, 217, 2153, 0, 2154, 0, 0, 217, 802, 478,
	2234, 217, 217, 2218, 0, 0, 2239, 217, 2223, 2142,
	217, 0, 0, 217, 217, 2241, 0, 2242, 0, 369,
	2244, 43, 0, 0, 1998, 0, 0, 1861, 0, 1863,
	0, 0, 802, 0, 0, 1868, 0, 804, 0, 1292,
	1281, 1280, 2240, 0, 0, 0, 0, 0, 0, 1878,
	0, 1282, 2195, 0, 0, 914, 914, 0, 217, 0,
	0, 0, 217, 0, 1283, 0, 0, 1515, 875, 885,
	886, 878, 879, 880, 881, 882, 883, 884, 877, 0,
	0, 887, 867, 0, 0, 0, 0, 0, 0, 914,
	914, 914, 914, 0, 0, 0, 0, 0, 0, 0,
	0, 1515, 804, 217, 0, 0, 0, 1980, 217, 217,
	217, 0, 0, 0, 0, 0, 0, 1748, 0, 1751,
	1950, 0, 0, 0, 0, 0, 1719, 876, 875, 885,
	886, 878, 879, 880, 881, 882, 883, 884, 877, 0,
	0, 887, 0, 0, 0, 0, 1748, 0, 0, 0,
	43, 0, 0, 0, 519, 647, 0, 216, 0, 213,
	0, 0, 0, 0, 0, 0, 862, 1971, 0, 1769,
	0, 1972, 1973, 0, 1276, 0, 913, 915, 916, 917,
	918, 919, 920, 0, 1288, 0, 0, 0, 0, 0,
	0, 0, 217, 421, 0, 0, 427, 1294, 1295, 429,
	0, 0, 0, 542, 0, 0, 210, 1290, 544, 545,
	546, 548, 0, 0, 0, 0, 0, 551, 549, 559,
	560, 0, 439, 440, 441, 442, 443, 0, 0, 444,
	186, 183, 0, 0, 0, 0, 1284, 1285, 1287, 446,
	0, 0, 1286, 0, 0, 0, 0, 0, 178, 2047,
	2048, 795, 217, 217, 0, 547, 0, 0, 0, 0,
	0, 1516, 217, 0, 0, 0, 0, 43, 0, 0,
	0, 179, 0, 180, 0, 184, 185, 0, 1809, 186,
	183, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 43, 0, 699, 0, 0, 0, 178, 876, 875,
	885, 886, 878, 879, 880, 881, 882, 883, 884, 877,
	647, 0, 887, 1409, 0, 914, 0, 0, 212, 215,
	179, 0, 180, 0, 184, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 1835, 0, 0, 0, 876, 875,
	885, 886, 878, 879, 880, 881, 882, 883, 884, 877,
	0, 0, 887, 0, 574, 1408, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1097,
	0, 888, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 0, 0, 0,
	0, 0, 0, 1293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1910, 43, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 888, 0, 0, 0, 0, 0, 0, 795, 0,
	217, 0, 0, 1750, 0, 553, 558, 0, 795, 0,
	647, 0, 0, 0, 0, 181, 217, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	0, 0, 914, 0, 0, 914, 0, 914, 0, 914,
	0, 914, 914, 0, 0, 0, 759, 761, 0, 647,
	0, 0, 804, 0, 1292, 1281, 1280, 0, 555, 0,
	557, 556, 0, 176, 177, 0, 1282, 0, 0, 0,
	647, 0, 0, 0, 0, 563, 562, 0, 215, 1283,
	0, 0, 0, 0, 215, 0, 0, 215, 215, 0,
	0, 0, 0, 0, 215, 212, 0, 1053, 1769, 0,
	0, 1065, 0, 1769, 1769, 1769, 1769, 1769, 0, 0,
	0, 1055, 176, 177, 0, 0, 0, 1910, 0, 2018,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 478, 43, 0, 843, 845,
	0, 0, 0, 0, 997, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1400, 1401,
	1402, 0, 888, 0, 0, 0, 1404, 1405, 1406, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1769, 0, 0, 215, 0, 1276,
	0, 1054, 215, 0, 215, 215, 2078, 2079, 0, 1288,
	1769, 215, 888, 479, 0, 479, 215, 0, 0, 913,
	0, 215, 1294, 1295, 215, 0, 0, 215, 215, 0,
	0, 0, 1290, 0, 0, 795, 795, 805, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 0, 0, 0,
	804, 0, 1292, 1281, 1280, 0, 0, 0, 0, 0,
	1318, 1284, 1285, 1287, 1282, 0, 0, 1286, 0, 0,
	0, 0, 215, 0, 0, 0, 564, 1283, 0, 0,
	0, 0, 0, 0, 0, 0, 1516, 0, 0, 0,
	0, 0, 0, 2143, 0, 805, 843, 1053, 0, 0,
	0, 1065, 0, 647, 0, 0, 0, 0, 0, 0,
	0, 1055, 0, 0, 2161, 2162, 2163, 215, 0, 0,
	0, 0, 215, 215, 215, 1567, 1568, 1569, 1570, 1571,
	1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581,
	1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
	1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601,
	1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
	1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
	1622, 1623, 1624, 0, 0, 0, 0, 1276, 0, 0,
	0, 1054, 0, 0, 0, 0, 0, 1288, 0, 0,
	0, 0, 217, 0, 2143, 0, 564, 2224, 0, 0,
	1294, 1295, 0, 0, 0, 0, 0, 0, 1293, 0,
	1290, 0, 0, 0, 0, 0, 1051, 0, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 0, 0, 2143,
	0, 805, 0, 478, 0, 0, 0, 0, 0, 1284,
	1285, 1287, 795, 647, 0, 1286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 215, 215, 2184, 0,
	0, 0, 0, 0, 1516, 0, 215, 0, 1669, 1670,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 988, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 198,
	0, 0, 1683, 1684, 1685, 1686, 217, 0, 1318, 1318,
	1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
	1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
	1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
	1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
	1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
	1318, 1318, 1318, 1318, 1318, 1318, 0, 0, 647, 647,
	186, 183, 0, 0, 393, 804, 0, 1292, 1281, 1280,
	385, 0, 384, 0, 388, 389, 392, 0, 178, 1282,
	0, 0, 386, 394, 0, 0, 1293, 0, 0, 0,
	647, 0, 1283, 0, 0, 0, 1366, 0, 0, 0,
	0, 179, 0, 180, 0, 184, 185, 0, 998, 998,
	998, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1131, 1132, 1133, 1135, 0, 0, 0, 0,
	1425, 1426, 564, 1427, 215, 0, 1981, 0, 0, 0,
	0, 1432, 564, 1434, 1435, 1436, 0, 2041, 1437, 1438,
	215, 1439, 1440, 661, 0, 0, 1183, 1184, 1185, 1186,
	0, 1187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1276, 649, 0, 0, 210, 0, 213, 1214,
	0, 1217, 1288, 0, 0, 0, 1224, 1225, 1819, 0,
	0, 217, 217, 390, 0, 1294, 1295, 0, 0, 43,
	0, 0, 0, 0, 0, 1290, 181, 0, 0, 0,
	0, 0, 0, 1253, 0, 0, 0, 0, 212, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1284, 1285, 1287, 0, 0, 479,
	1286, 998, 998, 0, 0, 998, 998, 998, 0, 186,
	183, 212, 0, 0, 846, 0, 0, 0, 0, 0,
	0, 804, 0, 1292, 1281, 1280, 0, 178, 868, 0,
	0, 1392, 648, 0, 910, 1282, 0, 0, 0, 0,
	1940, 0, 998, 998, 998, 998, 0, 0, 1283, 0,
	179, 0, 180, 0, 184, 185, 0, 0, 647, 647,
	0, 0, 0, 176, 177, 0, 387, 998, 0, 0,
	804, 0, 1292, 1281, 1280, 936, 1411, 1412, 0, 0,
	0, 0, 0, 1414, 1282, 0, 0, 0, 0, 564,
	564, 0, 1420, 1421, 0, 0, 0, 1283, 0, 0,
	0, 0, 0, 1988, 0, 1953, 0, 975, 1954, 0,
	1955, 0, 1956, 0, 1957, 1958, 0, 0, 0, 34,
	0, 0, 1446, 0, 0, 0, 0, 0, 1452, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1463, 1464, 0, 1465, 1466, 0,
	43, 1293, 0, 0, 0, 0, 0, 1914, 1276, 0,
	0, 0, 1476, 0, 0, 0, 0, 0, 1288, 0,
	0, 0, 0, 0, 0, 0, 27, 29, 0, 22,
	0, 1294, 1295, 0, 0, 181, 0, 0, 0, 217,
	217, 1290, 23, 216, 28, 213, 32, 0, 182, 217,
	217, 1987, 0, 0, 0, 1914, 0, 1276, 43, 0,
	0, 0, 0, 0, 24, 25, 0, 1288, 0, 1080,
	1284, 1285, 1287, 1084, 0, 0, 1286, 0, 1090, 1091,
	1294, 1295, 0, 1318, 0, 0, 0, 0, 647, 0,
	1290, 216, 0, 213, 0, 563, 562, 0, 0, 0,
	998, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 183, 0, 1284,
	1285, 1287, 0, 0, 910, 1286, 0, 0, 0, 910,
	0, 0, 176, 177, 178, 0, 217, 0, 0, 0,
	998, 0, 0, 0, 1147, 1172, 0, 479, 0, 0,
	998, 1912, 0, 0, 0, 0, 564, 179, 0, 180,
	0, 184, 185, 0, 186, 183, 0, 217, 0, 0,
	0, 217, 217, 0, 0, 0, 217, 217, 217, 217,
	217, 0, 178, 0, 0, 0, 0, 20, 217, 0,
	217, 0, 0, 1209, 217, 667, 0, 0, 0, 0,
	43, 0, 0, 0, 0, 179, 0, 180, 43, 184,
	185, 0, 666, 0, 0, 0, 0, 665, 0, 0,
	215, 0, 0, 0, 711, 0, 712, 1293, 0, 0,
	0, 0, 217, 649, 702, 703, 44, 1425, 0, 0,
	0, 0, 2035, 0, 519, 0, 0, 210, 692, 689,
	690, 694, 695, 696, 697, 0, 0, 217, 693, 698,
	559, 560, 668, 2036, 0, 0, 1705, 663, 681, 0,
	0, 710, 26, 217, 0, 0, 1293, 1987, 0, 0,
	0, 0, 1721, 0, 30, 31, 0, 33, 0, 0,
	0, 0, 181, 0, 0, 678, 679, 0, 0, 0,
	0, 727, 1739, 680, 0, 182, 676, 677, 682, 186,
	183, 216, 0, 213, 0, 0, 0, 0, 0, 0,
	186, 183, 0, 0, 0, 0, 2174, 178, 0, 725,
	0, 0, 648, 0, 0, 0, 0, 0, 178, 0,
	181, 0, 43, 0, 0, 0, 0, 0, 0, 1413,
	179, 0, 180, 182, 184, 185, 0, 0, 2150, 0,
	0, 179, 0, 180, 0, 184, 185, 804, 0, 1292,
	1281, 1280, 688, 0, 0, 0, 0, 0, 0, 0,
	0, 1282, 0, 0, 186, 183, 0, 0, 0, 176,
	177, 0, 0, 0, 1283, 1451, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	0, 0, 0, 0, 0, 179, 0, 180, 0, 184,
	185, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	0, 0, 0, 0, 217, 215, 215, 1760, 0, 0,
	0, 0, 0, 0, 0, 0, 713, 1500, 1503, 0,
	0, 0, 804, 0, 1292, 1281, 1280, 0, 0, 0,
	0, 2150, 1822, 1513, 1823, 1824, 1282, 0, 0, 1826,
	1827, 1829, 1831, 1833, 729, 181, 714, 715, 0, 1283,
	0, 1519, 0, 0, 0, 0, 181, 216, 182, 213,
	0, 1887, 0, 1561, 1276, 936, 0, 0, 0, 182,
	0, 0, 0, 0, 1288, 0, 1857, 700, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1294, 1295, 0,
	0, 0, 0, 216, 0, 213, 0, 1290, 0, 716,
	726, 722, 723, 720, 721, 719, 718, 717, 728, 704,
	705, 706, 707, 709, 0, 0, 563, 562, 708, 0,
	181, 0, 0, 0, 0, 0, 1284, 1285, 1287, 0,
	186, 183, 1286, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 0, 0, 0, 178, 0,
	0, 1516, 0, 176, 177, 724, 0, 1937, 0, 1276,
	0, 0, 1080, 0, 1080, 0, 186, 183, 216, 1288,
	213, 179, 0, 180, 0, 184, 185, 0, 0, 0,
	0, 0, 1294, 1295, 178, 0, 0, 215, 0, 0,
	0, 0, 1290, 1959, 0, 0, 0, 0, 0, 1678,
	0, 0, 0, 1966, 0, 0, 0, 179, 0, 180,
	0, 184, 185, 0, 0, 0, 1969, 176, 177, 0,
	0, 1284, 1285, 1287, 998, 1690, 0, 1286, 0, 216,
	0, 213, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 183, 215, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 1913, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 1726, 2013, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 1293, 180, 1744, 184, 185, 0, 0,
	0, 0, 0, 0, 216, 0, 213, 0, 0, 0,
	0, 0, 186, 183, 2050, 360, 181, 0, 0, 0,
	2053, 2054, 2055, 2056, 2057, 0, 0, 0, 0, 182,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 910, 910, 0,
	1967, 0, 181, 179, 0, 180, 0, 184, 185, 0,
	0, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 183, 0,
	357, 215, 0, 0, 0, 215, 215, 0, 1293, 212,
	215, 215, 215, 215, 215, 178, 0, 0, 0, 0,
	0, 0, 2012, 0, 215, 0, 0, 0, 2019, 0,
	0, 0, 0, 176, 177, 0, 0, 0, 179, 0,
	180, 0, 184, 185, 1350, 2122, 0, 181, 0, 0,
	2128, 0, 0, 0, 0, 0, 0, 0, 1877, 0,
	182, 0, 0, 363, 0, 0, 215, 0, 0, 176,
	177, 1313, 1312, 0, 44, 0, 1311, 0, 1314, 1315,
	1316, 1317, 0, 0, 0, 0, 1333, 2164, 0, 0,
	0, 215, 1336, 1335, 1334, 0, 1838, 1340, 1341, 1342,
	1343, 1345, 1344, 1308, 1309, 1310, 0, 215, 181, 0,
	1338, 1339, 0, 1337, 0, 0, 2179, 0, 1305, 1304,
	0, 182, 1299, 1300, 1301, 1302, 0, 1303, 0, 1306,
	2188, 2189, 2190, 0, 0, 0, 1307, 0, 2193, 1871,
	1872, 1503, 0, 0, 176, 177, 0, 186, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 0, 1351,
	1355, 0, 0, 0, 0, 178, 0, 0, 0, 1353,
	0, 0, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 179, 212,
	180, 0, 184, 185, 2231, 2232, 2233, 0, 212, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 0, 0,
	0, 0, 0, 0, 804, 0, 1292, 1281, 1280, 0,
	0, 0, 0, 0, 0, 0, 0, 2245, 1282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1283, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	0, 0, 324, 325, 326, 328, 327, 210, 0, 213,
	176, 177, 0, 0, 1329, 1328, 0, 0, 1913, 0,
	0, 1978, 0, 0, 1323, 1330, 1331, 1332, 0, 0,
	0, 0, 0, 0, 0, 1324, 1325, 1326, 1327, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
	0, 0, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 2037, 0, 0, 0, 182, 0, 0, 0,
	186, 183, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 1276, 212, 0, 0, 0, 0, 0, 178, 0,
	0, 1288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2065, 1294, 1295, 1347, 1346, 1348, 1349,
	0, 179, 0, 180, 1290, 184, 185, 0, 0, 2072,
	0, 2073, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1284, 1285, 1287, 0, 0, 0, 1286,
	176, 177, 0, 1354, 0, 0, 0, 0, 0, 161,
	150, 0, 109, 163, 77, 97, 172, 99, 100, 135,
	56, 118, 0, 94, 75, 0, 0, 0, 80, 49,
	89, 50, 78, 111, 0, 76, 0, 152, 121, 0,
	0, 0, 170, 0, 126, 0, 0, 0, 0, 0,
	113, 154, 116, 145, 108, 136, 65, 125, 165, 95,
	131, 166, 0, 0, 0, 44, 0, 0, 0, 0,
	2156, 0, 0, 2157, 0, 0, 2159, 130, 160, 91,
	62, 175, 0, 134, 48, 128, 0, 0, 54, 57,
	171, 158, 85, 84, 0, 0, 181, 0, 0, 0,
	2173, 112, 117, 141, 105, 0, 0, 0, 0, 182,
	0, 0, 0, 0, 0, 2065, 0, 81, 0, 124,
	0, 0, 0, 61, 55, 210, 110, 213, 910, 0,
	64, 0, 82, 142, 0, 45, 0, 0, 186, 183,
	148, 155, 107, 0, 1676, 159, 104, 103, 0, 0,
	1293, 0, 0, 0, 96, 41, 178, 173, 0, 0,
	162, 114, 153, 79, 90, 0, 86, 2217, 910, 0,
	87, 88, 123, 137, 0, 0, 0, 0, 0, 179,
	144, 180, 0, 184, 185, 1151, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 0, 0, 186, 183,
	0, 0, 0, 53, 46, 83, 146, 149, 69, 133,
	58, 92, 139, 93, 115, 74, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1779, 0, 0, 179,
	0, 180, 0, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 1787,
	323, 1156, 0, 324, 325, 326, 328, 327, 1160, 0,
	1152, 0, 1164, 1163, 1165, 1150, 1167, 0, 0, 0,
	1171, 1168, 1170, 1169, 0, 1166, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	1157, 1158, 0, 0, 181, 52, 73, 156, 0, 0,
	0, 0, 1788, 1786, 1782, 1781, 0, 182, 0, 0,
	132, 1159, 1161, 0, 0, 1784, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 72, 66,
	67, 119, 120, 167, 168, 169, 143, 63, 0, 70,
	71, 0, 151, 0, 181, 0, 122, 0, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 182, 98, 47,
	102, 0, 0, 0, 0, 0, 0, 0, 59, 60,
	0, 0, 106, 101, 127, 129, 138, 147, 157, 164,
	140, 176, 177, 161, 150, 0, 109, 163, 77, 97,
	172, 99, 100, 135, 56, 118, 0, 94, 75, 0,
	0, 0, 80, 49, 89, 50, 78, 111, 0, 76,
	0, 152, 121, 0, 0, 0, 170, 0, 126, 0,
	0, 0, 0, 0, 113, 154, 116, 145, 108, 136,
	65, 125, 165, 95, 131, 166, 0, 0, 0, 44,
	0, 176, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 160, 91, 62, 175, 0, 134, 48, 128,
	0, 0, 54, 57, 171, 158, 85, 84, 0, 804,
	0, 1292, 1281, 1280, 199, 112, 117, 141, 105, 0,
	0, 0, 0, 1282, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 124, 0, 0, 1283, 61, 55, 44,
	110, 198, 0, 0, 64, 0, 82, 142, 0, 45,
	0, 0, 186, 183, 148, 155, 107, 0, 0, 159,
	104, 103, 0, 0, 0, 0, 0, 0, 96, 41,
	178, 173, 0, 0, 162, 114, 153, 79, 90, 0,
	86, 0, 864, 863, 87, 88, 123, 137, 0, 0,
	1753, 0, 0, 179, 144, 180, 0, 184, 185, 0,
	865, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 183, 0, 0, 0, 53, 46, 83,
	146, 149, 69, 133, 58, 92, 139, 93, 115, 74,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1276, 0, 0, 0,
	1922, 0, 0, 179, 0, 180, 1288, 184, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1294,
	1295, 0, 0, 0, 0, 0, 0, 0, 0, 1290,
	0, 0, 0, 1787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1284, 1285,
	1287, 0, 0, 0, 1286, 0, 0, 866, 0, 0,
	0, 0, 0, 51, 0, 0, 0, 0, 181, 52,
	73, 156, 0, 1758, 0, 0, 1788, 1786, 0, 0,
	0, 182, 0, 0, 132, 0, 0, 0, 0, 1784,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 72, 66, 67, 119, 120, 167, 168, 169,
	143, 63, 0, 70, 71, 0, 151, 0, 181, 0,
	122, 0, 0, 0, 174, 0, 0, 0, 0, 0,
	0, 182, 98, 47, 102, 0, 0, 0, 0, 0,
	0, 0, 59, 60, 0, 0, 106, 101, 127, 129,
	138, 147, 157, 164, 140, 176, 177, 161, 150, 0,
	109, 163, 77, 97, 172, 99, 100, 135, 56, 118,
	0, 94, 75, 0, 0, 0, 80, 49, 89, 50,
	78, 111, 0, 76, 0, 152, 121, 0, 0, 0,
	170, 0, 126, 0, 0, 1293, 0, 0, 113, 154,
	116, 145, 108, 136, 65, 125, 165, 95, 131, 166,
	0, 0, 0, 44, 0, 176, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 160, 91, 62, 175,
	0, 134, 48, 128, 0, 0, 54, 57, 171, 158,
	85, 84, 804, 0, 1292, 1281, 1280, 0, 0, 112,
	117, 141, 105, 0, 0, 0, 1282, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 124, 0, 1283,
	0, 61, 55, 0, 110, 0, 0, 0, 64, 0,
	82, 142, 0, 45, 0, 0, 186, 183, 148, 155,
	107, 0, 0, 159, 104, 103, 0, 0, 0, 0,
	0, 0, 96, 41, 178, 173, 0, 0, 162, 114,
	153, 79, 90, 0, 86, 864, 863, 0, 87, 88,
	123, 137, 0, 0, 0, 0, 0, 179, 144, 180,
	0, 184, 185, 865, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 46, 83, 146, 149, 69, 133, 58, 92,
	139, 93, 115, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1294, 1295, 0, 0, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 1787, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1284, 1285, 1287, 0, 0, 0, 1286, 0, 0,
	866, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 181, 52, 73, 156, 1758, 0, 0, 0,
	1788, 1786, 0, 0, 0, 182, 0, 0, 132, 0,
	0, 0, 0, 1784, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 72, 66, 67, 119,
	120, 167, 168, 169, 143, 63, 0, 70, 71, 0,
	151, 0, 0, 0, 122, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 98, 47, 102, 0,
	0, 0, 0, 0, 0, 0, 59, 60, 0, 0,
	106, 101, 127, 129, 138, 147, 157, 164, 140, 176,
	177, 161, 150, 0, 109, 163, 77, 97, 172, 99,
	100, 135, 56, 118, 0, 94, 75, 0, 0, 0,
	80, 49, 89, 50, 78, 111, 0, 76, 0, 152,
	121, 0, 289, 0, 170, 0, 126, 0, 1293, 0,
	0, 0, 113, 154, 116, 145, 108, 136, 65, 125,
	165, 95, 131, 166, 0, 0, 0, 210, 0, 213,
	254, 0, 253, 0, 0, 0, 0, 0, 0, 130,
	160, 91, 62, 175, 0, 134, 48, 128, 0, 0,
	54, 57, 171, 158, 85, 84, 0, 0, 0, 0,
	0, 0, 0, 112, 117, 141, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 81,
	0, 124, 0, 0, 0, 61, 55, 0, 110, 268,
	0, 298, 64, 0, 82, 142, 0, 45, 0, 0,
	186, 183, 148, 155, 107, 0, 0, 159, 104, 103,
	0, 0, 0, 0, 0, 0, 96, 41, 178, 173,
	0, 0, 162, 114, 153, 79, 90, 0, 86, 0,
	290, 0, 87, 88, 123, 137, 0, 0, 0, 0,
	0, 179, 144, 180, 0, 184, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 46, 83, 146, 149,
	69, 133, 58, 92, 139, 93, 115, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 310, 0, 324, 325,
	326, 328, 327, 291, 292, 293, 297, 295, 294, 296,
	262, 264, 0, 260, 263, 269, 265, 266, 267, 281,
	270, 271, 272, 273, 274, 283, 282, 284, 285, 286,
	287, 275, 276, 277, 278, 279, 280, 288, 299, 300,
	301, 302, 303, 304, 305, 306, 307, 0, 0, 0,
	0, 51, 0, 0, 0, 0, 181, 52, 73, 156,
	0, 0, 0, 0, 0, 40, 0, 0, 0, 182,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	72, 66, 67, 119, 120, 167, 168, 169, 143, 63,
	0, 70, 71, 0, 151, 0, 0, 0, 122, 0,
	0, 0, 174, 261, 0, 0, 0, 0, 0, 0,
	98, 47, 102, 0, 0, 0, 0, 0, 0, 0,
	59, 60, 0, 0, 106, 101, 127, 129, 138, 147,
	157, 164, 140, 176, 177, 161, 150, 0, 109, 163,
	77, 97, 172, 99, 100, 135, 56, 118, 0, 94,
	75, 0, 0, 0, 80, 49, 89, 50, 78, 111,
	0, 76, 0, 152, 121, 0, 0, 0, 170, 0,
	126, 0, 0, 0, 0, 0, 113, 154, 116, 145,
	108, 136, 65, 125, 165, 95, 131, 166, 0, 0,
	0, 44, 0, 836, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 130, 160, 91, 62, 175, 0, 134,
	48, 128, 0, 0, 54, 57, 171, 158, 85, 84,
	0, 804, 0, 1292, 1281, 1280, 0, 112, 117, 141,
	105, 0, 0, 0, 0, 1282, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 124, 0, 0, 1283, 61,
	55, 216, 110, 213, 0, 0, 64, 0, 82, 142,
	0, 45, 0, 0, 186, 183, 148, 155, 107, 0,
	0, 159, 104, 103, 0, 0, 0, 0, 0, 0,
	96, 41, 178, 173, 0, 0, 162, 114, 153, 79,
	90, 0, 86, 0, 864, 863, 87, 88, 123, 137,
	0, 0, 0, 0, 0, 179, 144, 180, 0, 184,
	185, 0, 865, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 183, 0, 0, 0, 53,
	46, 83, 146, 149, 69, 133, 58, 92, 139, 93,
	115, 74, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1276, 0,
	0, 0, 0, 0, 0, 179, 0, 180, 1288, 184,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1294, 1295, 0, 0, 0, 0, 0, 0, 0,
	0, 1290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1284, 1285, 1287, 0, 0, 0, 1286, 0, 0, 866,
	0, 0, 0, 0, 0, 51, 0, 0, 0, 0,
	181, 52, 73, 156, 0, 1797, 0, 0, 0, 40,
	0, 0, 0, 182, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 72, 66, 67, 119, 120, 167,
	168, 169, 143, 63, 0, 70, 71, 0, 151, 0,
	181, 0, 122, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 182, 98, 47, 102, 0, 0, 0,
	0, 0, 0, 0, 59, 60, 0, 0, 106, 101,
	127, 129, 138, 147, 157, 164, 140, 176, 177, 161,
	150, 0, 109, 163, 77, 97, 172, 99, 100, 135,
	56, 118, 0, 94, 75, 0, 0, 0, 80, 49,
	89, 50, 78, 111, 0, 76, 0, 152, 121, 0,
	0, 0, 170, 0, 126, 0, 0, 1293, 0, 0,
	113, 154, 116, 145, 108, 136, 65, 125, 165, 95,
	131, 166, 0, 501, 0, 44, 0, 176, 177, 0,
	0, 0, 0, 0, 0, 503, 0, 130, 160, 91,
	62, 175, 0, 134, 48, 128, 0, 0, 54, 57,
	171, 158, 85, 84, 804, 0, 1292, 1281, 1280, 0,
	0, 112, 117, 141, 105, 0, 0, 0, 1282, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 124,
	0, 1283, 0, 61, 55, 0, 110, 952, 0, 967,
	64, 0, 82, 142, 0, 45, 0, 0, 186, 183,
	148, 155, 107, 0, 0, 159, 104, 103, 0, 0,
	0, 0, 0, 0, 96, 41, 178, 173, 0, 0,
	162, 114, 153, 79, 90, 0, 86, 0, 954, 0,
	87, 88, 123, 137, 0, 0, 2167, 0, 0, 179,
	144, 180, 0, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 46, 83, 146, 149, 69, 133,
	58, 92, 139, 93, 115, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1288, 964, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 0, 1294, 1295, 0, 961, 960, 0,
	0, 966, 1127, 955, 1290, 0, 0, 0, 963, 962,
	0, 260, 953, 0, 0, 0, 0, 959, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1284, 1285, 1287, 0, 0, 0, 1286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 0, 181, 52, 73, 156, 1262, 0,
	0, 0, 0, 40, 0, 0, 0, 182, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 72, 66,
	67, 119, 120, 167, 168, 169, 143, 63, 0, 70,
	71, 0, 151, 0, 0, 0, 122, 0, 0, 0,
	174, 261, 0, 0, 0, 0, 0, 0, 98, 47,
	102, 0, 0, 0, 0, 0, 0, 0, 59, 60,
	0, 0, 106, 101, 127, 129, 138, 147, 157, 164,
	140, 176, 177, 161, 150, 0, 109, 163, 77, 97,
	172, 99, 100, 135, 56, 118, 0, 94, 75, 0,
	0, 0, 80, 49, 89, 50, 78, 111, 0, 76,
	0, 152, 121, 0, 0, 0, 170, 0, 126, 0,
	1293, 0, 0, 0, 113, 154, 116, 145, 108, 136,
	65, 125, 165, 95, 131, 166, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 160, 91, 62, 175, 0, 134, 48, 128,
	0, 0, 54, 57, 171, 158, 85, 84, 804, 0,
	1292, 1281, 1280, 0, 0, 112, 117, 141, 105, 0,
	0, 0, 1282, 0, 0, 0, 0, 0, 0, 1860,
	0, 81, 0, 124, 0, 1283, 0, 61, 55, 0,
	110, 952, 0, 967, 64, 0, 82, 142, 0, 45,
	0, 0, 186, 183, 148, 155, 107, 0, 0, 159,
	104, 103, 0, 0, 0, 0, 0, 0, 96, 41,
	178, 173, 0, 0, 162, 114, 153, 79, 90, 0,
	86, 0, 954, 0, 87, 88, 123, 137, 0, 0,
	2070, 2071, 0, 179, 144, 180, 0, 184, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 46, 83,
	146, 149, 69, 133, 58, 92, 139, 93, 115, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1276, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1288, 964, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 0, 1294, 1295,
	0, 961, 960, 0, 0, 966, 965, 955, 1290, 0,
	0, 0, 963, 962, 0, 260, 953, 0, 0, 0,
	0, 959, 958, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1284, 1285, 1287,
	0, 0, 0, 1286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 0, 0, 181, 52,
	73, 156, 0, 0, 0, 0, 0, 40, 0, 0,
	0, 182, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 72, 66, 67, 119, 120, 167, 168, 169,
	143, 63, 0, 70, 71, 0, 151, 0, 0, 0,
	122, 0, 0, 0, 174, 261, 0, 0, 0, 0,
	0, 0, 98, 47, 102, 0, 0, 0, 0, 0,
	0, 0, 59, 60, 0, 0, 106, 101, 127, 129,
	138, 147, 157, 164, 140, 176, 177, 161, 150, 0,
	109, 163, 77, 97, 172, 99, 100, 135, 56, 118,
	0, 94, 75, 0, 0, 0, 80, 49, 89, 50,
	78, 111, 0, 76, 0, 152, 121, 0, 0, 0,
	170, 0, 126, 0, 1293, 0, 0, 0, 113, 154,
	116, 145, 108, 136, 65, 125, 165, 95, 131, 166,
	0, 0, 0, 210, 0, 213, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 160, 91, 62, 175,
	0, 134, 48, 128, 0, 0, 54, 57, 171, 158,
	85, 84, 804, 0, 1292, 1281, 1280, 0, 0, 112,
	117, 141, 105, 0, 0, 0, 1282, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 124, 0, 1283,
	0, 61, 55, 0, 110, 0, 0, 0, 64, 0,
	82, 142, 0, 45, 0, 0, 186, 183, 148, 155,
	107, 0, 0, 159, 104, 103, 0, 0, 0, 0,
	0, 0, 96, 41, 178, 173, 0, 0, 162, 114,
	153, 79, 90, 0, 86, 864, 863, 0, 87, 88,
	123, 137, 0, 0, 0, 0, 0, 179, 144, 180,
	0, 184, 185, 865, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 46, 83, 146, 149, 69, 133, 58, 92,
	139, 93, 115, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1294, 1295, 0, 0, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1284, 1285, 1287, 0, 0, 0, 1286, 0, 0,
	866, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 181, 52, 73, 156, 1758, 0, 0, 0,
	0, 40, 0, 0, 0, 182, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 72, 66, 67, 119,
	120, 167, 168, 169, 143, 63, 0, 70, 71, 0,
	151, 0, 0, 0, 122, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 98, 47, 102, 0,
	0, 0, 0, 0, 0, 0, 59, 60, 0, 0,
	106, 101, 127, 129, 138, 147, 157, 164, 140, 176,
	177, 161, 150, 0, 109, 163, 77, 97, 172, 99,
	100, 135, 56, 118, 0, 94, 75, 0, 0, 0,
	80, 49, 89, 50, 78, 111, 0, 76, 0, 152,
	121, 0, 0, 0, 170, 0, 126, 0, 1293, 0,
	0, 0, 113, 154, 116, 145, 108, 136, 65, 125,
	165, 95, 131, 166, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	160, 91, 62, 175, 0, 134, 48, 128, 0, 0,
	54, 57, 171, 158, 85, 84, 641, 804, 0, 1292,
	1281, 1280, 0, 112, 117, 141, 105, 0, 0, 0,
	0, 1282, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 124, 0, 0, 1283, 61, 55, 0, 110, 0,
	0, 0, 64, 0, 82, 142, 0, 45, 0, 0,
	186, 183, 148, 155, 107, 0, 0, 159, 104, 103,
	2104, 0, 0, 0, 0, 0, 96, 41, 178, 173,
	0, 0, 162, 114, 153, 79, 90, 0, 86, 0,
	0, 0, 87, 88, 123, 137, 0, 0, 0, 0,
	0, 179, 144, 180, 0, 184, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 46, 83, 146, 149,
	69, 133, 58, 92, 139, 93, 115, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1294, 1295, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1284, 1285, 1287, 0,
	0, 0, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 0, 0, 181, 52, 73, 156,
	0, 2106, 0, 0, 0, 40, 0, 0, 0, 182,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	72, 66, 67, 119, 120, 167, 168, 169, 143, 63,
	0, 70, 71, 0, 151, 0, 0, 0, 122, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	98, 47, 102, 0, 0, 0, 0, 0, 0, 0,
	59, 60, 0, 0, 106, 101, 127, 129, 138, 147,
	157, 164, 140, 176, 177, 161, 150, 0, 109, 163,
	77, 97, 172, 99, 100, 135, 56, 118, 0, 94,
	75, 38, 0, 0, 80, 49, 89, 50, 78, 111,
	0, 76, 0, 152, 121, 0, 0, 0, 170, 0,
	126, 0, 0, 1293, 0, 0, 113, 154, 116, 145,
	108, 136, 65, 125, 165, 95, 131, 166, 0, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 160, 91, 62, 175, 0, 134,
	48, 128, 0, 0, 54, 57, 171, 158, 85, 84,
	804, 0, 1292, 1281, 1280, 0, 0, 112, 117, 141,
	105, 0, 0, 0, 1282, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 124, 0, 1283, 0, 61,
	55, 0, 110, 0, 0, 0, 64, 0, 82, 142,
	0, 45, 0, 0, 186, 183, 148, 155, 107, 0,
	0, 159, 104, 103, 0, 0, 0, 0, 0, 0,
	96, 41, 178, 173, 0, 0, 162, 114, 153, 79,
	90, 0, 86, 0, 0, 0, 87, 88, 123, 137,
	0, 0, 2235, 0, 0, 179, 144, 180, 0, 184,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 53,
	46, 83, 146, 149, 69, 133, 58, 92, 139, 93,
	115, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1294, 1295, 0, 0, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1284,
	1285, 1287, 0, 0, 0, 1286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 0, 0,
	181, 52, 73, 156, 0, 0, 0, 0, 0, 40,
	0, 0, 0, 182, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 72, 66, 67, 119, 120, 167,
	168, 169, 143, 63, 0, 70, 71, 0, 151, 0,
	0, 0, 122, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 98, 47, 102, 0, 0, 0,
	0, 0, 0, 0, 59, 60, 0, 0, 106, 101,
	127, 129, 138, 147, 157, 164, 140, 176, 177, 161,
	150, 0, 109, 163, 77, 97, 172, 99, 100, 135,
	56, 118, 0, 94, 75, 0, 0, 0, 80, 49,
	89, 50, 78, 111, 0, 76, 0, 152, 121, 0,
	0, 0, 170, 0, 126, 0, 1293, 0, 0, 0,
	113, 154, 116, 145, 108, 136, 65, 125, 165, 95,
	131, 166, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 160, 91,
	62, 175, 0, 134, 48, 128, 0, 0, 54, 57,
	171, 158, 85, 84, 804, 0, 1292, 1281, 1280, 0,
	0, 112, 117, 141, 105, 0, 0, 0, 1282, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 124,
	0, 1283, 0, 61, 55, 0, 110, 0, 0, 0,
	64, 0, 82, 142, 0, 45, 0, 0, 186, 183,
	148, 155, 107, 0, 0, 159, 104, 103, 0, 0,
	0, 0, 0, 0, 96, 41, 178, 173, 0, 0,
	162, 114, 153, 79, 90, 0, 86, 0, 0, 0,
	87, 88, 123, 137, 0, 0, 2219, 0, 0, 179,
	144, 180, 0, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 46, 83, 146, 149, 69, 133,
	58, 92, 139, 93, 115, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1294, 1295, 0, 0, 0, 0,
	0, 0, 0, 0, 1290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1284, 1285, 1287, 0, 0, 0, 1286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 0, 181, 52, 73, 156, 0, 0,
	0, 0, 0, 40, 0, 0, 0, 182, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 72, 66,
	67, 119, 120, 167, 168, 169, 143, 63, 0, 70,
	71, 0, 151, 0, 0, 0, 122, 0, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 0, 98, 47,
	102, 0, 0, 0, 0, 0, 0, 0, 59, 60,
	0, 0, 106, 101, 127, 129, 138, 147, 157, 164,
	140, 176, 177, 161, 2147, 0, 109, 163, 77, 97,
	172, 99, 100, 135, 56, 118, 0, 94, 75, 0,
	0, 0, 80, 49, 89, 50, 78, 111, 0, 76,
	0, 152, 121, 0, 0, 0, 170, 0, 126, 0,
	1293, 0, 0, 0, 113, 154, 116, 145, 108, 136,
	65, 125, 165, 95, 131, 166, 519, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 160, 91, 62, 175, 0, 134, 48, 128,
	0, 0, 54, 57, 171, 158, 85, 84, 804, 0,
	1292, 1281, 1280, 0, 0, 112, 117, 141, 105, 0,
	0, 0, 1282, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 124, 0, 1283, 0, 61, 55, 0,
	110, 0, 0, 0, 64, 0, 82, 142, 0, 45,
	0, 0, 186, 183, 148, 155, 107, 0, 0, 159,
	104, 103, 0, 0, 0, 0, 0, 0, 96, 0,
	178, 173, 0, 0, 162, 114, 153, 79, 90, 0,
	86, 0, 0, 0, 87, 88, 123, 137, 0, 0,
	2214, 0, 0, 179, 144, 180, 0, 184, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 46, 83,
	146, 149, 69, 133, 58, 92, 139, 93, 115, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1276, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1294, 1295,
	0, 0, 0, 0, 0, 0, 0, 0, 1290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1284, 1285, 1287,
	0, 0, 0, 1286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 0, 0, 181, 52,
	73, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 72, 66, 67, 119, 120, 167, 168, 169,
	143, 63, 0, 70, 71, 0, 151, 0, 0, 0,
	122, 0, 0, 0, 174, 0, 0, 0, 0, 0,
	0, 0, 98, 47, 102, 0, 0, 0, 0, 0,
	0, 0, 59, 60, 0, 0, 106, 101, 127, 129,
	138, 147, 157, 164, 140, 176, 177, 161, 150, 0,
	109, 163, 77, 97, 172, 99, 100, 135, 56, 118,
	0, 94, 75, 0, 0, 0, 80, 49, 89, 50,
	78, 111, 0, 76, 0, 152, 121, 0, 0, 0,
	170, 0, 126, 0, 1293, 0, 0, 0, 113, 154,
	116, 145, 108, 136, 65, 125, 165, 95, 131, 166,
	0, 0, 0, 216, 0, 213, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 160, 91, 62, 175,
	0, 134, 48, 128, 0, 0, 54, 57, 171, 158,
	85, 84, 804, 0, 1292, 1281, 1280, 0, 0, 112,
	117, 141, 105, 0, 0, 0, 1282, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 124, 0, 1283,
	0, 61, 55, 0, 110, 0, 0, 0, 64, 0,
	82, 142, 0, 45, 0, 0, 186, 183, 148, 155,
	107, 0, 0, 159, 104, 103, 0, 0, 0, 0,
	0, 0, 96, 0, 178, 173, 0, 0, 162, 114,
	153, 79, 90, 0, 86, 0, 0, 0, 87, 88,
	123, 137, 0, 0, 0, 0, 0, 179, 144, 180,
	0, 184, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 46, 83, 146, 149, 69, 133, 58, 92,
	139, 93, 115, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1294, 1295, 0, 0, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1284, 1285, 1287, 0, 0, 0, 1286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 181, 52, 73, 156, 1262, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 72, 66, 67, 119,
	120, 167, 168, 169, 143, 63, 0, 70, 71, 0,
	151, 0, 0, 0, 122, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 98, 47, 102, 0,
	0, 0, 0, 0, 0, 0, 59, 60, 0, 0,
	106, 101, 127, 129, 138, 147, 157, 164, 140, 176,
	177, 161, 150, 0, 109, 163, 77, 97, 172, 99,
	100, 135, 56, 118, 0, 94, 75, 0, 0, 0,
	80, 49, 89, 50, 78, 111, 0, 76, 0, 152,
	121, 0, 0, 0, 170, 0, 126, 0, 1293, 0,
	0, 0, 113, 154, 116, 145, 108, 136, 65, 125,
	165, 95, 131, 166, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	160, 91, 62, 175, 0, 134, 48, 128, 0, 0,
	54, 57, 171, 158, 85, 84, 0, 0, 0, 0,
	0, 0, 0, 112, 117, 141, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 124, 0, 0, 0, 61, 55, 0, 110, 0,
	0, 0, 64, 0, 82, 142, 0, 45, 0, 0,
	186, 183, 148, 155, 107, 0, 0, 159, 104, 103,
	0, 0, 0, 0, 0, 0, 96, 0, 178, 173,
	0, 0, 162, 114, 153, 79, 90, 0, 86, 0,
	0, 0, 87, 88, 123, 137, 0, 0, 0, 0,
	0, 179, 144, 180, 0, 184, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 46, 83, 146, 149,
	69, 133, 58, 92, 139, 93, 115, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 804, 0,
	1292, 1281, 1280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1282, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 0, 1283, 181, 52, 73, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	72, 66, 67, 119, 120, 167, 168, 169, 143, 63,
	0, 70, 71, 0, 151, 0, 0, 0, 122, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	98, 47, 102, 0, 0, 0, 0, 0, 667, 0,
	59, 60, 0, 0, 106, 101, 127, 129, 138, 147,
	157, 164, 140, 176, 177, 666, 0, 0, 0, 0,
	665, 0, 0, 0, 0, 1984, 0, 711, 0, 712,
	0, 0, 0, 0, 0, 1288, 0, 702, 703, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 1294, 1295,
	210, 692, 689, 690, 694, 695, 696, 697, 1290, 0,
	0, 693, 698, 559, 560, 668, 0, 0, 0, 0,
	663, 681, 0, 0, 710, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1284, 1285, 1287,
	0, 0, 0, 1286, 0, 0, 0, 0, 678, 679,
	0, 0, 0, 0, 727, 0, 680, 0, 0, 1149,
	677, 682, 1758, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 183, 804, 0, 1292, 1281, 1280,
	0, 0, 725, 804, 0, 1292, 1281, 1280, 0, 1282,
	0, 178, 0, 0, 0, 0, 0, 1282, 0, 0,
	1151, 0, 1283, 0, 0, 0, 0, 0, 0, 0,
	1283, 0, 0, 0, 179, 0, 180, 0, 184, 185,
	0, 0, 0, 0, 0, 688, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1979, 0, 0,
	0, 0, 0, 0, 0, 1880, 0, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 1156, 0, 324, 325,
	326, 328, 327, 1160, 1293, 1152, 0, 1164, 1163, 1165,
	1150, 1167, 0, 0, 0, 1171, 1168, 1170, 1169, 713,
	1166, 0, 1276, 0, 0, 0, 0, 0, 0, 0,
	1276, 0, 1288, 0, 0, 1157, 1158, 0, 0, 0,
	1288, 0, 0, 0, 0, 1294, 1295, 729, 0, 714,
	715, 0, 0, 1294, 1295, 1290, 1159, 1161, 0, 181,
	0, 0, 0, 1290, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	700, 0, 0, 0, 1284, 1285, 1287, 0, 0, 0,
	1286, 0, 1284, 1285, 1287, 0, 0, 0, 1286, 0,
	0, 0, 716, 726, 722, 723, 720, 721, 719, 718,
	717, 728, 704, 705, 706, 707, 709, 0, 0, 563,
	562, 708, 667, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 993, 0, 666,
	0, 0, 0, 0, 665, 0, 0, 0, 0, 0,
	0, 711, 0, 712, 0, 0, 176, 177, 724, 0,
	0, 702, 703, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 0, 0, 210, 692, 689, 690, 694, 695,
	696, 697, 0, 0, 0, 693, 698, 559, 560, 668,
	0, 0, 0, 0, 663, 681, 0, 0, 710, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 678, 679, 996, 0, 0, 0, 727, 0,
	680, 0, 0, 676, 677, 682, 0, 0, 0, 0,
	0, 1293, 0, 0, 0, 0, 0, 186, 183, 1293,
	0, 0, 0, 0, 0, 0, 725, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 667,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 666, 0, 179, 0,
	180, 665, 184, 185, 0, 0, 0, 0, 711, 688,
	712, 0, 0, 0, 0, 0, 0, 0, 702, 703,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 0,
	867, 210, 692, 689, 690, 694, 695, 696, 697, 0,
	0, 0, 693, 698, 559, 560, 668, 0, 0, 0,
	0, 663, 681, 0, 0, 710, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 678,
	679, 0, 0, 0, 0, 727, 0, 680, 0, 0,
	676, 677, 682, 713, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 183, 0, 0, 0, 0,
	0, 0, 0, 725, 0, 0, 0, 0, 0, 0,
	0, 729, 178, 714, 715, 0, 0, 0, 0, 0,
	0, 0, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 182, 180, 0, 184,
	185, 0, 0, 0, 700, 0, 688, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 716, 726, 722, 723,
	720, 721, 719, 718, 717, 728, 704, 705, 706, 707,
	709, 0, 0, 563, 562, 708, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 724, 0, 0, 0, 0, 0, 0, 0,
	713, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 729, 0,
	714, 715, 0, 0, 0, 0, 0, 0, 0, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 716, 726, 722, 723, 720, 721, 719,
	718, 717, 728, 704, 705, 706, 707, 709, 0, 0,
	563, 562, 708, 667, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	666, 0, 0, 0, 0, 665, 0, 0, 0, 0,
	0, 0, 711, 0, 712, 0, 0, 176, 177, 724,
	0, 0, 702, 703, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 0, 0, 210, 692, 689, 690, 694,
	695, 696, 697, 0, 0, 0, 693, 698, 559, 560,
	668, 0, 0, 0, 0, 663, 681, 0, 0, 710,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 678, 679, 996, 0, 0, 0, 727,
	0, 680, 0, 0, 676, 677, 682, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 183,
	0, 0, 0, 0, 0, 0, 0, 725, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 804, 0, 0,
	667, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 666, 0, 179,
	0, 180, 665, 184, 185, 0, 0, 0, 0, 711,
	688, 712, 0, 0, 0, 0, 0, 0, 0, 702,
	703, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	0, 0, 210, 692, 689, 690, 694, 695, 696, 697,
	0, 0, 0, 693, 698, 559, 560, 668, 0, 0,
	0, 0, 663, 681, 0, 0, 710, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	678, 679, 0, 0, 0, 0, 727, 0, 680, 0,
	0, 676, 677, 682, 713, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 183, 0, 0, 0,
	0, 0, 0, 0, 725, 0, 0, 0, 0, 0,
	0, 0, 729, 178, 714, 715, 0, 0, 0, 0,
	0, 0, 0, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 182, 180, 0,
	184, 185, 0, 0, 0, 700, 0, 688, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 716, 726, 722,
	723, 720, 721, 719, 718, 717, 728, 704, 705, 706,
	707, 709, 0, 0, 563, 562, 708, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 724, 0, 0, 0, 0, 0, 0,
	0, 713, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 729,
	0, 714, 715, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 700, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 716, 726, 722, 723, 720, 721,
	719, 718, 717, 728, 704, 705, 706, 707, 709, 0,
	0, 563, 562, 708, 667, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 666, 0, 0, 0, 0, 665, 0, 0, 0,
	0, 0, 0, 711, 0, 712, 0, 0, 176, 177,
	724, 0, 0, 702, 703, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 0, 0, 210, 692, 689, 690,
	694, 695, 696, 697, 0, 0, 0, 693, 698, 559,
	560, 668, 0, 0, 0, 0, 663, 681, 0, 0,
	710, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 678, 679, 0, 0, 0, 0,
	727, 0, 680, 0, 0, 676, 677, 682, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	183, 0, 0, 0, 0, 0, 0, 0, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	1098, 1099, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 711, 0, 712,
	179, 0, 180, 0, 184, 185, 0, 702, 703, 0,
	0, 688, 0, 0, 0, 0, 0, 519, 0, 0,
	210, 692, 689, 690, 694, 695, 696, 697, 0, 0,
	0, 693, 698, 559, 560, 0, 0, 0, 0, 0,
	0, 681, 0, 0, 710, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 678, 679,
	0, 0, 0, 0, 727, 0, 680, 0, 0, 676,
	677, 682, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 183, 713, 0, 0, 0, 0,
	0, 0, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 729, 0, 714, 715, 0, 0, 0,
	0, 0, 0, 0, 179, 181, 180, 0, 184, 185,
	0, 0, 0, 0, 0, 688, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 700, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 716, 726,
	722, 723, 720, 721, 719, 718, 717, 728, 704, 705,
	706, 707, 709, 0, 0, 563, 562, 708, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 713,
	0, 0, 176, 177, 724, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 729, 0, 714,
	715, 0, 0, 0, 0, 0, 0, 0, 0, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	700, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 716, 726, 722, 723, 720, 721, 719, 718,
	717, 728, 704, 705, 706, 707, 709, 0, 0, 563,
	562, 708, 0, 0, 0, 711, 0, 712, 0, 0,
	0, 0, 0, 0, 0, 702, 703, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 0, 0, 210, 692,
	689, 690, 694, 695, 696, 697, 176, 177, 724, 693,
	698, 559, 560, 0, 0, 0, 0, 0, 0, 681,
	0, 0, 710, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 678, 679, 0, 0,
	0, 0, 727, 0, 680, 0, 0, 676, 677, 682,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 183, 0, 0, 0, 0, 0, 0, 0,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 711,
	0, 712, 179, 0, 180, 0, 184, 185, 0, 702,
	703, 0, 0, 688, 0, 0, 0, 0, 0, 1014,
	0, 0, 210, 692, 689, 690, 694, 695, 696, 697,
	0, 0, 0, 693, 698, 559, 560, 0, 0, 0,
	0, 0, 0, 681, 0, 0, 710, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	678, 679, 0, 0, 0, 0, 727, 0, 680, 0,
	0, 676, 677, 682, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 183, 713, 0, 0,
	0, 0, 0, 0, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 729, 0, 714, 715, 0,
	0, 0, 0, 0, 0, 0, 179, 181, 180, 0,
	184, 185, 0, 0, 0, 0, 0, 688, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 700, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	716, 726, 722, 723, 720, 721, 719, 718, 717, 728,
	704, 705, 706, 707, 709, 0, 0, 563, 562, 708,
	0, 0, 0, 0, 254, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 713, 0, 0, 176, 177, 724, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 729,
	0, 714, 715, 268, 0, 298, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 700, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 716, 726, 722, 723, 720, 721,
	719, 718, 717, 728, 704, 705, 706, 707, 709, 0,
	0, 563, 562, 708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	724, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	310, 0, 324, 325, 326, 328, 327, 291, 292, 293,
	297, 295, 294, 296, 262, 264, 0, 260, 263, 269,
	265, 266, 267, 281, 270, 271, 272, 273, 274, 283,
	282, 284, 285, 286, 287, 275, 276, 277, 278, 279,
	280, 288, 299, 300, 301, 302, 303, 304, 305, 306,
	307, 0, 0, 0, 0, 986, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261,
}

var yyPact = [...]int16{
	900, -1000, -1000, -285, -1000, -1000, -1000, -1000, 1652, 3480,
	8460, 8460, 422, 382, 1668, 900, -1000, 5288, 503, 498,
	495, 220, 473, 979, 4606, 6500, 518, 660, 675, 419,
	-1000, -250, -233, -1000, -91, 1481, -1000, -1000, 540, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1455, 511, -1000,
	556, 588, 612, -1000, 1348, -1000, 6039, 6039, 6039, 6039,
	400, 979, 979, 419, 129, 419, 1667, 595, 1666, 868,
	-1000, -1000, 707, -1000, 1792, 706, -1000, -1000, 419, -1000,
	867, -1000, 863, -1000, 6500, 860, -1000, -1000, -1000, -1000,
	4263, 8460, -1000, 4198, 4137, 1664, 1774, -1000, 1773, -1000,
	6500, 4884, 979, 197, 3096, 248, -175, 16, -1000, -1000,
	-1000, -1000, -1000, 704, 703, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1548, 70, 1651, 1548, 1651, -1000, 1548, 1651,
	63, 63, 63, 63, 63, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1650, 1649,
	-1000, 1548, 1548, 1548, 1548, 1548, -1000, -1000, 1548, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1648, 1548, 1550,
	96, 1562, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 248,
	248, 248, 1647, 6500, 979, 1092, 1662, 1661, 6500, -267,
	6500, 6500, 1847, -1000, -1000, -1000, 170, 6500, 1770, 7652,
	6039, 9672, 6500, 1768, 1767, -1000, 1766, 6500, 465, -1000,
	6500, 1863, 610, 6500, 6500, 979, 1054, 757, 755, -1000,
	747, 6844, -1000, 1735, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1632, 943, 979, 348, 188, 1382, 336, 443,
	314, 1190, 345, -1000, -1000, -1000, 939, -1000, 979, -1000,
	1883, -1000, -1000, 327, -1000, 324, 854, 1061, 6500, 1631,
	180, 1630, 2365, 1030, -1000, -292, -1000, 5, -1000, 1060,
	1188, 63, 1015, 1548, -1000, 63, 924, 63, 63, -1000,
	-1000, 722, 1747, 722, 722, 722, 722, 1059, 1059, -137,
	-137, -1000, -1000, -1000, -1000, 1028, -1000, -1000, 1026, 1550,
	-1000, -1000, 1022, 6500, 979, 1627, 1660, 1659, 6500, 6500,
	6500, 1789, 472, -1000, -1000, 1786, 1783, 1445, -1000, -1000,
	169, -1000, -1000, 595, 979, -1000, 696, -1000, -1000, -1000,
	-1000, -1000, -1000, 1482, 979, 1050, -1000, 445, 372, 1860,
	372, 344, 608, -1000, 1657, -1000, -1000, 975, 971, 1058,
	8056, 197, -1000, -1000, -1000, 3765, -1000, 1875, 1810, -10,
	322, -235, 1171, -1000, -1000, 1626, -1000, -1000, 11845, -1000,
	1151, 1128, -1000, 1102, 1100, -8, 979, -1000, -243, 98,
	15, -1000, -1000, 1382, -1000, 1625, 11845, 1780, -1000, 1753,
	805, -1000, 1101, -1000, -272, -1000, -1000, 990, -1000, -272,
	-1000, -1000, -1000, 1382, -1000, 1624, 1623, -1000, 1622, -1000,
	-1000, 1382, 1382, 1382, 686, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 722, 1429, 63, 722, 1427, 1422, 722, 722,
	-1000, -1000, 1099, 784, -1000, -1000, -1000, -1000, 1346, -1000,
	1344, -1000, 86, 85, -1000, 1421, 1508, -1000, 1338, 1504,
	1656, 3315, 6500, 6500, 1621, 1620, 1619, 1480, 419, 1480,
	1809, 235, 6500, 1847, 389, 1847, 595, 8864, 979, -1000,
	-1000, -1000, 372, 182, -1000, -1000, -1000, 372, 390, 306,
	979, -1000, -1000, -1000, 446, 6500, -1000, -1000, -1000, -1000,
	-1000, 6440, -1000, -1000, 1336, -1000, 265, 265, 1548, 11845,
	728, 728, -247, 1502, 312, -235, 1382, 310, 1617, -1000,
	3765, 685, -1000, 11845, 74, 1382, 1382, 1382, 1382, 11481,
	-1000, -1000, 672, -1000, -1000, -1000, 12317, 12317, 12317, 12317,
	12317, 12317, 12317, -1000, -1000, -1000, -1000, 28, -1000, -272,
	-1000, 1051, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 670,
	651, -1000, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
	11845, 1382, 1728, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
	1382, 1382, 1382, 1382, 7251, 1382, 1382, 1382, 1382, -1000,
	-1000, -1000, -1000, -1000, -1000, -235, 1616, -1000, -1000, -1000,
	854, -1000, 11845, 389, 893, 151, -1000, 1497, -1000, 1021,
	1420, 713, 1418, -1000, 12633, -1000, -1000, -1000, 1098, -1000,
	998, -1000, 946, 1417, 10823, 11334, 11334, 8864, -1000, -1000,
	722, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 63,
	1055, 63, 1, -7, -1000, 1020, -1000, 1017, 3315, 979,
	6500, 1415, 1495, -1000, 274, 265, 1615, 1613, 3315, 389,
	3765, -1000, 1831, 1889, -1000, 1480, 6500, -1000, 435, 1869,
	-1000, -1000, 1804, -1000, 1494, -1000, -1000, 1443, 1847, -1000,
	1611, 178, 574, 372, 339, -1000, -1000, 979, -1000, -1000,
	373, 979, -1000, -1000, -1000, -1000, -1000, -1000, 2700, 3765,
	1763, -1000, -1000, 1763, -1000, -1000, 890, 938, -1000, -1000,
	889, 208, 912, -1000, 11845, 979, -235, 1610, 11845, 979,
	3765, 1328, 230, 11845, 11845, 903, -1000, -1000, 278, 11979,
	951, 856, 12317, 12317, 12317, 12317, 12317, 12317, 12317, 12317,
	12317, 12317, 12317, 12317, 12317, 12317, 12317, 1036, 6847, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1083, -1000, 1480, 4884, 1098, 1098, 1098, 1326, 11481,
	508, 1120, 1120, 38, 11481, 38, 38, 38, 38, 38,
	71, -1000, -287, -1000, -1000, 7652, 8864, 11334, 11334, 10459,
	11845, 11334, 11334, 11334, 1794, 842, 508, 4884, 1802, 1098,
	1098, 1098, 1098, -1000, 1098, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 284, -1000, -1000, -1000, -1000, -1000, -1000,
	1608, 1606, 1604, 1590, 1585, 1582, 1575, -1000, 11334, 11334,
	11334, 11334, -1000, 979, 1382, 685, 1324, -156, 11845, 1573,
	805, -1000, -1000, 1413, -272, -1000, -1000, -175, -1000, -1000,
	-1000, -1000, 1098, 11334, 1212, -1000, -1000, 796, 649, 1212,
	1212, 1382, -1000, 722, -1000, 722, -1000, -1000, 1406, 1405,
	1393, 1570, 1568, -254, 1015, 3315, 3315, 1392, 1322, 1238,
	1816, 1826, 1480, 1782, 1733, -1000, 1098, 1777, 979, -1000,
	-1000, -1000, -1000, -1000, 202, 787, 979, 9756, 1408, -1000,
	4413, 571, 562, -1000, -1000, -1000, 1566, 93, 379, 1588,
	2890, 172, -1000, 1066, 821, 1042, 816, 812, 810, 808,
	806, 804, 800, 795, 793, 782, -1000, -1000, -1000, -1000,
	-1000, 1763, -1000, 1879, -1000, -1000, -1000, 1848, 1236, -1000,
	149, 1565, 1564, 3765, 685, 1563, 1234, 2700, -1000, -117,
	278, 317, -1000, -1000, 930, -1000, -1000, 558, 12317, 12317,
	12317, -1000, -1000, -1000, -1000, 951, 12317, 12317, 12317, 2413,
	558, 2453, 315, 2182, 38, 194, 194, 23, 23, 23,
	23, 23, 598, 598, -1000, -1000, -1000, 173, -1000, 1098,
	1098, -1000, -1000, -1000, 11845, -1000, 1098, -1000, -272, 1039,
	-1000, -1000, 988, 1382, -1000, 1212, 1212, 603, 1493, 12451,
	1548, -1000, 1548, 1562, 1550, -1000, 96, -1000, -1000, 108,
	1548, 107, 1548, 1548, 1548, -1000, -1000, 1548, 1548, -1000,
	1548, 1548, 783, 1440, 1426, 1212, 11334, -1000, 792, -1000,
	11845, 1098, 6500, -1000, -1000, -1000, -1000, -1000, 1556, 1014,
	1013, 1012, 1010, 1007, 1002, 1000, 999, 1212, 1098, 1492,
	1212, 1212, 1229, -1000, 11845, 230, 1655, -1000, -1000, 886,
	-1000, 1390, 1381, -1000, -1000, 1212, 11334, -283, -1000, -1000,
	1047, -1000, -1000, 6036, -283, -283, 11334, -1000, -1000, -1000,
	-1000, -254, 3315, 3765, 1837, 1555, 1378, 1375, -254, 1837,
	2700, 1754, 11845, 11845, 1831, -1000, 1480, -1000, -1000, 1794,
	-1000, -1000, 905, -1000, 1480, 1377, 191, 126, 11845, -1000,
	3951, -1000, 9756, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1831, 11845, -1000, -1000, -1000,
	-1000, -1000, 335, 4367, 979, 979, 979, 641, 11845, 1082,
	11845, -1000, -1000, -1000, -1000, -1000, 6500, 1373, 4413, 4413,
	4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413,
	4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413,
	4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413,
	4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413,
	4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413,
	4413, 4413, 4413, 4413, 4413, 4413, 546, -1000, 3765, 3765,
	1553, 1551, 309, -1000, 979, -1000, -170, 2890, 979, -1000,
	997, -1000, -1000, 874, 996, 874, 874, 874, 874, 874,
	211, 994, 392, -1000, 728, 728, 1837, 11845, 902, 11845,
	3765, 1210, 230, 979, 2700, 1588, -1000, -1000, -1000, -1000,
	558, 558, 558, -1000, 2413, 558, 1023, -1000, 12317, 12317,
	84, -1000, -1000, 508, -1000, 64, -1000, -272, -1000, -1000,
	-1000, -1000, 4844, 1036, 11845, -1000, 280, -1000, -1000, -1000,
	1550, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4844, 12317, 12317, 12317, 12317, -122, 1411, 794, -1000,
	11845, 725, -1000, -1000, 987, 1371, 1206, 1204, 1367, 1363,
	1361, 1359, 1217, -1000, -1000, -1000, -1000, 362, 979, 685,
	-1000, 1873, -159, 150, -1000, -1000, -1000, -1000, -1000, 1382,
	-1000, -1000, 636, -1000, -1000, 1098, 1837, 1215, 1196, 2700,
	11845, 389, -254, -254, 1837, 2700, -1000, -1000, 1877, 698,
	687, 1491, -1000, 674, 1816, 1098, 1683, -1000, -1000, -128,
	11845, 9756, 4608, 508, 4608, -1000, 9756, 2251, 1816, 5313,
	422, 4026, 712, 1483, 364, 159, -1000, -1000, -1000, 4824,
	962, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 979, 1859, 1856, 1853,
	1840, 6525, 11845, 11845, -1000, 1801, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1157, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1186, 1178, 3765, 3765,
	1549, 1382, 1169, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 854, 854, -1000, -1000, -1000, -1000, -1000, -1000,
	1167, 1163, 2700, -1000, 1160, 1588, -1000, -1000, 12317, 558,
	558, -13, -1000, 988, -1000, 1098, 1548, 1098, 683, -1000,
	-1000, -1000, 1098, 1586, 1544, 579, 176, 1382, -102, -1000,
	508, 11845, 1142, -1000, 977, -1000, 958, -1000, -1000, -1000,
	-1000, -1000, -1000, 6500, -1000, 230, 728, 728, -1000, -1000,
	-1000, 168, 849, 805, 805, 950, 26, -1000, 1822, 447,
	7248, -1000, 2700, 1837, 2700, 1588, 508, 1156, 1837, 1837,
	2700, 1588, -1000, 1725, 11845, 11845, 11845, -1000, 1754, -1000,
	11334, -1000, -1000, -279, 508, 3951, 4046, -1000, -1000, 1037,
	10597, -1000, 1754, 9756, 785, -1000, 834, -1000, 4608, 4062,
	6500, 1203, -1000, 1214, 1589, -1000, -1000, -1000, 1776, 2316,
	3572, 979, 184, 6039, -1000, -1000, 1800, 1467, 5228, -2,
	-1000, -1000, -1000, 781, 629, 1029, -1000, 1742, -1000, -1000,
	4367, 1760, -1000, -1000, -1000, -1000, -1000, 4608, -1000, 1435,
	1098, 787, 200, 4413, -1000, 288, 1150, 1148, 3765, 979,
	-1000, 2890, -1000, -1000, 1837, 2700, 1588, 349, -1000, 558,
	-1000, -1000, -1000, -1000, -1000, 12317, -1000, -1000, 12317, -1000,
	12317, -1000, 12317, -1000, 12317, 12317, 1098, 1035, 508, -1000,
	1119, 1112, 1547, -1000, -1000, -1000, 805, -1000, 805, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3840, -1000, 1820, 1098,
	-1000, 1588, 2700, -1000, -1000, -1000, 2700, 2700, 1588, -1000,
	1721, 508, 508, -1000, -1000, 1399, 11845, 10589, -1000, -1000,
	-1000, -1000, 2894, 10352, 413, 3455, 251, 6500, -1000, 251,
	1200, 712, 6500, -1000, -1000, 4884, 712, 712, 712, 712,
	712, -1000, 1708, 1689, -1000, 1682, 1681, 1714, 6500, 1146,
	2316, 737, 1382, -1000, 6500, -1000, 1776, 1788, -1000, 514,
	5632, 1467, -2, 1457, -1000, -29, -49, 3776, 8864, 722,
	-1000, -1000, -1000, -1000, -1000, 979, 3229, -1000, 125, 189,
	-1000, 141, -1000, 143, 2700, 2700, 1141, 1098, -1000, -1000,
	1588, -1000, 6500, 2242, 2242, 2242, 2242, 2242, 106, -1000,
	-1000, -1000, -1000, 979, -1000, -1000, -1000, 606, 11845, -1000,
	-1000, -1000, 1588, 1588, -1000, -1000, 1837, 712, 508, -1000,
	-1000, 7332, -1000, -1000, 11845, -1000, 11845, 4608, -1000, 1192,
	1382, -1000, 1837, 712, 1380, -1000, 1366, -1000, 720, 1589,
	1543, 1591, 1472, -1000, -1000, -1000, -1000, 1688, -1000, 1685,
	-1000, -1000, -1000, -1000, -141, 492, 487, 484, 979, -1000,
	1480, 8141, -1000, -1000, 1053, -1000, 152, -1000, -1000, -1000,
	1457, -2, -31, -1000, -1000, -1000, -1000, 508, 693, -1000,
	1446, -1000, 4608, -1000, -1000, 137, -1000, 1588, 1588, -1000,
	-1000, -1000, 1538, -1000, -1000, -1000, -1000, -1000, 1098, 204,
	-172, 1137, 8864, 1111, -1000, 508, -1000, -1000, 1835, 1441,
	412, 9756, 7736, 5716, 1545, 4884, 1382, -1000, 9268, 979,
	1831, 1380, -1000, 1837, 4884, 11845, -1000, -1000, 11845, 1533,
	-1000, 11845, -1000, -1000, -1000, -1000, 1521, 1382, 1382, 1382,
	1118, -1000, -1000, -1000, 514, -1000, 6928, -1000, 945, -1000,
	-1000, -1000, -52, -54, -1000, 11845, 3504, -1000, -1000, -1000,
	-1000, 979, -1000, 1718, -125, -209, -1000, -1000, -1000, 1098,
	11845, 1833, 1818, -1000, 2706, 785, -1000, -1000, 1757, 1356,
	1431, -1000, -1000, 10970, 1098, 1135, -1000, -1000, 596, -1000,
	-1000, 1118, 1816, -1000, 1831, -1000, 508, 508, 389, 508,
	37, 389, 389, 389, 3620, 979, -1000, -1000, 292, -1000,
	-1000, -1000, -1000, 508, 9352, 1109, -1000, 1686, -1000, -1000,
	-1000, -1000, 11845, 11845, 8948, 307, -1000, 1382, -1000, -1000,
	1384, 10076, 979, -1000, -1000, 1816, 1097, 1095, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1087, 1087, 1087,
	737, -1000, -1000, 8544, -1000, -1000, -132, 508, 1435, 374,
	1867, -1000, 1382, -1000, 1480, -1000, -1000, -1000, -1000, -1000,
	37, -1000, -1000, -1000, -141, -1000, -174, -1000, 4884, 1431,
	1098, -1000, -1000, -217, 1193, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 2127, 1845, 37, 27, 2126, 2118, 2117, 2115, 2099,
	2098, 2096, 2093, 2092, 2091, 2088, 35, 21, 40, 46,
	38, 2084, 2082, 2078, 2075, 2072, 2070, 2068, 94, 2067,
	2066, 2062, 2061, 108, 2060, 2059, 2057, 2056, 78, 102,
	136, 156, 2804, 36, 45, 60, 42, 2055, 31, 2054,
	2053, 54, 2052, 41, 2050, 2049, 112, 2047, 2046, 9,
	130, 86, 103, 44, 2045, 2044, 89, 1719, 2043, 2042,
	135, 2041, 2040, 85, 39, 63, 3, 6, 13, 2037,
	93, 5, 2036, 82, 81, 2032, 2031, 2029, 117, 2028,
	58, 73, 8, 59, 2026, 14, 10, 125, 43, 22,
	17, 1, 52, 47, 2025, 23, 33, 32, 2024, 76,
	2022, 111, 48, 66, 7, 1869, 0, 34, 150, 2021,
	2018, 2015, 2513, 143, 15, 53, 71, 2013, 68, 91,
	51, 90, 2012, 2011, 2009, 2008, 56, 70, 65, 61,
	2006, 2003, 2002, 2001, 1999, 83, 1998, 2150, 334, 109,
	104, 77, 1997, 1996, 88, 120, 84, 87, 121, 354,
	410, 1989, 1988, 1987, 1986, 119, 69, 74, 105, 1983,
	75, 97, 352, 92, 20, 1853, 107, 204, 1982, 1981,
	1980, 1979, 1978, 1977, 1976, 96, 99, 133, 57, 100,
	524, 50, 1971, 1968, 1961, 1959, 79, 1958, 1952, 1951,
	62, 1947, 1946, 95, 72, 113, 101, 116, 1944, 1942,
	67, 80, 1939, 106, 114, 1935, 110, 98, 26, 152,
	55, 1934, 1932, 1931, 19, 1928, 1927, 1926, 2, 4,
	1924, 1923, 1918, 1916, 1915, 1914, 64, 1913, 154, 1912,
	16, 1910, 1909, 49, 1908, 1907, 1907, 1906, 1904, 866,
	2386, 1900, 1676, 118, 1897, 115,
}

var yyR1 = [...]uint8{
	0, 245, 2, 2, 2, 246, 246, 1, 1, 1,
	1, 24, 24, 24, 24, 24, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 22, 22, 22, 22, 22, 22, 22, 22,
	248, 248, 3, 3, 4, 5, 5, 6, 6, 7,
	7, 31, 31, 8, 9, 9, 9, 251, 251, 51,
	51, 98, 98, 10, 10, 10, 10, 11, 11, 11,
	221, 221, 220, 222, 222, 223, 223, 225, 225, 224,
	224, 224, 224, 224, 224, 224, 226, 226, 226, 226,
	12, 12, 12, 12, 12, 215, 215, 215, 215, 215,
	13, 13, 218, 218, 218, 16, 16, 16, 16, 17,
	17, 18, 18, 18, 20, 20, 103, 103, 107, 107,
	107, 108, 108, 108, 108, 237, 237, 127, 127, 247,
	247, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	213, 213, 213, 213, 214, 214, 214, 214, 216, 216,
	217, 217, 217, 217, 217, 217, 219, 219, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 14,
	14, 32, 32, 75, 75, 15, 113, 113, 194, 194,
	194, 195, 195, 195, 195, 195, 195, 197, 197, 198,
	198, 120, 120, 199, 199, 23, 23, 23, 23, 23,
	23, 23, 23, 27, 179, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 165, 165, 166, 166, 167, 167,
	167, 167, 159, 159, 159, 159, 130, 130, 130, 130,
	130, 130, 130, 130, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 205, 205, 205, 205, 205, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 207,
	208, 209, 201, 201, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 149, 149,
	149, 149, 149, 149, 200, 200, 196, 196, 196, 132,
	132, 132, 132, 132, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 140, 137, 137, 141, 138, 138,
	142, 144, 145, 145, 156, 156, 157, 157, 157, 139,
	139, 143, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 131, 131, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 146, 146, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 158, 158, 147, 147, 148, 148, 148, 155,
	155, 155, 152, 152, 153, 153, 154, 154, 154, 150,
	150, 150, 151, 151, 151, 161, 190, 190, 190, 192,
	192, 193, 193, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 178, 178, 210,
	210, 211, 211, 212, 212, 189, 189, 189, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 177,
	177, 187, 187, 188, 188, 185, 185, 185, 185, 185,
	185, 186, 168, 168, 168, 168, 168, 169, 169, 170,
	170, 170, 170, 162, 162, 163, 163, 164, 164, 203,
	203, 203, 241, 241, 241, 241, 241, 241, 242, 242,
	204, 204, 171, 171, 174, 174, 172, 172, 172, 175,
	175, 173, 173, 176, 176, 183, 183, 183, 183, 253,
	253, 181, 181, 181, 182, 182, 182, 254, 28, 29,
	29, 30, 30, 30, 35, 35, 35, 33, 33, 34,
	34, 40, 40, 39, 39, 41, 41, 41, 41, 119,
	119, 119, 118, 118, 238, 238, 238, 238, 238, 43,
	43, 44, 44, 45, 45, 46, 46, 46, 228, 228,
	227, 227, 229, 229, 229, 229, 229, 229, 229, 229,
	58, 58, 95, 95, 95, 99, 99, 47, 47, 47,
	47, 48, 48, 49, 49, 50, 50, 125, 125, 124,
	124, 124, 52, 52, 52, 54, 53, 53, 53, 53,
	55, 55, 57, 57, 56, 56, 59, 59, 59, 59,
	60, 60, 97, 97, 42, 42, 42, 42, 42, 42,
	42, 42, 110, 110, 62, 62, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 72, 72, 72, 72, 72, 72, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 38,
	38, 73, 73, 73, 80, 74, 74, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 70, 70, 70, 70, 70, 70,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 255, 255, 71, 71, 71, 71, 36,
	36, 36, 36, 36, 126, 126, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 84, 84, 37, 37, 82, 82, 83, 112,
	112, 85, 85, 81, 81, 81, 81, 230, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 63, 63,
	86, 86, 87, 87, 239, 239, 240, 88, 88, 89,
	89, 90, 91, 91, 91, 92, 92, 92, 92, 93,
	93, 93, 65, 65, 65, 65, 65, 65, 94, 94,
	96, 96, 96, 96, 100, 100, 76, 76, 78, 78,
	77, 79, 101, 101, 105, 102, 102, 106, 106, 106,
	106, 106, 25, 26, 104, 104, 104, 121, 121, 121,
	111, 111, 109, 109, 116, 117, 117, 117, 117, 117,
	122, 122, 122, 123, 123, 231, 231, 231, 232, 232,
	232, 233, 233, 234, 235, 235, 236, 236, 236, 244,
	244, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 249, 250,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 2, 0, 1, 1, 1, 1,
	1, 6, 6, 6, 6, 6, 2, 13, 12, 14,
	14, 13, 12, 13, 12, 10, 7, 10, 7, 11,
	11, 9, 13, 16, 5, 8, 7, 10, 6, 9,
	7, 8, 8, 6, 7, 7, 3, 6, 3, 6,
	3, 6, 11, 13, 13, 14, 14, 6, 6, 7,
	1, 1, 4, 6, 10, 1, 3, 1, 3, 7,
	8, 1, 1, 9, 8, 7, 6, 1, 1, 1,
	3, 0, 4, 3, 4, 5, 4, 2, 6, 6,
	1, 3, 3, 0, 1, 1, 1, 1, 3, 1,
	2, 3, 1, 2, 1, 1, 1, 2, 3, 4,
	2, 2, 2, 3, 5, 0, 2, 2, 2, 2,
	3, 5, 1, 2, 3, 7, 10, 1, 1, 5,
	5, 3, 5, 3, 1, 3, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 0,
	3, 0, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 4, 2, 3, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	4, 1, 1, 0, 1, 2, 0, 3, 0, 2,
	2, 0, 2, 2, 2, 2, 2, 0, 2, 0,
	3, 0, 1, 0, 2, 3, 5, 5, 7, 3,
	5, 3, 5, 4, 4, 0, 1, 3, 3, 3,
	3, 3, 3, 3, 7, 9, 1, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 1, 3, 3, 2, 2, 3, 2, 4, 2,
	4, 2, 2, 3, 2, 3, 2, 7, 9, 3,
	3, 6, 9, 9, 6, 6, 8, 8, 5, 8,
	7, 4, 0, 2, 4, 6, 2, 4, 2, 1,
	1, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	2, 1, 1, 2, 0, 4, 3, 4, 3, 3,
	3, 3, 3, 3, 3, 2, 4, 6, 2, 3,
	2, 3, 1, 3, 0, 2, 0, 2, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 3, 0, 1, 0, 5, 0, 3, 5, 1,
	1, 1, 1, 3, 3, 2, 2, 2, 1, 1,
	2, 1, 1, 4, 5, 4, 4, 4, 1, 2,
	2, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 1, 3, 0, 3, 0, 3, 3, 0,
	3, 3, 0, 1, 0, 1, 0, 2, 1, 0,
	3, 3, 0, 1, 2, 6, 0, 1, 4, 1,
	2, 1, 3, 2, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 5, 3, 3,
	2, 3, 2, 3, 3, 2, 2, 3, 4, 1,
	1, 1, 1, 1, 3, 3, 3, 2, 2, 2,
	4, 1, 2, 5, 5, 8, 8, 13, 11, 1,
	1, 2, 2, 10, 8, 9, 7, 7, 5, 0,
	1, 1, 0, 1, 1, 1, 2, 2, 1, 2,
	0, 3, 0, 1, 1, 3, 1, 1, 2, 1,
	3, 1, 1, 1, 3, 0, 4, 1, 3, 2,
	1, 1, 2, 1, 1, 1, 1, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 3, 6, 4, 7, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 0, 4,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 8, 1, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 0, 4, 1, 3, 3, 2, 3, 2,
	1, 2, 0, 3, 1, 1, 3, 4, 4, 4,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 4,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 2, 1, 4, 5, 5, 5, 5, 6,
	4, 4, 6, 6, 8, 6, 6, 6, 8, 6,
	8, 6, 8, 6, 8, 9, 7, 5, 4, 4,
	3, 3, 3, 1, 3, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 2, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	6, 6, 4, 5, 4, 4, 4, 4, 4, 4,
	4, 1, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 0, 2, 1, 1, 3, 5, 3, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	0, 3, 0, 2, 1, 3, 1, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	1, 3, 1, 1, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	5, 3, 1, 3, 1, 2, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 2, 0, 2,
	2, 0, 1, 4, 1, 3, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -245, -2, -1, -21, -22, -23, -24, -27, 126,
	132, 133, 127, 128, 71, 412, -179, 58, -241, -242,
	297, -199, 139, 152, 174, 175, 382, 136, 154, 137,
	394, 395, 156, 397, 79, -175, -172, -117, 21, -116,
	319, 151, -114, -115, 61, 131, 200, 385, 80, 25,
	27, 305, 311, 199, 84, 120, 16, 85, 206, 394,
	395, 119, 76, 363, 126, 52, 355, 356, 353, 204,
	365, 366, 354, 312, 211, 20, 31, 10, 28, 159,
	24, 113, 128, 201, 89, 88, 162, 166, 167, 26,
	160, 75, 207, 209, 19, 55, 150, 11, 384, 13,
	14, 399, 386, 143, 142, 100, 398, 138, 50, 8,
	122, 29, 97, 46, 157, 210, 48, 98, 17, 357,
	358, 34, 372, 168, 115, 53, 40, 400, 81, 401,
	73, 56, 326, 205, 79, 15, 51, 169, 402, 208,
	406, 99, 129, 362, 176, 49, 202, 403, 136, 203,
	6, 368, 33, 158, 47, 137, 313, 404, 87, 141,
	74, 5, 156, 9, 405, 54, 57, 359, 360, 361,
	38, 86, 12, 153, 376, 77, 407, 408, 152, 175,
	177, 310, 323, 135, 179, 180, 134, -175, -109, 142,
	138, 154, 56, -2, -180, -159, -116, -115, 63, 36,
	138, 138, 138, 140, 228, 140, -116, -116, -81, 143,
	61, -115, -122, 63, -56, -122, 61, -115, 137, -116,
	143, -116, 143, 63, -111, 143, 397, 394, 395, 362,
	56, 59, 135, 56, 137, -116, 143, -116, 143, 63,
	137, 145, 138, 60, 59, -160, -130, -132, -131, -134,
	-133, -135, -116, 63, 61, -140, -141, -144, -142, -143,
	264, 374, 261, 265, 262, 267, 268, 269, 120, 266,
	271, 272, 273, 274, 275, 282, 283, 284, 285, 286,
	287, 270, 277, 276, 278, 279, 280, 281, 288, 33,
	161, 254, 255, 256, 259, 258, 260, 257, 122, 289,
	290, 291, 292, 293, 294, 295, 296, 297, -136, -137,
	247, -138, -139, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 246, 249, 250, 251, 253, 252, -160,
	-160, -160, -116, 56, 226, 227, -116, -116, -111, 229,
	-111, 56, -213, 19, 199, 200, 212, 56, 81, 123,
	25, 123, -111, 81, 81, -56, 81, 137, -56, -172,
	137, -56, -56, 326, 56, 26, 26, -56, -81, -116,
	-116, -183, -253, 377, 37, -159, -161, -168, -162, -163,
	-164, -165, -184, -169, 146, 144, 156, 410, 148, 149,
	297, -177, 150, 138, 157, 73, 81, -205, 146, -208,
	56, 305, 311, 144, 157, 156, 410, 71, 147, 25,
	384, 386, 31, 32, -154, 413, 299, -152, 308, 123,
	123, -147, 58, -146, 263, -148, 58, -147, -148, -147,
	-148, -150, 265, -150, -150, -150, -150, 58, 58, -147,
	-147, -147, -147, -147, -147, 58, -147, -156, 58, -145,
	248, -157, 58, 56, 57, -56, -116, -116, 56, 56,
	56, -56, -237, 407, 408, -56, -56, -216, -214, 8,
	9, 10, 213, -56, 26, -117, -123, -114, -115, -122,
	-130, -123, -114, -56, 26, 26, 26, -56, 141, -56,
	11, 131, -56, -56, -116, -116, 63, 97, 97, 97,
	-181, 59, -117, 71, 36, 58, -204, 56, 81, -116,
	-171, 157, -177, 61, 138, -203, 394, 395, -249, 58,
	-177, -177, 61, 138, 157, 61, 157, 73, 19, -116,
	9, 157, 157, -204, 63, -56, 58, -201, 385, 16,
	58, -206, 58, -207, 63, 64, 65, 110, 66, 73,
	-149, 72, -62, 300, -70, 353, 356, 355, 301, 74,
	75, -116, 371, 370, -122, -209, 65, 414, -153, 309,
	63, 61, -150, 65, -147, -150, 65, 61, -150, -150,
	-151, 120, 119, 33, -151, -151, -151, -151, -158, 63,
	-158, -155, 376, 377, -155, 65, 65, -156, 65, -56,
	-116, 58, 56, 56, -56, -56, -56, 25, 140, 25,
	-194, 25, 56, 59, 213, -213, -116, 123, 57, -116,
	-116, 63, 141, -176, -173, -116, 185, 11, -176, -120,
	146, -165, -168, 156, 131, 56, 63, 73, 63, 73,
	63, 90, -117, -253, -188, -185, -116, -115, 157, 58,
	10, 9, 19, 155, 144, 156, 410, 150, -203, 61,
	58, -42, -61, 81, -67, 31, 26, 9, 76, -249,
	-66, -62, -81, -230, -79, -80, 120, 121, 109, 110,
	117, 82, 122, -70, -68, -69, -71, -233, 186, 63,
	64, -116, 62, 72, 65, 66, 67, 68, 73, -122,
	331, -77, 48, 49, 363, 364, 365, 366, 372, 367,
	85, 38, 40, 270, 300, 301, 353, 361, 360, 359,
	357, 358, 355, 356, 409, 143, 354, 115, 362, 298,
	61, 61, 61, 61, -203, 156, -171, -116, 396, -205,
	410, -149, -249, 58, -42, 25, 31, -63, 65, 110,
	-206, 58, -207, -196, 409, 65, 66, -196, -249, -147,
	58, -147, 58, 58, -249, -249, -249, 123, -151, 60,
	-150, -151, 60, 60, -151, -151, 61, 61, 120, 60,
	59, 60, 254, 254, 60, 59, 60, 59, 58, 57,
	56, -187, -188, -70, -116, -115, -56, -56, 58, 58,
	58, -3, -4, -5, 6, -249, -111, -3, -195, 19,
	183, 184, -56, -214, -95, -116, 157, -216, -213, -117,
	-116, -176, 376, 59, -176, 180, 179, -248, 138, 157,
	-116, 146, -168, -56, -182, -117, 63, 65, 60, 59,
	-147, -186, 303, -147, -186, -147, -42, -170, 179, 180,
	33, 181, -170, 396, 58, 57, 157, -203, -249, 157,
	58, -188, -250, 80, 79, 97, 214, 60, -42, -64,
	100, 81, 98, 99, 84, 106, 105, 116, 109, 110,
	111, 112, 113, 114, 115, 107, 108, 119, 409, 90,
	91, 92, 93, 94, 95, 96, 101, 102, 103, 104,
	-110, -249, -80, -249, -249, -249, -61, -3, -74, -249,
	-42, 124, 125, -67, -249, -67, -67, -67, -67, -67,
	-67, -234, 299, -196, 63, 123, 123, -249, -249, -249,
	-249, -249, -249, -249, -249, -84, -42, -249, 41, -249,
	-249, -249, -249, -255, -249, -255, -255, -255, -255, -255,
	-255, -129, 120, 265, 161, 256, -136, -131, 271, 270,
	251, 250, 262, 261, 235, 255, 254, 122, -249, -249,
	-249, -249, -203, 58, -204, -42, -95, 60, 58, 386,
	59, 65, 60, -206, 63, 60, 302, -130, -250, 60,
	60, 60, -40, 24, -39, -41, 111, -42, -122, -39,
	-39, -117, -151, -150, 63, -150, 310, 310, 65, 65,
	-187, -116, -56, 60, 58, 58, 58, -187, -95, -188,
	-88, 15, -30, 5, -28, -254, -3, -56, 141, 21,
	6, 8, 9, 10, 19, -113, 59, 25, -216, -247,
	58, 376, 132, -173, 180, 179, -116, 156, -116, -190,
	-192, 376, -191, 57, 151, 71, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 61, -185, -91, 27, 28,
	-91, 60, -204, 56, 73, 182, -204, 56, -166, -167,
	-42, -116, -203, 58, -42, -171, -188, 60, -200, 181,
	-42, -42, -72, 73, 81, 74, 75, -67, 21, 22,
	23, -73, -77, -80, 69, 100, 98, 99, 84, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -67, -67,
	-67, -67, -67, -67, -126, 61, 63, 255, -129, 61,
	-81, -250, -250, -250, 59, -250, -3, -66, 63, -116,
	-66, -116, 413, -117, -117, -39, -39, -42, -128, 120,
	261, 161, 256, -138, -137, -139, 247, 286, 287, 307,
	254, 308, -136, 259, 258, 260, 271, 262, 267, 269,
	268, 266, -42, -41, -41, -39, -33, 24, -82, -83,
	86, -81, 19, -250, -250, -250, -250, -250, 263, 58,
	58, 58, 58, 58, 58, 58, 58, -39, -40, -39,
	-39, -39, -174, -116, -249, -250, 60, 382, 383, -42,
	58, -63, 60, -154, -250, -39, 59, -250, -119, -118,
	25, -116, 63, 123, -250, -250, -249, -151, -151, 60,
	60, 60, 58, 58, -97, 398, -187, -187, 60, 60,
	60, -92, 17, 16, -6, -4, -249, 21, 24, -35,
	44, 45, -29, -250, 25, -174, 201, -112, 86, -116,
	-217, -219, 230, -19, -16, -7, -9, -8, -11, -10,
	-12, -13, -14, -15, -25, -4, 143, -17, -18, -31,
	10, 9, 20, 33, 205, 206, 211, 207, 153, -32,
	176, -26, 8, 362, 166, 167, 56, -252, -116, 109,
	110, 111, 112, 114, 106, 105, 116, 123, 90, 91,
	92, 63, 59, 58, 65, 66, 67, 68, -115, -136,
	-137, -138, -139, 271, 282, 283, 284, 285, 262, 261,
	272, 273, 274, 73, 81, 80, 79, 100, 97, 98,
	84, 85, 86, 87, 89, 88, 364, 363, 365, 366,
	31, 146, 144, 156, 410, 147, 132, 134, 58, 58,
	394, 395, 144, -189, 56, -191, 376, 58, 378, 61,
	-178, 90, 63, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, -91, 9, 10, 60, 59, 376, 58,
	58, -188, -250, 58, 60, -190, 369, 73, 74, 75,
	-67, -67, -67, -73, -67, -67, -67, -38, 162, 80,
	376, -250, -250, -42, -250, -235, -236, 63, 65, 66,
	-250, -250, 59, 57, 59, -147, -147, -147, -157, -156,
	-145, 241, -147, 241, -147, -147, -147, -147, -147, -147,
	-147, 25, 59, 11, 59, 11, -250, -39, -85, -83,
	89, -42, -250, -122, 58, 65, 65, 65, 65, 65,
	65, 65, 65, -250, -250, -250, -250, 60, 59, -42,
	-200, 56, 60, -202, 60, 60, -250, -41, -238, 411,
	-118, 111, -123, -238, -238, -40, -97, -187, -188, -60,
	12, 58, 60, 60, -97, -60, -190, -93, 19, 34,
	-42, -89, -90, -42, -88, -3, -33, 70, -3, -197,
	57, 202, 230, -42, 412, -219, 230, -217, -88, -42,
	-28, -28, -28, -221, -116, -223, -220, 216, 217, -28,
	-244, -243, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
	350, 351, 352, -116, -116, -116, -215, 40, 208, 209,
	210, -42, -116, -249, -84, -56, 60, -252, -252, -252,
	-252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
	-252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
	-252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
	-252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
	-252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
	-252, -252, -252, -252, -252, 134, -188, -188, 58, 58,
	157, -116, -193, -191, -116, 65, -210, 56, 77, 65,
	-210, -210, -210, -210, -210, -211, 197, 198, 65, -212,
	-211, 65, -170, -170, -60, -167, 90, 80, 79, -116,
	-166, -188, 60, -200, -174, -190, -189, -38, 80, -67,
	-67, 254, 414, 59, -196, -128, 120, -126, -42, -150,
	61, -156, -128, -67, -67, -67, -67, 373, -88, 88,
	-42, 87, 65, 60, 59, 60, 59, 60, 60, 60,
	60, 60, 60, 147, -116, -250, 10, 9, 382, 383,
	60, 231, 388, 389, 168, 390, 181, 391, 392, -249,
	123, -250, -60, 60, 60, -190, -42, -95, -97, -97,
	-60, -190, 9, 100, 59, 18, 59, -91, -92, -250,
	-34, 47, -198, 376, -42, -217, -218, -219, -219, -217,
	412, 88, -92, 87, -20, -16, -17, -19, 230, -109,
	11, -51, -56, -44, -45, -46, -47, -58, -80, -249,
	-56, 59, -222, -125, 203, 25, 215, -102, -127, 232,
	-106, 321, 320, -117, 331, -104, 319, 265, 318, -210,
	59, -116, 11, 11, 11, 11, -219, 230, -75, -74,
	-75, -113, 19, 60, 60, 60, -188, -188, 58, -249,
	60, 59, -204, -204, 60, 60, -190, 60, -189, -67,
	310, -236, -250, -250, -250, 59, -250, -250, 59, -250,
	19, -250, 59, -250, 19, -249, -37, 368, -42, 60,
	65, 65, -56, -200, -170, -170, 376, -63, 16, -63,
	-63, -63, 65, 389, 168, 391, 16, -250, 169, -88,
	111, -190, -60, -190, -189, 60, -60, -60, -190, -189,
	42, -42, -42, -90, -93, -39, 410, 412, -219, 88,
	88, -93, -217, 89, 89, -218, -57, 29, -56, -56,
	-51, -251, 59, 11, 57, 33, 59, -52, -54, -53,
	-55, 46, 50, 52, 47, 48, 49, 53, -125, -44,
	-249, -124, 169, -122, 25, -220, -116, 204, -130, 19,
	59, -102, 232, -103, -107, 322, 324, 90, 123, -121,
	-116, 63, 31, 33, -243, 29, -218, -250, -112, 201,
	-252, -231, 222, 81, 60, 60, -188, -116, -191, -60,
	-190, -189, 147, -67, -67, -67, -67, -67, -67, -250,
	63, 60, 60, 58, -63, -63, 393, -122, 16, -250,
	-189, -190, -190, -190, -189, 43, -43, 11, -42, 88,
	-219, 412, -17, -20, 143, -18, 143, 412, 88, -98,
	169, -56, -98, 57, -44, -56, -101, -105, -81, -45,
	-46, -46, -45, -46, 46, 46, 46, 51, 46, 51,
	46, -53, -122, -250, -59, 54, 142, 55, -249, -122,
	19, -225, -224, 65, 220, 219, 81, 218, -116, -106,
	-103, 59, 323, 325, 326, 56, 77, -42, -117, -151,
	-174, 88, 230, 202, -232, 223, 222, -190, -190, 60,
	-250, -189, -56, -250, -250, -250, -250, -250, -36, 100,
	376, -174, 123, -239, -240, -42, -189, -189, -60, -44,
	88, 89, -42, -42, -65, 33, 38, -3, -249, -249,
	-60, -44, -60, -43, 59, 90, -49, -48, 56, 57,
	-50, 56, -48, 46, 46, -228, 376, 138, 138, 138,
	-99, -116, -3, -226, 59, -219, 230, 63, 41, 221,
	-107, -108, 327, 324, 330, 90, -218, 225, 224, -189,
	-189, 58, -250, 374, 53, 379, 60, -117, -250, -88,
	59, -86, 13, 143, -217, -20, -20, -100, 56, -101,
	-76, -78, -77, -249, -3, -94, -96, 6, -116, -114,
	-115, -99, -88, -60, -60, -105, -42, -42, 58, -42,
	58, -249, -249, -249, -250, 59, -224, 88, -217, 63,
	324, 328, 329, -42, 412, -174, 43, 375, 380, -250,
	-240, -87, 14, 16, 412, 30, -100, 59, -250, -250,
	-250, 59, 123, -250, -92, -88, -95, -227, -229, 399,
	400, 401, 402, 403, 404, 405, 406, -95, -95, -95,
	-124, -116, 88, 412, 88, 60, 43, -42, -74, 88,
	157, -78, 38, -3, -249, -96, -116, -92, 60, 60,
	59, -250, -250, -250, -59, 88, 376, 143, 9, -76,
	-3, -229, -228, 379, -101, -250, 380,
}

var yyDef = [...]int16{
	0, -2, 1, 2, 7, 8, 9, 10, 0, -2,
	0, 0, 972, 0, 0, 4, 16, 275, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	563, 564, 565, 568, 0, 0, 579, 576, 577, 975,
	976, 977, 978, 979, 974, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1163, 0, 0, 973,
	0, 0, 0, 3, 0, 276, 332, 332, 332, 332,
	0, 0, 0, 970, 0, 970, 0, 893, 0, 0,
	-2, -2, 0, 982, 0, 684, 980, 981, 970, 46,
	0, 48, 0, 50, 0, 0, 569, 566, 567, 264,
	0, 0, 578, 0, 0, 265, 0, 269, 0, 271,
	0, 0, 0, 585, 0, 292, 476, 472, 297, 298,
	299, 300, 301, 0, 974, 379, 380, 381, 382, 383,
	421, 422, 464, 451, 466, 464, 466, 428, 464, 466,
	479, 479, 479, 479, 479, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 0, 0,
	412, 464, 464, 464, 464, 464, 418, 419, 464, 453,
	454, 455, 456, 457, 458, 459, 460, 0, 464, 404,
	402, 406, 411, 384, 385, 386, 387, 388, 389, 390,
	391, 392, 393, 395, 396, 398, 399, 409, 410, 293,
	294, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 0, 0, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 893,
	0, 274, 587, 0, 590, 277, 278, 279, 280, 281,
	282, 283, 0, 570, 572, 0, 559, 0, 0, 0,
	0, 0, 0, 529, 530, 305, 0, 307, 0, 309,
	0, 311, 312, 0, 314, 316, 570, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 478, 474, 473, 0,
	0, 479, 0, 464, 452, 479, 0, 479, 479, 429,
	430, 482, 0, 482, 482, 482, 482, 0, 0, 469,
	469, 415, 416, 417, 420, 0, 394, 397, 0, 404,
	403, 400, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 145, 146, 0, 248, 0, 218, 214,
	215, 216, 213, 0, 0, 895, 0, -2, -2, 983,
	34, 685, 984, 0, 0, 0, 971, 0, 0, 0,
	0, 261, 0, 267, 266, 270, 272, 0, 0, 0,
	0, 0, 591, 593, 589, 0, 542, 0, 0, 573,
	0, 559, 0, 525, -2, 0, 560, 561, 991, 1164,
	0, 0, 520, 522, 0, 559, 572, 306, 0, 0,
	0, 313, 315, 0, 319, 320, 991, 0, 352, 0,
	0, 333, 0, 336, -2, 339, 340, 0, 342, 376,
	345, 346, 347, 0, 349, 464, 464, 372, 0, 704,
	705, 0, 0, 0, 0, 350, 351, 477, 296, 475,
	302, 303, 482, 0, 479, 482, 0, 0, 482, 482,
	431, 483, 0, 0, 432, 433, 434, 435, 0, 462,
	0, 413, 0, 0, 414, 0, 0, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 970, 0,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	49, 51, 0, 38, 583, 581, 582, 0, 43, 0,
	572, 57, 58, 262, 0, 0, 11, 12, 13, 14,
	15, 0, 592, 588, 0, 533, 464, 464, 464, 991,
	0, 0, 0, 0, 0, 559, 0, 0, 0, 524,
	0, 0, 694, 991, 700, 702, 0, 0, 0, 991,
	747, 748, 749, 750, 751, 752, 991, 991, 991, 991,
	991, 991, 991, 778, 779, 780, 781, 0, 783, -2,
	899, 893, 901, 902, 903, 904, 905, 906, 907, 0,
	0, 951, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 813, 823, 823, 823,
	823, 823, 823, 823, 0, 0, 0, 0, 0, 992,
	518, 519, 521, 523, 527, 559, 0, 573, 331, 308,
	570, 310, 991, 0, 0, 0, 353, 0, 908, 0,
	0, 0, 0, 338, 0, 341, 343, 344, 0, 368,
	0, 370, 0, 0, -2, 991, 991, 0, 423, 465,
	482, 425, 467, 468, 426, 427, 484, 480, 481, 479,
	0, 479, 0, 0, 461, 0, 407, 0, 0, 0,
	0, 0, 531, 532, 464, -2, 0, 0, 0, 0,
	0, -2, 917, 0, 597, 0, 0, -2, 0, 0,
	249, 250, 246, 219, 217, 652, 653, 0, 0, 896,
	149, 36, 0, 0, 40, 44, 45, 0, 60, 61,
	573, 572, 59, 268, 586, 594, 595, 596, 486, 0,
	922, 538, 541, 922, 539, 537, 0, 570, 549, 550,
	0, 0, 570, 571, 991, 0, 559, 0, 991, 572,
	0, 0, 374, 991, 991, 0, 699, 1165, 697, 991,
	0, 0, 991, 991, 991, 991, 991, 991, 991, 991,
	991, 991, 991, 991, 991, 991, 991, 0, 0, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	701, 0, 718, 0, 0, 0, 694, 65, 0, 991,
	745, 0, 0, 769, 991, 770, 771, 772, 773, 774,
	775, 782, 0, 898, 900, 0, 0, 991, 991, 991,
	991, 991, 991, 991, 607, 0, 883, 0, 0, 0,
	0, 0, 0, 815, 0, 816, 817, 818, 819, 820,
	821, 822, 862, 0, 864, 865, 866, 867, 868, 869,
	0, 0, 0, 0, 384, 0, 0, 881, 991, -2,
	991, 991, 528, 0, 0, 0, 0, 0, 991, 328,
	0, 909, 334, 0, 376, 337, 377, 476, 348, 369,
	371, 373, 0, 991, 0, 613, 615, 619, 0, 0,
	0, 0, 424, 482, 463, 482, 470, 471, 0, 0,
	0, 0, 0, 692, 1164, 0, 0, 0, 0, 0,
	925, 0, 0, 601, 604, 599, 65, 0, 0, 252,
	253, 254, 255, 256, 0, 889, 0, 0, 0, 35,
	151, 0, 0, 584, 41, 42, 0, 0, 573, 515,
	487, 0, 489, 0, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 534, 535, 923, 924,
	536, 922, 543, 0, 551, 552, 544, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 486, 558, 0,
	695, 696, 698, 722, 0, 724, 726, 706, 991, 991,
	991, 710, 741, 742, 743, 0, 991, 991, 991, 739,
	714, 0, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 767, 834, 835, 0, 777, 0,
	0, 720, 721, 744, 991, 950, 65, 765, 376, 0,
	766, 776, 0, 895, 897, 0, 0, 0, 0, -2,
	464, 839, 464, 406, 404, 843, 402, 845, 846, 847,
	464, 850, 464, 464, 464, 855, 856, 464, 464, 859,
	464, 464, 0, 0, 0, 0, 991, 608, 891, 886,
	991, 0, 0, 810, 811, 812, 814, 824, 863, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 612,
	0, 0, 0, 574, 991, 374, 321, 324, 325, 0,
	354, 0, 0, 378, 784, 0, 991, 624, 616, 620,
	0, 622, 623, 0, 624, 624, -2, 449, 450, 405,
	408, 692, 0, 0, 690, 0, 0, 0, 692, 690,
	486, 929, 991, 991, 917, 67, 0, 602, 603, 607,
	605, 606, 598, 66, 0, 257, 0, 0, 991, 654,
	31, 220, 0, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 236, 237, 917, 991, 127, 128, 597,
	597, 597, 0, 597, 0, 0, 0, 115, 991, 0,
	-2, 962, 71, 72, 241, 242, 0, 0, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 0, 39, 0, 0,
	0, 0, 0, 485, 0, 490, 0, 0, 0, 493,
	0, 508, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 0, 0, 690, 991, 0, 991,
	0, 0, 374, 0, 486, 515, 375, 723, 725, 727,
	707, 708, 709, 711, 739, 715, 0, 712, 991, 991,
	0, 703, 719, 746, -2, 0, 994, 376, 997, 998,
	790, 791, 0, 0, 991, 836, 479, 840, 841, 842,
	404, 848, 849, 851, 852, 853, 854, 857, 858, 860,
	861, 0, 991, 991, 991, 991, 0, 917, 0, 887,
	991, 0, 808, 809, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 825, 826, 827, 828, 0, 0, 0,
	317, 0, 0, 0, 330, 335, 785, 614, 786, 0,
	621, 617, 0, 787, 788, 0, 690, 0, 0, 486,
	991, 0, 692, 692, 690, 486, 25, 62, 0, 0,
	926, 918, 919, 922, 925, 65, 609, 600, -2, 259,
	991, 247, 0, 890, 0, 223, 0, 0, 925, 0,
	972, 0, 0, 87, -2, 0, 90, 95, 96, 0,
	0, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 110, 111, 112, 0, 0, 0, 0,
	0, 0, -2, -2, 245, 246, 150, 152, 153, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 0, 168, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 207, 208, 209, 37, 0, 0, 0, 0,
	0, 516, 0, 491, 496, 494, 497, 509, 510, 498,
	499, 500, 501, 502, 503, 504, 511, 512, 505, 506,
	513, 514, 570, 570, 284, 287, 288, 289, 290, 291,
	0, 0, 486, 557, 0, 515, 556, 713, 991, 740,
	716, 0, 993, 0, 996, 0, 464, 0, 0, 837,
	838, 844, 0, 0, 0, 0, 0, 0, 884, 807,
	892, 991, 0, 875, 0, 877, 0, 878, 872, 874,
	876, 879, 880, 0, 575, 374, 0, 0, 326, 327,
	329, 0, 0, 0, 0, 0, 0, 365, 0, 0,
	0, 789, 486, 690, 486, 515, 691, 0, 690, 690,
	486, 515, 930, 0, 991, 991, 991, 921, 929, 68,
	991, 610, 29, 0, 258, 30, 0, 122, 221, 0,
	0, 224, 929, 0, 133, 131, 127, 134, 0, 0,
	0, 0, 79, 0, 631, 633, 634, 635, 667, 0,
	669, 0, 0, 0, 94, 668, 0, 83, 0, 0,
	955, 147, 148, 0, 0, 0, -2, 0, 966, 963,
	0, 113, 116, 117, 118, 119, 120, 0, 239, 244,
	0, 889, 0, 151, 52, 985, 0, 0, 0, 0,
	488, 0, 545, 546, 690, 486, 515, 0, 554, 717,
	768, 995, 792, 796, 793, 991, 795, 797, 991, 799,
	991, 801, 991, 803, 991, 991, 0, 0, 888, 873,
	0, 0, 0, 318, 322, 323, 0, 356, 0, 358,
	359, 360, 361, 362, 363, 364, 0, 625, 0, 0,
	618, 515, 486, 22, 18, 693, 486, 486, 515, 24,
	0, 927, 928, 920, 63, 629, 991, 0, 123, 225,
	222, 238, 0, 0, 0, 0, 81, 0, 683, -2,
	0, 0, 0, 77, 78, 0, 0, 0, 0, 0,
	0, 672, 0, 0, 675, 0, 0, 0, 0, 0,
	0, 686, 0, 670, 0, 91, 667, 0, 92, 0,
	0, 84, 0, 86, 136, 0, 0, 991, 0, 482,
	967, 968, 969, 965, 1000, 0, 0, 240, 0, 0,
	167, 988, 986, 0, 486, 486, 0, 0, 492, 285,
	515, 555, 0, 0, 0, 0, 0, 0, 829, 806,
	885, 870, 871, 0, 355, 357, 366, 0, 991, 627,
	17, 23, 515, 515, 21, 931, 690, 0, 260, 32,
	124, 0, 129, 130, 991, 132, 991, 0, 135, 0,
	0, 682, 690, 0, 690, 80, 629, 952, 0, 632,
	663, 665, 0, 660, 673, 674, 676, 0, 678, 0,
	680, 681, 636, 637, 638, 0, 0, 0, 0, 671,
	0, 0, 97, 99, 0, 102, 0, 104, 105, 956,
	85, 0, 0, 139, 140, 957, 958, 959, 0, 961,
	114, 121, 0, 247, 54, 0, 987, 515, 515, 53,
	517, 553, 0, 794, 798, 800, 802, 804, 0, 0,
	0, 0, 0, 0, 914, 916, 19, 20, 910, 630,
	0, 0, 0, 0, 944, 0, 0, -2, 0, 0,
	917, 690, 76, 690, 0, 991, 657, 664, 991, 0,
	658, 991, 659, 677, 679, 650, 0, 0, 0, 0,
	0, 655, -2, 89, 0, 106, 0, 100, 0, 103,
	137, 138, 0, 0, 144, 991, 0, 989, 990, 55,
	56, 0, 805, 0, 0, 0, 548, 367, 626, 0,
	991, 912, 0, 125, 0, 0, 133, 69, 0, 944,
	932, 946, 948, 991, 65, 0, 938, -2, 940, 942,
	943, 0, 925, 75, 917, 953, 954, 661, 0, 666,
	0, 0, 0, 0, 669, 0, 98, 107, 0, 101,
	141, 142, 143, 960, 0, 0, 830, 0, 833, 628,
	915, 64, 991, 991, 0, 0, 70, 0, 949, -2,
	0, 0, 0, 82, 74, 925, 0, 0, 640, 642,
	643, 644, 645, 646, 647, 648, 649, 0, 0, 0,
	686, 656, 108, 0, 33, 547, 831, 913, 911, 0,
	0, 947, 0, -2, 0, 939, 941, 73, 662, 639,
	0, 687, 688, 689, 638, 109, 0, 126, 0, 935,
	65, 641, 651, 0, 945, -2, 832,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 412,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 413, 3, 414, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:440
		{
			switch len(yyDollar[1].statements) {
			case 0:
				setParseTree(yylex, nil)
			case 1:
				setParseTree(yylex, yyDollar[1].statements[0])
			default:
				setParseTree(yylex, &MultiStatement{Statements: yyDollar[1].statements})
			}
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:453
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:457
		{
			yyVAL.statements = append([]Statement{yyDollar[1].statement}, yyDollar[3].statements...)
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:461
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:466
		{
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:467
		{
		}
	case 11:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:477
		{
			tableName := ""
			if !yyDollar[4].tableName.Schema.isEmpty() {
				tableName = yyDollar[4].tableName.Schema.String() + "."
			}
			tableName += yyDollar[4].tableName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Table:  yyDollar[4].tableName,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     tableName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 12:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:494
		{
			tableName := ""
			if !yyDollar[4].tableName.Schema.isEmpty() {
				tableName = yyDollar[4].tableName.Schema.String() + "."
			}
			tableName += yyDollar[4].tableName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Table:  yyDollar[4].tableName,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     tableName,
					Comment:    "",
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:511
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:530
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    "",
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:549
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "INDEX",
					Object:     yyDollar[4].colIdent.String(),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:562
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 17:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:567
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 18:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:587
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 19:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:607
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 20:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:628
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 21:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:649
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 22:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:671
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 23:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:687
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 24:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:704
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:724
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:739
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:750
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:762
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 29:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:773
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 30:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:789
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:803
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 32:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:817
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 33:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:830
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:844
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name:       yyDollar[3].tableName,
					Type:       yyDollar[5].columnType,
					EnumValues: yyDollar[5].columnType.EnumValues,
				},
			}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:856
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:861
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 37:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:881
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:         true,
					Privileges:      privs,
					Grantees:        grantees,
					WithGrantOption: true,
				},
			}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:902
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[4].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:922
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[4].tableName,
				Grant: &Grant{
					IsGrant:         true,
					Privileges:      privs,
					Grantees:        grantees,
					WithGrantOption: true,
				},
			}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:944
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:964
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:       false,
					Privileges:    privs,
					Grantees:      grantees,
					CascadeOption: true,
				},
			}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:985
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:       false,
					Privileges:    privs,
					Grantees:      grantees,
					CascadeOption: false,
				},
			}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1006
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[4].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1026
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[4].tableName,
				Grant: &Grant{
					IsGrant:       false,
					Privileges:    privs,
					Grantees:      grantees,
					CascadeOption: true,
				},
			}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1047
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[4].tableName,
				Grant: &Grant{
					IsGrant:       false,
					Privileges:    privs,
					Grantees:      grantees,
					CascadeOption: false,
				},
			}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1069
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1078
		{
			yyVAL.statement = &DDL{
				Action:      CreateSchema,
				IfNotExists: true,
				Schema: &Schema{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1089
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1098
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1108
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1117
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: string(yyDollar[6].bytes),
				},
			}
		}
	case 52:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1129
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 53:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1143
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 54:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1157
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 55:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1177
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 56:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1195
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1213
		{
			yyVAL.statement = &DDL{
				Action:    AddExclusion,
				Table:     yyDollar[4].tableName,
				Exclusion: yyDollar[6].exclusionDefinition,
			}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1221
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1230
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1245
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1253
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 64:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1260
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1266
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1270
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1276
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1280
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1287
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1299
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1311
		{
			yyVAL.str = InsertStr
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1315
		{
			yyVAL.str = ReplaceStr
		}
	case 73:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1321
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 74:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1327
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 75:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1331
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1335
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1340
		{
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1341
		{
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1345
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1349
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1354
		{
			yyVAL.partitions = nil
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1358
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1364
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1368
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1372
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1376
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1382
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1386
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 89:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1397
		{
			yyVAL.statement = &Declare{
				Type: declareHandler,
				Handler: &HandlerDefinition{
					Action:     yyDollar[2].str,
					Conditions: yyDollar[5].handlerConditions,
					Statement:  yyDollar[6].statement,
				},
			}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1410
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1414
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1420
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1425
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1429
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1435
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1439
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1445
		{
			yyVAL.handlerConditions = []HandlerCondition{yyDollar[1].handlerCondition}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1449
		{
			yyVAL.handlerConditions = append(yyVAL.handlerConditions, yyDollar[3].handlerCondition)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1455
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionMysqlErrorCode, Value: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1459
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[2].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1463
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[3].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1467
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlwarning}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1471
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionNotFound}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1475
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlexception}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1479
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionName, Value: string(yyDollar[1].colIdent.String())}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1485
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1489
		{
			yyVAL.statement = &BeginEnd{
				Statements:        []Statement{},
				SuppressSemicolon: false,
			}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1496
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1503
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1512
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1519
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1526
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1533
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1541
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1551
		{
			yyVAL.str = ""
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1555
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1559
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1563
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1567
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1573
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1580
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1594
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1598
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1602
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 125:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1609
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 126:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1617
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1627
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1631
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1638
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1648
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1659
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1664
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1669
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1676
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1680
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1691
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1695
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1701
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1705
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1709
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1719
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1723
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1727
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1733
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1737
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1743
		{
			yyVAL.str = SessionStr
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1747
		{
			yyVAL.str = GlobalStr
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1820
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1824
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1828
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1832
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1838
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1842
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1846
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1851
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1857
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1861
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1867
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1871
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1876
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1885
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1889
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1898
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1914
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1927
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1937
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1942
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1948
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1949
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1952
		{
			yyVAL.exprs = nil
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1953
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1957
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1962
		{
			yyVAL.empty = struct{}{}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1964
		{
			yyVAL.empty = struct{}{}
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1967
		{
			yyVAL.bytes = nil
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1971
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1975
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1980
		{
			yyVAL.bytes = nil
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1984
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1988
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1992
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1996
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2000
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2005
		{
			yyVAL.expr = nil
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2009
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2014
		{
			yyVAL.expr = nil
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2018
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2023
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2027
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2032
		{
			yyVAL.bytes = nil
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2036
		{
			yyVAL.bytes = nil
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2042
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2051
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2061
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				Table:  yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2071
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				Table:    yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2083
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2092
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: yyDollar[5].colIdent.String(),
				},
			}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2102
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2111
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: string(yyDollar[5].bytes),
				},
			}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2123
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2130
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2136
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2140
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2145
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2149
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2153
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2157
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2161
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2165
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2169
		{
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 284:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2175
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      NewColIdent(""), // Default index type
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 285:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2184
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent, // GIST, btree, etc.
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2195
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2199
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2205
		{
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "=",
			}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2212
		{
			// AND token represents && in the lexer
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "&&",
			}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2220
		{
			// OR token represents || in the lexer
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "||",
			}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2228
		{
			// Handle all other operators and GIST-specific operators
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   string(yyDollar[3].colIdent.val),
			}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2238
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2242
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2247
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2252
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2258
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2269
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2273
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + "." + string(yyDollar[3].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2277
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + "." + string(yyDollar[3].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2283
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2296
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2301
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2306
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2311
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2317
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2322
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2327
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2332
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2337
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2342
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2347
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2352
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2357
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 318:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2366
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2376
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2381
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2386
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 322:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2393
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 323:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2400
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 324:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2408
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 325:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2413
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 326:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2418
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 327:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2423
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2429
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 329:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2435
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 330:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2442
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2449
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2455
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2461
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2465
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2469
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2473
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2477
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2483
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2487
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2491
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2495
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2499
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2503
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2507
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2511
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2515
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2519
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2523
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2529
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2535
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2541
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2547
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2551
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2556
		{
			yyVAL.sequence = &Sequence{}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2560
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2565
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2570
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2575
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2580
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2585
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2590
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2595
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2600
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2605
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2610
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2615
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 367:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2620
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2627
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2631
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2635
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2639
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2643
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2647
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2652
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2656
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2661
		{
			yyVAL.bytes = nil
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), DisplayWidth: yyDollar[2].optVal}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2725
		{
			yyVAL.str = ""
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2729
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2734
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2738
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2746
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2750
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2756
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2937
		{
			yyVAL.str = ""
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2941
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2995
		{
			yyVAL.optVal = nil
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2999
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3004
		{
			yyVAL.optVal = nil
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3008
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3012
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3021
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3025
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3029
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3034
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3038
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3043
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3047
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3052
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3056
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3060
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3065
		{
			yyVAL.str = ""
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3069
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3073
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3078
		{
			yyVAL.str = ""
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3082
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3086
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3092
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3097
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3101
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3111
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3115
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3121
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3125
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3131
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3135
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3140
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3144
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3148
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3152
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3156
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3160
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3164
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3168
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3172
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3176
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3180
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3184
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3195
		{
			yyVAL.str = ""
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3199
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3205
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3215
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3219
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3225
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3229
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3235
		{
			yyVAL.indexPartition = nil
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3239
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3243
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3249
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3253
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3257
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3261
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3265
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3269
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3273
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3277
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3281
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3285
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3289
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3295
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3299
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3305
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3310
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3316
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3320
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3326
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3330
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3335
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3339
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3343
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), OperatorClass: string(yyDollar[2].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3347
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3357
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 543:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3362
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3369
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 545:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3376
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3383
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 547:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3392
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 548:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3403
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3414
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3418
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3422
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3426
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 553:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3432
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 554:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3442
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 555:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3453
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 556:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3464
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 557:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3475
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 558:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3484
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3493
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3497
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3501
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3507
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3511
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3515
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3519
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3523
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3527
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3533
		{
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3534
		{
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3542
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3547
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3558
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3564
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3568
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3572
		{
			yyVAL.colIdent = NewColIdent("ALL")
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3589
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3593
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3599
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3603
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3610
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3614
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3620
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3624
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3629
		{
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3630
		{
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3634
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3638
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3642
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3648
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3652
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3656
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3661
		{
			setAllowComments(yylex, true)
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3665
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3671
		{
			yyVAL.bytes2 = nil
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3675
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3681
		{
			yyVAL.str = UnionStr
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3685
		{
			yyVAL.str = UnionAllStr
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3689
		{
			yyVAL.str = UnionDistinctStr
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3694
		{
			yyVAL.str = ""
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3698
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3702
		{
			yyVAL.str = SQLCacheStr
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3707
		{
			yyVAL.str = ""
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3711
		{
			yyVAL.str = DistinctStr
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3716
		{
			yyVAL.str = ""
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3720
		{
			yyVAL.str = StraightJoinHint
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3725
		{
			yyVAL.selectExprs = nil
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3729
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3735
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3739
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3745
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3749
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3753
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3757
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3762
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3766
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3770
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3777
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3782
		{
			yyVAL.overExpr = nil
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3786
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 626:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3790
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3794
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 628:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3798
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3803
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3807
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3813
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3817
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3827
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3831
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3835
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3840
		{
			yyVAL.strs = []string{}
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3844
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3850
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3854
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3860
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3864
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3888
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3894
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 651:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3898
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3904
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3909
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3913
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3936
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3940
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3944
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3948
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3954
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3956
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3960
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3962
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3966
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3968
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3971
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3973
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3976
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3980
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3984
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3990
		{
			yyVAL.str = JoinStr
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3994
		{
			yyVAL.str = JoinStr
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3998
		{
			yyVAL.str = JoinStr
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4004
		{
			yyVAL.str = StraightJoinStr
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4010
		{
			yyVAL.str = LeftJoinStr
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4014
		{
			yyVAL.str = LeftJoinStr
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4018
		{
			yyVAL.str = RightJoinStr
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4022
		{
			yyVAL.str = RightJoinStr
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4028
		{
			yyVAL.str = NaturalJoinStr
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4032
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4042
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4046
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4052
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4056
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.indexHints = nil
		}
	case 687:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 688:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4069
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 689:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4073
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4078
		{
			yyVAL.expr = nil
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4082
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4087
		{
			yyVAL.columns = nil
		}
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4091
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4097
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4101
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4105
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4109
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4113
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4117
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4121
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4125
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4131
		{
			yyVAL.str = ""
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4141
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4145
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4151
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4155
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4159
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4167
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4171
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4175
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 713:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4179
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4183
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4187
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4191
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 717:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4195
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4199
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4204
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4208
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4212
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4218
		{
			yyVAL.str = IsNullStr
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4222
		{
			yyVAL.str = IsNotNullStr
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4226
		{
			yyVAL.str = IsTrueStr
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4230
		{
			yyVAL.str = IsNotTrueStr
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4234
		{
			yyVAL.str = IsFalseStr
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4238
		{
			yyVAL.str = IsNotFalseStr
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4244
		{
			yyVAL.str = EqualStr
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4248
		{
			yyVAL.str = LessThanStr
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4252
		{
			yyVAL.str = GreaterThanStr
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4256
		{
			yyVAL.str = LessEqualStr
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4260
		{
			yyVAL.str = GreaterEqualStr
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4264
		{
			yyVAL.str = NotEqualStr
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4268
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4272
		{
			yyVAL.str = PosixRegexStr
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4276
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4280
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4284
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4289
		{
			yyVAL.expr = nil
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4293
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4299
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4303
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4307
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4313
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4319
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4323
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4329
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4333
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4337
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4341
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4345
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4349
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4353
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4357
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4361
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4365
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4369
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4373
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4377
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4381
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4385
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4389
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4393
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4397
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4401
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4405
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4409
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 768:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4413
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4417
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4421
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4425
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4433
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4447
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4451
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4455
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4463
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4471
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4479
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4483
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 784:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4493
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 785:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4497
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 786:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4501
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 787:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4505
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 788:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4509
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 789:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4513
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 790:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4523
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 791:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4527
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 792:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4531
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 793:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4536
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 794:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4540
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 795:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4544
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 796:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4548
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 797:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4552
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 798:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4556
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 799:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4560
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 800:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4564
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 801:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4568
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 802:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4572
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 803:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4576
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 804:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4580
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 805:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4584
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 806:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4588
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 807:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4592
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 808:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4596
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 809:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4601
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4605
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4609
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4613
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4624
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4628
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4632
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4636
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4640
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4645
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4650
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4655
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4660
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4664
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 825:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4678
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 826:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4682
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 827:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4686
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 828:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4690
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4696
		{
			yyVAL.str = ""
		}
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4700
		{
			yyVAL.str = BooleanModeStr
		}
	case 831:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4704
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 832:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4708
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4712
		{
			yyVAL.str = QueryExpansionStr
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4718
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4722
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4728
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4732
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4736
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4744
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4748
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4754
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4760
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4764
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.convertType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4770
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4774
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4778
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4782
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4786
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4790
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4794
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4798
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4802
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4806
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4810
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4814
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4818
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4822
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4826
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4830
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4834
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4840
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4844
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4848
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4852
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4856
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4860
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4864
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4868
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 870:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4872
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 871:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4876
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 872:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4880
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 873:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4884
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: NewIntVal(yyDollar[4].bytes)}
		}
	case 874:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4888
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 875:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4892
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 876:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4896
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 877:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4900
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4904
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4908
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 880:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4912
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4916
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 882:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4921
		{
			yyVAL.expr = nil
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4925
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 884:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4930
		{
			yyVAL.str = string("")
		}
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4934
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4940
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4944
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 888:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4950
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4955
		{
			yyVAL.empty = struct{}{}
		}
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4957
		{
			yyVAL.empty = struct{}{}
		}
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4960
		{
			yyVAL.expr = nil
		}
	case 892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4964
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4970
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4974
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4978
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 896:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4982
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4988
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4994
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4998
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5003
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5008
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5012
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5016
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5020
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5024
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5028
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5032
		{
			yyVAL.expr = &NullVal{}
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5038
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5042
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5047
		{
			yyVAL.exprs = nil
		}
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5051
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5056
		{
			yyVAL.expr = nil
		}
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5060
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5066
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5070
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5076
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 917:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5081
		{
			yyVAL.orderBy = nil
		}
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5085
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5091
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 920:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5095
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5101
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 922:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5106
		{
			yyVAL.str = AscScr
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5110
		{
			yyVAL.str = AscScr
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5114
		{
			yyVAL.str = DescScr
		}
	case 925:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5119
		{
			yyVAL.limit = nil
		}
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5123
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 927:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5127
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 928:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5131
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 929:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5136
		{
			yyVAL.str = ""
		}
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5140
		{
			yyVAL.str = ForUpdateStr
		}
	case 931:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5144
		{
			yyVAL.str = ShareModeStr
		}
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5157
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5161
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 934:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5165
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 935:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5170
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 936:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5174
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 937:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5178
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5185
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 939:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5189
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5195
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 941:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5199
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5203
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5207
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5212
		{
			yyVAL.updateExprs = nil
		}
	case 945:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5216
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5222
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5226
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5232
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 949:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5236
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 950:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5242
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5248
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5258
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5262
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5268
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5274
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 956:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5278
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5284
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5288
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5292
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 960:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5297
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5301
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5307
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5313
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 965:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5320
		{
			yyVAL.bytes = []byte("charset")
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5327
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5331
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5335
		{
			yyVAL.expr = &Default{}
		}
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5340
		{
			yyVAL.empty = struct{}{}
		}
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5342
		{
			yyVAL.empty = struct{}{}
		}
	case 972:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5345
		{
			yyVAL.str = ""
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5347
		{
			yyVAL.str = IgnoreStr
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5351
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5358
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5362
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5366
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5370
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5376
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5380
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5385
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5392
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 985:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5398
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5402
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5406
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 988:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5412
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 989:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5416
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5420
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 991:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5426
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5430
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 993:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5437
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5444
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 995:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5448
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 996:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5455
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5459
		{
			yyVAL.arrayElement = NewIntVal(yyDollar[1].bytes)
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5463
		{
			yyVAL.arrayElement = NewFloatVal(yyDollar[1].bytes)
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5469
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 1000:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5473
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5655
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5664
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
