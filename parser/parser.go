// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const SCHEMA = 57457
const TABLE = 57458
const INDEX = 57459
const MATERIALIZED = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const PRIMARY = 57465
const COLUMN = 57466
const CONSTRAINT = 57467
const REFERENCES = 57468
const SPATIAL = 57469
const FULLTEXT = 57470
const FOREIGN = 57471
const KEY_BLOCK_SIZE = 57472
const POLICY = 57473
const WHILE = 57474
const UNIQUE = 57475
const KEY = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const TYPE = 57492
const STATUS = 57493
const VARIABLES = 57494
const RESTRICT = 57495
const CASCADE = 57496
const NO = 57497
const ACTION = 57498
const PERMISSIVE = 57499
const RESTRICTIVE = 57500
const PUBLIC = 57501
const CURRENT_USER = 57502
const SESSION_USER = 57503
const PAD_INDEX = 57504
const FILLFACTOR = 57505
const IGNORE_DUP_KEY = 57506
const STATISTICS_NORECOMPUTE = 57507
const STATISTICS_INCREMENTAL = 57508
const ALLOW_ROW_LOCKS = 57509
const ALLOW_PAGE_LOCKS = 57510
const DISTANCE = 57511
const M = 57512
const EUCLIDEAN = 57513
const COSINE = 57514
const BEFORE = 57515
const AFTER = 57516
const EACH = 57517
const ROW = 57518
const SCROLL = 57519
const CURSOR = 57520
const OPEN = 57521
const CLOSE = 57522
const FETCH = 57523
const PRIOR = 57524
const FIRST = 57525
const LAST = 57526
const DEALLOCATE = 57527
const INSTEAD = 57528
const OF = 57529
const DEFERRABLE = 57530
const INITIALLY = 57531
const IMMEDIATE = 57532
const DEFERRED = 57533
const CONCURRENTLY = 57534
const SQL = 57535
const SECURITY = 57536
const BEGIN = 57537
const START = 57538
const TRANSACTION = 57539
const COMMIT = 57540
const ROLLBACK = 57541
const BIT = 57542
const TINYINT = 57543
const SMALLINT = 57544
const SMALLSERIAL = 57545
const MEDIUMINT = 57546
const INT = 57547
const INTEGER = 57548
const SERIAL = 57549
const BIGINT = 57550
const BIGSERIAL = 57551
const INTNUM = 57552
const REAL = 57553
const DOUBLE = 57554
const PRECISION = 57555
const FLOAT_TYPE = 57556
const DECIMAL = 57557
const NUMERIC = 57558
const SMALLMONEY = 57559
const MONEY = 57560
const TIME = 57561
const TIMESTAMP = 57562
const DATETIME = 57563
const YEAR = 57564
const DATETIMEOFFSET = 57565
const DATETIME2 = 57566
const SMALLDATETIME = 57567
const CHAR = 57568
const VARCHAR = 57569
const VARYING = 57570
const BOOL = 57571
const CHARACTER = 57572
const VARBINARY = 57573
const NCHAR = 57574
const NVARCHAR = 57575
const NTEXT = 57576
const UUID = 57577
const TEXT = 57578
const TINYTEXT = 57579
const MEDIUMTEXT = 57580
const LONGTEXT = 57581
const CITEXT = 57582
const BLOB = 57583
const TINYBLOB = 57584
const MEDIUMBLOB = 57585
const LONGBLOB = 57586
const JSON = 57587
const JSONB = 57588
const ENUM = 57589
const GEOMETRY = 57590
const POINT = 57591
const LINESTRING = 57592
const POLYGON = 57593
const GEOMETRYCOLLECTION = 57594
const MULTIPOINT = 57595
const MULTILINESTRING = 57596
const MULTIPOLYGON = 57597
const VECTOR = 57598
const VARIADIC = 57599
const ARRAY = 57600
const NOW = 57601
const GETDATE = 57602
const BPCHAR = 57603
const TEXT_PATTERN_OPS = 57604
const NULLX = 57605
const AUTO_INCREMENT = 57606
const APPROXNUM = 57607
const SIGNED = 57608
const UNSIGNED = 57609
const ZEROFILL = 57610
const ZONE = 57611
const AUTOINCREMENT = 57612
const DATABASES = 57613
const TABLES = 57614
const VSCHEMA_TABLES = 57615
const EXTENDED = 57616
const FULL = 57617
const PROCESSLIST = 57618
const NAMES = 57619
const CHARSET = 57620
const GLOBAL = 57621
const SESSION = 57622
const ISOLATION = 57623
const LEVEL = 57624
const READ = 57625
const WRITE = 57626
const ONLY = 57627
const REPEATABLE = 57628
const COMMITTED = 57629
const UNCOMMITTED = 57630
const SERIALIZABLE = 57631
const NEW = 57632
const CONCAT_NULL_YIELDS_NULL = 57633
const CURSOR_CLOSE_ON_COMMIT = 57634
const QUOTED_IDENTIFIER = 57635
const ARITHABORT = 57636
const FMTONLY = 57637
const NOCOUNT = 57638
const NOEXEC = 57639
const NUMERIC_ROUNDABORT = 57640
const ANSI_DEFAULTS = 57641
const ANSI_NULL_DFLT_OFF = 57642
const ANSI_NULL_DFLT_ON = 57643
const ANSI_NULLS = 57644
const ANSI_PADDING = 57645
const ANSI_WARNINGS = 57646
const FORCEPLAN = 57647
const SHOWPLAN_ALL = 57648
const SHOWPLAN_TEXT = 57649
const SHOWPLAN_XML = 57650
const IMPLICIT_TRANSACTIONS = 57651
const REMOTE_PROC_TRANSACTIONS = 57652
const XACT_ABORT = 57653
const CURRENT_TIMESTAMP = 57654
const DATABASE = 57655
const CURRENT_DATE = 57656
const CURRENT_TIME = 57657
const LOCALTIME = 57658
const LOCALTIMESTAMP = 57659
const UTC_DATE = 57660
const UTC_TIME = 57661
const UTC_TIMESTAMP = 57662
const REPLACE = 57663
const CONVERT = 57664
const CAST = 57665
const SUBSTR = 57666
const SUBSTRING = 57667
const GROUP_CONCAT = 57668
const SEPARATOR = 57669
const INHERIT = 57670
const LEAD = 57671
const LAG = 57672
const MATCH = 57673
const AGAINST = 57674
const BOOLEAN = 57675
const LANGUAGE = 57676
const WITH = 57677
const WITHOUT = 57678
const PARSER = 57679
const QUERY = 57680
const EXPANSION = 57681
const UNUSED = 57682
const VIRTUAL = 57683
const STORED = 57684
const GENERATED = 57685
const ALWAYS = 57686
const IDENTITY = 57687
const SEQUENCE = 57688
const INCREMENT = 57689
const MINVALUE = 57690
const CACHE = 57691
const CYCLE = 57692
const OWNED = 57693
const NONE = 57694
const CLUSTERED = 57695
const NONCLUSTERED = 57696
const REPLICATION = 57697
const COLUMNSTORE = 57698
const INCLUDE = 57699
const HOLDLOCK = 57700
const NOLOCK = 57701
const NOWAIT = 57702
const PAGLOCK = 57703
const ROWLOCK = 57704
const TABLOCK = 57705
const UPDLOCK = 57706
const READUNCOMMITTED = 57707
const DEFINER = 57708
const INVOKER = 57709
const TYPECAST = 57710
const CHECK = 57711
const OVER = 57712

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	134, 419,
	-2, 157,
	-1, 45,
	123, 819,
	-2, 814,
	-1, 260,
	123, 822,
	-2, 818,
	-1, 416,
	61, 389,
	-2, 386,
	-1, 446,
	123, 820,
	-2, 248,
	-1, 566,
	123, 820,
	-2, 248,
	-1, 587,
	275, 829,
	-2, 727,
	-1, 637,
	275, 829,
	-2, 459,
	-1, 671,
	5, 36,
	-2, 14,
	-1, 677,
	5, 36,
	-2, 16,
	-1, 818,
	275, 829,
	-2, 459,
	-1, 990,
	275, 829,
	-2, 318,
	-1, 1066,
	275, 829,
	-2, 459,
	-1, 1130,
	60, 106,
	-2, 206,
	-1, 1133,
	60, 106,
	-2, 206,
	-1, 1187,
	5, 37,
	-2, 593,
	-1, 1266,
	5, 36,
	-2, 15,
	-1, 1283,
	195, 63,
	-2, 515,
	-1, 1322,
	60, 106,
	-2, 177,
	-1, 1466,
	90, 816,
	-2, 804,
	-1, 1559,
	57, 50,
	59, 50,
	-2, 52,
	-1, 1732,
	5, 36,
	-2, 775,
	-1, 1757,
	5, 36,
	-2, 59,
	-1, 1829,
	5, 37,
	-2, 776,
	-1, 1861,
	5, 36,
	-2, 778,
	-1, 1883,
	5, 37,
	-2, 779,
}

const yyPrivate = 57344

const yyLast = 9442

var yyAct = [...]int16{
	568, 549, 1660, 1838, 1788, 1079, 1678, 1750, 684, 1789,
	578, 1581, 31, 1785, 1661, 765, 1720, 1755, 41, 42,
	43, 1041, 764, 1595, 1427, 1111, 1098, 1594, 1113, 1102,
	869, 1640, 68, 68, 68, 1101, 131, 134, 135, 1569,
	1435, 1742, 1463, 1460, 1446, 1653, 1579, 1583, 896, 1114,
	1095, 1287, 1457, 1454, 1442, 62, 1260, 707, 479, 1284,
	1189, 31, 884, 1255, 408, 27, 1445, 926, 911, 1338,
	966, 1347, 1074, 989, 1023, 539, 213, 202, 1180, 61,
	665, 841, 1141, 845, 664, 1238, 873, 197, 405, 256,
	628, 1026, 232, 547, 1059, 69, 1038, 417, 939, 63,
	808, 525, 161, 1321, 64, 140, 548, 445, 1249, 248,
	443, 247, 129, 130, 560, 411, 451, 156, 199, 1368,
	468, 180, 983, 9, 800, 1239, 1546, 734, 52, 629,
	745, 243, 244, 192, 238, 195, 1075, 54, 713, 195,
	196, 34, 737, 738, 739, 740, 741, 734, 257, 68,
	745, 204, 745, 615, 209, 532, 257, 211, 441, 215,
	216, 217, 218, 827, 183, 533, 1885, 136, 412, 138,
	612, 418, 419, 1818, 221, 222, 223, 224, 225, 190,
	150, 178, 431, 415, 55, 56, 1137, 1526, 1881, 179,
	255, 1773, 50, 1145, 47, 1519, 462, 158, 403, 1391,
	1392, 1146, 1046, 1047, 394, 491, 492, 674, 1751, 1126,
	1117, 1116, 1873, 1424, 674, 1183, 1126, 1117, 1116, 234,
	1817, 1118, 1772, 1381, 1169, 1512, 57, 1761, 1118, 1596,
	1760, 1597, 198, 1762, 1119, 1810, 260, 499, 396, 395,
	1688, 1119, 1495, 674, 858, 1126, 1117, 1116, 186, 857,
	181, 191, 1811, 1812, 435, 513, 416, 1118, 188, 187,
	1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1689, 1690,
	1119, 470, 201, 177, 483, 484, 485, 486, 779, 459,
	50, 472, 47, 473, 474, 865, 477, 478, 203, 1549,
	214, 1035, 206, 1366, 728, 656, 1432, 731, 655, 230,
	1202, 1200, 453, 746, 747, 748, 749, 750, 751, 752,
	455, 729, 730, 727, 753, 754, 755, 756, 733, 732,
	742, 743, 735, 736, 737, 738, 739, 740, 741, 734,
	1698, 456, 745, 458, 457, 490, 1270, 1375, 137, 227,
	1112, 487, 45, 132, 47, 38, 1701, 1112, 34, 511,
	1124, 1766, 1765, 1099, 1702, 252, 1589, 1124, 1715, 512,
	1699, 1269, 552, 733, 732, 742, 743, 735, 736, 737,
	738, 739, 740, 741, 734, 1609, 1112, 745, 735, 736,
	737, 738, 739, 740, 741, 734, 1124, 1456, 745, 184,
	418, 419, 1525, 1612, 1527, 185, 744, 1120, 1121, 1123,
	927, 534, 257, 1122, 1120, 1121, 1123, 724, 526, 1094,
	1122, 1348, 1349, 1274, 680, 681, 744, 917, 744, 39,
	1274, 1654, 141, 1858, 1353, 692, 1332, 174, 715, 614,
	714, 1313, 527, 1120, 1121, 1123, 434, 433, 891, 1122,
	546, 428, 693, 517, 522, 462, 413, 175, 531, 1274,
	1367, 519, 733, 732, 742, 743, 735, 736, 737, 738,
	739, 740, 741, 734, 231, 744, 745, 828, 193, 1618,
	194, 732, 742, 743, 735, 736, 737, 738, 739, 740,
	741, 734, 1518, 674, 745, 1126, 1117, 1116, 524, 1146,
	617, 425, 418, 419, 189, 1386, 133, 1118, 1138, 1139,
	1632, 667, 518, 440, 1584, 34, 705, 176, 426, 705,
	1119, 535, 685, 157, 1140, 257, 690, 1611, 694, 1771,
	523, 154, 257, 214, 177, 611, 870, 671, 710, 677,
	672, 642, 672, 644, 632, 634, 647, 648, 526, 1127,
	50, 630, 1586, 1874, 613, 34, 1127, 1348, 1349, 618,
	643, 453, 627, 616, 1781, 625, 1455, 689, 493, 455,
	424, 1650, 489, 695, 698, 1697, 53, 175, 28, 496,
	877, 724, 672, 505, 40, 1127, 742, 743, 735, 736,
	737, 738, 739, 740, 741, 734, 1754, 712, 745, 1272,
	1314, 1315, 1316, 142, 143, 686, 1431, 414, 744, 422,
	423, 1753, 1752, 58, 703, 706, 144, 1679, 1681, 37,
	1716, 420, 36, 51, 1393, 666, 1112, 35, 719, 688,
	683, 685, 763, 696, 687, 1824, 1124, 464, 463, 825,
	68, 716, 520, 176, 676, 527, 399, 1878, 6, 7,
	1582, 257, 674, 744, 1126, 1117, 1116, 768, 769, 45,
	177, 47, 1832, 844, 744, 1718, 1118, 780, 1599, 1403,
	1063, 783, 667, 862, 782, 708, 709, 711, 640, 1119,
	685, 526, 1530, 1120, 1121, 1123, 1414, 721, 867, 1122,
	514, 149, 823, 852, 147, 836, 26, 481, 480, 650,
	723, 1680, 890, 724, 723, 1763, 892, 813, 875, 722,
	721, 672, 853, 526, 1740, 1598, 814, 720, 1027, 1160,
	821, 1219, 722, 721, 1397, 614, 1159, 723, 1553, 526,
	802, 803, 804, 805, 806, 807, 1399, 44, 1158, 854,
	723, 856, 744, 453, 843, 849, 851, 831, 940, 1210,
	21, 1157, 16, 1156, 946, 703, 861, 1155, 651, 1154,
	744, 868, 1153, 722, 721, 17, 1152, 24, 944, 945,
	943, 1434, 971, 970, 1096, 1151, 1149, 1394, 1554, 980,
	980, 723, 914, 18, 19, 1112, 666, 918, 982, 1383,
	1027, 1500, 724, 257, 257, 1124, 672, 33, 410, 977,
	722, 721, 672, 722, 721, 971, 1028, 672, 1385, 924,
	887, 722, 721, 897, 910, 152, 919, 909, 723, 146,
	1135, 723, 34, 921, 1133, 1127, 1451, 899, 915, 723,
	931, 933, 934, 1042, 1265, 984, 985, 409, 932, 893,
	920, 410, 1120, 1121, 1123, 1631, 48, 1232, 1122, 916,
	965, 1132, 763, 410, 962, 964, 1630, 1061, 1439, 814,
	421, 1061, 410, 1520, 744, 476, 722, 721, 1524, 475,
	1131, 942, 978, 981, 826, 1651, 1523, 667, 1522, 151,
	1350, 260, 1020, 1021, 723, 153, 619, 1339, 1042, 207,
	14, 986, 987, 722, 721, 1341, 1097, 1022, 912, 913,
	1130, 1339, 430, 898, 1470, 631, 1337, 1083, 1340, 1093,
	1037, 723, 1521, 637, 638, 639, 759, 1170, 1171, 1172,
	1557, 1416, 1340, 1067, 1036, 1068, 1039, 1040, 1395, 1396,
	1398, 1400, 1401, 526, 1052, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 674, 471, 1126, 1117, 1116, 1054,
	722, 721, 50, 1143, 47, 675, 429, 675, 1118, 237,
	674, 1076, 1415, 241, 940, 245, 246, 210, 723, 839,
	212, 1119, 253, 1050, 471, 20, 1194, 397, 1193, 860,
	859, 400, 722, 721, 1127, 717, 1584, 22, 23, 624,
	25, 666, 497, 758, 760, 761, 762, 766, 722, 721,
	723, 495, 494, 1129, 771, 771, 771, 771, 771, 771,
	771, 467, 421, 1165, 1628, 50, 723, 47, 437, 637,
	838, 1060, 50, 421, 1586, 471, 1652, 45, 781, 47,
	784, 785, 786, 787, 788, 789, 790, 791, 1603, 794,
	1441, 796, 797, 798, 799, 801, 801, 801, 801, 801,
	801, 801, 1176, 817, 818, 819, 820, 34, 421, 1062,
	1190, 50, 498, 47, 33, 781, 502, 503, 34, 674,
	1602, 1061, 1150, 855, 257, 722, 721, 1112, 1196, 1197,
	780, 1198, 488, 667, 526, 436, 1201, 1124, 34, 34,
	50, 32, 47, 723, 50, 1147, 47, 1199, 1204, 1205,
	941, 969, 1206, 1207, 649, 1208, 1209, 1203, 895, 50,
	967, 1586, 968, 34, 610, 1062, 984, 1263, 637, 609,
	672, 421, 1230, 1262, 34, 1266, 675, 1218, 672, 1283,
	1216, 1309, 1310, 1311, 1120, 1121, 1123, 1275, 885, 724,
	1122, 1322, 1130, 1130, 1322, 1130, 1130, 526, 526, 1237,
	1868, 1867, 1276, 1333, 1246, 870, 608, 1336, 1245, 1134,
	1243, 1244, 260, 1242, 1248, 1240, 607, 1247, 885, 1866,
	724, 30, 1264, 536, 1042, 526, 427, 771, 771, 1406,
	771, 771, 771, 771, 771, 771, 771, 771, 771, 771,
	771, 771, 771, 771, 771, 1356, 1253, 666, 1278, 1778,
	724, 1228, 1853, 1657, 1335, 1562, 576, 1809, 724, 1250,
	1317, 675, 1279, 1280, 1281, 1320, 1285, 766, 1831, 724,
	159, 1563, 766, 129, 1252, 46, 49, 1328, 1329, 1354,
	1355, 1228, 1774, 1342, 1343, 1344, 1345, 1346, 1235, 1387,
	1786, 674, 1352, 1739, 1359, 1323, 1324, 1325, 1326, 1327,
	702, 1705, 1566, 724, 1234, 1357, 1566, 1382, 1268, 49,
	1228, 1361, 685, 702, 1614, 49, 1362, 1564, 1730, 1562,
	1410, 702, 1613, 1731, 1043, 1372, 1127, 1370, 1419, 1571,
	1574, 1575, 1576, 1572, 1374, 1573, 1577, 1071, 850, 1743,
	1744, 1369, 1433, 421, 1376, 1565, 257, 885, 1537, 702,
	1491, 1228, 1490, 1066, 1487, 1486, 1426, 702, 1481, 702,
	1480, 1430, 702, 1407, 702, 1358, 941, 1437, 1436, 1055,
	724, 1566, 1084, 1471, 1438, 1070, 1651, 1069, 668, 1228,
	1227, 702, 1167, 1322, 1128, 1411, 682, 510, 1444, 49,
	1418, 526, 526, 49, 1363, 49, 49, 702, 1078, 837,
	885, 1077, 49, 1641, 261, 1440, 261, 49, 975, 724,
	1051, 49, 885, 1045, 1641, 1405, 1469, 702, 925, 733,
	732, 742, 743, 735, 736, 737, 738, 739, 740, 741,
	734, 702, 701, 745, 660, 659, 674, 771, 771, 771,
	653, 654, 1478, 870, 771, 771, 771, 771, 49, 653,
	652, 1739, 465, 60, 59, 674, 1214, 1126, 1117, 1116,
	886, 864, 1055, 1212, 257, 840, 833, 830, 1860, 1118,
	541, 1482, 1483, 657, 646, 645, 641, 1739, 509, 1488,
	1489, 510, 1119, 1827, 975, 1066, 674, 1055, 421, 1496,
	1566, 771, 49, 1531, 510, 1228, 49, 49, 1687, 1591,
	1452, 1417, 1055, 1493, 1213, 1195, 689, 1516, 1517, 1196,
	885, 1211, 1273, 1588, 702, 68, 1515, 829, 658, 257,
	421, 1552, 662, 661, 1555, 1804, 1601, 1802, 1769, 1629,
	972, 973, 974, 976, 1543, 203, 672, 1484, 421, 1331,
	863, 1743, 1744, 1544, 1330, 526, 1616, 1251, 233, 1164,
	1163, 1536, 1136, 876, 1073, 1539, 1560, 1551, 1072, 1049,
	922, 889, 1607, 1578, 1030, 1031, 1032, 1033, 866, 1034,
	1590, 1592, 1587, 822, 718, 1534, 670, 669, 1545, 636,
	1538, 635, 1605, 633, 620, 675, 537, 500, 1112, 1608,
	228, 442, 1044, 675, 438, 407, 1617, 226, 1124, 1571,
	1574, 1575, 1576, 1572, 220, 1573, 1577, 235, 236, 1053,
	219, 1056, 1057, 208, 11, 515, 1786, 1064, 1142, 1065,
	1746, 1231, 663, 501, 240, 1615, 971, 1662, 239, 145,
	139, 1672, 1670, 1854, 1422, 1620, 1673, 1671, 1674, 1749,
	1575, 1576, 1646, 1091, 1748, 1120, 1121, 1123, 1669, 1438,
	1668, 1122, 257, 1816, 1647, 1088, 1089, 1639, 1540, 795,
	257, 1274, 406, 977, 1649, 1656, 672, 1042, 1658, 1604,
	1256, 482, 1664, 1665, 623, 1667, 1636, 1675, 1825, 1606,
	398, 1686, 771, 771, 1428, 1257, 1429, 254, 1696, 1273,
	1042, 1166, 1683, 1663, 1456, 1685, 1666, 912, 913, 744,
	1092, 465, 1694, 1085, 1449, 879, 1086, 880, 881, 882,
	622, 1717, 771, 771, 771, 771, 508, 506, 504, 1695,
	878, 34, 569, 979, 567, 571, 572, 573, 574, 148,
	1024, 1476, 570, 575, 1684, 1479, 1732, 1184, 1185, 672,
	1402, 1029, 883, 1756, 679, 1187, 530, 1080, 1724, 1823,
	1634, 1528, 1738, 1081, 1191, 1192, 870, 465, 49, 538,
	1822, 1780, 1708, 1250, 1736, 1475, 49, 1757, 1747, 1474,
	672, 1758, 249, 250, 251, 1875, 1473, 621, 1472, 257,
	1162, 1722, 1450, 1764, 1727, 1413, 1728, 1127, 1390, 1389,
	1215, 971, 1662, 1787, 1794, 1756, 1221, 529, 528, 1161,
	971, 1662, 1790, 432, 1223, 1224, 872, 1225, 1226, 1723,
	1777, 874, 1795, 1782, 1799, 1168, 1792, 1437, 1436, 672,
	1561, 1775, 1236, 1438, 1438, 1735, 1796, 1737, 1783, 1784,
	1042, 691, 888, 8, 1485, 1, 1286, 1645, 13, 12,
	1273, 1548, 1719, 242, 1273, 1429, 1767, 1768, 1188, 778,
	564, 1815, 1700, 1428, 1610, 1820, 550, 1837, 1453, 1282,
	1312, 1826, 1834, 685, 771, 1351, 685, 685, 685, 466,
	1851, 1836, 182, 1449, 1847, 1848, 1849, 1233, 439, 725,
	1850, 15, 1510, 1423, 1267, 767, 678, 507, 1334, 1835,
	894, 1428, 1863, 1864, 848, 848, 848, 1859, 1790, 1856,
	704, 1865, 165, 155, 697, 1797, 401, 1798, 29, 10,
	1148, 166, 164, 1861, 163, 162, 672, 1872, 465, 160,
	49, 469, 200, 205, 229, 1876, 793, 67, 65, 66,
	70, 1790, 1879, 49, 1458, 1600, 971, 1662, 1882, 1884,
	1880, 516, 1058, 757, 1759, 1877, 1465, 1793, 672, 1259,
	1821, 1580, 1779, 1217, 792, 1025, 551, 930, 824, 563,
	562, 1644, 561, 1729, 726, 1448, 1273, 1556, 1254, 1548,
	1570, 674, 1568, 1126, 1117, 1116, 846, 1567, 1745, 1741,
	1447, 1511, 1714, 1087, 1449, 1118, 1421, 1115, 871, 1449,
	1449, 1449, 1449, 1449, 1090, 5, 1125, 1388, 1119, 1110,
	4, 771, 3, 1449, 771, 1319, 771, 1109, 771, 1108,
	771, 771, 1106, 1404, 1107, 1104, 1105, 1103, 46, 1082,
	673, 1548, 2, 0, 770, 772, 773, 774, 775, 776,
	777, 1420, 0, 0, 0, 0, 0, 0, 0, 261,
	0, 848, 848, 0, 0, 848, 848, 848, 0, 0,
	0, 46, 0, 0, 0, 0, 923, 1360, 0, 1429,
	928, 929, 1450, 0, 1449, 1644, 0, 1450, 1450, 1450,
	1450, 1450, 0, 0, 848, 848, 848, 848, 0, 0,
	1449, 1580, 674, 1682, 1126, 1117, 1116, 0, 0, 0,
	0, 832, 447, 448, 449, 0, 1118, 0, 0, 848,
	452, 450, 460, 461, 1112, 767, 0, 0, 0, 1119,
	767, 0, 1428, 0, 1124, 0, 0, 0, 0, 0,
	0, 0, 0, 465, 0, 988, 1019, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1497, 1408,
	1498, 1499, 1450, 1412, 1501, 1502, 1504, 1506, 1508, 0,
	0, 0, 0, 0, 1733, 1734, 0, 1443, 1450, 0,
	0, 1120, 1121, 1123, 0, 0, 1048, 1122, 0, 0,
	1529, 0, 0, 0, 0, 0, 0, 1274, 1548, 0,
	0, 0, 0, 0, 0, 675, 0, 0, 0, 0,
	0, 0, 33, 0, 0, 0, 1273, 935, 0, 0,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 1112, 0, 34, 0, 32,
	0, 0, 0, 0, 0, 1124, 0, 0, 1644, 0,
	0, 0, 1791, 0, 675, 0, 0, 0, 1429, 0,
	0, 0, 0, 0, 0, 0, 1509, 0, 1492, 0,
	0, 0, 0, 1805, 1806, 1807, 0, 0, 0, 0,
	0, 0, 674, 1514, 1126, 1117, 1116, 0, 0, 0,
	0, 0, 1120, 1121, 1123, 0, 1118, 0, 1122, 1627,
	848, 0, 0, 1505, 0, 0, 1222, 724, 0, 1119,
	176, 0, 0, 0, 0, 1533, 168, 1535, 167, 1635,
	171, 172, 175, 1127, 454, 459, 169, 177, 0, 0,
	0, 0, 848, 0, 1186, 0, 0, 1558, 1559, 0,
	261, 0, 0, 848, 724, 0, 0, 0, 1791, 465,
	0, 1862, 733, 732, 742, 743, 735, 736, 737, 738,
	739, 740, 741, 734, 0, 0, 745, 1677, 0, 0,
	0, 0, 0, 1272, 0, 0, 0, 456, 0, 458,
	457, 1791, 0, 675, 0, 0, 1220, 0, 0, 733,
	732, 742, 743, 735, 736, 737, 738, 739, 740, 741,
	734, 1619, 1229, 745, 1706, 49, 0, 0, 0, 1709,
	1710, 1711, 1712, 1713, 0, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1124, 0, 1173, 1174, 1175,
	0, 0, 0, 0, 1127, 1177, 1178, 1179, 0, 1258,
	1261, 1507, 724, 0, 1637, 0, 0, 0, 1638, 173,
	0, 0, 0, 0, 1655, 1271, 0, 0, 0, 1659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 1120, 1121, 1123, 0, 0, 0, 1122, 0,
	0, 770, 1503, 724, 1814, 0, 0, 733, 732, 742,
	743, 735, 736, 737, 738, 739, 740, 741, 734, 0,
	0, 745, 1770, 0, 0, 0, 0, 1776, 0, 0,
	0, 0, 0, 0, 0, 1707, 0, 0, 0, 0,
	0, 0, 0, 1703, 1704, 0, 0, 0, 733, 732,
	742, 743, 735, 736, 737, 738, 739, 740, 741, 734,
	0, 0, 745, 1808, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1373, 0, 0, 49, 49, 0,
	0, 0, 170, 0, 0, 1819, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1384, 1828,
	1829, 1830, 0, 1833, 0, 0, 0, 733, 732, 742,
	743, 735, 736, 737, 738, 739, 740, 741, 734, 0,
	0, 745, 0, 0, 0, 626, 0, 0, 45, 1409,
	446, 447, 448, 449, 1127, 1318, 1182, 0, 0, 452,
	450, 460, 461, 0, 0, 0, 0, 1425, 0, 0,
	0, 0, 744, 0, 0, 1869, 1870, 1871, 1181, 0,
	0, 733, 732, 742, 743, 735, 736, 737, 738, 739,
	740, 741, 734, 0, 0, 745, 0, 0, 0, 0,
	0, 0, 0, 49, 1547, 1883, 0, 0, 0, 744,
	0, 0, 1364, 1365, 733, 732, 742, 743, 735, 736,
	737, 738, 739, 740, 741, 734, 0, 0, 745, 0,
	0, 0, 0, 0, 0, 809, 0, 0, 848, 0,
	0, 0, 1377, 1378, 1379, 1380, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 49, 49, 0,
	0, 0, 0, 543, 0, 0, 0, 49, 1585, 0,
	811, 0, 0, 0, 0, 588, 0, 589, 0, 674,
	0, 1126, 1117, 1116, 1513, 579, 580, 0, 0, 0,
	0, 0, 0, 1118, 0, 421, 0, 0, 45, 569,
	566, 567, 571, 572, 573, 574, 1119, 744, 0, 570,
	575, 460, 461, 545, 1541, 1542, 1261, 0, 0, 558,
	0, 0, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 0, 0, 0, 1633, 555, 556, 744, 0,
	0, 0, 604, 812, 557, 0, 897, 553, 554, 559,
	909, 71, 810, 454, 459, 0, 0, 816, 815, 0,
	899, 0, 0, 0, 49, 0, 602, 0, 49, 49,
	0, 0, 46, 49, 49, 49, 49, 49, 0, 0,
	0, 0, 0, 0, 1494, 1676, 0, 49, 0, 0,
	0, 1585, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 0, 1112, 0, 565, 0, 456, 0, 458, 457,
	0, 0, 1124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 464, 463, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1642, 898, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 744, 0, 0, 0, 72, 0, 0, 0, 1120,
	1121, 1123, 0, 0, 49, 1122, 0, 0, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 0, 0, 590,
	0, 0, 0, 0, 744, 0, 0, 1693, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 591, 592, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1621, 0, 1721, 1622, 0, 1623, 0, 1624, 0,
	1625, 1626, 0, 0, 577, 0, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 46, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 593, 603, 599, 600,
	597, 598, 596, 595, 594, 605, 581, 582, 583, 584,
	586, 0, 0, 464, 463, 585, 0, 0, 0, 0,
	444, 0, 0, 45, 0, 446, 447, 448, 449, 0,
	0, 0, 0, 0, 452, 450, 460, 461, 0, 0,
	0, 1127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 1585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1800,
	0, 0, 1801, 0, 0, 1803, 0, 0, 0, 0,
	0, 1144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1813, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1721, 0, 1318,
	0, 1318, 0, 0, 0, 0, 0, 0, 0, 0,
	767, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 379, 367, 0, 325, 381, 295,
	313, 390, 315, 316, 352, 273, 335, 0, 310, 292,
	0, 1855, 767, 298, 266, 305, 267, 296, 327, 0,
	293, 0, 369, 338, 0, 0, 0, 388, 0, 343,
	0, 0, 0, 0, 0, 330, 371, 333, 362, 324,
	353, 282, 342, 383, 311, 348, 384, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 377, 307, 279, 393, 0, 351, 265,
	345, 0, 0, 271, 274, 389, 375, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 329, 334, 359, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 454, 459,
	0, 0, 299, 0, 341, 0, 0, 0, 278, 272,
	0, 326, 809, 0, 0, 281, 0, 300, 360, 0,
	262, 365, 372, 323, 0, 0, 376, 320, 319, 0,
	0, 0, 0, 0, 0, 312, 259, 356, 391, 380,
	331, 370, 297, 306, 0, 304, 0, 811, 0, 340,
	354, 456, 0, 458, 457, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 464, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	263, 301, 363, 366, 286, 350, 275, 308, 357, 309,
	332, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 0,
	122, 123, 0, 124, 125, 126, 128, 127, 0, 963,
	812, 0, 0, 0, 0, 0, 1467, 0, 71, 810,
	0, 0, 0, 0, 816, 815, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 373, 0,
	0, 0, 0, 1468, 1466, 1462, 1461, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 1464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 336, 337, 385, 386, 387, 361, 280, 0,
	287, 288, 0, 368, 0, 0, 0, 339, 0, 0,
	0, 392, 72, 0, 0, 0, 0, 0, 0, 314,
	264, 318, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 0, 0, 322, 317, 344, 346, 355, 364, 374,
	382, 358, 294, 328, 379, 367, 0, 325, 381, 295,
	313, 390, 315, 316, 352, 273, 335, 0, 310, 292,
	0, 0, 0, 298, 266, 305, 267, 296, 327, 0,
	293, 0, 369, 338, 0, 0, 0, 388, 0, 343,
	0, 0, 0, 0, 0, 330, 371, 333, 362, 324,
	353, 282, 342, 383, 311, 348, 384, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 377, 307, 279, 393, 0, 351, 265,
	345, 0, 0, 271, 274, 389, 375, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 329, 334, 359, 321,
	0, 0, 0, 0, 0, 0, 1371, 0, 0, 0,
	0, 0, 299, 0, 341, 0, 0, 0, 278, 272,
	0, 326, 0, 0, 0, 281, 0, 300, 360, 0,
	262, 365, 372, 323, 0, 0, 376, 320, 319, 0,
	0, 992, 0, 0, 0, 312, 259, 356, 391, 380,
	331, 370, 297, 306, 0, 304, 0, 0, 0, 340,
	354, 0, 0, 0, 0, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	263, 301, 363, 366, 286, 350, 275, 308, 357, 309,
	332, 291, 0, 1001, 1007, 1005, 0, 0, 1002, 0,
	0, 1000, 0, 1593, 1009, 0, 0, 1008, 994, 1004,
	1006, 1003, 998, 0, 993, 0, 1011, 1010, 1012, 991,
	1014, 0, 0, 0, 1018, 1015, 1017, 1016, 0, 1013,
	0, 0, 0, 0, 0, 0, 1467, 0, 995, 996,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 997,
	999, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 373, 0,
	0, 0, 0, 1468, 1466, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 1464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 336, 337, 385, 386, 387, 361, 280, 0,
	287, 288, 0, 368, 0, 0, 0, 339, 0, 0,
	0, 392, 0, 0, 0, 0, 0, 0, 0, 314,
	264, 318, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 0, 0, 322, 317, 344, 346, 355, 364, 374,
	382, 358, 294, 328, 379, 367, 0, 325, 381, 295,
	313, 390, 315, 316, 352, 273, 335, 0, 310, 292,
	0, 0, 0, 298, 266, 305, 267, 296, 327, 0,
	293, 0, 369, 338, 0, 0, 0, 388, 0, 343,
	0, 0, 0, 0, 0, 330, 371, 333, 362, 324,
	353, 282, 342, 383, 311, 348, 384, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 377, 307, 279, 393, 0, 351, 265,
	345, 0, 0, 271, 274, 389, 375, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 329, 334, 359, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 341, 0, 0, 0, 278, 272,
	0, 326, 0, 0, 0, 281, 0, 300, 360, 0,
	262, 365, 372, 323, 0, 0, 376, 320, 319, 0,
	0, 0, 0, 0, 0, 312, 259, 356, 391, 380,
	331, 370, 297, 306, 0, 304, 0, 0, 0, 340,
	354, 0, 0, 0, 0, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	263, 301, 363, 366, 286, 350, 275, 308, 357, 309,
	332, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 373, 0,
	0, 0, 0, 1468, 1466, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 1464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 336, 337, 385, 386, 387, 361, 280, 0,
	287, 288, 0, 368, 0, 0, 0, 339, 0, 0,
	0, 392, 0, 0, 0, 0, 0, 0, 0, 314,
	264, 318, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 0, 0, 322, 317, 344, 346, 355, 364, 374,
	382, 358, 294, 328, 379, 367, 0, 325, 381, 295,
	313, 390, 315, 316, 352, 273, 335, 0, 310, 292,
	0, 0, 0, 298, 266, 305, 267, 296, 327, 0,
	293, 0, 369, 338, 0, 94, 0, 388, 33, 343,
	0, 0, 0, 0, 0, 330, 371, 333, 362, 324,
	353, 282, 342, 383, 311, 348, 384, 0, 0, 0,
	45, 1135, 47, 34, 0, 1133, 0, 0, 0, 0,
	0, 0, 347, 377, 307, 279, 393, 0, 351, 265,
	345, 0, 0, 271, 274, 389, 375, 303, 302, 0,
	0, 0, 1132, 0, 0, 0, 329, 334, 359, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1241, 1131, 299, 0, 341, 0, 0, 0, 278, 272,
	0, 326, 79, 0, 0, 281, 0, 300, 360, 0,
	262, 365, 372, 323, 0, 0, 376, 320, 319, 0,
	0, 0, 0, 0, 0, 312, 259, 356, 391, 380,
	331, 370, 297, 306, 0, 304, 0, 95, 0, 340,
	354, 0, 0, 0, 0, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	263, 301, 363, 366, 286, 350, 275, 308, 357, 309,
	332, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 0,
	122, 123, 0, 124, 125, 126, 128, 127, 96, 97,
	98, 102, 100, 99, 101, 73, 75, 0, 71, 74,
	80, 76, 77, 78, 92, 81, 82, 83, 84, 85,
	86, 87, 88, 89, 90, 91, 93, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 373, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 336, 337, 385, 386, 387, 361, 280, 0,
	287, 288, 0, 368, 0, 0, 0, 339, 0, 0,
	0, 392, 72, 0, 0, 0, 0, 0, 0, 314,
	264, 318, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 0, 0, 322, 317, 344, 346, 355, 364, 374,
	382, 358, 294, 328, 379, 367, 0, 325, 381, 295,
	313, 390, 315, 316, 352, 273, 335, 0, 310, 292,
	0, 0, 0, 298, 266, 305, 267, 296, 327, 0,
	293, 0, 369, 338, 0, 94, 0, 388, 0, 343,
	0, 0, 0, 0, 0, 330, 371, 333, 362, 324,
	353, 282, 342, 383, 311, 348, 384, 0, 0, 0,
	34, 0, 699, 34, 700, 0, 0, 0, 0, 0,
	0, 0, 347, 377, 307, 279, 393, 0, 351, 265,
	345, 0, 0, 271, 274, 389, 375, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 329, 334, 359, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 341, 0, 0, 0, 278, 272,
	0, 326, 79, 0, 0, 281, 0, 300, 360, 0,
	262, 365, 372, 323, 0, 0, 376, 320, 319, 0,
	0, 0, 0, 0, 0, 312, 259, 356, 391, 380,
	331, 370, 297, 306, 0, 304, 0, 95, 0, 340,
	354, 0, 0, 0, 0, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	263, 301, 363, 366, 286, 350, 275, 308, 357, 309,
	332, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 0,
	122, 123, 0, 124, 125, 126, 128, 127, 96, 97,
	98, 102, 100, 99, 101, 73, 75, 0, 71, 74,
	80, 76, 77, 78, 92, 81, 82, 83, 84, 85,
	86, 87, 88, 89, 90, 91, 93, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 0, 0, 0, 674,
	268, 1126, 1117, 1116, 0, 0, 269, 290, 373, 0,
	0, 0, 0, 1118, 258, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 1119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 336, 337, 385, 386, 387, 361, 280, 0,
	287, 288, 0, 368, 0, 0, 0, 339, 0, 0,
	0, 392, 72, 0, 0, 0, 0, 0, 0, 314,
	264, 318, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 0, 0, 322, 317, 344, 346, 355, 364, 374,
	382, 358, 294, 328, 379, 367, 0, 325, 381, 295,
	313, 390, 315, 316, 352, 273, 335, 0, 310, 292,
	0, 0, 0, 298, 266, 305, 267, 296, 327, 0,
	293, 0, 369, 338, 0, 0, 0, 388, 0, 343,
	0, 0, 1124, 0, 0, 330, 371, 333, 362, 324,
	353, 282, 342, 383, 311, 348, 384, 0, 402, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	404, 0, 347, 377, 307, 279, 393, 0, 351, 265,
	345, 0, 0, 271, 274, 389, 375, 303, 302, 1120,
	1121, 1123, 0, 0, 0, 1122, 329, 334, 359, 321,
	0, 0, 0, 0, 0, 1439, 0, 0, 0, 0,
	0, 0, 299, 0, 341, 0, 0, 0, 278, 272,
	0, 326, 0, 0, 0, 281, 0, 300, 360, 0,
	262, 365, 372, 323, 0, 0, 376, 320, 319, 0,
	0, 0, 0, 0, 0, 312, 259, 356, 391, 380,
	331, 370, 297, 306, 0, 304, 0, 0, 0, 340,
	354, 0, 0, 0, 0, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	263, 301, 363, 366, 286, 350, 275, 308, 357, 309,
	332, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 674, 0, 1126, 1117, 1116, 0,
	0, 1127, 0, 0, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 373, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 1725, 1726, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 336, 337, 385, 386, 387, 361, 280, 0,
	287, 288, 0, 368, 0, 0, 0, 339, 0, 0,
	0, 392, 0, 0, 0, 0, 0, 1112, 0, 314,
	264, 318, 0, 0, 0, 0, 0, 1124, 0, 276,
	277, 0, 0, 322, 317, 344, 346, 355, 364, 374,
	382, 358, 294, 328, 379, 367, 0, 325, 381, 295,
	313, 390, 315, 316, 352, 273, 335, 0, 310, 292,
	0, 0, 0, 298, 266, 305, 267, 296, 327, 0,
	293, 0, 369, 338, 1120, 1121, 1123, 388, 0, 343,
	1122, 0, 0, 0, 0, 330, 371, 333, 362, 324,
	353, 282, 342, 383, 311, 348, 384, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 377, 307, 279, 393, 0, 351, 265,
	345, 0, 0, 271, 274, 389, 375, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 329, 334, 359, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1532, 0, 299, 0, 341, 0, 0, 0, 278, 272,
	0, 326, 0, 0, 0, 281, 0, 300, 360, 0,
	262, 365, 372, 323, 0, 0, 376, 320, 319, 0,
	0, 0, 0, 0, 0, 312, 259, 356, 391, 380,
	331, 370, 297, 306, 0, 304, 0, 0, 0, 340,
	354, 0, 0, 0, 0, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	263, 301, 363, 366, 286, 350, 275, 308, 357, 309,
	332, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 674, 0, 1126, 1117, 1116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 373, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 1857, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 336, 337, 385, 386, 387, 361, 280, 0,
	287, 288, 0, 368, 0, 0, 0, 339, 0, 0,
	0, 392, 0, 0, 0, 0, 0, 1112, 0, 314,
	264, 318, 0, 0, 0, 0, 0, 1124, 0, 276,
	277, 0, 0, 322, 317, 344, 346, 355, 364, 374,
	382, 358, 294, 328, 379, 367, 0, 325, 381, 295,
	313, 390, 315, 316, 352, 273, 335, 0, 310, 292,
	0, 0, 0, 298, 266, 305, 267, 296, 327, 0,
	293, 0, 369, 338, 1120, 1121, 1123, 388, 0, 343,
	1122, 0, 0, 0, 0, 330, 371, 333, 362, 324,
	353, 282, 342, 383, 311, 348, 384, 0, 0, 0,
	45, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 377, 307, 279, 393, 0, 351, 265,
	345, 0, 0, 271, 274, 389, 375, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 329, 334, 359, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 341, 0, 0, 0, 278, 272,
	0, 326, 0, 0, 0, 281, 0, 300, 360, 0,
	262, 365, 372, 323, 0, 0, 376, 320, 319, 0,
	0, 0, 0, 0, 0, 312, 259, 356, 391, 380,
	331, 370, 297, 306, 0, 304, 0, 0, 0, 340,
	354, 0, 0, 0, 0, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	263, 301, 363, 366, 286, 350, 275, 308, 357, 309,
	332, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 674, 0, 1126, 1117, 1116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 373, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 1852, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 336, 337, 385, 386, 387, 361, 280, 0,
	287, 288, 0, 368, 0, 0, 0, 339, 0, 0,
	0, 392, 0, 0, 0, 0, 0, 1112, 0, 314,
	264, 318, 0, 0, 0, 0, 0, 1124, 0, 276,
	277, 0, 0, 322, 317, 344, 346, 355, 364, 374,
	382, 358, 294, 328, 379, 367, 0, 325, 381, 295,
	313, 390, 315, 316, 352, 273, 335, 0, 310, 292,
	0, 0, 0, 298, 266, 305, 267, 296, 327, 0,
	293, 0, 369, 338, 1120, 1121, 1123, 388, 0, 343,
	1122, 0, 0, 0, 0, 330, 371, 333, 362, 324,
	353, 282, 342, 383, 311, 348, 384, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 377, 307, 279, 393, 0, 351, 265,
	345, 0, 0, 271, 274, 389, 375, 303, 302, 521,
	0, 0, 0, 0, 0, 0, 329, 334, 359, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 341, 0, 0, 0, 278, 272,
	0, 326, 0, 0, 0, 281, 0, 300, 360, 0,
	262, 365, 372, 323, 0, 0, 376, 320, 319, 0,
	0, 0, 0, 0, 0, 312, 259, 356, 391, 380,
	331, 370, 297, 306, 0, 304, 0, 0, 0, 340,
	354, 0, 0, 0, 0, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	263, 301, 363, 366, 286, 350, 275, 308, 357, 309,
	332, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 674, 0, 1126, 1117, 1116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 373, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 1643, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 336, 337, 385, 386, 387, 361, 280, 0,
	287, 288, 0, 368, 0, 0, 0, 339, 0, 0,
	0, 392, 0, 0, 0, 0, 0, 1112, 0, 314,
	264, 318, 0, 0, 0, 0, 0, 1124, 0, 276,
	277, 0, 0, 322, 317, 344, 346, 355, 364, 374,
	382, 358, 294, 328, 379, 367, 0, 325, 381, 295,
	313, 390, 315, 316, 352, 273, 335, 0, 310, 292,
	0, 0, 0, 298, 266, 305, 267, 296, 327, 0,
	293, 0, 369, 338, 1120, 1121, 1123, 388, 0, 343,
	1122, 0, 0, 0, 0, 330, 371, 333, 362, 324,
	353, 282, 342, 383, 311, 348, 384, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 377, 307, 279, 393, 0, 351, 265,
	345, 0, 0, 271, 274, 389, 375, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 329, 334, 359, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 341, 0, 0, 0, 278, 272,
	0, 326, 0, 0, 0, 281, 0, 300, 360, 0,
	262, 365, 372, 323, 0, 0, 376, 320, 319, 0,
	0, 0, 0, 0, 0, 312, 259, 356, 391, 380,
	331, 370, 297, 306, 0, 304, 0, 0, 0, 340,
	354, 0, 0, 0, 0, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	263, 301, 363, 366, 286, 350, 275, 308, 357, 309,
	332, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 674, 0, 1126, 1117, 1116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 373, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 1550, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 336, 337, 385, 386, 387, 361, 280, 0,
	287, 288, 0, 368, 0, 0, 0, 339, 0, 0,
	0, 392, 0, 0, 0, 0, 0, 1112, 0, 314,
	264, 318, 0, 0, 0, 0, 0, 1124, 0, 276,
	277, 0, 0, 322, 317, 344, 346, 355, 364, 374,
	382, 358, 294, 328, 379, 367, 0, 325, 381, 295,
	313, 390, 315, 316, 352, 273, 335, 0, 310, 292,
	0, 0, 0, 298, 266, 305, 267, 296, 327, 0,
	293, 0, 369, 338, 1120, 1121, 1123, 388, 0, 343,
	1122, 0, 0, 0, 0, 330, 371, 333, 362, 324,
	353, 282, 342, 383, 311, 348, 384, 0, 0, 0,
	50, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 377, 307, 279, 393, 0, 351, 265,
	345, 0, 0, 271, 274, 389, 375, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 329, 334, 359, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 341, 0, 0, 0, 278, 272,
	0, 326, 0, 0, 0, 281, 0, 300, 360, 0,
	262, 365, 372, 323, 0, 0, 376, 320, 319, 0,
	0, 0, 0, 0, 0, 312, 0, 356, 391, 380,
	331, 370, 297, 306, 0, 304, 0, 0, 0, 340,
	354, 0, 0, 0, 0, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	263, 301, 363, 366, 286, 350, 275, 308, 357, 309,
	332, 291, 0, 0, 0, 0, 936, 937, 938, 0,
	0, 0, 674, 0, 1126, 1117, 1116, 0, 0, 0,
	0, 0, 0, 588, 0, 589, 1118, 0, 0, 0,
	0, 0, 0, 579, 580, 0, 0, 0, 0, 1119,
	0, 0, 0, 421, 0, 0, 45, 569, 566, 567,
	571, 572, 573, 574, 0, 0, 0, 570, 575, 460,
	461, 0, 0, 0, 0, 0, 0, 558, 0, 0,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 373, 0,
	0, 0, 0, 0, 555, 556, 0, 0, 0, 0,
	604, 349, 557, 0, 0, 553, 554, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 0, 0, 0, 285, 289,
	283, 284, 336, 337, 385, 386, 387, 361, 280, 0,
	287, 288, 0, 368, 0, 1112, 0, 339, 0, 0,
	0, 392, 0, 0, 0, 1124, 0, 0, 0, 314,
	264, 318, 565, 0, 0, 0, 0, 544, 0, 276,
	277, 0, 0, 322, 317, 344, 346, 355, 364, 374,
	382, 358, 294, 328, 543, 0, 0, 0, 0, 542,
	0, 0, 0, 0, 0, 0, 588, 0, 589, 0,
	0, 0, 1120, 1121, 1123, 0, 579, 580, 1122, 0,
	0, 0, 0, 0, 0, 0, 421, 0, 1100, 45,
	569, 566, 567, 571, 572, 573, 574, 0, 0, 0,
	570, 575, 460, 461, 545, 0, 0, 590, 0, 540,
	558, 0, 0, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 591, 592, 0, 0, 0, 0, 555, 556, 0,
	0, 0, 0, 604, 0, 557, 0, 0, 990, 554,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 0, 0, 602, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 992, 593, 603, 599, 600, 597, 598,
	596, 595, 594, 605, 581, 582, 583, 584, 586, 0,
	0, 464, 463, 585, 0, 565, 0, 0, 0, 0,
	0, 0, 0, 0, 1127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 0, 0, 0, 0, 1001, 1007, 1005, 0, 0,
	1002, 0, 0, 1000, 0, 0, 1009, 0, 0, 1008,
	994, 1004, 1006, 1003, 998, 0, 993, 0, 1011, 1010,
	1012, 991, 1014, 0, 0, 0, 1018, 1015, 1017, 1016,
	590, 1013, 0, 0, 0, 0, 0, 0, 0, 0,
	995, 996, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 591, 592, 0, 0, 0, 0,
	0, 997, 999, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 674, 0, 1126, 1117, 1116, 0,
	0, 0, 0, 0, 0, 577, 0, 0, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1119, 0, 0, 0, 0, 0, 593, 603, 599,
	600, 597, 598, 596, 595, 594, 605, 581, 582, 583,
	584, 586, 544, 0, 464, 463, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 543,
	0, 0, 0, 0, 542, 0, 0, 0, 0, 0,
	0, 588, 0, 589, 0, 0, 674, 0, 1126, 1117,
	1116, 579, 580, 601, 0, 0, 0, 0, 0, 1691,
	1118, 421, 0, 0, 45, 569, 566, 567, 571, 572,
	573, 574, 0, 1119, 0, 570, 575, 460, 461, 545,
	1692, 0, 0, 0, 540, 558, 0, 0, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 1648, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1124, 0, 0,
	0, 0, 555, 556, 0, 0, 0, 0, 604, 544,
	557, 0, 0, 553, 554, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 543, 0, 0, 0,
	0, 542, 602, 0, 0, 0, 0, 0, 588, 0,
	589, 0, 0, 0, 1120, 1121, 1123, 0, 579, 580,
	1122, 0, 0, 0, 0, 0, 0, 0, 421, 0,
	1439, 45, 569, 566, 567, 571, 572, 573, 574, 1112,
	565, 0, 570, 575, 460, 461, 545, 0, 0, 1124,
	0, 540, 558, 0, 0, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 847, 0, 0, 0, 604, 0, 557, 0, 0,
	553, 554, 559, 0, 0, 0, 1120, 1121, 1123, 0,
	0, 0, 1122, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 1477, 0, 0, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 591,
	592, 0, 0, 0, 0, 0, 0, 565, 0, 0,
	0, 0, 0, 0, 0, 0, 1127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 593, 603, 599, 600, 597, 598, 596, 595,
	594, 605, 581, 582, 583, 584, 586, 0, 0, 464,
	463, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1127, 0,
	0, 0, 0, 0, 606, 0, 591, 592, 601, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 593,
	603, 599, 600, 597, 598, 596, 595, 594, 605, 581,
	582, 583, 584, 586, 544, 0, 464, 463, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 543, 0, 0, 0, 0, 542, 0, 0, 0,
	0, 0, 0, 588, 0, 589, 0, 0, 0, 0,
	0, 0, 0, 579, 580, 601, 0, 0, 0, 0,
	0, 0, 0, 421, 0, 724, 45, 569, 566, 567,
	571, 572, 573, 574, 0, 0, 0, 570, 575, 460,
	461, 545, 0, 0, 0, 0, 540, 558, 0, 0,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 544, 0, 0,
	0, 0, 0, 0, 555, 556, 0, 0, 0, 0,
	604, 0, 557, 0, 543, 553, 554, 559, 0, 542,
	0, 0, 0, 0, 0, 0, 588, 0, 589, 0,
	0, 0, 0, 0, 602, 0, 579, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 421, 0, 0, 45,
	569, 566, 567, 571, 572, 573, 574, 0, 0, 0,
	570, 575, 460, 461, 545, 0, 0, 0, 0, 540,
	558, 0, 565, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 847,
	0, 0, 0, 604, 0, 557, 0, 0, 553, 554,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 0, 0, 0, 606,
	0, 591, 592, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 593, 603, 599, 600, 597, 598,
	596, 595, 594, 605, 581, 582, 583, 584, 586, 0,
	590, 464, 463, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 591, 592, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 593, 603, 599,
	600, 597, 598, 596, 595, 594, 605, 581, 582, 583,
	584, 586, 0, 0, 464, 463, 585, 674, 0, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 0, 0,
	0, 0, 542, 0, 0, 0, 0, 0, 0, 588,
	0, 589, 0, 601, 0, 0, 0, 0, 0, 579,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 421,
	0, 0, 45, 569, 566, 567, 571, 572, 573, 574,
	0, 0, 0, 570, 575, 460, 461, 545, 0, 0,
	0, 0, 540, 558, 0, 0, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 544, 0, 0, 0, 0, 0, 0,
	555, 556, 0, 0, 0, 0, 604, 0, 557, 0,
	543, 553, 554, 559, 0, 542, 0, 0, 0, 0,
	0, 0, 588, 0, 589, 0, 0, 0, 0, 0,
	602, 0, 579, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 421, 0, 0, 45, 569, 566, 567, 571,
	572, 573, 574, 0, 0, 0, 570, 575, 460, 461,
	545, 0, 0, 0, 0, 540, 558, 0, 565, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 556, 0, 0, 0, 0, 604,
	0, 557, 0, 0, 553, 554, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 0, 0, 0, 606, 0, 591, 592, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	593, 603, 599, 600, 597, 598, 596, 595, 594, 605,
	581, 582, 583, 584, 586, 0, 590, 464, 463, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 0,
	591, 592, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 593, 603, 599, 600, 597, 598, 596,
	595, 594, 605, 581, 582, 583, 584, 586, 0, 0,
	464, 463, 585, 0, 0, 0, 588, 0, 589, 0,
	0, 0, 0, 0, 0, 0, 579, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 421, 0, 0, 45,
	569, 566, 567, 571, 572, 573, 574, 0, 0, 601,
	570, 575, 460, 461, 0, 0, 0, 0, 0, 0,
	558, 0, 0, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 0,
	0, 0, 0, 604, 0, 557, 0, 0, 553, 554,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 588,
	0, 589, 0, 0, 0, 0, 0, 602, 0, 579,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 865,
	0, 0, 45, 569, 566, 567, 571, 572, 573, 574,
	0, 0, 0, 570, 575, 460, 461, 0, 0, 0,
	0, 0, 0, 558, 0, 565, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 0, 0, 0, 0, 604, 0, 557, 0,
	0, 553, 554, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 565, 0,
	0, 0, 606, 0, 591, 592, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 34, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 593, 603, 599,
	600, 597, 598, 596, 595, 594, 605, 581, 582, 583,
	584, 586, 0, 590, 464, 463, 585, 0, 0, 0,
	0, 79, 0, 835, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 591, 592, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	593, 603, 599, 600, 597, 598, 596, 595, 594, 605,
	581, 582, 583, 584, 586, 0, 0, 464, 463, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 0, 122,
	123, 0, 124, 125, 126, 128, 127, 96, 97, 98,
	102, 100, 99, 101, 73, 75, 601, 71, 74, 80,
	76, 77, 78, 92, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 91, 93, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 0, 0, 0, 0, 834,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72,
}

var yyPact = [...]int16{
	512, -1000, -265, -1000, -1000, 1496, 607, 430, -1000, -1000,
	-1000, 1018, 483, 478, 475, 209, 438, 1017, 588, 1023,
	480, 427, -1000, -236, -186, -1000, -112, 470, -1000, 1334,
	-1000, 4602, 4602, 4602, -1000, 287, 1017, 1017, 427, 127,
	427, 1514, 403, 1513, 728, -1000, 561, -1000, 1644, 558,
	-1000, 427, 1023, 724, -1000, -1000, -1000, -1000, 219, 160,
	2096, 108, -157, -12, -1000, -1000, -1000, -1000, -1000, 1417,
	-1000, -1000, -1000, 1417, 47, 1495, 1417, 1495, -1000, 1417,
	1495, 43, 43, 43, 43, 43, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1492, 1486, -1000, 1417, 1417, 1417, 1417,
	1417, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1479, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1472, 69, 1472, 1430, 1430, -1000, -1000, 108,
	108, 1491, 1023, 1017, 1512, 1508, 1023, -252, 1023, 1023,
	1704, -1000, -1000, -1000, 151, 1023, 1601, 5739, 4602, 6879,
	1023, -1000, 1594, 505, 1023, 4979, -1000, 1566, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1477, 771, 1017, 295, 122,
	1402, 373, 499, 357, 1105, 290, -1000, -1000, -1000, 873,
	-1000, 1017, -1000, 1734, -1000, -1000, 286, -1000, 285, 707,
	1012, 1023, 1476, 142, 1473, 2912, 936, -1000, -270, -1000,
	-14, -1000, -1000, 870, 43, 1417, -1000, 43, 794, 43,
	43, -1000, -1000, 568, 1578, 568, 568, 568, 568, 1009,
	1009, -147, -147, -1000, -1000, -1000, 927, -1000, 926, 1472,
	-1000, -1000, -1000, 917, -1000, 1023, 1017, 1469, 1507, 1023,
	1023, 1633, 437, -1000, -1000, 1632, 1631, 1362, -1000, -1000,
	145, -1000, -1000, 403, 1017, -1000, 557, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1498, -1000, 301,
	501, 6119, 160, -1000, -1000, -1000, -1000, 484, -1000, 1728,
	1667, 302, 15, -199, 1102, -1000, -1000, 1468, -1000, -1000,
	8544, -1000, 1095, 1085, -1000, 1048, 1043, 20, 1017, -1000,
	-219, 104, 2, -1000, -1000, 1402, -1000, 1466, 8544, 1625,
	-1000, 1583, 914, -1000, 2467, -1000, -256, -1000, -1000, -1000,
	-256, -1000, -1000, -1000, 1402, -1000, 1465, 1463, -1000, 1461,
	-1000, -1000, 1402, 1402, 1402, 545, -1000, -1000, -1000, -1000,
	-1000, 1356, 568, 43, 568, 1355, 1354, 568, 568, -1000,
	-1000, 1033, 628, -1000, -1000, -1000, -1000, 1330, -1000, 1321,
	-1000, 62, 59, -1000, 1353, 1399, -1000, 1315, 1405, 1506,
	281, 1023, 1459, 1458, 1420, 427, 1420, 1665, 240, 1023,
	1704, 444, 1704, 403, 6499, 1017, 291, 1017, -1000, -1000,
	421, 4599, -1000, -1000, 1312, -1000, 230, 1417, 495, 495,
	-234, 279, 277, -199, 1402, 1456, -1000, 484, 633, -1000,
	8544, 213, 1402, 1402, 1402, 1402, 8451, -1000, -1000, 523,
	-1000, -1000, -1000, 8858, 8858, 8858, 8858, 8858, 8858, 8858,
	-1000, -1000, -1000, -1000, 3, -1000, -256, -1000, 955, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 541, 538, -1000, 1402,
	1402, 1402, 1402, 1402, 1402, 1402, 1402, 8544, 1402, 1558,
	1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
	1402, 2495, 1402, 1402, 1402, 1402, -1000, -1000, -1000, -1000,
	-1000, -1000, -199, 1455, -1000, -1000, -1000, 707, -1000, 8544,
	444, 804, 105, -1000, 1398, 1347, 1968, 1346, -1000, 9091,
	-1000, 1100, -1000, 950, -1000, 899, 1345, 7680, 8108, 8108,
	6499, -1000, -1000, 568, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 43, 1000, 43, -37, -42, -1000, 905, -1000,
	904, 281, 1017, 1023, 1341, 1395, -1000, 227, 1450, 444,
	484, -1000, 1681, 1741, -1000, 1420, 1023, -1000, 433, 1639,
	-1000, -1000, 1663, -1000, 1391, -1000, -1000, 1375, 1704, -1000,
	1443, 1017, -1000, -1000, 288, 1017, -1000, -1000, -1000, -1000,
	-1000, 746, 484, 1610, -1000, -1000, -1000, 762, -1000, -1000,
	766, 244, 750, -1000, 1017, -199, 1442, 8544, 484, 1298,
	228, 8544, 8544, 747, -1000, 593, 7065, 792, 660, 8858,
	8858, 8858, 8858, 8858, 8858, 8858, 8858, 8858, 8858, 8858,
	8858, 8858, 8858, 8858, 3082, 1039, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1030, -1000,
	1420, 956, 1100, 1100, 1100, 1289, 8451, 620, 1600, 1600,
	33, 8451, 33, 33, 33, 33, 33, 80, -1000, -267,
	-1000, -1000, 5739, 6499, 8108, 8108, 7238, 8544, 8108, 8108,
	8108, 1646, 694, 620, 956, 1662, 1100, 1100, 1100, 1100,
	-1000, 1100, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	46, -1000, -1000, -1000, -1000, -1000, -1000, 8108, 8108, 8108,
	8108, -1000, 1017, 1402, 633, 1293, -156, 8544, 1441, 898,
	-1000, 1290, -256, -1000, -1000, -1000, -157, -1000, -1000, -1000,
	-1000, 1100, 8108, 1250, 1289, -1000, 986, -1000, 537, 1250,
	986, 1250, 1402, -1000, 568, -1000, 568, -1000, -1000, 1257,
	1255, 1217, 1440, 1436, -238, 870, 281, 1281, 1278, 1670,
	1677, 1420, 1622, 1551, -1000, 1100, 1615, 1017, -1000, -1000,
	-1000, -1000, -1000, 217, 678, 1017, 7086, 1268, -1000, 751,
	1434, 128, 374, 1502, 2679, 135, -1000, 1024, 676, 999,
	675, 666, 662, 659, 657, 653, 651, 638, 626, 619,
	-1000, -1000, -1000, -1000, -1000, 1730, -1000, -1000, -1000, 1710,
	1432, 1431, 484, 633, 1262, 746, -1000, -121, 593, 597,
	-1000, -1000, 834, -1000, -1000, 2489, 8858, 8858, 8858, -1000,
	-1000, -1000, -1000, 792, 8858, 8858, 8858, 2402, 2489, 2456,
	469, 365, 33, 31, 31, 11, 11, 11, 11, 11,
	269, 269, -1000, -137, -1000, 1417, -1000, -1000, -1000, 1100,
	1100, -1000, -1000, -1000, -1000, 8544, -1000, 1100, -1000, -256,
	992, -1000, -1000, 987, 1402, -1000, 1250, 1250, 909, 1386,
	8951, 1417, -1000, 1417, 1430, -1000, -1000, 78, 1417, 77,
	-1000, -1000, -1000, -1000, 1430, -1000, -1000, -1000, -1000, -1000,
	1417, 1417, -1000, -1000, 1417, 1417, -1000, 1417, 1417, 714,
	1392, 1385, 1250, 8108, -1000, 622, -1000, 8544, 1100, 1023,
	-1000, -1000, -1000, -1000, -1000, -1000, 1250, 1100, 1383, 1250,
	1250, 1260, -1000, 8544, 228, 1505, -1000, -1000, 777, -1000,
	1184, 1168, -1000, -1000, 1250, 8108, -262, -1000, -1000, -1000,
	1042, -1000, -1000, 4219, -262, -262, 8108, -1000, -1000, -1000,
	-1000, -238, 281, 484, 1691, 1429, 1154, 1691, 746, 1591,
	8544, 8544, 1681, -1000, 1420, -1000, -1000, 1646, -1000, -1000,
	754, -1000, 1420, 1191, 168, 124, 8544, -1000, 1905, -1000,
	7086, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1681, 8544, -1000, -1000, -1000, -1000, -1000, 1017, 3028,
	1017, 1017, 1017, 391, 2617, -1000, -1000, -1000, 1023, 1145,
	4222, 751, 751, 4222, 751, 751, 484, 484, 1426, 1421,
	275, -1000, 1017, -1000, -153, 2679, 1017, -1000, 831, -1000,
	-1000, 821, 820, 821, 821, 821, 821, 821, 223, 805,
	359, 495, 495, 1017, 484, 1245, 228, 746, 1502, -1000,
	-1000, -1000, -1000, 2489, 2489, 2489, -1000, 2402, 2489, 1254,
	-1000, 8858, 8858, 57, -1000, -1000, 620, -1000, 60, -1000,
	-256, -1000, -1000, 3446, 1039, 8544, -1000, 276, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3446, 8858, 8858, 8858, 8858, -126, 1368, 691, -1000, 8544,
	711, -1000, -1000, -1000, -1000, -1000, -1000, 352, 1017, 633,
	-1000, 1719, -159, 554, -1000, -1000, -1000, -1000, -1000, 1402,
	-1000, -1000, 536, -1000, -1000, 1100, 1691, 1109, 1243, 746,
	8544, 444, -238, 746, -1000, -1000, 1716, 576, 893, 1382,
	-1000, 861, 1670, 1100, 1527, -1000, -1000, -139, 8544, 7086,
	2653, 620, 2653, -1000, 7086, 208, 1670, 674, 636, 430,
	1019, 990, 1381, 362, -1000, 3079, 835, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1017, 1707, 1705, 1698, 1694, 7610, 213, 1656,
	-1000, -1000, 4222, -1000, -1000, -1000, -1000, -1000, 1240, 1238,
	484, 484, 1419, 1402, 1235, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 707, 707, 1232, 1230, 746, -1000,
	1502, -1000, -1000, 8858, 2489, 2489, -44, -1000, 987, -1000,
	1100, 1417, 1100, 722, -1000, -1000, 1100, 2343, 2204, 2302,
	2167, 1402, -119, -1000, 620, 8544, 1023, -1000, 228, 495,
	495, -1000, -1000, -1000, 130, 837, 803, 801, 793, 27,
	-1000, 1675, 511, 5359, -1000, 746, 1691, 746, 1502, 620,
	1228, 1691, 1502, -1000, 1556, 8544, 8544, 8544, -1000, 1591,
	-1000, 8108, -1000, -1000, -260, 620, 1905, 2196, -1000, -1000,
	201, 6718, -1000, 1591, 7086, 629, -1000, 679, -1000, 2653,
	881, 1023, 1200, -1000, 1252, 1493, -1000, -1000, -1000, 1609,
	944, 479, 1017, 161, 4602, -1000, -1000, 1380, 3459, -69,
	-1000, -1000, -1000, 615, 535, 997, -1000, 1576, -1000, -1000,
	3028, 1590, -1000, -1000, -1000, -1000, -1000, 2653, 678, 183,
	-1000, 312, 1202, 1194, 484, 1017, -1000, 2679, -1000, -1000,
	326, 746, 1502, -1000, 2489, -1000, -1000, -1000, -1000, -1000,
	8858, -1000, -1000, 8858, -1000, 8858, -1000, 8858, -1000, 8858,
	8858, 1100, 941, 620, 1411, -1000, -1000, -1000, 781, -1000,
	770, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 131, -1000,
	1674, 1100, -1000, 1502, 746, -1000, -1000, -1000, 746, -1000,
	1554, 620, 620, -1000, -1000, 1343, 8544, 6338, -1000, -1000,
	-1000, -1000, 1389, 7528, 422, 928, 260, 1023, -1000, 260,
	1136, 990, 1023, -1000, -1000, 956, 990, 990, 990, 990,
	990, -1000, 1544, 1542, -1000, 1526, 1525, 1532, 1023, 1183,
	944, 553, 1402, -1000, 1038, -1000, -1000, -1000, 1609, 1655,
	-1000, 3839, 1380, -69, 1379, -1000, -59, -33, 7573, 6499,
	568, -1000, -1000, -1000, -1000, -1000, 1017, 477, 118, 167,
	140, -1000, 149, 746, 746, 1181, 1100, -1000, 1023, 1502,
	-1000, 347, 347, 347, 347, 347, 258, -1000, -1000, 1017,
	-1000, -1000, -1000, 532, 8544, -1000, -1000, -1000, 1502, -1000,
	1691, 990, 620, -1000, -1000, 5198, -1000, -1000, 2617, -1000,
	2617, 2653, -1000, 1225, 1402, -1000, 1691, 990, 1187, -1000,
	1332, -1000, 614, 1493, 1425, 1504, 1223, -1000, -1000, -1000,
	-1000, 1538, -1000, 1533, -1000, -1000, -1000, -1000, -144, 468,
	467, 452, 1017, -1000, 1420, -1000, 1379, -69, -73, -1000,
	-1000, -1000, -1000, 620, 605, -1000, 1376, -1000, 2653, -1000,
	-1000, 144, -1000, 1502, 1502, -1000, -1000, 1410, -1000, -1000,
	-1000, -1000, -1000, -1000, 1100, 169, -164, 1162, 6499, 1130,
	-1000, 620, -1000, 1688, 1371, 415, 7086, 4873, 636, 1500,
	956, 1402, -1000, 1053, 1017, 1681, 1187, -1000, 1691, 956,
	8544, -1000, -1000, 8544, 1409, -1000, 8544, -1000, -1000, -1000,
	-1000, 1407, 1402, 1402, 1402, 1138, -1000, -1000, -1000, -1000,
	-65, -52, -1000, 8544, 2016, -1000, -1000, -1000, -1000, 1017,
	-1000, 1550, -131, -183, -1000, -1000, -1000, 1100, 8544, 1686,
	1673, -1000, 237, 629, -1000, -1000, 1588, 1174, 1364, -1000,
	-1000, 8015, 1100, 1149, 529, 1138, 1670, -1000, 1681, -1000,
	620, 620, 444, 620, -115, 444, 444, 444, 951, 1017,
	-1000, -1000, -1000, 620, 5958, 1132, -1000, 1530, -1000, -1000,
	-1000, -1000, 8544, 8544, 5578, 272, -1000, 1402, -1000, -1000,
	1370, 1017, 1017, -1000, -1000, 1670, 1099, 1081, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1069, 1069, 1069,
	553, -1000, -1000, -1000, -140, 620, 1365, 404, 1706, -1000,
	1402, -1000, 1420, 514, -1000, -1000, -1000, -1000, -115, -1000,
	-1000, -1000, -144, -167, -1000, 956, 1364, 1100, 1017, -1000,
	-1000, -190, 1358, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1962, 22, 25, 1960, 1959, 1957, 1956, 1955, 1954,
	1952, 1949, 1947, 29, 28, 49, 35, 40, 1942, 1940,
	1939, 1936, 1935, 86, 1934, 1928, 1927, 74, 1926, 1923,
	1922, 1921, 78, 96, 81, 83, 1278, 31, 46, 66,
	44, 1920, 41, 1919, 1918, 54, 1917, 39, 1912, 1910,
	816, 1907, 1905, 6, 108, 75, 106, 1904, 1903, 93,
	1410, 1902, 1900, 114, 1899, 1897, 98, 15, 4, 10,
	9, 1896, 362, 1, 1895, 91, 1894, 1893, 1892, 1890,
	30, 1889, 56, 68, 5, 63, 1887, 8, 72, 45,
	17, 13, 2, 52, 27, 1886, 14, 43, 23, 1884,
	65, 1883, 128, 50, 62, 88, 0, 42, 94, 1882,
	1881, 1875, 1196, 89, 47, 11, 53, 70, 1874, 73,
	100, 55, 104, 95, 1870, 99, 1869, 1868, 1867, 1864,
	1863, 77, 879, 116, 76, 58, 1862, 1861, 87, 335,
	339, 92, 341, 1149, 79, 1859, 1855, 1854, 1852, 102,
	1851, 57, 115, 21, 427, 1850, 1849, 1848, 1846, 1844,
	1843, 1842, 101, 1840, 84, 80, 82, 829, 48, 1830,
	1828, 1827, 1826, 90, 1824, 1823, 1821, 67, 1818, 1817,
	97, 64, 121, 110, 107, 1812, 1809, 69, 71, 1805,
	105, 109, 1800, 111, 26, 24, 353, 59, 1799, 1798,
	1797, 7, 3, 1796, 1794, 1792, 1790, 1789, 1788, 60,
	1783, 85, 1782, 16, 1779, 1778, 51, 1776, 1775, 1773,
	1772, 1771, 440, 707, 1760, 103, 117, 1751, 124,
}

var yyR1 = [...]uint8{
	0, 218, 219, 219, 1, 1, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 19, 19, 19, 19, 19, 19,
	19, 221, 221, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 26, 26, 7, 8, 8, 8, 224, 224,
	45, 45, 89, 89, 9, 9, 9, 9, 10, 10,
	198, 198, 197, 199, 199, 11, 11, 11, 11, 11,
	192, 192, 192, 192, 192, 12, 12, 195, 195, 195,
	13, 13, 13, 13, 14, 14, 15, 15, 15, 17,
	17, 94, 94, 98, 98, 98, 99, 99, 99, 99,
	210, 210, 118, 118, 220, 220, 225, 225, 225, 225,
	225, 225, 225, 190, 190, 190, 190, 191, 191, 191,
	191, 193, 193, 194, 194, 194, 194, 194, 194, 196,
	196, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	104, 104, 171, 171, 171, 172, 172, 172, 172, 172,
	172, 174, 174, 175, 175, 110, 110, 176, 176, 22,
	156, 157, 157, 157, 157, 157, 157, 157, 157, 143,
	143, 143, 121, 121, 121, 121, 121, 121, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 182, 182, 182,
	182, 182, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 184, 185, 186, 178, 178, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	133, 133, 133, 133, 133, 133, 177, 177, 173, 173,
	173, 173, 125, 125, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 124, 124, 124, 124, 124, 124,
	124, 129, 129, 126, 126, 126, 126, 126, 126, 126,
	126, 122, 122, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 130, 130, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 142, 142, 131, 131,
	140, 140, 141, 141, 141, 132, 132, 132, 139, 139,
	139, 136, 136, 137, 137, 138, 138, 138, 134, 134,
	134, 135, 135, 135, 145, 167, 167, 167, 169, 169,
	170, 170, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 155, 155, 187, 187,
	188, 188, 189, 189, 166, 166, 166, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 154,
	154, 164, 164, 165, 165, 162, 162, 162, 163, 149,
	149, 149, 149, 149, 150, 150, 151, 151, 151, 151,
	146, 146, 147, 147, 148, 148, 180, 180, 180, 214,
	214, 214, 214, 214, 214, 215, 215, 181, 181, 152,
	152, 153, 153, 160, 160, 160, 160, 226, 226, 158,
	158, 158, 159, 159, 159, 227, 23, 24, 24, 25,
	25, 25, 29, 29, 29, 27, 27, 28, 28, 34,
	34, 33, 33, 35, 35, 35, 35, 109, 109, 109,
	108, 108, 211, 211, 211, 211, 211, 37, 37, 38,
	38, 39, 39, 40, 40, 40, 201, 201, 200, 200,
	202, 202, 202, 202, 202, 202, 202, 202, 52, 52,
	87, 87, 87, 90, 90, 41, 41, 41, 41, 42,
	42, 43, 43, 44, 44, 116, 116, 115, 115, 115,
	114, 114, 46, 46, 46, 48, 47, 47, 47, 47,
	49, 49, 51, 51, 50, 50, 53, 53, 53, 53,
	54, 54, 88, 88, 36, 36, 36, 36, 36, 36,
	36, 101, 101, 56, 56, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 65, 65, 65, 65, 65, 65, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 32, 32,
	66, 66, 66, 72, 67, 67, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 63, 63, 63, 63, 63, 63,
	63, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 228, 228, 64, 64, 64, 64,
	30, 30, 30, 30, 30, 117, 117, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 120,
	120, 120, 120, 120, 120, 120, 120, 76, 76, 31,
	31, 74, 74, 75, 103, 103, 77, 77, 73, 73,
	73, 203, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 78, 78, 79, 79, 212, 212, 213, 80,
	80, 81, 81, 82, 83, 83, 83, 84, 84, 84,
	84, 85, 85, 85, 58, 58, 58, 58, 58, 58,
	86, 86, 86, 86, 91, 91, 68, 68, 70, 70,
	69, 71, 92, 92, 96, 93, 93, 97, 97, 97,
	97, 97, 20, 21, 95, 95, 95, 111, 111, 111,
	102, 102, 100, 100, 106, 107, 107, 107, 107, 112,
	112, 113, 113, 204, 204, 204, 205, 205, 205, 206,
	206, 207, 208, 208, 209, 217, 217, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	222, 223,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 3, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 10, 1, 1, 5, 5, 3, 5, 3, 1,
	3, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 4, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	0, 3, 0, 2, 2, 0, 2, 2, 2, 2,
	2, 0, 2, 0, 3, 0, 1, 0, 2, 4,
	4, 0, 1, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 3, 1, 1, 1, 1, 1, 2, 2,
	3, 2, 4, 2, 4, 2, 2, 3, 2, 3,
	2, 7, 9, 3, 3, 6, 9, 9, 6, 6,
	8, 8, 5, 8, 7, 4, 0, 2, 4, 6,
	2, 4, 2, 1, 1, 1, 2, 1, 1, 1,
	3, 1, 2, 1, 1, 2, 0, 4, 3, 4,
	3, 3, 3, 3, 3, 3, 3, 2, 4, 6,
	2, 3, 2, 3, 1, 3, 0, 2, 0, 2,
	2, 3, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 2, 2, 2, 1,
	1, 0, 1, 1, 3, 3, 2, 2, 2, 1,
	1, 1, 1, 4, 5, 4, 4, 4, 1, 2,
	2, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 3, 3, 0, 3,
	3, 0, 1, 0, 1, 0, 2, 1, 0, 3,
	3, 0, 1, 2, 6, 0, 1, 4, 1, 2,
	1, 3, 2, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 5, 2, 3, 3,
	2, 3, 2, 3, 3, 2, 2, 3, 4, 1,
	1, 1, 1, 1, 3, 3, 2, 2, 1, 2,
	5, 5, 8, 8, 13, 11, 1, 1, 2, 2,
	10, 8, 9, 7, 7, 5, 0, 1, 1, 0,
	1, 1, 1, 2, 2, 1, 2, 0, 3, 0,
	1, 1, 3, 0, 4, 1, 3, 2, 1, 1,
	2, 1, 1, 1, 1, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 3, 6, 4, 7, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 0, 4, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 8,
	1, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 0, 4, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 4, 4, 4, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 4, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 2, 1, 4, 5, 5, 5, 5, 6,
	4, 4, 4, 6, 6, 8, 6, 6, 6, 8,
	6, 8, 6, 8, 6, 8, 9, 7, 5, 4,
	4, 3, 3, 3, 1, 3, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 2, 2, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 0, 2, 1, 3,
	5, 3, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 3, 0, 2, 1, 3, 1, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	5, 3, 1, 3, 1, 2, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 2, 0, 2, 2, 0,
	1, 4, 1, 3, 2, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -218, -1, -18, -19, -22, 126, 127, -219, 388,
	-156, 58, -214, -215, 273, -176, 135, 148, 166, 167,
	358, 133, 370, 371, 150, 373, 79, -100, 138, -157,
	-143, -106, 63, 36, 61, 134, 134, 134, 136, 210,
	136, -106, -106, -73, 139, 61, -112, 63, -50, -112,
	61, 133, -102, 139, 373, 370, 371, 338, 133, 60,
	59, -144, -121, -125, -122, -127, -126, -128, -106, -123,
	-124, 246, 350, 243, 247, 244, 249, 250, 251, 120,
	248, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 252, 264, 33, 155, 236, 237, 238, 241,
	240, 242, 239, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 217, 218, 219, 220, 221, 222, 223, 224,
	225, 226, 228, 229, 231, 232, 233, 235, 234, -144,
	-144, -106, 56, 209, -106, -106, -102, 211, -102, 56,
	-190, 19, 190, 191, 203, 56, 81, 123, 25, 123,
	-102, -50, 81, -50, 302, -160, -226, 353, 37, -143,
	-145, -149, -146, -147, -148, -161, -150, 142, 140, 150,
	386, 144, 145, 273, -154, 146, 134, 151, 73, 81,
	-182, 142, -185, 56, 281, 287, 140, 151, 150, 386,
	71, 143, 25, 360, 362, 31, 32, -138, 389, 275,
	-136, 284, -131, 58, -131, -130, 245, -132, 58, -131,
	-132, -131, -132, -134, 247, -134, -134, -134, -134, 58,
	58, -131, -131, -131, -131, -131, 58, -140, 58, -129,
	230, -140, -141, 58, -141, 56, 57, -50, -106, 56,
	56, -50, -210, 383, 384, -50, -50, -193, -191, 8,
	9, 10, 204, -50, 26, -107, -113, -106, 295, 147,
	-105, -112, 131, 191, 361, 80, 25, 27, 281, 287,
	190, 84, 120, 16, 85, 197, 370, 371, 119, 76,
	339, 126, 52, 331, 332, 329, 195, 341, 342, 330,
	288, 202, 20, 31, 383, 10, 28, 153, 24, 113,
	128, 192, 89, 88, 156, 26, 154, 75, 198, 200,
	19, 55, 146, 11, 360, 13, 14, 375, 362, 139,
	138, 100, 374, 134, 50, 8, 122, 29, 384, 97,
	46, 151, 201, 48, 98, 17, 333, 334, 34, 348,
	160, 115, 53, 40, 376, 81, 377, 73, 56, 302,
	196, 79, 15, 51, 161, 378, 148, 199, 382, 99,
	129, 338, 49, 193, 379, 132, 194, 6, 344, 33,
	152, 47, 133, 289, 380, 87, 137, 74, 167, 5,
	150, 9, 381, 54, 57, 335, 336, 337, 38, 86,
	12, 149, 352, 77, -121, -113, -105, -50, 26, 131,
	-50, -158, 59, -107, 71, -105, 36, 58, -181, 56,
	81, -152, -106, 151, -154, 61, 134, -180, 370, 371,
	-222, 58, -154, -154, 61, 134, 151, 61, 151, 73,
	19, -106, 9, 151, 151, -181, 63, -50, 58, -178,
	361, 16, 58, -183, 58, -184, 63, 64, 65, 66,
	73, -133, 72, -56, 276, -63, 329, 332, 331, 277,
	74, 75, -106, 347, 346, -112, -186, 65, 390, -137,
	285, 65, -134, -131, -134, 65, 61, -134, -134, -135,
	120, 119, 33, -135, -135, -135, -135, -142, 63, -142,
	-139, 352, 353, -139, 65, 65, -140, 65, -50, -106,
	58, 56, -50, -50, 25, 136, 25, -171, 25, 56,
	59, 204, -190, -106, 123, 57, -110, 142, -149, 150,
	131, 90, -107, -226, -165, -162, -106, 151, 10, 9,
	19, 146, 140, 150, 386, -180, 61, 58, -36, -55,
	81, -60, 31, 26, 9, 76, -222, -59, -56, -73,
	-203, -71, -72, 120, 121, 109, 110, 117, 82, 122,
	-63, -61, -62, -64, -206, 177, 63, 64, -106, 62,
	72, 65, 66, 67, 68, 73, -112, 307, -69, 48,
	49, 339, 340, 341, 342, 348, 343, 85, 38, 40,
	252, 276, 277, 329, 337, 336, 335, 333, 334, 331,
	332, 385, 139, 330, 115, 338, 274, 61, 61, 61,
	61, -180, 150, -152, -106, 372, -182, 386, -133, -222,
	58, -36, 25, 31, 65, -183, 58, -184, -173, 385,
	-173, -222, -131, 58, -131, 58, 58, -222, -222, -222,
	123, 60, -135, -134, -135, 60, 60, -135, -135, 61,
	61, 120, 60, 59, 60, 236, 236, 60, 59, 60,
	59, 58, 57, 56, -164, -165, -63, -106, -50, 58,
	58, -2, -3, -4, 6, -222, -102, -2, -172, 19,
	174, 175, -50, -191, -87, -106, 151, -193, -190, -107,
	-106, -221, 134, 151, -106, 142, -149, -159, -107, 63,
	65, 60, 59, -131, -163, 279, -131, -151, 170, 171,
	33, 172, -151, 372, 151, 151, -180, -222, 58, -165,
	-223, 80, 79, 97, 60, -36, -57, 100, 81, 98,
	99, 84, 106, 105, 116, 109, 110, 111, 112, 113,
	114, 115, 107, 108, 385, 119, 90, 91, 92, 93,
	94, 95, 96, 101, 102, 103, 104, -101, -222, -72,
	-222, -222, -222, -55, -2, -67, -222, -36, 124, 125,
	-60, -222, -60, -60, -60, -60, -60, -60, -207, 275,
	-173, 63, 123, 123, -222, -222, -222, -222, -222, -222,
	-222, -222, -76, -36, -222, 41, -222, -222, -222, -222,
	-228, -222, -228, -228, -228, -228, -228, -228, -120, 120,
	247, 155, 238, -123, -122, 253, 252, -222, -222, -222,
	-222, -180, 58, -181, -36, -87, 60, 58, 362, 59,
	60, -183, 63, 60, 278, 122, -121, -223, 60, 60,
	60, -34, 24, -33, -67, -35, -36, 111, -112, -33,
	-36, -33, -107, -135, -134, 63, -134, 286, 286, 65,
	65, -164, -106, -50, 60, 58, 58, -87, -165, -80,
	15, -25, 5, -23, -227, -2, -50, 137, 21, 6,
	8, 9, 10, 19, -104, 59, 25, -193, -220, 58,
	-106, 150, -106, -167, -169, 352, -168, 57, 147, 71,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 61,
	-162, -83, 27, 28, -181, 56, 73, 173, -181, 56,
	-152, -180, 58, -36, -165, 60, -177, 172, -36, -36,
	-65, 73, 81, 74, 75, -60, 21, 22, 23, -66,
	-69, -72, 69, 100, 98, 99, 84, -60, -60, -60,
	-60, -60, -60, -60, -60, -60, -60, -60, -60, -60,
	-60, -60, -125, 237, -120, -123, -117, 61, 63, 61,
	-73, -106, -223, -223, -223, 59, -223, -2, -59, 63,
	-106, -59, -106, 389, -107, -107, -33, -33, -36, -119,
	120, 243, 155, 238, 232, 262, 263, 283, 236, 284,
	225, 217, 222, 235, 233, 219, 234, 218, 231, 228,
	241, 240, 242, 253, 244, 249, 251, 250, 248, -36,
	-35, -35, -33, -27, 24, -74, -75, 86, -73, 19,
	-223, -223, -223, -223, -223, 245, -33, -34, -33, -33,
	-33, -153, -106, -222, -223, 60, 358, 359, -36, 58,
	65, 60, -138, -223, -33, 59, -223, -223, -109, -108,
	25, -106, 63, 123, -223, -223, -222, -135, -135, 60,
	60, 60, 58, 58, -88, 374, -164, 60, 60, -84,
	17, 16, -5, -3, -222, 21, 24, -29, 44, 45,
	-24, -223, 25, -153, 192, -103, 86, -106, -194, -196,
	212, -16, -13, -6, -8, -7, -10, -9, -11, -12,
	-20, -3, 139, -14, -15, -26, 10, 9, 20, 33,
	196, 197, 202, 198, 149, -21, 8, 338, 56, -225,
	-106, 109, 90, 63, -143, 59, 58, 58, 370, 371,
	140, -166, 56, -168, 352, 58, 354, 61, -155, 90,
	63, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 9, 10, 58, 58, -165, -223, 60, -167, 345,
	73, 74, 75, -60, -60, -60, -66, -60, -60, -60,
	-32, 156, 80, 352, -223, -223, -36, -223, -208, -209,
	63, -223, -223, 59, 57, 59, -131, -131, -131, -141,
	223, -131, 223, -141, -131, -131, -131, -131, -131, -131,
	25, 59, 11, 59, 11, -223, -33, -77, -75, 89,
	-36, -223, -112, -223, -223, -223, -223, 60, 59, -36,
	-177, 56, 60, -179, 60, 60, -223, -35, -211, 387,
	-108, 111, -113, -211, -211, -34, -88, -164, -165, -54,
	12, 58, 60, -54, -167, -85, 19, 34, -36, -81,
	-82, -36, -80, -2, -27, 70, -2, -174, 57, 193,
	212, -36, 388, -196, 212, -194, -80, -36, -55, -23,
	-23, -23, -198, -106, -197, -23, -217, -216, 308, 309,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, -106,
	-106, -106, -192, 40, 199, 200, 201, -55, -60, -50,
	60, -225, -106, -225, -225, -225, -225, -225, -165, -165,
	58, 58, 151, -106, -170, -168, -106, 65, -187, 56,
	77, 65, -187, -187, -187, -187, -187, -188, 188, 189,
	65, -189, -188, 65, -151, -151, -153, -165, 60, -177,
	-167, -166, -32, 80, -60, -60, 236, 390, 59, -173,
	-119, 120, -117, -36, -134, 61, -119, -60, -60, -60,
	-60, 349, -80, 88, -36, 87, 143, -106, -223, 10,
	9, 358, 359, 60, 213, 364, 365, 160, 366, 172,
	367, 368, -222, 123, -223, -54, 60, 60, -167, -36,
	-87, -88, -167, 9, 100, 59, 18, 59, -83, -84,
	-223, -28, 47, -175, 352, -36, -194, -195, -196, -196,
	-194, 388, 88, -84, 87, -17, -13, -14, -16, 212,
	-100, 11, -45, -50, -38, -39, -40, -41, -52, -72,
	-222, -50, 59, -199, -116, 194, 25, -93, -118, 214,
	-97, 297, 296, -107, 307, -95, 295, 247, 294, -187,
	59, -106, 11, 11, 11, 11, -196, 212, -104, 19,
	60, 60, -165, -165, 58, -222, 60, 59, -181, -181,
	60, 60, -167, -166, -60, 286, -209, -223, -223, -223,
	59, -223, -223, 59, -223, 19, -223, 59, -223, 19,
	-222, -31, 344, -36, -50, -177, -151, -151, 352, 65,
	16, 65, 65, 65, 65, 365, 160, 367, 16, -223,
	161, -80, 111, -167, -54, -167, -166, 60, -54, -166,
	42, -36, -36, -82, -85, -33, 386, 388, -196, 88,
	88, -85, -194, 89, 89, -195, -51, 29, -50, -50,
	-45, -224, 59, 11, 57, 33, 59, -46, -48, -47,
	-49, 46, 50, 52, 47, 48, 49, 53, -116, -38,
	-222, -115, 161, -114, 25, -112, 63, -197, -106, 195,
	-121, 59, -93, 214, -94, -98, 298, 300, 90, 123,
	-111, -106, 63, 31, 33, -216, 29, -195, -103, 192,
	-204, 205, 81, 60, 60, -165, -106, -168, 143, -167,
	-166, -60, -60, -60, -60, -60, -60, -223, 63, 58,
	65, 65, 369, -112, 16, -223, -166, -167, -167, 43,
	-37, 11, -36, 88, -196, 388, -14, -17, 139, -15,
	139, 388, 88, -89, 161, -50, -89, 57, -38, -50,
	-92, -96, -73, -39, -40, -40, -39, -40, 46, 46,
	46, 51, 46, 51, 46, -47, -112, -223, -53, 54,
	138, 55, -222, -114, 19, -97, -94, 59, 299, 301,
	302, 56, 77, -36, -107, -135, -153, 88, 212, 193,
	-205, 206, 205, -167, -167, 60, -223, -50, -166, -223,
	-223, -223, -223, -223, -30, 100, 352, -153, 123, -212,
	-213, -36, -166, -54, -38, 88, 89, -55, -55, -58,
	33, 38, -2, -222, -222, -54, -38, -54, -37, 59,
	90, -43, -42, 56, 57, -44, 56, -42, 46, 46,
	-201, 352, 134, 134, 134, -90, -106, -2, -98, -99,
	303, 300, 306, 90, -195, 208, 207, -166, -166, 58,
	-223, 350, 53, 355, 60, -107, -223, -80, 59, -78,
	13, 139, -194, -17, -17, -91, 56, -92, -68, -70,
	-69, -222, -2, -86, -106, -90, -80, -54, -54, -96,
	-36, -36, 58, -36, 58, -222, -222, -222, -223, 59,
	300, 304, 305, -36, 388, -153, 43, 351, 356, -223,
	-213, -79, 14, 16, 388, 30, -91, 59, -223, -223,
	-223, 59, 123, -223, -84, -80, -87, -200, -202, 375,
	376, 377, 378, 379, 380, 381, 382, -87, -87, -87,
	-115, -106, 88, 60, 43, -36, -67, 88, 151, -70,
	38, -2, -222, -106, -106, -84, 60, 60, 59, -223,
	-223, -223, -53, 352, 139, 9, -68, -2, 123, -202,
	-201, 355, -92, -223, -106, 356,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 812, 1, 3,
	6, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 810, 420, 421, 422, 425, 0, 0, 813, 0,
	162, 206, 206, 206, 814, 0, 0, 0, 810, 0,
	810, 0, 738, 0, 0, -2, 0, 820, 0, 534,
	819, 810, 0, 0, 426, 423, 424, 158, 0, 433,
	0, 169, 335, 331, 173, 174, 175, 176, 177, 318,
	253, 281, 282, 318, 305, 325, 318, 325, 288, 318,
	325, 338, 338, 338, 338, 338, 296, 297, 298, 299,
	300, 301, 302, 0, 0, 273, 318, 318, 318, 318,
	318, 279, 280, 307, 308, 309, 310, 311, 312, 313,
	314, 0, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 320, 271, 320, 322, 322, 269, 270, 170,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 114, 115, 0, 0, 0, 0, 0, 0,
	0, 159, 0, 0, 0, 160, 435, 0, 438, 163,
	164, 165, 166, 167, 168, 0, 427, 429, 0, 416,
	0, 0, 0, 0, 0, 0, 389, 390, 179, 0,
	181, 0, 183, 0, 185, 186, 0, 188, 190, 427,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 337,
	333, 332, 252, 0, 338, 318, 306, 338, 0, 338,
	338, 289, 290, 341, 0, 341, 341, 341, 341, 0,
	0, 328, 328, 276, 277, 278, 0, 264, 0, 320,
	272, 266, 267, 0, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 142, 0, 121, 117,
	118, 119, 116, 0, 0, 739, 0, 815, 816, 817,
	-2, 821, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 22, 535, 822, 0, 811, 155,
	0, 0, 0, 439, 441, 818, 437, 0, 399, 0,
	0, 0, 430, 377, 0, 385, -2, 0, 417, 418,
	829, 990, 0, 0, 380, 382, 0, 416, 429, 180,
	0, 0, 0, 187, 189, 0, 193, 194, 829, 0,
	224, 0, 0, 207, 0, 210, -2, 213, 214, 215,
	248, 217, 218, 219, 0, 221, 318, 318, 244, 0,
	553, 554, 0, 0, 0, 0, 222, 223, 336, 172,
	334, 0, 341, 338, 341, 0, 0, 341, 341, 291,
	342, 0, 0, 292, 293, 294, 295, 0, 316, 0,
	274, 0, 0, 275, 0, 0, 265, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 0, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 429, 29, 156,
	0, 0, 440, 436, 0, 393, 318, 318, 0, 0,
	0, 0, 0, 416, 0, 0, 384, 0, 0, 544,
	829, 549, 551, 0, 0, 0, 829, 596, 597, 598,
	599, 600, 601, 829, 829, 829, 829, 829, 829, 829,
	628, 629, 630, 631, 0, 633, -2, 743, 738, 745,
	746, 747, 748, 749, 750, 751, 0, 0, 791, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 664, 674, 674, 674, 674, 674, 674,
	674, 0, 0, 0, 0, 0, 830, 378, 379, 381,
	383, 387, 416, 0, 430, 205, 182, 427, 184, 829,
	0, 0, 0, 225, 0, 0, 0, 0, 212, 0,
	216, 0, 240, 0, 242, 0, 0, -2, 829, 829,
	0, 319, 283, 341, 285, 326, 327, 286, 287, 343,
	339, 340, 338, 0, 338, 0, 0, 315, 0, 323,
	0, 0, 0, 0, 0, 391, 392, 318, 0, 0,
	0, -2, 759, 0, 445, 0, 0, -2, 0, 0,
	143, 144, 140, 122, 120, 500, 501, 0, 0, 740,
	104, 0, 31, 32, 430, 429, 30, 434, 442, 443,
	444, 345, 0, 764, 397, 398, 396, 427, 406, 407,
	0, 0, 427, 428, 429, 416, 0, 829, 0, 0,
	246, 829, 829, 0, 991, 547, 829, 0, 0, 829,
	829, 829, 829, 829, 829, 829, 829, 829, 829, 829,
	829, 829, 829, 829, 0, 0, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 550, 0, 567,
	0, 0, 0, 544, 36, 0, 829, 594, 0, 0,
	619, 829, 620, 621, 622, 623, 624, 625, 632, 0,
	742, 744, 0, 0, 829, 829, 829, 829, 829, 829,
	829, 455, 0, 728, 0, 0, 0, 0, 0, 0,
	666, 0, 667, 668, 669, 670, 671, 672, 673, 719,
	0, 721, 722, 723, 724, 725, 726, 829, -2, 829,
	829, 388, 0, 0, 0, 0, 0, 829, 202, 0,
	208, 0, 248, 211, 249, 250, 335, 220, 241, 243,
	245, 0, 829, 0, 0, 461, 467, 463, 0, 0,
	467, 0, 0, 284, 341, 317, 341, 329, 330, 0,
	0, 0, 0, 0, 542, 990, 0, 0, 0, 767,
	0, 0, 449, 452, 447, 36, 0, 0, 146, 147,
	148, 149, 150, 0, 734, 0, 0, 0, 23, 106,
	0, 0, 430, 374, 346, 0, 348, 0, 366, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	394, 395, 765, 766, 400, 0, 408, 409, 401, 0,
	0, 0, 0, 0, 0, 345, 415, 0, 545, 546,
	548, 571, 0, 573, 575, 555, 829, 829, 829, 559,
	590, 591, 592, 0, 829, 829, 829, 588, 563, 0,
	602, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 616, 0, 627, 318, 617, 685, 686, 0,
	0, 738, 569, 570, 593, 829, 790, 36, 614, 248,
	0, 615, 626, 0, 739, 741, 0, 0, 0, 0,
	-2, 318, 690, 318, 322, 693, 694, 695, 318, 698,
	700, 701, 702, 703, 322, 705, 706, 707, 708, 709,
	318, 318, 712, 713, 318, 318, 716, 318, 318, 0,
	0, 0, 0, 829, 456, 736, 731, 829, 0, 0,
	661, 662, 663, 665, 675, 720, 0, 0, 460, 0,
	0, 0, 431, 829, 246, 195, 198, 199, 0, 226,
	0, 0, 251, 634, 0, 829, 472, 640, 464, 468,
	0, 470, 471, 0, 472, 472, -2, 303, 304, 321,
	324, 542, 0, 0, 540, 0, 0, 540, 345, 771,
	829, 829, 759, 38, 0, 450, 451, 455, 453, 454,
	446, 37, 0, 151, 0, 0, 829, 502, 19, 123,
	0, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 759, 829, 82, 83, 445, 445, 445, 0, 445,
	0, 0, 0, 70, 829, 802, 42, 43, 0, 0,
	-2, 106, 106, -2, 106, 106, 0, 0, 0, 0,
	0, 344, 0, 349, 0, 0, 0, 352, 0, 367,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 246, 345, 374, 247,
	572, 574, 576, 556, 557, 558, 560, 588, 564, 0,
	561, 829, 829, 0, 552, 568, 595, -2, 0, 832,
	248, 641, 642, 0, 0, 829, 687, 338, 691, 692,
	696, 697, 699, 704, 710, 711, 714, 715, 717, 718,
	0, 829, 829, 829, 829, 0, 759, 0, 732, 829,
	0, 659, 660, 676, 677, 678, 679, 0, 0, 0,
	191, 0, 0, 0, 204, 209, 635, 462, 636, 0,
	469, 465, 0, 637, 638, 0, 540, 0, 0, 345,
	829, 0, 542, 345, 13, 33, 0, 0, 768, 760,
	761, 764, 767, 36, 457, 448, -2, 153, 829, 141,
	0, 735, 0, 126, 0, 0, 767, 0, 544, 812,
	0, 0, 58, -2, 60, 0, 0, 835, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 65,
	66, 67, 0, 0, 0, 0, 0, 0, 0, 140,
	105, 107, -2, 108, 109, 110, 111, 112, 0, 0,
	0, 0, 0, 375, 0, 350, 355, 353, 356, 368,
	369, 357, 358, 359, 360, 361, 362, 363, 370, 371,
	364, 365, 372, 373, 427, 427, 0, 0, 345, 414,
	374, 413, 562, 829, 589, 565, 0, 831, 0, 834,
	0, 318, 0, 0, 688, 689, 0, 0, 0, 0,
	0, 0, 729, 658, 737, 829, 0, 432, 246, 0,
	0, 200, 201, 203, 0, 0, 0, 0, 0, 0,
	237, 0, 0, 0, 639, 345, 540, 345, 374, 541,
	0, 540, 374, 772, 0, 829, 829, 829, 763, 771,
	39, 829, 458, 17, 0, 152, 18, 0, 77, 124,
	0, 0, 127, 771, 0, 88, 86, 82, 89, 0,
	0, 0, 0, 50, 0, 479, 481, 482, 483, 515,
	0, 517, 0, 0, 0, 64, 516, 54, 0, 0,
	795, 102, 103, 0, 0, 0, -2, 0, 806, 803,
	0, 68, 71, 72, 73, 74, 75, 0, 734, 0,
	24, 823, 0, 0, 0, 0, 347, 0, 402, 403,
	0, 345, 374, 411, 566, 618, 833, 643, 647, 644,
	829, 646, 648, 829, 650, 829, 652, 829, 654, 829,
	829, 0, 0, 733, 0, 192, 196, 197, 0, 228,
	0, 230, 231, 232, 233, 234, 235, 236, 0, 473,
	0, 0, 466, 374, 345, 10, 8, 543, 345, 12,
	0, 769, 770, 762, 34, 477, 829, 0, 78, 128,
	125, 139, 0, 0, 0, 0, 52, 0, 533, -2,
	0, 0, 0, 48, 49, 0, 0, 0, 0, 0,
	0, 522, 0, 0, 525, 0, 0, 0, 0, 0,
	0, 536, 0, 518, 0, 520, 521, 61, 515, 0,
	62, 0, 55, 0, 57, 91, 0, 0, 829, 0,
	341, 807, 808, 809, 805, 836, 0, 0, 0, 0,
	826, 824, 0, 345, 345, 0, 0, 351, 0, 374,
	412, 0, 0, 0, 0, 0, 680, 657, 730, 0,
	227, 229, 238, 0, 829, 475, 7, 11, 374, 773,
	540, 0, 154, 20, 79, 0, 84, 85, 829, 87,
	829, 0, 90, 0, 0, 532, 540, 0, 540, 51,
	477, 792, 0, 480, 511, 513, 0, 508, 523, 524,
	526, 0, 528, 0, 530, 531, 484, 485, 486, 0,
	0, 0, 0, 519, 0, 796, 56, 0, 0, 94,
	95, 797, 798, 799, 0, 801, 69, 76, 0, 141,
	26, 0, 825, 374, 374, 25, 376, 0, 410, 645,
	649, 651, 653, 655, 0, 0, 0, 0, 0, 0,
	756, 758, 9, 752, 478, 0, 0, 0, 0, 784,
	0, 0, -2, 0, 0, 759, 540, 47, 540, 0,
	829, 505, 512, 829, 0, 506, 829, 507, 527, 529,
	498, 0, 0, 0, 0, 0, 503, -2, 92, 93,
	0, 0, 99, 829, 0, 827, 828, 27, 28, 0,
	656, 0, 0, 0, 405, 239, 474, 0, 829, 754,
	0, 80, 0, 0, 88, 40, 0, 784, 774, 786,
	788, 829, 36, 0, 780, 0, 767, 46, 759, 793,
	794, 509, 0, 514, 0, 0, 0, 0, 517, 0,
	96, 97, 98, 800, 0, 0, 681, 0, 684, 476,
	757, 35, 829, 829, 0, 0, 41, 0, 789, -2,
	0, 0, 0, 53, 45, 767, 0, 0, 488, 490,
	491, 492, 493, 494, 495, 496, 497, 0, 0, 0,
	536, 504, 21, 404, 682, 755, 753, 0, 0, 787,
	0, -2, 0, 782, 781, 44, 510, 487, 0, 537,
	538, 539, 486, 0, 81, 0, 777, 36, 0, 489,
	499, 0, 785, -2, 783, 683,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 388,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 389, 3, 390, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:420
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:425
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:426
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:434
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:439
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:459
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:479
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:500
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:516
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:533
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:553
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 14:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:568
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:579
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:591
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:602
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:618
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:632
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:646
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:659
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:673
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:684
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:690
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:704
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:718
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:738
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:756
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:774
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:783
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:798
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:806
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:813
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:819
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:823
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:829
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:833
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:840
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:852
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:864
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:868
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:874
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:880
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:884
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:888
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:893
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:894
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:898
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:902
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:907
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:911
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:917
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:921
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:925
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:929
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:935
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:939
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:952
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:956
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:962
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:967
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:971
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:977
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:984
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:991
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:998
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1006
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1016
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1020
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1024
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1028
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1032
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1038
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1045
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1059
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1063
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1067
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1074
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1082
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1092
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1103
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1113
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1124
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1129
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1134
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1141
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1145
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1156
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1160
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1166
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1170
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1174
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1180
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1184
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1192
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1198
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1208
		{
			yyVAL.str = SessionStr
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1212
		{
			yyVAL.str = GlobalStr
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1217
		{
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1218
		{
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1222
		{
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1223
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1224
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1225
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1226
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1227
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1228
		{
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1232
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1236
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1244
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1250
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1254
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1258
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1263
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1269
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1273
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1283
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1288
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1301
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1310
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1326
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1337
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1346
		{
			yyVAL.empty = struct{}{}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1348
		{
			yyVAL.empty = struct{}{}
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1351
		{
			yyVAL.bytes = nil
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1355
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1359
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1364
		{
			yyVAL.bytes = nil
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1368
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1372
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1376
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1380
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1384
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1389
		{
			yyVAL.expr = nil
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1393
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1398
		{
			yyVAL.expr = nil
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1402
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1407
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1411
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1416
		{
			yyVAL.bytes = nil
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1420
		{
			yyVAL.bytes = nil
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1426
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1433
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1439
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1443
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1448
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1452
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1456
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1460
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1464
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1468
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1474
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1479
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1484
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1490
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1501
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1507
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1520
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1525
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1530
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1535
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1541
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1546
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1551
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1556
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1561
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1566
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1571
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1576
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1581
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1590
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1600
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1605
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1610
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1617
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1624
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1632
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1637
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1642
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1647
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1653
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1659
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1665
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1672
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1678
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1684
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1688
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1692
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1696
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1700
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1706
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1710
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1714
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1718
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1722
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1726
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1730
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1734
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1738
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1744
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1750
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1756
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1762
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1766
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.sequence = &Sequence{}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1775
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1780
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1785
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1790
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1795
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1800
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1805
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1810
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1815
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1820
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1825
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1830
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 239:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1835
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1842
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1846
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1850
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1854
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1858
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1862
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1867
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1871
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1876
		{
			yyVAL.bytes = nil
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1885
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1890
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1977
		{
			yyVAL.str = ""
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1981
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2035
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2039
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2043
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2051
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2055
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2059
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2063
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 304:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2116
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2121
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2125
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2139
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2143
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2147
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2151
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2155
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2159
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2163
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2169
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2174
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2179
		{
			yyVAL.optVal = nil
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2183
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2188
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2192
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2200
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2204
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2210
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2218
		{
			yyVAL.optVal = nil
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2222
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2226
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2235
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2239
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2243
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2248
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2252
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2257
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2261
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2266
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2270
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2274
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2279
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2283
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2287
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2292
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2296
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2300
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2306
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2311
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2315
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2319
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2325
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2329
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2339
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2345
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2349
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2354
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2358
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2362
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2366
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2370
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2374
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2378
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2382
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2386
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2390
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2394
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2398
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2409
		{
			yyVAL.str = ""
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2413
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2419
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2423
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2429
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2433
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2439
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2443
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2449
		{
			yyVAL.indexPartition = nil
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2453
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2457
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2463
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2467
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2471
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2475
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2479
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2483
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2487
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2491
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2495
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2499
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2503
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2507
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2513
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2517
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2523
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2528
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2534
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2538
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2544
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2549
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2553
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2563
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2568
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2575
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 402:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2582
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 403:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2589
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 404:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2598
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 405:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2609
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2620
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2624
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2628
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2632
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 410:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2638
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 411:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2648
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 412:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2659
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 413:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2670
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 414:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2681
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2690
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2699
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2703
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2707
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2713
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2717
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2721
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2725
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2729
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2733
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2739
		{
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2740
		{
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2744
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2748
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2753
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2760
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2764
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2771
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2775
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2781
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2790
		{
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2791
		{
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2799
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2803
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2809
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2813
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2817
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2822
		{
			setAllowComments(yylex, true)
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2826
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2832
		{
			yyVAL.bytes2 = nil
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2836
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2842
		{
			yyVAL.str = UnionStr
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2846
		{
			yyVAL.str = UnionAllStr
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2850
		{
			yyVAL.str = UnionDistinctStr
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2855
		{
			yyVAL.str = ""
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2859
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2863
		{
			yyVAL.str = SQLCacheStr
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2868
		{
			yyVAL.str = ""
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2872
		{
			yyVAL.str = DistinctStr
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2877
		{
			yyVAL.str = ""
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2881
		{
			yyVAL.str = StraightJoinHint
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2886
		{
			yyVAL.selectExprs = nil
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2890
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2896
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2900
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2906
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2910
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2914
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2918
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2923
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2927
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2931
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2938
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2943
		{
			yyVAL.overExpr = nil
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2947
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2951
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2955
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 476:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2959
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2964
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2968
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2974
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2978
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2988
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2992
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2996
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3001
		{
			yyVAL.strs = []string{}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3005
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3011
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3015
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3021
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3025
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3029
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3033
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3037
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3041
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3045
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3049
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3055
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 499:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3059
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3065
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3070
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3074
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3080
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3084
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3097
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3101
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3109
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3115
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3117
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3121
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3123
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3127
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3129
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3132
		{
			yyVAL.empty = struct{}{}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3134
		{
			yyVAL.empty = struct{}{}
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3137
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3141
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3145
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3152
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3158
		{
			yyVAL.str = JoinStr
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3162
		{
			yyVAL.str = JoinStr
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3166
		{
			yyVAL.str = JoinStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3172
		{
			yyVAL.str = StraightJoinStr
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3178
		{
			yyVAL.str = LeftJoinStr
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3182
		{
			yyVAL.str = LeftJoinStr
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3186
		{
			yyVAL.str = RightJoinStr
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3190
		{
			yyVAL.str = RightJoinStr
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3196
		{
			yyVAL.str = NaturalJoinStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3200
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3210
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3214
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3220
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3224
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3229
		{
			yyVAL.indexHints = nil
		}
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3233
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 538:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3237
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3241
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3246
		{
			yyVAL.expr = nil
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3250
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3255
		{
			yyVAL.columns = nil
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3259
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3265
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3269
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3273
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3277
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3281
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3285
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3289
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3295
		{
			yyVAL.str = ""
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3299
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3305
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3309
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3315
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3319
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3323
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3327
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3331
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3335
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3339
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3343
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3347
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3351
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3355
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 566:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3359
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3363
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3372
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3376
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3382
		{
			yyVAL.str = IsNullStr
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3386
		{
			yyVAL.str = IsNotNullStr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3390
		{
			yyVAL.str = IsTrueStr
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3394
		{
			yyVAL.str = IsNotTrueStr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3398
		{
			yyVAL.str = IsFalseStr
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3402
		{
			yyVAL.str = IsNotFalseStr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3408
		{
			yyVAL.str = EqualStr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3412
		{
			yyVAL.str = LessThanStr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3416
		{
			yyVAL.str = GreaterThanStr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3420
		{
			yyVAL.str = LessEqualStr
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3424
		{
			yyVAL.str = GreaterEqualStr
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3428
		{
			yyVAL.str = NotEqualStr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3432
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3436
		{
			yyVAL.str = PosixRegexStr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3440
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3444
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3448
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3453
		{
			yyVAL.expr = nil
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3457
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3477
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3483
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3487
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3493
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3497
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3501
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3505
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3509
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3513
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3517
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3521
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3525
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3529
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3533
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3537
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3541
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3545
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3549
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3553
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3557
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3561
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3565
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3569
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3573
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3577
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 618:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3581
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3585
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3589
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3593
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3601
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3615
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3619
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3623
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3631
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3639
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3647
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3651
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3661
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 635:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3665
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3669
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 637:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3673
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3677
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3681
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3685
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3695
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3699
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 643:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3703
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 644:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3708
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 645:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3712
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 646:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3716
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 647:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3720
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 648:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3724
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 649:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3728
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 650:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3732
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 651:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3736
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 652:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3740
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 653:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3744
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 654:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3748
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 655:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3752
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 656:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3756
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 657:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3760
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 658:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3764
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3768
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3773
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3777
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3781
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3785
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3796
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3800
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3804
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3808
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3812
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3817
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3822
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3827
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3836
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3850
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3854
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3858
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3862
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.str = ""
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.str = BooleanModeStr
		}
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 683:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.str = QueryExpansionStr
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3890
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3894
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3900
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3904
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3908
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3912
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3916
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3920
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3926
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3930
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3934
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3938
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3942
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3946
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3950
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3970
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3974
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3978
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3982
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3986
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3990
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3994
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3998
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4002
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4006
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4010
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4014
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4018
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4022
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4026
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4032
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4036
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4040
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4044
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4048
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4052
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4056
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4060
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.expr = nil
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4069
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4074
		{
			yyVAL.str = string("")
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4078
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4084
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4088
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 733:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4094
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4099
		{
			yyVAL.empty = struct{}{}
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4101
		{
			yyVAL.empty = struct{}{}
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.expr = nil
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4114
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4118
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 740:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4122
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4128
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4134
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4138
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4143
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4148
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4152
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4156
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4160
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4164
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4168
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4172
		{
			yyVAL.expr = &NullVal{}
		}
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.exprs = nil
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4186
		{
			yyVAL.expr = nil
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4190
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4196
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4200
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4206
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.orderBy = nil
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4221
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4225
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4231
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4236
		{
			yyVAL.str = AscScr
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4240
		{
			yyVAL.str = AscScr
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4244
		{
			yyVAL.str = DescScr
		}
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4249
		{
			yyVAL.limit = nil
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4253
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 769:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4257
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 770:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4261
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4266
		{
			yyVAL.str = ""
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4270
		{
			yyVAL.str = ForUpdateStr
		}
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4274
		{
			yyVAL.str = ShareModeStr
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4287
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4291
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4295
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 777:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4300
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 778:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4304
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 779:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4308
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4315
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4319
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4323
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 783:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4327
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4332
		{
			yyVAL.updateExprs = nil
		}
	case 785:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4336
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4342
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4346
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4352
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4356
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4362
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4368
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4378
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4382
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4388
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4394
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4398
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4404
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4408
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4412
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 800:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4417
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4421
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4427
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4433
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4440
		{
			yyVAL.bytes = []byte("charset")
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4447
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4451
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4455
		{
			yyVAL.expr = &Default{}
		}
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4460
		{
			yyVAL.empty = struct{}{}
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4462
		{
			yyVAL.empty = struct{}{}
		}
	case 812:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4465
		{
			yyVAL.str = ""
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4467
		{
			yyVAL.str = IgnoreStr
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4471
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4478
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4482
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4486
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4497
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4504
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4510
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4514
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4518
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4524
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4528
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4532
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4538
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4542
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 831:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4549
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4556
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4560
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4567
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4573
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4577
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4747
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4756
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
