// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const SCHEMA = 57457
const TABLE = 57458
const INDEX = 57459
const MATERIALIZED = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const PRIMARY = 57465
const COLUMN = 57466
const CONSTRAINT = 57467
const REFERENCES = 57468
const SPATIAL = 57469
const FULLTEXT = 57470
const FOREIGN = 57471
const KEY_BLOCK_SIZE = 57472
const POLICY = 57473
const WHILE = 57474
const UNIQUE = 57475
const KEY = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const EXEC = 57485
const EXECUTE = 57486
const MAXVALUE = 57487
const PARTITION = 57488
const REORGANIZE = 57489
const LESS = 57490
const THAN = 57491
const PROCEDURE = 57492
const TRIGGER = 57493
const TYPE = 57494
const RETURN = 57495
const STATUS = 57496
const VARIABLES = 57497
const RESTRICT = 57498
const CASCADE = 57499
const NO = 57500
const ACTION = 57501
const PERMISSIVE = 57502
const RESTRICTIVE = 57503
const PUBLIC = 57504
const CURRENT_USER = 57505
const SESSION_USER = 57506
const PAD_INDEX = 57507
const FILLFACTOR = 57508
const IGNORE_DUP_KEY = 57509
const STATISTICS_NORECOMPUTE = 57510
const STATISTICS_INCREMENTAL = 57511
const ALLOW_ROW_LOCKS = 57512
const ALLOW_PAGE_LOCKS = 57513
const DISTANCE = 57514
const M = 57515
const EUCLIDEAN = 57516
const COSINE = 57517
const BEFORE = 57518
const AFTER = 57519
const EACH = 57520
const ROW = 57521
const SCROLL = 57522
const CURSOR = 57523
const OPEN = 57524
const CLOSE = 57525
const FETCH = 57526
const PRIOR = 57527
const FIRST = 57528
const LAST = 57529
const DEALLOCATE = 57530
const INSTEAD = 57531
const OF = 57532
const OUTPUT = 57533
const DEFERRABLE = 57534
const INITIALLY = 57535
const IMMEDIATE = 57536
const DEFERRED = 57537
const CONCURRENTLY = 57538
const SQL = 57539
const SECURITY = 57540
const BEGIN = 57541
const START = 57542
const TRANSACTION = 57543
const COMMIT = 57544
const ROLLBACK = 57545
const BIT = 57546
const TINYINT = 57547
const SMALLINT = 57548
const SMALLSERIAL = 57549
const MEDIUMINT = 57550
const INT = 57551
const INTEGER = 57552
const SERIAL = 57553
const BIGINT = 57554
const BIGSERIAL = 57555
const INTNUM = 57556
const REAL = 57557
const DOUBLE = 57558
const PRECISION = 57559
const FLOAT_TYPE = 57560
const DECIMAL = 57561
const NUMERIC = 57562
const SMALLMONEY = 57563
const MONEY = 57564
const TIME = 57565
const TIMESTAMP = 57566
const DATETIME = 57567
const YEAR = 57568
const DATETIMEOFFSET = 57569
const DATETIME2 = 57570
const SMALLDATETIME = 57571
const CHAR = 57572
const VARCHAR = 57573
const VARYING = 57574
const BOOL = 57575
const CHARACTER = 57576
const VARBINARY = 57577
const NCHAR = 57578
const NVARCHAR = 57579
const NTEXT = 57580
const UUID = 57581
const TEXT = 57582
const TINYTEXT = 57583
const MEDIUMTEXT = 57584
const LONGTEXT = 57585
const CITEXT = 57586
const BLOB = 57587
const TINYBLOB = 57588
const MEDIUMBLOB = 57589
const LONGBLOB = 57590
const JSON = 57591
const JSONB = 57592
const ENUM = 57593
const GEOMETRY = 57594
const POINT = 57595
const LINESTRING = 57596
const POLYGON = 57597
const GEOMETRYCOLLECTION = 57598
const MULTIPOINT = 57599
const MULTILINESTRING = 57600
const MULTIPOLYGON = 57601
const VECTOR = 57602
const VARIADIC = 57603
const ARRAY = 57604
const NOW = 57605
const GETDATE = 57606
const BPCHAR = 57607
const TEXT_PATTERN_OPS = 57608
const NULLX = 57609
const AUTO_INCREMENT = 57610
const APPROXNUM = 57611
const SIGNED = 57612
const UNSIGNED = 57613
const ZEROFILL = 57614
const ZONE = 57615
const AUTOINCREMENT = 57616
const DATABASES = 57617
const TABLES = 57618
const VSCHEMA_TABLES = 57619
const EXTENDED = 57620
const FULL = 57621
const PROCESSLIST = 57622
const NAMES = 57623
const CHARSET = 57624
const GLOBAL = 57625
const SESSION = 57626
const ISOLATION = 57627
const LEVEL = 57628
const READ = 57629
const WRITE = 57630
const ONLY = 57631
const REPEATABLE = 57632
const COMMITTED = 57633
const UNCOMMITTED = 57634
const SERIALIZABLE = 57635
const NEW = 57636
const CONCAT_NULL_YIELDS_NULL = 57637
const CURSOR_CLOSE_ON_COMMIT = 57638
const QUOTED_IDENTIFIER = 57639
const ARITHABORT = 57640
const FMTONLY = 57641
const NOCOUNT = 57642
const NOEXEC = 57643
const NUMERIC_ROUNDABORT = 57644
const ANSI_DEFAULTS = 57645
const ANSI_NULL_DFLT_OFF = 57646
const ANSI_NULL_DFLT_ON = 57647
const ANSI_NULLS = 57648
const ANSI_PADDING = 57649
const ANSI_WARNINGS = 57650
const FORCEPLAN = 57651
const SHOWPLAN_ALL = 57652
const SHOWPLAN_TEXT = 57653
const SHOWPLAN_XML = 57654
const IMPLICIT_TRANSACTIONS = 57655
const REMOTE_PROC_TRANSACTIONS = 57656
const XACT_ABORT = 57657
const CURRENT_TIMESTAMP = 57658
const DATABASE = 57659
const CURRENT_DATE = 57660
const CURRENT_TIME = 57661
const LOCALTIME = 57662
const LOCALTIMESTAMP = 57663
const UTC_DATE = 57664
const UTC_TIME = 57665
const UTC_TIMESTAMP = 57666
const REPLACE = 57667
const CONVERT = 57668
const CAST = 57669
const SUBSTR = 57670
const SUBSTRING = 57671
const GROUP_CONCAT = 57672
const SEPARATOR = 57673
const INHERIT = 57674
const LEAD = 57675
const LAG = 57676
const MATCH = 57677
const AGAINST = 57678
const BOOLEAN = 57679
const LANGUAGE = 57680
const WITH = 57681
const WITHOUT = 57682
const PARSER = 57683
const QUERY = 57684
const EXPANSION = 57685
const UNUSED = 57686
const VIRTUAL = 57687
const STORED = 57688
const GENERATED = 57689
const ALWAYS = 57690
const IDENTITY = 57691
const SEQUENCE = 57692
const INCREMENT = 57693
const MINVALUE = 57694
const CACHE = 57695
const CYCLE = 57696
const OWNED = 57697
const NONE = 57698
const CLUSTERED = 57699
const NONCLUSTERED = 57700
const REPLICATION = 57701
const COLUMNSTORE = 57702
const INCLUDE = 57703
const HOLDLOCK = 57704
const NOLOCK = 57705
const NOWAIT = 57706
const PAGLOCK = 57707
const ROWLOCK = 57708
const TABLOCK = 57709
const UPDLOCK = 57710
const READUNCOMMITTED = 57711
const DEFINER = 57712
const INVOKER = 57713
const TYPECAST = 57714
const CHECK = 57715
const OVER = 57716

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	134, 431,
	-2, 166,
	-1, 52,
	123, 838,
	-2, 832,
	-1, 53,
	123, 839,
	-2, 752,
	-1, 270,
	123, 842,
	-2, 836,
	-1, 271,
	123, 839,
	-2, 837,
	-1, 427,
	61, 401,
	-2, 398,
	-1, 457,
	123, 840,
	-2, 260,
	-1, 578,
	123, 840,
	-2, 260,
	-1, 599,
	279, 849,
	-2, 740,
	-1, 653,
	279, 849,
	-2, 471,
	-1, 687,
	5, 36,
	-2, 14,
	-1, 693,
	5, 36,
	-2, 16,
	-1, 835,
	279, 849,
	-2, 471,
	-1, 1008,
	279, 849,
	-2, 330,
	-1, 1084,
	279, 849,
	-2, 471,
	-1, 1146,
	279, 849,
	-2, 740,
	-1, 1154,
	60, 106,
	-2, 216,
	-1, 1157,
	60, 106,
	-2, 216,
	-1, 1211,
	5, 37,
	-2, 606,
	-1, 1290,
	5, 36,
	-2, 15,
	-1, 1306,
	198, 63,
	-2, 527,
	-1, 1341,
	279, 849,
	-2, 146,
	-1, 1342,
	279, 849,
	-2, 146,
	-1, 1347,
	60, 106,
	-2, 187,
	-1, 1491,
	90, 834,
	-2, 822,
	-1, 1587,
	57, 50,
	59, 50,
	-2, 52,
	-1, 1761,
	5, 36,
	-2, 791,
	-1, 1786,
	5, 36,
	-2, 59,
	-1, 1824,
	59, 983,
	60, 983,
	-2, 457,
	-1, 1862,
	5, 37,
	-2, 792,
	-1, 1894,
	5, 36,
	-2, 794,
	-1, 1915,
	5, 37,
	-2, 795,
}

const yyPrivate = 57344

const yyLast = 11186

var yyAct = [...]int16{
	580, 561, 1689, 1871, 1817, 415, 1779, 1707, 1823, 1609,
	1818, 782, 31, 1814, 590, 1097, 1749, 887, 48, 49,
	50, 1690, 1059, 1784, 1452, 1120, 1485, 1623, 1611, 1682,
	1771, 1119, 77, 77, 77, 77, 1460, 1669, 1622, 1597,
	1133, 1470, 1131, 141, 144, 145, 1134, 1116, 1310, 914,
	491, 1113, 1488, 1482, 71, 1307, 1471, 1479, 1467, 1284,
	1607, 723, 1213, 700, 1279, 944, 902, 736, 27, 1273,
	31, 1503, 984, 929, 70, 1007, 223, 636, 1372, 1204,
	642, 1346, 809, 859, 1077, 1041, 1044, 419, 891, 242,
	957, 207, 559, 1363, 72, 825, 781, 1092, 681, 422,
	78, 560, 73, 680, 537, 551, 171, 138, 139, 140,
	266, 454, 1056, 572, 1262, 817, 257, 258, 456, 463,
	166, 150, 480, 190, 1744, 690, 428, 863, 61, 750,
	749, 759, 760, 752, 753, 754, 755, 756, 757, 758,
	751, 1001, 9, 762, 248, 1393, 750, 749, 759, 760,
	752, 753, 754, 755, 756, 757, 758, 751, 267, 77,
	762, 209, 1263, 270, 751, 406, 267, 762, 225, 226,
	227, 228, 205, 1574, 146, 35, 148, 432, 423, 762,
	58, 1476, 55, 911, 643, 253, 254, 1093, 63, 160,
	624, 426, 442, 52, 544, 55, 729, 1205, 429, 430,
	452, 56, 627, 1916, 545, 1851, 474, 741, 1913, 1161,
	265, 64, 65, 404, 1554, 844, 640, 1802, 413, 52,
	1170, 457, 458, 459, 461, 244, 1416, 1417, 1064, 1065,
	464, 462, 472, 473, 752, 753, 754, 755, 756, 757,
	758, 751, 1780, 161, 762, 503, 504, 511, 1169, 163,
	168, 1906, 750, 749, 759, 760, 752, 753, 754, 755,
	756, 757, 758, 751, 427, 525, 762, 38, 460, 1449,
	405, 1207, 1850, 1406, 1801, 208, 495, 496, 497, 498,
	38, 187, 1193, 539, 1540, 66, 1843, 446, 39, 637,
	40, 484, 1717, 471, 486, 212, 489, 490, 1624, 1790,
	1625, 39, 1789, 40, 482, 1791, 38, 465, 749, 759,
	760, 752, 753, 754, 755, 756, 757, 758, 751, 467,
	1523, 762, 1844, 1845, 247, 1718, 1719, 39, 251, 40,
	255, 256, 564, 876, 638, 875, 796, 263, 211, 1400,
	224, 745, 407, 883, 748, 468, 410, 470, 469, 1053,
	763, 764, 765, 766, 767, 768, 769, 1165, 746, 747,
	744, 770, 771, 772, 773, 750, 749, 759, 760, 752,
	753, 754, 755, 756, 757, 758, 751, 213, 214, 762,
	1745, 219, 216, 448, 221, 524, 750, 749, 759, 760,
	752, 753, 754, 755, 756, 757, 758, 751, 1612, 1391,
	762, 231, 232, 233, 234, 235, 672, 671, 240, 41,
	502, 1727, 267, 761, 429, 430, 1226, 1294, 237, 538,
	1224, 1553, 41, 1555, 499, 558, 147, 510, 142, 1730,
	761, 514, 515, 35, 58, 741, 1614, 761, 466, 471,
	626, 1731, 432, 1641, 546, 58, 1617, 55, 41, 761,
	1795, 1794, 523, 262, 738, 737, 474, 690, 1481, 1148,
	1137, 1136, 1728, 1293, 534, 754, 755, 756, 757, 758,
	751, 1138, 739, 762, 690, 1638, 1148, 1137, 1136, 1112,
	1392, 737, 476, 475, 1139, 739, 45, 935, 1138, 1373,
	1374, 468, 945, 470, 469, 696, 697, 1683, 739, 35,
	1891, 1139, 1357, 761, 429, 430, 36, 37, 476, 475,
	58, 485, 55, 683, 761, 731, 530, 536, 35, 36,
	37, 38, 1078, 845, 701, 1162, 1163, 267, 706, 224,
	710, 629, 38, 535, 267, 658, 761, 660, 730, 625,
	663, 664, 39, 646, 40, 36, 37, 445, 1170, 451,
	538, 547, 241, 39, 888, 40, 1577, 465, 35, 688,
	1080, 688, 659, 630, 46, 623, 628, 639, 721, 467,
	167, 1640, 1528, 741, 641, 1800, 738, 737, 708, 705,
	1546, 436, 1218, 740, 1217, 143, 714, 435, 444, 702,
	1132, 761, 738, 737, 739, 709, 740, 38, 437, 741,
	1144, 688, 721, 728, 738, 737, 431, 1132, 539, 740,
	739, 1150, 1151, 687, 1378, 693, 726, 1144, 39, 909,
	40, 1146, 739, 930, 931, 439, 682, 529, 1150, 1151,
	1480, 185, 424, 701, 543, 531, 1647, 1411, 1146, 712,
	699, 703, 1117, 505, 77, 186, 692, 704, 735, 761,
	1140, 1141, 1143, 738, 737, 501, 1142, 267, 508, 797,
	186, 1410, 187, 41, 780, 862, 1907, 1140, 1141, 1143,
	761, 739, 732, 1142, 41, 738, 737, 187, 683, 880,
	151, 1256, 1336, 1234, 1298, 711, 701, 538, 52, 185,
	55, 1164, 1810, 739, 1679, 684, 842, 62, 854, 28,
	738, 737, 1558, 698, 895, 740, 1708, 1710, 908, 870,
	871, 517, 910, 47, 830, 855, 831, 840, 739, 538,
	1783, 740, 1782, 819, 820, 821, 822, 823, 824, 1781,
	184, 626, 44, 740, 688, 538, 43, 738, 737, 41,
	1373, 1374, 465, 761, 42, 872, 67, 874, 60, 885,
	532, 838, 849, 1441, 409, 739, 724, 725, 727, 958,
	36, 37, 6, 7, 648, 650, 861, 867, 869, 785,
	786, 36, 37, 1865, 1747, 38, 1627, 1428, 1081, 989,
	988, 879, 740, 800, 1439, 886, 998, 998, 893, 799,
	1709, 682, 656, 1149, 1440, 1000, 39, 526, 40, 159,
	267, 267, 157, 1792, 740, 270, 637, 738, 737, 666,
	1149, 932, 989, 1046, 738, 737, 936, 493, 492, 1769,
	688, 905, 1661, 928, 1626, 739, 688, 1548, 1184, 740,
	938, 688, 739, 942, 719, 722, 36, 37, 1581, 1045,
	1060, 217, 1243, 1847, 1337, 1338, 1339, 990, 991, 992,
	994, 638, 1002, 1003, 152, 153, 980, 982, 939, 1585,
	1296, 881, 983, 1183, 831, 1079, 740, 154, 667, 1079,
	1182, 1181, 631, 1180, 894, 1179, 637, 1178, 996, 999,
	995, 1048, 1049, 1050, 1051, 683, 1052, 1177, 776, 780,
	1176, 58, 647, 55, 1175, 1173, 1060, 1582, 1408, 1114,
	653, 654, 655, 1045, 1115, 421, 162, 156, 1154, 1062,
	425, 934, 433, 434, 1004, 1005, 1289, 41, 1111, 1055,
	1040, 638, 488, 1085, 1068, 1086, 487, 1071, 220, 1074,
	1075, 222, 1101, 1038, 1039, 1082, 740, 1083, 1194, 1195,
	1196, 538, 691, 740, 691, 1552, 1070, 1054, 1375, 1057,
	1058, 759, 760, 752, 753, 754, 755, 756, 757, 758,
	751, 1109, 1167, 762, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 1879, 733, 1072, 1418, 937, 958, 1366, 38, 719,
	775, 777, 778, 779, 783, 857, 933, 420, 1094, 1153,
	483, 788, 788, 788, 788, 788, 788, 788, 682, 39,
	421, 40, 949, 951, 952, 432, 653, 441, 856, 1190,
	950, 421, 421, 483, 36, 37, 960, 801, 802, 803,
	804, 805, 806, 807, 808, 1364, 811, 1362, 813, 814,
	815, 816, 818, 818, 818, 818, 818, 818, 818, 1189,
	834, 835, 836, 837, 964, 1158, 1365, 843, 1364, 644,
	645, 1495, 1200, 1631, 483, 1208, 1209, 30, 962, 963,
	961, 440, 878, 1211, 877, 847, 738, 737, 509, 1365,
	507, 506, 1215, 1216, 479, 432, 1422, 959, 797, 1079,
	798, 1657, 267, 35, 739, 1630, 985, 270, 986, 1424,
	1214, 683, 538, 35, 581, 997, 579, 583, 584, 585,
	586, 35, 1223, 1080, 582, 587, 798, 1174, 1239, 653,
	873, 500, 1227, 447, 1245, 169, 432, 691, 1286, 35,
	41, 35, 1247, 1248, 1171, 1249, 1250, 1192, 1254, 987,
	1242, 1419, 903, 741, 1002, 1901, 1900, 903, 1899, 1306,
	1260, 1332, 1333, 1334, 665, 688, 1341, 1252, 1886, 1300,
	1842, 741, 741, 688, 1240, 1347, 1154, 1154, 1347, 1154,
	1154, 538, 538, 1264, 622, 1277, 1299, 1358, 1269, 788,
	788, 1361, 788, 788, 788, 788, 788, 788, 788, 788,
	788, 788, 788, 788, 788, 788, 788, 1270, 1060, 538,
	1272, 1288, 1266, 621, 1271, 740, 620, 1267, 1268, 1287,
	888, 1261, 588, 691, 682, 1864, 741, 1290, 619, 783,
	1381, 1252, 1803, 1431, 783, 718, 1734, 36, 37, 1360,
	548, 54, 57, 438, 1302, 1303, 1304, 1345, 1308, 1343,
	1594, 741, 139, 761, 718, 1643, 1276, 1348, 1349, 1350,
	1351, 1352, 718, 1642, 1807, 741, 1259, 1379, 1380, 903,
	1565, 718, 1519, 1412, 1815, 1591, 1384, 1768, 1407, 1353,
	1354, 1252, 1518, 1377, 57, 690, 1061, 1515, 1514, 1258,
	57, 1367, 1368, 1369, 1370, 1371, 701, 718, 1509, 1274,
	1278, 1387, 1420, 1421, 1423, 1425, 1426, 1382, 718, 1508,
	1670, 1397, 1759, 1395, 959, 1394, 1084, 1760, 1399, 718,
	1432, 1592, 1444, 1590, 1220, 1221, 1686, 1222, 1590, 267,
	1401, 1089, 1225, 718, 1383, 1102, 1458, 432, 690, 1073,
	741, 1413, 1252, 1251, 1228, 1229, 1594, 1461, 1230, 1231,
	1088, 1232, 1233, 1463, 1344, 1593, 1496, 1429, 1768, 1435,
	1430, 1451, 1462, 718, 1191, 57, 1455, 1087, 1347, 57,
	1893, 57, 57, 1504, 1504, 1445, 538, 538, 57, 1443,
	272, 1594, 272, 57, 1292, 1469, 1252, 57, 718, 1096,
	432, 1465, 903, 1095, 1436, 1385, 993, 741, 903, 1063,
	788, 788, 788, 718, 943, 718, 717, 788, 788, 788,
	788, 1599, 1602, 1603, 1604, 1600, 1670, 1601, 1605, 676,
	675, 1772, 1773, 1494, 57, 669, 670, 888, 477, 669,
	668, 1506, 69, 68, 1505, 1152, 1238, 1069, 522, 1447,
	882, 858, 851, 848, 904, 673, 1236, 662, 1084, 267,
	661, 657, 521, 1768, 788, 522, 1860, 993, 1594, 1252,
	690, 1716, 1619, 1477, 1073, 1559, 1442, 1073, 57, 1219,
	903, 1073, 57, 57, 1510, 1511, 1524, 1433, 522, 718,
	846, 1437, 674, 1525, 1237, 1526, 1527, 1516, 1517, 1529,
	1530, 1532, 1534, 1536, 1235, 432, 1544, 1545, 1616, 1543,
	77, 705, 678, 677, 267, 1468, 1837, 1835, 1798, 1583,
	1537, 1629, 432, 1772, 1773, 1557, 1658, 1547, 1549, 1550,
	1551, 1562, 1571, 213, 1512, 1356, 1566, 1580, 1355, 1572,
	1275, 243, 1188, 538, 1645, 1187, 1160, 1091, 688, 1090,
	1067, 940, 907, 1579, 884, 1588, 839, 1635, 691, 1815,
	734, 741, 1606, 1615, 1618, 53, 691, 1620, 686, 1466,
	685, 652, 651, 649, 1633, 632, 549, 32, 512, 238,
	1386, 453, 449, 418, 236, 59, 245, 246, 1637, 1573,
	230, 229, 218, 11, 527, 1646, 1166, 1520, 1775, 1255,
	679, 1342, 513, 1636, 250, 249, 750, 749, 759, 760,
	752, 753, 754, 755, 756, 757, 758, 751, 155, 58,
	762, 55, 149, 1542, 989, 1691, 1778, 59, 1777, 58,
	1698, 55, 1697, 59, 1701, 32, 1887, 1656, 1849, 1702,
	868, 1644, 1668, 1463, 1561, 1568, 1563, 1685, 1676, 812,
	267, 417, 1675, 1280, 1659, 1699, 1660, 1664, 267, 1678,
	1700, 788, 788, 1106, 1107, 1060, 1692, 1474, 1281, 1695,
	1703, 1712, 1603, 1604, 1632, 1704, 1714, 1586, 1587, 494,
	1687, 688, 1693, 1694, 635, 1696, 1858, 1725, 477, 1060,
	1715, 788, 788, 788, 788, 1599, 1602, 1603, 1604, 1600,
	1634, 1601, 1605, 930, 931, 1706, 38, 408, 59, 1724,
	1723, 1746, 59, 264, 59, 59, 38, 1481, 1110, 1427,
	634, 59, 1220, 271, 520, 59, 59, 39, 518, 40,
	59, 416, 1042, 1648, 516, 995, 158, 39, 1103, 40,
	1713, 1104, 1785, 1735, 1507, 477, 57, 1047, 1738, 1739,
	1740, 1741, 1742, 901, 57, 688, 1776, 1767, 695, 542,
	1475, 1753, 1098, 1856, 1663, 1556, 1099, 59, 58, 1752,
	55, 59, 888, 1521, 1787, 1855, 1666, 1765, 267, 1809,
	1667, 1274, 1793, 1500, 1499, 1764, 688, 1766, 1498, 1297,
	989, 1691, 1816, 1825, 1785, 1497, 1806, 1684, 1826, 989,
	1691, 553, 1688, 1415, 1414, 1819, 259, 260, 261, 1761,
	1186, 59, 1829, 1461, 1513, 59, 59, 1828, 1463, 1463,
	1832, 1564, 1908, 1812, 1813, 1567, 541, 540, 1462, 1060,
	1804, 1438, 1185, 1811, 443, 688, 890, 892, 1474, 1589,
	1786, 1799, 707, 906, 788, 8, 1805, 1, 41, 1309,
	13, 1848, 12, 1748, 1853, 38, 1732, 1733, 41, 1736,
	1859, 252, 1538, 1212, 795, 1830, 701, 1831, 576, 701,
	701, 701, 1729, 1884, 164, 1867, 39, 1639, 40, 1868,
	562, 1883, 1841, 1870, 1478, 1305, 866, 866, 866, 1821,
	761, 1335, 1376, 478, 192, 1825, 1897, 1257, 1889, 450,
	1826, 1892, 15, 1896, 1852, 1819, 1448, 1291, 1649, 694,
	477, 519, 57, 1359, 1898, 58, 912, 1614, 1861, 1862,
	1863, 1905, 720, 175, 165, 57, 1866, 713, 1909, 1869,
	411, 1608, 1880, 1881, 1882, 1911, 688, 29, 1819, 989,
	1691, 1914, 1912, 10, 1172, 36, 37, 176, 174, 1665,
	173, 172, 1474, 170, 481, 36, 37, 1474, 1474, 1474,
	1474, 1474, 210, 215, 239, 76, 74, 1453, 688, 1454,
	75, 1474, 1297, 79, 1483, 1628, 528, 416, 1902, 1903,
	1904, 1076, 774, 1788, 788, 1490, 1822, 788, 1283, 788,
	1894, 788, 1854, 788, 788, 1808, 1241, 41, 1043, 563,
	948, 575, 38, 690, 574, 1148, 1137, 1136, 1915, 573,
	1758, 54, 897, 1501, 898, 899, 900, 1138, 743, 1473,
	1584, 59, 1910, 39, 1598, 40, 1596, 896, 1595, 1774,
	1139, 1770, 272, 1474, 866, 866, 1737, 1472, 866, 866,
	866, 1539, 1743, 1105, 54, 1475, 1446, 1145, 1135, 1474,
	1475, 1475, 1475, 1475, 1475, 1751, 889, 1108, 5, 1147,
	1130, 4, 3, 1129, 1608, 1128, 1711, 866, 866, 866,
	866, 1127, 550, 1126, 1124, 1388, 1125, 1122, 59, 59,
	1123, 1121, 1100, 689, 2, 1457, 0, 59, 0, 0,
	633, 0, 416, 866, 36, 37, 52, 0, 55, 416,
	750, 749, 759, 760, 752, 753, 754, 755, 756, 757,
	758, 751, 0, 0, 762, 0, 0, 477, 0, 0,
	1796, 1797, 0, 0, 1297, 1576, 1475, 0, 1297, 1454,
	0, 0, 0, 0, 0, 0, 1132, 1453, 1762, 1763,
	0, 0, 1475, 0, 41, 0, 1144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1150, 1151, 0,
	0, 0, 0, 0, 0, 455, 0, 1146, 52, 691,
	457, 458, 459, 461, 51, 1453, 0, 0, 0, 464,
	462, 472, 473, 38, 0, 0, 0, 34, 0, 0,
	0, 0, 0, 742, 0, 0, 1140, 1141, 1143, 784,
	0, 0, 1142, 0, 39, 0, 40, 0, 0, 0,
	0, 0, 35, 1298, 33, 0, 1820, 460, 691, 0,
	0, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1206, 0, 0, 1838, 1839, 1840,
	810, 36, 37, 59, 0, 59, 0, 0, 1673, 0,
	0, 0, 0, 1297, 0, 38, 1576, 0, 59, 750,
	749, 759, 760, 752, 753, 754, 755, 756, 757, 758,
	751, 0, 841, 762, 866, 0, 39, 0, 40, 0,
	1246, 202, 690, 0, 1148, 1137, 1136, 205, 206, 0,
	0, 0, 0, 0, 864, 0, 1138, 0, 0, 38,
	0, 0, 0, 0, 0, 0, 866, 0, 1576, 1139,
	0, 0, 193, 0, 272, 0, 1820, 866, 0, 1895,
	39, 34, 40, 477, 0, 41, 0, 200, 0, 188,
	0, 0, 0, 0, 0, 0, 0, 189, 0, 1149,
	0, 0, 0, 0, 1159, 0, 35, 1454, 1157, 1820,
	0, 691, 0, 1673, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 416, 787, 789, 790,
	791, 792, 793, 794, 941, 1156, 0, 0, 946, 947,
	0, 0, 0, 0, 761, 57, 0, 466, 471, 1456,
	0, 0, 0, 0, 1155, 0, 196, 41, 191, 201,
	1453, 0, 0, 0, 0, 0, 198, 197, 850, 458,
	459, 461, 0, 0, 0, 1132, 0, 464, 462, 472,
	473, 0, 36, 37, 784, 1144, 0, 0, 0, 784,
	0, 0, 26, 38, 0, 0, 1150, 1151, 0, 0,
	468, 41, 470, 469, 1006, 1037, 1146, 0, 0, 0,
	59, 0, 0, 0, 39, 460, 40, 476, 475, 0,
	690, 0, 1148, 1137, 1136, 0, 1576, 0, 0, 0,
	0, 0, 0, 32, 1138, 1140, 1141, 1143, 0, 0,
	826, 1142, 0, 0, 1297, 1066, 21, 1139, 16, 1612,
	0, 0, 1298, 0, 36, 37, 690, 0, 1148, 1137,
	1136, 17, 0, 24, 0, 0, 0, 0, 0, 0,
	1138, 0, 0, 0, 0, 828, 0, 1535, 741, 0,
	1673, 18, 19, 1139, 0, 58, 0, 1614, 0, 0,
	1454, 0, 0, 0, 0, 0, 57, 57, 36, 37,
	0, 194, 1726, 761, 0, 953, 0, 195, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 750, 749, 759, 760, 752, 753, 754,
	755, 756, 757, 758, 751, 41, 0, 762, 1681, 0,
	0, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 0, 0, 1132, 0, 0, 0, 0, 0, 0,
	0, 0, 829, 1144, 0, 0, 0, 0, 0, 0,
	80, 827, 38, 59, 1150, 1151, 833, 832, 1149, 0,
	203, 0, 204, 0, 1146, 466, 471, 1610, 0, 1132,
	14, 0, 0, 39, 1210, 40, 0, 34, 0, 1144,
	0, 0, 0, 0, 57, 0, 199, 271, 0, 0,
	1150, 1151, 0, 1140, 1141, 1143, 59, 0, 0, 1142,
	1146, 0, 35, 0, 33, 0, 0, 0, 1857, 0,
	0, 0, 36, 37, 0, 0, 0, 0, 468, 866,
	470, 469, 0, 0, 0, 0, 1244, 0, 0, 1140,
	1141, 1143, 0, 0, 0, 1142, 0, 0, 57, 57,
	0, 0, 1253, 0, 0, 0, 0, 0, 57, 1613,
	0, 0, 0, 0, 81, 20, 0, 0, 59, 0,
	32, 32, 32, 32, 32, 32, 0, 22, 23, 0,
	25, 0, 103, 0, 0, 186, 0, 0, 0, 1282,
	1285, 178, 0, 177, 0, 181, 182, 185, 0, 38,
	0, 179, 187, 0, 41, 1295, 1197, 1198, 1199, 0,
	35, 0, 0, 0, 1201, 1202, 1203, 0, 0, 0,
	39, 0, 40, 1301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 810, 0, 1662,
	0, 0, 0, 0, 0, 0, 1149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	787, 0, 0, 0, 0, 0, 0, 0, 57, 88,
	0, 853, 57, 57, 0, 0, 54, 57, 57, 57,
	57, 57, 1149, 0, 0, 0, 0, 0, 0, 1705,
	0, 57, 0, 0, 0, 1613, 1680, 761, 0, 0,
	0, 36, 37, 0, 104, 0, 0, 0, 0, 0,
	1398, 0, 690, 0, 1148, 1137, 1136, 0, 0, 59,
	59, 0, 0, 0, 416, 0, 1138, 0, 183, 0,
	57, 0, 1680, 0, 1409, 0, 0, 0, 0, 1139,
	0, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 32, 0, 1434, 0, 0, 0, 57,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	0, 131, 132, 1450, 133, 134, 135, 137, 136, 105,
	106, 107, 111, 109, 108, 110, 82, 84, 0, 80,
	83, 89, 85, 86, 87, 101, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 102, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 59, 0, 0,
	0, 852, 784, 784, 0, 0, 915, 0, 36, 37,
	927, 180, 54, 0, 416, 1132, 0, 0, 915, 0,
	917, 54, 927, 0, 0, 1144, 1533, 1389, 1390, 0,
	0, 0, 917, 0, 0, 0, 1150, 1151, 0, 0,
	0, 0, 0, 0, 0, 0, 1146, 0, 0, 0,
	0, 59, 59, 0, 0, 0, 0, 1402, 1403, 1404,
	1405, 59, 59, 0, 0, 0, 0, 741, 0, 416,
	0, 1541, 0, 81, 0, 1140, 1141, 1143, 0, 0,
	0, 1142, 0, 690, 0, 1148, 1137, 1136, 0, 0,
	0, 0, 1298, 0, 1613, 0, 916, 1138, 0, 0,
	0, 1569, 1570, 1285, 0, 0, 0, 0, 916, 0,
	1139, 0, 750, 749, 759, 760, 752, 753, 754, 755,
	756, 757, 758, 751, 0, 0, 762, 0, 0, 0,
	0, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	0, 0, 59, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 690, 0, 1148, 1137, 1136, 0, 0, 0,
	0, 54, 0, 0, 0, 0, 1138, 0, 0, 0,
	0, 59, 0, 0, 0, 59, 59, 0, 0, 1139,
	59, 59, 59, 59, 59, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 59, 0, 0, 0, 59, 0,
	0, 0, 0, 0, 0, 416, 0, 0, 0, 0,
	1522, 0, 0, 416, 0, 0, 1132, 0, 1149, 0,
	0, 0, 0, 0, 0, 0, 1144, 0, 0, 0,
	0, 0, 0, 59, 0, 1671, 0, 1150, 1151, 0,
	0, 0, 0, 0, 0, 0, 0, 1146, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1674, 0,
	0, 0, 59, 0, 0, 0, 1140, 1141, 1143, 0,
	0, 0, 1142, 0, 0, 1132, 0, 1722, 0, 0,
	0, 0, 0, 1298, 0, 1144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 913, 1150, 1151, 0, 0,
	0, 0, 0, 0, 0, 0, 1146, 1168, 0, 0,
	0, 0, 1531, 741, 1750, 0, 0, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 0, 0, 1756, 0,
	1757, 0, 0, 0, 0, 1140, 1141, 1143, 1827, 0,
	1650, 1142, 0, 1651, 0, 1652, 0, 1653, 0, 1654,
	1655, 0, 0, 0, 0, 0, 0, 0, 750, 749,
	759, 760, 752, 753, 754, 755, 756, 757, 758, 751,
	0, 0, 762, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 761, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 0, 1149,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	1833, 0, 0, 1834, 0, 0, 1836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1827, 389, 378, 1846, 337, 391, 305, 325, 400, 327,
	328, 363, 284, 346, 0, 322, 303, 0, 1750, 1296,
	308, 277, 317, 278, 306, 339, 0, 304, 0, 380,
	349, 784, 0, 0, 398, 0, 354, 0, 1149, 0,
	0, 0, 341, 382, 344, 373, 336, 364, 293, 353,
	393, 323, 359, 394, 0, 0, 0, 35, 0, 0,
	0, 0, 0, 0, 0, 0, 1888, 784, 0, 358,
	388, 319, 290, 403, 0, 362, 276, 356, 0, 0,
	282, 285, 399, 386, 313, 312, 0, 0, 1575, 0,
	0, 0, 0, 340, 345, 369, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 352, 0, 0, 0, 289, 283, 0, 338, 826,
	0, 0, 292, 0, 310, 370, 0, 273, 376, 383,
	335, 0, 0, 387, 332, 331, 0, 0, 0, 0,
	0, 0, 324, 269, 38, 401, 390, 342, 381, 307,
	318, 0, 314, 0, 828, 0, 315, 316, 351, 365,
	0, 0, 0, 0, 0, 39, 372, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	274, 311, 374, 377, 297, 361, 286, 320, 367, 321,
	343, 302, 761, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	0, 131, 132, 0, 133, 134, 135, 137, 136, 0,
	981, 829, 0, 0, 0, 0, 0, 1492, 0, 80,
	827, 0, 0, 0, 0, 833, 832, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 41, 280, 301, 384,
	0, 0, 0, 0, 1493, 1491, 1487, 1486, 0, 0,
	0, 0, 360, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	300, 294, 295, 347, 348, 395, 396, 397, 371, 291,
	0, 298, 299, 0, 379, 0, 0, 0, 350, 0,
	0, 0, 402, 81, 0, 0, 0, 0, 0, 0,
	326, 275, 330, 0, 0, 0, 0, 0, 0, 0,
	287, 288, 0, 0, 334, 329, 355, 357, 366, 375,
	385, 392, 368, 36, 37, 389, 378, 0, 337, 391,
	305, 325, 400, 327, 328, 363, 284, 346, 0, 322,
	303, 0, 0, 0, 308, 277, 317, 278, 306, 339,
	0, 304, 0, 380, 349, 0, 0, 0, 398, 0,
	354, 0, 0, 0, 0, 0, 341, 382, 344, 373,
	336, 364, 293, 353, 393, 323, 359, 394, 0, 0,
	0, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 358, 388, 319, 290, 403, 0, 362,
	276, 356, 0, 0, 282, 285, 399, 386, 313, 312,
	0, 0, 0, 0, 0, 0, 0, 340, 345, 369,
	333, 0, 0, 0, 0, 0, 0, 1396, 0, 0,
	0, 0, 0, 309, 0, 352, 0, 0, 0, 289,
	283, 0, 338, 0, 0, 0, 292, 0, 310, 370,
	0, 273, 376, 383, 335, 0, 0, 387, 332, 331,
	0, 0, 1010, 0, 0, 0, 324, 269, 38, 401,
	390, 342, 381, 307, 318, 0, 314, 0, 0, 0,
	315, 316, 351, 365, 690, 0, 1148, 1137, 1136, 39,
	372, 40, 0, 0, 0, 0, 0, 0, 1138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1139, 0, 281, 274, 311, 374, 377, 297, 361,
	286, 320, 367, 321, 343, 302, 0, 0, 1019, 1025,
	1023, 0, 0, 1020, 0, 0, 1018, 0, 1621, 1027,
	0, 0, 1026, 1012, 1022, 1024, 1021, 1016, 0, 1011,
	0, 1029, 1028, 1030, 1009, 1032, 0, 0, 0, 1036,
	1033, 1035, 1034, 0, 1031, 0, 1754, 1755, 0, 0,
	0, 1492, 0, 1013, 1014, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1015, 1017, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	41, 280, 301, 384, 0, 0, 0, 1132, 1493, 1491,
	0, 0, 0, 0, 0, 0, 360, 1144, 0, 0,
	0, 1489, 0, 0, 0, 0, 0, 0, 1150, 1151,
	0, 0, 0, 0, 0, 0, 0, 0, 1146, 0,
	0, 0, 0, 296, 300, 294, 295, 347, 348, 395,
	396, 397, 371, 291, 0, 298, 299, 0, 379, 0,
	0, 0, 350, 0, 0, 0, 402, 1140, 1141, 1143,
	0, 0, 0, 1142, 326, 275, 330, 0, 0, 0,
	0, 0, 0, 0, 287, 288, 0, 0, 334, 329,
	355, 357, 366, 375, 385, 392, 368, 36, 37, 389,
	378, 0, 337, 391, 305, 325, 400, 327, 328, 363,
	284, 346, 0, 322, 303, 0, 0, 0, 308, 277,
	317, 278, 306, 339, 0, 304, 0, 380, 349, 0,
	0, 0, 398, 0, 354, 0, 0, 0, 0, 0,
	341, 382, 344, 373, 336, 364, 293, 353, 393, 323,
	359, 394, 0, 0, 0, 35, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 388, 319,
	290, 403, 0, 362, 276, 356, 0, 0, 282, 285,
	399, 386, 313, 312, 0, 0, 0, 0, 0, 0,
	0, 340, 345, 369, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 309, 0, 352,
	1149, 0, 0, 289, 283, 0, 338, 0, 0, 0,
	292, 0, 310, 370, 0, 273, 376, 383, 335, 0,
	0, 387, 332, 331, 0, 0, 0, 0, 0, 0,
	324, 269, 38, 401, 390, 342, 381, 307, 318, 0,
	314, 0, 0, 0, 315, 316, 351, 365, 690, 0,
	1148, 1137, 1136, 39, 372, 40, 0, 0, 0, 0,
	0, 0, 1138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1139, 0, 281, 274, 311,
	374, 377, 297, 361, 286, 320, 367, 321, 343, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1890, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 41, 280, 301, 384, 0, 0,
	0, 1132, 1493, 1491, 0, 0, 0, 0, 0, 0,
	360, 1144, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 1150, 1151, 0, 0, 0, 0, 0, 0,
	0, 0, 1146, 0, 0, 0, 0, 296, 300, 294,
	295, 347, 348, 395, 396, 397, 371, 291, 0, 298,
	299, 0, 379, 0, 0, 0, 350, 0, 0, 0,
	402, 1140, 1141, 1143, 0, 0, 0, 1142, 326, 275,
	330, 0, 0, 0, 0, 0, 0, 0, 287, 288,
	0, 0, 334, 329, 355, 357, 366, 375, 385, 392,
	368, 36, 37, 389, 378, 0, 337, 391, 305, 325,
	400, 327, 328, 363, 284, 346, 0, 322, 303, 0,
	0, 0, 308, 277, 317, 278, 306, 339, 0, 304,
	0, 380, 349, 0, 103, 0, 398, 0, 354, 0,
	0, 0, 0, 0, 341, 382, 344, 373, 336, 364,
	293, 353, 393, 323, 359, 394, 0, 0, 0, 52,
	0, 55, 35, 0, 0, 0, 0, 0, 0, 0,
	0, 358, 388, 319, 290, 403, 0, 362, 276, 356,
	0, 0, 282, 285, 399, 386, 313, 312, 0, 0,
	0, 0, 0, 0, 0, 340, 345, 369, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1265,
	0, 309, 0, 352, 1149, 0, 0, 289, 283, 0,
	338, 88, 0, 0, 292, 0, 310, 370, 0, 273,
	376, 383, 335, 0, 0, 387, 332, 331, 0, 0,
	0, 0, 0, 0, 324, 269, 38, 401, 390, 342,
	381, 307, 318, 0, 314, 0, 104, 0, 315, 316,
	351, 365, 0, 0, 0, 0, 0, 39, 372, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 274, 311, 374, 377, 297, 361, 286, 320,
	367, 321, 343, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 0, 131, 132, 0, 133, 134, 135, 137,
	136, 105, 106, 107, 111, 109, 108, 110, 82, 84,
	0, 80, 83, 89, 85, 86, 87, 101, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 102,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 41, 280,
	301, 384, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 0, 360, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 300, 294, 295, 347, 348, 395, 396, 397,
	371, 291, 0, 298, 299, 0, 379, 0, 0, 0,
	350, 0, 0, 0, 402, 81, 0, 0, 0, 0,
	0, 0, 326, 275, 330, 0, 0, 0, 0, 0,
	0, 0, 287, 288, 0, 0, 334, 329, 355, 357,
	366, 375, 385, 392, 368, 36, 37, 389, 378, 0,
	337, 391, 305, 325, 400, 327, 328, 363, 284, 346,
	0, 322, 303, 0, 0, 0, 308, 277, 317, 278,
	306, 339, 0, 304, 0, 380, 349, 0, 0, 0,
	398, 0, 354, 0, 0, 0, 0, 0, 341, 382,
	344, 373, 336, 364, 293, 353, 393, 323, 359, 394,
	0, 0, 0, 35, 0, 715, 0, 716, 0, 0,
	0, 0, 0, 0, 0, 358, 388, 319, 290, 403,
	0, 362, 276, 356, 0, 0, 282, 285, 399, 386,
	313, 312, 0, 0, 0, 0, 0, 0, 0, 340,
	345, 369, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 309, 0, 352, 0, 0,
	0, 289, 283, 0, 338, 0, 0, 0, 292, 0,
	310, 370, 0, 273, 376, 383, 335, 0, 0, 387,
	332, 331, 0, 0, 0, 0, 0, 0, 324, 269,
	38, 401, 390, 342, 381, 307, 318, 0, 314, 0,
	0, 0, 315, 316, 351, 365, 690, 0, 1148, 1137,
	1136, 39, 372, 40, 0, 0, 0, 0, 0, 0,
	1138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1139, 0, 281, 274, 311, 374, 377,
	297, 361, 286, 320, 367, 321, 343, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1885, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 41, 280, 301, 384, 0, 0, 0, 1132,
	0, 268, 0, 0, 0, 0, 0, 0, 360, 1144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1150, 1151, 0, 0, 0, 0, 0, 0, 0, 0,
	1146, 0, 0, 0, 0, 296, 300, 294, 295, 347,
	348, 395, 396, 397, 371, 291, 0, 298, 299, 0,
	379, 0, 0, 0, 350, 0, 0, 0, 402, 1140,
	1141, 1143, 0, 0, 0, 1142, 326, 275, 330, 0,
	0, 0, 0, 0, 0, 0, 287, 288, 0, 0,
	334, 329, 355, 357, 366, 375, 385, 392, 368, 36,
	37, 389, 378, 0, 337, 391, 305, 325, 400, 327,
	328, 363, 284, 346, 0, 322, 303, 0, 0, 0,
	308, 277, 317, 278, 306, 339, 0, 304, 0, 380,
	349, 0, 0, 0, 398, 0, 354, 0, 0, 0,
	0, 0, 341, 382, 344, 373, 336, 364, 293, 353,
	393, 323, 359, 394, 0, 412, 0, 35, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 0, 358,
	388, 319, 290, 403, 0, 362, 276, 356, 0, 0,
	282, 285, 399, 386, 313, 312, 0, 0, 0, 0,
	0, 0, 0, 340, 345, 369, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 352, 1149, 0, 0, 289, 283, 0, 338, 0,
	0, 0, 292, 0, 310, 370, 0, 273, 376, 383,
	335, 0, 0, 387, 332, 331, 0, 0, 0, 0,
	0, 0, 324, 269, 38, 401, 390, 342, 381, 307,
	318, 0, 314, 0, 0, 0, 315, 316, 351, 365,
	690, 0, 1148, 1137, 1136, 39, 372, 40, 0, 0,
	0, 0, 0, 0, 1138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1139, 0, 281,
	274, 311, 374, 377, 297, 361, 286, 320, 367, 321,
	343, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1672, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 41, 280, 301, 384,
	0, 0, 0, 1132, 0, 268, 0, 0, 0, 0,
	0, 0, 360, 1144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1150, 1151, 0, 0, 0, 0,
	0, 0, 0, 0, 1146, 0, 0, 0, 0, 296,
	300, 294, 295, 347, 348, 395, 396, 397, 371, 291,
	0, 298, 299, 0, 379, 0, 0, 0, 350, 0,
	0, 0, 402, 1140, 1141, 1143, 0, 0, 0, 1142,
	326, 275, 330, 0, 0, 0, 0, 0, 0, 0,
	287, 288, 0, 0, 334, 329, 355, 357, 366, 375,
	385, 392, 368, 36, 37, 389, 378, 0, 337, 391,
	305, 325, 400, 327, 328, 363, 284, 346, 0, 322,
	303, 0, 0, 0, 308, 277, 317, 278, 306, 339,
	0, 304, 0, 380, 349, 0, 0, 0, 398, 0,
	354, 0, 0, 0, 0, 0, 341, 382, 344, 373,
	336, 364, 293, 353, 393, 323, 359, 394, 0, 0,
	0, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 358, 388, 319, 290, 403, 0, 362,
	276, 356, 0, 0, 282, 285, 399, 386, 313, 312,
	0, 0, 0, 0, 0, 0, 0, 340, 345, 369,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1560, 0, 309, 0, 352, 1149, 0, 0, 289,
	283, 0, 338, 0, 0, 0, 292, 0, 310, 370,
	0, 273, 376, 383, 335, 0, 0, 387, 332, 331,
	0, 0, 0, 0, 0, 0, 324, 269, 38, 401,
	390, 342, 381, 307, 318, 0, 314, 0, 0, 0,
	315, 316, 351, 365, 690, 0, 1148, 1137, 1136, 39,
	372, 40, 0, 0, 0, 0, 0, 0, 1138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1139, 0, 281, 274, 311, 374, 377, 297, 361,
	286, 320, 367, 321, 343, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	41, 280, 301, 384, 0, 0, 0, 1132, 0, 268,
	0, 0, 0, 0, 0, 0, 360, 1144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1150, 1151,
	0, 0, 0, 0, 0, 0, 0, 0, 1146, 0,
	0, 0, 0, 296, 300, 294, 295, 347, 348, 395,
	396, 397, 371, 291, 0, 298, 299, 0, 379, 0,
	0, 0, 350, 0, 0, 0, 402, 1140, 1141, 1143,
	0, 0, 0, 1142, 326, 275, 330, 0, 0, 0,
	0, 0, 0, 0, 287, 288, 0, 0, 334, 329,
	355, 357, 366, 375, 385, 392, 368, 36, 37, 389,
	378, 0, 337, 391, 305, 325, 400, 327, 328, 363,
	284, 346, 0, 322, 303, 0, 0, 0, 308, 277,
	317, 278, 306, 339, 0, 304, 0, 380, 349, 0,
	0, 0, 398, 0, 354, 0, 0, 0, 0, 0,
	341, 382, 344, 373, 336, 364, 293, 353, 393, 323,
	359, 394, 0, 0, 0, 52, 0, 55, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 388, 319,
	290, 403, 0, 362, 276, 356, 0, 0, 282, 285,
	399, 386, 313, 312, 0, 0, 0, 0, 0, 0,
	0, 340, 345, 369, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 309, 0, 352,
	1149, 0, 0, 289, 283, 0, 338, 0, 0, 0,
	292, 0, 310, 370, 0, 273, 376, 383, 335, 0,
	0, 387, 332, 331, 0, 0, 0, 0, 0, 0,
	324, 269, 38, 401, 390, 342, 381, 307, 318, 0,
	314, 0, 0, 0, 315, 316, 351, 365, 690, 0,
	1148, 1137, 1136, 39, 372, 40, 0, 0, 0, 0,
	0, 0, 1138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1139, 0, 281, 274, 311,
	374, 377, 297, 361, 286, 320, 367, 321, 343, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 41, 280, 301, 384, 0, 0,
	0, 1132, 0, 268, 0, 0, 0, 0, 0, 0,
	360, 1144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1150, 1151, 0, 0, 0, 0, 0, 0,
	0, 0, 1146, 0, 0, 0, 0, 296, 300, 294,
	295, 347, 348, 395, 396, 397, 371, 291, 0, 298,
	299, 0, 379, 0, 0, 0, 350, 0, 0, 0,
	402, 1140, 1141, 1143, 0, 0, 0, 1142, 326, 275,
	330, 0, 0, 0, 0, 0, 0, 0, 287, 288,
	0, 0, 334, 329, 355, 357, 366, 375, 385, 392,
	368, 36, 37, 389, 378, 0, 337, 391, 305, 325,
	400, 327, 328, 363, 284, 346, 0, 322, 303, 0,
	0, 0, 308, 277, 317, 278, 306, 339, 0, 304,
	0, 380, 349, 0, 0, 0, 398, 0, 354, 0,
	0, 0, 0, 0, 341, 382, 344, 373, 336, 364,
	293, 353, 393, 323, 359, 394, 0, 0, 0, 35,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 358, 388, 319, 290, 403, 0, 362, 276, 356,
	0, 0, 282, 285, 399, 386, 313, 312, 533, 0,
	0, 0, 0, 0, 0, 340, 345, 369, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 309, 0, 352, 1149, 0, 0, 289, 283, 0,
	338, 0, 0, 0, 292, 0, 310, 370, 0, 273,
	376, 383, 335, 0, 0, 387, 332, 331, 0, 0,
	0, 0, 0, 0, 324, 269, 38, 401, 390, 342,
	381, 307, 318, 0, 314, 0, 0, 0, 315, 316,
	351, 365, 0, 0, 0, 0, 0, 39, 372, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 274, 311, 374, 377, 297, 361, 286, 320,
	367, 321, 343, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 41, 280,
	301, 384, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 0, 360, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 300, 294, 295, 347, 348, 395, 396, 397,
	371, 291, 0, 298, 299, 0, 379, 0, 0, 0,
	350, 0, 0, 0, 402, 0, 0, 0, 0, 0,
	0, 0, 326, 275, 330, 0, 0, 0, 0, 0,
	0, 0, 287, 288, 0, 0, 334, 329, 355, 357,
	366, 375, 385, 392, 368, 36, 37, 389, 378, 0,
	337, 391, 305, 325, 400, 327, 328, 363, 284, 346,
	0, 322, 303, 0, 0, 0, 308, 277, 317, 278,
	306, 339, 0, 304, 0, 380, 349, 0, 0, 0,
	398, 0, 354, 0, 0, 0, 0, 0, 341, 382,
	344, 373, 336, 364, 293, 353, 393, 323, 359, 394,
	0, 0, 0, 35, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 358, 388, 319, 290, 403,
	0, 362, 276, 356, 0, 0, 282, 285, 399, 386,
	313, 312, 0, 0, 0, 0, 0, 0, 0, 340,
	345, 369, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 309, 0, 352, 0, 0,
	0, 289, 283, 0, 338, 0, 0, 0, 292, 0,
	310, 370, 0, 273, 376, 383, 335, 0, 0, 387,
	332, 331, 0, 0, 0, 0, 0, 0, 324, 269,
	38, 401, 390, 342, 381, 307, 318, 0, 314, 0,
	0, 0, 315, 316, 351, 365, 0, 0, 0, 0,
	0, 39, 372, 40, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 274, 311, 374, 377,
	297, 361, 286, 320, 367, 321, 343, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 41, 280, 301, 384, 0, 0, 0, 0,
	0, 268, 0, 0, 0, 0, 0, 0, 360, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 300, 294, 295, 347,
	348, 395, 396, 397, 371, 291, 0, 298, 299, 0,
	379, 0, 0, 0, 350, 0, 0, 0, 402, 0,
	0, 0, 0, 0, 0, 0, 326, 275, 330, 0,
	0, 0, 0, 0, 0, 0, 287, 288, 0, 0,
	334, 329, 355, 357, 366, 375, 385, 392, 368, 36,
	37, 389, 1824, 0, 337, 391, 305, 325, 400, 327,
	328, 363, 284, 346, 0, 322, 303, 0, 0, 0,
	308, 277, 317, 278, 306, 339, 0, 304, 0, 380,
	349, 0, 0, 0, 398, 0, 354, 0, 0, 0,
	0, 0, 341, 382, 344, 373, 336, 364, 293, 353,
	393, 323, 359, 394, 432, 0, 0, 35, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	388, 319, 290, 403, 0, 362, 276, 356, 0, 0,
	282, 285, 399, 386, 313, 312, 0, 0, 0, 0,
	0, 0, 0, 340, 345, 369, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 352, 0, 0, 0, 289, 283, 0, 338, 0,
	0, 0, 292, 0, 310, 370, 0, 273, 376, 383,
	335, 0, 0, 387, 332, 331, 0, 0, 0, 0,
	0, 0, 324, 0, 38, 401, 390, 342, 381, 307,
	318, 0, 314, 0, 0, 0, 315, 316, 351, 365,
	0, 0, 0, 0, 0, 39, 372, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	274, 311, 374, 377, 297, 361, 286, 320, 367, 321,
	343, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 41, 280, 301, 384,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 360, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	300, 294, 295, 347, 348, 395, 396, 397, 371, 291,
	0, 298, 299, 0, 379, 0, 0, 0, 350, 0,
	0, 0, 402, 0, 0, 0, 0, 0, 0, 0,
	326, 275, 330, 0, 0, 0, 0, 0, 0, 0,
	287, 288, 0, 0, 334, 329, 355, 357, 366, 375,
	385, 392, 368, 36, 37, 389, 378, 0, 337, 391,
	305, 325, 400, 327, 328, 363, 284, 346, 0, 322,
	303, 0, 0, 0, 308, 277, 317, 278, 306, 339,
	0, 304, 0, 380, 349, 0, 0, 0, 398, 0,
	354, 0, 0, 0, 0, 0, 341, 382, 344, 373,
	336, 364, 293, 353, 393, 323, 359, 394, 0, 0,
	0, 58, 0, 55, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 358, 388, 319, 290, 403, 0, 362,
	276, 356, 0, 0, 282, 285, 399, 386, 313, 312,
	0, 0, 0, 0, 0, 0, 0, 340, 345, 369,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 309, 0, 352, 0, 0, 0, 289,
	283, 0, 338, 0, 0, 0, 292, 0, 310, 370,
	0, 273, 376, 383, 335, 0, 0, 387, 332, 331,
	0, 0, 0, 0, 0, 0, 324, 0, 38, 401,
	390, 342, 381, 307, 318, 0, 314, 0, 0, 0,
	315, 316, 351, 365, 0, 0, 0, 0, 0, 39,
	372, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 274, 311, 374, 377, 297, 361,
	286, 320, 367, 321, 343, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	41, 280, 301, 384, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 296, 300, 294, 295, 347, 348, 395,
	396, 397, 371, 291, 0, 298, 299, 0, 379, 0,
	0, 0, 350, 0, 0, 0, 402, 0, 0, 0,
	0, 0, 0, 0, 326, 275, 330, 0, 0, 0,
	0, 0, 0, 0, 287, 288, 0, 0, 334, 329,
	355, 357, 366, 375, 385, 392, 368, 36, 37, 389,
	378, 0, 337, 391, 305, 325, 400, 327, 328, 363,
	284, 346, 0, 322, 303, 0, 0, 0, 308, 277,
	317, 278, 306, 339, 0, 304, 0, 380, 349, 0,
	0, 0, 398, 0, 354, 0, 0, 0, 0, 0,
	341, 382, 344, 373, 336, 364, 293, 353, 393, 323,
	359, 394, 0, 0, 0, 35, 0, 0, 0, 0,
	0, 0, 690, 0, 1148, 1137, 1136, 358, 388, 319,
	290, 403, 0, 362, 276, 356, 1138, 0, 282, 285,
	399, 386, 313, 312, 0, 0, 0, 0, 0, 1139,
	0, 340, 345, 369, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 309, 0, 352,
	0, 0, 0, 289, 283, 0, 338, 0, 0, 0,
	292, 0, 310, 370, 0, 273, 376, 383, 335, 0,
	0, 387, 332, 331, 0, 738, 737, 0, 0, 0,
	324, 0, 38, 401, 390, 342, 381, 307, 318, 0,
	314, 0, 0, 739, 315, 316, 351, 365, 0, 0,
	0, 0, 0, 39, 372, 40, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 274, 311,
	374, 377, 297, 361, 286, 320, 367, 321, 343, 302,
	0, 0, 0, 0, 0, 1144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1150, 1151, 0, 0,
	0, 0, 0, 0, 0, 0, 1146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1140, 1141, 1143, 0, 0,
	0, 1142, 0, 0, 740, 0, 0, 0, 0, 0,
	0, 0, 1464, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 41, 280, 301, 384, 0, 0,
	0, 0, 0, 690, 0, 1148, 1137, 1136, 0, 0,
	360, 0, 0, 0, 0, 0, 0, 1138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 296, 300, 294,
	295, 347, 348, 395, 396, 397, 371, 291, 0, 298,
	299, 0, 379, 0, 0, 0, 350, 0, 0, 0,
	402, 0, 0, 0, 0, 0, 0, 0, 326, 275,
	330, 0, 0, 0, 0, 0, 556, 0, 287, 288,
	0, 0, 334, 329, 355, 357, 366, 375, 385, 392,
	368, 36, 37, 555, 0, 0, 0, 0, 554, 0,
	0, 0, 0, 0, 0, 600, 0, 601, 1149, 0,
	0, 0, 0, 0, 0, 591, 592, 0, 0, 0,
	0, 0, 0, 0, 0, 432, 0, 0, 52, 581,
	578, 579, 583, 584, 585, 586, 1132, 0, 0, 582,
	587, 472, 473, 557, 0, 0, 1144, 0, 552, 570,
	0, 0, 599, 0, 0, 0, 0, 1150, 1151, 0,
	0, 0, 0, 0, 0, 0, 0, 1146, 0, 0,
	0, 0, 0, 0, 0, 0, 567, 568, 0, 0,
	0, 0, 616, 0, 569, 0, 0, 1008, 566, 571,
	0, 0, 0, 0, 0, 0, 1140, 1141, 1143, 0,
	0, 0, 1142, 0, 0, 0, 614, 0, 0, 0,
	0, 0, 0, 1118, 0, 38, 0, 0, 0, 0,
	0, 0, 1010, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 40, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 690, 0, 1148, 1137, 1136, 1019, 1025,
	1023, 0, 0, 1020, 0, 0, 1018, 1138, 0, 1027,
	0, 0, 1026, 1012, 1022, 1024, 1021, 1016, 0, 1011,
	1139, 1029, 1028, 1030, 1009, 1032, 0, 0, 0, 1036,
	1033, 1035, 1034, 602, 1031, 0, 0, 0, 0, 0,
	0, 0, 0, 1013, 1014, 0, 0, 0, 0, 1149,
	0, 0, 0, 0, 0, 618, 0, 603, 604, 0,
	0, 0, 0, 0, 1015, 1017, 0, 41, 103, 0,
	0, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 589, 0,
	0, 0, 0, 0, 1159, 0, 35, 0, 1157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 615, 611, 612, 609, 610, 608, 607, 606, 617,
	593, 594, 595, 596, 598, 1156, 1677, 476, 475, 597,
	0, 0, 0, 0, 0, 0, 1144, 0, 0, 0,
	0, 0, 0, 0, 1155, 0, 0, 1150, 1151, 0,
	0, 0, 0, 0, 0, 88, 0, 1146, 0, 0,
	0, 0, 0, 0, 36, 37, 613, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 0, 0, 1140, 1141, 1143, 0,
	104, 0, 1142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 39, 0, 40, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 0, 131, 132, 0,
	133, 134, 135, 137, 136, 105, 106, 107, 111, 109,
	108, 110, 82, 84, 0, 80, 83, 89, 85, 86,
	87, 101, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 102, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 0, 0, 0, 0, 0, 556, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 0, 1149,
	0, 0, 0, 0, 0, 555, 0, 0, 0, 0,
	554, 0, 0, 0, 0, 0, 0, 600, 0, 601,
	0, 0, 0, 0, 0, 0, 0, 591, 592, 0,
	0, 0, 0, 0, 0, 1720, 0, 432, 0, 0,
	52, 581, 578, 579, 583, 584, 585, 586, 0, 0,
	0, 582, 587, 472, 473, 557, 1721, 0, 0, 81,
	552, 570, 0, 0, 599, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	556, 0, 0, 0, 0, 0, 0, 0, 567, 568,
	0, 0, 36, 37, 616, 860, 569, 555, 0, 565,
	566, 571, 554, 0, 0, 0, 0, 0, 0, 600,
	0, 601, 0, 0, 0, 0, 0, 0, 614, 591,
	592, 0, 0, 0, 0, 0, 0, 38, 0, 432,
	0, 0, 52, 581, 578, 579, 583, 584, 585, 586,
	0, 0, 0, 582, 587, 472, 473, 557, 39, 0,
	40, 0, 552, 570, 0, 0, 599, 0, 0, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	567, 568, 865, 0, 0, 0, 616, 0, 569, 0,
	0, 565, 566, 571, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 0, 0,
	39, 0, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 577, 0, 0, 0, 0, 0, 618, 0, 603,
	604, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	589, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 615, 611, 612, 609, 610, 608, 607,
	606, 617, 593, 594, 595, 596, 598, 602, 0, 476,
	475, 597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 603, 604, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 36, 37, 613, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 589, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 615, 611, 612, 609, 610,
	608, 607, 606, 617, 593, 594, 595, 596, 598, 0,
	0, 476, 475, 597, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 0, 0, 0, 0, 554, 0, 0, 0,
	0, 0, 0, 600, 0, 601, 0, 0, 36, 37,
	613, 0, 0, 591, 592, 0, 0, 0, 0, 0,
	0, 0, 0, 432, 0, 741, 52, 581, 578, 579,
	583, 584, 585, 586, 0, 0, 0, 582, 587, 472,
	473, 557, 0, 0, 0, 0, 552, 570, 0, 0,
	599, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 556, 0, 0, 0,
	0, 0, 0, 0, 567, 568, 0, 0, 0, 0,
	616, 0, 569, 555, 0, 565, 566, 571, 554, 0,
	0, 0, 0, 0, 0, 600, 0, 601, 0, 0,
	0, 0, 0, 0, 614, 591, 592, 0, 0, 0,
	0, 0, 0, 38, 0, 432, 0, 0, 52, 581,
	578, 579, 583, 584, 585, 586, 0, 0, 0, 582,
	587, 472, 473, 557, 39, 0, 40, 0, 552, 570,
	0, 0, 599, 0, 0, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 567, 568, 865, 0,
	0, 0, 616, 0, 569, 0, 0, 565, 566, 571,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 0, 0, 0, 0, 39, 0, 40, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	0, 0, 0, 618, 0, 603, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 589, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 615,
	611, 612, 609, 610, 608, 607, 606, 617, 593, 594,
	595, 596, 598, 602, 0, 476, 475, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 618, 0, 603, 604, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 0,
	0, 0, 36, 37, 613, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 589, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 615, 611, 612, 609, 610, 608, 607, 606, 617,
	593, 594, 595, 596, 598, 0, 0, 476, 475, 597,
	0, 0, 0, 0, 0, 690, 0, 0, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 0, 0, 0, 0,
	554, 0, 0, 0, 36, 37, 613, 600, 0, 601,
	0, 0, 0, 0, 0, 0, 0, 591, 592, 0,
	0, 0, 0, 0, 0, 0, 0, 432, 0, 0,
	52, 581, 578, 579, 583, 584, 585, 586, 0, 0,
	0, 582, 587, 472, 473, 557, 0, 0, 0, 0,
	552, 570, 0, 0, 599, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	556, 0, 0, 0, 0, 0, 0, 0, 567, 568,
	0, 0, 0, 0, 616, 0, 569, 555, 0, 565,
	566, 571, 554, 0, 0, 0, 0, 0, 0, 600,
	0, 601, 0, 0, 0, 0, 0, 0, 614, 591,
	592, 0, 0, 0, 0, 0, 0, 38, 0, 432,
	0, 0, 52, 581, 578, 579, 583, 584, 585, 586,
	0, 0, 0, 582, 587, 472, 473, 557, 39, 0,
	40, 0, 552, 570, 0, 0, 599, 0, 0, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	567, 568, 0, 0, 0, 0, 616, 0, 569, 0,
	0, 565, 566, 571, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 0, 0,
	39, 0, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 577, 0, 0, 0, 0, 0, 618, 0, 603,
	604, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	589, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 615, 611, 612, 609, 610, 608, 607,
	606, 617, 593, 594, 595, 596, 598, 602, 0, 476,
	475, 597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 603, 604, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 36, 37, 613, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 589, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 615, 611, 612, 609, 610,
	608, 607, 606, 617, 593, 594, 595, 596, 598, 0,
	0, 476, 475, 597, 954, 955, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 0, 601, 0, 0, 0, 0, 0, 0,
	0, 591, 592, 0, 0, 0, 0, 0, 36, 37,
	613, 432, 0, 0, 52, 581, 578, 579, 583, 584,
	585, 586, 0, 0, 0, 582, 587, 472, 473, 0,
	0, 0, 0, 0, 0, 570, 0, 0, 599, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 567, 568, 0, 0, 0, 0, 616, 0,
	569, 0, 0, 565, 566, 571, 0, 0, 0, 0,
	0, 0, 0, 600, 0, 601, 0, 0, 0, 0,
	0, 0, 614, 591, 592, 0, 0, 0, 0, 0,
	0, 38, 0, 432, 0, 0, 52, 581, 578, 579,
	583, 584, 585, 586, 0, 0, 0, 582, 587, 472,
	473, 0, 39, 0, 40, 0, 0, 570, 0, 0,
	599, 0, 0, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 567, 568, 0, 0, 0, 0,
	616, 0, 569, 0, 0, 565, 566, 571, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 0, 0, 39, 0, 40, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 0, 0, 0, 0,
	0, 618, 0, 603, 604, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 589, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 615, 611, 612,
	609, 610, 608, 607, 606, 617, 593, 594, 595, 596,
	598, 602, 0, 476, 475, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 618, 0, 603, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	36, 37, 613, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 589, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 615,
	611, 612, 609, 610, 608, 607, 606, 617, 593, 594,
	595, 596, 598, 0, 0, 476, 475, 597, 0, 0,
	0, 600, 0, 601, 0, 0, 0, 0, 0, 0,
	0, 591, 592, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 52, 581, 578, 579, 583, 584,
	585, 586, 36, 37, 613, 582, 587, 472, 473, 0,
	690, 0, 1148, 1137, 1136, 570, 0, 0, 599, 0,
	0, 0, 0, 0, 1138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1139, 0, 0,
	0, 0, 567, 568, 0, 0, 0, 0, 616, 0,
	569, 0, 0, 565, 566, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 0, 0, 0, 0, 0,
	0, 38, 0, 738, 737, 0, 0, 0, 0, 0,
	0, 1459, 0, 690, 0, 1148, 1137, 1136, 0, 0,
	0, 739, 39, 0, 40, 0, 0, 1138, 0, 0,
	0, 0, 0, 577, 0, 0, 0, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1150, 1151, 738, 737, 0, 690,
	0, 1148, 1137, 1136, 1146, 0, 0, 0, 0, 0,
	0, 0, 0, 1138, 739, 0, 0, 0, 0, 602,
	0, 0, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 0, 0, 1140, 1141, 1143, 0, 0, 0, 1142,
	0, 618, 740, 603, 604, 0, 0, 0, 0, 0,
	1464, 0, 0, 41, 0, 0, 1132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1144, 0, 0, 0,
	0, 0, 738, 737, 589, 0, 0, 1150, 1151, 0,
	0, 0, 0, 0, 0, 0, 0, 1146, 0, 0,
	739, 0, 0, 0, 0, 0, 605, 615, 611, 612,
	609, 610, 608, 607, 606, 617, 593, 594, 595, 596,
	598, 0, 0, 476, 475, 597, 1140, 1141, 1143, 0,
	0, 0, 1142, 0, 0, 740, 0, 0, 0, 0,
	0, 0, 1132, 1464, 0, 0, 0, 0, 0, 0,
	0, 0, 1144, 0, 0, 0, 0, 0, 0, 0,
	36, 37, 613, 1150, 1151, 0, 0, 0, 0, 0,
	0, 0, 0, 1146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1140, 1141, 1143, 0, 0, 0, 1142, 0,
	0, 740, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1149,
}

var yyPact = [...]int16{
	636, -1000, -250, -1000, -1000, 1505, 2323, 561, -1000, -1000,
	-1000, 2121, 610, 602, 598, 350, 577, 1060, 2005, 1677,
	615, 558, -1000, -189, -163, -1000, -57, 613, -1000, 1353,
	-1000, 4551, 4551, 4551, 4551, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 372, 1060, 1060, 558, 211, 558, 1536, 661,
	1532, 826, -1000, -1000, 679, -1000, 1681, 676, -1000, -1000,
	558, 1677, 825, -1000, -1000, -1000, -1000, 1538, 213, 2571,
	2226, -118, 50, -1000, -1000, -1000, -1000, -1000, 1445, -1000,
	-1000, -1000, 1445, 133, 1504, 1445, 1504, -1000, 1445, 1504,
	89, 89, 89, 89, 89, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1503, 1502, -1000, 1445, 1445, 1445, 1445, 1445,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1496, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1491, 174, 1491, 1453, 1453, -1000, -1000, 2226, 2226,
	2226, 1500, 1677, 1060, 1519, 1518, 1677, -202, 1677, 1677,
	1768, -1000, -1000, -1000, 246, 1677, 1657, 6084, 4551, 7620,
	1677, -1000, 1651, 623, 1677, 5316, -1000, 1585, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1495, 931, 1060, 481, 130,
	1417, 511, 526, 447, 1162, 474, -1000, -1000, -1000, 988,
	-1000, 1060, -1000, 1795, -1000, -1000, 437, -1000, 396, 824,
	1050, 1677, 1494, 184, 1493, 2077, 1009, -1000, -272, -1000,
	15, -1000, -1000, 989, 89, 1445, -1000, 89, 861, 89,
	89, -1000, -1000, 698, 1616, 698, 698, 698, 698, 1048,
	1048, -111, -111, -1000, -1000, -1000, 1006, -1000, 1005, 1491,
	-1000, -1000, -1000, 1003, -1000, 1677, 1060, 1490, 1516, 1677,
	1677, 1679, 575, -1000, -1000, 1673, 1669, 1376, -1000, -1000,
	245, -1000, -1000, 661, 1060, -1000, 674, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1507, -1000, 485,
	619, 6468, 213, -1000, -1000, -1000, -1000, -1000, 457, -1000,
	1787, 1710, 488, 54, -176, 1159, -1000, -1000, 1488, -1000,
	-1000, 9871, -1000, 1147, 1135, -1000, 1132, 1103, 40, 1060,
	-1000, -174, 141, 12, -1000, -1000, 1417, -1000, 1487, 9871,
	1665, -1000, 1623, 741, -1000, 158, -1000, -205, -1000, -1000,
	984, -1000, -205, -1000, -1000, -1000, 1417, -1000, 1485, 1484,
	-1000, 1483, -1000, -1000, 1417, 1417, 1417, 669, -1000, -1000,
	-1000, -1000, -1000, 1371, 698, 89, 698, 1370, 1367, 698,
	698, -1000, -1000, 1083, 748, -1000, -1000, -1000, -1000, 1350,
	-1000, 1346, -1000, 167, 166, -1000, 1365, 1403, -1000, 1340,
	1425, 1514, 132, 1677, 1482, 1480, 1434, 558, 1434, 1709,
	318, 1677, 1768, 438, 1768, 661, 6852, 1060, 444, 1060,
	-1000, -1000, 543, 4932, -1000, -1000, 1326, -1000, 319, 1445,
	583, 583, -180, 387, 364, -176, 1417, 1472, -1000, 457,
	375, -1000, 9871, 260, 1417, 1417, 1417, 1417, 9779, -1000,
	-1000, 645, -1000, -1000, -1000, 10295, 10295, 10295, 10295, 10295,
	10295, 10295, -1000, -1000, -1000, -1000, 57, -1000, -205, -1000,
	1017, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 666, 660,
	-1000, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 9871,
	1417, 1578, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
	1417, 1417, 1417, 2330, 1417, 1417, 1417, 1417, -1000, -1000,
	-1000, -1000, -1000, -1000, -176, 1468, -1000, -1000, -1000, 824,
	-1000, 9871, 438, 987, 157, -1000, 1401, -1000, 1000, 1363,
	2315, 1362, -1000, 2669, -1000, -1000, -1000, 1092, -1000, 948,
	-1000, 925, 1361, 8991, 9427, 9427, 6852, -1000, -1000, 698,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 89, 1047,
	89, 45, 43, -1000, 999, -1000, 997, 132, 1060, 1677,
	1360, 1400, -1000, 285, 1466, 438, 457, -1000, 1727, 1801,
	-1000, 1434, 1677, -1000, 567, 1976, -1000, -1000, 1704, -1000,
	1391, -1000, -1000, 1399, 1768, -1000, 1464, 1060, -1000, -1000,
	469, 1060, -1000, -1000, -1000, -1000, -1000, 2899, 457, 1646,
	-1000, -1000, -1000, 930, -1000, -1000, 838, 311, 919, -1000,
	1060, -176, 1463, 9871, 457, 1324, 317, 9871, 9871, 929,
	-1000, -1000, 388, 10203, 947, 960, 10295, 10295, 10295, 10295,
	10295, 10295, 10295, 10295, 10295, 10295, 10295, 10295, 10295, 10295,
	10295, 3399, 1025, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1068, -1000, 1434, 627, 1092,
	1092, 1092, 1317, 9779, 728, 1032, 1032, 60, 9779, 60,
	60, 60, 60, 60, 114, -1000, -252, -1000, -1000, 6084,
	6852, 9427, 9427, 8367, 9871, 9427, 9427, 9427, 1678, 817,
	728, 627, 1698, 1092, 1092, 1092, 1092, -1000, 1092, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 100, -1000, -1000,
	-1000, -1000, -1000, -1000, 9427, 9427, 9427, 9427, -1000, 1060,
	1417, 375, 1319, -134, 9871, 1462, 741, -1000, -1000, 1357,
	-205, -1000, -1000, -1000, -118, -1000, -1000, -1000, -1000, 1092,
	9427, 1260, 1317, -1000, 497, -1000, 655, 1260, 497, 1260,
	1417, -1000, 698, -1000, 698, -1000, -1000, 1287, 1270, 1251,
	1461, 1459, -191, 989, 132, 1313, 1309, 1715, 1720, 1434,
	1687, 1589, -1000, 1092, 1663, 1060, -1000, -1000, -1000, -1000,
	-1000, 284, 813, 1060, 8297, 1359, -1000, 2255, 1458, 151,
	551, 1510, 2911, 190, -1000, 1063, 805, 1044, 804, 800,
	797, 787, 785, 783, 781, 780, 773, 738, -1000, -1000,
	-1000, -1000, -1000, 1793, -1000, -1000, -1000, 1770, 1457, 1454,
	457, 375, 1284, 2899, -1000, -67, 388, 401, -1000, -1000,
	865, -1000, -1000, 281, 10295, 10295, 10295, -1000, -1000, -1000,
	-1000, 947, 10295, 10295, 10295, 41, 281, 2124, 844, 202,
	60, 354, 354, 48, 48, 48, 48, 48, 125, 125,
	-1000, -85, -1000, 1445, -1000, -1000, -1000, 1092, 1092, -1000,
	-1000, -1000, -1000, 9871, -1000, 1092, -1000, -205, 1043, -1000,
	-1000, 1027, 1417, -1000, 1260, 1260, 525, 1390, 10613, 1445,
	-1000, 1445, 1453, -1000, -1000, 193, 1445, 189, -1000, -1000,
	-1000, -1000, 1453, -1000, -1000, -1000, -1000, -1000, 1445, 1445,
	-1000, -1000, 1445, 1445, -1000, 1445, 1445, 658, 1415, 1405,
	1260, 9427, -1000, 753, -1000, 9871, 1092, 1677, -1000, -1000,
	-1000, -1000, -1000, -1000, 1260, 1092, 1388, 1260, 1260, 1263,
	-1000, 9871, 317, 1513, -1000, -1000, 621, -1000, 1209, 1186,
	-1000, -1000, 1260, 9427, -229, -1000, -1000, -1000, 1040, -1000,
	-1000, 4548, -229, -229, 9427, -1000, -1000, -1000, -1000, -191,
	132, 457, 1739, 1452, 1176, 1739, 2899, 1604, 9871, 9871,
	1727, -1000, 1434, -1000, -1000, 1678, -1000, -1000, 846, -1000,
	1434, 1307, 267, 201, 9871, -1000, 3027, -1000, 8297, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1727, 9871, -1000, -1000, -1000, -1000, -1000, 1060, 3035,
	1060, 1060, 1060, 642, 9871, 1058, 9871, -1000, -1000, -1000,
	-1000, -1000, 1677, 1167, 8625, 2255, 2255, 8625, 2255, 2255,
	457, 457, 1450, 1447, 351, -1000, 1060, -1000, -138, 2911,
	1060, -1000, 962, -1000, -1000, 969, 912, 969, 969, 969,
	969, 969, 298, 883, 549, 583, 583, 1060, 457, 1254,
	317, 2899, 1510, -1000, -1000, -1000, -1000, 281, 281, 281,
	-1000, 41, 281, 1965, -1000, 10295, 10295, 159, -1000, -1000,
	728, -1000, 86, -1000, -205, -1000, -1000, 3767, 1025, 9871,
	-1000, 278, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3767, 10295, 10295, 10295, 10295, -80,
	1392, 810, -1000, 9871, 574, -1000, -1000, -1000, -1000, -1000,
	-1000, 494, 1060, 375, -1000, 1764, -136, 914, -1000, -1000,
	-1000, -1000, -1000, 1417, -1000, -1000, 654, -1000, -1000, 1092,
	1739, 1153, 1240, 2899, 9871, 438, -191, 2899, -1000, -1000,
	1792, 684, 735, 1387, -1000, 596, 1715, 1092, 1372, -1000,
	-1000, -87, 9871, 8297, 6242, 728, 6242, -1000, 8297, 1967,
	1715, 10684, 561, 1528, 384, 1384, 433, -1000, 3396, 992,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1060, 1754, 1747, 1743, 1742,
	10843, 9871, 9871, -1000, 1695, -1000, -1000, 8625, -1000, -1000,
	-1000, -1000, -1000, 1229, 1218, 457, 457, 1446, 1417, 1208,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 824,
	824, 1202, 1192, 2899, -1000, 1510, -1000, -1000, 10295, 281,
	281, 30, -1000, 1027, -1000, 1092, 1445, 1092, 513, -1000,
	-1000, 1092, 3213, 2957, 2428, 1471, 1417, -64, -1000, 728,
	9871, 1677, -1000, 317, 583, 583, -1000, -1000, -1000, 224,
	811, 741, 741, 880, 52, -1000, 1719, 539, 5700, -1000,
	2899, 1739, 2899, 1510, 728, 1190, 1739, 1510, -1000, 1573,
	9871, 9871, 9871, -1000, 1604, -1000, 9427, -1000, -1000, -217,
	728, 3027, 3096, -1000, -1000, 468, 5858, -1000, 1604, 8297,
	749, -1000, 808, -1000, 6242, 830, 1677, 1244, -1000, 1302,
	1619, -1000, -1000, -1000, 1662, 119, 2434, 1060, 248, 4551,
	-1000, -1000, 1383, 3780, -4, -1000, -1000, -1000, 734, 653,
	1022, -1000, 1611, -1000, -1000, 3035, 1641, -1000, -1000, -1000,
	-1000, -1000, 6242, -1000, 1378, 1092, 813, 280, -1000, 362,
	1183, 1175, 457, 1060, -1000, 2911, -1000, -1000, 493, 2899,
	1510, -1000, 281, -1000, -1000, -1000, -1000, -1000, 10295, -1000,
	-1000, 10295, -1000, 10295, -1000, 10295, -1000, 10295, 10295, 1092,
	1018, 728, 1438, -1000, -1000, -1000, 741, -1000, 741, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 449, -1000, 1718, 1092,
	-1000, 1510, 2899, -1000, -1000, -1000, 2899, -1000, 1569, 728,
	728, -1000, -1000, 1385, 9871, 5474, -1000, -1000, -1000, -1000,
	2826, 8577, 555, 2460, 334, 1677, -1000, 334, 1249, 384,
	1677, -1000, -1000, 627, 384, 384, 384, 384, 384, -1000,
	1556, 1554, -1000, 1579, 1558, 1594, 1677, 1171, 119, 652,
	1417, -1000, 1824, -1000, -1000, -1000, 1662, 1691, -1000, 4164,
	1383, -4, 1382, -1000, -11, 20, 8899, 6852, 698, -1000,
	-1000, -1000, -1000, -1000, 1060, 2424, -1000, 195, 266, 219,
	-1000, 232, 2899, 2899, 1156, 1092, -1000, 1677, 1510, -1000,
	147, 147, 147, 147, 147, 24, -1000, -1000, 1060, -1000,
	-1000, -1000, 651, 9871, -1000, -1000, -1000, 1510, -1000, 1739,
	384, 728, -1000, -1000, 3938, -1000, -1000, 9871, -1000, 9871,
	6242, -1000, 1259, 1417, -1000, 1739, 384, 1267, -1000, 1279,
	-1000, 729, 1619, 1437, 1512, 1345, -1000, -1000, -1000, -1000,
	1552, -1000, 1550, -1000, -1000, -1000, -1000, -114, 595, 588,
	586, 1060, -1000, 1434, -1000, 1382, -4, -5, -1000, -1000,
	-1000, -1000, 728, 713, -1000, 1380, -1000, 6242, -1000, -1000,
	239, -1000, 1510, 1510, -1000, -1000, 1430, -1000, -1000, -1000,
	-1000, -1000, -1000, 1092, 221, -142, 1152, 6852, 1185, -1000,
	728, -1000, 1736, 1379, 553, 8297, 8066, 10767, 1473, 627,
	1417, -1000, 7236, 1060, 1727, 1267, -1000, 1739, 627, 9871,
	-1000, -1000, 9871, 1429, -1000, 9871, -1000, -1000, -1000, -1000,
	1428, 1417, 1417, 1417, 1091, -1000, -1000, -1000, -1000, -18,
	14, -1000, 9871, 451, -1000, -1000, -1000, -1000, 1060, -1000,
	1565, -83, -155, -1000, -1000, -1000, 1092, 9871, 1731, 1717,
	-1000, 2246, 749, -1000, -1000, 1626, 1198, 1377, -1000, -1000,
	9335, 1092, 1146, -1000, -1000, 650, -1000, -1000, 1091, 1715,
	-1000, 1727, -1000, 728, 728, 438, 728, 585, 438, 438,
	438, 373, 1060, -1000, -1000, -1000, 728, 5090, 1088, -1000,
	1563, -1000, -1000, -1000, -1000, 9871, 9871, 4322, 349, -1000,
	1417, -1000, -1000, 1312, 8004, 1060, -1000, -1000, 1715, 1078,
	1076, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1073, 1073, 1073, 652, -1000, -1000, -1000, -105, 728, 1378,
	527, 1783, -1000, 1417, -1000, 1434, -1000, -1000, -1000, -1000,
	-1000, 585, -1000, -1000, -1000, -114, -151, -1000, 627, 1377,
	1092, -1000, -1000, -157, 1374, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 2054, 96, 42, 2053, 2052, 2051, 2050, 2047, 2046,
	2044, 2043, 2041, 2035, 2033, 25, 40, 46, 31, 36,
	2032, 2031, 2030, 2029, 2028, 88, 2027, 2026, 2018, 2017,
	85, 2016, 2013, 2012, 2011, 79, 112, 83, 127, 1610,
	37, 60, 41, 56, 2007, 30, 2001, 1999, 58, 1998,
	39, 1996, 1994, 181, 1990, 1989, 7, 69, 105, 101,
	77, 1988, 1980, 92, 1771, 1979, 1974, 113, 1971, 1970,
	90, 11, 71, 4, 14, 10, 1969, 332, 1, 1968,
	86, 82, 1966, 1965, 1962, 17, 1958, 59, 73, 15,
	64, 1956, 63, 8, 97, 29, 23, 13, 2, 53,
	38, 1955, 21, 26, 27, 1953, 68, 1952, 128, 51,
	66, 5, 1535, 0, 52, 84, 1951, 1946, 1945, 1202,
	110, 28, 9, 57, 72, 1944, 75, 95, 54, 102,
	100, 1943, 94, 1940, 1936, 1935, 1934, 1933, 295, 841,
	119, 76, 50, 1932, 1924, 91, 410, 418, 89, 424,
	1045, 74, 1923, 1921, 1920, 1918, 106, 1917, 61, 99,
	22, 730, 1914, 1913, 1907, 1900, 1897, 1894, 1893, 104,
	1892, 103, 98, 357, 183, 49, 1886, 1883, 1881, 1879,
	80, 1877, 1876, 1872, 65, 1869, 1867, 126, 87, 123,
	111, 118, 1864, 1863, 93, 78, 1862, 121, 117, 1861,
	116, 47, 24, 642, 55, 1855, 1854, 1853, 6, 3,
	1850, 1847, 1842, 1838, 1834, 1833, 62, 1831, 114, 1823,
	16, 1822, 1820, 48, 1819, 1817, 1815, 1813, 1812, 425,
	67, 1809, 81, 120, 1807, 115,
}

var yyR1 = [...]uint8{
	0, 225, 226, 226, 1, 1, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
	21, 228, 228, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 28, 28, 7, 8, 8, 8, 231, 231,
	48, 48, 95, 95, 9, 9, 9, 9, 10, 10,
	205, 205, 204, 206, 206, 11, 11, 11, 11, 11,
	199, 199, 199, 199, 199, 12, 12, 202, 202, 202,
	15, 15, 15, 15, 16, 16, 17, 17, 17, 19,
	19, 100, 100, 104, 104, 104, 105, 105, 105, 105,
	217, 217, 125, 125, 227, 227, 232, 232, 232, 232,
	232, 232, 232, 197, 197, 197, 197, 198, 198, 198,
	198, 200, 200, 201, 201, 201, 201, 201, 201, 203,
	203, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 13, 13, 29, 29, 72, 72, 14, 110,
	110, 178, 178, 178, 179, 179, 179, 179, 179, 179,
	181, 181, 182, 182, 117, 117, 183, 183, 24, 163,
	164, 164, 164, 164, 164, 164, 164, 164, 150, 150,
	150, 150, 128, 128, 128, 128, 128, 128, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 189, 189, 189,
	189, 189, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 191, 192, 193, 185, 185, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 140, 140, 140, 140, 140, 140, 184, 184,
	180, 180, 180, 180, 132, 132, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 131, 131, 131, 131,
	131, 131, 131, 136, 136, 133, 133, 133, 133, 133,
	133, 133, 133, 129, 129, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 137, 137, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 149, 149,
	138, 138, 147, 147, 148, 148, 148, 139, 139, 139,
	146, 146, 146, 143, 143, 144, 144, 145, 145, 145,
	141, 141, 141, 142, 142, 142, 152, 174, 174, 174,
	176, 176, 177, 177, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 162, 162,
	194, 194, 195, 195, 196, 196, 173, 173, 173, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 161, 161, 171, 171, 172, 172, 169, 169, 169,
	170, 156, 156, 156, 156, 156, 157, 157, 158, 158,
	158, 158, 153, 153, 154, 154, 155, 155, 187, 187,
	187, 221, 221, 221, 221, 221, 221, 222, 222, 188,
	188, 159, 159, 160, 160, 167, 167, 167, 167, 233,
	233, 165, 165, 165, 166, 166, 166, 234, 25, 26,
	26, 27, 27, 27, 32, 32, 32, 30, 30, 31,
	31, 37, 37, 36, 36, 38, 38, 38, 38, 116,
	116, 116, 115, 115, 218, 218, 218, 218, 218, 40,
	40, 41, 41, 42, 42, 43, 43, 43, 208, 208,
	207, 207, 209, 209, 209, 209, 209, 209, 209, 209,
	55, 55, 92, 92, 92, 96, 96, 44, 44, 44,
	44, 45, 45, 46, 46, 47, 47, 123, 123, 122,
	122, 122, 121, 121, 49, 49, 49, 51, 50, 50,
	50, 50, 52, 52, 54, 54, 53, 53, 56, 56,
	56, 56, 57, 57, 94, 94, 39, 39, 39, 39,
	39, 39, 39, 39, 107, 107, 59, 59, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 69, 69, 69, 69, 69, 69,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 35, 35, 70, 70, 70, 77, 71, 71, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 67, 67, 67,
	67, 67, 67, 67, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 235, 235, 68,
	68, 68, 68, 33, 33, 33, 33, 33, 124, 124,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 127, 127, 127, 127, 127, 127, 127, 127,
	81, 81, 34, 34, 79, 79, 80, 109, 109, 82,
	82, 78, 78, 78, 78, 210, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 60, 60, 83, 83,
	84, 84, 219, 219, 220, 85, 85, 86, 86, 87,
	88, 88, 88, 89, 89, 89, 89, 90, 90, 90,
	62, 62, 62, 62, 62, 62, 91, 91, 93, 93,
	93, 93, 97, 97, 73, 73, 75, 75, 74, 76,
	98, 98, 102, 99, 99, 103, 103, 103, 103, 103,
	22, 23, 101, 101, 101, 118, 118, 118, 108, 108,
	106, 106, 113, 114, 114, 114, 114, 114, 119, 119,
	119, 120, 120, 211, 211, 211, 212, 212, 212, 213,
	213, 214, 215, 215, 216, 224, 224, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 112,
	112, 112, 112, 112, 112, 229, 230,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 3, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 10, 1, 1, 5, 5, 3, 5, 3, 1,
	3, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 4, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 4, 1, 1, 0, 1, 2, 0,
	3, 0, 2, 2, 0, 2, 2, 2, 2, 2,
	0, 2, 0, 3, 0, 1, 0, 2, 4, 4,
	0, 1, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 1, 2, 2,
	3, 2, 4, 2, 4, 2, 2, 3, 2, 3,
	2, 7, 9, 3, 3, 6, 9, 9, 6, 6,
	8, 8, 5, 8, 7, 4, 0, 2, 4, 6,
	2, 4, 2, 1, 1, 2, 1, 2, 2, 1,
	1, 1, 3, 1, 2, 1, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 2, 3, 1, 3, 0, 2,
	0, 2, 2, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 1, 1, 0, 1, 1, 3, 3, 2, 2,
	2, 1, 1, 1, 1, 4, 5, 4, 4, 4,
	1, 2, 2, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 3, 3,
	0, 3, 3, 0, 1, 0, 1, 0, 2, 1,
	0, 3, 3, 0, 1, 2, 6, 0, 1, 4,
	1, 2, 1, 3, 2, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 5, 2,
	3, 3, 2, 3, 2, 3, 3, 2, 2, 3,
	4, 1, 1, 1, 1, 1, 3, 3, 2, 2,
	1, 2, 5, 5, 8, 8, 13, 11, 1, 1,
	2, 2, 10, 8, 9, 7, 7, 5, 0, 1,
	1, 0, 1, 1, 1, 2, 2, 1, 2, 0,
	3, 0, 1, 1, 3, 0, 4, 1, 3, 2,
	1, 1, 2, 1, 1, 1, 1, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 3, 6, 4, 7, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 0, 4,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 8, 1, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 0, 4, 1, 3, 3, 2,
	3, 2, 1, 2, 0, 3, 1, 1, 3, 4,
	4, 4, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 4, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 6, 2, 2, 2, 2, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 2, 1, 4, 5, 5,
	5, 5, 6, 4, 4, 4, 6, 6, 8, 6,
	6, 6, 8, 6, 8, 6, 8, 6, 8, 9,
	7, 5, 4, 4, 3, 3, 3, 1, 3, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 2, 2, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 0,
	2, 1, 1, 3, 5, 3, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 0, 3,
	0, 2, 1, 3, 1, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 1, 3,
	1, 1, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 5, 3,
	1, 3, 1, 2, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 2, 0, 2, 2, 0,
	1, 4, 1, 3, 2, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -225, -1, -20, -21, -24, 126, 127, -226, 392,
	-163, 58, -221, -222, 277, -183, 135, 148, 168, 169,
	362, 133, 374, 375, 150, 377, 79, -106, 138, -164,
	-150, -113, -112, 63, 36, 61, 387, 388, 148, 169,
	171, 290, 134, 134, 134, 136, 214, 136, -113, -113,
	-78, 139, 61, -112, -119, 63, -53, -119, 61, -112,
	133, -108, 139, 377, 374, 375, 342, 133, 60, 59,
	-151, -128, -132, -129, -134, -133, -135, -113, -130, -131,
	250, 354, 247, 251, 248, 253, 254, 255, 120, 252,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 256, 268, 33, 155, 240, 241, 242, 245, 244,
	246, 243, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 221, 222, 223, 224, 225, 226, 227, 228, 229,
	230, 232, 233, 235, 236, 237, 239, 238, -151, -151,
	-151, -113, 56, 213, -113, -113, -108, 215, -108, 56,
	-197, 19, 193, 194, 206, 56, 81, 123, 25, 123,
	-108, -53, 81, -53, 306, -167, -233, 357, 37, -150,
	-152, -156, -153, -154, -155, -168, -157, 142, 140, 150,
	390, 144, 145, 277, -161, 146, 134, 151, 73, 81,
	-189, 142, -192, 56, 285, 291, 140, 151, 150, 390,
	71, 143, 25, 364, 366, 31, 32, -145, 393, 279,
	-143, 288, -138, 58, -138, -137, 249, -139, 58, -138,
	-139, -138, -139, -141, 251, -141, -141, -141, -141, 58,
	58, -138, -138, -138, -138, -138, 58, -147, 58, -136,
	234, -147, -148, 58, -148, 56, 57, -53, -113, 56,
	56, -53, -217, 387, 388, -53, -53, -200, -198, 8,
	9, 10, 207, -53, 26, -114, -120, -113, 299, 147,
	-111, -112, -119, 131, 194, 365, 80, 25, 27, 285,
	291, 193, 84, 120, 16, 85, 200, 374, 375, 119,
	76, 343, 126, 52, 335, 336, 333, 198, 345, 346,
	334, 292, 205, 20, 31, 10, 28, 153, 24, 113,
	128, 195, 89, 88, 156, 160, 161, 26, 154, 75,
	201, 203, 19, 55, 146, 11, 364, 13, 14, 379,
	366, 139, 138, 100, 378, 134, 50, 8, 122, 29,
	97, 46, 151, 204, 48, 98, 17, 337, 338, 34,
	352, 162, 115, 53, 40, 380, 81, 381, 73, 56,
	306, 199, 79, 15, 51, 163, 382, 202, 386, 99,
	129, 342, 170, 49, 196, 383, 132, 197, 6, 348,
	33, 152, 47, 133, 293, 384, 87, 137, 74, 5,
	150, 9, 385, 54, 57, 339, 340, 341, 38, 86,
	12, 149, 356, 77, -128, -120, -111, -53, 26, 131,
	-53, -165, 59, -114, 71, -111, -112, 36, 58, -188,
	56, 81, -159, -113, 151, -161, 61, 134, -187, 374,
	375, -229, 58, -161, -161, 61, 134, 151, 61, 151,
	73, 19, -113, 9, 151, 151, -188, 63, -53, 58,
	-185, 365, 16, 58, -190, 58, -191, 63, 64, 65,
	110, 66, 73, -140, 72, -59, 280, -67, 333, 336,
	335, 281, 74, 75, -113, 351, 350, -119, -193, 65,
	394, -144, 289, 65, -141, -138, -141, 65, 61, -141,
	-141, -142, 120, 119, 33, -142, -142, -142, -142, -149,
	63, -149, -146, 356, 357, -146, 65, 65, -147, 65,
	-53, -113, 58, 56, -53, -53, 25, 136, 25, -178,
	25, 56, 59, 207, -197, -113, 123, 57, -117, 142,
	-156, 150, 131, 90, -114, -233, -172, -169, -113, 151,
	10, 9, 19, 146, 140, 150, 390, -187, 61, 58,
	-39, -58, 81, -64, 31, 26, 9, 76, -229, -63,
	-59, -78, -210, -76, -77, 120, 121, 109, 110, 117,
	82, 122, -67, -65, -66, -68, -213, 180, 63, 64,
	-113, 62, 72, 65, 66, 67, 68, 73, -119, 311,
	-74, 48, 49, 343, 344, 345, 346, 352, 347, 85,
	38, 40, 256, 280, 281, 333, 341, 340, 339, 337,
	338, 335, 336, 389, 139, 334, 115, 342, 278, 61,
	61, 61, 61, -187, 150, -159, -113, 376, -189, 390,
	-140, -229, 58, -39, 25, 31, -60, 65, 110, -190,
	58, -191, -180, 389, 65, 66, -180, -229, -138, 58,
	-138, 58, 58, -229, -229, -229, 123, 60, -142, -141,
	-142, 60, 60, -142, -142, 61, 61, 120, 60, 59,
	60, 240, 240, 60, 59, 60, 59, 58, 57, 56,
	-171, -172, -67, -113, -53, 58, 58, -2, -3, -4,
	6, -229, -108, -2, -179, 19, 177, 178, -53, -198,
	-92, -113, 151, -200, -197, -114, -113, -228, 134, 151,
	-113, 142, -156, -166, -114, 63, 65, 60, 59, -138,
	-170, 283, -138, -158, 173, 174, 33, 175, -158, 376,
	151, 151, -187, -229, 58, -172, -230, 80, 79, 97,
	208, 60, -39, -61, 100, 81, 98, 99, 84, 106,
	105, 116, 109, 110, 111, 112, 113, 114, 115, 107,
	108, 389, 119, 90, 91, 92, 93, 94, 95, 96,
	101, 102, 103, 104, -107, -229, -77, -229, -229, -229,
	-58, -2, -71, -229, -39, 124, 125, -64, -229, -64,
	-64, -64, -64, -64, -64, -214, 279, -180, 63, 123,
	123, -229, -229, -229, -229, -229, -229, -229, -229, -81,
	-39, -229, 41, -229, -229, -229, -229, -235, -229, -235,
	-235, -235, -235, -235, -235, -127, 120, 251, 155, 242,
	-130, -129, 257, 256, -229, -229, -229, -229, -187, 58,
	-188, -39, -92, 60, 58, 366, 59, 65, 60, -190,
	63, 60, 282, 122, -128, -230, 60, 60, 60, -37,
	24, -36, -71, -38, -39, 111, -119, -36, -39, -36,
	-114, -142, -141, 63, -141, 290, 290, 65, 65, -171,
	-113, -53, 60, 58, 58, -92, -172, -85, 15, -27,
	5, -25, -234, -2, -53, 137, 21, 6, 8, 9,
	10, 19, -110, 59, 25, -200, -227, 58, -113, 150,
	-113, -174, -176, 356, -175, 57, 147, 71, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 61, -169, -88,
	27, 28, -188, 56, 73, 176, -188, 56, -159, -187,
	58, -39, -172, 60, -184, 175, -39, -39, -69, 73,
	81, 74, 75, -64, 21, 22, 23, -70, -74, -77,
	69, 100, 98, 99, 84, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-132, 241, -127, -130, -124, 61, 63, 61, -78, -113,
	-230, -230, -230, 59, -230, -2, -63, 63, -113, -63,
	-113, 393, -114, -114, -36, -36, -39, -126, 120, 247,
	155, 242, 236, 266, 267, 287, 240, 288, 229, 221,
	226, 239, 237, 223, 238, 222, 235, 232, 245, 244,
	246, 257, 248, 253, 255, 254, 252, -39, -38, -38,
	-36, -30, 24, -79, -80, 86, -78, 19, -230, -230,
	-230, -230, -230, 249, -36, -37, -36, -36, -36, -160,
	-113, -229, -230, 60, 362, 363, -39, 58, -60, 60,
	-145, -230, -36, 59, -230, -230, -116, -115, 25, -113,
	63, 123, -230, -230, -229, -142, -142, 60, 60, 60,
	58, 58, -94, 378, -171, 60, 60, -89, 17, 16,
	-5, -3, -229, 21, 24, -32, 44, 45, -26, -230,
	25, -160, 195, -109, 86, -113, -201, -203, 216, -18,
	-15, -6, -8, -7, -10, -9, -11, -12, -13, -14,
	-22, -3, 139, -16, -17, -28, 10, 9, 20, 33,
	199, 200, 205, 201, 149, -29, 170, -23, 8, 342,
	160, 161, 56, -232, -113, 109, 90, 63, -150, 59,
	58, 58, 374, 375, 140, -173, 56, -175, 356, 58,
	358, 61, -162, 90, 63, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 9, 10, 58, 58, -172,
	-230, 60, -174, 349, 73, 74, 75, -64, -64, -64,
	-70, -64, -64, -64, -35, 156, 80, 356, -230, -230,
	-39, -230, -215, -216, 63, -230, -230, 59, 57, 59,
	-138, -138, -138, -148, 227, -138, 227, -148, -138, -138,
	-138, -138, -138, -138, 25, 59, 11, 59, 11, -230,
	-36, -82, -80, 89, -39, -230, -119, -230, -230, -230,
	-230, 60, 59, -39, -184, 56, 60, -186, 60, 60,
	-230, -38, -218, 391, -115, 111, -120, -218, -218, -37,
	-94, -171, -172, -57, 12, 58, 60, -57, -174, -90,
	19, 34, -39, -86, -87, -39, -85, -2, -30, 70,
	-2, -181, 57, 196, 216, -39, 392, -203, 216, -201,
	-85, -39, -25, -25, -25, -205, -113, -204, -25, -224,
	-223, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, -113, -113, -113, -199, 40, 202, 203, 204,
	-39, -113, -229, -81, -53, 60, -232, -113, -232, -232,
	-232, -232, -232, -172, -172, 58, 58, 151, -113, -177,
	-175, -113, 65, -194, 56, 77, 65, -194, -194, -194,
	-194, -194, -195, 191, 192, 65, -196, -195, 65, -158,
	-158, -160, -172, 60, -184, -174, -173, -35, 80, -64,
	-64, 240, 394, 59, -180, -126, 120, -124, -39, -141,
	61, -126, -64, -64, -64, -64, 353, -85, 88, -39,
	87, 143, -113, -230, 10, 9, 362, 363, 60, 217,
	368, 369, 162, 370, 175, 371, 372, -229, 123, -230,
	-57, 60, 60, -174, -39, -92, -94, -174, 9, 100,
	59, 18, 59, -88, -89, -230, -31, 47, -182, 356,
	-39, -201, -202, -203, -203, -201, 392, 88, -89, 87,
	-19, -15, -16, -18, 216, -106, 11, -48, -53, -41,
	-42, -43, -44, -55, -77, -229, -53, 59, -206, -123,
	197, 25, -99, -125, 218, -103, 301, 300, -114, 311,
	-101, 299, 251, 298, -194, 59, -113, 11, 11, 11,
	11, -203, 216, -72, -71, -72, -110, 19, 60, 60,
	-172, -172, 58, -229, 60, 59, -188, -188, 60, 60,
	-174, -173, -64, 290, -216, -230, -230, -230, 59, -230,
	-230, 59, -230, 19, -230, 59, -230, 19, -229, -34,
	348, -39, -53, -184, -158, -158, 356, -60, 16, -60,
	-60, -60, 65, 369, 162, 371, 16, -230, 163, -85,
	111, -174, -57, -174, -173, 60, -57, -173, 42, -39,
	-39, -87, -90, -36, 390, 392, -203, 88, 88, -90,
	-201, 89, 89, -202, -54, 29, -53, -53, -48, -231,
	59, 11, 57, 33, 59, -49, -51, -50, -52, 46,
	50, 52, 47, 48, 49, 53, -123, -41, -229, -122,
	163, -121, 25, -119, 63, -204, -113, 198, -128, 59,
	-99, 218, -100, -104, 302, 304, 90, 123, -118, -113,
	63, 31, 33, -223, 29, -202, -230, -109, 195, -211,
	209, 81, 60, 60, -172, -113, -175, 143, -174, -173,
	-64, -64, -64, -64, -64, -64, -230, 63, 58, -60,
	-60, 373, -119, 16, -230, -173, -174, -174, 43, -40,
	11, -39, 88, -203, 392, -16, -19, 139, -17, 139,
	392, 88, -95, 163, -53, -95, 57, -41, -53, -98,
	-102, -78, -42, -43, -43, -42, -43, 46, 46, 46,
	51, 46, 51, 46, -50, -119, -230, -56, 54, 138,
	55, -229, -121, 19, -103, -100, 59, 303, 305, 306,
	56, 77, -39, -114, -142, -160, 88, 216, 196, -212,
	210, 209, -174, -174, 60, -230, -53, -173, -230, -230,
	-230, -230, -230, -33, 100, 356, -160, 123, -219, -220,
	-39, -173, -57, -41, 88, 89, -39, -39, -62, 33,
	38, -2, -229, -229, -57, -41, -57, -40, 59, 90,
	-46, -45, 56, 57, -47, 56, -45, 46, 46, -208,
	356, 134, 134, 134, -96, -113, -2, -104, -105, 307,
	304, 310, 90, -202, 212, 211, -173, -173, 58, -230,
	354, 53, 359, 60, -114, -230, -85, 59, -83, 13,
	139, -201, -19, -19, -97, 56, -98, -73, -75, -74,
	-229, -2, -91, -93, 6, -113, -111, -112, -96, -85,
	-57, -57, -102, -39, -39, 58, -39, 58, -229, -229,
	-229, -230, 59, 304, 308, 309, -39, 392, -160, 43,
	355, 360, -230, -220, -84, 14, 16, 392, 30, -97,
	59, -230, -230, -230, 59, 123, -230, -89, -85, -92,
	-207, -209, 379, 380, 381, 382, 383, 384, 385, 386,
	-92, -92, -92, -122, -113, 88, 60, 43, -39, -71,
	88, 151, -75, 38, -2, -229, -93, -113, -89, 60,
	60, 59, -230, -230, -230, -56, 356, 139, 9, -73,
	-2, -209, -208, 359, -98, -230, 360,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 830, 1, 3,
	6, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 828, 432, 433, 434, 437, 0, 0, 831, 0,
	171, 216, 216, 216, 216, 832, 1009, 1010, 1011, 1012,
	1013, 1014, 0, 0, 0, 828, 0, 828, 0, 751,
	0, 0, -2, -2, 0, 840, 0, 546, 838, 839,
	828, 0, 0, 438, 435, 436, 167, 0, 445, 0,
	178, 347, 343, 183, 184, 185, 186, 187, 330, 265,
	293, 294, 330, 317, 337, 330, 337, 300, 330, 337,
	350, 350, 350, 350, 350, 308, 309, 310, 311, 312,
	313, 314, 0, 0, 285, 330, 330, 330, 330, 330,
	291, 292, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 332, 283, 332, 334, 334, 281, 282, 179, 180,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 114, 115, 0, 0, 0, 0, 0, 0,
	0, 168, 0, 0, 0, 169, 447, 0, 450, 172,
	173, 174, 175, 176, 177, 0, 439, 441, 0, 428,
	0, 0, 0, 0, 0, 0, 401, 402, 189, 0,
	191, 0, 193, 0, 195, 196, 0, 198, 200, 439,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 349,
	345, 344, 264, 0, 350, 330, 318, 350, 0, 350,
	350, 301, 302, 353, 0, 353, 353, 353, 353, 0,
	0, 340, 340, 288, 289, 290, 0, 276, 0, 332,
	284, 278, 279, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 151, 0, 121, 117,
	118, 119, 116, 0, 0, 753, 0, 833, 834, 835,
	-2, -2, 841, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 22, 547, 842, 0, 829, 164,
	0, 0, 0, 451, 453, 836, 837, 449, 0, 411,
	0, 0, 0, 442, 389, 0, 397, -2, 0, 429,
	430, 849, 1015, 0, 0, 392, 394, 0, 428, 441,
	190, 0, 0, 0, 197, 199, 0, 203, 204, 849,
	0, 236, 0, 0, 217, 0, 220, -2, 223, 224,
	0, 226, 260, 229, 230, 231, 0, 233, 330, 330,
	256, 0, 566, 567, 0, 0, 0, 0, 234, 235,
	348, 182, 346, 0, 353, 350, 353, 0, 0, 353,
	353, 303, 354, 0, 0, 304, 305, 306, 307, 0,
	328, 0, 286, 0, 0, 287, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 828, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 441,
	29, 165, 0, 0, 452, 448, 0, 405, 330, 330,
	0, 0, 0, 0, 0, 428, 0, 0, 396, 0,
	0, 556, 849, 562, 564, 0, 0, 0, 849, 609,
	610, 611, 612, 613, 614, 849, 849, 849, 849, 849,
	849, 849, 641, 642, 643, 644, 0, 646, -2, 757,
	751, 759, 760, 761, 762, 763, 764, 765, 0, 0,
	809, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 0, 0, 0, 0, 677, 687, 687, 687, 687,
	687, 687, 687, 0, 0, 0, 0, 0, 850, 390,
	391, 393, 395, 399, 428, 0, 442, 215, 192, 439,
	194, 849, 0, 0, 0, 237, 0, 766, 0, 0,
	0, 0, 222, 0, 225, 227, 228, 0, 252, 0,
	254, 0, 0, -2, 849, 849, 0, 331, 295, 353,
	297, 338, 339, 298, 299, 355, 351, 352, 350, 0,
	350, 0, 0, 327, 0, 335, 0, 0, 0, 0,
	0, 403, 404, 330, 0, 0, 0, -2, 775, 0,
	457, 0, 0, -2, 0, 0, 152, 153, 149, 122,
	120, 512, 513, 0, 0, 754, 104, 0, 31, 32,
	442, 441, 30, 446, 454, 455, 456, 357, 0, 780,
	409, 410, 408, 439, 418, 419, 0, 0, 439, 440,
	441, 428, 0, 849, 0, 0, 258, 849, 849, 0,
	561, 1016, 559, 849, 0, 0, 849, 849, 849, 849,
	849, 849, 849, 849, 849, 849, 849, 849, 849, 849,
	849, 0, 0, 590, 591, 592, 593, 594, 595, 596,
	597, 598, 599, 600, 563, 0, 580, 0, 0, 0,
	556, 36, 0, 849, 607, 0, 0, 632, 849, 633,
	634, 635, 636, 637, 638, 645, 0, 756, 758, 0,
	0, 849, 849, 849, 849, 849, 849, 849, 467, 0,
	741, 0, 0, 0, 0, 0, 0, 679, 0, 680,
	681, 682, 683, 684, 685, 686, 732, 0, 734, 735,
	736, 737, 738, 739, 849, -2, 849, 849, 400, 0,
	0, 0, 0, 0, 849, 212, 0, 767, 218, 0,
	260, 221, 261, 262, 347, 232, 253, 255, 257, 0,
	849, 0, 0, 473, 479, 475, 0, 0, 479, 0,
	0, 296, 353, 329, 353, 341, 342, 0, 0, 0,
	0, 0, 554, 1015, 0, 0, 0, 783, 0, 0,
	461, 464, 459, 36, 0, 0, 155, 156, 157, 158,
	159, 0, 747, 0, 0, 0, 23, 106, 0, 0,
	442, 386, 358, 0, 360, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 406, 407,
	781, 782, 412, 0, 420, 421, 413, 0, 0, 0,
	0, 0, 0, 357, 427, 0, 557, 558, 560, 584,
	0, 586, 588, 568, 849, 849, 849, 572, 603, 604,
	605, 0, 849, 849, 849, 601, 576, 0, 615, 616,
	617, 618, 619, 620, 621, 622, 623, 624, 625, 626,
	629, 0, 640, 330, 630, 698, 699, 0, 0, 751,
	582, 583, 606, 849, 808, 36, 627, 260, 0, 628,
	639, 0, 753, 755, 0, 0, 0, 0, -2, 330,
	703, 330, 334, 706, 707, 708, 330, 711, 713, 714,
	715, 716, 334, 718, 719, 720, 721, 722, 330, 330,
	725, 726, 330, 330, 729, 330, 330, 0, 0, 0,
	0, 849, 468, 749, 744, 849, 0, 0, 674, 675,
	676, 678, 688, 733, 0, 0, 472, 0, 0, 0,
	443, 849, 258, 205, 208, 209, 0, 238, 0, 0,
	263, 647, 0, 849, 484, 653, 476, 480, 0, 482,
	483, 0, 484, 484, -2, 315, 316, 333, 336, 554,
	0, 0, 552, 0, 0, 552, 357, 787, 849, 849,
	775, 38, 0, 462, 463, 467, 465, 466, 458, 37,
	0, 160, 0, 0, 849, 514, 19, 123, 0, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 775, 849, 82, 83, 457, 457, 457, 0, 457,
	0, 0, 0, 70, 849, 0, -2, 820, 42, 43,
	144, 145, 0, 0, -2, 106, 106, -2, 106, 106,
	0, 0, 0, 0, 0, 356, 0, 361, 0, 0,
	0, 364, 0, 379, 366, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 357, 386, 259, 585, 587, 589, 569, 570, 571,
	573, 601, 577, 0, 574, 849, 849, 0, 565, 581,
	608, -2, 0, 852, 260, 654, 655, 0, 0, 849,
	700, 350, 704, 705, 709, 710, 712, 717, 723, 724,
	727, 728, 730, 731, 0, 849, 849, 849, 849, 0,
	775, 0, 745, 849, 0, 672, 673, 689, 690, 691,
	692, 0, 0, 0, 201, 0, 0, 0, 214, 219,
	648, 474, 649, 0, 481, 477, 0, 650, 651, 0,
	552, 0, 0, 357, 849, 0, 554, 357, 13, 33,
	0, 0, 784, 776, 777, 780, 783, 36, 469, 460,
	-2, 162, 849, 150, 0, 748, 0, 126, 0, 0,
	783, 0, 830, 0, 0, 58, -2, 60, 0, 0,
	855, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 65, 66, 67, 0, 0, 0, 0, 0,
	0, -2, -2, 148, 149, 105, 107, -2, 108, 109,
	110, 111, 112, 0, 0, 0, 0, 0, 387, 0,
	362, 367, 365, 368, 380, 381, 369, 370, 371, 372,
	373, 374, 375, 382, 383, 376, 377, 384, 385, 439,
	439, 0, 0, 357, 426, 386, 425, 575, 849, 602,
	578, 0, 851, 0, 854, 0, 330, 0, 0, 701,
	702, 0, 0, 0, 0, 0, 0, 742, 671, 750,
	849, 0, 444, 258, 0, 0, 210, 211, 213, 0,
	0, 0, 0, 0, 0, 249, 0, 0, 0, 652,
	357, 552, 357, 386, 553, 0, 552, 386, 788, 0,
	849, 849, 849, 779, 787, 39, 849, 470, 17, 0,
	161, 18, 0, 77, 124, 0, 0, 127, 787, 0,
	88, 86, 82, 89, 0, 0, 0, 0, 50, 0,
	491, 493, 494, 495, 527, 0, 529, 0, 0, 0,
	64, 528, 54, 0, 0, 813, 102, 103, 0, 0,
	0, -2, 0, 824, 821, 0, 68, 71, 72, 73,
	74, 75, 0, 142, 147, 0, 747, 0, 24, 843,
	0, 0, 0, 0, 359, 0, 414, 415, 0, 357,
	386, 423, 579, 631, 853, 656, 660, 657, 849, 659,
	661, 849, 663, 849, 665, 849, 667, 849, 849, 0,
	0, 746, 0, 202, 206, 207, 0, 240, 0, 242,
	243, 244, 245, 246, 247, 248, 0, 485, 0, 0,
	478, 386, 357, 10, 8, 555, 357, 12, 0, 785,
	786, 778, 34, 489, 849, 0, 78, 128, 125, 141,
	0, 0, 0, 0, 52, 0, 545, -2, 0, 0,
	0, 48, 49, 0, 0, 0, 0, 0, 0, 534,
	0, 0, 537, 0, 0, 0, 0, 0, 0, 548,
	0, 530, 0, 532, 533, 61, 527, 0, 62, 0,
	55, 0, 57, 91, 0, 0, 849, 0, 353, 825,
	826, 827, 823, 856, 0, 0, 143, 0, 0, 846,
	844, 0, 357, 357, 0, 0, 363, 0, 386, 424,
	0, 0, 0, 0, 0, 693, 670, 743, 0, 239,
	241, 250, 0, 849, 487, 7, 11, 386, 789, 552,
	0, 163, 20, 79, 0, 84, 85, 849, 87, 849,
	0, 90, 0, 0, 544, 552, 0, 552, 51, 489,
	810, 0, 492, 523, 525, 0, 520, 535, 536, 538,
	0, 540, 0, 542, 543, 496, 497, 498, 0, 0,
	0, 0, 531, 0, 814, 56, 0, 0, 94, 95,
	815, 816, 817, 0, 819, 69, 76, 0, 150, 26,
	0, 845, 386, 386, 25, 388, 0, 422, 658, 662,
	664, 666, 668, 0, 0, 0, 0, 0, 0, 772,
	774, 9, 768, 490, 0, 0, 0, 0, 802, 0,
	0, -2, 0, 0, 775, 552, 47, 552, 0, 849,
	517, 524, 849, 0, 518, 849, 519, 539, 541, 510,
	0, 0, 0, 0, 0, 515, -2, 92, 93, 0,
	0, 99, 849, 0, 847, 848, 27, 28, 0, 669,
	0, 0, 0, 417, 251, 486, 0, 849, 770, 0,
	80, 0, 0, 88, 40, 0, 802, 790, 804, 806,
	849, 36, 0, 796, -2, 798, 800, 801, 0, 783,
	46, 775, 811, 812, 521, 0, 526, 0, 0, 0,
	0, 529, 0, 96, 97, 98, 818, 0, 0, 694,
	0, 697, 488, 773, 35, 849, 849, 0, 0, 41,
	0, 807, -2, 0, 0, 0, 53, 45, 783, 0,
	0, 500, 502, 503, 504, 505, 506, 507, 508, 509,
	0, 0, 0, 548, 516, 21, 416, 695, 771, 769,
	0, 0, 805, 0, -2, 0, 797, 799, 44, 522,
	499, 0, 549, 550, 551, 498, 0, 81, 0, 793,
	36, 501, 511, 0, 803, -2, 696,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 392,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 393, 3, 394, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:422
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:427
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:428
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:436
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:441
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:461
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:481
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:502
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:518
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:535
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:555
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 14:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:570
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:581
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:593
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:604
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:620
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:634
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:648
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:661
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:675
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:686
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:692
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:706
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:720
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:740
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:758
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:776
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:785
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:800
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:808
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:815
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:821
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:825
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:831
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:835
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:842
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:854
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:866
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:870
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:876
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:882
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:886
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:890
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:895
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:896
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:900
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:904
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:909
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:913
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:919
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:923
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:927
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:931
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:937
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:941
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:954
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:958
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:964
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:969
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:973
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:979
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:986
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:993
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1000
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1008
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1018
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1022
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1026
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1030
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1034
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1040
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1047
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1061
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1065
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1069
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1076
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1084
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1094
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1098
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1105
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1115
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1126
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1131
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1136
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1143
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1147
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1158
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1162
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1168
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1172
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1176
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1182
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1186
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1190
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1194
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1200
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1210
		{
			yyVAL.str = SessionStr
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1214
		{
			yyVAL.str = GlobalStr
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1219
		{
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1220
		{
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1224
		{
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1225
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1226
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1227
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1228
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1229
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1230
		{
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1234
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1238
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1242
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1246
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1252
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1256
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1260
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1265
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1271
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1275
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1281
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1285
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1290
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1299
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1303
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1328
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1341
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1351
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1356
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1362
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1363
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1366
		{
			yyVAL.exprs = nil
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1367
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1371
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1376
		{
			yyVAL.empty = struct{}{}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1378
		{
			yyVAL.empty = struct{}{}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1381
		{
			yyVAL.bytes = nil
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1385
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1389
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1394
		{
			yyVAL.bytes = nil
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1398
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1402
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1406
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1410
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1414
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1419
		{
			yyVAL.expr = nil
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1423
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1428
		{
			yyVAL.expr = nil
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1432
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1437
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1441
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1446
		{
			yyVAL.bytes = nil
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1450
		{
			yyVAL.bytes = nil
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1456
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1463
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1469
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1473
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1478
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1482
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1486
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1490
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1494
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1498
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1504
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1508
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1513
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1518
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1524
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1535
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1541
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1554
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1559
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1564
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1569
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1575
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1580
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1585
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1590
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1595
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1600
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1605
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1610
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1615
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1624
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1634
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1639
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1644
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1651
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1658
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1666
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1671
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1676
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 211:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1681
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1687
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 213:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1693
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1700
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1707
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1713
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1719
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1723
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1727
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1731
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1735
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1741
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1745
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1749
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1753
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1757
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1761
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1765
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1769
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1773
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1777
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1781
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1787
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1793
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1799
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1805
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1809
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1814
		{
			yyVAL.sequence = &Sequence{}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1818
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1823
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1828
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1833
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1838
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1843
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1848
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1853
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1858
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1863
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1868
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1873
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1878
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1885
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1889
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1893
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1897
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1901
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1905
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1910
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1914
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1919
		{
			yyVAL.bytes = nil
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1928
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1933
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2020
		{
			yyVAL.str = ""
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2024
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2030
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2034
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2038
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2042
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2046
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2050
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2054
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2058
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2064
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2068
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2074
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2078
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2082
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2086
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2090
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2094
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2098
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2102
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2106
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2110
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2114
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2118
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2122
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2126
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2159
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2164
		{
			yyVAL.str = ""
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2168
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2174
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2178
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2182
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2186
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2190
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2194
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2198
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2202
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2206
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2212
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2217
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2222
		{
			yyVAL.optVal = nil
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2226
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2231
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2235
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2243
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2247
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2253
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2261
		{
			yyVAL.optVal = nil
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2265
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2269
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2278
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2282
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2286
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2291
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2295
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2300
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2304
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2309
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2313
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2317
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2322
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2326
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2330
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2339
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2343
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 356:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2349
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2354
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2358
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2362
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2368
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2372
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2378
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2382
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2388
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2392
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2397
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2401
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2405
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2409
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2413
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2417
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2421
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2425
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2429
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2433
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2437
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2441
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2452
		{
			yyVAL.str = ""
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2456
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2462
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2466
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2472
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2476
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2482
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2486
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2492
		{
			yyVAL.indexPartition = nil
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2496
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2500
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2506
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2510
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2514
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2518
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2522
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2526
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2530
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2534
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2538
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2542
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2546
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2550
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2556
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2560
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2566
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2571
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2577
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2581
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2587
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2592
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2596
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2606
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2611
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2618
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 414:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2625
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 415:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2632
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 416:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2641
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 417:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2652
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2663
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2667
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2671
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2675
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 422:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2681
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 423:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2691
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 424:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2702
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 425:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2713
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 426:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2724
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2733
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2742
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2746
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2750
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2756
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2760
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2764
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2768
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2772
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2776
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2782
		{
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2783
		{
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2787
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2791
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2796
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2803
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2807
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2814
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2818
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2824
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2828
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2833
		{
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2834
		{
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2838
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2842
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2846
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2856
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2860
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2865
		{
			setAllowComments(yylex, true)
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2869
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2875
		{
			yyVAL.bytes2 = nil
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2879
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2885
		{
			yyVAL.str = UnionStr
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2889
		{
			yyVAL.str = UnionAllStr
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2893
		{
			yyVAL.str = UnionDistinctStr
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.str = ""
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2906
		{
			yyVAL.str = SQLCacheStr
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2911
		{
			yyVAL.str = ""
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2915
		{
			yyVAL.str = DistinctStr
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2920
		{
			yyVAL.str = ""
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2924
		{
			yyVAL.str = StraightJoinHint
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2929
		{
			yyVAL.selectExprs = nil
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2933
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2939
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2943
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2949
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2953
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 478:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2966
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2970
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2974
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2981
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2986
		{
			yyVAL.overExpr = nil
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 486:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2994
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2998
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 488:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3002
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3007
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3011
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3017
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3021
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3031
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3035
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3039
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3044
		{
			yyVAL.strs = []string{}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3048
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3054
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3058
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3064
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3072
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3076
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3080
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3084
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3088
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3092
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3098
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 511:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3102
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3108
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3113
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3117
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3123
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3127
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3140
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3144
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3148
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3152
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3158
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3160
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3164
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3166
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3170
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3172
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3175
		{
			yyVAL.empty = struct{}{}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3177
		{
			yyVAL.empty = struct{}{}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3180
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3184
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3188
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3195
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3201
		{
			yyVAL.str = JoinStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3205
		{
			yyVAL.str = JoinStr
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.str = JoinStr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3215
		{
			yyVAL.str = StraightJoinStr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3221
		{
			yyVAL.str = LeftJoinStr
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3225
		{
			yyVAL.str = LeftJoinStr
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3229
		{
			yyVAL.str = RightJoinStr
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3233
		{
			yyVAL.str = RightJoinStr
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3239
		{
			yyVAL.str = NaturalJoinStr
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3243
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3253
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3257
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3263
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3267
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3272
		{
			yyVAL.indexHints = nil
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3276
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3280
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3284
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3289
		{
			yyVAL.expr = nil
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3293
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3298
		{
			yyVAL.columns = nil
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3302
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3312
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3316
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3320
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3324
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3328
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3332
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3336
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3342
		{
			yyVAL.str = ""
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3346
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3352
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3356
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3362
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3366
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3370
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3374
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3378
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3382
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3386
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 575:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3390
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3394
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3398
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3402
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 579:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3406
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3410
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3415
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3419
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3423
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3429
		{
			yyVAL.str = IsNullStr
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.str = IsNotNullStr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.str = IsTrueStr
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.str = IsNotTrueStr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3445
		{
			yyVAL.str = IsFalseStr
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3449
		{
			yyVAL.str = IsNotFalseStr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3455
		{
			yyVAL.str = EqualStr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3459
		{
			yyVAL.str = LessThanStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.str = GreaterThanStr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.str = LessEqualStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.str = GreaterEqualStr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3475
		{
			yyVAL.str = NotEqualStr
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3479
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3483
		{
			yyVAL.str = PosixRegexStr
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3487
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3491
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3495
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3500
		{
			yyVAL.expr = nil
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3504
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3510
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3514
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3518
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3524
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3530
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3534
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3540
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3544
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3548
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3552
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3556
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3560
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3564
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3568
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3572
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3576
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3580
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3584
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3588
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3592
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3596
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3600
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3604
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3608
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3612
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3616
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3620
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3624
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 631:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3628
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3632
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3636
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3640
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3648
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3662
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3666
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3670
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3678
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3686
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3694
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3698
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3708
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3712
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3716
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3720
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3724
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 652:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3728
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3732
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3742
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3746
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 656:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3750
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 657:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3755
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 658:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3759
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 659:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3763
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 660:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 661:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 662:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3775
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 663:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3779
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 664:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3783
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 665:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 666:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3791
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 667:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3795
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 668:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3799
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 669:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3803
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 670:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3807
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3811
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3815
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3820
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3824
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3828
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3843
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3847
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3851
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3855
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3859
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3864
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3869
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3874
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3879
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3883
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 689:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3897
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3901
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3905
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3909
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3915
		{
			yyVAL.str = ""
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.str = BooleanModeStr
		}
	case 695:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 696:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3927
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3931
		{
			yyVAL.str = QueryExpansionStr
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3941
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3947
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3951
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3955
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3963
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3973
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3977
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3981
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3989
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3993
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3997
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4001
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4005
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4009
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4013
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4017
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4021
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4025
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4029
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4033
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4037
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4045
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4049
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4053
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4069
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4073
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4079
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4083
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4087
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4091
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4095
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4099
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4103
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4107
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4112
		{
			yyVAL.expr = nil
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4116
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4121
		{
			yyVAL.str = string("")
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4125
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4131
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4141
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4146
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4148
		{
			yyVAL.empty = struct{}{}
		}
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4151
		{
			yyVAL.expr = nil
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4155
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4161
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4165
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4169
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 754:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4173
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4179
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4194
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4199
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4203
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4207
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4219
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4223
		{
			yyVAL.expr = &NullVal{}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4229
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4233
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4238
		{
			yyVAL.exprs = nil
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4242
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 770:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4247
		{
			yyVAL.expr = nil
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4251
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4257
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4261
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4267
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4272
		{
			yyVAL.orderBy = nil
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4276
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4282
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4286
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4292
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 780:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4297
		{
			yyVAL.str = AscScr
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4301
		{
			yyVAL.str = AscScr
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4305
		{
			yyVAL.str = DescScr
		}
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4310
		{
			yyVAL.limit = nil
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4314
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4318
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 786:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4322
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4327
		{
			yyVAL.str = ""
		}
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4331
		{
			yyVAL.str = ForUpdateStr
		}
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4335
		{
			yyVAL.str = ShareModeStr
		}
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4348
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4352
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4356
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 793:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4361
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4365
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 795:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4369
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4376
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4380
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4386
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4390
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4394
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4398
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4403
		{
			yyVAL.updateExprs = nil
		}
	case 803:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4407
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4413
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4417
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4423
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4427
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4433
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4439
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4449
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4453
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4459
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4465
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4469
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4475
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4479
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4483
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 818:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4488
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4498
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4504
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4511
		{
			yyVAL.bytes = []byte("charset")
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4518
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4522
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4526
		{
			yyVAL.expr = &Default{}
		}
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4531
		{
			yyVAL.empty = struct{}{}
		}
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4533
		{
			yyVAL.empty = struct{}{}
		}
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4536
		{
			yyVAL.str = ""
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4538
		{
			yyVAL.str = IgnoreStr
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4542
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4549
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4553
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4557
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4561
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4567
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4571
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4576
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4583
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4589
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4593
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4597
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4603
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4607
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4611
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4617
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4621
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 851:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4628
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4635
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4639
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4646
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4652
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4656
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4833
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4842
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
