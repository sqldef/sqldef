// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const POSIX_REGEX = 57427
const POSIX_REGEX_CI = 57428
const POSIX_NOT_REGEX = 57429
const POSIX_NOT_REGEX_CI = 57430
const SHIFT_LEFT = 57431
const SHIFT_RIGHT = 57432
const DIV = 57433
const MOD = 57434
const UNARY = 57435
const COLLATE = 57436
const BINARY = 57437
const UNDERSCORE_BINARY = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const SCHEMA = 57448
const TABLE = 57449
const INDEX = 57450
const MATERIALIZED = 57451
const VIEW = 57452
const TO = 57453
const IGNORE = 57454
const IF = 57455
const PRIMARY = 57456
const COLUMN = 57457
const CONSTRAINT = 57458
const REFERENCES = 57459
const SPATIAL = 57460
const FULLTEXT = 57461
const FOREIGN = 57462
const KEY_BLOCK_SIZE = 57463
const POLICY = 57464
const WHILE = 57465
const UNIQUE = 57466
const KEY = 57467
const SHOW = 57468
const DESCRIBE = 57469
const EXPLAIN = 57470
const DATE = 57471
const ESCAPE = 57472
const REPAIR = 57473
const OPTIMIZE = 57474
const TRUNCATE = 57475
const MAXVALUE = 57476
const PARTITION = 57477
const REORGANIZE = 57478
const LESS = 57479
const THAN = 57480
const PROCEDURE = 57481
const TRIGGER = 57482
const TYPE = 57483
const VINDEX = 57484
const VINDEXES = 57485
const STATUS = 57486
const VARIABLES = 57487
const RESTRICT = 57488
const CASCADE = 57489
const NO = 57490
const ACTION = 57491
const PERMISSIVE = 57492
const RESTRICTIVE = 57493
const PUBLIC = 57494
const CURRENT_USER = 57495
const SESSION_USER = 57496
const PAD_INDEX = 57497
const FILLFACTOR = 57498
const IGNORE_DUP_KEY = 57499
const STATISTICS_NORECOMPUTE = 57500
const STATISTICS_INCREMENTAL = 57501
const ALLOW_ROW_LOCKS = 57502
const ALLOW_PAGE_LOCKS = 57503
const BEFORE = 57504
const AFTER = 57505
const EACH = 57506
const ROW = 57507
const SCROLL = 57508
const CURSOR = 57509
const OPEN = 57510
const CLOSE = 57511
const FETCH = 57512
const PRIOR = 57513
const FIRST = 57514
const LAST = 57515
const DEALLOCATE = 57516
const DEFERRABLE = 57517
const INITIALLY = 57518
const IMMEDIATE = 57519
const DEFERRED = 57520
const CONCURRENTLY = 57521
const BEGIN = 57522
const START = 57523
const TRANSACTION = 57524
const COMMIT = 57525
const ROLLBACK = 57526
const BIT = 57527
const TINYINT = 57528
const SMALLINT = 57529
const SMALLSERIAL = 57530
const MEDIUMINT = 57531
const INT = 57532
const INTEGER = 57533
const SERIAL = 57534
const BIGINT = 57535
const BIGSERIAL = 57536
const INTNUM = 57537
const REAL = 57538
const DOUBLE = 57539
const PRECISION = 57540
const FLOAT_TYPE = 57541
const DECIMAL = 57542
const NUMERIC = 57543
const SMALLMONEY = 57544
const MONEY = 57545
const TIME = 57546
const TIMESTAMP = 57547
const DATETIME = 57548
const YEAR = 57549
const DATETIMEOFFSET = 57550
const DATETIME2 = 57551
const SMALLDATETIME = 57552
const CHAR = 57553
const VARCHAR = 57554
const VARYING = 57555
const BOOL = 57556
const CHARACTER = 57557
const VARBINARY = 57558
const NCHAR = 57559
const NVARCHAR = 57560
const NTEXT = 57561
const UUID = 57562
const TEXT = 57563
const TINYTEXT = 57564
const MEDIUMTEXT = 57565
const LONGTEXT = 57566
const CITEXT = 57567
const BLOB = 57568
const TINYBLOB = 57569
const MEDIUMBLOB = 57570
const LONGBLOB = 57571
const JSON = 57572
const JSONB = 57573
const ENUM = 57574
const GEOMETRY = 57575
const POINT = 57576
const LINESTRING = 57577
const POLYGON = 57578
const GEOMETRYCOLLECTION = 57579
const MULTIPOINT = 57580
const MULTILINESTRING = 57581
const MULTIPOLYGON = 57582
const VARIADIC = 57583
const ARRAY = 57584
const NOW = 57585
const GETDATE = 57586
const BPCHAR = 57587
const TEXT_PATTERN_OPS = 57588
const NULLX = 57589
const AUTO_INCREMENT = 57590
const APPROXNUM = 57591
const SIGNED = 57592
const UNSIGNED = 57593
const ZEROFILL = 57594
const ZONE = 57595
const AUTOINCREMENT = 57596
const DATABASES = 57597
const TABLES = 57598
const VITESS_KEYSPACES = 57599
const VITESS_SHARDS = 57600
const VITESS_TABLETS = 57601
const VSCHEMA_TABLES = 57602
const EXTENDED = 57603
const FULL = 57604
const PROCESSLIST = 57605
const NAMES = 57606
const CHARSET = 57607
const GLOBAL = 57608
const SESSION = 57609
const ISOLATION = 57610
const LEVEL = 57611
const READ = 57612
const WRITE = 57613
const ONLY = 57614
const REPEATABLE = 57615
const COMMITTED = 57616
const UNCOMMITTED = 57617
const SERIALIZABLE = 57618
const NEW = 57619
const CURRENT_TIMESTAMP = 57620
const DATABASE = 57621
const CURRENT_DATE = 57622
const CURRENT_TIME = 57623
const LOCALTIME = 57624
const LOCALTIMESTAMP = 57625
const UTC_DATE = 57626
const UTC_TIME = 57627
const UTC_TIMESTAMP = 57628
const REPLACE = 57629
const CONVERT = 57630
const CAST = 57631
const SUBSTR = 57632
const SUBSTRING = 57633
const GROUP_CONCAT = 57634
const SEPARATOR = 57635
const INHERIT = 57636
const MATCH = 57637
const AGAINST = 57638
const BOOLEAN = 57639
const LANGUAGE = 57640
const WITH = 57641
const WITHOUT = 57642
const PARSER = 57643
const QUERY = 57644
const EXPANSION = 57645
const UNUSED = 57646
const VIRTUAL = 57647
const STORED = 57648
const GENERATED = 57649
const ALWAYS = 57650
const IDENTITY = 57651
const SEQUENCE = 57652
const INCREMENT = 57653
const MINVALUE = 57654
const CACHE = 57655
const CYCLE = 57656
const OWNED = 57657
const NONE = 57658
const CLUSTERED = 57659
const NONCLUSTERED = 57660
const REPLICATION = 57661
const INCLUDE = 57662
const HOLDLOCK = 57663
const NOLOCK = 57664
const NOWAIT = 57665
const PAGLOCK = 57666
const ROWLOCK = 57667
const TABLELOCK = 57668
const TYPECAST = 57669
const CHECK = 57670

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	127, 143,
	-2, 133,
	-1, 36,
	161, 473,
	162, 473,
	-2, 463,
	-1, 274,
	114, 831,
	-2, 827,
	-1, 275,
	114, 832,
	-2, 828,
	-1, 317,
	259, 841,
	-2, 725,
	-1, 349,
	81, 1056,
	-2, 82,
	-1, 350,
	81, 1006,
	-2, 83,
	-1, 356,
	81, 985,
	-2, 798,
	-1, 358,
	81, 1030,
	-2, 800,
	-1, 612,
	259, 841,
	-2, 501,
	-1, 661,
	259, 841,
	-2, 501,
	-1, 690,
	52, 41,
	54, 41,
	-2, 43,
	-1, 852,
	114, 834,
	-2, 830,
	-1, 1106,
	259, 841,
	-2, 501,
	-1, 1128,
	5, 28,
	-2, 622,
	-1, 1154,
	5, 27,
	-2, 771,
	-1, 1201,
	56, 353,
	-2, 350,
	-1, 1443,
	5, 27,
	-2, 90,
	-1, 1444,
	5, 27,
	-2, 91,
	-1, 1502,
	5, 28,
	-2, 772,
	-1, 1607,
	5, 27,
	-2, 774,
	-1, 1748,
	184, 54,
	-2, 161,
	-1, 1776,
	5, 28,
	-2, 775,
	-1, 1931,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 19474

var yyAct = [...]int16{
	275, 1883, 1662, 1766, 1622, 1665, 1052, 272, 1508, 1535,
	1749, 782, 538, 1619, 1738, 253, 270, 1728, 939, 1574,
	1190, 290, 616, 279, 1573, 53, 1170, 1512, 1358, 957,
	615, 3, 1388, 1193, 489, 91, 828, 1359, 91, 307,
	977, 1525, 684, 1264, 278, 1783, 1705, 525, 1216, 1355,
	682, 1044, 983, 1060, 1157, 1117, 247, 998, 1061, 940,
	1222, 1330, 91, 91, 360, 610, 1175, 877, 1111, 909,
	360, 66, 904, 360, 360, 91, 1120, 355, 252, 1249,
	91, 788, 91, 1039, 993, 700, 21, 927, 91, 1162,
	854, 686, 487, 544, 699, 348, 671, 335, 936, 720,
	248, 249, 250, 251, 336, 1828, 277, 262, 550, 495,
	1233, 351, 334, 1027, 714, 1093, 715, 639, 1324, 558,
	1513, 1514, 1515, 1516, 1517, 1518, 1492, 537, 1014, 266,
	896, 345, 341, 1884, 1910, 1011, 1395, 52, 1696, 1876,
	611, 582, 257, 571, 570, 580, 581, 573, 574, 575,
	576, 577, 578, 579, 572, 572, 1415, 582, 582, 1739,
	343, 1541, 1803, 1401, 490, 491, 1867, 88, 571, 570,
	580, 581, 573, 574, 575, 576, 577, 578, 579, 572,
	1402, 497, 582, 1549, 1214, 501, 575, 576, 577, 578,
	579, 572, 1944, 282, 582, 344, 1801, 1802, 1848, 1937,
	1774, 1710, 537, 1709, 1121, 1122, 1922, 500, 1860, 1053,
	296, 1819, 504, 1171, 505, 1114, 1013, 1847, 1773, 1350,
	512, 1798, 1496, 502, 1381, 1017, 91, 701, 1406, 702,
	360, 360, 360, 360, 970, 360, 533, 86, 82, 83,
	1476, 84, 360, 571, 570, 580, 581, 573, 574, 575,
	576, 577, 578, 579, 572, 339, 1475, 582, 1807, 1382,
	1383, 819, 1227, 907, 1229, 1228, 1473, 1183, 820, 360,
	1182, 1235, 1809, 1184, 354, 971, 972, 1016, 609, 1596,
	494, 1028, 546, 498, 499, 1660, 1018, 1018, 1119, 547,
	931, 601, 602, 603, 604, 605, 606, 607, 566, 630,
	569, 1327, 1326, 1322, 1485, 1804, 584, 585, 586, 587,
	588, 589, 590, 518, 567, 568, 565, 591, 592, 593,
	594, 571, 570, 580, 581, 573, 574, 575, 576, 577,
	578, 579, 572, 1483, 91, 582, 1040, 246, 1942, 900,
	1838, 91, 91, 91, 1866, 1918, 1868, 360, 1935, 1934,
	1396, 1919, 1889, 1490, 360, 1881, 490, 491, 514, 1744,
	1664, 1638, 259, 1697, 48, 26, 27, 573, 574, 575,
	576, 577, 578, 579, 572, 583, 1676, 582, 1449, 1450,
	1729, 520, 529, 530, 522, 790, 28, 1768, 1767, 1302,
	1936, 583, 583, 1538, 351, 571, 570, 580, 581, 573,
	574, 575, 576, 577, 578, 579, 572, 1920, 937, 582,
	85, 1604, 1323, 519, 521, 1455, 583, 580, 581, 573,
	574, 575, 576, 577, 578, 579, 572, 644, 583, 582,
	994, 1543, 1456, 1542, 1208, 1805, 1806, 1808, 1810, 1811,
	354, 354, 354, 354, 645, 354, 1299, 995, 898, 1207,
	1195, 1404, 354, 1589, 1394, 1028, 1550, 1897, 897, 1754,
	1465, 1687, 1941, 1021, 901, 1859, 666, 790, 1710, 496,
	597, 1888, 507, 902, 903, 690, 80, 1580, 697, 560,
	798, 958, 960, 503, 1772, 493, 1682, 1200, 899, 360,
	1303, 583, 79, 1213, 80, 1533, 1681, 1533, 1041, 789,
	492, 1174, 91, 691, 91, 360, 1173, 91, 1172, 779,
	91, 57, 225, 81, 91, 1926, 360, 360, 360, 360,
	360, 360, 360, 360, 599, 600, 1536, 1537, 1539, 1701,
	360, 360, 1505, 1423, 339, 91, 59, 60, 61, 62,
	63, 1677, 1678, 1680, 1311, 791, 792, 1679, 1300, 1139,
	360, 1298, 1105, 517, 91, 826, 1201, 354, 704, 614,
	360, 959, 831, 562, 706, 1301, 513, 823, 1198, 583,
	979, 978, 853, 995, 557, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	1431, 807, 1721, 1932, 713, 1088, 1623, 1132, 1720, 1131,
	360, 360, 780, 781, 1719, 855, 1718, 1135, 360, 1625,
	851, 583, 1755, 1756, 1757, 360, 556, 555, 1307, 1717,
	632, 633, 634, 635, 636, 637, 638, 791, 792, 805,
	555, 920, 1716, 557, 794, 906, 795, 994, 1715, 799,
	852, 1713, 802, 583, 1446, 1432, 557, 919, 921, 914,
	1134, 556, 555, 929, 995, 1185, 833, 1160, 1837, 703,
	49, 1930, 910, 583, 928, 1352, 91, 821, 557, 91,
	91, 91, 91, 91, 1933, 1089, 488, 1192, 850, 848,
	785, 91, 1624, 883, 91, 928, 840, 1144, 91, 1784,
	1637, 941, 552, 91, 91, 1306, 78, 360, 880, 719,
	645, 882, 1915, 50, 1900, 360, 892, 894, 1785, 861,
	1204, 599, 600, 857, 914, 354, 1626, 1627, 1628, 1629,
	1630, 1631, 1632, 859, 860, 858, 354, 354, 354, 354,
	354, 354, 354, 354, 933, 925, 844, 846, 847, 1899,
	354, 354, 845, 965, 351, 994, 1640, 556, 555, 829,
	830, 989, 976, 988, 1354, 990, 991, 333, 1203, 856,
	835, 992, 995, 1861, 557, 1133, 942, 1865, 1192, 945,
	560, 548, 1864, 354, 943, 944, 954, 946, 1863, 962,
	360, 91, 91, 1011, 825, 360, 506, 360, 91, 963,
	91, 537, 967, 968, 360, 556, 555, 91, 938, 91,
	1731, 1714, 91, 360, 981, 1000, 1862, 556, 555, 1636,
	893, 893, 557, 556, 555, 1786, 556, 555, 895, 1007,
	824, 996, 556, 555, 557, 354, 966, 997, 1046, 1191,
	557, 1192, 1561, 557, 1782, 922, 1236, 556, 555, 557,
	922, 1102, 1103, 1104, 1095, 1236, 1650, 1029, 1030, 1031,
	1032, 1192, 1560, 1569, 557, 1568, 1236, 1042, 1043, 1411,
	1621, 1256, 339, 339, 339, 339, 339, 1108, 1109, 1110,
	1254, 509, 510, 511, 851, 50, 1603, 339, 922, 878,
	613, 879, 1566, 915, 916, 1003, 339, 999, 1008, 924,
	1118, 1467, 1250, 1210, 613, 1005, 1004, 1711, 855, 1066,
	1742, 1949, 1530, 1921, 852, 1611, 1907, 354, 1399, 360,
	1530, 1872, 537, 1050, 1051, 354, 1530, 1855, 1871, 536,
	1059, 1094, 1065, 1398, 932, 1397, 934, 935, 1202, 1083,
	1186, 1084, 1742, 1854, 1085, 673, 676, 677, 678, 674,
	1046, 675, 679, 1851, 1850, 1163, 1164, 1843, 537, 1107,
	1019, 1020, 1022, 1023, 1024, 1055, 1025, 1026, 1530, 1840,
	1530, 1839, 360, 1611, 1764, 91, 1279, 1154, 891, 1042,
	1043, 1611, 1647, 1035, 1036, 1037, 804, 1038, 1611, 537,
	1077, 360, 1614, 1613, 1611, 1612, 1530, 1529, 1817, 360,
	1047, 1378, 537, 1735, 1076, 354, 803, 354, 1504, 537,
	360, 1438, 1437, 1734, 719, 1434, 1435, 1434, 1433, 91,
	1126, 537, 23, 354, 1143, 1178, 912, 537, 1177, 1001,
	1179, 1081, 668, 537, 694, 1002, 786, 1209, 1188, 784,
	1075, 711, 710, 1226, 515, 1167, 1152, 354, 508, 1153,
	1623, 1280, 1276, 1273, 1733, 1281, 1278, 1277, 488, 91,
	360, 76, 856, 1625, 360, 1180, 1224, 1659, 1655, 50,
	1654, 1743, 1282, 1742, 23, 695, 1651, 693, 1243, 1275,
	1245, 1246, 1247, 1248, 1587, 1196, 1197, 1199, 1009, 1562,
	1010, 1552, 1424, 1072, 1069, 1070, 360, 1068, 1159, 91,
	91, 1606, 1356, 54, 1158, 1158, 1314, 91, 667, 1006,
	1268, 1265, 1101, 1269, 912, 1269, 360, 1159, 1138, 1826,
	1500, 50, 1252, 1253, 1251, 1530, 668, 1079, 1082, 560,
	1320, 1321, 668, 23, 1271, 1255, 1624, 964, 1551, 693,
	668, 1445, 1126, 1237, 1238, 1436, 1240, 1241, 1242, 1126,
	1272, 1211, 1344, 1345, 1346, 1347, 1348, 1270, 969, 1158,
	1126, 1137, 696, 1316, 1571, 1570, 360, 360, 339, 827,
	1626, 1627, 1628, 1629, 1630, 1631, 1632, 1351, 50, 1124,
	50, 1357, 1176, 1938, 259, 1845, 941, 1318, 1816, 1317,
	1737, 1259, 941, 1366, 1325, 1736, 1362, 1349, 360, 1141,
	360, 354, 1725, 1360, 1724, 1343, 1329, 1074, 1684, 1194,
	1342, 1683, 783, 1379, 1661, 1649, 1590, 1422, 1018, 1387,
	1205, 1045, 259, 1441, 48, 26, 27, 852, 1367, 1421,
	77, 50, 1231, 1365, 1419, 1408, 1676, 1373, 1371, 1312,
	1073, 1257, 1258, 1380, 1040, 1386, 28, 1400, 1215, 1226,
	1189, 1034, 673, 676, 677, 678, 674, 1239, 675, 679,
	1163, 1164, 951, 1033, 1706, 65, 1730, 952, 91, 360,
	1260, 1572, 1224, 1403, 354, 1442, 1412, 1405, 1356, 91,
	1078, 1166, 71, 75, 360, 68, 360, 801, 1425, 1426,
	787, 1428, 1429, 1430, 1414, 360, 1080, 1416, 72, 534,
	76, 839, 1443, 1444, 949, 1169, 354, 91, 953, 950,
	677, 678, 1168, 360, 1708, 948, 73, 74, 69, 947,
	263, 264, 360, 1894, 1846, 91, 354, 1310, 1090, 551,
	1892, 1100, 1099, 539, 1453, 1244, 709, 1472, 1452, 516,
	1410, 1458, 549, 1498, 1882, 540, 1682, 829, 830, 1057,
	1460, 1591, 800, 1409, 1267, 1582, 1681, 1583, 1584, 1585,
	354, 1262, 1261, 1427, 1463, 793, 1466, 681, 551, 1316,
	1581, 260, 261, 922, 1911, 1470, 1364, 1176, 1469, 922,
	1586, 1448, 360, 1098, 1393, 360, 360, 360, 91, 360,
	1474, 1097, 1507, 1519, 1520, 1521, 360, 1481, 254, 1869,
	1439, 1677, 1678, 1680, 1690, 1524, 255, 1679, 354, 54,
	1389, 1451, 1540, 1836, 1689, 1594, 1159, 1499, 1834, 360,
	1062, 1063, 1064, 58, 1833, 1832, 360, 1548, 1831, 553,
	1522, 1800, 1799, 1723, 360, 1546, 1392, 1391, 1231, 1462,
	1722, 1698, 1206, 1526, 822, 1226, 1545, 56, 1671, 8,
	1668, 7, 1274, 91, 1454, 70, 360, 360, 1669, 6,
	1667, 5, 692, 1418, 1420, 360, 51, 1, 1224, 1116,
	608, 294, 1553, 1575, 1917, 1887, 360, 832, 1564, 1440,
	280, 1563, 570, 580, 581, 573, 574, 575, 576, 577,
	578, 579, 572, 1511, 1457, 582, 1459, 1827, 1579, 1578,
	1747, 1822, 1753, 1265, 1526, 1461, 1732, 1597, 1598, 1212,
	1599, 1600, 1601, 67, 1818, 360, 360, 1741, 339, 1447,
	49, 1266, 1283, 1464, 1054, 1263, 1071, 1765, 1779, 1620,
	1532, 986, 354, 980, 1187, 486, 64, 1712, 987, 985,
	984, 360, 982, 712, 1607, 911, 913, 1012, 1605, 1234,
	1360, 1015, 718, 360, 716, 717, 721, 1565, 233, 1567,
	346, 930, 1618, 680, 705, 554, 1635, 1478, 1479, 1297,
	1480, 1639, 1296, 1633, 1482, 1067, 1484, 1305, 1634, 818,
	1087, 532, 360, 91, 235, 1577, 1641, 595, 1643, 1096,
	1181, 360, 1509, 353, 1363, 1509, 1509, 1509, 543, 1523,
	1688, 360, 1575, 1595, 1593, 1656, 354, 1142, 627, 1685,
	926, 281, 956, 843, 293, 292, 1652, 291, 1653, 834,
	1151, 564, 360, 338, 664, 1531, 1534, 672, 670, 1509,
	669, 1165, 1161, 337, 1231, 1707, 1554, 1313, 1495, 1695,
	838, 25, 55, 265, 354, 1699, 19, 18, 17, 1700,
	20, 16, 1703, 15, 14, 1704, 1360, 29, 13, 12,
	11, 10, 1576, 9, 1674, 1673, 354, 354, 1672, 1670,
	4, 256, 22, 2, 0, 1588, 0, 0, 0, 0,
	0, 0, 308, 47, 1675, 0, 1592, 360, 360, 360,
	360, 0, 0, 1575, 360, 360, 1740, 0, 0, 1759,
	0, 0, 0, 0, 0, 0, 0, 0, 1758, 1761,
	0, 1746, 360, 1762, 1763, 1658, 0, 360, 0, 1289,
	0, 360, 0, 1770, 1780, 1609, 1610, 1775, 0, 583,
	47, 1666, 941, 0, 0, 360, 360, 1794, 258, 0,
	0, 0, 1792, 1793, 340, 0, 0, 0, 360, 0,
	0, 1389, 0, 360, 1796, 1795, 0, 0, 0, 360,
	1812, 0, 1675, 1642, 360, 0, 0, 1814, 1575, 0,
	0, 1813, 1825, 1787, 1788, 1789, 1790, 1791, 360, 0,
	0, 0, 0, 0, 0, 0, 1841, 0, 1290, 0,
	0, 1576, 1657, 523, 1292, 1285, 1286, 0, 1293, 1288,
	1287, 1663, 0, 1815, 1295, 1291, 0, 0, 0, 1745,
	0, 1509, 1531, 0, 0, 1294, 268, 0, 0, 1857,
	1858, 1115, 1284, 1852, 1853, 1856, 0, 360, 0, 0,
	0, 0, 1702, 0, 1123, 1874, 1125, 360, 0, 1873,
	0, 1675, 1875, 0, 1128, 1129, 1130, 1879, 1878, 0,
	1886, 0, 0, 1885, 1140, 1675, 360, 1891, 1890, 1146,
	360, 0, 1147, 1148, 1149, 1150, 1896, 0, 0, 0,
	0, 0, 0, 0, 0, 1893, 0, 1870, 0, 1898,
	91, 0, 1576, 0, 0, 0, 0, 0, 1823, 0,
	0, 360, 0, 360, 1903, 0, 1905, 1748, 1750, 1751,
	1752, 0, 1835, 0, 1389, 1389, 0, 0, 91, 0,
	0, 0, 524, 524, 524, 524, 0, 524, 0, 922,
	0, 1675, 1777, 0, 524, 0, 0, 1778, 1928, 0,
	1906, 1781, 1929, 1675, 1675, 1675, 1904, 360, 1331, 0,
	1908, 47, 0, 0, 0, 1663, 1389, 0, 0, 360,
	0, 1945, 1931, 0, 1946, 1925, 596, 1576, 1389, 598,
	1927, 1947, 0, 1820, 0, 0, 0, 0, 1877, 719,
	0, 0, 0, 1333, 1830, 0, 0, 0, 0, 612,
	1675, 1666, 1675, 1675, 1939, 0, 1940, 0, 1844, 0,
	0, 618, 619, 620, 621, 622, 623, 624, 625, 626,
	0, 629, 631, 631, 631, 631, 631, 631, 631, 631,
	0, 660, 661, 662, 663, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 526, 527, 528, 1914, 531, 1745,
	1914, 0, 0, 0, 0, 535, 0, 1509, 0, 1675,
	1924, 0, 0, 1675, 1335, 0, 0, 1880, 1340, 542,
	1334, 0, 0, 0, 1328, 1332, 0, 0, 0, 0,
	0, 1338, 0, 0, 0, 0, 1389, 0, 0, 0,
	1895, 541, 545, 0, 1336, 1337, 0, 0, 0, 0,
	0, 0, 0, 1493, 89, 0, 0, 245, 563, 0,
	1914, 0, 0, 0, 1339, 1341, 0, 0, 1489, 0,
	0, 719, 0, 1912, 0, 1377, 0, 0, 0, 269,
	0, 89, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 617, 0, 0, 0, 89,
	0, 89, 0, 0, 628, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1663,
	571, 570, 580, 581, 573, 574, 575, 576, 577, 578,
	579, 572, 0, 0, 582, 571, 570, 580, 581, 573,
	574, 575, 576, 577, 578, 579, 572, 524, 0, 582,
	1319, 0, 0, 0, 0, 0, 0, 0, 524, 524,
	524, 524, 524, 524, 524, 524, 1136, 0, 0, 0,
	0, 0, 524, 524, 571, 570, 580, 581, 573, 574,
	575, 576, 577, 578, 579, 572, 0, 0, 582, 0,
	0, 571, 570, 580, 581, 573, 574, 575, 576, 577,
	578, 579, 572, 0, 0, 582, 0, 1471, 571, 570,
	580, 581, 573, 574, 575, 576, 577, 578, 579, 572,
	1477, 0, 582, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1486, 1487, 1488, 89, 0, 1491, 0, 0,
	0, 47, 1112, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 1502, 1503, 0, 1506, 0, 0, 797, 0,
	0, 618, 0, 1113, 0, 0, 0, 0, 0, 808,
	809, 810, 811, 812, 813, 814, 815, 0, 0, 0,
	0, 640, 0, 816, 817, 0, 0, 571, 570, 580,
	581, 573, 574, 575, 576, 577, 578, 579, 572, 0,
	0, 582, 0, 0, 0, 0, 0, 1559, 0, 0,
	0, 340, 340, 340, 340, 340, 642, 0, 0, 0,
	259, 0, 48, 26, 27, 0, 683, 0, 961, 0,
	0, 0, 841, 842, 1676, 340, 0, 0, 0, 0,
	0, 0, 0, 89, 28, 0, 0, 0, 0, 0,
	89, 688, 89, 0, 0, 571, 570, 580, 581, 573,
	574, 575, 576, 577, 578, 579, 572, 0, 583, 582,
	0, 0, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 0, 583, 0, 1602, 0, 0, 0, 908,
	0, 0, 0, 643, 1950, 617, 0, 0, 917, 918,
	0, 658, 641, 0, 0, 0, 0, 647, 646, 1615,
	1616, 1617, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 0, 0, 0, 0, 524, 0, 524,
	0, 0, 0, 0, 0, 0, 0, 1646, 0, 583,
	0, 0, 0, 0, 1682, 524, 0, 259, 0, 48,
	26, 27, 0, 0, 1681, 0, 583, 0, 0, 0,
	0, 1676, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 28, 259, 0, 48, 26, 27, 0, 0, 0,
	975, 0, 0, 0, 659, 0, 1676, 1691, 1692, 1693,
	1694, 0, 0, 0, 1106, 0, 28, 0, 0, 1677,
	1678, 1680, 0, 0, 0, 1679, 0, 0, 0, 0,
	0, 89, 0, 89, 0, 0, 89, 0, 0, 89,
	0, 1916, 0, 806, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1726, 583, 0, 0, 1056, 0,
	1058, 0, 0, 0, 89, 0, 1913, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 1682, 806, 0, 0, 0, 0, 0, 0, 1155,
	1156, 1681, 0, 0, 0, 1771, 0, 0, 0, 0,
	1776, 0, 0, 0, 0, 259, 1682, 48, 26, 27,
	0, 1091, 1092, 583, 545, 0, 1681, 340, 0, 1676,
	0, 0, 0, 0, 0, 640, 0, 1797, 49, 28,
	0, 0, 269, 0, 0, 0, 1677, 1678, 1680, 269,
	269, 0, 1679, 0, 923, 269, 0, 0, 0, 923,
	23, 24, 48, 26, 27, 0, 0, 0, 0, 0,
	642, 1677, 1678, 1680, 0, 1842, 0, 1679, 0, 0,
	42, 0, 0, 0, 28, 0, 0, 0, 0, 0,
	269, 269, 269, 269, 0, 89, 0, 923, 89, 89,
	89, 89, 89, 37, 0, 0, 0, 50, 0, 1127,
	955, 0, 0, 89, 0, 0, 0, 688, 0, 0,
	0, 0, 89, 89, 0, 1145, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 0, 884, 885, 1682,
	886, 887, 888, 890, 889, 0, 881, 643, 524, 1681,
	0, 0, 0, 0, 0, 658, 641, 0, 0, 0,
	0, 647, 646, 0, 0, 49, 0, 0, 0, 0,
	0, 30, 31, 33, 32, 35, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 0, 1677, 1678, 1680, 36, 43, 44,
	1679, 0, 45, 46, 34, 1923, 1824, 0, 0, 0,
	89, 89, 0, 0, 0, 0, 1361, 89, 47, 89,
	0, 0, 0, 231, 0, 0, 89, 0, 89, 0,
	0, 89, 0, 0, 0, 1374, 1375, 1376, 659, 0,
	0, 0, 0, 0, 0, 0, 259, 241, 48, 26,
	27, 38, 39, 0, 40, 41, 806, 1951, 1952, 1304,
	1676, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	28, 0, 1407, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 612, 0, 0, 0, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 49, 0, 234, 230, 0, 0, 0,
	0, 0, 0, 0, 47, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 1353, 0, 0, 0, 0, 0, 232, 0, 0,
	0, 236, 0, 0, 0, 269, 1368, 1369, 49, 0,
	1370, 0, 0, 1372, 0, 0, 0, 0, 0, 0,
	1682, 0, 0, 0, 0, 0, 0, 340, 0, 0,
	1681, 0, 1384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 1677, 1678, 1680, 0, 0,
	0, 1679, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 1232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1544,
	0, 0, 0, 229, 0, 237, 238, 239, 240, 244,
	0, 0, 0, 0, 243, 242, 0, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1308, 1309,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 49, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 0, 0, 269, 0, 617, 0,
	0, 0, 0, 1361, 0, 0, 1608, 0, 0, 806,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 923, 0, 0, 0, 0, 0, 923, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1547, 0, 0, 0, 0, 1645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 612,
	0, 0, 0, 0, 0, 0, 0, 1232, 0, 0,
	0, 0, 0, 0, 1686, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1361,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1644, 0, 0, 89, 0, 1648, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 688, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1849, 1727, 1232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1232, 89, 0, 0, 0, 0, 0, 0, 1760,
	0, 0, 0, 0, 0, 0, 1769, 617, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1821, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1943,
	1232, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1909, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 923, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 472, 461, 0, 422, 474, 392, 410, 482, 412,
	413, 448, 372, 431, 157, 407, 390, 94, 395, 365,
	402, 366, 393, 424, 118, 391, 463, 434, 132, 480,
	135, 439, 0, 179, 145, 0, 0, 426, 465, 429,
	456, 421, 449, 380, 438, 475, 408, 444, 476, 0,
	0, 0, 359, 0, 1527, 1528, 0, 0, 0, 0,
	0, 107, 0, 443, 470, 404, 485, 447, 364, 441,
	0, 370, 373, 481, 468, 399, 400, 0, 0, 0,
	0, 0, 0, 0, 425, 430, 453, 418, 0, 1902,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	396, 0, 437, 0, 0, 0, 377, 371, 0, 423,
	0, 0, 0, 379, 0, 397, 454, 89, 361, 459,
	466, 420, 141, 206, 469, 417, 416, 164, 0, 110,
	0, 185, 122, 409, 133, 451, 483, 473, 427, 464,
	394, 403, 112, 401, 171, 158, 197, 436, 159, 169,
	136, 189, 165, 196, 471, 207, 208, 187, 205, 174,
	102, 152, 92, 163, 170, 0, 111, 0, 218, 219,
	220, 221, 222, 223, 224, 369, 362, 398, 457, 460,
	384, 446, 374, 405, 452, 406, 428, 389, 0, 0,
	0, 0, 0, 95, 186, 195, 108, 175, 98, 193,
	182, 184, 143, 128, 129, 177, 96, 97, 0, 168,
	117, 162, 121, 116, 155, 183, 146, 190, 191, 113,
	215, 115, 114, 181, 103, 203, 204, 100, 104, 202,
	151, 156, 154, 201, 188, 194, 144, 140, 0, 99,
	192, 142, 139, 131, 0, 119, 123, 160, 138, 161,
	124, 148, 147, 149, 0, 0, 153, 125, 0, 0,
	0, 367, 0, 180, 199, 216, 217, 368, 388, 467,
	209, 210, 211, 212, 0, 0, 0, 150, 105, 126,
	176, 130, 137, 167, 214, 445, 172, 109, 198, 178,
	0, 383, 387, 381, 382, 432, 433, 477, 478, 479,
	455, 378, 0, 385, 386, 0, 462, 127, 435, 93,
	101, 134, 484, 213, 0, 166, 120, 200, 0, 0,
	411, 363, 415, 0, 0, 0, 0, 0, 0, 0,
	375, 376, 173, 419, 414, 440, 442, 450, 458, 472,
	461, 106, 422, 474, 392, 410, 482, 412, 413, 448,
	372, 431, 157, 407, 390, 94, 395, 365, 402, 366,
	393, 424, 118, 391, 463, 434, 132, 480, 135, 439,
	0, 179, 145, 0, 0, 426, 465, 429, 456, 421,
	449, 380, 438, 475, 408, 444, 476, 0, 0, 0,
	359, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 443, 470, 404, 485, 447, 364, 441, 0, 370,
	373, 481, 468, 399, 400, 1385, 0, 0, 0, 0,
	0, 0, 425, 430, 453, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 396, 0,
	437, 0, 0, 0, 377, 371, 0, 423, 0, 0,
	0, 379, 0, 397, 454, 0, 361, 459, 466, 420,
	141, 206, 469, 417, 416, 164, 0, 110, 0, 185,
	122, 409, 133, 451, 483, 473, 427, 464, 394, 403,
	112, 401, 171, 158, 197, 436, 159, 169, 136, 189,
	165, 196, 471, 207, 208, 187, 205, 174, 102, 152,
	92, 163, 170, 0, 111, 0, 218, 219, 220, 221,
	222, 223, 224, 369, 362, 398, 457, 460, 384, 446,
	374, 405, 452, 406, 428, 389, 0, 0, 0, 0,
	0, 95, 186, 195, 108, 175, 98, 193, 182, 184,
	143, 128, 129, 177, 96, 97, 0, 168, 117, 162,
	121, 116, 155, 183, 146, 190, 191, 113, 215, 115,
	114, 181, 103, 203, 204, 100, 104, 202, 151, 156,
	154, 201, 188, 194, 144, 140, 0, 99, 192, 142,
	139, 131, 0, 119, 123, 160, 138, 161, 124, 148,
	147, 149, 0, 0, 153, 125, 0, 0, 0, 367,
	0, 180, 199, 216, 217, 368, 388, 467, 209, 210,
	211, 212, 0, 0, 0, 150, 105, 126, 176, 130,
	137, 167, 214, 445, 172, 109, 198, 178, 0, 383,
	387, 381, 382, 432, 433, 477, 478, 479, 455, 378,
	0, 385, 386, 0, 462, 127, 435, 93, 101, 134,
	484, 213, 0, 166, 120, 200, 0, 0, 411, 363,
	415, 0, 0, 0, 0, 0, 0, 0, 375, 376,
	173, 419, 414, 440, 442, 450, 458, 472, 461, 106,
	422, 474, 392, 410, 482, 412, 413, 448, 372, 431,
	157, 407, 390, 94, 395, 365, 402, 366, 393, 424,
	118, 391, 463, 434, 132, 480, 135, 439, 0, 179,
	145, 0, 0, 426, 465, 429, 456, 421, 449, 380,
	438, 475, 408, 444, 476, 0, 0, 0, 359, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 443,
	470, 404, 485, 447, 364, 441, 0, 370, 373, 481,
	468, 399, 400, 0, 0, 0, 0, 0, 0, 0,
	425, 430, 453, 418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1315, 0, 396, 0, 437, 0,
	0, 0, 377, 371, 0, 423, 0, 0, 0, 379,
	0, 397, 454, 0, 361, 459, 466, 420, 141, 206,
	469, 417, 416, 164, 0, 110, 0, 185, 122, 409,
	133, 451, 483, 473, 427, 464, 394, 403, 112, 401,
	171, 158, 197, 436, 159, 169, 136, 189, 165, 196,
	471, 207, 208, 187, 205, 174, 102, 152, 92, 163,
	170, 0, 111, 0, 218, 219, 220, 221, 222, 223,
	224, 369, 362, 398, 457, 460, 384, 446, 374, 405,
	452, 406, 428, 389, 0, 0, 0, 0, 0, 95,
	186, 195, 108, 175, 98, 193, 182, 184, 143, 128,
	129, 177, 96, 97, 0, 168, 117, 162, 121, 116,
	155, 183, 146, 190, 191, 113, 215, 115, 114, 181,
	103, 203, 204, 100, 104, 202, 151, 156, 154, 201,
	188, 194, 144, 140, 0, 99, 192, 142, 139, 131,
	0, 119, 123, 160, 138, 161, 124, 148, 147, 149,
	0, 0, 153, 125, 0, 0, 0, 367, 0, 180,
	199, 216, 217, 368, 388, 467, 209, 210, 211, 212,
	0, 0, 0, 150, 105, 126, 176, 130, 137, 167,
	214, 445, 172, 109, 198, 178, 0, 383, 387, 381,
	382, 432, 433, 477, 478, 479, 455, 378, 0, 385,
	386, 0, 462, 127, 435, 93, 101, 134, 484, 213,
	0, 166, 120, 200, 0, 0, 411, 363, 415, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 173, 419,
	414, 440, 442, 450, 458, 472, 461, 106, 422, 474,
	392, 410, 482, 412, 413, 448, 372, 431, 157, 407,
	390, 94, 395, 365, 402, 366, 393, 424, 118, 391,
	463, 434, 132, 480, 135, 439, 0, 179, 145, 0,
	0, 426, 465, 429, 456, 421, 449, 380, 438, 475,
	408, 444, 476, 50, 0, 0, 359, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 443, 470, 404,
	485, 447, 364, 441, 0, 370, 373, 481, 468, 399,
	400, 0, 0, 0, 0, 0, 0, 0, 425, 430,
	453, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 396, 0, 437, 0, 0, 0,
	377, 371, 0, 423, 0, 0, 0, 379, 0, 397,
	454, 0, 361, 459, 466, 420, 141, 206, 469, 417,
	416, 164, 0, 110, 0, 185, 122, 409, 133, 451,
	483, 473, 427, 464, 394, 403, 112, 401, 171, 158,
	197, 436, 159, 169, 136, 189, 165, 196, 471, 207,
	208, 187, 205, 174, 102, 152, 92, 163, 170, 0,
	111, 0, 218, 219, 220, 221, 222, 223, 224, 369,
	362, 398, 457, 460, 384, 446, 374, 405, 452, 406,
	428, 389, 0, 0, 0, 0, 0, 95, 186, 195,
	108, 175, 98, 193, 182, 184, 143, 128, 129, 177,
	96, 97, 0, 168, 117, 162, 121, 116, 155, 183,
	146, 190, 191, 113, 215, 115, 114, 181, 103, 203,
	204, 100, 104, 202, 151, 156, 154, 201, 188, 194,
	144, 140, 0, 99, 192, 142, 139, 131, 0, 119,
	123, 160, 138, 161, 124, 148, 147, 149, 0, 0,
	153, 125, 0, 0, 0, 367, 0, 180, 199, 216,
	217, 368, 388, 467, 209, 210, 211, 212, 0, 0,
	0, 150, 105, 126, 176, 130, 137, 167, 214, 445,
	172, 109, 198, 178, 0, 383, 387, 381, 382, 432,
	433, 477, 478, 479, 455, 378, 0, 385, 386, 0,
	462, 127, 435, 93, 101, 134, 484, 213, 0, 166,
	120, 200, 0, 0, 411, 363, 415, 0, 0, 0,
	0, 0, 0, 0, 375, 376, 173, 419, 414, 440,
	442, 450, 458, 472, 461, 106, 422, 474, 392, 410,
	482, 412, 413, 448, 372, 431, 157, 407, 390, 94,
	395, 365, 402, 366, 393, 424, 118, 391, 463, 434,
	132, 480, 135, 439, 0, 179, 145, 0, 0, 426,
	465, 429, 456, 421, 449, 380, 438, 475, 408, 444,
	476, 0, 0, 0, 359, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 443, 470, 404, 485, 447,
	364, 441, 0, 370, 373, 481, 468, 399, 400, 0,
	0, 0, 0, 0, 0, 0, 425, 430, 453, 418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 396, 0, 437, 0, 0, 0, 377, 371,
	0, 423, 0, 0, 0, 379, 0, 397, 454, 0,
	361, 459, 466, 420, 141, 206, 469, 417, 416, 164,
	0, 110, 0, 185, 122, 409, 133, 451, 483, 473,
	427, 464, 394, 403, 112, 401, 171, 158, 197, 436,
	159, 169, 136, 189, 165, 196, 471, 207, 208, 187,
	205, 174, 102, 152, 92, 163, 170, 0, 111, 0,
	218, 219, 220, 221, 222, 223, 224, 369, 362, 398,
	457, 460, 384, 446, 374, 405, 452, 406, 428, 389,
	0, 0, 0, 0, 0, 95, 186, 195, 108, 175,
	98, 193, 182, 184, 143, 128, 129, 177, 96, 97,
	0, 168, 117, 162, 121, 116, 155, 183, 146, 190,
	191, 113, 215, 115, 114, 181, 103, 203, 204, 100,
	357, 202, 151, 156, 154, 201, 188, 194, 144, 140,
	0, 99, 192, 142, 139, 131, 0, 119, 123, 160,
	138, 161, 124, 148, 147, 149, 0, 0, 153, 125,
	0, 0, 0, 367, 0, 180, 199, 216, 217, 368,
	388, 467, 209, 210, 211, 212, 0, 0, 0, 358,
	356, 126, 176, 130, 137, 167, 214, 445, 172, 109,
	198, 178, 352, 383, 387, 381, 382, 432, 433, 477,
	478, 479, 455, 378, 0, 385, 386, 0, 462, 127,
	435, 93, 101, 134, 484, 213, 0, 166, 120, 200,
	0, 0, 411, 363, 415, 0, 0, 0, 0, 0,
	0, 0, 375, 376, 173, 419, 414, 440, 442, 450,
	458, 472, 461, 106, 422, 474, 392, 410, 482, 412,
	413, 448, 372, 431, 157, 407, 390, 94, 395, 365,
	402, 366, 393, 424, 118, 391, 463, 434, 132, 480,
	135, 439, 0, 179, 145, 0, 0, 426, 465, 429,
	456, 421, 449, 380, 438, 475, 408, 444, 476, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 443, 470, 404, 485, 447, 364, 441,
	0, 370, 373, 481, 468, 399, 400, 0, 0, 0,
	0, 0, 0, 0, 425, 430, 453, 418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 849, 0,
	396, 0, 437, 0, 0, 0, 377, 371, 0, 423,
	0, 0, 0, 379, 0, 397, 454, 0, 361, 459,
	466, 420, 141, 206, 469, 417, 416, 164, 0, 110,
	0, 185, 122, 409, 133, 451, 483, 473, 427, 464,
	394, 403, 112, 401, 171, 158, 197, 436, 159, 169,
	136, 189, 165, 196, 471, 207, 208, 187, 205, 174,
	102, 152, 92, 163, 170, 0, 111, 0, 218, 219,
	220, 221, 222, 223, 224, 369, 362, 398, 457, 460,
	384, 446, 374, 405, 452, 406, 428, 389, 0, 0,
	0, 0, 0, 95, 186, 195, 108, 175, 98, 193,
	182, 184, 143, 128, 129, 177, 96, 97, 0, 168,
	117, 162, 121, 116, 155, 183, 146, 190, 191, 113,
	215, 115, 114, 181, 103, 203, 204, 100, 104, 202,
	151, 156, 154, 201, 188, 194, 144, 140, 0, 99,
	192, 142, 139, 131, 0, 119, 123, 160, 138, 161,
	124, 148, 147, 149, 0, 0, 153, 125, 0, 0,
	0, 367, 0, 180, 199, 216, 217, 368, 388, 467,
	209, 210, 211, 212, 0, 0, 0, 150, 105, 126,
	176, 130, 137, 167, 214, 445, 172, 109, 198, 178,
	0, 383, 387, 381, 382, 432, 433, 477, 478, 479,
	455, 378, 0, 385, 386, 0, 462, 127, 435, 93,
	101, 134, 484, 213, 0, 166, 120, 200, 0, 0,
	411, 363, 415, 0, 0, 0, 0, 0, 0, 0,
	375, 376, 173, 419, 414, 440, 442, 450, 458, 472,
	461, 106, 422, 474, 392, 410, 482, 412, 413, 448,
	372, 431, 157, 407, 390, 94, 395, 365, 402, 366,
	393, 424, 118, 391, 463, 434, 132, 480, 135, 439,
	0, 179, 145, 0, 0, 426, 465, 429, 456, 421,
	449, 380, 438, 475, 408, 444, 476, 0, 0, 0,
	359, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 443, 470, 404, 485, 447, 364, 441, 0, 370,
	373, 481, 468, 399, 400, 0, 0, 0, 0, 0,
	0, 0, 425, 430, 453, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 396, 0,
	437, 0, 0, 0, 377, 371, 0, 423, 0, 0,
	0, 379, 0, 397, 454, 0, 361, 459, 466, 420,
	141, 206, 469, 417, 416, 164, 0, 110, 0, 185,
	122, 409, 133, 451, 483, 473, 427, 464, 394, 403,
	112, 401, 171, 158, 197, 436, 159, 169, 136, 189,
	165, 196, 471, 207, 208, 187, 205, 174, 102, 152,
	92, 163, 170, 0, 111, 0, 218, 219, 220, 221,
	222, 223, 224, 369, 362, 398, 457, 460, 384, 446,
	374, 405, 452, 406, 428, 389, 0, 0, 0, 0,
	0, 95, 186, 698, 108, 175, 98, 193, 182, 184,
	143, 128, 129, 177, 96, 97, 0, 168, 117, 162,
	121, 116, 155, 183, 146, 190, 191, 113, 215, 115,
	114, 181, 103, 203, 204, 100, 357, 202, 151, 156,
	154, 201, 188, 194, 144, 140, 0, 99, 192, 142,
	139, 131, 0, 119, 123, 160, 138, 161, 124, 148,
	147, 149, 0, 0, 153, 125, 0, 0, 0, 367,
	0, 180, 199, 216, 217, 368, 388, 467, 209, 210,
	211, 212, 0, 0, 0, 358, 356, 126, 176, 130,
	137, 167, 214, 445, 172, 109, 198, 178, 352, 383,
	387, 381, 382, 432, 433, 477, 478, 479, 455, 378,
	0, 385, 386, 0, 462, 127, 435, 93, 101, 134,
	484, 213, 0, 166, 120, 200, 0, 0, 411, 363,
	415, 0, 0, 0, 0, 0, 0, 0, 375, 376,
	173, 419, 414, 440, 442, 450, 458, 472, 461, 106,
	422, 474, 392, 410, 482, 412, 413, 448, 372, 431,
	157, 407, 390, 94, 395, 365, 402, 366, 393, 424,
	118, 391, 463, 434, 132, 480, 135, 439, 0, 179,
	145, 0, 0, 426, 465, 429, 456, 421, 449, 380,
	438, 475, 408, 444, 476, 0, 0, 0, 359, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 443,
	470, 404, 485, 447, 364, 441, 0, 370, 373, 481,
	468, 399, 400, 0, 0, 0, 0, 0, 0, 0,
	425, 430, 453, 418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 396, 0, 437, 0,
	0, 0, 377, 371, 0, 423, 0, 0, 0, 379,
	0, 397, 454, 0, 361, 459, 466, 420, 141, 206,
	469, 417, 416, 164, 0, 110, 0, 185, 122, 409,
	133, 451, 483, 473, 427, 464, 394, 403, 112, 401,
	171, 158, 197, 436, 159, 169, 136, 189, 165, 196,
	471, 207, 208, 187, 205, 174, 102, 152, 92, 163,
	170, 0, 111, 0, 218, 219, 220, 221, 222, 223,
	224, 369, 362, 398, 457, 460, 384, 446, 374, 405,
	452, 406, 428, 389, 0, 0, 0, 0, 0, 95,
	186, 347, 108, 175, 98, 193, 182, 184, 143, 128,
	129, 177, 96, 97, 0, 168, 117, 162, 121, 116,
	155, 183, 146, 190, 191, 113, 215, 115, 114, 181,
	103, 203, 204, 100, 357, 202, 151, 156, 154, 201,
	188, 194, 144, 140, 0, 99, 192, 142, 139, 131,
	0, 119, 123, 160, 138, 161, 124, 148, 147, 149,
	0, 0, 153, 125, 0, 0, 0, 367, 0, 180,
	199, 216, 217, 368, 388, 467, 209, 210, 211, 212,
	0, 0, 0, 358, 356, 350, 349, 130, 137, 167,
	214, 445, 172, 109, 198, 178, 352, 383, 387, 381,
	382, 432, 433, 477, 478, 479, 455, 378, 0, 385,
	386, 0, 462, 127, 435, 93, 101, 134, 484, 213,
	0, 166, 120, 200, 0, 0, 411, 363, 415, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 173, 419,
	414, 440, 442, 450, 458, 472, 461, 106, 422, 474,
	392, 410, 482, 412, 413, 448, 372, 431, 157, 407,
	390, 94, 395, 365, 402, 366, 393, 424, 118, 391,
	463, 434, 132, 480, 135, 439, 0, 179, 145, 0,
	0, 426, 465, 429, 456, 421, 449, 380, 438, 475,
	408, 444, 476, 0, 0, 0, 359, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 443, 470, 404,
	485, 447, 364, 441, 0, 370, 373, 481, 468, 399,
	400, 0, 0, 0, 0, 0, 0, 0, 425, 430,
	453, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 396, 0, 437, 0, 0, 0,
	377, 371, 0, 423, 0, 0, 0, 379, 0, 397,
	454, 0, 361, 459, 466, 420, 141, 206, 469, 417,
	416, 164, 0, 110, 0, 185, 122, 409, 133, 451,
	483, 473, 427, 464, 394, 403, 112, 401, 171, 158,
	197, 436, 159, 169, 136, 189, 165, 196, 471, 207,
	208, 187, 205, 174, 102, 152, 92, 163, 170, 0,
	111, 0, 218, 219, 220, 221, 222, 223, 224, 369,
	362, 398, 457, 460, 384, 446, 374, 405, 452, 406,
	428, 389, 0, 0, 0, 0, 0, 95, 186, 195,
	108, 175, 98, 193, 182, 184, 143, 128, 129, 177,
	96, 97, 0, 168, 117, 162, 121, 116, 155, 183,
	146, 190, 191, 113, 215, 115, 114, 181, 103, 203,
	204, 100, 104, 202, 151, 156, 154, 201, 188, 194,
	144, 140, 0, 99, 192, 142, 139, 131, 0, 119,
	123, 160, 138, 161, 124, 148, 147, 149, 0, 0,
	153, 125, 0, 0, 0, 367, 0, 180, 199, 216,
	217, 368, 388, 467, 209, 210, 211, 212, 0, 0,
	0, 150, 105, 126, 176, 130, 137, 167, 214, 445,
	172, 109, 198, 178, 0, 383, 387, 381, 382, 432,
	433, 477, 478, 479, 455, 378, 0, 385, 386, 0,
	462, 127, 435, 93, 101, 134, 484, 213, 0, 166,
	120, 200, 0, 0, 411, 363, 415, 0, 0, 0,
	0, 0, 0, 0, 375, 376, 173, 419, 414, 440,
	442, 450, 458, 472, 461, 106, 422, 474, 392, 410,
	482, 412, 413, 448, 372, 431, 157, 407, 390, 94,
	395, 365, 402, 366, 393, 424, 118, 391, 463, 434,
	132, 480, 135, 439, 0, 179, 145, 0, 0, 426,
	465, 429, 456, 421, 449, 380, 438, 475, 408, 444,
	476, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 443, 470, 404, 485, 447,
	364, 441, 0, 370, 373, 481, 468, 399, 400, 0,
	0, 0, 0, 0, 0, 0, 425, 430, 453, 418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 396, 0, 437, 0, 0, 0, 377, 371,
	0, 423, 0, 0, 0, 379, 0, 397, 454, 0,
	361, 459, 466, 420, 141, 206, 469, 417, 416, 164,
	0, 110, 0, 185, 122, 409, 133, 451, 483, 473,
	427, 464, 394, 403, 112, 401, 171, 158, 197, 436,
	159, 169, 136, 189, 165, 196, 471, 207, 208, 187,
	205, 174, 102, 152, 92, 163, 170, 0, 111, 0,
	218, 219, 220, 221, 222, 223, 224, 369, 362, 398,
	457, 460, 384, 446, 374, 405, 452, 406, 428, 389,
	0, 0, 0, 0, 0, 95, 186, 195, 108, 175,
	98, 193, 182, 184, 143, 128, 129, 177, 96, 97,
	0, 168, 117, 162, 121, 116, 155, 183, 146, 190,
	191, 113, 215, 115, 114, 181, 103, 203, 204, 100,
	104, 202, 151, 156, 154, 201, 188, 194, 144, 140,
	0, 99, 192, 142, 139, 131, 0, 119, 123, 160,
	138, 161, 124, 148, 147, 149, 0, 0, 153, 125,
	0, 0, 0, 367, 0, 180, 199, 216, 217, 368,
	388, 467, 209, 210, 211, 212, 0, 0, 0, 150,
	105, 126, 176, 130, 137, 167, 214, 445, 172, 109,
	198, 178, 0, 383, 387, 381, 382, 432, 433, 477,
	478, 479, 455, 378, 0, 385, 386, 0, 462, 127,
	435, 93, 101, 134, 484, 213, 0, 166, 120, 200,
	0, 0, 411, 363, 415, 0, 0, 0, 0, 0,
	0, 0, 375, 376, 173, 419, 414, 440, 442, 450,
	458, 472, 461, 106, 422, 474, 392, 410, 482, 412,
	413, 448, 372, 431, 157, 407, 390, 94, 395, 365,
	402, 366, 393, 424, 118, 391, 463, 434, 132, 480,
	135, 439, 0, 179, 145, 0, 0, 426, 465, 429,
	456, 421, 449, 380, 438, 475, 408, 444, 476, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 443, 470, 404, 485, 447, 364, 441,
	0, 370, 373, 481, 468, 399, 400, 0, 0, 0,
	0, 0, 0, 0, 425, 430, 453, 418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	396, 0, 437, 0, 0, 0, 377, 371, 0, 423,
	0, 0, 0, 379, 0, 397, 454, 0, 361, 459,
	466, 420, 141, 206, 469, 417, 416, 164, 0, 110,
	0, 185, 122, 409, 133, 451, 483, 473, 427, 464,
	394, 403, 112, 401, 171, 158, 197, 436, 159, 169,
	136, 189, 165, 196, 471, 207, 208, 187, 205, 174,
	102, 152, 92, 163, 170, 0, 111, 0, 218, 219,
	220, 221, 222, 223, 224, 369, 362, 398, 457, 460,
	384, 446, 374, 405, 452, 406, 428, 389, 0, 0,
	0, 0, 0, 95, 186, 195, 108, 175, 98, 193,
	182, 184, 143, 128, 129, 177, 96, 97, 0, 168,
	117, 162, 121, 116, 155, 183, 146, 190, 191, 113,
	215, 115, 114, 181, 103, 203, 204, 100, 104, 202,
	151, 156, 154, 201, 188, 194, 144, 140, 0, 99,
	192, 142, 139, 131, 0, 119, 123, 160, 138, 161,
	124, 148, 147, 149, 0, 0, 153, 125, 0, 0,
	0, 367, 0, 180, 199, 216, 217, 368, 388, 467,
	209, 210, 211, 212, 0, 0, 0, 150, 105, 126,
	176, 130, 137, 167, 214, 445, 172, 109, 198, 178,
	0, 383, 387, 381, 382, 432, 433, 477, 478, 479,
	455, 378, 0, 385, 386, 0, 462, 127, 435, 93,
	101, 134, 484, 213, 0, 166, 120, 200, 0, 0,
	411, 363, 415, 0, 0, 0, 0, 0, 0, 0,
	375, 376, 173, 419, 414, 440, 442, 450, 458, 157,
	0, 106, 94, 0, 0, 276, 0, 0, 0, 118,
	273, 0, 0, 132, 318, 135, 0, 0, 179, 145,
	0, 0, 0, 0, 309, 310, 0, 0, 0, 0,
	0, 0, 973, 0, 50, 0, 0, 274, 297, 295,
	299, 300, 301, 302, 0, 0, 107, 298, 303, 304,
	305, 974, 0, 0, 271, 288, 0, 317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 286, 0, 0, 0, 0, 330, 0, 287,
	0, 0, 283, 284, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 206, 0,
	0, 328, 164, 0, 110, 0, 185, 122, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 171,
	158, 197, 0, 159, 169, 136, 189, 165, 196, 0,
	207, 208, 187, 205, 174, 102, 152, 92, 163, 170,
	0, 111, 0, 218, 219, 220, 221, 222, 223, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 186,
	195, 108, 175, 98, 193, 182, 184, 143, 128, 129,
	177, 96, 97, 0, 168, 117, 162, 121, 116, 155,
	183, 146, 190, 191, 113, 215, 115, 114, 181, 103,
	203, 204, 100, 104, 202, 151, 156, 154, 201, 188,
	194, 144, 140, 0, 99, 192, 142, 139, 131, 0,
	119, 123, 160, 138, 161, 124, 148, 147, 149, 332,
	0, 153, 125, 0, 0, 0, 0, 0, 180, 199,
	216, 217, 0, 0, 0, 209, 210, 211, 212, 0,
	0, 0, 150, 105, 126, 176, 130, 137, 167, 214,
	0, 172, 109, 198, 178, 306, 319, 329, 325, 326,
	323, 324, 322, 321, 320, 331, 311, 312, 313, 314,
	316, 0, 127, 315, 93, 101, 134, 0, 213, 0,
	166, 120, 200, 0, 157, 0, 0, 94, 905, 0,
	276, 0, 0, 0, 118, 273, 0, 173, 132, 318,
	135, 0, 0, 179, 145, 327, 106, 0, 0, 309,
	310, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 274, 297, 295, 299, 300, 301, 302, 0,
	0, 107, 298, 303, 304, 305, 0, 0, 0, 271,
	288, 0, 317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 286, 267, 0,
	0, 0, 330, 0, 287, 0, 0, 283, 284, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 206, 0, 0, 328, 164, 0, 110,
	0, 185, 122, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 171, 158, 197, 0, 159, 169,
	136, 189, 165, 196, 0, 207, 208, 187, 205, 174,
	102, 152, 92, 163, 170, 0, 111, 0, 218, 219,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 186, 195, 108, 175, 98, 193,
	182, 184, 143, 128, 129, 177, 96, 97, 0, 168,
	117, 162, 121, 116, 155, 183, 146, 190, 191, 113,
	215, 115, 114, 181, 103, 203, 204, 100, 104, 202,
	151, 156, 154, 201, 188, 194, 144, 140, 0, 99,
	192, 142, 139, 131, 0, 119, 123, 160, 138, 161,
	124, 148, 147, 149, 332, 0, 153, 125, 0, 0,
	0, 0, 0, 180, 199, 216, 217, 0, 0, 0,
	209, 210, 211, 212, 0, 0, 0, 150, 105, 126,
	176, 130, 137, 167, 214, 0, 172, 109, 198, 178,
	306, 319, 329, 325, 326, 323, 324, 322, 321, 320,
	331, 311, 312, 313, 314, 316, 0, 127, 315, 93,
	101, 134, 0, 213, 0, 166, 120, 200, 0, 157,
	0, 0, 94, 0, 0, 276, 0, 0, 0, 118,
	273, 0, 173, 132, 318, 135, 0, 0, 179, 145,
	327, 106, 0, 0, 309, 310, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 537, 274, 297, 295,
	299, 300, 301, 302, 0, 0, 107, 298, 303, 304,
	305, 0, 0, 0, 271, 288, 0, 317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 286, 0, 0, 0, 0, 330, 0, 287,
	0, 0, 283, 284, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 206, 0,
	0, 328, 164, 0, 110, 0, 185, 122, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 171,
	158, 197, 0, 159, 169, 136, 189, 165, 196, 0,
	207, 208, 187, 205, 174, 102, 152, 92, 163, 170,
	0, 111, 0, 218, 219, 220, 221, 222, 223, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 186,
	195, 108, 175, 98, 193, 182, 184, 143, 128, 129,
	177, 96, 97, 0, 168, 117, 162, 121, 116, 155,
	183, 146, 190, 191, 113, 215, 115, 114, 181, 103,
	203, 204, 100, 104, 202, 151, 156, 154, 201, 188,
	194, 144, 140, 0, 99, 192, 142, 139, 131, 0,
	119, 123, 160, 138, 161, 124, 148, 147, 149, 332,
	0, 153, 125, 0, 0, 0, 0, 0, 180, 199,
	216, 217, 0, 0, 0, 209, 210, 211, 212, 0,
	0, 0, 150, 105, 126, 176, 130, 137, 167, 214,
	0, 172, 109, 198, 178, 306, 319, 329, 325, 326,
	323, 324, 322, 321, 320, 331, 311, 312, 313, 314,
	316, 0, 127, 315, 93, 101, 134, 0, 213, 0,
	166, 120, 200, 0, 157, 0, 0, 94, 0, 0,
	276, 0, 0, 0, 118, 273, 0, 173, 132, 318,
	135, 0, 0, 179, 145, 327, 106, 0, 0, 309,
	310, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 274, 297, 295, 299, 300, 301, 302, 0,
	0, 107, 298, 303, 304, 305, 0, 0, 0, 271,
	288, 0, 317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 286, 267, 0,
	0, 0, 330, 0, 287, 0, 0, 283, 284, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 206, 0, 0, 328, 164, 0, 110,
	0, 185, 122, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 171, 158, 197, 0, 159, 169,
	136, 189, 165, 196, 0, 207, 208, 187, 205, 174,
	102, 152, 92, 163, 170, 0, 111, 0, 218, 219,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 186, 195, 108, 175, 98, 193,
	182, 184, 143, 128, 129, 177, 96, 97, 0, 168,
	117, 162, 121, 116, 155, 183, 146, 190, 191, 113,
	215, 115, 114, 181, 103, 203, 204, 100, 104, 202,
	151, 156, 154, 201, 188, 194, 144, 140, 0, 99,
	192, 142, 139, 131, 0, 119, 123, 160, 138, 161,
	124, 148, 147, 149, 332, 0, 153, 125, 0, 0,
	0, 0, 0, 180, 199, 216, 217, 0, 0, 0,
	209, 210, 211, 212, 0, 0, 0, 150, 105, 126,
	176, 130, 137, 167, 214, 0, 172, 109, 198, 178,
	306, 319, 329, 325, 326, 323, 324, 322, 321, 320,
	331, 311, 312, 313, 314, 316, 0, 127, 315, 93,
	101, 134, 0, 213, 0, 166, 120, 200, 0, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 173, 157, 0, 0, 94, 0, 0, 276,
	327, 106, 0, 118, 273, 0, 0, 132, 318, 135,
	0, 0, 179, 145, 0, 0, 0, 0, 309, 310,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 274, 297, 295, 299, 300, 301, 302, 0, 0,
	107, 298, 303, 304, 305, 0, 0, 0, 271, 288,
	0, 317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 286, 0, 0, 0,
	0, 330, 0, 287, 0, 0, 283, 284, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 206, 0, 0, 328, 164, 0, 110, 0,
	185, 122, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 171, 158, 197, 0, 159, 169, 136,
	189, 165, 196, 0, 207, 208, 187, 205, 174, 102,
	152, 92, 163, 170, 0, 111, 0, 218, 219, 220,
	221, 222, 223, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 186, 195, 108, 175, 98, 193, 182,
	184, 143, 128, 129, 177, 96, 97, 0, 168, 117,
	162, 121, 116, 155, 183, 146, 190, 191, 113, 215,
	115, 114, 181, 103, 203, 204, 100, 104, 202, 151,
	156, 154, 201, 188, 194, 144, 140, 0, 99, 192,
	142, 139, 131, 0, 119, 123, 160, 138, 161, 124,
	148, 147, 149, 332, 0, 153, 125, 0, 0, 0,
	0, 0, 180, 199, 216, 217, 0, 0, 0, 209,
	210, 211, 212, 0, 0, 0, 150, 105, 126, 176,
	130, 137, 167, 214, 0, 172, 109, 198, 178, 306,
	319, 329, 325, 326, 323, 324, 322, 321, 320, 331,
	311, 312, 313, 314, 316, 0, 127, 315, 93, 101,
	134, 0, 213, 0, 166, 120, 200, 0, 157, 0,
	0, 94, 0, 0, 276, 0, 0, 0, 118, 273,
	0, 173, 132, 318, 135, 0, 0, 179, 145, 327,
	106, 0, 0, 309, 310, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 274, 297, 295, 299,
	300, 301, 302, 0, 0, 107, 298, 303, 304, 305,
	0, 0, 0, 271, 288, 0, 317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 286, 0, 0, 0, 0, 330, 0, 287, 0,
	0, 283, 284, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 206, 0, 0,
	328, 164, 0, 110, 0, 185, 122, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 171, 158,
	197, 0, 159, 169, 136, 189, 165, 196, 0, 207,
	208, 187, 205, 174, 102, 152, 92, 163, 170, 0,
	111, 0, 218, 219, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 186, 195,
	108, 175, 98, 193, 182, 184, 143, 128, 129, 177,
	96, 97, 0, 168, 117, 162, 121, 116, 155, 183,
	146, 190, 191, 113, 215, 115, 114, 181, 103, 203,
	204, 100, 104, 202, 151, 156, 154, 201, 188, 194,
	144, 140, 0, 99, 192, 142, 139, 131, 0, 119,
	123, 160, 138, 161, 124, 148, 147, 149, 332, 0,
	153, 125, 0, 0, 0, 0, 0, 180, 199, 216,
	217, 0, 0, 0, 209, 210, 211, 212, 0, 0,
	0, 150, 105, 126, 176, 130, 137, 167, 214, 0,
	172, 109, 198, 178, 306, 319, 329, 325, 326, 323,
	324, 322, 321, 320, 331, 311, 312, 313, 314, 316,
	0, 127, 315, 93, 101, 134, 0, 213, 0, 166,
	120, 200, 0, 157, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 173, 132, 318, 135,
	0, 0, 179, 145, 327, 106, 0, 0, 309, 310,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 274, 297, 295, 299, 300, 301, 302, 0, 0,
	107, 298, 303, 304, 305, 0, 0, 0, 0, 288,
	0, 317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 286, 0, 0, 0,
	0, 330, 0, 287, 0, 0, 283, 284, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 206, 0, 0, 328, 164, 0, 110, 0,
	185, 122, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 171, 158, 197, 1948, 159, 169, 136,
	189, 165, 196, 0, 207, 208, 187, 205, 174, 102,
	152, 92, 163, 170, 0, 111, 0, 218, 219, 220,
	221, 222, 223, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 186, 195, 108, 175, 98, 193, 182,
	184, 143, 128, 129, 177, 96, 97, 0, 168, 117,
	162, 121, 116, 155, 183, 146, 190, 191, 113, 215,
	115, 114, 181, 103, 203, 204, 100, 104, 202, 151,
	156, 154, 201, 188, 194, 144, 140, 0, 99, 192,
	142, 139, 131, 0, 119, 123, 160, 138, 161, 124,
	148, 147, 149, 332, 0, 153, 125, 0, 0, 0,
	0, 0, 180, 199, 216, 217, 0, 0, 0, 209,
	210, 211, 212, 0, 0, 0, 150, 105, 126, 176,
	130, 137, 167, 214, 0, 172, 109, 198, 178, 306,
	319, 329, 325, 326, 323, 324, 322, 321, 320, 331,
	311, 312, 313, 314, 316, 0, 127, 315, 93, 101,
	134, 0, 213, 0, 166, 120, 200, 0, 157, 0,
	0, 94, 0, 0, 276, 0, 0, 0, 118, 0,
	0, 173, 132, 318, 135, 0, 0, 179, 145, 327,
	106, 0, 0, 309, 310, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 274, 297, 295, 299,
	300, 301, 302, 0, 0, 107, 298, 303, 304, 305,
	0, 0, 0, 0, 288, 0, 317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 286, 0, 0, 0, 0, 330, 0, 287, 0,
	0, 283, 284, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 206, 0, 0,
	328, 164, 0, 110, 0, 185, 122, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 171, 158,
	197, 0, 159, 169, 136, 189, 165, 196, 0, 207,
	208, 187, 205, 174, 102, 152, 92, 163, 170, 0,
	111, 0, 218, 219, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 186, 195,
	108, 175, 98, 193, 182, 184, 143, 128, 129, 177,
	96, 97, 0, 168, 117, 162, 121, 116, 155, 183,
	146, 190, 191, 113, 215, 115, 114, 181, 103, 203,
	204, 100, 104, 202, 151, 156, 154, 201, 188, 194,
	144, 140, 0, 99, 192, 142, 139, 131, 0, 119,
	123, 160, 138, 161, 124, 148, 147, 149, 332, 0,
	153, 125, 0, 0, 0, 0, 0, 180, 199, 216,
	217, 0, 0, 0, 209, 210, 211, 212, 0, 0,
	0, 150, 105, 126, 176, 130, 137, 167, 214, 0,
	172, 109, 198, 178, 306, 319, 329, 325, 326, 323,
	324, 322, 321, 320, 331, 311, 312, 313, 314, 316,
	0, 127, 315, 93, 101, 134, 0, 213, 0, 166,
	120, 200, 0, 157, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 173, 132, 318, 135,
	0, 0, 179, 145, 327, 106, 0, 0, 309, 310,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 274, 297, 295, 299, 300, 301, 302, 0, 0,
	107, 298, 303, 304, 305, 0, 0, 0, 0, 288,
	0, 317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 286, 0, 0, 0,
	0, 330, 0, 287, 0, 0, 283, 284, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 206, 0, 0, 328, 164, 0, 110, 0,
	185, 122, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 171, 158, 197, 0, 159, 169, 136,
	189, 165, 196, 0, 207, 208, 187, 205, 174, 102,
	152, 92, 163, 170, 0, 111, 0, 218, 219, 220,
	221, 222, 223, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 186, 195, 108, 175, 98, 193, 182,
	184, 143, 128, 129, 177, 96, 97, 0, 168, 117,
	162, 121, 116, 155, 183, 146, 190, 191, 113, 215,
	115, 114, 181, 103, 203, 204, 100, 104, 202, 151,
	156, 154, 201, 188, 194, 144, 140, 0, 99, 192,
	142, 139, 131, 0, 119, 123, 160, 138, 161, 124,
	148, 147, 149, 332, 0, 153, 125, 0, 0, 0,
	0, 0, 180, 199, 216, 217, 0, 0, 0, 209,
	210, 211, 212, 0, 0, 0, 150, 105, 126, 176,
	130, 137, 167, 214, 0, 172, 109, 198, 178, 306,
	319, 329, 325, 326, 323, 324, 322, 321, 320, 331,
	311, 312, 313, 314, 316, 0, 127, 315, 93, 101,
	134, 0, 213, 0, 166, 120, 200, 0, 157, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 173, 132, 0, 135, 0, 0, 179, 145, 327,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1413, 0, 0, 274, 0, 1218, 1219,
	1220, 0, 0, 0, 0, 107, 1223, 1221, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 206, 0, 0,
	0, 164, 0, 110, 0, 185, 122, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 171, 158,
	197, 0, 159, 169, 136, 189, 165, 196, 0, 207,
	208, 187, 205, 174, 102, 152, 92, 163, 170, 0,
	111, 0, 218, 219, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 186, 195,
	108, 175, 98, 193, 182, 184, 143, 128, 129, 177,
	96, 97, 0, 168, 117, 162, 121, 116, 155, 183,
	146, 190, 191, 113, 215, 115, 114, 181, 103, 203,
	204, 100, 104, 202, 151, 156, 154, 201, 188, 194,
	144, 140, 0, 99, 192, 142, 139, 131, 0, 119,
	123, 160, 138, 161, 124, 148, 147, 149, 0, 0,
	1225, 1230, 0, 0, 0, 0, 0, 180, 199, 216,
	217, 0, 0, 0, 209, 210, 211, 212, 0, 0,
	0, 150, 105, 126, 176, 130, 137, 167, 214, 0,
	172, 109, 198, 178, 0, 1227, 0, 1229, 1228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 93, 101, 134, 0, 213, 0, 166,
	120, 200, 0, 157, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 173, 132, 0, 135,
	0, 0, 179, 145, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1217, 0,
	0, 274, 0, 1218, 1219, 1220, 0, 0, 0, 0,
	107, 1223, 1221, 304, 305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 206, 0, 0, 0, 164, 0, 110, 0,
	185, 122, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 171, 158, 197, 0, 159, 169, 136,
	189, 165, 196, 0, 207, 208, 187, 205, 174, 102,
	152, 92, 163, 170, 0, 111, 0, 218, 219, 220,
	221, 222, 223, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 186, 195, 108, 175, 98, 193, 182,
	184, 143, 128, 129, 177, 96, 97, 0, 168, 117,
	162, 121, 116, 155, 183, 146, 190, 191, 113, 215,
	115, 114, 181, 103, 203, 204, 100, 104, 202, 151,
	156, 154, 201, 188, 194, 144, 140, 0, 99, 192,
	142, 139, 131, 0, 119, 123, 160, 138, 161, 124,
	148, 147, 149, 0, 0, 1225, 1230, 0, 0, 0,
	0, 0, 180, 199, 216, 217, 0, 0, 0, 209,
	210, 211, 212, 0, 0, 0, 150, 105, 126, 176,
	130, 137, 167, 214, 0, 172, 109, 198, 178, 0,
	1227, 0, 1229, 1228, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 93, 101,
	134, 0, 213, 0, 166, 120, 200, 0, 157, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 173, 132, 0, 135, 0, 0, 179, 145, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 1218, 1219,
	1220, 0, 0, 0, 0, 107, 1223, 1221, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 206, 0, 0,
	0, 164, 0, 110, 0, 185, 122, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 171, 158,
	197, 0, 159, 169, 136, 189, 165, 196, 0, 207,
	208, 187, 205, 174, 102, 152, 92, 163, 170, 0,
	111, 0, 218, 219, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 186, 195,
	108, 175, 98, 193, 182, 184, 143, 128, 129, 177,
	96, 97, 0, 168, 117, 162, 121, 116, 155, 183,
	146, 190, 191, 113, 215, 115, 114, 181, 103, 203,
	204, 100, 104, 202, 151, 156, 154, 201, 188, 194,
	144, 140, 0, 99, 192, 142, 139, 131, 0, 119,
	123, 160, 138, 161, 124, 148, 147, 149, 0, 0,
	1225, 1230, 0, 0, 0, 0, 0, 180, 199, 216,
	217, 0, 0, 0, 209, 210, 211, 212, 0, 0,
	0, 150, 105, 126, 176, 130, 137, 167, 214, 0,
	172, 109, 198, 178, 0, 1227, 0, 1229, 1228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 93, 101, 134, 0, 213, 0, 166,
	120, 200, 0, 157, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 173, 132, 0, 135,
	0, 0, 179, 145, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 359, 297, 295, 299, 300, 301, 302, 0, 0,
	107, 298, 303, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 206, 0, 0, 0, 164, 0, 110, 0,
	185, 122, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 171, 158, 197, 0, 159, 169, 136,
	189, 165, 196, 0, 207, 208, 187, 205, 174, 102,
	152, 92, 163, 170, 0, 111, 0, 218, 219, 220,
	221, 222, 223, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 186, 195, 108, 175, 98, 193, 182,
	184, 143, 128, 129, 177, 96, 97, 0, 168, 117,
	162, 121, 116, 155, 183, 146, 190, 191, 113, 215,
	115, 114, 181, 103, 203, 204, 100, 104, 202, 151,
	156, 154, 201, 188, 194, 144, 140, 0, 99, 192,
	142, 139, 131, 0, 119, 123, 160, 138, 161, 124,
	148, 147, 149, 0, 0, 153, 125, 0, 0, 0,
	0, 0, 180, 199, 216, 217, 0, 0, 0, 209,
	210, 211, 212, 0, 0, 0, 150, 105, 126, 176,
	130, 137, 167, 214, 0, 172, 109, 198, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 93, 101,
	134, 0, 213, 0, 166, 120, 200, 0, 157, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 118, 0,
	745, 173, 132, 0, 135, 0, 0, 179, 145, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 359, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 730, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 206, 0, 0,
	0, 164, 0, 110, 0, 185, 122, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 171, 158,
	197, 0, 159, 169, 136, 189, 165, 196, 0, 207,
	208, 187, 205, 174, 102, 152, 92, 163, 170, 0,
	111, 0, 218, 219, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 1829, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 186, 195,
	108, 175, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 0, 772, 773, 162, 774, 775, 776, 778,
	777, 747, 748, 749, 753, 751, 750, 752, 724, 726,
	204, 722, 725, 731, 727, 728, 729, 743, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 744,
	754, 755, 756, 757, 758, 759, 760, 761, 0, 0,
	153, 125, 0, 0, 0, 0, 0, 180, 199, 216,
	217, 0, 0, 0, 209, 210, 211, 212, 0, 0,
	0, 150, 105, 126, 176, 130, 137, 167, 214, 0,
	172, 109, 198, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 93, 723, 134, 0, 213, 0, 166,
	120, 200, 0, 157, 0, 0, 94, 0, 559, 0,
	0, 0, 0, 118, 0, 0, 173, 132, 0, 135,
	0, 0, 179, 145, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 359, 0, 561, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 556, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 206, 0, 0, 0, 164, 0, 110, 0,
	185, 122, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 171, 158, 197, 0, 159, 169, 136,
	189, 165, 196, 0, 207, 208, 187, 205, 174, 102,
	152, 92, 163, 170, 0, 111, 0, 218, 219, 220,
	221, 222, 223, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 186, 195, 108, 175, 98, 193, 182,
	184, 143, 128, 129, 177, 96, 97, 0, 168, 117,
	162, 121, 116, 155, 183, 146, 190, 191, 113, 215,
	115, 114, 181, 103, 203, 204, 100, 104, 202, 151,
	156, 154, 201, 188, 194, 144, 140, 0, 99, 192,
	142, 139, 131, 0, 119, 123, 160, 138, 161, 124,
	148, 147, 149, 0, 0, 153, 125, 0, 0, 0,
	0, 0, 180, 199, 216, 217, 0, 0, 0, 209,
	210, 211, 212, 0, 0, 0, 150, 105, 126, 176,
	130, 137, 167, 214, 0, 172, 109, 198, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 93, 101,
	134, 0, 213, 0, 166, 120, 200, 0, 157, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 118, 0,
	745, 173, 132, 0, 135, 0, 0, 179, 145, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 359, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 730, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 206, 0, 0,
	0, 164, 0, 110, 0, 185, 122, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 171, 158,
	197, 0, 159, 169, 136, 189, 165, 196, 0, 207,
	208, 187, 205, 174, 102, 152, 92, 163, 170, 0,
	111, 0, 218, 219, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 186, 195,
	108, 175, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 0, 772, 773, 162, 774, 775, 776, 778,
	777, 747, 748, 749, 753, 751, 750, 752, 724, 726,
	204, 722, 725, 731, 727, 728, 729, 743, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 744,
	754, 755, 756, 757, 758, 759, 760, 761, 0, 0,
	153, 125, 0, 0, 0, 0, 0, 180, 199, 216,
	217, 0, 0, 0, 209, 210, 211, 212, 0, 0,
	0, 150, 105, 126, 176, 130, 137, 167, 214, 0,
	172, 109, 198, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 93, 723, 134, 0, 213, 0, 166,
	120, 200, 0, 157, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 173, 132, 0, 135,
	0, 0, 179, 145, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 359, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 900, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 206, 0, 0, 0, 164, 0, 110, 0,
	185, 122, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 171, 158, 197, 0, 159, 169, 136,
	189, 165, 196, 0, 207, 208, 187, 205, 174, 102,
	152, 92, 163, 170, 0, 111, 0, 218, 219, 220,
	221, 222, 223, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 186, 195, 108, 175, 98, 193, 182,
	184, 143, 128, 129, 177, 96, 97, 0, 168, 117,
	162, 121, 116, 155, 183, 146, 190, 1556, 113, 215,
	115, 114, 181, 103, 203, 204, 100, 1555, 202, 151,
	156, 154, 201, 1557, 194, 144, 140, 0, 99, 192,
	142, 139, 1558, 903, 119, 123, 160, 138, 161, 124,
	148, 147, 149, 0, 0, 153, 125, 899, 0, 0,
	0, 0, 180, 199, 216, 217, 0, 0, 0, 209,
	210, 211, 212, 0, 0, 0, 150, 105, 126, 176,
	130, 137, 167, 214, 0, 172, 109, 198, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 93, 101,
	134, 0, 213, 0, 166, 120, 200, 0, 157, 0,
	0, 94, 0, 687, 0, 0, 0, 0, 118, 0,
	0, 173, 132, 0, 135, 0, 0, 179, 145, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 689, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 206, 0, 0,
	0, 164, 0, 110, 0, 185, 122, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 171, 158,
	197, 0, 159, 169, 136, 189, 165, 196, 0, 207,
	208, 187, 205, 174, 102, 152, 92, 163, 170, 0,
	111, 0, 218, 219, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 186, 195,
	108, 175, 98, 193, 182, 184, 143, 128, 129, 177,
	96, 97, 0, 168, 117, 162, 121, 116, 155, 183,
	146, 190, 191, 113, 215, 115, 114, 181, 103, 203,
	204, 100, 104, 202, 151, 156, 154, 201, 188, 194,
	144, 140, 0, 99, 192, 142, 139, 131, 0, 119,
	123, 160, 138, 161, 124, 148, 147, 149, 0, 0,
	153, 125, 0, 0, 0, 0, 0, 180, 199, 216,
	217, 0, 0, 0, 209, 210, 211, 212, 0, 0,
	0, 150, 105, 126, 176, 130, 137, 167, 214, 0,
	172, 109, 198, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 23, 93, 101, 134, 0, 213, 0, 166,
	120, 200, 0, 0, 157, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 118, 0, 173, 0, 132, 0,
	135, 0, 0, 179, 145, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 359, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 206, 0, 0, 0, 164, 0, 110,
	0, 185, 122, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 171, 158, 197, 0, 159, 169,
	136, 189, 165, 196, 0, 207, 208, 187, 205, 174,
	102, 152, 92, 163, 170, 0, 111, 0, 218, 219,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 186, 195, 108, 175, 98, 193,
	182, 184, 143, 128, 129, 177, 96, 97, 0, 168,
	117, 162, 121, 116, 155, 183, 146, 190, 191, 113,
	215, 115, 114, 181, 103, 203, 204, 100, 104, 202,
	151, 156, 154, 201, 188, 194, 144, 140, 0, 99,
	192, 142, 139, 131, 0, 119, 123, 160, 138, 161,
	124, 148, 147, 149, 0, 0, 153, 125, 0, 0,
	0, 0, 0, 180, 199, 216, 217, 0, 0, 0,
	209, 210, 211, 212, 0, 0, 0, 150, 105, 126,
	176, 130, 137, 167, 214, 0, 172, 109, 198, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 93,
	101, 134, 0, 213, 0, 166, 120, 200, 0, 157,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 173, 132, 0, 135, 0, 0, 179, 145,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1048, 0, 0, 0, 0, 359, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 206, 0,
	0, 0, 164, 0, 110, 0, 185, 122, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 171,
	158, 197, 0, 159, 169, 136, 189, 165, 196, 0,
	207, 208, 187, 205, 174, 102, 152, 92, 163, 170,
	0, 111, 0, 218, 219, 220, 221, 222, 223, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1049, 95, 186,
	195, 108, 175, 98, 193, 182, 184, 143, 128, 129,
	177, 96, 97, 0, 168, 117, 162, 121, 116, 155,
	183, 146, 190, 191, 113, 215, 115, 114, 181, 103,
	203, 204, 100, 104, 202, 151, 156, 154, 201, 188,
	194, 144, 140, 0, 99, 192, 142, 139, 131, 0,
	119, 123, 160, 138, 161, 124, 148, 147, 149, 0,
	0, 153, 125, 0, 0, 0, 0, 0, 180, 199,
	216, 217, 0, 0, 0, 209, 210, 211, 212, 0,
	0, 0, 150, 105, 126, 176, 130, 137, 167, 214,
	0, 172, 109, 198, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 23, 93, 101, 134, 0, 213, 0,
	166, 120, 200, 0, 0, 157, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 118, 0, 173, 0, 132,
	0, 135, 0, 0, 179, 145, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 206, 0, 0, 0, 164, 0,
	110, 0, 185, 122, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 171, 158, 197, 0, 159,
	169, 136, 189, 165, 196, 0, 207, 208, 187, 205,
	174, 102, 152, 92, 163, 170, 0, 111, 0, 218,
	219, 220, 221, 222, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 186, 195, 108, 175, 98,
	193, 182, 184, 143, 128, 129, 177, 96, 97, 0,
	168, 117, 162, 121, 116, 155, 183, 146, 190, 191,
	113, 215, 115, 114, 181, 103, 203, 204, 100, 104,
	202, 151, 156, 154, 201, 188, 194, 144, 140, 0,
	99, 192, 142, 139, 131, 0, 119, 123, 160, 138,
	161, 124, 148, 147, 149, 0, 0, 153, 125, 0,
	0, 0, 0, 0, 180, 199, 216, 217, 0, 0,
	0, 209, 210, 211, 212, 0, 0, 0, 150, 105,
	126, 176, 130, 137, 167, 214, 0, 172, 109, 198,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	93, 101, 134, 0, 213, 0, 166, 120, 200, 0,
	157, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 173, 132, 0, 135, 0, 0, 179,
	145, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 359, 0,
	0, 836, 0, 0, 837, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 206,
	0, 0, 0, 164, 0, 110, 0, 185, 122, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	171, 158, 197, 0, 159, 169, 136, 189, 165, 196,
	0, 207, 208, 187, 205, 174, 102, 152, 92, 163,
	170, 0, 111, 0, 218, 219, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	186, 195, 108, 175, 98, 193, 182, 184, 143, 128,
	129, 177, 96, 97, 0, 168, 117, 162, 121, 116,
	155, 183, 146, 190, 191, 113, 215, 115, 114, 181,
	103, 203, 204, 100, 104, 202, 151, 156, 154, 201,
	188, 194, 144, 140, 0, 99, 192, 142, 139, 131,
	0, 119, 123, 160, 138, 161, 124, 148, 147, 149,
	0, 0, 153, 125, 0, 0, 0, 0, 0, 180,
	199, 216, 217, 0, 0, 0, 209, 210, 211, 212,
	0, 0, 0, 150, 105, 126, 176, 130, 137, 167,
	214, 0, 172, 109, 198, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 93, 101, 134, 0, 213,
	0, 166, 120, 200, 0, 157, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 118, 708, 0, 173, 132,
	0, 135, 0, 0, 179, 145, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 359, 0, 707, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 206, 0, 0, 0, 164, 0,
	110, 0, 185, 122, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 171, 158, 197, 0, 159,
	169, 136, 189, 165, 196, 0, 207, 208, 187, 205,
	174, 102, 152, 92, 163, 170, 0, 111, 0, 218,
	219, 220, 221, 222, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 186, 195, 108, 175, 98,
	193, 182, 184, 143, 128, 129, 177, 96, 97, 0,
	168, 117, 162, 121, 116, 155, 183, 146, 190, 191,
	113, 215, 115, 114, 181, 103, 203, 204, 100, 104,
	202, 151, 156, 154, 201, 188, 194, 144, 140, 0,
	99, 192, 142, 139, 131, 0, 119, 123, 160, 138,
	161, 124, 148, 147, 149, 0, 0, 153, 125, 0,
	0, 0, 0, 0, 180, 199, 216, 217, 0, 0,
	0, 209, 210, 211, 212, 0, 0, 0, 150, 105,
	126, 176, 130, 137, 167, 214, 0, 172, 109, 198,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	93, 101, 134, 0, 213, 0, 166, 120, 200, 0,
	157, 0, 0, 94, 0, 687, 0, 0, 0, 0,
	118, 0, 0, 173, 132, 0, 135, 0, 0, 179,
	145, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	689, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 206,
	0, 0, 0, 164, 0, 110, 0, 185, 122, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	171, 158, 197, 0, 685, 169, 136, 189, 165, 196,
	0, 207, 208, 187, 205, 174, 102, 152, 92, 163,
	170, 0, 111, 0, 218, 219, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	186, 195, 108, 175, 98, 193, 182, 184, 143, 128,
	129, 177, 96, 97, 0, 168, 117, 162, 121, 116,
	155, 183, 146, 190, 191, 113, 215, 115, 114, 181,
	103, 203, 204, 100, 104, 202, 151, 156, 154, 201,
	188, 194, 144, 140, 0, 99, 192, 142, 139, 131,
	0, 119, 123, 160, 138, 161, 124, 148, 147, 149,
	0, 0, 153, 125, 0, 0, 0, 0, 0, 180,
	199, 216, 217, 0, 0, 0, 209, 210, 211, 212,
	0, 0, 0, 150, 105, 126, 176, 130, 137, 167,
	214, 0, 172, 109, 198, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 93, 101, 134, 0, 213,
	0, 166, 120, 200, 0, 157, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 173, 132,
	0, 135, 0, 0, 179, 145, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 206, 0, 0, 0, 164, 0,
	110, 0, 185, 122, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 171, 158, 197, 0, 159,
	169, 136, 189, 165, 196, 0, 207, 208, 187, 205,
	174, 102, 152, 92, 163, 170, 0, 111, 0, 218,
	219, 220, 221, 222, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 186, 195, 108, 175, 98,
	193, 182, 184, 143, 128, 129, 177, 96, 97, 0,
	168, 117, 162, 121, 116, 155, 183, 146, 190, 191,
	113, 215, 115, 114, 181, 103, 203, 204, 100, 104,
	202, 151, 156, 154, 201, 188, 194, 144, 140, 0,
	99, 192, 142, 139, 131, 0, 119, 123, 160, 138,
	161, 124, 148, 147, 149, 0, 0, 153, 125, 0,
	0, 0, 0, 0, 180, 199, 216, 217, 0, 0,
	0, 209, 210, 211, 212, 0, 0, 0, 150, 105,
	126, 176, 130, 137, 167, 214, 0, 172, 109, 198,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	93, 101, 134, 0, 213, 0, 166, 120, 200, 0,
	0, 157, 0, 0, 94, 0, 0, 0, 0, 0,
	1901, 118, 0, 173, 0, 132, 0, 135, 0, 0,
	179, 145, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 359,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	206, 0, 0, 0, 164, 0, 110, 0, 185, 122,
	0, 133, 0, 0, 0, 1390, 0, 0, 0, 112,
	0, 171, 158, 197, 0, 159, 169, 136, 189, 165,
	196, 0, 207, 208, 187, 205, 174, 102, 152, 92,
	163, 170, 0, 111, 0, 218, 219, 220, 221, 222,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 186, 195, 108, 175, 98, 193, 182, 184, 143,
	128, 129, 177, 96, 97, 0, 168, 117, 162, 121,
	116, 155, 183, 146, 190, 191, 113, 215, 115, 114,
	181, 103, 203, 204, 100, 104, 202, 151, 156, 154,
	201, 188, 194, 144, 140, 0, 99, 192, 142, 139,
	131, 0, 119, 123, 160, 138, 161, 124, 148, 147,
	149, 0, 0, 153, 125, 0, 0, 0, 0, 0,
	180, 199, 216, 217, 0, 0, 0, 209, 210, 211,
	212, 0, 0, 0, 150, 105, 126, 176, 130, 137,
	167, 214, 0, 172, 109, 198, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 93, 101, 134, 0,
	213, 0, 166, 120, 200, 0, 157, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 173,
	132, 0, 135, 0, 0, 179, 145, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 359, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 206, 0, 0, 0, 164,
	0, 110, 0, 185, 122, 0, 133, 0, 0, 0,
	1510, 0, 0, 0, 112, 0, 171, 158, 197, 0,
	159, 169, 136, 189, 165, 196, 0, 207, 208, 187,
	205, 174, 102, 152, 92, 163, 170, 0, 111, 0,
	218, 219, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 186, 195, 108, 175,
	98, 193, 182, 184, 143, 128, 129, 177, 96, 97,
	0, 168, 117, 162, 121, 116, 155, 183, 146, 190,
	191, 113, 215, 115, 114, 181, 103, 203, 204, 100,
	104, 202, 151, 156, 154, 201, 188, 194, 144, 140,
	0, 99, 192, 142, 139, 131, 0, 119, 123, 160,
	138, 161, 124, 148, 147, 149, 0, 0, 153, 125,
	0, 0, 0, 0, 0, 180, 199, 216, 217, 0,
	0, 0, 209, 210, 211, 212, 0, 0, 0, 150,
	105, 126, 176, 130, 137, 167, 214, 0, 172, 109,
	198, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 93, 101, 134, 0, 213, 0, 166, 120, 200,
	0, 157, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 173, 132, 0, 135, 0, 0,
	179, 145, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	206, 0, 0, 0, 164, 0, 110, 0, 185, 122,
	0, 133, 0, 0, 0, 1390, 0, 0, 0, 112,
	0, 171, 158, 197, 0, 159, 169, 136, 189, 165,
	196, 0, 207, 208, 187, 205, 174, 102, 152, 92,
	163, 170, 0, 111, 0, 218, 219, 220, 221, 222,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 186, 195, 108, 175, 98, 193, 182, 184, 143,
	128, 129, 177, 96, 97, 0, 168, 117, 162, 121,
	116, 155, 183, 146, 190, 191, 113, 215, 115, 114,
	181, 103, 203, 204, 100, 104, 202, 151, 156, 154,
	201, 188, 194, 144, 140, 0, 99, 192, 142, 139,
	131, 0, 119, 123, 160, 138, 161, 124, 148, 147,
	149, 0, 0, 153, 125, 0, 0, 0, 0, 0,
	180, 199, 216, 217, 0, 0, 0, 209, 210, 211,
	212, 0, 0, 0, 150, 105, 126, 176, 130, 137,
	167, 214, 0, 172, 109, 198, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 93, 101, 134, 0,
	213, 0, 166, 120, 200, 0, 157, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 173,
	132, 0, 135, 0, 0, 179, 145, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 206, 0, 0, 0, 164,
	0, 110, 0, 185, 122, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 171, 158, 197, 0,
	159, 169, 136, 189, 165, 196, 0, 207, 208, 187,
	205, 174, 102, 152, 92, 163, 170, 0, 111, 0,
	218, 219, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 186, 195, 108, 175,
	98, 193, 182, 184, 143, 128, 129, 177, 96, 97,
	0, 168, 117, 162, 121, 116, 155, 183, 146, 190,
	191, 113, 215, 115, 114, 181, 103, 203, 204, 100,
	104, 202, 151, 156, 154, 201, 188, 194, 144, 140,
	0, 99, 192, 142, 139, 131, 0, 119, 123, 160,
	138, 161, 124, 148, 147, 149, 0, 0, 153, 125,
	0, 0, 0, 0, 0, 180, 199, 216, 217, 0,
	0, 0, 209, 210, 211, 212, 0, 0, 0, 150,
	105, 126, 176, 130, 137, 167, 214, 0, 172, 109,
	198, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 93, 101, 134, 0, 213, 0, 166, 120, 200,
	0, 157, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 173, 132, 0, 135, 0, 0,
	179, 145, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 689, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	206, 0, 0, 0, 164, 0, 110, 0, 185, 122,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 171, 158, 197, 0, 159, 169, 136, 189, 165,
	196, 0, 207, 208, 187, 205, 174, 102, 152, 92,
	163, 170, 0, 111, 0, 218, 219, 220, 221, 222,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 186, 195, 108, 175, 98, 193, 182, 184, 143,
	128, 129, 177, 96, 97, 0, 168, 117, 162, 121,
	116, 155, 183, 146, 190, 191, 113, 215, 115, 114,
	181, 103, 203, 204, 100, 104, 202, 151, 156, 154,
	201, 188, 194, 144, 140, 0, 99, 192, 142, 139,
	131, 0, 119, 123, 160, 138, 161, 124, 148, 147,
	149, 0, 0, 153, 125, 0, 0, 0, 0, 0,
	180, 199, 216, 217, 0, 0, 0, 209, 210, 211,
	212, 0, 0, 0, 150, 105, 126, 176, 130, 137,
	167, 214, 0, 172, 109, 198, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 93, 101, 134, 0,
	213, 0, 166, 120, 200, 0, 157, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 173,
	132, 0, 135, 0, 0, 179, 145, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 359, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 206, 0, 0, 0, 164,
	0, 110, 0, 185, 122, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 171, 158, 197, 0,
	159, 169, 136, 189, 165, 196, 0, 207, 208, 187,
	205, 174, 102, 152, 92, 163, 170, 0, 111, 0,
	218, 219, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 186, 195, 108, 175,
	98, 193, 182, 184, 143, 128, 129, 177, 96, 97,
	0, 168, 117, 162, 121, 116, 155, 183, 146, 190,
	191, 113, 215, 115, 114, 181, 103, 203, 204, 100,
	104, 202, 151, 156, 154, 201, 188, 194, 144, 140,
	0, 99, 192, 142, 139, 131, 0, 119, 123, 160,
	138, 161, 124, 148, 147, 149, 0, 0, 153, 125,
	0, 0, 0, 0, 0, 180, 199, 216, 217, 0,
	0, 0, 209, 210, 211, 212, 0, 0, 0, 150,
	105, 126, 176, 130, 137, 167, 214, 0, 172, 109,
	198, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 93, 101, 134, 0, 213, 0, 166, 120, 200,
	0, 157, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 173, 132, 0, 135, 0, 0,
	179, 145, 583, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 359,
	0, 561, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	206, 0, 0, 0, 164, 0, 110, 0, 185, 122,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 171, 158, 197, 0, 159, 169, 136, 189, 165,
	196, 0, 207, 208, 187, 205, 174, 102, 152, 92,
	163, 170, 0, 111, 0, 218, 219, 220, 221, 222,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 186, 195, 108, 175, 98, 193, 182, 184, 143,
	128, 129, 177, 96, 97, 0, 168, 117, 162, 121,
	116, 155, 183, 146, 190, 191, 113, 215, 115, 114,
	181, 103, 203, 204, 100, 104, 202, 151, 156, 154,
	201, 188, 194, 144, 140, 0, 99, 192, 142, 139,
	131, 0, 119, 123, 160, 138, 161, 124, 148, 147,
	149, 0, 0, 153, 125, 0, 0, 0, 0, 0,
	180, 199, 216, 217, 0, 0, 0, 209, 210, 211,
	212, 0, 0, 0, 150, 105, 126, 176, 130, 137,
	167, 214, 0, 172, 109, 198, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 93, 101, 134, 0,
	213, 0, 166, 120, 200, 0, 157, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 173,
	132, 0, 135, 0, 0, 179, 145, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 206, 0, 0, 0, 164,
	0, 110, 0, 185, 122, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 171, 158, 197, 0,
	159, 169, 136, 189, 165, 196, 0, 207, 208, 187,
	205, 174, 102, 152, 92, 163, 170, 0, 111, 0,
	218, 219, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 186, 195, 108, 175,
	98, 193, 182, 184, 143, 128, 129, 177, 96, 97,
	0, 168, 117, 162, 121, 116, 155, 183, 146, 190,
	191, 113, 215, 115, 114, 181, 103, 203, 204, 100,
	104, 202, 151, 156, 154, 201, 188, 194, 144, 140,
	0, 99, 192, 142, 139, 131, 0, 119, 123, 160,
	138, 161, 124, 148, 147, 149, 0, 0, 153, 125,
	0, 0, 0, 0, 0, 180, 199, 216, 217, 0,
	0, 0, 209, 210, 211, 212, 0, 0, 0, 150,
	105, 126, 176, 130, 137, 167, 214, 796, 172, 109,
	198, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 93, 101, 134, 0, 213, 0, 166, 120, 200,
	0, 157, 0, 0, 94, 0, 0, 0, 0, 0,
	665, 118, 0, 0, 173, 132, 0, 135, 0, 0,
	179, 145, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	206, 0, 0, 0, 164, 0, 110, 0, 185, 122,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 171, 158, 197, 0, 159, 169, 136, 189, 165,
	196, 0, 207, 208, 187, 205, 174, 102, 152, 92,
	163, 170, 0, 111, 0, 218, 219, 220, 221, 222,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 186, 195, 108, 175, 98, 193, 182, 184, 143,
	128, 129, 177, 96, 97, 0, 168, 117, 162, 121,
	116, 155, 183, 146, 190, 191, 113, 215, 115, 114,
	181, 103, 203, 204, 100, 104, 202, 151, 156, 154,
	201, 188, 194, 144, 140, 0, 99, 192, 142, 139,
	131, 0, 119, 123, 160, 138, 161, 124, 148, 147,
	149, 0, 0, 153, 125, 0, 0, 0, 0, 0,
	180, 199, 216, 217, 0, 0, 0, 209, 210, 211,
	212, 0, 0, 0, 150, 105, 126, 176, 130, 137,
	167, 214, 0, 172, 109, 198, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 93, 101, 134, 342,
	213, 0, 166, 120, 200, 0, 157, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 173,
	132, 0, 135, 0, 0, 179, 145, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 206, 0, 0, 0, 164,
	0, 110, 0, 185, 122, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 171, 158, 197, 0,
	159, 169, 136, 189, 165, 196, 0, 207, 208, 187,
	205, 174, 102, 152, 92, 163, 170, 0, 111, 0,
	218, 219, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 186, 195, 108, 175,
	98, 193, 182, 184, 143, 128, 129, 177, 96, 97,
	0, 168, 117, 162, 121, 116, 155, 183, 146, 190,
	191, 113, 215, 115, 114, 181, 103, 203, 204, 100,
	104, 202, 151, 156, 154, 201, 188, 194, 144, 140,
	0, 99, 192, 142, 139, 131, 0, 119, 123, 160,
	138, 161, 124, 148, 147, 149, 0, 0, 153, 125,
	0, 0, 0, 0, 0, 180, 199, 216, 217, 0,
	0, 0, 209, 210, 211, 212, 0, 0, 0, 150,
	105, 126, 176, 130, 137, 167, 214, 0, 172, 109,
	198, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 93, 101, 134, 0, 213, 0, 166, 120, 200,
	0, 157, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 173, 132, 0, 135, 0, 0,
	179, 145, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 141,
	206, 0, 0, 0, 164, 0, 110, 0, 185, 122,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 171, 158, 197, 0, 159, 169, 136, 189, 165,
	196, 0, 207, 208, 187, 205, 174, 102, 152, 92,
	163, 170, 0, 111, 0, 218, 219, 220, 221, 222,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 186, 195, 108, 175, 98, 193, 182, 184, 143,
	128, 129, 177, 96, 97, 0, 168, 117, 162, 121,
	116, 155, 183, 146, 190, 191, 113, 215, 115, 114,
	181, 103, 203, 204, 100, 104, 202, 151, 156, 154,
	201, 188, 194, 144, 140, 0, 99, 192, 142, 139,
	131, 0, 119, 123, 160, 138, 161, 124, 148, 147,
	149, 0, 0, 153, 125, 0, 0, 0, 0, 0,
	180, 199, 216, 217, 0, 0, 0, 209, 210, 211,
	212, 0, 0, 0, 150, 105, 126, 176, 130, 137,
	167, 214, 0, 172, 109, 198, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 93, 101, 134, 0,
	213, 0, 166, 120, 200, 0, 157, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 173,
	132, 0, 135, 0, 0, 179, 145, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 359, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 206, 0, 0, 0, 164,
	0, 110, 0, 185, 122, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 171, 158, 197, 0,
	159, 169, 136, 189, 165, 196, 0, 207, 208, 187,
	205, 174, 102, 152, 92, 163, 170, 0, 111, 0,
	218, 219, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 186, 195, 108, 175,
	98, 193, 182, 184, 143, 128, 129, 177, 96, 97,
	0, 168, 117, 162, 121, 116, 155, 183, 146, 190,
	191, 113, 215, 115, 114, 181, 103, 203, 204, 100,
	104, 202, 151, 156, 154, 201, 188, 194, 144, 140,
	0, 99, 192, 142, 139, 131, 0, 119, 123, 160,
	138, 161, 124, 148, 147, 149, 0, 0, 153, 125,
	0, 0, 0, 0, 0, 180, 199, 216, 217, 0,
	0, 0, 209, 210, 211, 212, 0, 0, 0, 150,
	105, 126, 176, 130, 137, 167, 214, 0, 172, 109,
	198, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 93, 101, 134, 0, 213, 0, 166, 120, 200,
	0, 157, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 173, 132, 0, 135, 0, 0,
	179, 145, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	206, 0, 0, 0, 164, 0, 110, 0, 185, 122,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 171, 158, 197, 0, 159, 169, 136, 189, 165,
	196, 0, 207, 208, 187, 205, 174, 102, 152, 92,
	163, 170, 0, 111, 0, 218, 219, 220, 221, 222,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 186, 195, 108, 175, 98, 193, 182, 184, 143,
	128, 129, 177, 96, 97, 0, 168, 117, 162, 121,
	116, 155, 183, 146, 190, 191, 113, 215, 115, 114,
	181, 103, 203, 204, 100, 104, 202, 151, 156, 154,
	201, 188, 194, 144, 140, 0, 99, 192, 142, 139,
	131, 0, 119, 123, 160, 138, 161, 124, 148, 147,
	149, 0, 0, 153, 125, 0, 0, 0, 0, 0,
	180, 199, 216, 217, 0, 0, 0, 209, 210, 211,
	212, 0, 0, 0, 150, 105, 126, 176, 130, 137,
	167, 214, 0, 172, 109, 198, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 93, 101, 134, 0,
	213, 0, 166, 120, 200, 0, 157, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 173,
	132, 0, 135, 0, 0, 179, 145, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 206, 0, 0, 0, 164,
	0, 110, 0, 185, 122, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 171, 158, 197, 0,
	159, 169, 136, 189, 165, 196, 0, 207, 208, 187,
	205, 174, 102, 152, 92, 163, 170, 0, 111, 0,
	218, 219, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 186, 195, 108, 175,
	98, 193, 182, 184, 143, 128, 129, 177, 96, 97,
	0, 168, 117, 162, 121, 116, 155, 183, 146, 190,
	191, 113, 215, 115, 114, 181, 103, 203, 204, 100,
	104, 202, 151, 156, 154, 201, 188, 194, 144, 140,
	0, 99, 192, 142, 139, 131, 0, 119, 123, 160,
	138, 161, 124, 148, 147, 149, 0, 0, 153, 125,
	0, 0, 0, 0, 0, 180, 199, 216, 217, 0,
	0, 0, 209, 210, 211, 212, 0, 0, 0, 150,
	105, 126, 176, 130, 137, 167, 214, 0, 172, 109,
	198, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 93, 101, 134, 0, 213, 0, 166, 120, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 106,
}

var yyPact = [...]int16{
	2664, -1000, -209, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1384, 1432, -1000, -1000, -1000, -1000, -1000, -1000, 1202,
	1149, 365, 389, 114, 18213, 388, 2801, 18823, -1000, 138,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1117, -1000, -1000,
	-1000, -1000, -1000, 1371, 1380, 1168, 1340, 1271, -1000, 8436,
	347, 16078, 17908, 6182, -1000, 992, -170, 373, 358, 18518,
	339, 339, 18518, 18518, 18823, 339, -1000, -81, 359, 18823,
	-1000, 18823, 342, 982, 342, 342, 342, 18823, -1000, 452,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 18823, 978, 1299, 257, 4830,
	4830, 4830, 4830, 221, 4830, -43, 1238, -1000, -1000, -1000,
	-1000, 4830, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 857, 1304, 9060, 9060, 1384, -1000, 1117, -1000,
	-1000, -1000, 1297, -1000, -1000, 628, 1408, -1000, 11805, 449,
	-1000, 9060, 225, 1115, -1000, -1000, 1115, -1000, -1000, 409,
	-1000, -1000, -1000, 9975, 9975, 9975, 9975, 9975, 9975, 9975,
	-1000, -1000, -1000, -1000, 19, -204, 822, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 445, -1000, 8755, 1115,
	1115, 1115, 1115, 1115, 1115, 1115, 1115, 9060, 1115, 1115,
	1115, 1115, 1115, 1115, 1115, 1115, 1115, 2200, 1115, 1115,
	1115, 1115, -1000, 17603, 1068, 1201, -1000, -1000, -1000, 1334,
	13637, 14552, 18823, 1013, -1000, 1098, 5844, -58, -1000, -1000,
	-1000, 578, 444, 14247, -1000, -1000, -1000, 1296, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 977, -1000, 12110, 384,
	-1000, -1000, 339, 339, 1150, 973, 607, 970, 1229, 448,
	1332, 18823, -1000, 17298, 4830, 352, 18823, 1318, 1226, 18823,
	940, 920, -1000, 7196, -1000, 4830, 4830, 4830, 4830, 4830,
	4830, 4830, 4830, -1000, -1000, -1000, -1000, -1000, -1000, 4830,
	4830, -1000, -12, -1000, 18823, -1000, -1000, -1000, -1000, 1425,
	476, 766, 441, 1105, -1000, 724, 1371, 857, 1271, 13942,
	1249, -1000, -1000, 18823, -1000, 9060, 9060, 669, -1000, 16993,
	-1000, -1000, 5506, 486, 9975, 650, 634, 9975, 9975, 9975,
	9975, 9975, 9975, 9975, 9975, 9975, 9975, 9975, 9975, 9975,
	9975, 9975, 823, 2534, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 912, -1000, 1117, 11195,
	11195, 31, 31, 31, 31, 31, 31, 16688, -1000, -217,
	-1000, 226, 7826, -1000, 6520, 857, 962, 751, 8755, 8436,
	8436, 9060, 9060, 9975, 19128, 8436, 1336, 587, 751, 19128,
	-1000, 857, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 60, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	8436, 8436, 8436, 8436, 256, 18823, -1000, 19128, 16078, 16078,
	16078, 16078, 16078, -1000, 1268, 1264, -1000, 1253, 1211, 1257,
	18823, -1000, 968, 13637, 432, 1115, -1000, 16383, -1000, -1000,
	256, 1075, 16078, 18823, -1000, -1000, 5168, 1098, -58, 1094,
	-1000, -52, -13, 7521, 6520, 460, -1000, -1000, -1000, -1000,
	-1000, 620, 754, -131, 9, -1000, -1000, -1000, -1000, -1000,
	1155, -1000, -1000, -1000, 1155, 233, 1155, 1155, 1155, -1000,
	1155, 1155, 49, 49, 49, 49, 49, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1200, 1188, -1000, 1155, 1155, 1155,
	-1000, 1155, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1181, 283, 1181, 1158, 1158, -1000, -1000, 13331,
	18823, 18823, -107, 899, 4830, 1315, 4830, 18823, 1402, 18823,
	-1000, -1000, -1000, 12110, -1000, 965, 18823, -1000, 18823, -1000,
	-1000, 18823, 4830, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 584, -1000,
	-1000, -1000, -1000, 1281, 9060, 9060, 6858, 9060, -1000, -1000,
	-1000, 1304, -1000, 1336, 1362, -1000, 1289, 1288, 8436, -1000,
	-1000, 486, 558, -1000, -1000, 774, -1000, -1000, -1000, -1000,
	438, 1115, -1000, 2289, -1000, -1000, -1000, -1000, 650, 9975,
	9975, 9975, 2125, 2289, 2221, 319, 1375, 31, 84, 84,
	48, 48, 48, 48, 48, 267, 267, -1000, -1000, -1000,
	-1000, -101, -1000, 1155, 1181, 283, 1181, 1158, 1158, -1000,
	-1000, 857, -1000, 836, -1000, -1000, 832, 58, -112, -1000,
	-1000, -1000, -1000, -1000, 857, 8436, 962, 1096, 11805, -1000,
	-1000, -1000, 9060, -1000, 857, 956, 956, 545, 742, 596,
	2142, 1097, -1000, 435, 956, 8436, 608, -1000, 9060, 857,
	-1000, -1000, 956, 857, 956, 956, 1006, 1115, -1000, 1095,
	-1000, 576, 1201, 1199, 1220, 894, -1000, -1000, -1000, -1000,
	1261, -1000, 1254, -1000, -1000, -1000, -1000, -103, 383, 381,
	376, 18518, -1000, 1394, 16078, 1076, -1000, -1000, 1094, -58,
	-20, -1000, -1000, -1000, -1000, 751, 574, -1000, -1000, 874,
	6520, -1000, -1000, -1000, -1000, -1000, 1187, 778, 18518, 308,
	305, 512, 431, 872, -1000, -1000, -1000, 691, -1000, 18518,
	1423, -1000, -1000, 307, -1000, 292, 604, 835, 18823, 168,
	1185, 10585, -1000, -238, -1000, 2, -1000, -1000, 786, 49,
	49, 1155, 49, 49, 49, -1000, -1000, 460, 1295, 460,
	460, 460, 460, 834, 834, -112, -112, -1000, -1000, -1000,
	811, 1181, -1000, -1000, -1000, 802, -1000, 1180, 18823, 18518,
	1329, 1328, -1000, 6520, -1000, -1000, -1000, -1000, -1000, 1321,
	1049, -1000, -1000, -1000, -1000, 366, -1000, -1000, 910, 1653,
	423, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 237, 368, -1000, 4830, -1000, 606, 18823, 18823,
	1279, 751, 751, 430, -1000, -1000, 18823, -1000, -1000, -1000,
	-1000, 1085, -1000, -1000, -1000, 4492, 8436, -1000, 2125, 2289,
	2108, -1000, 9975, 9975, 82, -1000, 64, -1000, -204, -1000,
	-1000, 81, 80, -1000, 956, -1000, 8436, 751, -1000, -1000,
	-1000, 1817, 823, 1817, 9975, 9975, 9975, 9975, 9975, 6858,
	-94, 1078, 585, -1000, 9060, 676, -1000, -1000, -1000, -1000,
	-1000, 1217, 19128, 1115, -1000, 13026, 18518, 1384, 19128, 9060,
	9060, -1000, -1000, 9060, 1175, -1000, 9060, -1000, -1000, -1000,
	-1000, 1174, 1115, 1115, 1115, 937, -1000, 1384, 1076, -1000,
	-1000, -1000, -63, -32, -1000, 9060, -1000, 4154, -1000, 15163,
	-1000, 1417, 1355, 317, 5, -1000, 869, 867, -1000, 852,
	-1000, -1000, 22, -1000, -156, 106, -33, -1000, -1000, 1115,
	-1000, 1172, 1320, -1000, 1301, 800, -1000, 10280, -188, -1000,
	-1000, -204, -1000, -1000, -1000, 1115, -1000, 1171, 1166, -1000,
	1154, 1115, 419, -1000, -1000, -1000, 1027, 460, 460, 49,
	460, 460, 460, -1000, 534, -1000, -1000, -1000, -1000, 953,
	-1000, 951, -1000, -1000, 1081, -1000, 947, 18823, 18518, 1160,
	1214, 1117, 1117, 1077, -1000, 563, 1352, 211, 18823, 1402,
	1402, -1000, 290, 18518, -1000, 18518, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 18518, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 18823, -1000, -1000, -1000,
	-1000, -1000, 18518, 327, -1000, -1000, 833, 9060, -1000, -1000,
	-1000, 6520, -1000, 1394, 16078, -1000, -1000, 857, -1000, 9975,
	2289, 2289, -4, -1000, 832, -1000, -14, -30, -1000, -1000,
	857, 1155, 1155, -1000, 1155, 1158, -1000, -1000, 1155, 125,
	1155, 96, 857, 857, 147, 2069, 299, 72, 2054, -1000,
	1115, -88, -1000, 751, 9060, -1000, 1305, 1041, 1056, -1000,
	-1000, 8131, 857, 944, 418, 937, 1371, -1000, 751, 751,
	751, 15468, 751, -218, 15468, 15468, 15468, 12720, 18518, 1371,
	-1000, -1000, -1000, -1000, 751, 3816, -1000, 932, -1000, 234,
	1155, 363, 363, -175, 291, 289, 1115, -1000, -1000, -1000,
	-1000, -170, -1000, -1000, 604, -1000, 1154, 9060, 15468, 130,
	-1000, 1074, 1026, 10890, -1000, 12415, -1000, 857, -1000, 797,
	-1000, 777, 1024, 6520, -1000, -1000, -1000, 460, -1000, -1000,
	-1000, -1000, -1000, 49, 824, 49, 796, -1000, 794, 1102,
	1210, 15773, 18823, -1000, -1000, 6520, 3816, 349, 1339, -1000,
	-1000, 1351, -1000, 1051, 18518, -1000, -1000, 312, -1000, 1153,
	-1000, -1000, -1000, -1000, 1314, 18518, -1000, -1000, 751, 1392,
	1062, -1000, 2289, -1000, -1000, -1000, -1000, -1000, -1000, 223,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9975,
	9975, -1000, 9975, 9975, 9975, 857, 818, 751, 269, -1000,
	1115, -1000, -1000, 1058, 18518, 18518, -1000, -1000, 930, -1000,
	-1000, 928, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 924,
	924, 924, 432, -1000, -1000, -1000, -1000, -1000, -1000, 544,
	15163, 1312, -1000, -1000, -1000, 758, -1000, -1000, 623, 195,
	695, -1000, 18518, -170, 9060, -1000, 1115, 736, 917, 9060,
	1152, 787, -1000, 1011, -1000, 58, -112, -1000, -1000, -1000,
	-1000, -1000, -1000, 1115, -1000, 460, -1000, 460, 1005, 1003,
	15773, 18518, 18823, 1002, 1061, -1000, 232, 1151, -1000, -1000,
	18518, -1000, -1000, -1000, -1000, -1000, 179, 2850, 1148, 1145,
	15468, 1115, 330, 1390, 1378, -1000, -1000, 147, 147, 147,
	147, 47, -1000, -1000, 1422, -1000, 1115, -1000, 1117, 415,
	-1000, 18518, -1000, -1000, -218, -1000, -1000, -1000, -103, 1203,
	988, 150, -1000, 841, 560, 743, 557, 551, 538, 525,
	523, 517, 511, -1000, -1000, -1000, 1421, -1000, -1000, -1000,
	1413, 1141, -1000, 1139, 736, 9060, 215, 1205, 745, -1000,
	989, 948, -1000, -1000, -1000, -1000, 938, 1132, 1127, -178,
	786, 15773, 1009, -1000, 177, 2850, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1384, 18518, 18518, 18518, 18518,
	424, 9670, 9060, 15163, 15163, 909, 236, 245, -1000, 9060,
	9060, -1000, -1000, -1000, -1000, 857, 170, -119, 19128, 1056,
	857, 18518, -1000, -1000, -1000, -1000, 18518, -1000, -117, 988,
	18518, -1000, 775, -1000, -1000, 638, 756, 638, 638, 638,
	638, 638, 363, 363, 18518, 15163, 215, 736, -1000, -90,
	1412, -126, 107, -1000, -1000, -178, 15773, 15163, 1394, 1125,
	933, -105, 18518, 9060, 2619, -1000, 1371, 1055, 11500, -1000,
	-1000, -1000, -1000, 18518, 1407, 1404, 1403, 1397, 1206, 225,
	580, 143, 906, 904, 1150, 893, -1000, 18518, 1122, 751,
	1050, -1000, 1276, -98, -122, 1040, -1000, -1000, 1115, 889,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 604, 604, 878, 862, -1000, 215, -1000, 363,
	363, -1000, -1000, -1000, 149, 747, 719, 713, 708, 15,
	-1000, 1373, 1394, 863, 856, 544, 15468, -178, -1000, -206,
	-1000, 751, -1000, -1000, 2850, 1304, 18518, 171, -1000, -1000,
	1307, -1000, -1000, -1000, -1000, -1000, 2850, 2850, 2850, -1000,
	279, -107, -1000, 236, 1287, 15163, -1000, 1275, -1000, 18518,
	-1000, 988, -1000, -1000, 323, 544, -1000, -1000, -1000, 680,
	-1000, 645, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14857,
	544, 1394, 544, 1203, 851, 1394, 9060, -212, -1000, -1000,
	12110, 1345, 18518, 2496, -1000, 356, 2471, 152, -1000, 159,
	-1000, -1000, 253, 848, -110, 857, -1000, 18823, 1203, -1000,
	-1000, -1000, 401, 1203, 544, -1000, -1000, -1000, 544, 751,
	581, 1117, -1000, -1000, -1000, 513, 595, -1000, 154, -1000,
	235, -1000, -120, -1000, 1120, -1000, 6520, -1000, -1000, 1203,
	-1000, -1000, 332, 141, -1000, -1000, 1115, -128, 18518, -1000,
	-1000, -1000, 2850, 9365, -1000, 846, 2344, 147, 857, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1663, 30, 86, 1662, 1661, 1660, 1450, 1448, 1440,
	1438, 1659, 1658, 1655, 1654, 1653, 1651, 1650, 1649, 1648,
	1647, 1644, 1643, 1641, 1640, 1638, 1637, 1636, 511, 1633,
	1632, 1631, 108, 1630, 107, 1629, 1628, 68, 263, 72,
	69, 1806, 1627, 50, 97, 104, 1623, 89, 1622, 1621,
	160, 1620, 96, 1618, 1617, 132, 1614, 1613, 29, 54,
	16, 44, 1611, 1610, 106, 7, 1609, 1607, 1605, 21,
	1604, 1603, 90, 22, 28, 39, 37, 1601, 193, 23,
	1600, 87, 1598, 1597, 1594, 1590, 25, 1588, 93, 36,
	15, 12, 1584, 8, 14, 98, 66, 49, 18, 131,
	94, 1583, 59, 95, 85, 1580, 1579, 696, 1577, 1574,
	1571, 1570, 1569, 1567, 786, 109, 1565, 1562, 1559, 77,
	0, 210, 47, 119, 1555, 71, 1554, 2039, 115, 91,
	42, 1553, 56, 1783, 67, 1550, 1548, 61, 117, 105,
	116, 99, 1546, 114, 1545, 1544, 1542, 225, 60, 113,
	40, 1541, 1539, 1537, 76, 83, 51, 79, 92, 1533,
	1532, 1530, 1529, 52, 1528, 9, 33, 2, 84, 1527,
	1526, 1525, 1524, 41, 1523, 1521, 32, 1520, 24, 19,
	46, 13, 4, 1519, 1518, 1517, 3, 1516, 43, 1515,
	6, 1514, 11, 1512, 1511, 1509, 65, 1507, 1504, 1503,
	17, 1499, 1496, 34, 20, 57, 48, 45, 81, 58,
	1492, 53, 5, 1, 133, 1491, 10, 1490, 1487, 1483,
	26, 27, 1470, 1465, 1464, 1461, 1460, 1459, 55, 1457,
	1456, 1672, 919, 1452, 1444, 1442, 1413, 299,
}

var yyR1 = [...]uint8{
	0, 229, 230, 230, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 233,
	233, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 217, 217, 216, 218, 218, 12, 12, 12, 12,
	12, 210, 210, 210, 210, 210, 13, 13, 213, 213,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 135, 135, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 208,
	208, 208, 209, 209, 209, 211, 211, 212, 212, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 215, 215,
	194, 194, 194, 195, 195, 195, 195, 195, 195, 197,
	197, 198, 198, 125, 125, 192, 192, 191, 190, 190,
	189, 189, 188, 199, 199, 20, 170, 171, 171, 171,
	171, 171, 171, 171, 158, 139, 139, 139, 139, 139,
	139, 139, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 205, 205, 205,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	201, 201, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 148, 148, 148, 148,
	148, 148, 200, 200, 196, 196, 196, 196, 196, 196,
	196, 196, 143, 143, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 142, 142, 142, 142, 142, 142,
	142, 142, 144, 144, 144, 144, 144, 144, 144, 144,
	140, 140, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 146, 146, 146, 146, 146,
	146, 146, 146, 157, 157, 147, 147, 155, 155, 156,
	156, 156, 154, 154, 154, 151, 151, 152, 152, 153,
	153, 153, 149, 149, 149, 150, 150, 150, 160, 181,
	181, 181, 183, 183, 184, 184, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 169, 169, 207,
	207, 180, 180, 180, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 168, 168, 178, 178, 179, 179, 176,
	176, 176, 177, 163, 163, 163, 163, 163, 164, 165,
	165, 165, 165, 161, 162, 203, 203, 203, 204, 204,
	166, 166, 167, 167, 174, 174, 172, 172, 173, 173,
	173, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 234, 234, 235, 235, 235,
	235, 235, 235, 235, 187, 185, 185, 186, 186, 17,
	18, 18, 18, 18, 18, 19, 19, 21, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 112, 112, 109, 109, 110, 110, 111, 111, 111,
	113, 113, 113, 136, 136, 136, 23, 23, 25, 25,
	26, 27, 24, 24, 24, 24, 24, 236, 28, 29,
	29, 30, 30, 30, 34, 34, 34, 32, 32, 33,
	33, 39, 39, 38, 38, 40, 40, 40, 40, 124,
	124, 124, 123, 123, 42, 42, 43, 43, 44, 44,
	45, 45, 45, 220, 220, 219, 219, 221, 221, 221,
	221, 221, 221, 57, 57, 93, 93, 93, 96, 96,
	46, 46, 46, 46, 47, 47, 48, 48, 49, 49,
	131, 131, 130, 130, 130, 129, 129, 51, 51, 51,
	53, 52, 52, 52, 52, 54, 54, 56, 56, 55,
	55, 58, 58, 58, 58, 59, 59, 94, 94, 41,
	41, 41, 41, 41, 41, 41, 108, 108, 61, 61,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	71, 71, 71, 71, 71, 71, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 37, 37, 72,
	72, 72, 78, 73, 73, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 69, 69, 69, 69, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	237, 237, 70, 70, 70, 70, 35, 35, 35, 35,
	35, 134, 134, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 138, 138, 138,
	138, 138, 138, 138, 138, 82, 82, 36, 36, 80,
	80, 81, 83, 83, 79, 79, 79, 222, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 66, 66,
	66, 84, 84, 85, 85, 86, 86, 87, 87, 88,
	89, 89, 89, 90, 90, 90, 90, 91, 91, 91,
	63, 63, 63, 63, 63, 63, 92, 92, 92, 92,
	97, 97, 74, 74, 76, 76, 75, 77, 98, 98,
	102, 99, 99, 103, 103, 103, 103, 103, 101, 101,
	101, 126, 126, 126, 106, 106, 114, 114, 115, 115,
	107, 107, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 117, 117, 117, 118, 118, 121, 121, 122,
	122, 127, 127, 128, 128, 223, 223, 223, 224, 224,
	224, 225, 225, 226, 227, 227, 228, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 231, 232, 132, 133, 133,
	133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 14, 13, 15, 13, 14,
	7, 7, 5, 5, 5, 11, 11, 9, 5, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 1, 4,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 0, 3, 0, 1, 0, 2, 1, 0, 2,
	1, 3, 3, 0, 2, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 2, 3, 1, 1, 1, 1,
	1, 0, 2, 2, 3, 2, 4, 4, 2, 2,
	3, 2, 3, 2, 7, 9, 3, 3, 6, 9,
	9, 8, 8, 5, 8, 7, 4, 2, 4, 6,
	2, 1, 1, 2, 1, 1, 1, 3, 3, 1,
	1, 2, 0, 4, 3, 4, 3, 3, 3, 3,
	3, 3, 3, 2, 4, 6, 2, 3, 2, 3,
	1, 3, 0, 2, 0, 3, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 2, 2, 2, 2,
	1, 1, 1, 3, 3, 2, 1, 2, 1, 1,
	1, 1, 4, 4, 4, 4, 4, 1, 5, 2,
	2, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 3, 3, 0, 1, 0, 1, 0,
	2, 1, 0, 3, 3, 0, 1, 2, 6, 0,
	1, 4, 1, 2, 1, 3, 2, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 1,
	1, 0, 2, 5, 2, 3, 3, 2, 3, 2,
	2, 3, 4, 1, 1, 1, 1, 1, 3, 3,
	2, 2, 1, 2, 5, 5, 8, 8, 13, 1,
	1, 2, 2, 10, 7, 0, 1, 1, 0, 3,
	0, 1, 1, 3, 0, 4, 1, 2, 1, 1,
	1, 6, 11, 13, 13, 7, 7, 7, 12, 7,
	7, 7, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	4, 3, 6, 4, 2, 4, 2, 2, 2, 2,
	3, 1, 1, 0, 1, 0, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 0, 4, 1, 3, 1, 1, 1,
	1, 1, 1, 4, 8, 1, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 0, 4, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 6, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 1, 1, 1,
	1, 2, 4, 5, 6, 4, 4, 4, 6, 6,
	6, 6, 8, 8, 6, 8, 8, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	1, 2, 1, 2, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 3, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 5, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 2, 0, 2,
	2, 0, 1, 4, 1, 3, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int16{
	-1000, -229, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	117, 118, 120, 119, 150, 121, 143, 49, 197, 198,
	200, 201, 26, 144, 145, 148, 149, -231, 8, 304,
	53, -230, 346, -86, 15, -30, 5, -28, -236, -28,
	-28, -28, -28, -28, -170, 53, -125, -199, 126, 159,
	296, 123, 139, 157, 158, 124, 141, 71, -107, 127,
	129, 124, 124, 125, 127, 296, 123, 124, -55, -127,
	56, -120, 166, 313, 21, 197, 210, 211, 202, 243,
	231, 314, 164, 228, 232, 282, 345, 65, 200, 291,
	133, 170, 146, 223, 226, 225, 217, 214, 28, 249,
	320, 216, 136, 250, 254, 261, 283, 311, 207, 208,
	285, 247, 32, 138, 315, 34, 154, 286, 252, 246,
	241, 126, 245, 206, 240, 38, 220, 256, 255, 257,
	281, 234, 165, 260, 236, 218, 235, 18, 149, 152,
	251, 253, 215, 167, 131, 156, 319, 287, 213, 153,
	168, 148, 290, 336, 163, 201, 284, 209, 293, 37,
	267, 227, 204, 219, 205, 135, 198, 161, 238, 155,
	221, 222, 244, 203, 239, 199, 157, 150, 292, 268,
	321, 237, 233, 229, 230, 162, 127, 159, 160, 274,
	275, 276, 277, 317, 288, 224, 269, 270, 172, 173,
	174, 175, 176, 177, 178, 124, 111, 232, 117, 272,
	125, 32, 156, -136, 124, -109, 160, 274, 275, 276,
	277, 56, 284, 283, 278, -127, 199, -132, -132, -132,
	-132, -132, -2, -90, 17, 16, -5, -3, -231, 6,
	21, 22, -34, 39, 40, -29, -40, 102, -41, -127,
	-60, 73, -65, 29, 56, -120, 24, -64, -61, -79,
	-222, -77, -78, 111, 112, 100, 101, 108, 74, 113,
	-69, -67, -68, -70, -225, 58, -121, 57, 66, 59,
	60, 61, 62, 67, 68, 69, 294, -75, -231, 43,
	44, 305, 306, 307, 308, 312, 309, 76, 33, 295,
	303, 302, 301, 299, 300, 297, 298, 344, 130, 296,
	106, 304, 258, -107, -43, -44, -45, -46, -57, -78,
	-231, -55, 11, -50, -55, -99, -135, 199, -103, 284,
	283, -122, 294, -101, -121, -119, 282, 232, 281, 56,
	-120, 122, 180, 325, 72, 23, 25, 265, 271, 179,
	75, 111, 16, 76, 186, 334, 335, 110, 305, 117,
	47, 297, 298, 295, 184, 307, 308, 296, 272, 191,
	20, 29, 10, 26, 144, 22, 104, 119, 181, 79,
	80, 147, 24, 145, 69, 187, 189, 19, 50, 137,
	11, 324, 13, 14, 338, 326, 130, 129, 91, 337,
	125, 45, 8, 113, 27, 88, 41, 142, 190, 43,
	89, 17, 299, 300, 31, 312, 151, 106, 48, 35,
	339, 73, 340, 67, 51, 289, 185, 71, 15, 46,
	341, 139, 188, 90, 120, 304, 44, 182, 342, 123,
	183, 6, 310, 30, 143, 42, 124, 273, 78, 128,
	68, 158, 5, 141, 9, 49, 52, 301, 302, 303,
	33, 77, 12, 140, 316, 70, -171, -158, 56, -203,
	334, 335, 127, 127, -121, -115, 130, -115, -121, -121,
	-55, -115, 304, 124, -55, -55, -114, 130, 56, -114,
	-114, -114, -55, 114, -55, 56, 30, 296, 56, 156,
	124, 157, 127, -133, -231, -122, -133, -133, -133, 161,
	162, -133, -110, 279, 51, -133, -232, 55, -91, 19,
	31, -41, -127, -87, -88, -41, -86, -2, -28, 35,
	-32, 22, 64, 11, -124, 72, 71, 88, -123, 23,
	-121, 58, 114, -41, -62, 91, 73, 89, 90, 75,
	97, 96, 107, 100, 101, 102, 103, 104, 105, 106,
	98, 99, 110, 344, 81, 82, 83, 84, 85, 86,
	87, 92, 93, 94, 95, -108, -231, -78, -231, 115,
	116, -65, -65, -65, -65, -65, -65, -65, -226, 259,
	-196, 344, -231, 58, 114, -2, -73, -41, -231, -231,
	-231, -231, -231, -231, -231, -231, -231, -82, -41, -231,
	-237, -231, -237, -237, -237, -237, -237, -237, -237, -138,
	111, 232, 146, 223, -141, -140, 238, 237, 202, 203,
	204, 205, 206, 207, 208, 209, 210, 211, 231, 314,
	-231, -231, -231, -231, -56, 27, -55, 30, 54, -51,
	-53, -52, -54, 41, 45, 47, 42, 43, 44, 48,
	-131, 23, -43, -231, -130, 152, -129, 23, -127, 58,
	-55, -50, -233, 54, 11, 52, 54, -99, 199, -100,
	-104, 285, 287, 81, 114, -126, -121, 58, 29, 30,
	55, 54, -159, -139, -143, -140, -145, -144, -146, -121,
	-141, -142, 231, 314, 228, 232, 229, 234, 235, 236,
	111, 233, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 237, 249, 30, 146, 221, 222, 223,
	226, 225, 227, 224, 250, 251, 252, 253, 254, 255,
	256, 257, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 213, 214, 216, 217, 218, 220, 219, 125,
	-115, -115, -192, 52, 56, 73, 56, 51, -208, 51,
	19, 179, 180, 23, -55, -55, 289, -133, 128, -55,
	24, 51, -55, 56, 56, -128, -127, -119, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -112, 273,
	280, -55, 9, 91, 54, 18, 114, 54, -89, 25,
	26, -90, -232, -34, -66, -121, 59, 62, -33, 42,
	-55, -41, -41, -71, 67, 73, 68, 69, -123, 102,
	-128, -122, -119, -65, -72, -75, -78, 63, 91, 89,
	90, 75, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -134, 56, 58,
	-143, 222, -138, -141, 213, 214, 216, 217, 218, 220,
	219, 56, -64, -121, -64, -121, 347, 232, 222, 262,
	113, 238, 247, 248, -39, 22, -73, -38, -41, -40,
	-122, -232, 54, -232, -2, -38, -38, -41, -41, -79,
	-65, -79, -121, -127, -38, -32, -80, -81, 77, -79,
	-232, 230, -38, -39, -38, -38, -95, 152, -55, -98,
	-102, -79, -44, -45, -45, -44, -45, 41, 41, 41,
	46, 41, 46, 41, -52, -127, -232, -58, 49, 129,
	50, -231, -129, -95, 52, -43, -55, -103, -100, 54,
	286, 288, 289, 51, 70, -41, -122, -150, 111, 110,
	-174, -158, -160, -163, -161, -162, -175, -164, 133, 131,
	135, 136, 141, -168, 125, 142, 67, 73, -205, 133,
	51, 265, 271, 131, 142, 141, 345, 65, 134, 324,
	326, 29, -153, 347, 259, -151, 268, -147, 53, -147,
	-147, 230, -147, -147, -147, -147, -147, -149, 232, -149,
	-149, -149, -149, 53, 53, -147, -147, -147, -147, -155,
	53, 215, -155, -155, -156, 53, -156, -121, 51, 196,
	-55, -55, -190, 316, -191, 56, -133, 24, -133, -55,
	-211, -209, 8, 9, 10, -55, -139, -116, 122, 119,
	120, -187, 118, 265, 232, 65, 29, 15, 305, 152,
	321, 56, 153, -55, -55, -55, -133, -111, 11, 91,
	37, -41, -41, -128, -88, -91, -106, 19, 11, 33,
	33, -38, 67, 68, 69, 114, -231, -72, -65, -65,
	-65, -37, 147, 72, 316, -232, -227, -228, 58, 230,
	-154, 316, 317, -232, -38, -232, 54, -41, -232, -232,
	-232, 54, 52, 23, 54, 11, 54, 54, 11, 114,
	-232, -38, -83, -81, 79, -41, -232, -232, -232, -232,
	-232, -63, 30, 33, -2, -231, -231, -59, 54, 12,
	81, -48, -47, 51, 52, -49, 51, -47, 41, 41,
	-220, 316, 125, 125, 125, -96, -121, -59, -43, -59,
	-104, -105, 290, 287, 293, 81, 56, -172, -122, 53,
	-204, 51, 73, -166, -121, 142, -168, -168, 56, -168,
	56, 125, 56, 67, 19, -121, 9, 142, 142, -204,
	58, -55, -201, 325, 16, 53, -206, 53, 58, 59,
	60, 67, -148, 66, -61, 260, -69, 295, 298, 297,
	261, -121, -127, 348, -152, 269, 59, -149, -149, -147,
	-149, -149, -149, -150, 30, -150, -150, -150, -150, -157,
	58, -157, -154, -154, 59, -155, 59, 51, 52, -55,
	-121, 23, 23, -189, -188, -122, -194, 23, 51, 54,
	-208, -132, -125, 133, -235, 159, 132, 137, 136, 56,
	131, 135, 152, -193, 159, 132, 133, 137, 136, 56,
	125, 142, 131, 135, 152, 141, -117, -118, 128, 23,
	125, 142, 152, 122, -133, -113, 89, 12, -127, -127,
	38, 114, -55, -42, 11, 102, -122, -39, -37, 72,
	-65, -65, 221, 348, 54, -196, 221, 221, -232, -40,
	-137, 111, 228, 146, 223, 217, 247, 248, 234, 267,
	221, 268, -134, -137, -65, -65, -65, -65, -65, -122,
	313, -86, 80, -41, 78, -97, 51, -98, -74, -76,
	-75, -231, -2, -92, -121, -96, -86, -102, -41, -41,
	-41, 53, -41, 53, -231, -231, -231, -232, 54, -86,
	-59, 287, 291, 292, -41, 81, -122, -179, -176, -121,
	142, 10, 9, 19, 137, 131, 345, 56, 56, 56,
	-203, 141, 336, -205, 345, -148, 261, -231, 53, 23,
	29, 59, -206, 53, -196, 344, -196, -231, -147, 53,
	-147, 53, 53, 114, 55, -150, -150, -149, -150, -150,
	-150, 56, 111, 55, 54, 55, 54, 55, 54, -55,
	-121, 53, 51, -2, -2, 54, 81, -195, 19, 167,
	168, -55, -209, -211, -234, 125, 142, -121, -132, -121,
	-132, -121, -55, -132, -121, 133, -163, 58, -41, -59,
	-43, -232, -65, 270, -228, 270, 270, -232, -147, -147,
	-147, -156, -147, 208, -147, 208, -232, -232, -232, 19,
	54, -232, 54, 19, -231, -36, 310, -41, 28, -97,
	54, -232, -232, -232, 54, 114, -232, -90, -93, -121,
	142, -219, -221, 338, 339, 340, 341, 342, 343, -93,
	-93, -93, -130, -121, -90, -173, -122, 58, 59, 55,
	54, -147, -177, 263, -147, -165, 163, 164, 30, 165,
	-165, 336, 142, 142, -231, -203, -204, -41, -93, 53,
	326, 54, 55, -206, -121, 232, 222, 238, 247, -232,
	55, 55, 55, -122, -150, -149, 58, -149, 59, 59,
	53, 52, 51, -178, -179, -69, -121, -55, -188, -173,
	128, 21, 6, 8, 9, 10, 19, 23, -121, 141,
	53, 27, -121, -84, 13, -149, 56, -65, -65, -65,
	-65, -65, -232, 58, 142, -76, 33, -2, -231, -121,
	-121, 54, 55, 55, 54, -232, -232, -232, -58, -181,
	-183, 316, -182, 52, 138, 65, 172, 173, 174, 175,
	176, 177, 178, -176, -89, -204, 51, 67, 166, -204,
	51, -166, -121, -203, -41, -231, -232, 55, -41, 53,
	59, 55, -150, -150, 55, 55, -178, -121, -55, 55,
	53, 53, -167, -121, 181, -212, -214, -7, -9, -8,
	-11, -10, -12, -13, -14, -3, 20, 185, 186, 191,
	187, 140, 130, 53, 53, -93, -231, 131, -85, 14,
	16, -232, -232, -232, -232, -35, 91, 316, 9, -74,
	-2, 114, -121, -221, -220, -180, 51, -182, 316, 53,
	318, 56, -169, 81, 58, 81, 81, 81, 81, 81,
	81, 81, 9, 10, 53, 53, -232, -41, -200, 165,
	51, 55, -202, 55, 55, 55, 53, 53, -94, 337,
	-178, -197, 54, 52, 182, -214, -86, -217, -121, -216,
	-121, -121, -121, -210, 35, 188, 189, 190, -60, -65,
	-41, -60, -179, -179, 55, -185, -186, 152, 142, -41,
	-73, -232, 314, 48, 319, -98, -232, -121, -121, -184,
	-182, -121, 59, -207, 51, 70, 59, -207, -207, -207,
	-207, -207, -165, -165, -167, -179, -200, -232, 311, 10,
	9, 322, 323, 55, 198, 328, 329, 151, 330, 165,
	331, 332, -94, -178, -179, -59, 53, 55, -198, 316,
	-121, -41, -215, -214, 197, -90, 54, -218, -139, 183,
	-121, 11, 11, 11, 11, -214, 197, 78, 197, 55,
	55, -192, -232, 54, -121, 53, 38, 315, 320, -231,
	55, 54, -204, -204, 55, 55, -200, -165, -165, 316,
	59, 16, 59, 59, 59, 59, 329, 151, 331, 16,
	-59, 55, 55, -181, -93, -94, 345, -214, -91, -216,
	-121, 184, 27, -213, -214, -212, -213, -223, 192, 73,
	-190, -186, 33, -179, 38, -121, -182, 134, -181, 59,
	59, 333, -127, -181, -59, -181, -180, 55, -59, -41,
	346, 19, -121, 80, -214, 346, 80, -224, 193, 192,
	154, 55, 316, -232, -55, -180, 114, -180, -181, -181,
	80, -2, 80, 79, 195, 194, 155, 319, 53, -122,
	-180, 130, 197, -231, 320, -167, -213, -65, 151, 55,
	80, -232, -232,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 755, 0, 487, 487, 487, 487, 487, 487, 0,
	-2, 810, 0, 0, 0, 0, -2, 477, 478, 0,
	480, 481, 1107, 1107, 1107, 1107, 1107, 0, 33, 34,
	1105, 1, 3, 763, 0, 0, 491, 494, 489, 841,
	810, 0, 0, 0, 84, 147, 375, 0, 0, 0,
	808, 808, 0, 0, 0, 808, 134, 0, 0, 0,
	811, 0, 806, 0, 806, 806, 806, 0, 436, 569,
	831, 832, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 0, 0, 0, 0, 1108,
	1108, 1108, 1108, 0, 1108, 465, 454, 456, 457, 458,
	459, 1108, 474, 475, 464, 476, 479, 482, 483, 484,
	485, 486, 27, 767, 841, 841, 755, 29, 0, 487,
	492, 493, 497, 495, 496, 488, 0, 505, 509, 0,
	579, 841, 584, 586, -2, -2, 0, 625, 626, 627,
	628, 629, 630, 841, 841, 841, 841, 841, 841, 841,
	657, 658, 659, 660, 0, 224, 734, 741, 742, 743,
	744, 745, 746, 747, 588, 589, 0, 787, 841, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 690,
	690, 690, 690, 690, 690, 690, 690, 0, 0, 0,
	0, 0, 842, 0, 0, 516, 518, 519, 520, 550,
	0, 552, 0, 0, 41, 45, 0, 1075, 791, -2,
	-2, 0, 0, 0, 829, 830, -2, 984, -2, 827,
	828, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 0, 148, 161, 0,
	376, 377, 808, 808, 135, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 1108, 0, 0, 0, 0, 0,
	0, 0, 435, 0, 437, 1108, 1108, 1108, 1108, 1108,
	1108, 1108, 1108, 446, 1109, 1110, 447, 448, 449, 1108,
	1108, 451, 0, 466, 0, 460, 28, 1106, 22, 0,
	0, 764, 0, 756, 757, 760, 763, 27, 494, 0,
	499, 498, 490, 0, 506, 841, 841, 0, 510, 0,
	512, 513, 0, 582, 841, 0, 0, 841, 841, 841,
	841, 841, 841, 841, 841, 841, 841, 841, 841, 841,
	841, 841, 0, 0, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 585, 0, 599, 0, 0,
	0, 648, 649, 650, 651, 652, 653, 654, 661, 0,
	739, 0, -2, 740, 0, 27, 0, 623, 841, 841,
	841, 841, 841, 841, 0, 841, 497, 0, 726, 0,
	681, 0, 682, 683, 684, 685, 686, 687, 688, 689,
	717, 0, 719, 720, 721, 722, 723, 724, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 260, 261,
	841, -2, 841, 841, 43, 0, 568, 0, 0, 0,
	0, 0, 0, 557, 0, 0, 560, 0, 0, 0,
	0, 551, 0, 0, 571, 1039, 553, 0, 555, 556,
	-2, 0, 0, 0, 39, 40, 0, 46, 1075, 48,
	73, 0, 0, 841, 0, 315, 801, 802, 803, 799,
	384, 0, 154, 309, 305, 156, 157, 158, 159, 160,
	295, 233, 260, 261, 295, 295, 295, 295, 295, 267,
	295, 295, 312, 312, 312, 312, 312, 276, 277, 278,
	279, 280, 281, 282, 999, 0, 252, 295, 295, 295,
	256, 295, 258, 259, 285, 286, 287, 288, 289, 290,
	291, 292, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 297, 297, 297, 299, 299, 250, 251, 0,
	0, 0, 138, 0, 1108, 0, 1108, 0, 0, 0,
	99, 100, 101, 161, 145, 0, 0, 402, 0, 430,
	807, 0, 1108, 433, 434, 570, 833, 834, 438, 439,
	440, 441, 442, 443, 444, 445, 450, 453, 467, 461,
	462, 455, 768, 0, 841, 841, 0, 841, 759, 761,
	762, 767, 30, 497, 0, 748, 0, 0, 841, 500,
	25, 580, 581, 583, 600, 0, 602, 604, 511, 507,
	0, 735, -2, 590, 591, 619, 620, 621, 0, 841,
	841, 841, 617, 595, 0, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 645, 701, 702,
	646, 0, 656, 295, 297, 297, 297, 299, 299, 250,
	251, 0, 643, 0, 644, 655, 0, 0, 302, 227,
	228, 229, 230, 231, 0, 841, 0, 502, 509, 503,
	737, 622, 841, 786, 27, 0, 0, 0, 0, 627,
	0, 0, 734, 0, 0, 841, 732, 729, 841, 0,
	691, 718, 0, 0, 0, 0, 0, 0, 567, 575,
	788, 0, 517, 546, 548, 0, 543, 558, 559, 561,
	0, 563, 0, 565, 566, 521, 522, 523, 0, 0,
	0, 0, 554, 575, 0, 575, 42, 792, 47, 0,
	0, 76, 77, 793, 794, 795, 0, 797, 316, 0,
	146, 149, 150, 151, 152, 153, 0, 378, 380, 0,
	0, 0, 0, 0, 353, 354, 163, 0, 165, 0,
	0, 168, 169, 0, 171, 173, 378, 0, 0, 0,
	0, 0, 162, 0, 311, 307, 306, 232, 0, 312,
	312, 295, 312, 312, 312, 269, 270, 315, 0, 315,
	315, 315, 315, 0, 0, 302, 302, 255, 257, 244,
	0, 297, 246, 247, 248, 0, 249, 0, 0, 0,
	0, 0, 92, 0, 136, 137, 93, 809, 94, 120,
	0, 105, 102, 103, 104, 0, 98, 1107, 133, 0,
	822, 403, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 0, 0, 429, 1108, 432, 470, 0, 0,
	0, 765, 766, 0, 758, 23, 0, 804, 805, 749,
	750, 514, 601, 603, 605, 0, -2, 592, 617, 596,
	0, 593, 841, 841, 0, 587, 0, 844, 224, 225,
	226, 0, 0, 662, 0, 665, 841, 624, -2, 666,
	667, 0, 0, 0, 841, 841, 841, 841, 841, 0,
	0, 755, 0, 730, 841, 0, 680, 692, 693, 694,
	695, 780, 0, 0, -2, 0, 0, 755, 0, 841,
	841, 540, 547, 841, 0, 541, 841, 542, 562, 564,
	533, 0, 0, 0, 0, 0, 538, 755, 575, 38,
	74, 75, 0, 0, 81, 841, 317, 0, 386, 0,
	363, 0, 0, 0, 381, 344, 0, 0, 347, 0,
	349, -2, 375, 164, 0, 0, 0, 170, 172, 0,
	176, 177, 0, 200, 0, 0, 187, 0, 224, 191,
	192, 224, 194, 195, 196, 1033, 199, 295, 295, 220,
	1005, 0, 0, 310, 155, 308, 0, 315, 315, 312,
	315, 315, 315, 271, 0, 272, 273, 274, 275, 0,
	293, 0, 253, 254, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 139, 140, 0, 123, 0, 0, 0,
	0, 391, 0, 0, 1107, 0, 417, 418, 419, 420,
	421, 422, 423, 1107, 0, 404, 405, 406, 407, 408,
	409, 410, 411, 412, 413, 414, 0, 1107, 823, 824,
	825, 826, 0, 0, 431, 452, 0, 841, 468, 469,
	769, 0, 24, 575, 0, 508, 736, 0, 594, 841,
	618, 597, 0, 843, 0, 846, 0, 0, 663, 504,
	0, 295, 295, 706, 295, 299, 709, 710, 295, 712,
	295, 715, 0, 0, 0, 0, 0, 0, 0, 735,
	0, 727, 679, 733, 841, 31, 0, 780, 770, 782,
	784, 841, 27, 0, 776, 0, 763, 789, 576, 790,
	544, 0, 549, 0, 0, 0, 0, 552, 0, 763,
	37, 78, 79, 80, 796, 0, 387, 0, 357, 295,
	295, 0, 0, 0, 0, 0, 0, 345, 346, 348,
	351, 375, 186, 166, 378, 167, 0, 841, 0, 0,
	201, 0, 0, 0, 190, 0, 193, 0, 216, 0,
	218, 0, 0, 0, 296, 262, 263, 315, 264, 265,
	266, 313, 314, 312, 0, 312, 0, 300, 0, 0,
	0, 0, 0, -2, -2, 0, 0, 0, 0, 121,
	122, 0, 106, 0, 0, 415, 416, 0, 396, 0,
	397, 399, 400, 401, 0, 380, 395, 471, 472, 751,
	515, 664, 598, 647, 845, 303, 304, 668, 703, 312,
	707, 708, 711, 713, 714, 716, 670, 669, 671, 841,
	841, 674, 841, 841, 841, 0, 0, 731, 0, 32,
	0, 785, -2, 0, 0, 0, 44, 35, 0, 535,
	536, 0, 525, 527, 528, 529, 530, 531, 532, 0,
	0, 0, 571, 539, 36, 385, 388, 389, 390, 319,
	0, 760, 361, 362, 360, 378, 369, 370, 0, 0,
	378, 379, 380, 375, 841, 352, 0, 0, 0, 841,
	183, 0, 188, 0, 198, 984, 302, 229, 230, 197,
	217, 219, 221, 0, 268, 315, 294, 315, 0, 0,
	0, 0, 0, 0, 355, 356, 295, 0, 141, 142,
	0, 124, 125, 126, 127, 128, 0, 0, 0, 0,
	0, 0, 381, 753, 0, 704, 705, 0, 0, 0,
	0, 696, 678, 728, 0, 783, 0, -2, 0, 778,
	777, 0, 545, 524, 0, 572, 573, 574, 523, 341,
	320, 0, 322, 0, 337, 0, 0, 0, 0, 0,
	0, 0, 0, 358, 359, 364, 0, 371, 372, 365,
	0, 0, 381, 0, 0, 841, 222, 178, 0, 202,
	0, 0, 283, 284, 298, 301, 0, 0, 0, 577,
	1105, 0, 129, 382, 0, 97, 107, 109, 110, 111,
	112, 113, 114, 115, 116, 755, 0, 0, 0, 0,
	61, 841, 841, 0, 0, 0, 0, 0, 26, 841,
	841, 673, 672, 675, 676, 0, 0, 0, 0, 773,
	27, 0, 537, 526, 534, 318, 0, 323, 0, 0,
	0, 326, 0, 338, 328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 174, 0,
	0, 0, 0, 185, 189, 577, 0, 0, 575, 0,
	0, 131, 0, 841, 0, 108, 763, 49, -2, 51,
	56, 57, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 0, 0, 135, 0, 425, 0, 0, 754,
	752, 677, 0, 0, 0, 781, -2, 779, 342, 0,
	324, 329, 327, 330, 339, 340, 331, 332, 333, 334,
	335, 336, 378, 378, 0, 0, 374, 222, 223, 0,
	0, 181, 182, 184, 0, 0, 0, 0, 0, 0,
	213, 0, 575, 0, 0, 319, 0, 577, 95, 0,
	383, 130, 96, 118, 0, 767, 0, 0, 53, 55,
	59, 62, 63, 64, 65, 66, 0, 0, 0, 392,
	835, 138, 424, 0, 0, 0, 697, 0, 700, 0,
	321, 0, 366, 367, 0, 319, 175, 179, 180, 0,
	204, 0, 206, 207, 208, 209, 210, 211, 212, 0,
	319, 575, 319, 341, 0, 575, 841, 0, 117, 52,
	161, 0, 0, 0, 68, 0, 0, 838, 836, 0,
	398, 426, 0, 0, 698, 0, 325, 0, 341, 203,
	205, 214, 0, 341, 319, 88, 86, 578, 319, 132,
	0, 0, 60, 67, 69, 0, 71, 394, 0, 837,
	0, 393, 0, 343, 0, 373, 0, 85, 89, 341,
	119, -2, 0, 0, 839, 840, 0, 0, 0, 215,
	87, 70, 0, 841, 699, 0, 0, 0, 0, 368,
	72, 427, 428,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 105, 97, 3,
	53, 55, 102, 100, 54, 101, 114, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 346,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 347, 3, 348, 107, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 96, 3, 108,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 98, 99, 104,
	106, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:385
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:390
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:391
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:395
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:418
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:426
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:430
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:436
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:443
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:449
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:453
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:459
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:463
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:470
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:482
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:494
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:498
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:504
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:510
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:514
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:518
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:523
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:524
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:528
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:532
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:537
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:541
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:547
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:551
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:555
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:559
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:565
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:569
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:582
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:586
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:592
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:597
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:601
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:607
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:614
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:621
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:628
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:636
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:646
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:650
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:654
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:658
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:662
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:668
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:675
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:685
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:689
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:696
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:705
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:713
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:724
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:728
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:734
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:738
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:742
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:748
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:752
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:756
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:760
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:766
		{
			yyVAL.str = SessionStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:770
		{
			yyVAL.str = GlobalStr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:776
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 85:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:781
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 86:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:801
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 87:
		yyDollar = yyS[yypt-15 : yypt+1]
//line parser.y:821
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[6].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[12].columns,
					Where:     NewWhere(WhereStr, yyDollar[13].expr),
					Options:   yyDollar[14].indexOptions,
					Partition: yyDollar[15].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:842
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 89:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:858
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[11].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:874
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:882
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:890
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:898
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:902
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:906
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 96:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:918
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 97:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:929
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:940
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:952
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:956
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:960
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:966
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:970
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:974
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:980
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:984
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:990
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:994
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1000
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1011
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1023
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1030
		{
			yyVAL.bytes = nil
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1034
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1038
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1043
		{
			yyVAL.bytes = nil
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1047
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1051
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1055
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1059
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1063
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1068
		{
			yyVAL.expr = nil
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1072
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1077
		{
			yyVAL.expr = nil
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1081
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1086
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1090
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1095
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1099
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1105
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1110
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1115
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1121
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1126
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1132
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1137
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1141
		{
			yyVAL.bytes = nil
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1147
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1154
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1160
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1164
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1169
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1173
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1177
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1181
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1185
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1191
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1197
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1208
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1213
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1219
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1231
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1236
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1241
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1246
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1251
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1256
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1261
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1266
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1271
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1276
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1281
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1286
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1295
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1305
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1310
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1315
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1322
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1329
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1337
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1342
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1348
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1354
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1360
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1366
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1373
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1377
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1381
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1387
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1391
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1395
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1399
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1403
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1407
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1411
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1415
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1419
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1423
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1429
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1433
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1438
		{
			yyVAL.sequence = &Sequence{}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1442
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1447
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1452
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1457
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1462
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1467
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1472
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1477
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1482
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1487
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1492
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1497
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1502
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1509
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1513
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1517
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1521
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1525
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1529
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1534
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1538
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1543
		{
			yyVAL.bytes = nil
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1556
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1561
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1571
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1579
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1659
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1689
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1693
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1699
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1707
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1711
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1723
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1828
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1833
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1838
		{
			yyVAL.optVal = nil
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1842
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1847
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1851
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1859
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1863
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1869
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1877
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1881
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1885
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1890
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1894
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1899
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1903
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1908
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1912
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1916
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1921
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1925
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1929
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1934
		{
			yyVAL.str = ""
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1938
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1942
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1948
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1953
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1957
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1961
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1967
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1971
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1977
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1981
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1987
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1991
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1996
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2000
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2004
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2008
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2012
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2016
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2020
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2024
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2028
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2034
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2038
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2044
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2048
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2054
		{
			yyVAL.indexPartition = nil
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2058
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 343:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2062
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2068
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2072
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2076
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2080
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2084
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2088
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2092
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2096
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2100
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2106
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2110
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2116
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2121
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2127
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2131
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2137
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2142
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2146
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2156
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 364:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2161
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2168
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 366:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2175
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 367:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2182
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 368:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2191
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(String(yyDollar[10].tableName)),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2203
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2207
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2211
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2215
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 373:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2221
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 374:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2232
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2242
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2246
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2250
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2256
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2260
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2265
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2272
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2276
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2283
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2287
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2294
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2298
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2304
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2308
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2312
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 391:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2318
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 392:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2322
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 393:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2336
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 394:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2350
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2369
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 396:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2378
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 397:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2382
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 398:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2386
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 399:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2399
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 400:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2409
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 401:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2414
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2419
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2423
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 424:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2455
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2461
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2465
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 427:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2471
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 428:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2475
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2481
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2487
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2495
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 432:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2500
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2508
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2512
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2518
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2522
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2527
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2533
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2537
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2541
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2550
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2562
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2566
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2574
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2578
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2582
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2586
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2590
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2600
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2604
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2616
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2620
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2624
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2634
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2640
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2644
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2650
		{
			yyVAL.str = ""
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2654
		{
			yyVAL.str = "extended "
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2660
		{
			yyVAL.str = ""
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2664
		{
			yyVAL.str = "full "
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2670
		{
			yyVAL.str = ""
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2674
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2678
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2684
		{
			yyVAL.showFilter = nil
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2688
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2692
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2698
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2702
		{
			yyVAL.str = SessionStr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2706
		{
			yyVAL.str = GlobalStr
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2712
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2716
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2722
		{
			yyVAL.statement = &Begin{}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2726
		{
			yyVAL.statement = &Begin{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2732
		{
			yyVAL.statement = &Commit{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2738
		{
			yyVAL.statement = &Rollback{}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2744
		{
			yyVAL.statement = &OtherRead{}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2748
		{
			yyVAL.statement = &OtherRead{}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2752
		{
			yyVAL.statement = &OtherRead{}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2756
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2760
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2765
		{
			setAllowComments(yylex, true)
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2769
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2775
		{
			yyVAL.bytes2 = nil
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2779
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2785
		{
			yyVAL.str = UnionStr
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2789
		{
			yyVAL.str = UnionAllStr
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2793
		{
			yyVAL.str = UnionDistinctStr
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2798
		{
			yyVAL.str = ""
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2802
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2806
		{
			yyVAL.str = SQLCacheStr
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2811
		{
			yyVAL.str = ""
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2815
		{
			yyVAL.str = DistinctStr
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2820
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2824
		{
			yyVAL.str = StraightJoinHint
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2829
		{
			yyVAL.selectExprs = nil
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2833
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2839
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2843
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2849
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2853
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2857
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2861
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2866
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2870
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2874
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2881
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2886
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2890
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2896
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2900
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2910
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2914
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2918
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2923
		{
			yyVAL.strs = []string{}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2927
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2933
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2937
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2943
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2947
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2951
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2955
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2959
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2963
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2969
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 534:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2973
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2979
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2984
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2988
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2994
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2998
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3011
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3015
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3019
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3023
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3029
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3031
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3035
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3037
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3041
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3043
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3046
		{
			yyVAL.empty = struct{}{}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3048
		{
			yyVAL.empty = struct{}{}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3051
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3055
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3059
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3066
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3072
		{
			yyVAL.str = JoinStr
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3076
		{
			yyVAL.str = JoinStr
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3080
		{
			yyVAL.str = JoinStr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3086
		{
			yyVAL.str = StraightJoinStr
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3092
		{
			yyVAL.str = LeftJoinStr
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3096
		{
			yyVAL.str = LeftJoinStr
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3100
		{
			yyVAL.str = RightJoinStr
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3104
		{
			yyVAL.str = RightJoinStr
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3110
		{
			yyVAL.str = NaturalJoinStr
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3114
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3124
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3128
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3134
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3138
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3143
		{
			yyVAL.indexHints = nil
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3147
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3151
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3155
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3160
		{
			yyVAL.expr = nil
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3164
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3169
		{
			yyVAL.columns = nil
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3173
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3179
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3183
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3187
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3191
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3195
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3199
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3203
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3209
		{
			yyVAL.str = ""
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3213
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3219
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3223
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3229
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3233
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3237
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3241
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3245
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3249
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3253
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3257
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 598:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3261
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3265
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3271
		{
			yyVAL.str = IsNullStr
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3275
		{
			yyVAL.str = IsNotNullStr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3279
		{
			yyVAL.str = IsTrueStr
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3283
		{
			yyVAL.str = IsNotTrueStr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3287
		{
			yyVAL.str = IsFalseStr
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3291
		{
			yyVAL.str = IsNotFalseStr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3297
		{
			yyVAL.str = EqualStr
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3301
		{
			yyVAL.str = LessThanStr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3305
		{
			yyVAL.str = GreaterThanStr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3309
		{
			yyVAL.str = LessEqualStr
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3313
		{
			yyVAL.str = GreaterEqualStr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3317
		{
			yyVAL.str = NotEqualStr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3321
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3325
		{
			yyVAL.str = PosixRegexStr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3329
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3333
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3337
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3342
		{
			yyVAL.expr = nil
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3346
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3352
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3356
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3360
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3366
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3372
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3376
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3382
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3386
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3390
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3394
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3398
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3402
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3406
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3410
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3414
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3418
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3422
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3426
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3430
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3434
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3438
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3442
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3446
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3450
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3454
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3458
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3462
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3466
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 647:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3470
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3474
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3478
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3482
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3490
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3504
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3508
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3512
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3520
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3528
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3536
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3546
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 663:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3550
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 664:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3554
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3558
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3568
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3572
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 668:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3576
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 669:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3580
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 670:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3584
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 671:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3588
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 672:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3592
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 673:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3596
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 674:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3600
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 675:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3604
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 676:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3608
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 677:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3612
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 678:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3616
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3620
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3624
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3634
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3638
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3642
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3646
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3651
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3656
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3661
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3666
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3670
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3684
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3688
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3692
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 695:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3696
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3702
		{
			yyVAL.str = ""
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3706
		{
			yyVAL.str = BooleanModeStr
		}
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3710
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 699:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3714
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3718
		{
			yyVAL.str = QueryExpansionStr
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3724
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3728
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3734
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3738
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3742
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3746
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3750
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3754
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3760
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3764
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3768
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3772
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3776
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3780
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3784
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3788
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3794
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3798
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3802
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3806
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3810
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3814
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3818
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3822
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3827
		{
			yyVAL.expr = nil
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3831
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3836
		{
			yyVAL.str = string("")
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3840
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3846
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3850
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3856
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3861
		{
			yyVAL.expr = nil
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3865
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3871
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3875
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 736:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3879
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3885
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3891
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3895
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3900
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3905
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3909
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3913
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3917
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3921
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3925
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3929
		{
			yyVAL.expr = &NullVal{}
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3935
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3944
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3948
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3953
		{
			yyVAL.exprs = nil
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3957
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3962
		{
			yyVAL.expr = nil
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3966
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3971
		{
			yyVAL.orderBy = nil
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3975
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3981
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3985
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3991
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3996
		{
			yyVAL.str = AscScr
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4000
		{
			yyVAL.str = AscScr
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4004
		{
			yyVAL.str = DescScr
		}
	case 763:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4009
		{
			yyVAL.limit = nil
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4013
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4017
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 766:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4021
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4026
		{
			yyVAL.str = ""
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4030
		{
			yyVAL.str = ForUpdateStr
		}
	case 769:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4034
		{
			yyVAL.str = ShareModeStr
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4047
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4051
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4055
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 773:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4060
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 774:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4064
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 775:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4068
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4075
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4079
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4083
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 779:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4087
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 780:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4092
		{
			yyVAL.updateExprs = nil
		}
	case 781:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4096
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4102
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4106
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4112
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4116
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4122
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4128
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4138
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4142
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4148
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4154
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4158
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4164
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4168
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4172
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 796:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4177
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4181
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4188
		{
			yyVAL.bytes = []byte("charset")
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4195
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4199
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4203
		{
			yyVAL.expr = &Default{}
		}
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4212
		{
			yyVAL.byt = 0
		}
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4214
		{
			yyVAL.byt = 1
		}
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4217
		{
			yyVAL.empty = struct{}{}
		}
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4219
		{
			yyVAL.empty = struct{}{}
		}
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4222
		{
			yyVAL.str = ""
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4224
		{
			yyVAL.str = IgnoreStr
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4228
		{
			yyVAL.empty = struct{}{}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4230
		{
			yyVAL.empty = struct{}{}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4232
		{
			yyVAL.empty = struct{}{}
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4234
		{
			yyVAL.empty = struct{}{}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4236
		{
			yyVAL.empty = struct{}{}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4238
		{
			yyVAL.empty = struct{}{}
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4240
		{
			yyVAL.empty = struct{}{}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4242
		{
			yyVAL.empty = struct{}{}
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4244
		{
			yyVAL.empty = struct{}{}
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4246
		{
			yyVAL.empty = struct{}{}
		}
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4249
		{
			yyVAL.empty = struct{}{}
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4251
		{
			yyVAL.empty = struct{}{}
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4253
		{
			yyVAL.empty = struct{}{}
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4257
		{
			yyVAL.empty = struct{}{}
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4259
		{
			yyVAL.empty = struct{}{}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4263
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4267
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4274
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4280
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4284
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4291
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4297
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4301
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4305
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4311
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4315
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4319
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4325
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4329
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 843:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4336
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4343
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4347
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4354
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4638
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4647
		{
			decNesting(yylex)
		}
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4652
		{
			forceEOF(yylex)
		}
	case 1108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4657
		{
			forceEOF(yylex)
		}
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4661
		{
			forceEOF(yylex)
		}
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4665
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
