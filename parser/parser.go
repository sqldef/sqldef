// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const GRANT = 57457
const REVOKE = 57458
const OPTION = 57459
const PRIVILEGES = 57460
const SCHEMA = 57461
const TABLE = 57462
const INDEX = 57463
const MATERIALIZED = 57464
const VIEW = 57465
const TO = 57466
const IGNORE = 57467
const IF = 57468
const PRIMARY = 57469
const COLUMN = 57470
const CONSTRAINT = 57471
const REFERENCES = 57472
const SPATIAL = 57473
const FULLTEXT = 57474
const FOREIGN = 57475
const KEY_BLOCK_SIZE = 57476
const POLICY = 57477
const WHILE = 57478
const EXCLUDE = 57479
const GIST = 57480
const UNIQUE = 57481
const KEY = 57482
const SHOW = 57483
const DESCRIBE = 57484
const EXPLAIN = 57485
const DATE = 57486
const ESCAPE = 57487
const REPAIR = 57488
const OPTIMIZE = 57489
const TRUNCATE = 57490
const EXEC = 57491
const EXECUTE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const TYPE = 57500
const RETURN = 57501
const EXTENSION = 57502
const DATA = 57503
const STATUS = 57504
const VARIABLES = 57505
const RESTRICT = 57506
const CASCADE = 57507
const NO = 57508
const ACTION = 57509
const PERMISSIVE = 57510
const RESTRICTIVE = 57511
const PUBLIC = 57512
const CURRENT_USER = 57513
const SESSION_USER = 57514
const PAD_INDEX = 57515
const FILLFACTOR = 57516
const IGNORE_DUP_KEY = 57517
const STATISTICS_NORECOMPUTE = 57518
const STATISTICS_INCREMENTAL = 57519
const ALLOW_ROW_LOCKS = 57520
const ALLOW_PAGE_LOCKS = 57521
const DISTANCE = 57522
const M = 57523
const EUCLIDEAN = 57524
const COSINE = 57525
const BEFORE = 57526
const AFTER = 57527
const EACH = 57528
const ROW = 57529
const SCROLL = 57530
const CURSOR = 57531
const OPEN = 57532
const CLOSE = 57533
const FETCH = 57534
const PRIOR = 57535
const FIRST = 57536
const LAST = 57537
const DEALLOCATE = 57538
const INSTEAD = 57539
const OF = 57540
const OUTPUT = 57541
const DEFERRABLE = 57542
const INITIALLY = 57543
const IMMEDIATE = 57544
const DEFERRED = 57545
const CONCURRENTLY = 57546
const SQL = 57547
const SECURITY = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const BIT = 57554
const TINYINT = 57555
const SMALLINT = 57556
const SMALLSERIAL = 57557
const MEDIUMINT = 57558
const INT = 57559
const INTEGER = 57560
const SERIAL = 57561
const BIGINT = 57562
const BIGSERIAL = 57563
const INTNUM = 57564
const REAL = 57565
const DOUBLE = 57566
const PRECISION = 57567
const FLOAT_TYPE = 57568
const DECIMAL = 57569
const NUMERIC = 57570
const SMALLMONEY = 57571
const MONEY = 57572
const TIME = 57573
const TIMESTAMP = 57574
const DATETIME = 57575
const YEAR = 57576
const DATETIMEOFFSET = 57577
const DATETIME2 = 57578
const SMALLDATETIME = 57579
const CHAR = 57580
const VARCHAR = 57581
const VARYING = 57582
const BOOL = 57583
const CHARACTER = 57584
const VARBINARY = 57585
const NCHAR = 57586
const NVARCHAR = 57587
const NTEXT = 57588
const UUID = 57589
const TEXT = 57590
const TINYTEXT = 57591
const MEDIUMTEXT = 57592
const LONGTEXT = 57593
const CITEXT = 57594
const BLOB = 57595
const TINYBLOB = 57596
const MEDIUMBLOB = 57597
const LONGBLOB = 57598
const JSON = 57599
const JSONB = 57600
const ENUM = 57601
const GEOMETRY = 57602
const POINT = 57603
const LINESTRING = 57604
const POLYGON = 57605
const GEOMETRYCOLLECTION = 57606
const MULTIPOINT = 57607
const MULTILINESTRING = 57608
const MULTIPOLYGON = 57609
const VECTOR = 57610
const VARIADIC = 57611
const ARRAY = 57612
const NOW = 57613
const GETDATE = 57614
const BPCHAR = 57615
const TEXT_PATTERN_OPS = 57616
const NULLX = 57617
const AUTO_INCREMENT = 57618
const APPROXNUM = 57619
const SIGNED = 57620
const UNSIGNED = 57621
const ZEROFILL = 57622
const ZONE = 57623
const AUTOINCREMENT = 57624
const DATABASES = 57625
const TABLES = 57626
const VSCHEMA_TABLES = 57627
const EXTENDED = 57628
const FULL = 57629
const PROCESSLIST = 57630
const NAMES = 57631
const CHARSET = 57632
const GLOBAL = 57633
const SESSION = 57634
const ISOLATION = 57635
const LEVEL = 57636
const READ = 57637
const WRITE = 57638
const ONLY = 57639
const REPEATABLE = 57640
const COMMITTED = 57641
const UNCOMMITTED = 57642
const SERIALIZABLE = 57643
const NEW = 57644
const CONCAT_NULL_YIELDS_NULL = 57645
const CURSOR_CLOSE_ON_COMMIT = 57646
const QUOTED_IDENTIFIER = 57647
const ARITHABORT = 57648
const FMTONLY = 57649
const NOCOUNT = 57650
const NOEXEC = 57651
const NUMERIC_ROUNDABORT = 57652
const ANSI_DEFAULTS = 57653
const ANSI_NULL_DFLT_OFF = 57654
const ANSI_NULL_DFLT_ON = 57655
const ANSI_NULLS = 57656
const ANSI_PADDING = 57657
const ANSI_WARNINGS = 57658
const FORCEPLAN = 57659
const SHOWPLAN_ALL = 57660
const SHOWPLAN_TEXT = 57661
const SHOWPLAN_XML = 57662
const IMPLICIT_TRANSACTIONS = 57663
const REMOTE_PROC_TRANSACTIONS = 57664
const XACT_ABORT = 57665
const CURRENT_TIMESTAMP = 57666
const DATABASE = 57667
const CURRENT_DATE = 57668
const CURRENT_TIME = 57669
const LOCALTIME = 57670
const LOCALTIMESTAMP = 57671
const UTC_DATE = 57672
const UTC_TIME = 57673
const UTC_TIMESTAMP = 57674
const REPLACE = 57675
const CONVERT = 57676
const CAST = 57677
const COALESCE = 57678
const SUBSTR = 57679
const SUBSTRING = 57680
const GROUP_CONCAT = 57681
const SEPARATOR = 57682
const INHERIT = 57683
const LEAD = 57684
const LAG = 57685
const MATCH = 57686
const AGAINST = 57687
const BOOLEAN = 57688
const LANGUAGE = 57689
const WITH = 57690
const WITHOUT = 57691
const PARSER = 57692
const QUERY = 57693
const EXPANSION = 57694
const UNUSED = 57695
const VIRTUAL = 57696
const STORED = 57697
const GENERATED = 57698
const ALWAYS = 57699
const IDENTITY = 57700
const SEQUENCE = 57701
const INCREMENT = 57702
const MINVALUE = 57703
const CACHE = 57704
const CYCLE = 57705
const OWNED = 57706
const NONE = 57707
const CLUSTERED = 57708
const NONCLUSTERED = 57709
const REPLICATION = 57710
const COLUMNSTORE = 57711
const INCLUDE = 57712
const HOLDLOCK = 57713
const NOLOCK = 57714
const NOWAIT = 57715
const PAGLOCK = 57716
const ROWLOCK = 57717
const TABLOCK = 57718
const UPDLOCK = 57719
const READUNCOMMITTED = 57720
const DEFINER = 57721
const INVOKER = 57722
const TYPECAST = 57723
const CHECK = 57724
const OVER = 57725

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"GRANT",
	"REVOKE",
	"OPTION",
	"PRIVILEGES",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"EXCLUDE",
	"GIST",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"EXTENSION",
	"DATA",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"COALESCE",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 7,
	138, 500,
	-2, 222,
	-1, 213,
	123, 932,
	-2, 925,
	-1, 214,
	123, 933,
	-2, 845,
	-1, 367,
	58, 497,
	-2, 1110,
	-1, 374,
	61, 446,
	-2, 1055,
	-1, 375,
	61, 447,
	-2, 1062,
	-1, 456,
	123, 936,
	-2, 930,
	-1, 457,
	123, 933,
	-2, 931,
	-1, 503,
	61, 446,
	-2, 443,
	-1, 526,
	218, 937,
	-2, 261,
	-1, 555,
	123, 934,
	-2, 849,
	-1, 674,
	138, 221,
	157, 221,
	-2, 1110,
	-1, 692,
	123, 933,
	-2, 375,
	-1, 856,
	60, 449,
	-2, 873,
	-1, 857,
	60, 450,
	-2, 873,
	-1, 858,
	60, 451,
	-2, 873,
	-1, 859,
	60, 452,
	-2, 873,
	-1, 863,
	5, 92,
	-2, 15,
	-1, 866,
	5, 92,
	-2, 17,
	-1, 1008,
	403, 818,
	-2, 375,
	-1, 1041,
	59, 947,
	123, 934,
	403, 947,
	-2, 849,
	-1, 1042,
	59, 948,
	403, 948,
	-2, 854,
	-1, 1043,
	59, 949,
	403, 949,
	-2, 855,
	-1, 1044,
	59, 950,
	403, 950,
	-2, 856,
	-1, 1045,
	59, 951,
	403, 951,
	-2, 857,
	-1, 1046,
	59, 952,
	403, 952,
	-2, 858,
	-1, 1047,
	59, 953,
	403, 953,
	-2, 635,
	-1, 1048,
	59, 954,
	403, 954,
	-2, 636,
	-1, 1144,
	119, 395,
	120, 395,
	-2, 24,
	-1, 1262,
	218, 937,
	-2, 262,
	-1, 1278,
	5, 93,
	-2, 683,
	-1, 1402,
	60, 162,
	-2, 927,
	-1, 1405,
	60, 162,
	-2, 279,
	-1, 1527,
	59, 955,
	403, 955,
	-2, 719,
	-1, 1558,
	5, 92,
	-2, 16,
	-1, 1574,
	206, 119,
	-2, 596,
	-1, 1619,
	32, 243,
	60, 162,
	71, 243,
	144, 243,
	146, 243,
	147, 243,
	287, 243,
	399, 243,
	402, 243,
	-2, 927,
	-1, 1620,
	161, 1003,
	229, 1003,
	230, 1003,
	231, 1003,
	232, 1003,
	233, 1003,
	234, 1003,
	235, 1003,
	236, 1003,
	237, 1003,
	238, 1003,
	240, 1003,
	241, 1003,
	243, 1003,
	244, 1003,
	245, 1003,
	246, 1003,
	247, 1003,
	248, 1003,
	249, 1003,
	250, 1003,
	251, 1003,
	252, 1003,
	253, 1003,
	254, 1003,
	255, 1003,
	256, 1003,
	258, 1003,
	259, 1003,
	260, 1003,
	261, 1003,
	262, 1003,
	263, 1003,
	264, 1003,
	265, 1003,
	266, 1003,
	267, 1003,
	268, 1003,
	270, 1003,
	271, 1003,
	272, 1003,
	273, 1003,
	274, 1003,
	275, 1003,
	276, 1003,
	277, 1003,
	278, 1003,
	279, 1003,
	280, 1003,
	281, 1003,
	282, 1003,
	283, 1003,
	284, 1003,
	285, 1003,
	363, 1003,
	-2, 375,
	-1, 1621,
	161, 1132,
	229, 1132,
	230, 1132,
	231, 1132,
	232, 1132,
	233, 1132,
	234, 1132,
	235, 1132,
	236, 1132,
	237, 1132,
	238, 1132,
	240, 1132,
	241, 1132,
	243, 1132,
	244, 1132,
	245, 1132,
	246, 1132,
	247, 1132,
	248, 1132,
	249, 1132,
	250, 1132,
	251, 1132,
	252, 1132,
	253, 1132,
	254, 1132,
	255, 1132,
	256, 1132,
	258, 1132,
	260, 1132,
	261, 1132,
	262, 1132,
	263, 1132,
	264, 1132,
	265, 1132,
	266, 1132,
	267, 1132,
	268, 1132,
	270, 1132,
	271, 1132,
	272, 1132,
	273, 1132,
	274, 1132,
	275, 1132,
	276, 1132,
	277, 1132,
	278, 1132,
	279, 1132,
	280, 1132,
	281, 1132,
	282, 1132,
	283, 1132,
	284, 1132,
	285, 1132,
	363, 1132,
	-2, 395,
	-1, 1623,
	161, 1058,
	229, 1058,
	230, 1058,
	231, 1058,
	232, 1058,
	233, 1058,
	234, 1058,
	235, 1058,
	236, 1058,
	237, 1058,
	238, 1058,
	240, 1058,
	241, 1058,
	243, 1058,
	244, 1058,
	245, 1058,
	246, 1058,
	247, 1058,
	248, 1058,
	249, 1058,
	250, 1058,
	251, 1058,
	252, 1058,
	253, 1058,
	254, 1058,
	255, 1058,
	256, 1058,
	258, 1058,
	259, 1058,
	260, 1058,
	261, 1058,
	262, 1058,
	263, 1058,
	264, 1058,
	265, 1058,
	266, 1058,
	267, 1058,
	268, 1058,
	270, 1058,
	271, 1058,
	272, 1058,
	273, 1058,
	274, 1058,
	275, 1058,
	276, 1058,
	277, 1058,
	278, 1058,
	279, 1058,
	280, 1058,
	281, 1058,
	282, 1058,
	283, 1058,
	284, 1058,
	285, 1058,
	363, 1058,
	-2, 337,
	-1, 1717,
	403, 829,
	-2, 710,
	-1, 1798,
	90, 928,
	-2, 915,
	-1, 1843,
	105, 726,
	106, 726,
	107, 726,
	108, 726,
	109, 726,
	110, 726,
	111, 726,
	112, 726,
	113, 726,
	114, 726,
	115, 726,
	116, 726,
	119, 726,
	398, 726,
	-2, 639,
	-1, 1844,
	105, 726,
	106, 726,
	107, 726,
	108, 726,
	109, 726,
	110, 726,
	111, 726,
	112, 726,
	113, 726,
	114, 726,
	115, 726,
	116, 726,
	119, 726,
	398, 726,
	-2, 641,
	-1, 1845,
	105, 726,
	106, 726,
	107, 726,
	108, 726,
	109, 726,
	110, 726,
	111, 726,
	112, 726,
	113, 726,
	114, 726,
	115, 726,
	116, 726,
	119, 726,
	398, 726,
	-2, 643,
	-1, 1849,
	218, 937,
	-2, 263,
	-1, 1850,
	218, 937,
	-2, 265,
	-1, 1900,
	57, 106,
	59, 106,
	-2, 108,
	-1, 2091,
	5, 92,
	-2, 884,
	-1, 2116,
	5, 92,
	-2, 115,
	-1, 2154,
	59, 1098,
	60, 1098,
	-2, 526,
	-1, 2191,
	5, 93,
	-2, 885,
	-1, 2224,
	5, 92,
	-2, 887,
	-1, 2245,
	5, 93,
	-2, 888,
}

const yyPrivate = 57344

const yyLast = 16184

var yyAct = [...]int16{
	557, 2014, 536, 2200, 2147, 2032, 2109, 569, 2153, 43,
	43, 2148, 2077, 2144, 873, 2114, 58, 1270, 1921, 2015,
	772, 774, 209, 210, 1935, 211, 2101, 927, 1366, 1254,
	1919, 1982, 1380, 1363, 2008, 1768, 1367, 930, 1923, 61,
	1934, 1777, 1381, 1575, 1909, 1792, 1180, 1578, 699, 744,
	1760, 1789, 1113, 1786, 1810, 465, 250, 250, 250, 1512,
	495, 1364, 1212, 1220, 1490, 1664, 48, 1655, 1213, 1507,
	796, 1778, 244, 1056, 1026, 1360, 1009, 251, 854, 455,
	1040, 1021, 615, 1351, 1520, 1091, 1028, 1140, 1289, 245,
	1094, 920, 1233, 431, 1378, 498, 1032, 246, 812, 689,
	358, 504, 533, 1615, 1406, 1438, 657, 623, 714, 881,
	447, 212, 804, 446, 539, 378, 353, 469, 426, 323,
	54, 950, 417, 626, 1296, 1336, 1335, 603, 402, 1107,
	1106, 784, 13, 1521, 1168, 401, 222, 950, 224, 225,
	1887, 749, 954, 956, 760, 962, 393, 1352, 397, 442,
	443, 963, 964, 965, 966, 967, 968, 969, 1426, 955,
	957, 953, 958, 959, 960, 961, 748, 747, 757, 758,
	750, 751, 752, 753, 754, 755, 756, 749, 760, 1552,
	760, 1743, 748, 747, 757, 758, 750, 751, 752, 753,
	754, 755, 756, 749, 226, 1151, 760, 779, 887, 1395,
	1384, 1383, 44, 936, 314, 317, 318, 727, 889, 730,
	886, 1385, 530, 329, 2201, 2202, 2203, 2204, 2205, 2206,
	2207, 2208, 950, 58, 1386, 336, 2243, 954, 956, 502,
	962, 1859, 43, 506, 507, 372, 963, 964, 965, 966,
	967, 968, 969, 58, 955, 957, 953, 958, 959, 960,
	961, 748, 747, 757, 758, 750, 751, 752, 753, 754,
	755, 756, 749, 396, 2139, 760, 989, 748, 747, 757,
	758, 750, 751, 752, 753, 754, 755, 756, 749, 2051,
	2236, 760, 750, 751, 752, 753, 754, 755, 756, 749,
	390, 2082, 760, 779, 745, 706, 393, 394, 227, 228,
	779, 1443, 1395, 1384, 1383, 709, 503, 707, 1706, 1707,
	1148, 213, 355, 217, 1385, 1263, 1264, 437, 319, 2110,
	321, 381, 1442, 1268, 1109, 505, 2219, 1386, 1108, 1109,
	1757, 58, 509, 250, 1379, 335, 388, 781, 376, 746,
	627, 628, 1542, 2138, 1391, 509, 377, 356, 220, 2081,
	217, 2060, 1953, 58, 1476, 1746, 229, 1397, 1398, 2120,
	2174, 2175, 2119, 2043, 2044, 2121, 499, 1393, 2173, 2042,
	456, 1717, 1936, 463, 1937, 399, 1548, 1169, 1547, 1121,
	520, 509, 2007, 1120, 44, 44, 412, 414, 415, 416,
	315, 403, 44, 216, 408, 44, 467, 410, 1387, 1388,
	1390, 606, 197, 433, 1389, 460, 947, 946, 1943, 384,
	605, 379, 389, 462, 420, 421, 422, 423, 424, 570,
	413, 386, 385, 759, 948, 198, 430, 406, 194, 199,
	200, 44, 914, 1292, 506, 507, 635, 1379, 44, 197,
	1942, 1858, 471, 1860, 1105, 1536, 405, 1391, 524, 453,
	1506, 1338, 45, 888, 1337, 846, 429, 759, 845, 759,
	1397, 1398, 198, 1312, 1813, 194, 199, 200, 1295, 58,
	1393, 660, 1106, 1310, 928, 759, 662, 663, 664, 665,
	666, 737, 58, 1427, 1428, 1562, 679, 1708, 875, 683,
	58, 320, 206, 44, 929, 690, 701, 619, 620, 621,
	622, 1387, 1388, 1390, 34, 1201, 1200, 1389, 752, 753,
	754, 755, 756, 749, 732, 647, 760, 44, 729, 202,
	1152, 1153, 451, 739, 1929, 1814, 608, 625, 463, 610,
	44, 613, 614, 734, 1561, 736, 735, 1205, 540, 759,
	609, 1396, 1613, 949, 759, 629, 701, 632, 201, 1687,
	708, 506, 507, 1976, 1788, 316, 202, 1359, 382, 1685,
	759, 45, 947, 946, 383, 1665, 1666, 649, 684, 1960,
	529, 759, 648, 656, 207, 740, 946, 1221, 701, 948,
	948, 668, 673, 990, 1819, 201, 671, 1417, 869, 870,
	658, 1645, 2006, 948, 1851, 1712, 1422, 826, 680, 669,
	2009, 2221, 710, 501, 1670, 510, 512, 687, 1148, 659,
	1714, 1216, 1022, 728, 1992, 1647, 1147, 1424, 726, 748,
	747, 757, 758, 750, 751, 752, 753, 754, 755, 756,
	749, 1443, 700, 760, 45, 45, 731, 690, 391, 1470,
	392, 354, 45, 413, 1396, 45, 195, 196, 874, 775,
	1774, 58, 1709, 880, 882, 1320, 882, 950, 885, 2080,
	44, 863, 1154, 866, 387, 916, 514, 771, 895, 1741,
	950, 58, 938, 898, 817, 933, 899, 900, 901, 1684,
	937, 45, 700, 195, 196, 515, 58, 409, 45, 1682,
	411, 832, 1471, 834, 818, 2006, 837, 838, 949, 949,
	220, 1170, 217, 806, 807, 808, 809, 810, 811, 947,
	946, 1721, 949, 690, 700, 748, 747, 757, 758, 750,
	751, 752, 753, 754, 755, 756, 749, 948, 721, 760,
	1604, 1149, 833, 517, 1787, 775, 339, 775, 1665, 1666,
	874, 935, 661, 45, 44, 558, 1013, 556, 560, 561,
	562, 563, 1720, 865, 986, 559, 564, 872, 523, 879,
	826, 1177, 876, 1014, 1014, 884, 1869, 45, 987, 891,
	1430, 1016, 947, 946, 522, 897, 896, 47, 49, 903,
	45, 500, 51, 58, 58, 1974, 1501, 923, 924, 925,
	948, 197, 1966, 979, 511, 759, 1171, 705, 1025, 1097,
	324, 1096, 1031, 675, 1710, 1711, 1713, 1715, 1716, 939,
	701, 701, 1700, 505, 198, 50, 775, 194, 199, 200,
	1431, 475, 456, 931, 932, 934, 913, 917, 918, 977,
	976, 1828, 1436, 1030, 2237, 1734, 950, 1008, 1050, 1052,
	1053, 1054, 1159, 1172, 1087, 1166, 949, 1090, 2140, 1005,
	947, 946, 690, 1125, 2005, 947, 946, 818, 1007, 676,
	677, 239, 874, 690, 892, 1012, 1015, 51, 948, 240,
	980, 982, 775, 948, 902, 513, 1129, 667, 474, 1993,
	1111, 474, 1114, 1115, 216, 1131, 976, 921, 922, 1088,
	1089, 690, 1160, 1924, 250, 1165, 654, 1167, 476, 477,
	1605, 1606, 1607, 1173, 950, 2033, 2035, 1176, 202, 949,
	45, 893, 759, 690, 1133, 1112, 1116, 1432, 779, 894,
	1395, 1384, 1383, 947, 946, 485, 1290, 58, 641, 220,
	1124, 1926, 1385, 208, 2113, 2112, 2111, 201, 729, 947,
	946, 948, 1214, 1217, 690, 1386, 700, 700, 205, 923,
	924, 925, 511, 213, 478, 217, 204, 948, 479, 775,
	203, 1234, 44, 340, 1292, 1117, 1164, 1119, 338, 236,
	223, 505, 678, 232, 1626, 1097, 480, 1251, 653, 58,
	947, 946, 325, 326, 1303, 1924, 1302, 949, 1408, 1161,
	349, 1202, 949, 2034, 45, 327, 1206, 2194, 948, 348,
	1890, 2073, 11, 762, 763, 1195, 947, 946, 759, 1939,
	1197, 1729, 1194, 1739, 1293, 1719, 472, 468, 470, 1632,
	197, 220, 474, 1926, 948, 342, 343, 344, 473, 341,
	1110, 926, 906, 1208, 1291, 195, 196, 1922, 947, 946,
	1209, 1267, 783, 198, 197, 745, 194, 199, 200, 482,
	483, 782, 1291, 481, 950, 1379, 948, 7, 10, 650,
	949, 488, 400, 8, 9, 1391, 333, 198, 775, 330,
	194, 199, 200, 617, 616, 1853, 949, 1241, 1397, 1398,
	1243, 1437, 1284, 905, 487, 2122, 840, 2099, 1393, 1938,
	746, 1239, 1240, 1238, 1457, 1456, 1455, 508, 1454, 748,
	747, 757, 758, 750, 751, 752, 753, 754, 755, 756,
	749, 1339, 197, 760, 1453, 947, 946, 949, 1274, 1387,
	1388, 1390, 554, 1546, 745, 1389, 1433, 1452, 1451, 690,
	1450, 1449, 1448, 948, 58, 198, 1566, 202, 194, 199,
	200, 1446, 1362, 949, 1327, 841, 1894, 1402, 1544, 1409,
	1095, 690, 690, 1330, 1895, 1309, 1361, 1214, 1418, 1095,
	1207, 202, 497, 1358, 331, 1313, 201, 1203, 1857, 746,
	496, 1646, 1162, 250, 519, 949, 1434, 1667, 1503, 1644,
	1423, 1225, 1227, 1228, 1329, 497, 1421, 1737, 950, 1226,
	201, 1517, 497, 1305, 1307, 497, 1308, 947, 946, 1648,
	1344, 1311, 1345, 45, 1204, 1656, 1656, 1353, 1802, 1649,
	1658, 690, 45, 1314, 1315, 948, 1654, 1316, 1317, 1416,
	1318, 1319, 1163, 607, 1196, 1440, 1657, 1657, 518, 202,
	1123, 1399, 1122, 748, 747, 757, 758, 750, 751, 752,
	753, 754, 755, 756, 749, 1435, 1234, 760, 992, 1174,
	1401, 1460, 949, 738, 633, 1462, 681, 972, 201, 1175,
	1198, 631, 1396, 1259, 195, 196, 682, 1117, 607, 630,
	554, 554, 554, 554, 554, 554, 554, 1257, 602, 947,
	946, 509, 1258, 777, 1879, 1010, 780, 1011, 195, 196,
	1459, 1291, 1236, 1444, 58, 612, 1515, 948, 826, 611,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 1502, 798, 1564, 800, 801, 802, 803, 805, 805,
	805, 805, 805, 805, 805, 1500, 827, 828, 829, 830,
	1447, 1486, 775, 456, 949, 748, 747, 757, 758, 750,
	751, 752, 753, 754, 755, 756, 749, 761, 988, 760,
	690, 690, 1477, 1478, 1479, 1514, 195, 196, 950, 509,
	781, 1250, 1118, 1103, 781, 1516, 904, 947, 946, 864,
	775, 864, 624, 1524, 525, 1008, 1530, 1526, 1558, 1522,
	1533, 1525, 1519, 1528, 1529, 948, 1574, 1005, 1600, 1601,
	1602, 1022, 759, 1609, 1537, 818, 1527, 1141, 950, 1567,
	2231, 2230, 950, 1402, 1402, 1402, 1619, 1402, 1402, 1543,
	1141, 2229, 1749, 690, 690, 690, 949, 1497, 2214, 780,
	2172, 950, 1553, 250, 839, 1565, 690, 690, 1550, 725,
	1535, 724, 1549, 2193, 950, 2136, 950, 940, 941, 723,
	1650, 1497, 2128, 1614, 1653, 1903, 971, 973, 974, 975,
	777, 945, 775, 912, 2061, 1906, 950, 1570, 1571, 1572,
	1568, 1576, 912, 1959, 1611, 58, 690, 912, 1958, 1906,
	1214, 1683, 1686, 1214, 1214, 1612, 554, 554, 554, 554,
	554, 554, 554, 554, 554, 554, 554, 554, 1672, 1652,
	1674, 1904, 1235, 654, 1676, 1636, 722, 779, 58, 1673,
	711, 1675, 912, 1956, 949, 516, 777, 1616, 1617, 1618,
	1624, 1625, 1555, 554, 1469, 1955, 1983, 567, 1659, 1660,
	1661, 1662, 1663, 1669, 2089, 1905, 759, 1469, 1954, 2090,
	1705, 1679, 1724, 1505, 1556, 1688, 1689, 2012, 1681, 654,
	215, 219, 1141, 1884, 35, 1499, 36, 37, 38, 509,
	1671, 1906, 1695, 1469, 950, 874, 1560, 1698, 1497, 42,
	912, 1837, 1497, 1836, 2098, 219, 1458, 219, 219, 1753,
	1833, 1832, 912, 1825, 912, 1824, 775, 58, 775, 1022,
	775, 1691, 912, 1818, 912, 1817, 1766, 912, 1816, 912,
	1750, 912, 1678, 864, 1348, 1759, 1469, 1633, 1771, 44,
	1763, 1347, 1770, 1776, 1803, 1723, 1769, 748, 747, 757,
	758, 750, 751, 752, 753, 754, 755, 756, 749, 1346,
	1402, 760, 55, 1285, 1761, 1260, 1762, 1775, 759, 1565,
	1127, 1811, 1811, 912, 1628, 1214, 1214, 1773, 690, 1754,
	847, 690, 690, 912, 1627, 1801, 250, 836, 1680, 748,
	747, 757, 758, 750, 751, 752, 753, 754, 755, 756,
	749, 1285, 950, 760, 1491, 1812, 835, 1305, 1497, 1496,
	1808, 831, 912, 1474, 912, 1419, 2098, 1815, 912, 1355,
	2145, 554, 1237, 2098, 554, 40, 554, 554, 554, 554,
	554, 554, 1141, 1354, 1019, 950, 1983, 1821, 1822, 1141,
	1262, 2189, 864, 39, 912, 1219, 843, 1144, 1256, 912,
	911, 1019, 41, 850, 849, 843, 844, 779, 1829, 757,
	758, 750, 751, 752, 753, 754, 755, 756, 749, 1748,
	58, 760, 843, 842, 1834, 1325, 1835, 242, 241, 1142,
	1842, 1849, 1850, 219, 1285, 1323, 1906, 877, 779, 2223,
	646, 655, 1275, 219, 219, 1497, 410, 219, 351, 1852,
	1854, 1855, 1856, 551, 645, 1294, 1848, 646, 233, 509,
	652, 231, 230, 646, 2041, 231, 1931, 1235, 1784, 1867,
	1722, 1285, 1865, 1324, 1304, 1928, 554, 250, 1157, 1156,
	509, 58, 1141, 1322, 1866, 912, 1841, 991, 1941, 654,
	509, 1893, 942, 509, 2167, 1911, 1914, 1915, 1916, 1912,
	1870, 1913, 1917, 1820, 848, 2102, 2103, 852, 851, 2165,
	312, 1565, 1889, 1896, 2126, 1565, 1762, 1972, 1927, 1830,
	1901, 690, 1962, 219, 1761, 1918, 1892, 219, 419, 219,
	219, 402, 1932, 1950, 1641, 334, 219, 1640, 458, 45,
	1945, 458, 1637, 219, 2102, 2103, 219, 1883, 219, 1930,
	1947, 1886, 1635, 1634, 1949, 219, 1554, 1465, 1464, 1429,
	1971, 1761, 1425, 1414, 1957, 1761, 243, 775, 313, 1413,
	1963, 1412, 1350, 1964, 1965, 1349, 432, 1266, 554, 1911,
	1914, 1915, 1916, 1912, 1210, 1913, 1917, 1155, 1973, 1975,
	759, 1977, 1150, 1978, 1146, 1128, 1097, 219, 2016, 984,
	983, 981, 978, 943, 890, 862, 861, 855, 712, 651,
	636, 427, 531, 1771, 527, 494, 425, 2001, 1294, 1881,
	2002, 418, 58, 2013, 1885, 2011, 434, 435, 2004, 407,
	58, 1025, 1297, 780, 1968, 1472, 1473, 58, 2017, 15,
	1999, 2020, 219, 454, 2145, 1565, 219, 219, 1889, 1481,
	1483, 1485, 2029, 2037, 1439, 2105, 777, 1237, 554, 554,
	554, 853, 554, 58, 2040, 491, 2050, 2039, 637, 2018,
	2019, 1475, 2021, 548, 439, 2057, 1994, 438, 328, 322,
	52, 2026, 2063, 2064, 2024, 2028, 2027, 1915, 1916, 2025,
	1727, 2069, 2068, 2071, 864, 2108, 458, 2107, 2023, 1889,
	759, 1889, 698, 2022, 2075, 775, 2185, 2067, 2137, 1969,
	1970, 1280, 1281, 2049, 1981, 554, 1862, 799, 486, 2091,
	493, 1944, 618, 1508, 743, 2187, 1946, 2115, 921, 922,
	1092, 459, 1788, 2095, 1357, 742, 2097, 2106, 1509, 644,
	642, 554, 554, 554, 554, 640, 332, 2053, 2054, 2116,
	1276, 2038, 1762, 1277, 1400, 1139, 2117, 1098, 1999, 868,
	704, 1271, 2182, 2066, 58, 747, 757, 758, 750, 751,
	752, 753, 754, 755, 756, 749, 864, 1984, 760, 1861,
	1097, 2146, 2016, 2155, 2115, 2127, 1272, 1022, 2149, 1097,
	2181, 2016, 2083, 775, 2133, 1553, 1807, 1806, 2129, 2158,
	2130, 1781, 686, 2151, 1999, 1771, 1771, 1557, 2162, 2141,
	1770, 1610, 2142, 2143, 1769, 1805, 1135, 58, 1136, 1137,
	1138, 2072, 2156, 775, 2055, 2056, 448, 449, 450, 2238,
	1804, 1134, 1704, 1703, 703, 702, 1463, 33, 2070, 2184,
	1718, 1461, 521, 1024, 698, 219, 2177, 46, 2135, 554,
	2188, 1027, 2074, 219, 2124, 2125, 874, 1902, 1145, 874,
	874, 874, 219, 2213, 12, 1, 2159, 2196, 2178, 2179,
	2198, 1577, 17, 2209, 2210, 2211, 16, 775, 2076, 441,
	2212, 2094, 1038, 2096, 2155, 2227, 537, 2149, 2199, 1785,
	1573, 2222, 2226, 1565, 2218, 1603, 2215, 2216, 1668, 601,
	777, 380, 777, 2224, 777, 2228, 1504, 528, 2235, 19,
	554, 1756, 554, 1181, 1017, 1018, 1020, 1193, 2239, 1559,
	698, 2149, 867, 2156, 643, 2241, 1690, 1183, 1651, 1097,
	2244, 2016, 2242, 2197, 1178, 915, 2240, 363, 1762, 352,
	1728, 907, 1099, 1100, 1101, 1102, 509, 1104, 697, 220,
	489, 217, 53, 14, 1445, 364, 362, 361, 360, 359,
	357, 1744, 395, 878, 604, 2160, 398, 2161, 733, 404,
	428, 249, 247, 248, 252, 1790, 1940, 775, 1288, 970,
	2118, 1797, 2152, 1511, 2180, 2132, 1328, 1093, 1035, 538,
	458, 1782, 1224, 1035, 1035, 1035, 1035, 2088, 908, 1035,
	1035, 1035, 1035, 952, 1751, 534, 215, 1182, 1755, 1780,
	775, 1781, 1897, 1910, 1908, 1907, 2104, 779, 2100, 1395,
	1384, 1383, 1779, 1745, 1991, 1279, 1726, 1392, 220, 1382,
	217, 1385, 1023, 1282, 6, 1035, 1035, 1035, 1035, 1394,
	197, 1377, 5, 4, 1386, 3, 1184, 1185, 1186, 1187,
	1188, 1189, 1190, 1191, 1192, 1376, 1375, 759, 1374, 698,
	214, 219, 1373, 198, 1371, 1372, 194, 199, 200, 1831,
	698, 1369, 1370, 219, 1368, 1273, 62, 776, 2, 0,
	0, 0, 0, 0, 221, 219, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 1036, 1037, 0, 698, 1765,
	0, 0, 688, 0, 0, 0, 0, 0, 221, 0,
	221, 221, 0, 0, 0, 554, 0, 1252, 1253, 197,
	698, 0, 0, 0, 0, 0, 0, 1261, 0, 0,
	1838, 1781, 0, 0, 0, 1781, 1781, 1781, 1781, 1781,
	0, 0, 198, 0, 0, 194, 199, 200, 0, 1781,
	0, 698, 0, 554, 1379, 0, 554, 202, 554, 0,
	554, 0, 554, 554, 1391, 0, 697, 1278, 694, 0,
	1283, 0, 1286, 1287, 0, 0, 0, 1397, 1398, 0,
	0, 0, 215, 0, 0, 0, 201, 1393, 0, 0,
	0, 0, 1298, 0, 1299, 1300, 1301, 0, 0, 0,
	1880, 1920, 1882, 0, 0, 1051, 0, 0, 0, 0,
	0, 0, 1781, 0, 0, 0, 0, 0, 1387, 1388,
	1390, 1179, 0, 0, 1389, 0, 0, 0, 0, 1321,
	0, 0, 1326, 0, 0, 1566, 202, 1035, 1332, 1199,
	0, 1781, 0, 0, 0, 1334, 0, 0, 0, 0,
	0, 0, 0, 1340, 1341, 0, 1342, 1343, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 0, 1951, 1952,
	0, 0, 0, 1356, 0, 0, 0, 0, 0, 550,
	0, 0, 0, 62, 195, 196, 221, 0, 0, 1967,
	0, 1255, 0, 0, 0, 0, 221, 221, 0, 1035,
	221, 221, 0, 62, 0, 859, 1333, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 697, 0, 0, 0,
	944, 1782, 0, 0, 0, 1782, 1782, 1782, 1782, 1782,
	0, 0, 0, 1995, 0, 0, 698, 1996, 0, 1920,
	0, 2036, 0, 0, 697, 0, 0, 32, 0, 1979,
	0, 0, 0, 1467, 1468, 0, 0, 0, 698, 698,
	0, 1396, 0, 195, 196, 0, 697, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 0,
	221, 0, 221, 221, 0, 0, 694, 0, 0, 221,
	0, 457, 1494, 1495, 221, 0, 221, 697, 0, 221,
	0, 221, 1782, 0, 26, 27, 0, 20, 221, 0,
	2058, 2059, 1764, 62, 0, 0, 0, 0, 698, 0,
	21, 0, 0, 0, 30, 0, 1518, 2092, 2093, 0,
	0, 1782, 0, 1696, 0, 0, 0, 0, 0, 0,
	0, 0, 22, 23, 549, 24, 1255, 0, 1493, 0,
	221, 0, 0, 0, 0, 0, 0, 864, 748, 747,
	757, 758, 750, 751, 752, 753, 754, 755, 756, 749,
	1130, 0, 760, 748, 747, 757, 758, 750, 751, 752,
	753, 754, 755, 756, 749, 0, 0, 760, 0, 0,
	1181, 0, 0, 1035, 1193, 221, 0, 0, 1158, 221,
	221, 458, 1035, 0, 1183, 0, 0, 0, 0, 2150,
	0, 864, 0, 0, 0, 0, 0, 1783, 0, 0,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 62,
	2168, 2169, 2170, 0, 0, 0, 694, 0, 1898, 0,
	0, 218, 62, 0, 0, 0, 0, 0, 0, 221,
	62, 1218, 0, 18, 0, 692, 0, 698, 698, 0,
	0, 0, 0, 0, 694, 234, 0, 237, 238, 0,
	220, 0, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 1182, 0, 694, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 697, 697, 1036, 0, 2150, 0,
	0, 2225, 0, 0, 0, 0, 0, 694, 0, 0,
	698, 698, 698, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 0, 698, 698, 0, 0, 0, 0, 25,
	1702, 0, 2150, 0, 864, 0, 0, 0, 0, 0,
	0, 28, 29, 0, 31, 0, 0, 1725, 0, 0,
	0, 197, 0, 0, 697, 0, 0, 1730, 0, 0,
	0, 0, 1731, 698, 0, 1732, 1733, 0, 0, 1735,
	1736, 1738, 1740, 1742, 198, 0, 0, 194, 199, 200,
	0, 0, 0, 0, 220, 0, 217, 692, 221, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 0,
	0, 62, 0, 0, 713, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 741, 779, 0, 1395, 1384, 1383, 0,
	0, 0, 0, 337, 0, 0, 62, 0, 1385, 0,
	0, 759, 0, 345, 346, 0, 0, 350, 1410, 1411,
	778, 1386, 0, 0, 0, 0, 759, 0, 0, 0,
	0, 0, 0, 692, 696, 0, 0, 1255, 202, 219,
	219, 0, 0, 0, 0, 197, 0, 0, 797, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1441, 0,
	0, 0, 856, 859, 697, 0, 0, 201, 198, 0,
	1701, 194, 199, 200, 0, 0, 0, 0, 1466, 0,
	0, 0, 0, 0, 694, 694, 0, 0, 0, 0,
	1839, 1840, 0, 436, 1843, 1844, 1845, 440, 0, 444,
	445, 0, 0, 457, 62, 698, 452, 0, 698, 698,
	0, 0, 220, 464, 217, 0, 466, 0, 466, 0,
	0, 0, 0, 0, 0, 484, 697, 697, 697, 0,
	1868, 1379, 0, 0, 0, 0, 0, 0, 0, 697,
	697, 1391, 0, 0, 694, 0, 0, 1878, 0, 1795,
	0, 0, 0, 0, 1397, 1398, 0, 0, 0, 919,
	0, 0, 202, 0, 1393, 195, 196, 526, 219, 0,
	0, 0, 692, 0, 221, 0, 858, 0, 0, 697,
	0, 951, 0, 692, 0, 0, 221, 778, 0, 0,
	0, 201, 0, 0, 1035, 1387, 1388, 1390, 221, 695,
	0, 1389, 0, 197, 985, 0, 0, 347, 0, 0,
	0, 692, 634, 220, 1948, 217, 638, 639, 1551, 0,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 194,
	199, 200, 0, 692, 0, 779, 0, 1395, 1384, 1383,
	0, 219, 219, 778, 0, 0, 1033, 62, 0, 1385,
	219, 1925, 696, 0, 0, 1055, 1086, 0, 0, 0,
	0, 0, 1386, 0, 692, 0, 220, 0, 1926, 0,
	0, 0, 1985, 0, 1986, 1987, 1988, 1989, 1990, 0,
	1629, 1630, 1631, 856, 694, 0, 0, 0, 0, 195,
	196, 0, 0, 1638, 1639, 0, 0, 0, 698, 62,
	0, 0, 878, 0, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 2031, 0, 0, 0, 0, 0, 198, 0, 1980,
	194, 199, 200, 1677, 0, 0, 0, 0, 1396, 0,
	0, 857, 0, 0, 0, 0, 694, 694, 694, 201,
	0, 697, 0, 0, 697, 697, 0, 197, 0, 694,
	694, 0, 0, 1795, 2062, 235, 219, 0, 0, 0,
	219, 0, 1379, 215, 219, 219, 219, 219, 219, 0,
	198, 0, 1391, 194, 199, 200, 2030, 0, 219, 2052,
	0, 858, 1925, 2079, 0, 1397, 1398, 0, 0, 694,
	0, 0, 696, 0, 0, 1393, 1211, 1215, 0, 0,
	0, 0, 1222, 1223, 0, 860, 0, 695, 0, 221,
	0, 202, 0, 871, 0, 0, 0, 0, 0, 0,
	696, 0, 883, 0, 219, 0, 1387, 1388, 1390, 0,
	0, 0, 1389, 0, 0, 0, 0, 195, 196, 692,
	201, 219, 696, 1566, 62, 1265, 0, 0, 0, 779,
	0, 1395, 1384, 1383, 0, 0, 0, 62, 0, 0,
	0, 692, 692, 1385, 202, 0, 0, 0, 2134, 0,
	219, 0, 0, 696, 0, 1269, 1386, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 1795, 1823, 0, 0, 1826, 1827,
	0, 0, 2048, 0, 0, 0, 2171, 0, 0, 1255,
	0, 0, 0, 0, 716, 0, 0, 0, 0, 0,
	0, 692, 0, 0, 0, 0, 0, 2183, 0, 0,
	0, 0, 0, 0, 697, 1255, 0, 0, 195, 196,
	0, 0, 2190, 2191, 2192, 0, 857, 215, 0, 0,
	2195, 1331, 0, 0, 0, 0, 215, 695, 0, 0,
	0, 694, 0, 0, 694, 694, 0, 0, 0, 1396,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 695, 1379, 0, 0, 0,
	0, 195, 196, 0, 0, 0, 1391, 0, 0, 0,
	0, 2232, 2233, 2234, 457, 0, 0, 695, 0, 1397,
	1398, 1415, 1215, 0, 0, 0, 0, 0, 0, 1393,
	2186, 1126, 0, 0, 0, 0, 0, 0, 0, 1925,
	0, 0, 2245, 1132, 0, 0, 2131, 0, 695, 0,
	0, 0, 0, 0, 0, 1143, 0, 0, 0, 0,
	1387, 1388, 1390, 0, 0, 0, 1389, 0, 858, 0,
	692, 692, 0, 0, 0, 0, 0, 1566, 779, 0,
	1395, 1384, 1383, 0, 0, 0, 0, 0, 0, 0,
	696, 696, 1385, 0, 0, 0, 0, 0, 1961, 1255,
	0, 0, 0, 778, 0, 1386, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1498, 62, 62, 62, 62, 62, 62, 0,
	0, 0, 0, 692, 692, 692, 0, 1510, 1513, 0,
	0, 779, 0, 1395, 1384, 1383, 692, 692, 0, 0,
	696, 0, 0, 0, 0, 1385, 0, 0, 0, 0,
	0, 0, 0, 0, 694, 0, 0, 0, 1386, 0,
	1534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 692, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1545, 0, 0, 0,
	0, 0, 0, 1396, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 0, 0, 1379, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 1391, 0, 1563, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 1397, 1398,
	0, 0, 0, 0, 0, 1569, 0, 0, 1393, 0,
	0, 0, 0, 0, 2000, 695, 695, 1608, 0, 797,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 813,
	0, 821, 0, 0, 0, 0, 0, 0, 1379, 1387,
	1388, 1390, 0, 0, 0, 1389, 0, 0, 1391, 858,
	696, 0, 221, 221, 0, 1642, 1566, 62, 0, 0,
	0, 1397, 1398, 0, 0, 0, 0, 0, 0, 0,
	815, 1393, 0, 0, 0, 695, 0, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1215, 0, 0, 1215, 1215,
	62, 0, 1387, 1388, 1390, 0, 0, 778, 1389, 778,
	0, 778, 696, 696, 696, 0, 0, 0, 692, 0,
	0, 692, 692, 0, 0, 696, 696, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 0, 305,
	306, 0, 307, 308, 309, 311, 310, 0, 1006, 816,
	0, 0, 0, 0, 0, 696, 0, 253, 814, 0,
	0, 0, 1747, 820, 819, 0, 0, 0, 0, 1752,
	0, 221, 1396, 823, 824, 0, 1758, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 857, 695, 0, 0, 0, 0,
	45, 0, 0, 0, 0, 0, 764, 765, 766, 767,
	768, 769, 770, 1564, 0, 778, 778, 0, 0, 773,
	0, 0, 0, 0, 0, 1396, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 221, 0, 0, 0, 0,
	1215, 1215, 0, 221, 221, 0, 0, 0, 0, 0,
	0, 62, 254, 0, 0, 0, 0, 695, 695, 695,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	695, 695, 0, 0, 0, 0, 1888, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 692, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	695, 779, 0, 1395, 1384, 1383, 0, 696, 0, 0,
	696, 696, 221, 0, 0, 1385, 1863, 1864, 1513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1386, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 0, 584, 0, 221,
	0, 0, 0, 221, 0, 573, 574, 221, 221, 221,
	221, 221, 0, 0, 0, 693, 0, 0, 213, 221,
	217, 221, 0, 0, 0, 221, 773, 0, 0, 0,
	0, 0, 62, 2084, 2085, 0, 0, 0, 0, 0,
	62, 0, 582, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 0, 0, 0, 221, 0, 0,
	0, 0, 599, 62, 0, 0, 0, 779, 0, 1395,
	1384, 1383, 773, 0, 221, 0, 0, 0, 1379, 1049,
	0, 1385, 0, 0, 0, 0, 0, 0, 1391, 0,
	597, 0, 0, 0, 1386, 0, 0, 0, 0, 197,
	0, 1397, 1398, 221, 691, 0, 0, 0, 0, 0,
	0, 1393, 695, 0, 0, 695, 695, 0, 0, 466,
	0, 0, 198, 1997, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	696, 0, 1387, 1388, 1390, 0, 0, 0, 1389, 2220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 779, 0, 1395,
	1384, 1383, 0, 0, 2047, 0, 0, 0, 0, 0,
	0, 1385, 0, 2157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1386, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1379, 0, 0, 0, 0, 0,
	0, 585, 0, 0, 1391, 0, 202, 62, 0, 0,
	2078, 0, 0, 0, 0, 0, 0, 1397, 1398, 0,
	0, 0, 0, 0, 0, 586, 587, 1393, 0, 2086,
	0, 2087, 0, 0, 0, 201, 0, 1229, 1847, 0,
	1242, 0, 1244, 1245, 1246, 1247, 1248, 1249, 45, 0,
	0, 0, 221, 0, 0, 0, 0, 0, 1387, 1388,
	1390, 0, 0, 0, 1389, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2157, 1396, 0, 0, 588, 598,
	594, 595, 592, 593, 591, 590, 589, 600, 575, 576,
	577, 578, 579, 581, 1379, 695, 572, 571, 580, 0,
	0, 0, 0, 0, 1391, 0, 0, 0, 0, 0,
	0, 1899, 1900, 0, 0, 0, 0, 1397, 1398, 0,
	0, 0, 0, 0, 0, 2163, 0, 1393, 2164, 0,
	0, 2166, 0, 195, 196, 596, 0, 0, 0, 719,
	0, 0, 764, 0, 0, 0, 0, 0, 2176, 0,
	0, 0, 0, 0, 0, 0, 718, 0, 1387, 1388,
	1390, 717, 2078, 0, 1389, 0, 0, 0, 583, 0,
	584, 0, 0, 0, 0, 1365, 778, 0, 573, 574,
	0, 0, 0, 0, 0, 0, 0, 0, 509, 0,
	0, 213, 558, 555, 556, 560, 561, 562, 563, 0,
	0, 1396, 559, 564, 565, 566, 720, 2217, 778, 0,
	0, 715, 546, 0, 0, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2010, 0, 0, 543,
	544, 0, 0, 0, 1420, 599, 0, 545, 0, 0,
	1057, 542, 547, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 1059, 779, 0, 1395, 1384, 1383, 0, 0, 0,
	0, 1396, 0, 0, 2065, 198, 1385, 0, 194, 199,
	200, 0, 0, 0, 0, 1480, 1482, 1484, 553, 1386,
	0, 0, 0, 0, 1487, 1488, 1489, 0, 1492, 1579,
	1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589,
	1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1068,
	1074, 1072, 0, 0, 1069, 0, 0, 1067, 0, 0,
	1076, 0, 0, 1075, 1061, 1071, 1073, 1070, 1065, 0,
	1060, 1049, 1078, 1077, 1079, 1058, 1081, 0, 0, 0,
	1085, 1082, 1084, 1083, 585, 1080, 0, 0, 0, 202,
	0, 0, 0, 0, 1062, 1063, 0, 1538, 1539, 1540,
	1541, 0, 0, 0, 0, 0, 552, 570, 586, 587,
	1531, 0, 0, 0, 0, 1064, 1066, 0, 201, 2003,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1391,
	0, 45, 0, 0, 0, 0, 0, 0, 0, 568,
	0, 0, 1397, 1398, 0, 0, 0, 0, 0, 0,
	0, 1532, 1393, 0, 0, 0, 0, 0, 0, 0,
	0, 588, 598, 594, 595, 592, 593, 591, 590, 589,
	600, 575, 576, 577, 578, 579, 581, 0, 0, 572,
	571, 580, 0, 1387, 1388, 1390, 0, 0, 0, 1389,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1772, 0, 0, 0, 0, 1643, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 596, 1068,
	1074, 1072, 0, 0, 1069, 0, 0, 1067, 0, 0,
	1076, 0, 0, 1075, 1061, 1071, 1073, 1070, 1065, 0,
	1060, 0, 1078, 1077, 1079, 1058, 1081, 0, 0, 0,
	1085, 1082, 1084, 1083, 0, 1080, 1692, 0, 1693, 0,
	1694, 0, 0, 0, 1062, 1063, 1697, 0, 1699, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1064, 1066, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	168, 0, 127, 181, 95, 115, 190, 117, 118, 153,
	74, 136, 0, 112, 93, 0, 0, 0, 98, 67,
	107, 68, 96, 129, 0, 94, 1396, 1622, 139, 0,
	57, 0, 188, 0, 144, 0, 0, 0, 0, 0,
	131, 172, 134, 163, 126, 154, 83, 143, 183, 113,
	149, 184, 0, 1407, 0, 44, 0, 1405, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 178, 109,
	80, 193, 0, 152, 66, 146, 0, 0, 72, 75,
	189, 176, 103, 102, 1404, 0, 0, 0, 0, 0,
	0, 130, 135, 159, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 1403, 0, 0, 0, 99, 0, 142,
	0, 0, 0, 79, 1620, 0, 1623, 0, 0, 0,
	82, 0, 100, 160, 0, 63, 0, 0, 0, 0,
	166, 173, 125, 0, 0, 177, 122, 121, 0, 0,
	0, 0, 0, 0, 114, 60, 197, 191, 0, 0,
	180, 132, 171, 97, 108, 277, 104, 0, 0, 0,
	105, 106, 141, 155, 0, 0, 0, 0, 0, 198,
	162, 1846, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 64, 101, 164, 167,
	87, 151, 76, 110, 157, 111, 133, 92, 0, 1872,
	0, 0, 1873, 0, 1874, 0, 1875, 0, 1876, 1877,
	0, 0, 0, 295, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 0, 305, 306, 0, 307, 308, 309,
	311, 310, 278, 279, 280, 284, 282, 281, 283, 255,
	257, 0, 253, 256, 262, 258, 259, 260, 274, 263,
	264, 265, 266, 1621, 268, 269, 270, 271, 272, 273,
	275, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 201, 70, 91, 174, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 45, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 90, 84, 85, 137,
	138, 185, 186, 187, 161, 81, 0, 0, 88, 89,
	0, 169, 0, 0, 0, 140, 0, 254, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 116, 65, 120,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 124, 119, 145, 147, 156, 165, 175, 182, 158,
	195, 196, 179, 168, 0, 127, 181, 95, 115, 190,
	117, 118, 153, 74, 136, 0, 112, 93, 0, 0,
	0, 98, 67, 107, 68, 96, 129, 0, 94, 0,
	170, 139, 0, 57, 0, 188, 0, 144, 0, 0,
	0, 0, 0, 131, 172, 134, 163, 126, 154, 83,
	143, 183, 113, 149, 184, 0, 0, 0, 44, 0,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 178, 109, 80, 193, 0, 152, 66, 146, 0,
	0, 72, 75, 189, 176, 103, 102, 0, 0, 0,
	0, 0, 0, 0, 130, 135, 159, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 142, 0, 0, 0, 79, 73, 0, 128,
	0, 0, 0, 82, 0, 100, 160, 0, 63, 0,
	0, 0, 0, 166, 173, 374, 0, 0, 177, 122,
	121, 366, 0, 365, 0, 369, 370, 373, 60, 197,
	191, 0, 0, 367, 375, 171, 97, 108, 0, 104,
	0, 0, 0, 105, 106, 141, 155, 0, 0, 0,
	0, 0, 198, 162, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 64,
	101, 164, 167, 87, 151, 76, 110, 157, 111, 133,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 371, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 201, 70, 91, 174, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 45, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 90,
	84, 85, 137, 138, 185, 186, 187, 161, 81, 0,
	0, 88, 89, 0, 169, 0, 0, 0, 140, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	116, 65, 120, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 0, 124, 119, 145, 147, 156, 165,
	175, 182, 158, 195, 196, 0, 368, 179, 168, 0,
	127, 181, 95, 115, 190, 117, 118, 153, 74, 136,
	0, 112, 93, 0, 0, 0, 98, 67, 107, 68,
	96, 129, 0, 94, 0, 170, 139, 0, 57, 0,
	188, 0, 144, 0, 0, 0, 0, 0, 131, 172,
	134, 163, 126, 154, 83, 143, 183, 113, 149, 184,
	0, 1407, 0, 44, 0, 1405, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 178, 109, 80, 193,
	0, 152, 66, 146, 0, 0, 72, 75, 189, 176,
	103, 102, 1404, 0, 0, 0, 0, 0, 0, 130,
	135, 159, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 1403, 0, 0, 0, 99, 0, 142, 0, 0,
	0, 79, 73, 0, 128, 400, 0, 0, 82, 0,
	100, 160, 0, 63, 0, 0, 0, 0, 166, 173,
	125, 0, 0, 177, 122, 121, 0, 0, 0, 0,
	0, 0, 114, 60, 197, 191, 0, 0, 180, 132,
	171, 97, 108, 0, 104, 0, 0, 0, 105, 106,
	141, 155, 0, 0, 0, 0, 0, 198, 162, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 64, 101, 164, 167, 87, 151,
	76, 110, 157, 111, 133, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	201, 70, 91, 174, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 45, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 90, 84, 85, 137, 138, 185,
	186, 187, 161, 81, 0, 0, 88, 89, 0, 169,
	0, 0, 0, 140, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 116, 65, 120, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 0, 124,
	119, 145, 147, 156, 165, 175, 182, 158, 195, 196,
	179, 168, 0, 127, 181, 95, 115, 190, 117, 118,
	153, 74, 136, 0, 112, 93, 0, 0, 0, 98,
	67, 107, 68, 96, 129, 0, 94, 0, 170, 139,
	0, 0, 0, 188, 0, 144, 0, 0, 0, 0,
	0, 131, 172, 134, 163, 126, 154, 83, 143, 183,
	113, 149, 184, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 178,
	109, 80, 193, 0, 152, 66, 146, 0, 0, 72,
	75, 189, 176, 103, 102, 0, 0, 0, 0, 0,
	0, 0, 130, 135, 159, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	142, 0, 0, 0, 79, 73, 779, 128, 1395, 1384,
	1383, 82, 0, 100, 160, 0, 63, 0, 0, 0,
	1385, 166, 173, 125, 0, 0, 177, 122, 121, 0,
	0, 0, 0, 1386, 0, 114, 60, 197, 191, 0,
	0, 180, 132, 171, 97, 108, 0, 104, 0, 0,
	0, 105, 106, 141, 155, 0, 0, 0, 0, 0,
	198, 162, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 64, 101, 164,
	167, 87, 151, 76, 110, 157, 111, 133, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1791, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1379, 1799, 0, 0, 0, 0, 0,
	0, 0, 0, 1391, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1397, 1398, 0, 0,
	0, 0, 0, 0, 0, 0, 1393, 0, 69, 0,
	0, 0, 0, 201, 70, 91, 174, 0, 0, 0,
	0, 1800, 1798, 1794, 1793, 0, 45, 0, 0, 150,
	0, 0, 0, 0, 1796, 0, 0, 1387, 1388, 1390,
	0, 0, 0, 1389, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 90, 84, 85,
	137, 138, 185, 186, 187, 161, 81, 0, 0, 88,
	89, 0, 169, 0, 0, 0, 140, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 116, 65,
	120, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 0, 124, 119, 145, 147, 156, 165, 175, 182,
	158, 195, 196, 179, 168, 0, 127, 181, 95, 115,
	190, 117, 118, 153, 74, 136, 0, 112, 93, 0,
	0, 0, 98, 67, 107, 68, 96, 129, 0, 94,
	0, 170, 139, 0, 57, 0, 188, 0, 144, 0,
	0, 0, 0, 0, 131, 172, 134, 163, 126, 154,
	83, 143, 183, 113, 149, 184, 0, 1407, 0, 44,
	0, 1405, 0, 0, 0, 0, 0, 0, 0, 0,
	1396, 148, 178, 109, 80, 193, 0, 152, 66, 146,
	0, 0, 72, 75, 189, 176, 103, 102, 1404, 0,
	0, 0, 0, 0, 0, 130, 135, 159, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 1403, 0, 0,
	0, 99, 0, 142, 0, 0, 0, 79, 73, 0,
	128, 0, 0, 0, 82, 0, 100, 160, 0, 63,
	0, 0, 0, 0, 166, 173, 125, 0, 0, 177,
	122, 121, 0, 0, 0, 0, 0, 0, 114, 60,
	197, 191, 0, 0, 180, 132, 171, 97, 108, 0,
	104, 0, 0, 0, 105, 106, 141, 155, 0, 0,
	0, 0, 0, 198, 162, 0, 194, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	64, 101, 164, 167, 87, 151, 76, 110, 157, 111,
	133, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 201, 70, 91, 174,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 45,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	90, 84, 85, 137, 138, 185, 186, 187, 161, 81,
	0, 0, 88, 89, 0, 169, 0, 0, 0, 140,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 116, 65, 120, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 0, 124, 119, 145, 147, 156,
	165, 175, 182, 158, 195, 196, 179, 168, 0, 127,
	181, 95, 115, 190, 117, 118, 153, 74, 136, 0,
	112, 93, 0, 0, 0, 98, 67, 107, 68, 96,
	129, 0, 94, 0, 170, 139, 0, 0, 0, 188,
	0, 144, 0, 0, 0, 0, 0, 131, 172, 134,
	163, 126, 154, 83, 143, 183, 113, 149, 184, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 178, 109, 80, 193, 0,
	152, 66, 146, 0, 0, 72, 75, 189, 176, 103,
	102, 0, 0, 0, 0, 0, 0, 0, 130, 135,
	159, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 142, 0, 0, 0,
	79, 73, 0, 128, 0, 0, 0, 82, 0, 100,
	160, 0, 63, 0, 0, 0, 0, 166, 173, 125,
	0, 0, 177, 122, 121, 0, 0, 0, 0, 0,
	0, 114, 60, 197, 191, 0, 0, 180, 132, 171,
	97, 108, 0, 104, 0, 0, 0, 105, 106, 141,
	155, 0, 0, 0, 0, 0, 198, 162, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 64, 101, 164, 167, 87, 151, 76,
	110, 157, 111, 133, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1933, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1799, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 201,
	70, 91, 174, 0, 0, 0, 0, 1800, 1798, 0,
	0, 0, 45, 0, 0, 150, 0, 0, 0, 0,
	1796, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 90, 84, 85, 137, 138, 185, 186,
	187, 161, 81, 0, 0, 88, 89, 0, 169, 0,
	0, 0, 140, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 116, 65, 120, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 0, 124, 119,
	145, 147, 156, 165, 175, 182, 158, 195, 196, 179,
	168, 0, 127, 181, 95, 115, 190, 117, 118, 153,
	74, 136, 0, 112, 93, 0, 0, 0, 98, 67,
	107, 68, 96, 129, 0, 94, 0, 170, 139, 0,
	57, 0, 188, 0, 144, 0, 0, 0, 0, 0,
	131, 172, 134, 163, 126, 154, 83, 143, 183, 113,
	149, 184, 0, 0, 0, 44, 0, 56, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 178, 109,
	80, 193, 0, 152, 66, 146, 0, 0, 72, 75,
	189, 176, 103, 102, 0, 0, 0, 0, 0, 0,
	0, 130, 135, 159, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 142,
	0, 0, 0, 79, 73, 0, 128, 0, 0, 0,
	82, 0, 100, 160, 0, 63, 0, 0, 0, 0,
	166, 173, 125, 0, 0, 177, 122, 121, 0, 670,
	672, 0, 0, 0, 373, 60, 197, 191, 0, 0,
	674, 132, 171, 97, 108, 0, 104, 0, 0, 0,
	105, 106, 141, 155, 0, 0, 0, 0, 0, 198,
	162, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 64, 101, 164, 167,
	87, 151, 76, 110, 157, 111, 133, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 201, 70, 91, 174, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 45, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 90, 84, 85, 137,
	138, 185, 186, 187, 161, 81, 0, 0, 88, 89,
	0, 169, 0, 0, 0, 140, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 116, 65, 120,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 124, 119, 145, 147, 156, 165, 175, 182, 158,
	195, 196, 179, 168, 0, 127, 181, 95, 115, 190,
	117, 118, 153, 74, 136, 0, 112, 93, 0, 0,
	0, 98, 67, 107, 68, 96, 129, 0, 94, 0,
	170, 139, 0, 0, 0, 188, 0, 144, 0, 0,
	0, 0, 0, 131, 172, 134, 163, 126, 154, 83,
	143, 183, 113, 149, 184, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 178, 109, 80, 193, 0, 152, 66, 146, 0,
	0, 72, 75, 189, 176, 103, 102, 0, 0, 0,
	0, 0, 0, 0, 130, 135, 159, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 142, 0, 0, 0, 79, 73, 0, 128,
	0, 0, 0, 82, 0, 100, 160, 0, 63, 0,
	0, 0, 0, 166, 173, 125, 0, 0, 177, 122,
	121, 0, 0, 0, 0, 0, 0, 114, 60, 197,
	191, 0, 0, 180, 132, 171, 97, 108, 0, 104,
	0, 0, 0, 105, 106, 141, 155, 0, 0, 0,
	0, 0, 198, 162, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 64,
	101, 164, 167, 87, 151, 76, 110, 157, 111, 133,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1799, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 201, 70, 91, 174, 0,
	0, 0, 0, 1800, 1798, 0, 0, 0, 45, 0,
	0, 150, 0, 0, 0, 0, 1796, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 90,
	84, 85, 137, 138, 185, 186, 187, 161, 81, 0,
	0, 88, 89, 0, 169, 0, 0, 0, 140, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	116, 65, 120, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 0, 124, 119, 145, 147, 156, 165,
	175, 182, 158, 195, 196, 179, 168, 0, 127, 181,
	95, 115, 190, 117, 118, 153, 74, 136, 0, 112,
	93, 0, 0, 0, 98, 67, 107, 68, 96, 129,
	0, 94, 0, 170, 139, 0, 0, 0, 188, 0,
	144, 0, 0, 0, 0, 0, 131, 172, 134, 163,
	126, 154, 83, 143, 183, 113, 149, 184, 0, 0,
	0, 213, 0, 217, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 178, 109, 80, 193, 0, 152,
	66, 146, 0, 0, 72, 75, 189, 176, 103, 102,
	0, 0, 0, 0, 0, 0, 0, 130, 135, 159,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1523, 0, 99, 0, 142, 0, 0, 0, 79,
	73, 0, 128, 0, 0, 0, 82, 0, 100, 160,
	0, 63, 0, 0, 0, 0, 166, 173, 125, 0,
	0, 177, 122, 121, 0, 0, 0, 0, 0, 0,
	114, 60, 197, 191, 0, 0, 180, 132, 171, 97,
	108, 0, 104, 0, 0, 0, 105, 106, 141, 155,
	0, 0, 0, 0, 0, 198, 162, 0, 194, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 64, 101, 164, 167, 87, 151, 76, 110,
	157, 111, 133, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 201, 70,
	91, 174, 0, 0, 0, 0, 0, 59, 0, 0,
	0, 45, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 90, 84, 85, 137, 138, 185, 186, 187,
	161, 81, 0, 0, 88, 89, 0, 169, 0, 0,
	0, 140, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 116, 65, 120, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 0, 124, 119, 145,
	147, 156, 165, 175, 182, 158, 195, 196, 179, 168,
	0, 127, 181, 95, 115, 190, 117, 118, 153, 74,
	136, 0, 112, 93, 0, 0, 0, 98, 67, 107,
	68, 96, 129, 0, 94, 0, 170, 139, 0, 0,
	0, 188, 0, 144, 0, 0, 0, 0, 0, 131,
	172, 134, 163, 126, 154, 83, 143, 183, 113, 149,
	184, 0, 0, 0, 44, 0, 909, 0, 910, 0,
	0, 0, 0, 0, 0, 0, 148, 178, 109, 80,
	193, 0, 152, 66, 146, 0, 0, 72, 75, 189,
	176, 103, 102, 0, 0, 0, 0, 0, 0, 0,
	130, 135, 159, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 142, 0,
	0, 0, 79, 73, 0, 128, 0, 0, 0, 82,
	0, 100, 160, 0, 63, 0, 0, 0, 0, 166,
	173, 125, 0, 0, 177, 122, 121, 0, 0, 0,
	0, 0, 0, 114, 60, 197, 191, 0, 0, 180,
	132, 171, 97, 108, 0, 104, 0, 0, 0, 105,
	106, 141, 155, 0, 0, 0, 0, 0, 198, 162,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 64, 101, 164, 167, 87,
	151, 76, 110, 157, 111, 133, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 201, 70, 91, 174, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 45, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 90, 84, 85, 137, 138,
	185, 186, 187, 161, 81, 0, 0, 88, 89, 0,
	169, 0, 0, 0, 140, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 116, 65, 120, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 0,
	124, 119, 145, 147, 156, 165, 175, 182, 158, 195,
	196, 179, 168, 0, 127, 181, 95, 115, 190, 117,
	118, 153, 74, 136, 0, 112, 93, 0, 0, 0,
	98, 67, 107, 68, 96, 129, 0, 94, 0, 170,
	139, 0, 57, 0, 188, 0, 144, 0, 0, 0,
	0, 0, 131, 172, 134, 163, 126, 154, 83, 143,
	183, 113, 149, 184, 0, 0, 0, 44, 0, 56,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	178, 109, 80, 193, 0, 152, 66, 146, 0, 0,
	72, 75, 189, 176, 103, 102, 0, 0, 0, 0,
	0, 0, 0, 130, 135, 159, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 142, 0, 0, 0, 79, 73, 0, 128, 0,
	0, 0, 82, 0, 100, 160, 0, 63, 0, 0,
	0, 0, 166, 173, 125, 0, 0, 177, 122, 121,
	0, 0, 0, 0, 0, 0, 114, 60, 197, 191,
	0, 0, 180, 132, 171, 97, 108, 0, 104, 0,
	0, 0, 105, 106, 141, 155, 0, 0, 0, 0,
	0, 198, 162, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 64, 101,
	164, 167, 87, 151, 76, 110, 157, 111, 133, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 201, 70, 91, 174, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 45, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 90, 84,
	85, 137, 138, 185, 186, 187, 161, 81, 0, 0,
	88, 89, 0, 169, 0, 0, 0, 140, 0, 0,
	0, 192, 0, 0, 0, 0, 0, 0, 0, 116,
	65, 120, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 0, 124, 119, 145, 147, 156, 165, 175,
	182, 158, 195, 196, 179, 168, 0, 127, 181, 95,
	115, 190, 117, 118, 153, 74, 136, 0, 112, 93,
	0, 0, 0, 98, 67, 107, 68, 96, 129, 0,
	94, 0, 170, 139, 0, 0, 0, 188, 0, 144,
	0, 0, 0, 0, 0, 131, 172, 134, 163, 126,
	154, 83, 143, 183, 113, 149, 184, 0, 490, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	492, 0, 148, 178, 109, 80, 193, 0, 152, 66,
	146, 0, 0, 72, 75, 189, 176, 103, 102, 0,
	0, 0, 0, 0, 0, 0, 130, 135, 159, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 142, 0, 0, 0, 79, 73,
	0, 128, 0, 0, 0, 82, 0, 100, 160, 0,
	63, 0, 0, 0, 0, 166, 173, 125, 0, 0,
	177, 122, 121, 0, 0, 0, 0, 0, 0, 114,
	60, 197, 191, 0, 0, 180, 132, 171, 97, 108,
	0, 104, 0, 0, 0, 105, 106, 141, 155, 0,
	0, 0, 0, 0, 198, 162, 0, 194, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 64, 101, 164, 167, 87, 151, 76, 110, 157,
	111, 133, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 201, 70, 91,
	174, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	45, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 90, 84, 85, 137, 138, 185, 186, 187, 161,
	81, 0, 0, 88, 89, 0, 169, 0, 0, 0,
	140, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 116, 65, 120, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 0, 124, 119, 145, 147,
	156, 165, 175, 182, 158, 195, 196, 179, 168, 0,
	127, 181, 95, 115, 190, 117, 118, 153, 74, 136,
	0, 112, 93, 0, 0, 0, 98, 67, 107, 68,
	96, 129, 0, 94, 0, 170, 139, 0, 0, 0,
	188, 0, 144, 0, 0, 0, 0, 0, 131, 172,
	134, 163, 126, 154, 83, 143, 183, 113, 149, 184,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 178, 109, 80, 193,
	0, 152, 66, 146, 0, 0, 72, 75, 189, 176,
	103, 102, 0, 0, 0, 0, 0, 0, 0, 130,
	135, 159, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1871, 0, 99, 0, 142, 0, 0,
	0, 79, 73, 0, 128, 0, 0, 0, 82, 0,
	100, 160, 0, 63, 0, 0, 0, 0, 166, 173,
	125, 0, 0, 177, 122, 121, 0, 0, 0, 0,
	0, 0, 114, 60, 197, 191, 0, 0, 180, 132,
	171, 97, 108, 0, 104, 0, 0, 0, 105, 106,
	141, 155, 0, 0, 0, 0, 0, 198, 162, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 64, 101, 164, 167, 87, 151,
	76, 110, 157, 111, 133, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	201, 70, 91, 174, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 45, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 90, 84, 85, 137, 138, 185,
	186, 187, 161, 81, 0, 0, 88, 89, 0, 169,
	0, 0, 0, 140, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 116, 65, 120, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 0, 124,
	119, 145, 147, 156, 165, 175, 182, 158, 195, 196,
	179, 168, 0, 127, 181, 95, 115, 190, 117, 118,
	153, 74, 136, 0, 112, 93, 0, 0, 0, 98,
	67, 107, 68, 96, 129, 0, 94, 0, 170, 139,
	0, 0, 0, 188, 0, 144, 0, 0, 0, 0,
	0, 131, 172, 134, 163, 126, 154, 83, 143, 183,
	113, 149, 184, 0, 0, 0, 213, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 178,
	109, 80, 193, 0, 152, 66, 146, 0, 0, 72,
	75, 189, 176, 103, 102, 0, 0, 0, 0, 0,
	0, 0, 130, 135, 159, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	142, 0, 0, 0, 79, 73, 0, 128, 0, 0,
	0, 82, 0, 100, 160, 0, 63, 0, 0, 0,
	0, 166, 173, 125, 0, 0, 177, 122, 121, 0,
	0, 0, 0, 0, 0, 114, 60, 197, 191, 0,
	0, 180, 132, 171, 97, 108, 0, 104, 0, 0,
	0, 105, 106, 141, 155, 0, 0, 0, 0, 0,
	198, 162, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 64, 101, 164,
	167, 87, 151, 76, 110, 157, 111, 133, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 201, 70, 91, 174, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 45, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 90, 84, 85,
	137, 138, 185, 186, 187, 161, 81, 0, 0, 88,
	89, 0, 169, 0, 0, 0, 140, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 116, 65,
	120, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 0, 124, 119, 145, 147, 156, 165, 175, 182,
	158, 195, 196, 179, 168, 0, 127, 181, 95, 115,
	190, 117, 118, 153, 74, 136, 0, 112, 93, 0,
	0, 0, 98, 67, 107, 68, 96, 129, 0, 94,
	0, 170, 139, 0, 0, 0, 188, 0, 144, 0,
	0, 0, 0, 0, 131, 172, 134, 163, 126, 154,
	83, 143, 183, 113, 149, 184, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 178, 109, 80, 193, 0, 152, 66, 146,
	0, 0, 72, 75, 189, 176, 103, 102, 685, 0,
	0, 0, 0, 0, 0, 130, 135, 159, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 142, 0, 0, 0, 79, 73, 0,
	128, 0, 0, 0, 82, 0, 100, 160, 0, 63,
	0, 0, 0, 0, 166, 173, 125, 0, 0, 177,
	122, 121, 0, 0, 0, 0, 0, 0, 114, 60,
	197, 191, 0, 0, 180, 132, 171, 97, 108, 0,
	104, 0, 0, 0, 105, 106, 141, 155, 0, 0,
	0, 0, 0, 198, 162, 0, 194, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	64, 101, 164, 167, 87, 151, 76, 110, 157, 111,
	133, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 201, 70, 91, 174,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 45,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	90, 84, 85, 137, 138, 185, 186, 187, 161, 81,
	0, 0, 88, 89, 0, 169, 0, 0, 0, 140,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 116, 65, 120, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 0, 124, 119, 145, 147, 156,
	165, 175, 182, 158, 195, 196, 179, 168, 0, 127,
	181, 95, 115, 190, 117, 118, 153, 74, 136, 0,
	112, 93, 0, 0, 0, 98, 67, 107, 68, 96,
	129, 0, 94, 0, 170, 139, 0, 0, 0, 188,
	0, 144, 0, 0, 0, 0, 0, 131, 172, 134,
	163, 126, 154, 83, 143, 183, 113, 149, 184, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 178, 109, 80, 193, 0,
	152, 66, 146, 0, 0, 72, 75, 189, 176, 103,
	102, 0, 0, 0, 0, 0, 0, 0, 130, 135,
	159, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 142, 0, 0, 0,
	79, 73, 0, 128, 0, 0, 0, 82, 0, 100,
	160, 0, 63, 0, 0, 0, 0, 166, 173, 125,
	0, 0, 177, 122, 121, 0, 0, 0, 0, 0,
	0, 114, 60, 197, 191, 0, 0, 180, 132, 171,
	97, 108, 0, 104, 0, 0, 0, 105, 106, 141,
	155, 0, 0, 0, 0, 0, 198, 162, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 64, 101, 164, 167, 87, 151, 76,
	110, 157, 111, 133, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 201,
	70, 91, 174, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 45, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 90, 84, 85, 137, 138, 185, 186,
	187, 161, 81, 0, 0, 88, 89, 0, 169, 0,
	0, 0, 140, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 116, 65, 120, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 0, 124, 119,
	145, 147, 156, 165, 175, 182, 158, 195, 196, 179,
	2154, 0, 127, 181, 95, 115, 190, 117, 118, 153,
	74, 136, 0, 112, 93, 0, 0, 0, 98, 67,
	107, 68, 96, 129, 0, 94, 0, 170, 139, 0,
	0, 0, 188, 0, 144, 0, 0, 0, 0, 0,
	131, 172, 134, 163, 126, 154, 83, 143, 183, 113,
	149, 184, 509, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 178, 109,
	80, 193, 0, 152, 66, 146, 0, 0, 72, 75,
	189, 176, 103, 102, 0, 0, 0, 0, 0, 0,
	0, 130, 135, 159, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 142,
	0, 0, 0, 79, 73, 0, 128, 0, 0, 0,
	82, 0, 100, 160, 0, 63, 0, 0, 0, 0,
	166, 173, 125, 0, 0, 177, 122, 121, 0, 0,
	0, 0, 0, 0, 114, 0, 197, 191, 0, 0,
	180, 132, 171, 97, 108, 0, 104, 0, 0, 0,
	105, 106, 141, 155, 0, 0, 0, 0, 0, 198,
	162, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 64, 101, 164, 167,
	87, 151, 76, 110, 157, 111, 133, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 201, 70, 91, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 90, 84, 85, 137,
	138, 185, 186, 187, 161, 81, 0, 0, 88, 89,
	0, 169, 0, 0, 0, 140, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 116, 65, 120,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 124, 119, 145, 147, 156, 165, 175, 182, 158,
	195, 196, 179, 168, 0, 127, 181, 95, 115, 190,
	117, 118, 153, 74, 136, 0, 112, 93, 0, 0,
	0, 98, 67, 107, 68, 96, 129, 0, 94, 0,
	170, 139, 0, 0, 0, 188, 0, 144, 0, 0,
	0, 0, 0, 131, 172, 134, 163, 126, 154, 83,
	143, 183, 113, 149, 184, 0, 0, 0, 213, 0,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 178, 109, 80, 193, 0, 152, 66, 146, 0,
	0, 72, 75, 189, 176, 103, 102, 0, 0, 0,
	0, 0, 0, 0, 130, 135, 159, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 142, 0, 0, 0, 79, 73, 0, 128,
	0, 0, 0, 82, 0, 100, 160, 0, 63, 0,
	0, 0, 0, 166, 173, 125, 0, 0, 177, 122,
	121, 0, 0, 0, 0, 0, 0, 114, 0, 197,
	191, 0, 0, 180, 132, 171, 97, 108, 0, 104,
	0, 0, 0, 105, 106, 141, 155, 0, 0, 0,
	0, 0, 198, 162, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 64,
	101, 164, 167, 87, 151, 76, 110, 157, 111, 133,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 201, 70, 91, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 90,
	84, 85, 137, 138, 185, 186, 187, 161, 81, 0,
	0, 88, 89, 0, 169, 0, 0, 0, 140, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	116, 65, 120, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 0, 124, 119, 145, 147, 156, 165,
	175, 182, 158, 195, 196, 179, 168, 0, 127, 181,
	95, 115, 190, 117, 118, 153, 74, 136, 0, 112,
	93, 0, 0, 0, 98, 67, 107, 68, 96, 129,
	0, 94, 0, 170, 139, 0, 0, 0, 188, 0,
	144, 0, 0, 0, 0, 0, 131, 172, 134, 163,
	126, 154, 83, 143, 183, 113, 149, 184, 0, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 178, 109, 80, 193, 0, 152,
	66, 146, 0, 0, 72, 75, 189, 176, 103, 102,
	0, 0, 0, 0, 0, 0, 0, 130, 135, 159,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 142, 0, 0, 0, 79,
	73, 0, 128, 0, 0, 0, 82, 0, 100, 160,
	0, 63, 0, 0, 0, 0, 166, 173, 125, 0,
	0, 177, 122, 121, 0, 0, 0, 0, 0, 0,
	114, 0, 197, 191, 0, 0, 180, 132, 171, 97,
	108, 0, 104, 0, 0, 0, 105, 106, 141, 155,
	0, 0, 0, 0, 0, 198, 162, 0, 194, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 64, 101, 164, 167, 87, 151, 76, 110,
	157, 111, 133, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 201, 70,
	91, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 90, 84, 85, 137, 138, 185, 186, 187,
	161, 81, 0, 0, 88, 89, 0, 169, 0, 0,
	0, 140, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 116, 65, 120, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 0, 124, 119, 145,
	147, 156, 165, 175, 182, 158, 195, 196, 179, 168,
	0, 127, 181, 95, 115, 190, 117, 118, 153, 74,
	136, 0, 112, 93, 0, 0, 0, 98, 67, 107,
	68, 96, 129, 0, 94, 0, 170, 139, 0, 0,
	0, 188, 0, 144, 0, 0, 0, 0, 0, 131,
	172, 134, 163, 126, 154, 83, 143, 183, 113, 149,
	184, 0, 0, 0, 220, 0, 217, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 178, 109, 80,
	193, 0, 152, 66, 146, 0, 0, 72, 75, 189,
	176, 103, 102, 0, 0, 0, 0, 0, 0, 0,
	130, 135, 159, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 142, 0,
	0, 0, 79, 73, 0, 128, 0, 0, 0, 82,
	0, 100, 160, 0, 63, 0, 0, 0, 0, 166,
	173, 125, 0, 0, 177, 122, 121, 0, 0, 0,
	0, 0, 0, 114, 0, 197, 191, 0, 0, 180,
	132, 171, 97, 108, 0, 104, 0, 0, 0, 105,
	106, 141, 155, 0, 0, 0, 0, 0, 198, 162,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 64, 101, 164, 167, 87,
	151, 76, 110, 157, 111, 133, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 201, 70, 91, 174, 0, 0, 779, 0, 1395,
	1384, 1383, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 1385, 0, 0, 0, 0, 0, 0, 779, 0,
	1395, 1384, 1383, 0, 1386, 0, 0, 0, 0, 0,
	0, 0, 1385, 0, 86, 90, 84, 85, 137, 138,
	185, 186, 187, 161, 81, 1386, 0, 88, 89, 0,
	169, 0, 0, 0, 140, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 276, 0, 116, 65, 120, 0,
	0, 0, 0, 0, 719, 0, 77, 78, 0, 2123,
	124, 119, 145, 147, 156, 165, 175, 182, 158, 195,
	196, 718, 44, 0, 0, 0, 717, 0, 0, 0,
	1998, 0, 0, 583, 0, 584, 0, 0, 0, 0,
	0, 0, 0, 573, 574, 0, 0, 0, 0, 0,
	0, 2045, 0, 509, 0, 0, 213, 558, 555, 556,
	560, 561, 562, 563, 1379, 0, 0, 559, 564, 565,
	566, 720, 2046, 0, 1391, 0, 715, 546, 0, 0,
	582, 261, 0, 285, 0, 1379, 0, 1397, 1398, 0,
	0, 0, 0, 0, 0, 1391, 0, 1393, 0, 0,
	0, 0, 0, 0, 543, 544, 0, 0, 1397, 1398,
	599, 0, 545, 0, 0, 541, 542, 547, 1393, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 1387, 1388,
	1390, 0, 0, 0, 1389, 0, 0, 0, 597, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 1387,
	1388, 1390, 0, 0, 0, 1389, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 553, 0, 0, 0, 0, 0, 0,
	295, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	0, 305, 306, 0, 307, 308, 309, 311, 310, 278,
	279, 280, 284, 282, 281, 283, 255, 257, 0, 253,
	256, 262, 258, 259, 260, 274, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 275, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 1396, 45, 0, 0, 0, 0, 0, 0, 0,
	0, 552, 570, 586, 587, 0, 0, 0, 0, 0,
	0, 0, 1396, 201, 779, 0, 1395, 1384, 1383, 0,
	0, 0, 0, 0, 0, 0, 45, 0, 1385, 0,
	0, 0, 0, 0, 568, 0, 0, 0, 0, 0,
	0, 1386, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 588, 598, 594, 595,
	592, 593, 591, 590, 589, 600, 575, 576, 577, 578,
	579, 581, 0, 0, 572, 571, 580, 719, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 947, 946, 0,
	0, 0, 1029, 0, 718, 1767, 0, 0, 0, 717,
	0, 0, 0, 0, 0, 948, 583, 0, 584, 0,
	0, 195, 196, 596, 0, 0, 573, 574, 0, 0,
	0, 0, 0, 0, 0, 0, 509, 0, 0, 213,
	558, 555, 556, 560, 561, 562, 563, 0, 0, 0,
	559, 564, 565, 566, 720, 0, 0, 0, 0, 715,
	546, 1379, 0, 582, 0, 0, 0, 0, 0, 0,
	0, 1391, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1397, 1398, 0, 543, 544, 1034,
	0, 0, 0, 599, 1393, 545, 0, 0, 541, 542,
	547, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 597, 0, 0, 0, 1387, 1388, 1390, 0, 0,
	197, 1389, 0, 0, 949, 0, 0, 0, 719, 535,
	0, 0, 1772, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 718, 194, 199, 200, 0,
	717, 0, 0, 0, 0, 0, 553, 583, 0, 584,
	0, 0, 0, 0, 0, 0, 0, 573, 574, 0,
	0, 0, 0, 0, 0, 0, 0, 509, 0, 950,
	213, 558, 555, 556, 560, 561, 562, 563, 0, 0,
	0, 559, 564, 565, 566, 720, 0, 0, 0, 0,
	715, 546, 0, 0, 582, 0, 0, 0, 0, 0,
	0, 779, 0, 1395, 1384, 1383, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1385, 0, 0, 543, 544,
	0, 0, 585, 0, 599, 0, 545, 202, 1386, 541,
	542, 547, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 552, 570, 586, 587, 1396, 0,
	0, 0, 597, 0, 0, 0, 201, 0, 0, 0,
	0, 197, 0, 0, 0, 0, 0, 0, 0, 45,
	535, 0, 0, 0, 947, 946, 0, 568, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 194, 199, 200,
	0, 0, 948, 0, 0, 0, 0, 553, 0, 588,
	598, 594, 595, 592, 593, 591, 590, 589, 600, 575,
	576, 577, 578, 579, 581, 0, 0, 572, 571, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1379, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1391, 0,
	0, 0, 0, 0, 195, 196, 596, 0, 0, 0,
	0, 1397, 1398, 0, 0, 0, 0, 0, 0, 0,
	0, 1393, 0, 585, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 552, 570, 586, 587, 0,
	0, 0, 1387, 1388, 1390, 0, 0, 201, 1389, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 1772,
	45, 0, 0, 0, 0, 0, 0, 0, 568, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	588, 598, 594, 595, 592, 593, 591, 590, 589, 600,
	575, 576, 577, 578, 579, 581, 0, 0, 572, 571,
	580, 719, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 0,
	0, 0, 0, 717, 0, 0, 0, 0, 0, 0,
	583, 0, 584, 0, 0, 195, 196, 596, 0, 0,
	573, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	509, 0, 0, 213, 558, 555, 556, 560, 561, 562,
	563, 0, 0, 0, 559, 564, 565, 566, 720, 0,
	0, 0, 0, 715, 546, 1396, 0, 582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 543, 544, 1034, 0, 0, 0, 599, 0, 545,
	0, 0, 541, 542, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 779,
	0, 0, 719, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 718,
	194, 199, 200, 0, 717, 0, 0, 0, 0, 0,
	553, 583, 0, 584, 0, 0, 0, 0, 0, 0,
	0, 573, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 509, 0, 0, 213, 558, 555, 556, 560, 561,
	562, 563, 0, 0, 0, 559, 564, 565, 566, 720,
	0, 0, 0, 0, 715, 546, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 779, 0, 1395, 1384, 1383,
	0, 0, 543, 544, 0, 0, 585, 0, 599, 1385,
	545, 202, 0, 541, 542, 547, 0, 0, 0, 0,
	0, 0, 1386, 0, 0, 0, 0, 0, 552, 570,
	586, 587, 0, 0, 0, 0, 597, 0, 0, 0,
	201, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	0, 0, 0, 45, 535, 0, 0, 0, 0, 0,
	0, 568, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 194, 199, 200, 0, 0, 0, 1891, 0, 0,
	0, 553, 0, 588, 598, 594, 595, 592, 593, 591,
	590, 589, 600, 575, 576, 577, 578, 579, 581, 0,
	0, 572, 571, 580, 0, 0, 0, 0, 0, 0,
	779, 0, 1395, 1384, 1383, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1385, 0, 0, 0, 0, 0,
	0, 0, 1379, 0, 0, 0, 0, 1386, 195, 196,
	596, 0, 1391, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1397, 1398, 585, 0, 0,
	0, 0, 202, 0, 0, 1393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 552,
	570, 586, 587, 947, 946, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 0, 0, 1387, 1388, 1390, 0,
	0, 948, 1389, 0, 45, 0, 0, 0, 0, 0,
	0, 0, 568, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 588, 598, 594, 595, 592, 593,
	591, 590, 589, 600, 575, 576, 577, 578, 579, 581,
	0, 0, 572, 571, 580, 0, 0, 1391, 583, 0,
	584, 0, 0, 0, 0, 0, 0, 0, 573, 574,
	1397, 1398, 0, 0, 0, 0, 0, 0, 509, 0,
	1393, 213, 558, 1041, 556, 1042, 1043, 1044, 1045, 195,
	196, 596, 559, 1046, 1047, 1048, 0, 0, 0, 0,
	0, 0, 546, 0, 0, 582, 0, 0, 0, 0,
	0, 1387, 1388, 1390, 0, 0, 0, 1389, 0, 0,
	949, 0, 0, 0, 0, 0, 0, 0, 1772, 543,
	544, 0, 0, 0, 0, 599, 0, 545, 0, 1396,
	541, 542, 547, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 0, 0, 0, 0, 0,
	719, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 198, 0, 718, 194, 199,
	200, 0, 717, 0, 0, 0, 0, 0, 553, 583,
	0, 584, 0, 0, 0, 0, 0, 0, 0, 573,
	574, 0, 0, 0, 0, 0, 0, 0, 0, 509,
	0, 0, 213, 558, 555, 556, 560, 561, 562, 563,
	0, 0, 0, 559, 564, 565, 566, 720, 0, 0,
	0, 0, 715, 546, 1396, 0, 582, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 0, 0, 585, 0, 599, 0, 545, 202,
	0, 541, 542, 547, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 552, 570, 586, 587,
	0, 0, 0, 0, 597, 0, 0, 0, 201, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 0, 0,
	0, 45, 535, 0, 0, 0, 0, 0, 0, 568,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 553,
	0, 588, 598, 594, 595, 592, 593, 591, 590, 589,
	600, 575, 576, 577, 578, 579, 581, 0, 0, 572,
	571, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 596, 0,
	0, 0, 0, 1039, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 552, 570, 586,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 201,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 0, 0, 0, 0,
	568, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 588, 598, 594, 595, 592, 593, 591, 590,
	589, 600, 575, 576, 577, 578, 579, 581, 0, 0,
	572, 571, 580, 1230, 1231, 1232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 0, 584, 0, 0, 0, 0, 0, 0, 0,
	573, 574, 0, 0, 0, 0, 0, 195, 196, 596,
	509, 0, 0, 213, 558, 555, 556, 560, 561, 562,
	563, 0, 0, 0, 559, 564, 565, 566, 0, 0,
	0, 0, 0, 0, 546, 0, 0, 582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 543, 544, 0, 0, 0, 0, 599, 0, 545,
	0, 0, 541, 542, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	553, 583, 0, 584, 0, 0, 0, 0, 0, 0,
	0, 573, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 509, 0, 0, 213, 558, 555, 556, 560, 561,
	562, 563, 0, 0, 0, 559, 564, 565, 566, 0,
	0, 0, 0, 0, 0, 546, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 0, 0, 585, 0, 599, 0,
	545, 202, 0, 541, 542, 547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 552, 570,
	586, 587, 0, 0, 0, 0, 597, 0, 0, 0,
	201, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	0, 0, 0, 45, 535, 0, 0, 0, 0, 0,
	0, 568, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 553, 0, 588, 598, 594, 595, 592, 593, 591,
	590, 589, 600, 575, 576, 577, 578, 579, 581, 0,
	0, 572, 571, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 195, 196,
	596, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 552,
	570, 586, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 45, 0, 0, 0, 0, 0,
	0, 0, 568, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 588, 598, 594, 595, 592, 593,
	591, 590, 589, 600, 575, 576, 577, 578, 579, 581,
	0, 0, 572, 571, 580, 0, 0, 0, 583, 0,
	584, 0, 0, 0, 0, 0, 0, 0, 573, 574,
	0, 0, 0, 0, 0, 0, 0, 0, 509, 0,
	0, 213, 558, 1041, 556, 1042, 1043, 1044, 1045, 195,
	196, 596, 559, 1046, 1047, 1048, 0, 0, 0, 0,
	0, 0, 546, 0, 0, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 543,
	544, 0, 0, 0, 0, 599, 0, 545, 0, 0,
	541, 542, 547, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 194, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 553, 583,
	0, 584, 0, 0, 0, 0, 0, 0, 0, 573,
	574, 0, 0, 0, 0, 0, 0, 0, 0, 1306,
	0, 0, 213, 558, 555, 556, 560, 561, 562, 563,
	0, 0, 0, 559, 564, 565, 566, 0, 0, 0,
	0, 0, 0, 546, 0, 0, 582, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 544, 0, 0, 585, 0, 599, 0, 545, 202,
	0, 541, 542, 547, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 552, 570, 586, 587,
	0, 0, 0, 0, 597, 0, 0, 0, 201, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 0, 0,
	0, 45, 535, 0, 0, 0, 0, 0, 0, 568,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 553,
	0, 588, 598, 594, 595, 592, 593, 591, 590, 589,
	600, 575, 576, 577, 578, 579, 581, 0, 0, 572,
	571, 580, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 596, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 813, 0, 821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 552, 570, 586,
	587, 0, 0, 0, 0, 0, 0, 0, 583, 201,
	584, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 815, 0, 509, 0,
	568, 213, 558, 555, 556, 560, 561, 562, 563, 0,
	0, 0, 559, 564, 565, 566, 0, 0, 0, 0,
	0, 0, 588, 598, 594, 595, 592, 593, 591, 590,
	589, 600, 575, 576, 577, 578, 579, 581, 0, 0,
	572, 571, 580, 0, 0, 0, 0, 0, 0, 543,
	544, 0, 0, 0, 0, 599, 0, 545, 0, 0,
	541, 542, 547, 0, 295, 296, 297, 298, 299, 300,
	301, 302, 303, 304, 0, 0, 0, 195, 196, 596,
	0, 0, 0, 597, 825, 816, 0, 0, 0, 0,
	0, 0, 197, 253, 814, 0, 0, 0, 0, 820,
	819, 535, 779, 0, 1395, 1384, 1383, 0, 0, 823,
	824, 0, 0, 0, 0, 198, 1385, 0, 194, 199,
	200, 0, 0, 0, 0, 822, 0, 0, 553, 1386,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 0, 947, 946, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 948, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 585, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 552, 570, 586, 587,
	261, 0, 285, 0, 0, 0, 0, 0, 201, 1379,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1391,
	0, 45, 0, 0, 0, 0, 0, 0, 0, 568,
	0, 0, 1397, 1398, 0, 0, 0, 0, 0, 0,
	0, 277, 1393, 0, 0, 0, 0, 0, 0, 0,
	0, 588, 598, 594, 595, 592, 593, 591, 590, 589,
	600, 575, 576, 577, 578, 579, 581, 0, 0, 572,
	571, 580, 0, 1387, 1388, 1390, 0, 0, 0, 1389,
	0, 0, 949, 0, 0, 0, 0, 0, 0, 0,
	1809, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 195, 196, 596, 295,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 0,
	305, 306, 0, 307, 308, 309, 311, 310, 278, 279,
	280, 284, 282, 281, 283, 255, 257, 0, 253, 256,
	262, 258, 259, 260, 274, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 461, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1396, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254,
}

var yyPact = [...]int16{
	931, -1000, -269, -1000, -1000, -1000, 1891, 2578, 1538, 1538,
	640, 1934, -1000, -1000, -1000, 9026, 822, 818, 810, 352,
	793, 324, 250, 3202, 741, 833, 741, 741, -1000, -192,
	-85, -1000, 6, 1716, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 838, -1000, -1000, -1000, 1712, 3101, 832, 3202,
	3202, -1000, 724, 1678, -1000, 12901, 12901, 12901, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 334, 324, 324, 741, 268, 741, 1933,
	781, 1932, 324, -1000, -1000, 946, 1083, -1000, 2031, 943,
	-1000, -1000, 10991, 741, 324, 3202, -1000, -1000, -1000, -1000,
	831, 1538, -1000, 826, 898, 3202, 2943, 870, 859, 3202,
	3202, 275, 5487, 265, -139, 79, -1000, -1000, -1000, -1000,
	939, 1783, -1000, -1000, -1000, 1783, 189, 1881, 1783, 1881,
	-1000, 1783, 1881, 161, 161, 161, 161, 161, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1873, 1780, -1000, 1783, 1783,
	1783, 1783, 1783, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1868, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1863, 214, 1863, 1828, 1828,
	-1000, -1000, 265, 265, 1880, 3202, 324, 1931, 1928, 3202,
	-247, 3202, 3202, 2128, -1000, -1000, -1000, 307, 3202, 781,
	10205, 2015, 15820, 12563, -1000, 3202, -1000, -1000, 3202, -1000,
	3202, 872, 676, 753, 813, 845, 922, 3202, 784, 1987,
	987, 938, 9419, -1000, 1994, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1867, 1114, 324, 624, 168, 1732, 656,
	814, 528, 1444, 576, -1000, -1000, -1000, 1155, -1000, 324,
	-1000, 2143, -1000, -1000, 617, -1000, 601, 1081, 1311, 3202,
	1866, 196, 1864, 14913, 1213, -1000, -276, -1000, 113, -1000,
	324, -1000, 1158, 161, 1783, -1000, 161, 1234, 161, 161,
	-1000, -1000, 954, 1999, 954, 954, 954, 954, 1309, 1309,
	-25, -25, -1000, -1000, -1000, 1204, -1000, 1196, 1863, -1000,
	-1000, -1000, 1189, -1000, 3202, 324, 1862, 1922, 3202, 3202,
	2030, 788, -1000, -1000, 2025, 2024, 1708, -1000, -1000, 300,
	-1000, -1000, 781, 2128, -1000, 936, -1000, -1000, -1000, -1000,
	-1000, 1861, -1000, -1000, 1713, 837, -1000, 1740, 9026, 452,
	324, -1000, 585, -1000, 576, 324, 324, 324, 324, 324,
	731, 7454, 658, 714, 841, 324, 741, 1193, 11777, 10598,
	275, -1000, -1000, -1000, 4227, 415, 2135, 2051, 647, 151,
	-150, 1439, -1000, -1000, 1860, -1000, -1000, -1000, 14421, -1000,
	1435, -1000, 1378, -1000, 1370, 1368, 51, 324, -1000, -176,
	115, 192, -1000, -1000, 1732, -1000, 465, 14421, 2020, -1000,
	2003, 980, 1230, -1000, -1000, 1284, 879, -1000, -1000, -1000,
	-1000, 14913, 14913, 14913, 14913, 14913, 14913, 14913, -1000, -1000,
	-1000, -1000, 132, -1000, 13943, -1000, -1000, 1301, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 928, 919, -1000,
	-271, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
	1732, 1732, 14421, 1732, 1986, 1732, 1732, 1732, 1732, 1732,
	1732, 1732, 1732, 1732, 1732, 1732, 15545, 1732, 1732, 1732,
	1732, -1000, -1000, -1000, -1000, -1000, -1000, 1611, 954, 161,
	954, 1606, 1587, 954, 954, -1000, -1000, 1363, 1025, -1000,
	-1000, -1000, -1000, 1673, -1000, 1656, -1000, 210, 207, -1000,
	1580, 1755, -1000, 1654, 1760, 1915, 4227, 3202, 1858, 1857,
	1742, 741, 1742, 2050, 403, 3202, 2128, 331, 2128, 1691,
	10991, 1309, 324, 324, 3202, 324, -1000, 324, -1000, -1000,
	54, 1856, 736, -1000, -1000, -1000, 778, 324, -1000, 452,
	9026, -1000, 324, -1000, -1000, 324, 324, 324, 728, -1000,
	1303, -1000, -1000, 986, 909, 8633, -1000, -1000, 1650, -1000,
	374, 1783, 1783, 14421, 2011, 2011, 2011, 2011, 908, 256,
	-1000, 277, 642, 642, -182, 523, 515, -150, 1732, 1745,
	1855, -1000, 4227, 844, -1000, 14421, 146, 1732, 1732, 1732,
	1732, 13943, -1000, -1000, -1000, -1000, -1000, -150, 1854, -1000,
	-1000, -1000, 1081, -1000, 1853, 1852, -1000, 1851, 14421, 331,
	256, 1288, 208, -1000, 1738, -1000, 1183, 14913, 14913, 14913,
	14913, 14913, 14913, 14913, 14913, 14913, 14913, 14913, 14913, 3799,
	1224, -1000, 683, 683, 59, 59, 59, 59, 59, 59,
	141, -1000, 1342, 61, 1635, 2082, 2148, 13943, 483, -1000,
	13288, -1000, 10205, 10991, 14270, 13792, 13792, 13792, 13792, 4620,
	14421, 13792, 13792, 13792, 13792, 2016, 1073, 483, 892, 2048,
	1342, 1342, 1342, 1298, -1000, 1342, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 187, -1000, -1000, -272, -1000, -273,
	-1000, -1000, -1000, -1000, -1000, -37, 907, 13792, 13792, 13792,
	13792, -1000, -1000, 954, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 161, 1299, 161, 85, 81, -1000, 1167, -1000,
	1165, 4227, 324, 3202, 1570, 1736, 2011, 2011, 2011, 2011,
	1847, 331, 4227, -1000, 1742, 3202, -1000, 773, 2120, -1000,
	-1000, 2046, -1000, 1733, -1000, -1000, 1714, 3202, -1000, 1647,
	1846, 251, -1000, -1000, 549, 1844, 137, 505, 1839, 1731,
	4227, 811, 1141, 12901, 324, 701, 324, -1000, -22, 668,
	-1000, -1000, 324, -1000, -1000, 1186, 324, -1000, -1000, -1000,
	-1000, 2166, 4227, 2011, 1159, -1000, -1000, -1000, 2011, 1200,
	-1000, -1000, -1000, -1000, -1000, -1000, 10991, -1000, 286, -1000,
	1111, -1000, -1000, 1131, 353, 1104, -1000, 324, -150, 1836,
	14421, 14421, 456, 4227, 1645, 394, 14421, 14421, 1108, -1000,
	-1000, 482, 14762, 1223, 993, 14913, 982, 14913, 15650, 15650,
	15650, 15650, 14913, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1300, -1000, 1742, 892, 1342, 1342, -1000, 10991, 1732,
	-1000, 1217, -1000, 1203, 1565, 844, 1640, -1000, -56, 14421,
	1829, 980, -1000, 1612, 1969, 59, 397, 397, 25, 25,
	25, 25, 25, 173, 173, -1000, -42, -1000, 70, -1000,
	-1000, -1000, -1000, -1000, 1297, -1000, -1000, -1000, -1000, 14421,
	-1000, 2054, 2080, 1742, 2039, 1342, 1977, -1000, 1342, 13792,
	1602, 1635, -1000, 901, -1000, 891, 1732, -1000, 65, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1544,
	1602, 901, 1602, 1602, 1602, 927, 1725, 15391, 1783, 1284,
	1783, 1828, -1000, -1000, 238, 1783, 228, -1000, -1000, -1000,
	-1000, 1828, -1000, -1000, -1000, -1000, -1000, 1783, 1783, -1000,
	-1000, 1783, 1783, -1000, 1783, 1783, 630, 1602, 1734, 1724,
	1602, 13792, -1000, 1064, -1000, 14421, 1342, -1000, 3202, -1000,
	-1000, -1000, -1000, 1342, -1000, -1000, -277, -278, 206, 203,
	324, 1602, 1342, 1722, 1602, 1602, -1000, 954, -1000, 954,
	-1000, -1000, 1559, 1541, 1534, 1827, 1824, -240, 4227, 1633,
	1619, 1342, 2019, 10991, -1000, -1000, -1000, -1000, -1000, 354,
	1070, 324, 4441, 2045, 161, -1000, 6668, 856, 324, -1000,
	4227, 4227, 1823, 1821, 1815, 14421, 14421, 432, 1615, 14913,
	1113, 421, -1000, 1107, -1000, -1000, 460, 1814, 100, 1811,
	739, 1095, 12901, 688, -1000, -1000, 984, 1908, 2743, 264,
	-1000, 1232, 1051, 1267, 1042, 1041, 1040, 1038, 1037, 1024,
	1008, 1006, 1005, 1004, -1000, -1000, 1506, -1000, 2011, 1732,
	-1000, -1000, 415, 2142, -1000, -1000, 415, 2136, 1810, 1809,
	4227, 844, 1494, -1000, 274, 327, 1732, 1732, 1613, 2166,
	-1000, -4, 482, 496, -1000, -1000, 1279, -1000, -1000, 1230,
	14913, 14913, 14913, -1000, -1000, -1000, -1000, 13943, 1223, 14913,
	14913, 14913, 1502, 14913, 1230, 1230, 1230, 1230, 1230, 2678,
	1342, 1342, -1000, -1000, 1609, -1000, 14421, -1000, 1485, -1000,
	-1000, 394, 730, -1000, -1000, 1118, -1000, 1473, 202, 483,
	2014, 14421, 14421, 2082, -1000, 1742, -1000, -1000, -1000, 2016,
	-1000, -1000, 1121, -1000, 1602, 13792, -267, -1000, -1000, -1000,
	370, -1000, -1000, 8240, 13792, -1000, 15240, 3799, -267, -267,
	-1000, -1000, 4790, 1224, 14421, -1000, 1158, 384, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	4790, -1000, 14913, 14913, 14913, 14913, -20, 1564, 1060, -1000,
	14421, 1036, -1000, -1000, -1000, -1000, -1000, 80, 78, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -240, 4227,
	4227, 2093, 1808, 1452, 2093, 2166, -1000, 1742, 1499, 330,
	261, 14421, -1000, 3722, -1000, 4441, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2082, 14421,
	-1000, -1000, -1000, -1000, -1000, 324, 4499, 324, 324, 324,
	690, 14421, 323, 14421, -1000, -1000, -1000, -1000, -1000, 1070,
	339, 1383, 6668, 6668, 6668, 5094, 6668, 6668, 840, -1000,
	1584, 1574, 4227, 4227, 4227, 959, 1537, 1805, 1804, -1000,
	1230, -1000, 12901, -1000, 1794, 4227, 4227, 1789, 1786, 14421,
	14913, 1106, 416, -1000, 1098, -1000, 458, 1136, -1000, 324,
	-1000, -66, 2743, 324, -1000, 1151, -1000, -1000, 1150, 1145,
	1150, 1150, 1150, 1150, 1150, 366, 1112, 539, 2011, -1000,
	256, 642, 256, 642, 10991, 4227, 1532, 394, 2093, 14421,
	599, 469, 14421, 14421, 2166, 1908, -1000, -1000, -1000, -1000,
	1230, 13943, 1230, 13943, 1230, 13943, -1000, 1502, 1230, 2663,
	-1000, 14913, 1502, 14913, -1000, -1000, 665, 10991, 844, -1000,
	-1000, 2133, 256, -63, 427, -1000, 73, -1000, 2141, 915,
	693, 1721, -1000, 860, 2054, 1342, 1953, -1000, -1000, -1000,
	-1000, 1732, -1000, -1000, 888, 1342, -1000, -1000, -1000, -1000,
	1342, 1783, -1000, 1342, 776, -1000, -1000, 1342, 1128, 994,
	610, 162, 1732, -2, -1000, 483, 14421, -1000, -1000, 2093,
	1352, 1530, 2166, 14421, 331, -240, 2166, -1000, -1000, -35,
	14421, 4441, 6390, 483, 6390, -1000, 4441, 2321, 2054, 13228,
	725, 639, 2198, 1719, 529, -1000, 6275, 1149, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 324, 2129, 2114, 2096, 2095, 15806, 14421,
	14421, -1000, 240, 321, -1000, -1000, -1000, -1000, -1000, 5882,
	1783, 161, 1780, -1000, -1000, -1000, -1000, -1000, 415, 1528,
	1525, 1523, 401, 2093, 14421, 14421, -1000, 4227, 1515, 1513,
	4227, 4227, 771, 1230, -1000, 12901, -1000, 1771, -1000, -1000,
	1732, 1511, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1081, -1000, 1081, 1503, 1501, 2166, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1494, 1494,
	1908, 415, 61, 61, 61, -1000, 14913, 1230, -1000, 1230,
	3202, -1000, 394, 642, 642, -1000, -1000, -1000, -1000, 229,
	1059, 980, 980, 1103, 63, -1000, 2073, -1000, -1000, 1984,
	14421, 14421, 14421, -1000, 2014, -1000, 13792, -1000, 597, 9812,
	-1000, -1000, -1000, -1000, 14913, -1000, -1000, 14913, -1000, 14913,
	-1000, 14913, -1000, 14913, 14913, 1342, 1221, 483, 2166, 2093,
	2166, 1908, 483, 1483, 2093, 1908, -1000, -259, 483, 3722,
	3785, -1000, -1000, 912, 14039, -1000, 2014, 4441, 1057, -1000,
	1065, -1000, 6390, 2819, 3202, 1434, 1492, 1843, -1000, -1000,
	-1000, 2017, 287, 868, 324, 318, 12901, -1000, -1000, 1717,
	7061, 62, -1000, -1000, -1000, 999, 886, 377, -1000, 1998,
	-1000, -1000, 4499, 2007, -1000, -1000, -1000, -1000, -1000, 6390,
	-1000, 1652, 1342, 6390, -1000, 256, 2166, 2166, -1000, -6,
	-1000, 1468, 1455, 1443, -1000, 415, 1408, 1403, 386, -1000,
	4227, 324, -1000, 2743, 415, 415, 645, 2166, 1908, 2093,
	2093, -1000, 256, -1000, -1000, -1000, 1230, 1769, -1000, 729,
	497, 980, -1000, 980, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2277, 1981, 483, 483, -1000, -1000, 1685, -1000, 2071,
	1342, -1000, 77, 77, 77, 77, 77, 514, -1000, -1000,
	1908, 2166, -1000, -1000, -1000, 2166, -1000, 14421, 12882, -1000,
	-1000, -1000, -1000, 3503, 4776, 711, 294, 431, 3202, -1000,
	431, 1480, 2198, -1000, -1000, 892, 2198, 2198, 2198, 2198,
	2198, -1000, 1967, 1962, -1000, 1948, 1945, 1949, 3202, 1396,
	287, 851, 1732, -1000, 3255, -1000, -1000, -1000, 2017, 2042,
	-1000, 7847, 1717, 62, 1715, -1000, 58, 50, 12935, 10991,
	954, -1000, -1000, -1000, -1000, -1000, 10991, 191, -1000, 3038,
	-1000, 1908, 1908, -1000, 2093, 2093, -1000, 256, 2166, 2166,
	-7, 1394, 1342, -1000, 256, 256, 3202, 1908, 415, -1000,
	-1000, -1000, 10991, 256, 2139, 256, 2121, -1000, -1000, -1000,
	878, -1000, 2093, 2198, 14421, -1000, -1000, -1000, -1000, -1000,
	-1000, 1342, 296, -77, -1000, -1000, 1908, 483, -1000, -1000,
	4215, -1000, -1000, 14421, -1000, 14421, 6390, -1000, 1491, 1732,
	-1000, 2093, 2198, 1410, 1505, -1000, 997, 1843, 1798, 1909,
	1759, -1000, -1000, -1000, -1000, 1961, -1000, 1959, -1000, -1000,
	-1000, -1000, -46, 798, 797, 796, 324, -1000, 1742, -1000,
	1715, 62, 47, -1000, -1000, -1000, -1000, 483, 995, -1000,
	1696, -1000, 12861, -1000, -1000, -1000, -1000, -1000, 1908, 1908,
	-1000, -1000, -1000, -1000, -1000, 1766, -1000, 256, 1382, -1000,
	642, -1000, 642, 10991, 2091, 1687, 1376, -1000, 483, -1000,
	1975, -21, -105, -1000, 705, 4441, 14154, 13525, 1898, 892,
	1732, -1000, 11384, 324, 2082, 1410, -1000, 2093, 892, 14421,
	-1000, -1000, 14421, 1761, -1000, 14421, -1000, -1000, -1000, -1000,
	1746, 1732, 1732, 1732, 1361, -1000, -1000, -1000, -1000, 56,
	44, -1000, 14421, -1000, -1000, -1000, 10991, -1000, -1000, 415,
	415, -1000, 2086, 2056, -1000, 1342, 14421, -1000, 1973, -1000,
	-1000, 3279, 1057, -1000, -1000, 2005, 1624, 1642, -1000, -1000,
	13439, 1342, 1374, -1000, -1000, 874, -1000, -1000, 1361, 2054,
	-1000, 2082, -1000, 483, 483, 331, 483, -174, 331, 331,
	331, 960, 324, -1000, -1000, -1000, 483, 1358, 256, 256,
	-1000, 14421, 14421, -1000, -1000, -39, 4341, 444, -1000, 1732,
	-1000, -1000, 1711, 12170, 324, -1000, -1000, 2054, 1351, 1341,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1338,
	1338, 1338, 851, -1000, -1000, -1000, -1000, 483, 1652, -88,
	691, 2130, -1000, 1732, -1000, 1742, -1000, -1000, -1000, -1000,
	-1000, -174, -1000, -1000, -1000, -46, -143, -1000, 892, 1642,
	1342, -1000, -1000, -1000, 1617, -1000,
}

var yyPgo = [...]int16{
	0, 2388, 20, 94, 2387, 2385, 2384, 2382, 2381, 2375,
	2374, 2372, 2368, 2366, 2365, 36, 32, 42, 28, 35,
	2355, 2353, 2352, 2351, 2349, 2344, 74, 2343, 2342, 2339,
	2337, 85, 2336, 2335, 2334, 2333, 64, 52, 86, 96,
	2515, 31, 30, 41, 71, 2332, 26, 2328, 2326, 55,
	2325, 44, 2324, 2323, 2827, 2322, 2319, 5, 179, 108,
	2315, 49, 2313, 2307, 102, 3574, 2754, 2589, 1983, 1763,
	2302, 92, 21, 54, 4, 7, 11, 2299, 538, 2,
	2297, 90, 70, 2296, 2295, 2294, 81, 2293, 59, 91,
	17, 69, 2292, 14, 8, 83, 34, 15, 13, 1,
	51, 40, 2291, 19, 45, 24, 2290, 66, 2289, 111,
	75, 87, 39, 2370, 0, 1622, 88, 2288, 117, 2286,
	1517, 79, 38, 18, 53, 76, 2285, 73, 98, 72,
	97, 77, 2284, 89, 2283, 2282, 2281, 2280, 2279, 135,
	427, 2278, 122, 82, 2276, 2274, 2272, 123, 118, 93,
	107, 104, 1820, 2270, 2269, 2268, 2267, 2266, 68, 62,
	100, 2265, 37, 95, 29, 235, 2264, 2263, 2262, 2260,
	2251, 2249, 2247, 99, 2245, 78, 1917, 105, 761, 46,
	2244, 2238, 2234, 2232, 2229, 2221, 2219, 63, 2217, 2216,
	101, 60, 115, 2211, 2209, 67, 65, 2208, 119, 110,
	2205, 113, 33, 50, 61, 43, 2200, 2199, 2198, 6,
	3, 2196, 48, 27, 114, 2192, 80, 2189, 84, 2188,
	12, 2186, 2182, 47, 2181, 504, 2147, 109, 2175, 2174,
	2168, 106, 728, 1451, 2167, 103, 116, 2161, 112,
}

var yyR1 = [...]uint8{
	0, 228, 229, 229, 1, 1, 1, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 22, 22, 22, 22, 22, 22, 231, 231, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 29, 29,
	7, 8, 8, 8, 234, 234, 49, 49, 96, 96,
	9, 9, 9, 9, 10, 10, 206, 206, 205, 207,
	207, 11, 11, 11, 11, 11, 200, 200, 200, 200,
	200, 12, 12, 203, 203, 203, 15, 15, 15, 15,
	16, 16, 17, 17, 17, 19, 19, 101, 101, 105,
	105, 105, 106, 106, 106, 106, 217, 217, 126, 126,
	230, 230, 235, 235, 235, 235, 235, 235, 235, 198,
	198, 198, 198, 199, 199, 199, 199, 201, 201, 202,
	202, 202, 202, 202, 202, 204, 204, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 13, 13,
	30, 30, 73, 73, 14, 111, 111, 182, 182, 182,
	183, 183, 183, 183, 183, 183, 184, 184, 185, 185,
	118, 118, 186, 186, 25, 167, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 151, 151, 151, 129, 129,
	129, 129, 129, 129, 129, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	192, 193, 194, 188, 188, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 141,
	141, 141, 141, 141, 141, 141, 187, 187, 133, 133,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	132, 132, 132, 132, 132, 132, 132, 137, 137, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 130, 130,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 138, 138, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 150, 150, 139, 139, 148, 148, 149,
	149, 149, 140, 140, 140, 147, 147, 147, 144, 144,
	145, 145, 146, 146, 146, 142, 142, 142, 143, 143,
	143, 153, 178, 178, 178, 180, 180, 181, 181, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 166, 166, 195, 195, 196, 196, 197,
	197, 177, 177, 177, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 165, 165, 175, 175,
	175, 175, 175, 176, 176, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 174, 160, 160, 160, 160,
	160, 161, 161, 162, 162, 162, 162, 154, 154, 155,
	155, 156, 156, 157, 157, 157, 157, 157, 157, 159,
	159, 158, 158, 158, 158, 158, 158, 190, 190, 190,
	221, 221, 221, 221, 221, 221, 222, 222, 191, 191,
	163, 163, 164, 164, 171, 171, 171, 171, 236, 236,
	169, 169, 169, 170, 170, 170, 237, 26, 27, 27,
	28, 28, 28, 33, 33, 33, 31, 31, 32, 32,
	38, 38, 37, 37, 39, 39, 39, 39, 117, 117,
	117, 116, 116, 218, 218, 218, 218, 218, 41, 41,
	42, 42, 43, 43, 44, 44, 44, 209, 209, 208,
	208, 210, 210, 210, 210, 210, 210, 210, 210, 56,
	56, 93, 93, 93, 97, 97, 45, 45, 45, 45,
	46, 46, 47, 47, 48, 48, 124, 124, 123, 123,
	123, 122, 122, 50, 50, 50, 52, 51, 51, 51,
	51, 53, 53, 55, 55, 54, 54, 57, 57, 57,
	57, 58, 58, 95, 95, 40, 40, 40, 40, 40,
	40, 40, 40, 108, 108, 60, 60, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 70, 70, 70, 70, 70, 70, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 36, 36,
	71, 71, 71, 78, 72, 72, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 68, 68, 68,
	68, 68, 68, 68, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 238,
	238, 69, 69, 69, 69, 34, 34, 34, 34, 34,
	125, 125, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 82, 82, 35, 35, 80, 80, 81,
	110, 110, 83, 83, 79, 79, 79, 79, 211, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 61,
	61, 84, 84, 85, 85, 219, 219, 220, 86, 86,
	87, 87, 88, 89, 89, 89, 90, 90, 90, 90,
	91, 91, 91, 63, 63, 63, 63, 63, 63, 92,
	92, 94, 94, 94, 94, 98, 98, 74, 74, 76,
	76, 75, 77, 99, 99, 103, 100, 100, 104, 104,
	104, 104, 104, 23, 24, 102, 102, 102, 119, 119,
	119, 109, 109, 107, 107, 114, 114, 115, 115, 115,
	115, 115, 120, 120, 120, 121, 121, 212, 212, 212,
	213, 213, 213, 214, 214, 215, 215, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 224, 224, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 226,
	226, 227, 227, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 232, 233,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 2, 13, 12,
	14, 12, 13, 12, 10, 7, 10, 7, 11, 11,
	9, 13, 14, 5, 8, 4, 8, 4, 7, 10,
	7, 8, 6, 9, 8, 9, 9, 8, 10, 10,
	11, 7, 6, 10, 9, 10, 10, 9, 11, 12,
	13, 13, 5, 12, 11, 9, 6, 13, 13, 14,
	14, 6, 7, 6, 6, 10, 12, 10, 11, 12,
	13, 12, 13, 7, 7, 11, 13, 6, 6, 8,
	7, 6, 6, 8, 8, 10, 10, 1, 1, 4,
	6, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 1, 1, 1, 3, 0, 4,
	3, 4, 5, 4, 2, 6, 1, 3, 3, 0,
	1, 2, 2, 2, 3, 5, 0, 2, 2, 2,
	2, 3, 5, 1, 2, 3, 7, 10, 1, 1,
	5, 5, 3, 5, 3, 1, 3, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	0, 3, 0, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 4, 2, 3, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 4,
	1, 1, 0, 1, 2, 0, 3, 0, 2, 2,
	0, 2, 2, 2, 2, 2, 0, 2, 0, 3,
	0, 1, 0, 2, 4, 4, 0, 1, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 3, 1,
	1, 1, 1, 1, 3, 2, 2, 3, 2, 4,
	2, 4, 2, 2, 3, 2, 3, 2, 7, 9,
	3, 3, 6, 9, 11, 9, 11, 5, 8, 14,
	14, 6, 6, 8, 8, 5, 8, 7, 4, 0,
	2, 2, 1, 1, 2, 0, 4, 3, 4, 3,
	3, 3, 3, 3, 3, 3, 2, 4, 6, 2,
	3, 4, 2, 3, 1, 3, 0, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 2, 2, 2, 1, 1, 0, 1, 1,
	3, 3, 2, 2, 2, 1, 1, 1, 1, 1,
	4, 5, 4, 4, 4, 1, 2, 2, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 3, 3, 0, 3, 3, 0, 1,
	0, 1, 0, 2, 1, 0, 3, 3, 0, 1,
	2, 6, 0, 1, 4, 1, 2, 1, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 5, 2, 3, 3, 2, 3, 2,
	3, 3, 2, 2, 3, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 5, 2, 2, 3,
	4, 2, 2, 2, 2, 1, 4, 7, 7, 10,
	10, 13, 11, 1, 1, 2, 2, 10, 8, 11,
	9, 7, 5, 6, 7, 8, 9, 8, 9, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 1,
	0, 1, 1, 1, 2, 2, 1, 2, 0, 3,
	0, 1, 1, 3, 0, 4, 1, 3, 2, 1,
	1, 2, 1, 1, 1, 1, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 3, 6, 4, 7, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 0, 4, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	8, 1, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 0, 4, 1, 3, 3, 2, 3,
	2, 1, 2, 0, 3, 1, 1, 3, 4, 6,
	4, 6, 4, 6, 3, 4, 4, 5, 5, 3,
	4, 3, 3, 3, 3, 5, 6, 2, 4, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 2, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	6, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 2, 1, 3, 4, 5, 5,
	5, 5, 6, 4, 4, 4, 6, 6, 8, 6,
	4, 6, 6, 8, 6, 8, 6, 8, 6, 8,
	9, 7, 5, 4, 4, 3, 3, 3, 1, 3,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 2, 2, 1, 1, 2,
	2, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 4,
	4, 1, 3, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 0, 2, 1, 1, 3, 5, 3, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 0, 3, 0, 2, 1, 3, 1, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 1, 3, 1, 1, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 5, 3, 1, 3, 1, 2, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 2,
	0, 2, 2, 4, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -228, -1, -20, -21, -22, -25, 126, 132, 133,
	127, 71, -229, 401, -167, 58, -221, -222, 285, -186,
	139, 152, 174, 175, 177, 371, 136, 137, 383, 384,
	156, 386, 79, -226, -225, 6, 8, 9, 10, 165,
	147, 174, 21, -114, 61, 311, -226, 137, -107, 138,
	175, 142, 56, -168, -151, -115, 63, 36, -114, 307,
	151, -112, -113, 131, 202, 374, 80, 25, 27, 293,
	299, 201, 84, 120, 16, 85, 208, 383, 384, 119,
	76, 351, 126, 52, 343, 344, 341, 206, 354, 355,
	342, 300, 213, 20, 31, 10, 28, 159, 24, 113,
	128, 203, 89, 88, 162, 166, 167, 26, 160, 75,
	209, 211, 19, 55, 150, 11, 373, 13, 14, 388,
	375, 143, 142, 100, 387, 138, 50, 8, 122, 29,
	97, 46, 157, 212, 48, 98, 17, 345, 346, 34,
	361, 168, 115, 53, 40, 389, 81, 390, 73, 56,
	314, 207, 79, 15, 51, 169, 391, 210, 395, 99,
	129, 350, 176, 49, 204, 392, 136, 205, 6, 357,
	33, 158, 47, 137, 301, 393, 87, 141, 74, 5,
	156, 9, 394, 54, 57, 347, 348, 349, 38, 86,
	12, 153, 365, 77, 178, 396, 397, 152, 175, 179,
	180, 298, 269, 138, 138, 138, 140, 222, 140, -114,
	-114, -79, -109, 61, -113, -120, 143, 63, -54, -120,
	61, -113, -109, 137, -109, -109, 386, 383, 384, 350,
	56, 59, 135, 56, -54, 314, 137, -54, -54, 137,
	145, 60, 59, -152, -129, -133, -130, -135, -134, -136,
	-114, -131, -132, 258, 363, 255, 259, 256, 261, 262,
	263, 120, 260, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 264, 276, 33, 161, 248, 249,
	250, 253, 252, 254, 251, 122, 277, 278, 279, 280,
	281, 282, 283, 284, 285, 229, 230, 231, 232, 233,
	234, 235, 236, 237, 238, 240, 241, 243, 244, 245,
	247, 246, -152, -152, -114, 56, 221, -114, -114, -109,
	223, -109, 56, -198, 19, 201, 202, 214, 56, -114,
	123, 81, 25, 123, -115, -109, -114, -54, 137, -225,
	137, 131, 127, 128, 129, -54, -54, 314, 129, 131,
	-54, -120, -171, -236, 366, 37, -151, -153, -160, -154,
	-155, -156, -157, -172, -161, 146, 144, 156, 399, 148,
	149, 285, -165, 150, 138, 157, 73, 81, -192, 146,
	-193, 56, 293, 299, 144, 157, 156, 399, 71, 147,
	25, 373, 375, 31, 32, -146, 402, 287, -144, 296,
	123, -139, 58, -139, -138, 257, -140, 58, -139, -140,
	-139, -140, -142, 259, -142, -142, -142, -142, 58, 58,
	-139, -139, -139, -139, -139, 58, -148, 58, -137, 242,
	-148, -149, 58, -149, 56, 57, -54, -114, 56, 56,
	-54, -217, 396, 397, -54, -54, -201, -199, 8, 9,
	10, 215, -54, -198, -115, -121, -112, -113, -120, 26,
	-129, 276, -121, -112, -54, -49, -54, -49, 145, -118,
	146, -160, 144, 156, 150, 145, 145, 146, 141, 145,
	131, 131, 127, 128, -54, 141, 41, 97, 123, -169,
	59, -115, 71, 36, 58, -191, 56, 81, -163, -114,
	157, -165, 61, 138, -190, 157, 383, 384, -232, 58,
	-165, 138, -165, 61, 138, 157, 61, 157, 73, 19,
	-114, 9, 157, 157, -191, 63, -54, 58, -188, 374,
	16, 58, -65, -64, -60, 161, -79, -211, -77, -214,
	-78, 120, 121, 109, 110, 117, 82, 122, -68, -66,
	-67, -69, 286, 188, -232, 63, 64, -114, 62, 72,
	65, 66, 67, 68, 73, 74, 75, -120, 319, -75,
	287, 360, 359, 48, 49, 351, 352, 353, 354, 355,
	361, 356, 85, 38, 40, 264, 288, 289, 341, 349,
	348, 347, 345, 346, 343, 344, 398, 143, 342, 115,
	350, -194, 65, 403, -145, 297, -114, 65, -142, -139,
	-142, 65, 61, -142, -142, -143, 120, 119, 33, -143,
	-143, -143, -143, -150, 63, -150, -147, 365, 366, -147,
	65, 65, -148, 65, -54, -114, 58, 56, -54, -54,
	25, 140, 25, -182, 25, 56, 59, 215, -198, -201,
	123, 58, 57, 141, 59, 11, -151, -231, 138, 157,
	-114, 157, -114, -114, -114, -114, -114, 146, -160, -118,
	145, -151, 146, -160, 156, 145, 145, 146, 131, -114,
	-109, 63, 73, -114, -121, 90, -115, -236, -176, -173,
	-114, 157, -113, 58, -68, -66, -67, -69, -120, -212,
	217, 81, 10, 9, 19, 150, 144, 156, 399, 154,
	-190, 61, 58, -40, -59, 81, -65, 31, 26, 9,
	76, -232, 61, 61, 61, 61, -190, 156, -163, -114,
	385, -192, 399, -141, 341, 344, 343, 289, -232, 58,
	-212, -40, 25, 31, -61, 65, 110, 106, 105, 116,
	109, 110, 111, 112, 113, 114, 115, 107, 108, 398,
	119, 63, 124, 125, -65, -65, -65, -65, -65, -65,
	-65, -214, -2, -65, -72, -3, -4, -232, -40, 6,
	-232, 63, 123, 123, 402, -232, -232, -232, -232, -232,
	-232, -232, -232, -232, -232, -232, -82, -40, -232, 41,
	-232, -232, -232, -232, -238, -232, -238, -238, -238, -238,
	-238, -238, -128, 120, 259, 161, 250, -131, -130, 265,
	264, 122, 290, 274, 275, 249, -114, -232, -232, -232,
	-232, 60, -143, -142, -143, 60, 60, -143, -143, 61,
	61, 120, 60, 59, 60, 248, 248, 60, 59, 60,
	59, 58, 57, 56, -175, -176, -68, -66, -67, -69,
	-54, 58, 58, -2, -232, -109, -2, -183, 19, 185,
	186, -54, -199, -93, -114, 157, -201, 56, -115, -150,
	-114, -227, -114, -54, -227, -114, 156, 144, 399, 154,
	58, 33, 128, 175, 141, -114, -231, -151, -114, -114,
	-114, -114, 146, -160, 63, 97, 123, -170, -115, 63,
	65, 60, 59, -139, 58, -174, 291, -139, -139, -40,
	-89, 27, 28, -89, -89, -89, 123, -213, 218, 217,
	-162, 181, 182, 33, 183, -162, 385, 157, 157, -190,
	-232, -232, 57, 58, -176, -233, 80, 79, 97, 216,
	60, -40, -62, 100, 81, 98, 82, 99, 101, 102,
	103, 104, 84, 90, 91, 92, 93, 94, 95, 96,
	-108, -232, -78, -232, -232, -232, -59, -190, 58, -191,
	-139, 58, -139, 58, 58, -40, -93, -213, 60, 58,
	375, 59, 65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -133, 249, -128, -131, -125,
	61, 63, -64, 63, -114, -64, -114, -233, -233, 59,
	-233, -86, 15, -28, 5, -2, -26, -237, -38, 24,
	-37, -72, -39, -40, 111, -120, -115, -115, -215, 403,
	-216, 63, 65, 66, 67, 68, 73, 74, 75, -65,
	-37, -40, -37, -37, -37, -40, -127, 120, 255, 161,
	250, 244, 274, 275, 295, 248, 296, 237, 229, 234,
	247, 245, 231, 246, 230, 243, 240, 253, 252, 254,
	265, 256, 261, 263, 262, 260, -40, -37, -39, -39,
	-37, -31, 24, -80, -81, 86, -79, -114, 19, -233,
	-233, -233, -233, 65, -233, 257, 402, 402, 365, 366,
	123, -37, -38, -37, -37, -37, -143, -142, 63, -142,
	298, 298, 65, 65, -175, -114, -54, 60, 58, -93,
	-176, -2, -54, 141, 21, 6, 8, 9, 10, 19,
	-111, 59, 25, -54, 60, -230, 58, 365, 59, 182,
	58, 58, 383, 384, 157, 58, 58, 57, -176, 31,
	81, 178, 31, 81, -129, -114, 144, -114, 156, 399,
	33, 128, 175, -114, 63, 73, -114, -178, -180, 365,
	-179, 57, 151, 71, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 61, -173, -89, 65, -89, 60, -115,
	220, 219, -191, 56, 73, 184, -191, 56, -163, -190,
	58, -40, -159, -158, -114, -40, 155, -114, -176, 60,
	-187, 183, -40, -40, -70, 73, 81, 74, 75, -65,
	21, 22, 23, -71, -75, -78, 69, -232, 100, 98,
	99, 84, -65, 98, -65, -65, -65, -65, -65, -65,
	61, -79, -233, -233, -164, -115, -232, 60, 65, 60,
	60, -233, 60, 371, 372, -40, 58, -61, 365, -40,
	-90, 17, 16, -5, -3, -232, 21, 24, -233, -33,
	44, 45, -27, -233, -37, 59, -233, -233, -117, -116,
	25, -114, 63, 123, -232, 403, 59, 398, -233, -233,
	-233, -233, 59, 57, 59, -139, 58, -139, -139, -149,
	235, -139, 235, -149, -139, -139, -139, -139, -139, -139,
	25, -233, 59, 11, 59, 11, -233, -37, -83, -81,
	89, -40, -233, -120, -233, 403, 403, 248, 248, -114,
	-233, -233, -233, -233, -143, -143, 60, 60, 60, 58,
	58, -95, 387, -175, 60, 60, -233, 25, -164, 203,
	-110, 86, -114, -202, -204, 224, -18, -15, -6, -8,
	-7, -10, -9, -11, -12, -13, -14, -23, -3, 143,
	-16, -17, -29, 10, 9, 20, 33, 207, 208, 213,
	209, 153, -30, 176, -24, 8, 350, 166, 167, -111,
	19, -235, -114, 109, 90, 63, -151, 59, 132, -114,
	-176, -176, 58, 58, 58, -40, -159, 155, -114, 60,
	-65, 73, 175, 73, 157, 58, 58, 383, 384, 58,
	31, 81, 178, 31, 81, -129, 144, 97, -177, 56,
	-179, 365, 58, 367, 61, -166, 90, 63, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 60, -89,
	-212, 9, -212, 10, 58, 58, -176, -233, -233, 59,
	365, 365, -232, -232, 60, -178, 358, 73, 74, 75,
	-65, -232, -65, -232, -65, -232, -71, -65, -65, -65,
	-36, 162, -65, 80, -233, -233, 60, 59, -40, 60,
	-187, 56, -212, 60, -189, 60, 248, -91, 19, 34,
	-40, -87, -88, -40, -86, -2, -31, 70, -233, -39,
	-218, 400, -116, 111, -121, -38, -216, -128, -218, -218,
	-127, 120, 161, -125, -40, -142, 61, -127, -65, -65,
	-65, -65, 362, -86, 88, -40, 87, 298, 298, -95,
	-175, -176, -58, 12, 58, 60, -58, -178, -2, -184,
	57, 204, 224, -40, 401, -204, 224, -202, -86, -40,
	-26, -26, -26, -206, -114, -205, -26, -224, -223, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	-114, -114, -114, -200, 40, 210, 211, 212, -40, -114,
	-232, -82, -110, 203, 60, -235, -235, -235, -235, -114,
	120, 269, 33, 122, -235, -235, 134, 60, 60, -176,
	-176, -176, 60, 60, 58, 58, -129, 58, -176, -176,
	58, 58, -40, -65, 73, 175, 73, 157, 63, 73,
	-114, -181, -179, -114, 65, -195, 56, 77, 65, -195,
	-195, -195, -195, -195, -196, 199, 200, 65, -197, -196,
	65, -89, -213, -162, -213, -162, -164, -176, 60, -187,
	-58, -158, 90, -114, 80, 90, -114, 80, -159, -159,
	-178, -177, -65, -65, -65, -36, 80, -65, -36, -65,
	147, -115, -233, 10, 9, -213, 371, 372, 60, 225,
	377, 378, 168, 379, 183, 380, 381, 298, 9, 100,
	59, 18, 59, -89, -90, -233, -32, 47, -232, 123,
	-233, -233, -233, -233, 59, -233, -233, 59, -233, 19,
	-233, 59, -233, 19, -232, -35, 357, -40, -58, 60,
	60, -178, -40, -93, -95, -178, -185, 365, -40, -202,
	-203, -204, -204, -202, 401, 88, -90, 87, -19, -15,
	-16, -18, 224, -107, 11, -49, -42, -43, -44, -45,
	-56, -78, -232, -54, 59, -207, -124, 205, 25, -100,
	-126, 226, -104, 309, 308, -115, 319, -102, 307, 259,
	306, -195, 59, -114, 11, 11, 11, 11, -204, 224,
	-73, -72, -73, 224, 204, -212, 60, 60, 60, 183,
	-58, -159, -159, -176, 60, 60, -176, -176, 60, -129,
	58, -232, 60, 59, -191, -191, 60, 60, -178, -233,
	-233, -177, -212, -233, -233, -233, -65, -54, -187, -162,
	-162, 365, -61, 16, -61, -61, -61, 65, 378, 168,
	380, 16, 42, -40, -40, -88, -91, -37, -233, 169,
	-86, 111, -65, -65, -65, -65, -65, -65, -233, 63,
	-178, -58, -178, -177, 60, -58, -177, 399, 401, -204,
	88, 88, -91, -202, 89, 89, -203, -55, 29, -54,
	-54, -49, -234, 11, 57, 33, 59, -50, -52, -51,
	-53, 46, 50, 52, 47, 48, 49, 53, -124, -42,
	-232, -123, 169, -122, 25, -120, 63, -205, -114, 206,
	-129, 59, -100, 226, -101, -105, 310, 312, 90, 123,
	-119, -114, 63, 31, 33, -223, 29, -203, -233, -203,
	-213, -178, -178, 358, 60, 60, 60, -212, 60, 60,
	183, -176, -114, -179, -212, -212, 147, -178, -177, -58,
	-58, -213, 58, -212, 56, -212, 56, -61, -61, 382,
	-120, 43, -41, 11, 16, -233, -233, -233, -233, -233,
	-233, -34, 100, 365, -177, -178, -178, -40, 88, -204,
	401, -16, -19, 143, -17, 143, 401, 88, -96, 169,
	-54, -96, 57, -42, -99, -103, -79, -43, -44, -44,
	-43, -44, 46, 46, 46, 51, 46, 51, 46, -51,
	-120, -233, -57, 54, 142, 55, -232, -122, 19, -104,
	-101, 59, 311, 313, 314, 56, 77, -40, -115, -143,
	-164, 88, 401, -177, -177, -58, -58, -213, -178, -178,
	358, 60, -233, -213, -213, -54, -177, -212, -164, -213,
	9, -213, 10, 123, -58, -42, -219, -220, -40, -233,
	363, 53, 368, -177, 88, 89, -40, -40, -63, 33,
	38, -2, -232, -232, -58, -42, -58, -41, 59, 90,
	-47, -46, 56, 57, -48, 56, -46, 46, 46, -209,
	365, 138, 138, 138, -97, -114, -2, -105, -106, 315,
	312, 318, 90, 88, -177, -177, 58, -213, 60, -162,
	-162, -115, -84, 13, -233, -86, 59, 43, 364, 369,
	143, -202, -19, -19, -98, 56, -99, -74, -76, -75,
	-232, -2, -92, -94, 6, -114, -112, -113, -97, -86,
	-58, -58, -103, -40, -40, 58, -40, 58, -232, -232,
	-232, -233, 59, 312, 316, 317, -40, -164, -212, -212,
	-85, 14, 16, -233, -220, 43, 401, 30, -98, 59,
	-233, -233, -233, 59, 123, -233, -90, -86, -93, -208,
	-210, 388, 389, 390, 391, 392, 393, 394, 395, -93,
	-93, -93, -123, -114, 60, -213, -213, -40, -72, 365,
	88, 157, -76, 38, -2, -232, -94, -114, -90, 60,
	60, 59, -233, -233, -233, -57, 368, 143, 9, -74,
	-2, -210, -209, 369, -99, -233,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 0, -2, 0, 0,
	0, 0, 1, 3, 7, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 921, 0, 921, 921, 501, 502,
	503, 506, 0, 0, 989, 979, 980, 981, 982, 983,
	984, 985, 986, 988, 925, 926, 0, 0, 0, 0,
	0, 924, 0, 0, 227, 279, 279, 279, 927, 928,
	929, 930, 931, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	1130, 1131, 1132, 0, 0, 0, 921, 0, 921, 0,
	844, 0, 0, -2, -2, 0, 0, 934, 0, 615,
	932, 933, 0, 921, 0, 0, 507, 504, 505, 223,
	0, 0, 987, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 0, 235, 392, 388, 239, 240, 241, 242,
	243, 375, 309, 338, 339, 375, 362, 382, 375, 382,
	345, 375, 382, 395, 395, 395, 395, 395, 353, 354,
	355, 356, 357, 358, 359, 0, 0, 329, 375, 375,
	375, 375, 375, 335, 336, 337, 364, 365, 366, 367,
	368, 369, 370, 371, 0, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 377, 327, 377, 379, 379,
	325, 326, 236, 237, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 170, 171, 0, 0, 0,
	0, 0, 0, 0, 25, 0, 27, 224, 0, 990,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 516, 0, 519, 228, 229, 230, 231,
	232, 233, 234, 0, 508, 510, 0, -2, 0, 0,
	0, 0, 0, 1044, -2, -2, 246, 0, 248, 0,
	250, 0, 252, 253, 0, 255, 257, 508, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 394, 390, 389,
	0, 308, 0, 395, 375, 363, 395, 0, 395, 395,
	346, 347, 398, 0, 398, 398, 398, 398, 0, 0,
	385, 385, 332, 333, 334, 0, 320, 0, 377, 328,
	322, 323, 0, 324, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 157, 0, 207, 0, 177, 173, 174,
	175, 172, 0, 0, 846, 0, -2, -2, 935, 922,
	23, 0, 616, 936, 0, 0, 106, 0, 0, 0,
	510, 52, 0, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 921, 0, 0, 0,
	0, 520, 522, 518, 0, 937, 0, 0, 0, 511,
	434, 0, 442, -2, 0, 447, 498, 499, 0, 1133,
	0, 446, 0, 437, 439, 0, 497, 510, 247, 0,
	0, 0, 254, 256, 0, 260, -2, 0, 0, 283,
	0, 0, 280, 686, 687, 0, 689, 690, 691, 692,
	693, 0, 0, 0, 0, 0, 0, 0, 720, 721,
	722, 723, 0, 725, 0, -2, 850, 844, 852, 853,
	854, 855, 856, 857, 858, 635, 636, 0, 0, 902,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 0, 0, 758, 769,
	769, 769, 769, 769, 769, 769, 0, 0, 0, 0,
	0, 281, 282, 393, 238, 391, 244, 0, 398, 395,
	398, 0, 0, 398, 398, 348, 399, 0, 0, 349,
	350, 351, 352, 0, 373, 0, 330, 0, 0, 331,
	0, 0, 321, 0, 0, 0, 0, 0, 0, 0,
	0, 921, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 0, 87, 88,
	511, 0, 0, 63, 64, 78, 0, 510, 56, 0,
	0, 42, 510, 61, -2, 0, 0, 0, 0, 77,
	0, 81, 82, 0, 0, 0, 521, 517, 0, 453,
	375, 375, -2, 0, 873, 873, 873, 873, 0, 940,
	938, 0, 0, 0, 0, 0, 0, 497, 0, 0,
	0, 441, 0, 0, 625, 0, 631, 633, 0, 0,
	0, 0, 435, 436, 438, 440, 444, 497, 0, 511,
	278, 249, 508, 251, 375, 375, 304, 0, 0, 0,
	940, 0, 0, 284, 0, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 688, 0, 0, 711, 712, 713, 714, 715, 716,
	717, 724, 92, 631, 0, 868, 0, 0, 684, 526,
	540, 851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 0, 834, 0, 0,
	0, 0, 0, 0, 761, 0, 762, 763, 764, 765,
	766, 767, 768, 814, 0, 816, 817, 818, 819, 820,
	821, 824, 825, 826, 827, 828, 831, 0, 540, 0,
	0, 376, 340, 398, 342, 383, 384, 343, 344, 400,
	396, 397, 395, 0, 395, 0, 0, 372, 0, 380,
	0, 0, 0, 0, 0, 448, -2, -2, -2, -2,
	0, 0, 0, -2, 0, 0, -2, 0, 0, 208,
	209, 205, 178, 176, 581, 582, 0, 0, 847, 0,
	160, 28, 991, 107, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 511, 0, 41, 511, 0,
	73, 74, 510, 62, 80, 0, 0, 515, 523, 524,
	525, 402, 0, 873, 1133, 458, 465, 457, 873, 0,
	461, 874, 875, 462, 463, 464, 0, 466, 0, 939,
	508, 473, 474, 0, 0, 508, 509, 510, 497, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 630,
	1134, 628, 0, 0, 0, 0, 0, 0, 674, 675,
	676, 677, 0, 667, 668, 669, 670, 671, 672, 673,
	632, 0, 657, 0, 0, 0, 625, 445, 0, 0,
	299, 0, 302, 0, 0, 0, 0, 267, 0, 0,
	275, 0, 860, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 708, 828, 719, -2, 709,
	780, 781, 706, 849, 0, 707, 718, 683, 726, 0,
	901, 876, 0, 0, 530, 92, 533, 528, 0, 0,
	0, 0, 542, 548, 544, 0, 846, 848, 0, 944,
	945, -2, -2, -2, -2, -2, -2, -2, -2, 0,
	0, 548, 0, 0, 0, 0, 0, 375, 375, 785,
	375, 379, 788, 789, 790, 375, 793, 795, 796, 797,
	798, 379, 800, 801, 802, 803, 804, 375, 375, 807,
	808, 375, 375, 811, 375, 375, 0, 0, 0, 0,
	0, 0, 537, 842, 837, 0, 0, 844, 0, 755,
	756, 757, 759, 0, 770, 815, 0, 0, 0, 0,
	0, 0, 0, 541, 0, 0, 341, 398, 374, 398,
	386, 387, 0, 0, 0, 0, 0, 623, 0, 0,
	0, 92, 0, 0, 211, 212, 213, 214, 215, 0,
	840, 0, 0, 205, -2, 26, 162, 0, 0, 31,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 34, 0, 37, 79, 0, 0, 0, 0,
	0, 0, 0, 511, 83, 84, 0, 431, 403, 0,
	405, 0, 423, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 454, 455, 0, 459, 873, 0,
	941, 942, 937, 0, 475, 476, 937, 0, 0, 0,
	0, 0, 0, 489, 844, 0, 0, 0, 0, 402,
	482, 0, 626, 627, 629, 661, 0, 663, 665, 637,
	0, 0, 0, 644, 680, 681, 682, 0, 0, 0,
	0, 0, 678, 0, 649, 651, 652, 653, 654, 0,
	0, 0, 659, 660, 0, 512, 0, 300, 0, 303,
	305, 306, -2, 271, 272, 0, 285, 0, 0, 685,
	880, 0, 0, 868, 94, 0, 531, 532, -2, 536,
	534, 535, 527, 727, 0, 0, 553, 733, 545, 549,
	0, 551, 552, 0, 540, 943, 0, 0, 553, 553,
	734, 735, 0, 0, 0, 782, 1133, 395, 786, 787,
	791, 792, 794, 799, 805, 806, 809, 810, 812, 813,
	0, 740, 0, 0, 0, 0, 0, 868, 0, 838,
	0, 0, 753, 754, 760, 822, 823, 0, 0, 832,
	771, 772, 773, 774, 360, 361, 378, 381, 623, 0,
	0, 621, 0, 0, 621, 402, 93, 0, 216, 0,
	0, 0, 583, 20, 179, 0, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 868, 0,
	138, 139, 526, 526, 526, 0, 526, 0, 0, 0,
	126, 0, 0, 833, 913, 98, 99, 200, 201, 840,
	0, 0, -2, 162, 162, -2, 162, 162, 0, 992,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	33, 35, 0, 36, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 47, 0, 0, 401, 0,
	406, 0, 0, 0, 409, 0, 424, 411, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 376, 460,
	940, 0, 940, 0, 0, 0, 0, 306, 483, 0,
	0, 0, 0, 0, 402, 431, 307, 662, 664, 666,
	638, 0, 640, 0, 642, 0, 645, 678, 650, 0,
	646, 0, 678, 0, 634, 658, 0, 0, 0, 301,
	258, 0, 940, 0, 0, 277, 0, 89, 0, 0,
	877, 869, 870, 873, 876, 92, 538, 529, 728, 543,
	729, 0, 550, 546, 0, 0, 946, -2, 730, 731,
	0, 375, 785, 0, 0, 783, 784, 0, 0, 0,
	0, 0, 0, 835, 752, 843, 0, 829, 830, 621,
	0, 0, 402, 0, 0, 623, 402, 14, -2, 218,
	0, 206, 0, 841, 0, 182, 0, 0, 876, 0,
	923, 0, 0, 114, -2, 116, 0, 0, 956, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	121, 122, 123, 0, 0, 0, 0, 0, 0, 202,
	202, 204, 0, 0, 161, 163, 164, 165, 166, -2,
	-2, -2, 1100, -2, 167, 168, 29, 39, 937, 0,
	0, 0, 65, 67, 0, 0, 38, 0, 0, 0,
	0, 0, 0, 43, 45, 0, 46, 0, 85, 86,
	432, 0, 407, 412, 410, 413, 425, 426, 414, 415,
	416, 417, 418, 419, 420, 427, 428, 421, 422, 429,
	430, 456, 467, 508, 468, 508, 0, 0, 402, 481,
	484, 490, 491, 492, 493, 494, 495, 496, 0, 0,
	431, 937, 631, 631, 631, 647, 0, 679, 648, 655,
	0, 513, 306, 0, 0, 268, 273, 274, 276, 0,
	0, 0, 0, 0, 0, 296, 0, -2, 881, 0,
	0, 0, 0, 872, 880, 95, 0, 539, 0, 0,
	732, 736, 741, 737, 0, 739, 742, 0, 744, 0,
	746, 0, 748, 0, 0, 0, 0, 839, 402, 621,
	402, 431, 622, 0, 621, 431, 18, 0, 217, 19,
	0, 133, 180, 0, 0, 183, 880, 0, 144, 142,
	138, 145, 0, 0, 0, 0, 0, 560, 562, 563,
	564, 596, 0, 598, 0, 0, 0, 120, 597, 110,
	0, 0, 906, 158, 159, 0, 0, 0, -2, 0,
	917, 914, 0, 124, 127, 128, 129, 130, 131, 0,
	198, 203, 0, 0, 206, 940, 402, 402, 54, 0,
	68, 0, 0, 0, 40, 937, 0, 0, 75, 48,
	0, 0, 404, 0, 937, 937, 0, 402, 431, 485,
	487, 478, 940, -2, -2, -2, 656, 0, 259, -2,
	-2, 0, 287, 0, 289, 290, 291, 292, 293, 294,
	295, 0, 0, 878, 879, 871, 90, 558, 554, 0,
	0, 547, 0, 0, 0, 0, 0, 775, 751, 836,
	431, 402, 11, 9, 624, 402, 13, 0, 0, 134,
	184, 181, 197, 0, 0, 0, 0, 108, 0, 614,
	-2, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 603, 0, 0, 606, 0, 0, 0, 0, 0,
	0, 617, 0, 599, 0, 601, 602, 117, 596, 0,
	118, 0, 111, 0, 113, 147, 0, 0, 0, 0,
	398, 918, 919, 920, 916, 957, 0, 0, 199, 0,
	49, 431, 431, 66, 69, 71, 53, 940, 402, 402,
	0, 0, 0, 408, 940, 940, 0, 431, 937, 486,
	488, 480, 0, 940, 0, 940, 0, 286, 288, 297,
	0, 882, 621, 0, 0, 556, 738, 743, 745, 747,
	749, 0, 0, 0, 8, 12, 431, 219, 21, 135,
	0, 140, 141, 0, 143, 0, 0, 146, 0, 0,
	613, 621, 0, 621, 558, 903, 0, 561, 592, 594,
	0, 589, 604, 605, 607, 0, 609, 0, 611, 612,
	565, 566, 567, 0, 0, 0, 0, 600, 0, 907,
	112, 0, 0, 150, 151, 908, 909, 910, 0, 912,
	125, 132, 0, 50, 51, 70, 72, 58, 431, 431,
	76, 57, 433, 469, 470, 0, 477, 940, 0, 264,
	0, 266, 0, 0, 861, 559, 0, 865, 867, 750,
	0, 0, 0, 10, 0, 0, 0, 0, 895, 0,
	0, -2, 0, 0, 868, 621, 103, 621, 0, 0,
	586, 593, 0, 0, 587, 0, 588, 608, 610, 579,
	0, 0, 0, 0, 0, 584, -2, 148, 149, 0,
	0, 155, 0, 22, 59, 60, 0, 479, 472, 937,
	937, 298, 863, 0, 555, 0, 0, 776, 0, 779,
	136, 0, 0, 144, 96, 0, 895, 883, 897, 899,
	0, 92, 0, 889, -2, 891, 893, 894, 0, 876,
	102, 868, 904, 905, 590, 0, 595, 0, 0, 0,
	0, 598, 0, 152, 153, 154, 911, 0, 940, 940,
	91, 0, 0, 557, 866, 777, 0, 0, 97, 0,
	900, -2, 0, 0, 0, 109, 101, 876, 0, 0,
	569, 571, 572, 573, 574, 575, 576, 577, 578, 0,
	0, 0, 617, 585, 471, 269, 270, 864, 862, 0,
	0, 0, 898, 0, -2, 0, 890, 892, 100, 591,
	568, 0, 618, 619, 620, 567, 0, 137, 0, 886,
	92, 570, 580, 778, 896, -2,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 401,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 402, 3, 403, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:429
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:434
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:435
		{
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:441
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:447
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 8:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:452
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:472
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:492
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 11:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:513
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 12:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:529
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 13:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:546
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:566
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:581
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:592
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:604
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:615
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:631
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:645
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:659
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:672
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[4].colIdent},
					TableName: yyDollar[8].tableName,
					Time:      yyDollar[5].str,
					Event:     yyDollar[6].strs,
					Body:      yyDollar[12].blockStatement,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:686
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 24:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:697
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: ColumnType{Type: "enum", EnumValues: yyDollar[7].strs},
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:708
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[4].colIdent.String(),
				},
			}
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:718
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:722
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name: yyDollar[4].colIdent.String(),
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:731
		{
			// Convert table names to multiple Grant statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: GrantPrivilege,
					Grant: &Grant{
						IsGrant:    true,
						Privileges: yyDollar[2].strs,
						TableName:  tableName,
						Grantees:   yyDollar[7].strs,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:752
		{
			// Convert table names to multiple Grant statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: GrantPrivilege,
					Grant: &Grant{
						IsGrant:         true,
						Privileges:      yyDollar[2].strs,
						TableName:       tableName,
						Grantees:        yyDollar[7].strs,
						WithGrantOption: true,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:774
		{
			// Convert table names to multiple Revoke statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: RevokePrivilege,
					Grant: &Grant{
						IsGrant:    false,
						Privileges: yyDollar[2].strs,
						TableName:  tableName,
						Grantees:   yyDollar[7].strs,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:795
		{
			// Convert table names to multiple Revoke statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: RevokePrivilege,
					Grant: &Grant{
						IsGrant:       false,
						Privileges:    yyDollar[2].strs,
						TableName:     tableName,
						Grantees:      yyDollar[7].strs,
						CascadeOption: true,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:819
		{
			yyVAL.statement = nil
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:823
		{
			yyVAL.statement = nil
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:827
		{
			yyVAL.statement = nil
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:831
		{
			yyVAL.statement = nil
		}
	case 36:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:835
		{
			yyVAL.statement = nil
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:839
		{
			yyVAL.statement = nil
		}
	case 38:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:843
		{
			yyVAL.statement = nil
		}
	case 39:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:848
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[5].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 40:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:862
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:876
		{
			yyVAL.statement = nil
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:880
		{
			yyVAL.statement = nil
		}
	case 43:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:884
		{
			yyVAL.statement = nil
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:888
		{
			yyVAL.statement = nil
		}
	case 45:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:892
		{
			yyVAL.statement = nil
		}
	case 46:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:896
		{
			yyVAL.statement = nil
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:900
		{
			yyVAL.statement = nil
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:904
		{
			yyVAL.statement = nil
		}
	case 49:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:908
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[11].boolVal),
						InitiallyDeferred: bool(yyDollar[12].boolVal),
					},
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 50:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:927
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Clustered:  true,
					Constraint: true,
					Options:    yyDollar[12].indexOptions,
					Partition:  yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 51:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:945
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Clustered:  false,
					Constraint: true,
					Options:    yyDollar[12].indexOptions,
					Partition:  yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:963
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[3].tableName,
				NewName:    yyDollar[3].tableName,
				ForeignKey: yyDollar[5].foreignKeyDefinition,
			}
		}
	case 53:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:972
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[7].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 54:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:986
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[6].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1000
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    NewColIdent(""),
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1014
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 57:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1023
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 58:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1037
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 59:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1057
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 60:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1075
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1093
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1102
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1111
		{
			yyVAL.statement = nil
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1115
		{
			yyVAL.statement = nil
		}
	case 65:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1119
		{
			yyVAL.statement = nil
		}
	case 66:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1123
		{
			yyVAL.statement = nil
		}
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1127
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					Exclusions:     yyDollar[9].exclusionPairs,
				},
			}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1139
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					Exclusions:     yyDollar[9].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 69:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1152
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      "GIST",
					Exclusions:     yyDollar[11].exclusionPairs,
				},
			}
		}
	case 70:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1165
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      "GIST",
					Exclusions:     yyDollar[11].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[13].expr),
				},
			}
		}
	case 71:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1179
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      yyDollar[9].colIdent.String(),
					Exclusions:     yyDollar[11].exclusionPairs,
				},
			}
		}
	case 72:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1192
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      yyDollar[9].colIdent.String(),
					Exclusions:     yyDollar[11].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[13].expr),
				},
			}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1206
		{
			yyVAL.statement = nil
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1210
		{
			yyVAL.statement = nil
		}
	case 75:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1214
		{
			yyVAL.statement = nil
		}
	case 76:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1218
		{
			yyVAL.statement = nil
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1222
		{
			yyVAL.statement = nil
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1226
		{
			yyVAL.statement = nil
		}
	case 79:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1230
		{
			yyVAL.statement = nil
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1234
		{
			yyVAL.statement = nil
		}
	case 81:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1240
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     String(yyDollar[4].tableName),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1251
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     String(yyDollar[4].tableName),
					Comment:    "NULL",
				},
			}
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1262
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].colIdent.String(),
					Comment:    string(yyDollar[8].bytes),
				},
			}
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1273
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].colIdent.String(),
					Comment:    "NULL",
				},
			}
		}
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1284
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].tableIdent.String() + "." + yyDollar[8].colIdent.String(),
					Comment:    string(yyDollar[10].bytes),
				},
			}
		}
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1295
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].tableIdent.String() + "." + yyDollar[8].colIdent.String(),
					Comment:    "NULL",
				},
			}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1312
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1320
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 91:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1327
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1333
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1337
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1343
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1347
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 96:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1354
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1366
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1378
		{
			yyVAL.str = InsertStr
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1382
		{
			yyVAL.str = ReplaceStr
		}
	case 100:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1388
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 101:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1394
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 102:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1398
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1402
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1407
		{
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1408
		{
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1412
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1416
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1421
		{
			yyVAL.partitions = nil
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1425
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1431
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1435
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1439
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1443
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1449
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1453
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1466
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1470
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1476
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1481
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1485
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1491
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1498
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1505
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1512
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1520
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1530
		{
			yyVAL.str = ""
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1534
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1538
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1542
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1546
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1552
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1559
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1573
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1577
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1581
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1588
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1596
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1606
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1610
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1617
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1627
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1638
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1643
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1648
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1655
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1659
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1670
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1674
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1680
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1684
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1688
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1694
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1698
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1702
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1706
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1712
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1716
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1722
		{
			yyVAL.str = SessionStr
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1726
		{
			yyVAL.str = GlobalStr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1731
		{
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1732
		{
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1736
		{
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1737
		{
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1738
		{
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1739
		{
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1740
		{
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1741
		{
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1742
		{
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1746
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1750
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1754
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1758
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1764
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1768
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1772
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1777
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1783
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1787
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1793
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1797
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1802
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1811
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1815
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1824
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1840
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1853
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1863
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1868
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1874
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1875
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1878
		{
			yyVAL.exprs = nil
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1879
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1883
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1888
		{
			yyVAL.empty = struct{}{}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1890
		{
			yyVAL.empty = struct{}{}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1893
		{
			yyVAL.bytes = nil
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1897
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1901
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1906
		{
			yyVAL.bytes = nil
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1910
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1914
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1918
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1922
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1926
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1931
		{
			yyVAL.expr = nil
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1935
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1940
		{
			yyVAL.expr = nil
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1944
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1949
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1953
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1958
		{
			yyVAL.bytes = nil
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1962
		{
			yyVAL.bytes = nil
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1968
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1975
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1981
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1985
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1990
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1994
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1998
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2002
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2006
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2010
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2014
		{
			yyVAL.TableSpec = yyDollar[1].TableSpec
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2021
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2026
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2031
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2037
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2048
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].colIdent.val) + "." + string(yyDollar[3].colIdent.val)}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2058
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2071
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2076
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2081
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2086
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2092
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2097
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2102
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2107
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2112
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2117
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2122
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2127
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2132
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 259:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2141
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2151
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2156
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2161
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 263:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2168
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 264:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2175
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[10].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[11].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 265:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2184
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 266:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2191
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[10].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[11].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2200
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[4].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[5].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 268:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2207
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[7].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[8].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 269:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:2215
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[12].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[13].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[14].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 270:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:2225
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[12].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = yyDollar[13].boolVal
			yyDollar[1].columnType.ReferenceInitiallyDeferred = yyDollar[14].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2236
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2241
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 273:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2246
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 274:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2251
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2257
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 276:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2263
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2270
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2277
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2283
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2289
		{
			// Check if it's a simple value that should be stored as Value
			if val, ok := yyDollar[2].expr.(*SQLVal); ok {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: val}
			} else if val, ok := yyDollar[2].expr.(BoolVal); ok {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: NewBoolSQLVal(bool(val))}
			} else {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
			}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2302
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2308
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2314
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2318
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2323
		{
			yyVAL.sequence = &Sequence{}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2327
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2332
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2337
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2342
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2347
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2352
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2357
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2362
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2367
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2372
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2377
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2382
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 298:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2387
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2394
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2398
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2402
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, NewIntVal(yyDollar[3].bytes))
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2406
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2410
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2414
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2418
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2423
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2427
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2433
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2438
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2444
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2448
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2452
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2456
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2460
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2464
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2468
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2472
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2476
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2480
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2492
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2504
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2516
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2520
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2525
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2529
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2547
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2551
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2559
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2563
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2577
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2635
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2647
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2651
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2659
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 361:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2668
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2673
		{
			yyVAL.str = ""
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2677
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2699
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2707
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2711
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2721
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2726
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2731
		{
			yyVAL.optVal = nil
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2735
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2740
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2744
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2752
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2756
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2762
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2770
		{
			yyVAL.optVal = nil
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2774
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2778
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2787
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2791
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2800
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2804
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2809
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2813
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2818
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2822
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2826
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2831
		{
			yyVAL.str = ""
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2835
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2839
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2844
		{
			yyVAL.str = ""
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2848
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2858
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2863
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2867
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2871
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2877
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2881
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2887
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2891
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2897
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2901
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2906
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2910
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2914
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2918
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2922
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2926
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2930
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2934
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2938
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2942
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2946
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2950
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2965
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2971
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2975
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2981
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2991
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2995
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3001
		{
			yyVAL.indexPartition = nil
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3005
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3015
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3019
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3023
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3027
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3031
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3035
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3039
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3043
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3047
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3051
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3055
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3059
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3065
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3069
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3075
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3080
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3084
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3088
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3092
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3098
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3102
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3108
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 456:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3113
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: NewIntVal(yyDollar[3].bytes), Direction: yyDollar[5].str}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3118
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3122
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3126
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3130
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3134
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3138
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3142
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3146
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3156
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[3].boolVal),
				InitiallyDeferred: bool(yyDollar[4].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 467:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3165
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[6].boolVal),
				InitiallyDeferred: bool(yyDollar[7].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 468:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3176
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[6].boolVal),
				InitiallyDeferred: bool(yyDollar[7].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 469:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3187
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[9].boolVal),
				InitiallyDeferred: bool(yyDollar[10].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 470:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3198
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = &ConstraintOptions{
				Deferrable:        bool(yyDollar[9].boolVal),
				InitiallyDeferred: bool(yyDollar[10].boolVal),
			}
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 471:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3211
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 472:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3222
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3233
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3237
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3241
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3245
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 477:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3251
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3261
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 479:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3272
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:   yyDollar[6].indexColumns,
				Options:   yyDollar[8].indexOptions,
				Partition: yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{
					Deferrable:        bool(yyDollar[10].boolVal),
					InitiallyDeferred: bool(yyDollar[11].boolVal),
				},
			}
		}
	case 480:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3286
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
				ConstraintOptions: &ConstraintOptions{
					Deferrable:        bool(yyDollar[8].boolVal),
					InitiallyDeferred: bool(yyDollar[9].boolVal),
				},
			}
		}
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3301
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3310
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3319
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Exclusions:     yyDollar[5].exclusionPairs,
			}
		}
	case 484:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3326
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 485:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3334
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "GIST",
				Exclusions:     yyDollar[7].exclusionPairs,
			}
		}
	case 486:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3342
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "GIST",
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3351
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
			}
		}
	case 488:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3359
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3370
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3374
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3380
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: "="}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3384
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: yyDollar[3].colIdent.String()}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3388
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: "&&"}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3392
		{
			// For expressions, we'll use a special column name to indicate it's an expression
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: "="}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3397
		{
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: yyDollar[3].colIdent.String()}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3401
		{
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: "&&"}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3407
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3411
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3415
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3421
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3425
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3429
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3447
		{
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3448
		{
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3452
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3456
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3461
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3468
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3472
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3479
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3483
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3489
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3493
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3498
		{
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3499
		{
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3503
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3507
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3511
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3517
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3521
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3525
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3530
		{
			setAllowComments(yylex, true)
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3534
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3540
		{
			yyVAL.bytes2 = nil
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3544
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3550
		{
			yyVAL.str = UnionStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.str = UnionAllStr
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3558
		{
			yyVAL.str = UnionDistinctStr
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3563
		{
			yyVAL.str = ""
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3567
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3571
		{
			yyVAL.str = SQLCacheStr
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3576
		{
			yyVAL.str = ""
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3580
		{
			yyVAL.str = DistinctStr
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3585
		{
			yyVAL.str = ""
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3589
		{
			yyVAL.str = StraightJoinHint
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3594
		{
			yyVAL.selectExprs = nil
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3598
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3604
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3608
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3614
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3618
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3622
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3626
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3631
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3635
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3639
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3646
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3651
		{
			yyVAL.overExpr = nil
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3655
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3659
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3663
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 557:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3667
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3672
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3676
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3682
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3686
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3696
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3700
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3709
		{
			yyVAL.strs = []string{}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3713
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3719
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3723
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3729
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3733
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3737
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3741
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3745
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3749
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3753
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3757
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3763
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 580:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3773
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3778
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3782
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3788
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3792
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3805
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3809
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3813
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3817
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3823
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3825
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3829
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3831
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3835
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3837
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3840
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3842
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3845
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3849
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3853
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3860
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3866
		{
			yyVAL.str = JoinStr
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3870
		{
			yyVAL.str = JoinStr
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3874
		{
			yyVAL.str = JoinStr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.str = StraightJoinStr
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3886
		{
			yyVAL.str = LeftJoinStr
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3890
		{
			yyVAL.str = LeftJoinStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3894
		{
			yyVAL.str = RightJoinStr
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3898
		{
			yyVAL.str = RightJoinStr
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3904
		{
			yyVAL.str = NaturalJoinStr
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3908
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3918
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3922
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3928
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3932
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.indexHints = nil
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3941
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3945
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3949
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3954
		{
			yyVAL.expr = nil
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3958
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3963
		{
			yyVAL.columns = nil
		}
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3973
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3977
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3981
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3989
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3993
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3997
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4001
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4007
		{
			yyVAL.str = ""
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4011
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4017
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4021
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4027
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4031
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4035
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, All: true}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4039
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 641:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4043
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4047
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 643:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4051
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4055
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4059
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4063
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 647:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4067
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4071
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4075
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4079
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4083
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixRegexStr, Right: yyDollar[3].expr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4087
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixRegexCiStr, Right: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4091
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixNotRegexStr, Right: yyDollar[3].expr}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4095
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixNotRegexCiStr, Right: yyDollar[3].expr}
		}
	case 655:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4099
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 656:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4103
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4107
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4112
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4116
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4120
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.str = IsNullStr
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4130
		{
			yyVAL.str = IsNotNullStr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4134
		{
			yyVAL.str = IsTrueStr
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4138
		{
			yyVAL.str = IsNotTrueStr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.str = IsFalseStr
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4146
		{
			yyVAL.str = IsNotFalseStr
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4152
		{
			yyVAL.str = EqualStr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4156
		{
			yyVAL.str = LessThanStr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4160
		{
			yyVAL.str = GreaterThanStr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4164
		{
			yyVAL.str = LessEqualStr
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4168
		{
			yyVAL.str = GreaterEqualStr
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4172
		{
			yyVAL.str = NotEqualStr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4176
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4180
		{
			yyVAL.str = PosixRegexStr
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4184
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4188
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4192
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.expr = nil
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4207
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4221
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4227
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4231
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4237
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4241
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4245
		{
			// PostgreSQL date literal syntax: DATE '2022-01-01'
			// This is syntactic sugar for '2022-01-01', so just use the string value
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4251
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4255
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4259
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4263
		{
			yyVAL.expr = yyDollar[1].arrayConstructor
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4267
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4271
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4275
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4279
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4283
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4287
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4291
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4295
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4299
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4303
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4307
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4311
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4315
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4319
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4323
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4327
		{
			colType := yyDollar[3].columnType
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: &colType}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4332
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 710:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4336
		{
			timestampType := ColumnType{Type: "timestamp", Timezone: BoolVal(true)}
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: &timestampType}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4341
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4345
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4349
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4357
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4371
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4375
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4379
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4387
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4395
		{
			// Convert ConvertType to ColumnType
			convertType := yyDollar[3].convertType
			colType := ColumnType{
				Type:    convertType.Type,
				Length:  convertType.Length,
				Scale:   convertType.Scale,
				Charset: convertType.Charset,
			}
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: &colType}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4411
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4415
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4419
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4429
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 728:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4433
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4437
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 730:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4441
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 731:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4445
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 732:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4449
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 733:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4453
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 734:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4463
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4467
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 736:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4471
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 737:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4476
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 738:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4480
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 739:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4484
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4488
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("coalesce"), Exprs: yyDollar[3].selectExprs}
		}
	case 741:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 742:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4496
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 743:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4500
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 744:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4504
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 745:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4508
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 746:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4512
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 747:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4516
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 748:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4520
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 749:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4524
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 750:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4528
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 751:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4532
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4536
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4540
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4545
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4549
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4553
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4557
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4568
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4572
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 760:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4576
		{
			yyVAL.expr = &FuncExpr{
				Name:  NewColIdent("current_timestamp"),
				Exprs: SelectExprs{&AliasedExpr{Expr: NewIntVal(yyDollar[3].bytes)}},
			}
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4583
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4587
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4591
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4596
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4601
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4606
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4611
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4615
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4629
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 772:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4633
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4637
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 774:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4641
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4647
		{
			yyVAL.str = ""
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4651
		{
			yyVAL.str = BooleanModeStr
		}
	case 777:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4655
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 778:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4659
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4663
		{
			yyVAL.str = QueryExpansionStr
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4669
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4673
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4679
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4683
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4687
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4691
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4695
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4699
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4705
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4709
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4713
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4717
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4721
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4725
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4729
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4733
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4741
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4745
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4749
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4753
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4757
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4761
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4765
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4769
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4773
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4777
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4781
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4785
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4789
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4793
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4797
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4801
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4805
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4811
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4815
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4819
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4823
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4827
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4831
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4835
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4839
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4843
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type + "[]"}
		}
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4847
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + "[]"}
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4851
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4855
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4859
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4863
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4867
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 829:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4871
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " with time zone"}
		}
	case 830:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4875
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " without time zone"}
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4879
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].colIdent.val}
		}
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4883
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].colIdent.val) + "." + string(yyDollar[3].colIdent.val)}
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4888
		{
			yyVAL.expr = nil
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4892
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4897
		{
			yyVAL.str = string("")
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4901
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4907
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4911
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 839:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4917
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4922
		{
			yyVAL.empty = struct{}{}
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4924
		{
			yyVAL.empty = struct{}{}
		}
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4927
		{
			yyVAL.expr = nil
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4931
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4937
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4941
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4945
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 847:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4949
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4955
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4961
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4965
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4970
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4975
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4979
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4983
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4987
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4991
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4995
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4999
		{
			yyVAL.expr = &NullVal{}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5005
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5009
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5014
		{
			yyVAL.exprs = nil
		}
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5018
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5023
		{
			yyVAL.expr = nil
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5027
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5033
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5037
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5043
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5048
		{
			yyVAL.orderBy = nil
		}
	case 869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5052
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5058
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5062
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5068
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5073
		{
			yyVAL.str = AscScr
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5077
		{
			yyVAL.str = AscScr
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5081
		{
			yyVAL.str = DescScr
		}
	case 876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5086
		{
			yyVAL.limit = nil
		}
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5090
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5094
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5098
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5103
		{
			yyVAL.str = ""
		}
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5107
		{
			yyVAL.str = ForUpdateStr
		}
	case 882:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5111
		{
			yyVAL.str = ShareModeStr
		}
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5124
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5128
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5132
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 886:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5137
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 887:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5141
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 888:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5145
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5152
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5156
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5162
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5166
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5170
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5174
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5179
		{
			yyVAL.updateExprs = nil
		}
	case 896:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5183
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5189
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 898:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5193
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5199
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5203
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5209
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5215
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5225
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5229
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5235
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5241
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5245
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5251
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5255
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5259
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 911:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5264
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5268
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5274
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5280
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5287
		{
			yyVAL.bytes = []byte("charset")
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5294
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5298
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5302
		{
			yyVAL.expr = &Default{}
		}
	case 921:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5307
		{
			yyVAL.empty = struct{}{}
		}
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5309
		{
			yyVAL.empty = struct{}{}
		}
	case 923:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5312
		{
			yyVAL.str = ""
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5314
		{
			yyVAL.str = IgnoreStr
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5318
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5322
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5329
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5333
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5337
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5341
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5347
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5351
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5356
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5363
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 937:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5369
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5373
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5377
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 940:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5383
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5387
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5391
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 943:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5398
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 944:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5402
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: nil}
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5409
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5413
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5420
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5424
		{
			yyVAL.arrayElement = NewIntVal(yyDollar[1].bytes)
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5428
		{
			yyVAL.arrayElement = NewFloatVal(yyDollar[1].bytes)
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5432
		{
			yyVAL.arrayElement = NewHexNum(yyDollar[1].bytes)
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5436
		{
			yyVAL.arrayElement = NewValArg(yyDollar[1].bytes)
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5440
		{
			yyVAL.arrayElement = &NullVal{}
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5444
		{
			yyVAL.arrayElement = BoolVal(true)
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5448
		{
			yyVAL.arrayElement = BoolVal(false)
		}
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5452
		{
			// Convert ConvertType to ColumnType
			convertType := yyDollar[3].convertType
			colType := ColumnType{
				Type:    convertType.Type,
				Length:  convertType.Length,
				Scale:   convertType.Scale,
				Charset: convertType.Charset,
			}
			yyVAL.arrayElement = &CastExpr{Expr: yyDollar[1].expr, Type: &colType}
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5466
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5470
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5499
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5503
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5507
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5511
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5515
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5519
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5523
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5527
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5531
		{
			yyVAL.str = "ALL PRIVILEGES"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5535
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5541
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 990:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5545
		{
			yyVAL.strs = append(yyVAL.strs, yyDollar[3].str)
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5551
		{
			yyVAL.strs = []string{yyDollar[1].colIdent.String()}
		}
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5555
		{
			yyVAL.strs = append(yyVAL.strs, yyDollar[3].colIdent.String())
		}
	case 1133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5712
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5721
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
